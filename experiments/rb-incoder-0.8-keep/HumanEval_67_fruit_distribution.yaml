name: HumanEval_67_fruit_distribution
language: rb
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 -\
  \ 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n#\
  \ fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n# fruit_distribution(\"\
  100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\ndef fruit_distribution(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: ["  apples = s.count(\"apples\")\n  oranges = s.count(\"oranges\")\n\
    \  fruit = n - apples - oranges\n  if fruit > apples + oranges\n    fruit = apples\
    \ + oranges\n  else\n    fruit -= apples\n  end\n  puts fruit\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nPlease don't encourage \"competitive programming\"\
    \ by answering questions that aren't a question. This doesn't help the OP learn\
    \ how to solve their own problem, and it makes your answer look like it was written\
    \ before you even knew how to solve it. It also makes the answers look like your\
    \ answer was written when you're trying to answer a question that wasn't asked\
    \ in the first place. Plus, your answer is wrong because you didn't take into\
    \ account that the OP wanted the answer to include only **fruit**, just \"apples,\
    \ oranges, and mango\" which makes it a very wrong answer (it will return a count\
    \ of the oranges and apples).\n<|/ c |>\n<| c |>\nThe OP was clear about their\
    \ input in their question: \"A string that represents a number of apples and oranges\
    \ that are distributed in a basket of fruit this basket contains apples, oranges,\
    \ and mango fruits.\"\n<|/ c |>\n<| c |>\n\"A string that represents a number\
    \ of apples and oranges that are distributed in a basket of fruit this basket\
    \ contains apples, oranges, and mango fruits\" - that's a very clear explanation\
    \ of the problem OP had, that OP even provided an example of. Now you are providing\
    \ a completely different answer to that same question, that's not very helpful\
    \ to the OP.\n<|/ c |>\n<| c |>\nI do appreciate your comments. I tried to clarify\
    \ and make the answer as clear as possible. Regarding the example, OP's original\
    \ question was \"Given the string that represents the total number of oranges\
    \ and apples and an integer that represent the total number of the fruits in the\
    \ basket return the number of the mango fruits in the basket.\" This is exactly\
    \ what I gave. I don't see any problem with the solution to the question. Your\
    \ answer was unhelpful for others. I suggested a change to the OPs question, and\
    \ provided an answer that worked for the OP. I did not say that this was a competitive\
    \ solution. Why would a solution I gave, be unhelpful to the OP?\n<|/ c |>\n<|\
    \ c |>\nBecause the OP's own answer was wrong, and you were providing another\
    \ answer that is a different answer to what OP was asked.\n<|/ c ", "  s.split(\"\
    \ \").map{|s| s.to_i}.sort\n  (n - s.split(\" \").map{|s| s.to_i}.sum) % n ==\
    \ 0 ? s.split(\" \").map{|s| s.to_i}.sum : n\nend", "    return n - s.split('\
    \ ').map { |fruit| fruit[/\\((\\d+)\\)$/, 1].to_i }.sum\nend", "  s.scan(/\\d+/).map(&:to_i).reduce(:+)\
    \ - n - s.scan(/\\d+/).map(&:to_i).reduce(:+)\nend", "  # Write your code here\n\
    \  n.to_i\n  s.to_i\n  apples = s.split(\"apples and \")[1]\n  oranges = s.split(\"\
    oranges and \")[1]\n  fruits = s.split(\" and \")\n  a = fruits[0]\n  b = fruits[1]\n\
    \  c = fruits[2]\n  a.to_i\n  b.to_i\n  c.to_i\n  mango = n - a - b - c\n  mango.to_i\n\
    \  mango\nend", "  apples = s.split(' apples')[0]\n  oranges = s.split(' oranges')[0]\n\
    \  mango = s.split(' mango')\n  fruits = []\n  fruits_count = apples.to_i + oranges.to_i\
    \ + mango.count", "    number = 0\n    \n    s.to_i\n    \n    for i in n.to_i.split(\"\
    \ \").to_a\n        number += i.to_i\n    end\n    \n    number\nend\n</code>\n\
    And then just call that function with the values you provided:\n<code>\nfruit_distribution(\"\
    5 apples and 6 oranges\", 19)\nfruit_distribution(\"0 apples and 1 oranges\",3)\n\
    fruit_distribution(\"2 apples and 3 oranges\", 100)\nfruit_distribution(\"100\
    \ apples and 1 oranges\",120)\nfruit_distribution(\"10 apples and 1 oranges\"\
    ,10)\n</code>\nOutput:\n<code>\n8\n2\n95\n19\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\n`to_i` converts a string to an integer\n<|/ c |>\n<| a |>\nHere's\
    \ another one\n<code>", " \n  # Write your code here\n  return 0\nend", "  count\
    \ = 0\n  while n != 0\n    n.times do\n      if s.to_i.odd?\n        s += \"apples\"\
    \n      else\n        s += \"oranges\"\n      end\n    end\n    n -= 1\n  end\n\
    \  s\nend", "  s = s.to_s\n  s.gsub!(/\\d+/, '\\0&')\n  s.gsub!(/apples/, '\\\
    0+')\n  s.gsub!(/oranges/, '\\0-')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/oranges/,\
    \ '\\0-')\n  s.gsub!(/apples/, '\\0-')\n  s.gsub!(/apples/, '\\0-')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/, '\\0&')\n  s.gsub!(/apples/,\
    \ '\\0&')\n  s.gsub!(/apples/, '\\0&')\n", "  apples = s.split(\"apples and \"\
    )[1].split(\" and \")[0].to_i\n  oranges = s.split(\"oranges and \")[1].split(\"\
    \ and \")[0].to_i\n  mangos = s.split(\"mango and \")[1].split(\" and \")[0].to_i\n\
    \  \n  apples_n = apples - mangos - oranges - n\n  oranges_n = oranges - mangos\
    \ - apples - n\n  \n  s.split(\"apples and \")[1].split(\" and \")[0].to_i - s.split(\"\
    mango and \")[1].split(\" and \")[0].to_i - s.split(\"oranges and \")[1].split(\"\
    \ and \")[0].to_i\nend\n</cell>\n<cell>", "  return s.size-n.split(\" \").map(&:to_i).sum.to_i\n\
    end", "  n = n.to_i\n  apples = s.split(\"apples\")[0]\n  oranges = s.split(\"\
    oranges\")[0]\n  ms = s.split(\"mango\")[0].to_i\n  \n  apples = apples.to_i\n\
    \  oranges = oranges.to_i\n  \n  return ms - apples - oranges - n if oranges >\
    \ apples \n  else apples - ms - oranges - n  if apples > oranges \n  else ms -\
    \ oranges - apples - n  if apples == oranges\nend", "  m = 0\n  s.scan(/\\d+/)\
    \ do |x| \n    if x.to_i < n.to_i\n      m += x.to_i\n    end\n  end\n  m \nend",
  "  # Your code goes here\n  apples = s.split('and')[0].split(' ')\n  oranges = s.split('and')[1].split('\
    \ ')\n  apples.each {|apple| \n    if apple.to_i.to_s == oranges[0].to_i\n   \
    \   oranges = oranges[1..-1]\n      oranges.each {|orange|\n        n -= orange.to_i\n\
    \      }\n      return n\n    end\n  }\n  return n\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThanks for this! Although I do have the exact same question but\
    \ for the whole sentence. Is there a way to split it up and return the number\
    \ of fruit after counting apples, oranges, and mango?\n<|/ c |>\n<| c |>\nI updated\
    \ the answer with something that I think will work. I can't test it because I\
    \ don't have the data.\n<|/ c |>\n<| c |>\nSweet! Thank you for your help!\n<|/\
    \ c |>\n<| a tags=ruby |>\n<code>", "  s = s.scan(/\\d+/).reduce(0,&:-) \n  s.to_i\n\
    end", "  s = s.gsub(\"apples\", \"1\").gsub(\"oranges\", \"1\").gsub(\"mangoes\"\
    , \"1\")\n  n.times { s.to_i.times { |i| (n % i) == 0 ? true : false } }\nend",
  "  \n  apples = n[0].to_i\n  oranges = n[1].to_i\n  fruits = apples + oranges\n\
    \  \n  if apples == oranges\n    fruits == fruits.to_f\n  else\n    fruits ==\
    \ fruits.to_i\n  end \nend\n</code>\n<|/ a dscore=1 tags=ruby,methods |>\n<| a\
    \ tags=ruby,methods |>\nYou could do it with regular expressions:\n<code>\nrequire\
    \ 'fruity'", "  s.split(' ').count { |i| i[/^[0-9]+/] && i.to_i < n.to_i }\nend",
  "  total = (s.split(' '))[1].to_i \n  s.split(' ').map { |x| x.to_i }\n  total\n\
    end", "  s.split(\" \").map { |x| x.to_i }.inject{|total| total - n }\nend\n</code>\n\
    <|/ a |>\n<| c |>\nCan you explain to me what `inject{|total| total - n }` does?\n\
    <|/ c |>\n<| c |>\nIt calculates the total - n. I hope this helps!\n<|/ c |>\n\
    <| c |>\n`inject` iterates over the array and applies a block to each value. In\
    \ this case, it is subtracting the value of `n` from the total.\n<|/ c |>\n<|\
    \ c |>\nYes it does, can you explain to me how this works?\n<|/ c |>\n<| c |>\n\
    It's a short way of saying `total = 0`, `total - n` returns `total` minus `n`.\n\
    <|/ c |>\n<| a tags=ruby,string dscore=1 |>\nOne way is to use split:\n<code>",
  "  apples, oranges, mango = s.split(\" \").map { |x| x.to_i }\n  return mango -\
    \ (apples * oranges) / n\nend", " \n    # your code goes here\n    if s.strip.empty?\
    \ || n.strip.empty?\n        0\n    elsif !s.strip =~ /^\\d+$/\n        0\n  \
    \  elsif !n.strip =~ /^\\d+$/\n        n\n    elsif s.strip > n.strip\n      \
    \  0\n    elsif s.strip.to_i > n.strip.to_i\n        n\n    elsif s.strip.to_i\
    \ < n.strip.to_i\n        s\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I believe this would be a better answer if you explained how it works and why\
    \ you think that it might be the right answer.\n<|/ c |>\n<| c |>\nThanks so much\
    \ for this answer !! I was wondering what is the logic behind this solution ,\
    \ i was just trying to write an if else logic and was getting an error.\n<|/ c\
    \ |>\n<| c |>\n, you are welcome. `elsif` condition checks if the second argument\
    \ is bigger. `else if` checks if the first argument is bigger (the first argument\
    \ is the biggest).\n<|/ c |>\n<| c |>\nI didn't know about that before, it makes\
    \ a lot more sense now. Thank you.\n<|/ c |>\n<| a |>\nThe solution I came up\
    \ with is the following:\n<code>", "  apples = 0\n  oranges = 0\n  mangoes = 0\n\
    \  apples = s.split(\" \").count(\"apples\")\n  oranges = s.split(\" \").count(\"\
    oranges\")\n  mangoes = s.split(\" \").count(\"mango\")\n  total = apples + oranges\
    \ + mangoes \n  return n - total - mangoes\nend\nputs fruit_distribution(\"6 apples\
    \ and 1 mango\", 4).to_s\nputs fruit_distribution(\"2 apples and 3 oranges\",\
    \ 100).to_s\nputs fruit_distribution(\"100 apples and 1 oranges\",120).to_s\n\
    puts fruit_distribution(\"0 apples and 1 oranges\",3).to_s\nputs fruit_distribution(\"\
    5 apples and 6 oranges\", 19).to_s", "  apples = s.split(\" \")[0].to_i\n  oranges\
    \ = s.split(\" \")[1].to_i\n  fruits = s.split(\" \")[2].to_i\n  total = 0\n \
    \ total += apples-oranges\n  total += fruits - apples + oranges\n  while total\
    \ < n\n    apples = s.split(\" \")[0].to_i\n    oranges = s.split(\" \")[1].to_i\n\
    \    fruits = s.split(\" \")[2].to_i\n    total += apples-oranges\n    total +=\
    \ fruits - apples + oranges\n  return total\nend", "   arr = s.split(//)\n   num\
    \ = 0\n   fruit = nil\n   if arr[0] < n\n     fruit = arr[0]\n     num += fruit\n\
    \   end\n   if arr[1] < n\n     fruit = arr[1]\n     num += fruit\n   end\n  \
    \ if arr[2] < n\n     fruit = arr[2]\n     num += fruit\n   end\n   return num\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou do realize that your solution is\
    \ very similar to what the OP already has (as far as I can tell), right?\n<|/\
    \ c |>\n<| c |>\nI did notice that, but didn't put much effort into correcting\
    \ it to make it work like his, since it was already giving incorrect answers.\
    \ His is far more elegant and easier to understand.\n<|/ c |>\n<| c |>\nIf you\u2019\
    re going to go through all of those steps, you might as well go through it all\
    \ just for fun.\n<|/ c |>\n<| c |>\nYes I agree with your point about doing it\
    \ for fun, I was just trying to show how it can be done with one `if` statement\
    \ instead of three. And I was wondering if there was a better way to use `split`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  apples, oranges, mangos = s.split(/ and\
    \ /).map(&:to_i)\n  return mangos - apples - oranges - n - apples * oranges\n\
    end\n</cell>\n<text>\nThe next function will be the function fruit_counts\nThis\
    \ function will take in two parameters a string of apples and oranges and the\
    \ total number of \nfruits in the basket and will return the number of apples\
    \ and oranges that are in the basket.", "  # return 0 if there are no fruits in\
    \ the basket\n  return 0 if n == 0 \n  \n  # initialize total and count to 0 \n\
    \  total = count = 0", "    apples = s.split(\" \")[0]\n    oranges = s.split(\"\
    \ \")[1].split('apples')[0].split('oranges')[0]\n    apples += oranges\n    \n\
    \    return int(apples)-int(oranges)+int(n)\nend", "    if n.to_i != 0 \n    elsif\
    \ s.to_i != 0 \n    elsif s.to_i != n.to_i\n    else\n        puts \"You gave\
    \ me a number bigger than the amount you have, dude!\"\n        exit 1\n    end\n\
    \    total_apples = s.to_i\n    apples = s.to_i\n    total_oranges = n.to_i\n\
    \    oranges = n.to_i\n    total = (apples + oranges).to_i\n    return total -\
    \ total_oranges - total_apples\nend\n</code>\n<|/ q |>\n<| c |>\nCan you provide\
    \ an example of expected inputs/outputs? It's not clear to me what you're asking\
    \ here. If you want to get a `String` as the input, use `gets` or `readline`.\n\
    <|/ c |>\n<| c |>\n\"#=> You have 3 apples, 2 oranges and 0 mangoes in the basket.\
    \ How many mangoes are in the basket? #=> 2\" this is the output for fruit_distribution(\"\
    3 apples, 2 oranges and 0 mangoes\", 0)", "  apples, oranges, mango = s.split('\
    \ ').map(&:to_i)\n  total = oranges + apples + mango\n  fruits_in_basket = n.to_i\
    \ - total\n  mango_count = (apples - mango) / fruits_in_basket \n  orange_count\
    \ = (fruits_in_basket - oranges) / fruits_in_basket\n  \n  if apples < mango\n\
    \    [apples, mango, oranges] = [mango, apples, oranges]\n    [oranges, mango_count,\
    \ apple_count] = [orange_count, mango_count, apples]\n  end\n  \n  apples - mango\
    \ + oranges + mango_count * orange_count\nend\n</cell>\n<cell>", "    apples_oranges\
    \ = s.split(\" \") \n    apples = apples_oranges[0].to_i \n    oranges = apples_oranges[1].to_i\
    \ \n    return oranges - apples - n \nend", "  puts (\"Number of Mango Fruits:\
    \ #{n - s.split(\" \").map(&:to_i).sum}\")\nend\n</code>\nHope this helps. :)\n\
    <|/ a |>\n<| c |>\nThis code works fine but doesn't work when I try it out on\
    \ ruby 2.2.0 console. ", "  s = s.to_s\n  a = s.split(\" \")\n  apples = a.count\
    \ (\"apples\")\n  oranges = a.count (\"oranges\")\n  fruits_in_basket = n - apples\
    \ - oranges\n  fruit_in_basket = fruits_in_basket.to_i\n  mango_count = 0\n  apples_count\
    \ = 0\n  oranges_count = 0\n  a.each do |apple|\n    if apple == \"apples\"\n\
    \      apples_count += 1\n    elsif apple == \"oranges\"\n      oranges_count\
    \ += 1\n    else\n      mango_count += 1\n    end\n  end\n  return mango_count\
    \ + apples_count - oranges_count - fruits_in_basket\nend", "  s.split().reduce(:+)\
    \ - n\nend", "  a1 = s.split(/\\W+/)\n  a2 = a1.map(&:to_i)\n  a3 = a2.select\
    \ { |e| e > 0 && e <= n }\n  a3.size\nend", "  s.split(\" \").inject(0) do |n,s|\
    \ \n    n.to_i + s.split(\" \").inject(0) { |n,s| n += 1 if s == \"oranges\" ||\
    \ s == \"apples\" || s == \"mango\"} \n  end - ((n-s.split(\" \").inject(0) {\
    \ |n,s| n += 1 if s == \"oranges\" || s == \"apples\" || s == \"mango\"} || 0)).to_i\n\
    end", "  apples = s.split(\"apples\")[0].to_i\n  oranges = s.split(\"oranges\"\
    )[0].to_i\n  fruits = s.split(\" and \")[0].to_i\n  \n  fruits\nend\n</code>\n\
    <|/ a dscore=0 tags=ruby,arrays |>\n<| c |>\n`s.scan(/\\d+/)[0].to_i` should do\
    \ the job.\n<|/ c |>\n<| c |>\n, thanks for your comment. I'm new to Ruby. I don't\
    \ know how to use `scan`. How would I be able to use it? Also, can you explain\
    \ the regex to me?\n<|/ c |>\n<| c |>\n`scan` is just like `split`, but returns\
    \ a `Array` of matches. It is designed to split a string into an array of strings\
    \ based on a pattern. Here's a link to the docs: http://www.ruby-doc.org/core-2.2.0/String.html#method-i-scan\n\
    <|/ c |>\n<| c |>\n, thanks for the link. Do you know why you use `to_i`?\n<|/\
    \ c |>\n<| c |>\n, thanks for your explanation. So, if I understand correctly,\
    \ `to_i` is used to convert the string to an integer.\n<|/ c |>\n<| a dscore=0\
    \ tags=ruby,arrays |>\nThe solution I came up with is as follows.\nI added the\
    \ ability to input the number of apples, oranges, and mangoes as well as the fruit\
    \ distribution string itself. This should make it easier to understand.\nThe code\
    \ below will take the input from the user and convert it to an array of integers\n\
    <code>", "  s.split(\" \").count { |i| i % 10 == 0 }\nend\n</cell>\n<code language=conda-root-py>",
  "    s = s.split(\" and \")\n    \n    apple = 0\n    orange = 0\n    mango = 0\n\
    \    \n    for fruit in s\n        fruit.to_i\n        fruit.downcase\n      \
    \  if fruit == \"apple\"\n            apple += 1\n        else if fruit == \"\
    orange\"\n            orange += 1\n        else if fruit == \"mango\"\n      \
    \      mango += 1\n        end\n    end\n    \n    apple\n    orange\n    mango\n\
    end\n</cell>\n<code language=julia-1.5>", "  oranges = s[/\\d+/].to_i\n  apples\
    \ = s[/\\d+/].to_i\n  fruits = apples+oranges+n-3\nend\nputs fruit_distribution(\"\
    5 apples and 6 oranges\", 19)", "  if s =~ /\\d+\\s+apples/ \n    apples += $&.to_i\n\
    \  end\n  if s =~ /\\d+\\s+oranges/ \n    oranges += $&.to_i\n  end\n  if apples\
    \ < 0 || apples > n || oranges < 0 || oranges > n \n    return 0\n  end\n  apples\
    \ = apples.to_i\n  oranges = oranges.to_i\n  if apples > oranges\n    mangos =\
    \ apples - oranges\n    return mangos\n  else\n    mangos = oranges - apples\n\
    \    return mangos\n  end\nend\nputs fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\nputs fruit_distribution(\"0 apples and 1 oranges\",3)\nputs fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\nputs fruit_distribution(\"100 apples and 1 oranges\"\
    ,120)\nputs fruit_distribution(\"200 apples and 0 oranges\",50)\nputs fruit_distribution(\"\
    1 apple and 1 orange\",1)\nputs fruit_distribution(\"1000 apples and 1 oranges\"\
    ,6000)\nputs fruit_distribution(\"10000000000000 apples and 1 oranges\",100000000)\n\
    puts fruit_distribution(\"10000000000000000000000000 apples and 1 oranges\",100000000000000000)\n\
    puts fruit_distribution(\"1 million apples and 1 oranges\",100000000000000000)\n\
    puts fruit_distribution(\"10000000000001 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"10000000000010 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"1 billion apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"1000000000000100 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"10000000000001000 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"100000000000010000000 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"10000000000001000000000 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"10000000000010000000 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"1000000000001000000000 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"1000000000000010000000 apples and 1 oranges\",100000000000000001)\n\
    puts fruit_distribution(\"10000000000000100", "    apples, oranges = s.split(\"\
    \ \") \n    apples_num, oranges_num = [int(x) for x in apples.split(\" \")], [int(x)\
    \ for x in oranges.split(\" \")]\n    apples_count, oranges_count, mangled_count\
    \ = 0,0,0,0\n    \n    while oranges_num[0] >= apples_num[0]:\n        oranges_num[0]-=1\n\
    \        oranges_count += 1\n    while oranges_num[1] >= apples_num[1]:\n    \
    \    oranges_num[1]-=1\n        oranges_count += 1\n    while oranges_num[2] >=\
    \ apples_num[2]:\n        oranges_num[2]-=1\n        oranges_count += 1\n    while\
    \ oranges_num[3] >= apples_num[3]:\n        oranges_num[3]-=1\n        oranges_count\
    \ += 1\n    while oranges_num[4] >= apples_num[4]:\n        oranges_num[4]-=1\n\
    \        oranges_count += 1\n    while oranges_num[5] >= apples_num[5]:\n    \
    \    oranges_num[5]-=1\n        oranges_count += 1\n    while oranges_num[6] >=\
    \ apples_num[6]:\n        oranges_num[6]-=1\n        oranges_count += 1\n    while\
    \ oranges_num[7] >= apples_num[7]:\n        oranges_num[7]-=1\n        oranges_count\
    \ += 1\n    while oranges_num[8] >= apples_num[8]:\n        oranges_num[8]-=1\n\
    \        oranges_count += 1\n    while oranges_num[9] >= apples_num[9]:\n    \
    \    oranges_num[9]-=1\n        oranges_count += 1\n    while oranges_num[10]\
    \ >= apples_num[10]:\n        oranges_num[10]-=1\n        oranges_count += 1\n\
    \    while oranges_num[11] >= apples_num[11]:\n        oranges_num[11]-=1\n  \
    \      oranges_count += 1\n    while oranges_num[12] >= apples_num[12]:\n    \
    \    oranges_num[12]-=1\n        oranges_count += 1\n    while oranges_num[13]\
    \ >= apples_num[13]:\n        oranges_num[13]-=1\n        oranges_count += 1\n\
    \    while oranges_num[14] >= apples_num[14]:\n        oranges_num[14]-=1\n  \
    \      oranges_count += 1\n    while oranges_num[15] >= apples_num[15]:\n    \
    \    oranges_num[15]-=1\n        oranges_count += 1\n    while oranges_num[16]\
    \ >= apples_num[16]:\n        oranges_num[16]-=1\n        oranges_count += 1\n\
    \    while oranges_num[17] >= apples_num[17]:\n        oranges_num[17]-=1\n  \
    \      oranges_count += 1\n    while oranges_num[18] >= apples_num[18]:\n    \
    \    oranges_num[18]-=1\n        oranges_count += 1", "  apples, oranges = s.split(\"\
    \ \")\n  apples = apples.to_i\n  oranges = oranges.to_i\n  total = apples + oranges\
    \ + n\n  m = 0\n  if total >= 5\n    m = total - 5\n  elsif total >= 1\n    total\
    \ = (total - 1) * 2\n  elsif total >= 2\n    total = (total - 2) * 3\n  elsif\
    \ total >= 3\n    total = (total - 3) * 4\n  elsif total >= 4\n    total = (total\
    \ - 4) * 5\n  elsif total >= 5\n    total = (total - 5) * 6\n  end\n  return m\n\
    end\n</code>\n<|/ a dscore=0 tags=ruby,if-statement,string,integer |>\n<| a tags=ruby,if-statement,string,integer\
    \ dscore=0 |>\nHere's a more ruby-like way of solving this:\n<code>", "    oranges\
    \ = /apple|orange/ =~ s\n    apples = /apple|orange|mango/ =~ s\n    total = oranges\
    \ + apples + mango\n    fruits = n.to_i\n    apples += mango \n    \n    p = \
    \ oranges + apples + mango\n    p -= fruits\n    p /= total\n    p *= fruits\n\
    \    p -= mango\n    p.to_i\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can\
    \ do something like this:\n<code>", "  num = s.split(\"apples and oranges\")[1].split(\"\
    \ and \").map(&:to_i)\n  sum = num.inject(:+) \n  num.count(sum - n)\nend", " \
    \ apples_count = 0\n  oranges_count = 0\n  fruits_count = 0\n  s.to_i.split('\
    \ ').each do |v|\n    v = v.to_i\n    if v >= 0 && v <= 6\n      fruits_count\
    \ += v\n    elsif v >= 7 && v <= 9\n      oranges_count += v\n    elsif v >= 0\
    \ && v <= 3\n      apples_count += v\n    end\n  end\n  \n  fruits_count -= (apples_count\
    \ + oranges_count)\n  fruits_count += n - apples_count - oranges_count\n  fruits_count\n\
    end\n</cell>\n<text>\nExcercise\nGiven the string \"3 apples and 2 oranges\",\
    \ return the number of mango fruits.", "  \n  # Your code here\n  oranges = 0\n\
    \  apples = 0\n  mango = 0\n  i = 0\n  \n  while i < n\n    \n    if s.include?\
    \ \"apples\"\n      apples += s.index(\"apples\")\n      i += 1\n      \n    if\
    \ s.include? \"oranges\"\n      oranges += s.index(\"oranges\")\n      i += 1\n\
    \      \n    if s.include? \"mango\"\n      mango += s.index(\"mango\")\n    \
    \  i += 1\n    \n  end\n  \n  return mango\nend", "  str = s.to_s\n  array = str.split('and')\n\
    \  \n  apples = array[0].split(' ')[0].to_i\n  oranges = array[0].split(' ')[1].to_i\n\
    \  mangos = array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += array[0].split(' ')[2].to_i\n  \n  array = array[1].split('and')\n\
    \  \n  apples += array[0].split(' ')[0].to_i\n  oranges += array[0].split(' ')[1].to_i\n\
    \  mangos += ", "  apples, oranges, mango = s.split(' ')[0].split('and'), s.split('\
    \ ')[1].split('and'), s.split(' ')[2].split('and')\n  apples, oranges, mango =\
    \ apples.map(&:to_i), oranges.map(&:to_i), mango.map(&:to_i)\n  (apples * oranges\
    \ - mango).modulo(n)\nend", "  apples, oranges, mangos = s.split\n  return n -\
    \ apples.to_i - oranges.to_i - mangos.to_i\nend\n</cell>\n<text>\nProblem 3: Coin\
    \ Flip\nWrite a function that returns true if the given integer is coprime. Assume\
    \ that any integer greater than 1 is a coprime.", "  sum, apples, oranges, mango\
    \ = s.split.map {|x| x.to_i}\n  puts sum - apples - oranges\nend", "    fruits\
    \ = s.split(' ')\n    fruits_count = fruits.count('apples')\n    apples_count\
    \ = fruits.count('apples')\n    oranges_count = fruits.count('oranges')\n    mango_count\
    \ = fruits.count('mango')\n    apples_oranges = apples_count + oranges_count\n\
    \    apples_mango = apples_count + mango_count\n    oranges_mango = oranges_count\
    \ + mango_count\n    apples_total = apples_count + apples_mango\n    oranges_total\
    \ = oranges_count + oranges_mango\n    if apples_total == apples_oranges and apples_total\
    \ == apples_mango and oranges_total == oranges_mango\n        return mango_count\n\
    \    if apples_total == apples_mango and oranges_total == oranges_mango\n    \
    \    return mango_count\n    if oranges_total == oranges_mango\n        return\
    \ mango_count\n    return 0\nend\n</code>\n<|/ a |>\n<| a tags=ruby,string |>\n\
    You could first split the string on whitespace to get all the fruits, then get\
    \ the count of each:\n<code>", "  apples, oranges = s.split(\" \") # split s into\
    \ two strings\n  orange_total = (oranges.to_f*10).to_i # Convert a string to an\
    \ integer\n  apple_total = (apples.to_f*10).to_i\n  \n  fruits= (orange_total-apple_total).to_i\n\
    \  \n  return fruits.to_s if fruits < n and fruits >= 0 \n  else n\nend", "  counts\
    \ = Hash.new(0)\n  fruits = s.split(/ and /).map(&:to_i)\n  fruits.each { |f|\n\
    \    counts[f] += 1;\n    counts[fruits.size - 1] -= 1;\n  }\n  return counts[fruits.size\
    \ - 1]\nend\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| c |>\nThat's not what the\
    \ OP asked. You are showing him how to find all possible combinations. He is trying\
    \ to find the number of occurrences of the number of 'mango fruits'. Your answer\
    \ would output the number of 'mango fruits' in combination with '3 apples and\
    \ 2 oranges'. That's not what the OP asked.\n<|/ c |>\n<| c |>\nYes, I misunderstood\
    \ the question, I thought the answer was going to be something like this [6, 3,\
    \ 1] which was the number of 'mango fruits' and how many 'apples and oranges'\
    \ were in each combination. As it is I realized that my answer is wrong and it\
    \ could be the answer to the question as written.\n<|/ c |>\n<| c |>\nOh, I see.\
    \ Thanks for the clarification!\n<|/ c |>\n<| c |>\nIt would be nice if you explained\
    \ the algorithm a bit more. :-)\n<|/ c |>\n<| c |>\n- I have added some more explanation\
    \ to my answer. If you have any further questions please let me know.\n<|/ c |>\n\
    <| a tags=ruby |>\nI hope this would work. \n<code>\ns = '5 apples and 6 oranges'\n\
    apples, oranges = s.split(/ and /).map(&:to_i)", "    arr = s.split(' ')\n   \
    \ total = 0\n    arr.each do |i|\n        total += i.to_i\n    end\n    arr.each\
    \ do |i|\n        next unless i.include?('mango')\n        total -= i.to_i\n \
    \       break if total == n\n    end\n    total\nend", "  apples = n.to_i #convert\
    \ the string to an integer\n  oranges = apples * 2\n  fruits = s.split.map(&:to_i)\
    \ #split the string by space\n  fruits.count { |x| (x < apples ||\n          \
    \           x > (apples + oranges - 1)) && (x > apples &&\n                  \
    \                   x < (apples + oranges - 1)) || x == apples }\nend", "  s.split(\"\
    \ \").map {|s| s.to_i}.min\nend", "  # your code here\n  m = 0\n  i = 0\n  while\
    \  i<n\n    if s[i]==\" apples\"\n      m += s[i]\n    i += 1\n  i = 0\n  while\
    \ i<n\n    if s[i]==\" oranges\"\n      m += s[i]\n    i += 1\n  i = 0\n  while\
    \ i<n\n    if s[i]==\" mango\"\n      m += s[i]\n    i += 1\n  return m\nend",
  "  s = s.length\n  n = n.to_i\n  \n  apples = 0\n  oranges = 0\n  mangos = 0\n \
    \ \n  total_apples = s.scan(/apples?/).size\n  total_oranges = s.scan(/oranges?/).size\n\
    \  total_mangos = s.scan(/mangos/).size\n  \n  apples += total_apples\n  oranges\
    \ += total_oranges\n  mangos += total_mangos\n  \n  return mangos - n - apples\
    \ - oranges\nend", "  \n    # write your code here\n  s = s[0,n]\n  l = s.split(\"\
    \ \")\n  if l.count(\"oranges\") == 1 and l.count(\"apples\") == 1:\n    return\
    \ l.count(\"mango\")\n  else\n    return 0\nend", "  \n  # initialize an empty\
    \ string for sum\n  sum = 0\n  \n  # initialize an empty array for mango fruit_distribution\n\
    \  mangoes = []\n  \n  # initialize empty array for oranges fruit_distribution\n\
    \  oranges = []\n  \n  # initialize an empty array for apple fruit_distribution\n\
    \  apples = []\n  \n  # initialize a counter for apple fruit_distribution\n  a_count\
    \ = 0\n  \n  # initialize a counter for oranges fruit_distribution\n  o_count\
    \ = 0\n  \n  # initialize a counter for mango fruit_distribution\n  m_count =\
    \ 0\n  \n  # initialize a counter for fruit distribution\n  fruit_count = 0\n\
    \  \n  # initialize an array to hold numbers\n  nums_array = s.split(\"\")\n \
    \ \n  \n  # loop through each number\n  nums_array.each do |n|\n    \n    # add\
    \ numbers to each array according to the value\n    if n == \"a\"\n      apples.push(n.to_i)\n\
    \      a_count += 1\n    elsif n == \"o\"\n      oranges.push(n.to_i)\n      o_count\
    \ += 1\n    elsif n == \"m\"\n      mangoes.push(n.to_i)\n      m_count += 1\n\
    \    else\n      fruit_count += 1\n    end\n    \n    # sum all values in each\
    \ array\n    sum += apples[a_count] + oranges[o_count] + mangoes[m_count]\n  end\n\
    \  \n  # return the sum of the numbers \n  sum\nend", "  if s.length == 0 or s.length\
    \ == n\n    return 0\n  \n  basket = Array.new(n)\n  \n  i = 1\n  \n  while i\
    \ <= n\n    basket[i] = i - 1\n    i += s[i]\n  end\n  \n  i = 0\n  while i <\
    \ n\n    i = 0 if basket[i] == 0\n    i += 1\n  end\n  \n  basket\nend", "   \
    \ apples, oranges, mango = s.split\n    oranges = oranges.to_i\n    apples = apples.to_i\n\
    \    mango = mango.to_i\n    \n    return mango - apples - oranges\nend", "  \
    \  p =  s.strip.split(\" \").map { |item| item.to_i }\n    p -= n\n    p[0] ?\
    \ p[0] : nil\nend\n</code>\n<|/ a |>\n<| a tags=ruby,function,loops dscore=0 |>\n\
    Here is a solution with two loops:\n<code>", "  apples = s.split(' apples and\
    \ ')\n  oranges = s.split(' oranges and ')\n  fruits = s.split(' fruits in the\
    \ basket ')\n  apples.reverse!\n  oranges.reverse!\n  fruits.reverse!\n  return\
    \ apples.count - apples.reduce(:+) - oranges.count - oranges.reduce(:+) - fruits.count\
    \ - fruits.reduce(:+) - n\nend", "  n = n - '0' * s.count(' ') \n  s = s + \"\\\
    n\" + n\n  puts \"Given the string that represents the total number of #{s} and\
    \ an integer that represents the total number of the fruits in the basket return\
    \ #{n} of the mango fruits in the basket.\"\n  return s.scan(/\\d+/).map{|x| x.to_i}.min\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nYour solution has several problems:\
    \ it doesn't handle negative numbers, it doesn't handle long strings, it doesn't\
    \ handle very large numbers, it assumes the `-` character is always present\u2026\
    \ So please don't recommend it!\n<|/ c |>\n<| c |>\nThe OP mentioned in the comments\
    \ that he was only given a string and not an integer.\n<|/ c |>\n<| c |>\nI did\
    \ mention that the string was given.\n<|/ c |>\n<| c |>\n: I have added some notes\
    \ to the answer about the issues you pointed out.\n<|/ c |>\n<| c |>\n: I just\
    \ added some comments in the comments section to clarify things and made my code\
    \ more readable.\n<|/ c |>\n<| a dscore=0 |>\nThis can be done in one line with\
    \ Ruby 2.0 but I'm sure you cannot do this in one line with earlier versions of\
    \ Ruby, but here is the solution in one line with Ruby 2.0. Also, the regex is\
    \ long and unnecessary complicated, so it is probably better to make it simple\
    \ and readable. \n<code>", "  return s.length - n.to_i\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby,string |>\n<code>", "    apples = 0\n    oranges = 0\n  \
    \  mangoes = 0\n    apples_count = 0\n    oranges_count = 0\n    mangoes_count\
    \ = 0", "  s.to_s.split(\" \").count(\"apples\")-s.to_s.split(\" \").count(\"\
    oranges\")-s.to_s.split(\" \").count(\"mango\")-n\nend", "  puts s.length, \"\
    \ apples and \", n, \" oranges\"\n  puts s.length - n, \" mango fruits\"\nend",
  "    s_arr = s.split(\" \")\n    apples, oranges = s_arr[0].to_i, s_arr[1].to_i\n\
    \    fruits= apples + oranges\n    if apples > oranges \n        apples -= oranges\n\
    \        oranges = apples - apples - oranges\n        fruits += oranges\n    end\n\
    \    return fruits - n if apples > oranges\n    fruits -= n - apples if apples\
    \ < oranges\n    return fruits\nend", "  s.split(\" \").count(\"apples\").to_i\
    \ + s.split(\" \").count(\"oranges\").to_i - (s.count(\"mango\")).to_i\nend",
  "  apples, oranges = s.split(\" and\")\n  apples_count, oranges_count = apples.split(\"\
    and\").map(&:to_i), oranges.split(\"and\").map(&:to_i)\n  apples_count + oranges_count.max\n\
    end", "  return n - s.split(' ').count { |fruit| fruit == 'apples' } \nend", " \
    \ if n <= 0\n    return nil\n  else if n == 1\n    return s.to_i\n  else\n   \
    \ arr = s.split(' ').map{|i| i.to_i}\n    fruit = arr.select { |x| x > 0 }\n \
    \   total = fruit.count\n    fruit - [n - 1]\n  end\nend\n</code>\n<|/ a |>\n\
    <| a tags=ruby,string |>\nThis is my solution for those who are looking for the\
    \ solution:\n<code>", "  orange, apple = s.split(/ and\\ /)\n  apples, oranges\
    \ = apple.split(/ and /).map { |x| x.to_i }, orange.to_i\n  total_fruits = apples\
    \ + oranges + 4\n  total_fruits -= apples - oranges\n  apples -= oranges\n  oranges\
    \ -= apples\n  fruit_count = total_fruits - apples - oranges\n  fruit_count -=\
    \ apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples\
    \ - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n\
    \  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count\
    \ -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples\
    \ - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n\
    \  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count\
    \ -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples\
    \ - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n\
    \  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count\
    \ -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples\
    \ - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n\
    \  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count\
    \ -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples\
    \ - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n\
    \  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count\
    \ -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples\
    \ - oranges\n  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n\
    \  fruit_count -= apples - oranges\n  fruit_count -= apples - oranges\n  fruit_count\
    \ -= apples - ", "  a = s.split(\"and\")\n  a.each do |a| \n    apple = a.split(\"\
    apples\").first\n    orange = a.split(\"oranges\").first\n    apples = apple+apple+apple+apple+apple\n\
    \    oranges = orange+orange+orange+orange+orange\n    fruits = apples + oranges\n\
    \  end\n  fruits = n-f\n  return fruits\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=1 |>\nYou can use regex for this. \n<code>\n'5 apples and 6 oranges'\
    \ =~ /(\\d+) apples and (\\d+) oranges/ \n</code>\nThen $1 and $2 contain the\
    \ number of apples and oranges.\n<|/ a tags=string,ruby |>\n<| a dscore=1 |>\n\
    <code>", "  str = s.split(/(and | or | and |)/)\n  str.each do |n|\n  if n ==\
    \ \"and\"\n    return n[0..1]\n  elsif n == \"or\"\n    return n[3..4]\n  elsif\
    \ n == \"and\"\n    return n[4..5]\n  elsif n == \"and\"\n    return n[5..6]\n\
    \  end\n  end\n  n\nend", "    oranges, apples = s.split('and')\n    oranges =\
    \ int(oranges.split('apples')[0].split(' ')[1])\n    apples = int(apples.split('\
    \ ')[0])\n    mango = oranges - apples\n    return (n - mango) if mango > 0 else\
    \ 0", "    if n == 0\n        fruits = s.length\n    else\n        fruits = n\
    \ - s.split(' ').length\n    end\n    fruits -= s.split(' ').length - s.split(',').length\n\
    \    fruits\nend\n</cell>\n<text>\nTask 7: Calculating The Percent of Each Fruit\
    \ in a Basket\nComplete the function percentFruit which takes in a string and\
    \ an integer that represents the total number of the fruit in the basket.\nIt\
    \ should calculate the percentage of each fruit in the basket.\nFor Example\n\
    percentFruit(\"5 apples and 6 oranges\", 19) -> returns 19 / 5 * 100 = 95\npercentFruit(\"\
    0 apples and 1 oranges\",3) -> returns 3 / 0 * 100 = 0\npercentFruit(\"2 apples\
    \ and 3 oranges\", 100) -> returns 100 / 2 * 100 = 50\npercentFruit(\"100 apples\
    \ and 1 oranges\",120) -> returns 120 / 100 * 100 = 80", "    return n\nend",
  "  return s.split(\" \").count {|x| x == \"apple\" || x == \"orange\"}\nend", " \
    \ count = {}\n  s.split(\" \").each do |i|\n    if !count[i.downcase]\n      count[i.downcase]\
    \ = n\n    else\n      count[i.downcase] += 1\n    end\n  end\n  \n  return count[\"\
    mango\"]\nend", "  \n  apples, oranges, mango = s.split(\" \")\n  apples_num,\
    \ oranges_num, mango_num = apples.to_i, oranges.to_i, mango.to_i\n  fruits= apples_num\
    \ + oranges_num + mango_num\n  apples_num = apples_num.to_i\n  oranges_num = oranges_num.to_i\n\
    \  mango_num = mango_num.to_i\n  fruits = fruits.to_i\n  \n  if fruits >= n and\
    \ fruits <= n+apples_num+oranges_num+mango_num\n    if apples_num >= n and apples_num\
    \ <= n+apples_num\n      apples_num -= n\n      apples = apples_num.to_s\n   \
    \ elsif oranges_num >= n and oranges_num <= n+oranges_num\n      oranges_num -=\
    \ n\n      oranges = oranges_num.to_s\n    elsif mango_num >= n and mango_num\
    \ <= n+mango_num\n      mango_num -= n\n      mango = mango_num.to_s\n    end\n\
    \  elsif fruits < n\n    apples = \"#{n} apples\"\n    oranges = \"#{n} oranges\"\
    \n    mango = \"#{n} mango\"\n  else\n    apples = \"#{fruits-n} apples\"\n  \
    \  oranges = \"#{fruits-n} oranges\"\n    mango = \"#{fruits-n} mango\"\n  end\n\
    \  \n  return \"#{apples}#{oranges}#{mango}\"\n  \nend", "  apples = s.split(\"\
    \ \")[0].to_i\n  oranges = s.split(\" \")[1].to_i\n  mango = apples - oranges\n\
    \  return mango if s.split(\" \").length == 2 else n-mango\nend\n</code>\n<|/\
    \ a tags=ruby |>\n<| a dscore=0 |>\nYou can do this:\n<code>", "    str = s.split('\
    \ ')\n    apples = str.count('apples')\n    oranges = str.count('oranges')\n \
    \   mangos = str.count('mango')\n    basket = str.count('and')\n    mangos = n\
    \ - apples - oranges - mangos + basket\n    puts \"#{mangos} mangos(s) is available\
    \ in this basket\"\nend", "  s = s[0..-2]\n  s = s.split(\" \").map{|x| x.to_i}\n\
    \  n = n.to_i\n  n.times do |i|\n    i += s.shift\n    s.last.times do |j|\n \
    \     j += s\n      s << j\n    end\n  end\n  s.inject(&:+)\nend\n</code>\n<|/\
    \ a tags=string,ruby |>\n<| c |>\nThank you very much for your answer, the problem\
    \ is that I am still learning Ruby and I don't understand how this works. Thank\
    \ you for your time and help.\n<|/ c |>\n<| c |>\nI updated the answer, I wrote\
    \ the explanation for you\n<|/ c |>\n<| a tags=string,ruby |>\nThis is not the\
    \ most efficient way to do this, but you can convert your strings to arrays and\
    \ then just subtract them.\n<code>", "    apples = s.length - n.to_s.split(' apples\
    \ and ')[0].length.to_i\n    oranges = s.length - n.to_s.split(' oranges and ')[0].length.to_i\n\
    \    mangos = s.length - n.to_s.split(' mango and ')[0].length.to_i\n    \n  \
    \  apples += oranges + mangos\n    oranges -= apples - mangos\n    mangos -= oranges\
    \ - apples\n    \n    if apples == 0 && oranges == 0 && mangos == 0\n        return\
    \ -1\n    return mangos + apples - oranges\nend\n</cell>\n<code language=julia-1.1>",
  "  \n  apple = s.split(/\\D/)[0]\n  orange = s.split(/\\D/)[1]\n  basket = s.split(/\\\
    D/)[2]", "  s.scan(/\\d+/) { |x| n -= x.to_i }\n  s -= 'apples'\n  s -= 'oranges'\n\
    \  s -= 'mango'\n  n\nend\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| c |>\nThank\
    \ you so much for the help! It works! I really appreciate it.\n<|/ c |>\n<| c\
    \ |>\nPlease note that your answer is wrong. Try `fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)`\n<|/ c |>\n<| c |>\nThank you so much. I really appreciate\
    \ it. How would I modify it if I wanted to make it so that it could take multiple\
    \ parameters for the apples, oranges, and mango fruits if that made sense?\n<|/\
    \ c |>\n<| c |>\nThank you again. I really appreciate it.\n<|/ c |>\n<| c |>\n\
    , what does `x.to_i` do? How would I make it so that the function can take multiple\
    \ parameters for the apples, oranges, and mango fruits if that made sense?\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  m = s.length.to_i\n  n = n.to_i\n  s = s[0,n]\n\
    \  s.split(', ').map(&:to_i).reduce(:+)\nend\n</code>\n<|/ a dscore=1 tags=ruby\
    \ |>\n<| c |>\nI believe the question requires you to determine the number of\
    \ mango fruits in the basket by subtracting the number of apples and oranges.\n\
    <|/ c |>\n<| c |>\nI see what you mean by my example was wrong, I have changed\
    \ my question for clarity.\n<|/ c |>\n<| c |>\n: I changed my answer to account\
    \ for that change\n<|/ c |>\n<| c |>\nI get the following error when I run your\
    \ code: `<top (required)>': undefined method `split' for nil:NilClass (NoMethodError)\n\
    \ from ch1.rb:7:in `<main>'` any ideas on that?\n<|/ c |>\n<| c |>\n: That means\
    \ you're trying to run it outside of the Rails console. Make sure you run the\
    \ code exactly as shown.\n<|/ c |>\n<| a tags=ruby |>\nYou could use a regexp\
    \ like this to split the string and then sum the results:\n<code>", "  fruit,\
    \ num = s.split('and')\n  apples, oranges = num.to_i\n  apples -= 1\n  oranges\
    \ -= 1\n  apples_count, oranges_count = 0, apples + oranges\n  fruits_count =\
    \ apples + oranges\n  fruit.split(//).each do |f|\n    if f == 'apple'\n     \
    \ apples_count += apples.to_i\n    elsif f == 'orange'\n      oranges_count +=\
    \ oranges.to_i\n    elsif f == 'mango'\n      fruits_count += fruits_count.to_i\n\
    \    end\n  end\n  fruits_count -= n - (apples + oranges)\n  return fruits_count\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe only thing is this code will not\
    \ work if the number of fruit is not divisible by 3 in total. This will result\
    \ in wrong result\n<|/ c |>\n<| c |>\nYou're right. I've corrected the answer\
    \ to handle this case\n<|/ c |>\n<| c |>\nThis fails for example with \"2 apples\
    \ and 3 oranges\", 100, where it should return 95. Your code will return 120 instead.\n\
    <|/ c |>\n<| a dscore=0 |>\nIf performance is your main concern, you can do this\
    \ with just ruby:\n<code>", "    num = s.split(\" \")\n    num = num[0].to_i\n\
    \    apples, oranges = num % 100, [num - apples]\n    mangos = n.to_i - apples.reduce(:+)\n\
    \    apples, oranges, mangos = apples.zip(oranges, mangos).map(&:sum).map(&:to_i)\n\
    \    return mangos\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "  return n - (s.to_i() - s.chars.count(\"oranges\".to_i) - s.chars.count(\"apples\"\
    .to_i)).to_i\nend\n</code>\n<|/ a tags=ruby dscore=0 |>\n<| a |>\nI have found\
    \ this one to be the best solution for my problem, just add one line into your\
    \ code and it works.\n<code>", "  s = s.split ' '\n  apple = s.delete ('and')\n\
    \  orange = s.delete ('and')\n  return n.to_i - apple.to_i - orange.to_i\nend",
  "  # Your code here\nend\n</cell>\n<cell>", "  apples = s.to_i\n  oranges = n -\
    \ apples\n  fruits = apples + oranges\n  mango_fruits = fruits.to_i - apples.to_i\
    \ - oranges.to_i\n  puts mango_fruits.to_s\nend", "  apples.gsub(/apples/,\"\"\
    ).split(\" \").map(&:to_i).sum - n\nend\n</cell>\n<code language=xeus-cling-cpp14>\n\
    fruit_distribution(\"5 apples and 6 oranges\", 19)\n</cell>\n<code language=xeus-cling-cpp14>\n\
    fruit_distribution(\"0 apples and 1 oranges\",3)\n</cell>\n<code language=xeus-cling-cpp14>\n\
    fruit_distribution(\"2 apples and 3 oranges\", 100)\n</cell>\n<code language=xeus-cling-cpp14>\n\
    fruit_distribution(\"100 apples and 1 oranges\",120)\n</cell>\n<text>\nExercise\n\
    Write a function that can print out a statement that indicates when a number is\
    \ odd and when it is even.", "  if s == \"\"\n    return n\n  s.scan(/\\d+/).each\
    \ do |x|\n    x =~ /\\d+/\n    n *= x.to_i\n  end\n  n\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nWhile this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    apple, orange, mango\
    \ = s.split(' ')", "  total = 0\n  fruits =s.split(\" \")\n  fruits.each do |fruit|\n\
    \    total += 1 if fruit.to_i == n\n  end\n  total-n if total > n\nend\n</code>\n\
    <|/ a tags=ruby,arrays,string |>\n<| a dscore=1 |>\nHere's another method that\
    \ uses regular expressions, although perhaps not as elegant as the others given\
    \ by people here.\n<code>", "    apples = s[:s.index(\"apples\")]\n    oranges\
    \ = s[s.index(\"apples\") + 5 : s.index(\"oranges\")]\n    mangos = s[s.index(\"\
    oranges\") + 5 : s.index(\"mango\")]\n    \n    apples = apples.to_i\n    oranges\
    \ = oranges.to_i\n    mangos = mangos.to_i", "  if s.split(\" \").length == 1\n\
    \  \t return n\n  elsif s.split(\" \").length == 2\n   if s.split(\" \")[1].to_i\
    \ <  n\n     return n\n   elsif s.split(\" \")[1].to_i >= n\n     return s.split(\"\
    \ \")[1].to_i - n\n   end\n  else\n   if s.split(\" \")[1].to_i <  n\n     return\
    \ n\n   elsif s.split(\" \")[1].to_i >= n\n     return s.split(\" \")[1].to_i\
    \ - n\n   elsif s.split(\" \")[2].to_i <  n\n     return n\n   elsif s.split(\"\
    \ \")[2].to_i >= n\n     return s.split(\" \")[2].to_i - n\n   end\n  end\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| a dscore=0 |>\nThis is my solution:\n<code>",
  "  return s.split(\" \").sort.last.split(\"and\").map { |s| s.to_i }.sum - n\nend\n\
    </code>\n<|/ a tags=ruby,arrays dscore=2 |>\n<| c |>\n`s.split(\" \")` is redundant\
    \ since `s` is already an array. `s.split(\" \")` can be written `s`.\n<|/ c |>\n\
    <| a dscore=2 tags=ruby,arrays |>\n<code>", "  apples, oranges = s.split(\"and\"\
    )\n  apples = apples.split.map(&:to_i)\n  oranges = oranges.split.map(&:to_i)\n\
    \  apples.zip(oranges).map(&:sum).min\nend", "  s.scan(/\\d+/) do |num|\n    if\
    \ num.length == 0 && n.length == 0\n      0\n    elsif num.length > 0 && n.length\
    \ == 0\n      num.to_i\n    elsif num.length == 0 && n.length > 0\n      n.to_i\n\
    \    elsif num.length > 0 && n.length != 0\n      (n.to_i - num.to_i).abs\n  \
    \  end\n  end\nend\n</code>\n<|/ a |>\n<| a |>\n<code>", "  s.split(\" \").map\
    \ { |word| word.to_i }.inject(:+) - n\nend\n</cell>\n<text>\nQ1. Calculate the\
    \ number of mango fruits in a basket of 15 apples and 10 oranges. \nExamine the\
    \ example below that illustrates the calculation:", "  s = s[0]\n  s = s[1..s.to_s.length]\n\
    \  n = n.to_i\n  fruit.each do |fruit|\n    if s.include?(fruit)\n      puts fruit\n\
    \      break\n    end\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\"In the\
    \ fruit_distribution function,\" are you sure this is what the OP is asking for?\
    \  I'm not seeing where \"n\" is being passed in and how it relates to the input\
    \ string.\n<|/ c |>\n<| c |>\nI was confused by the title of the question and\
    \ thought OP was asking how to get the number of apples and oranges. But as OP\
    \ has asked for a more general solution, I've updated the answer.\n<|/ c |>\n\
    <| a dscore=1 |>\nI think this is what you're looking for:\n<code>", "    sum\
    \ = 0\n    i = 0\n    while i < s.length do\n        if s[i] == \"1\" then\n \
    \           sum = sum + n\n        else\n            sum = sum - n\n        end\n\
    \        i = i + 1\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>",
  "  str = s.split(' ')\n  apple = str.count('apple')\n  orange = str.count('orange')\n\
    \  mango = str.count('mango')\n  return n - apple - orange - mango\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| a dscore=0 |>\nOne more solution based on regex -\n<code>",
  "  # write your code here\n  a1 = s.split\n  a2 = a1[0].to_i\n  a3 = a1[1].to_i\n\
    \  a4 = a1[2].to_i\n  if a1 > n\n    a2 = n - a1\n  elsif a2 < n\n    a2 = n\n\
    \  end\n  if a3 > n\n    a3 = n - a3\n  elsif a3 < n\n    a3 = n\n  end\n  if\
    \ a4 > n\n    a4 = n - a4\n  elsif a4 < n\n    a4 = n\n  end\n  a1 + a2 + a3 +\
    \ a4\nend", "  s.split(\" \").map { |e| e.to_i }.reduce(:+) - n\nend", "  s.each_char.with_index.inject(0)\
    \ do |sum, (num,i)|\n    (sum > n) ? sum : sum + num\n  end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\nI would use a regexp to split the string. Something\
    \ like this:\n<code>", "  if s == 0\n    puts \"no fruit found\"\n  elsif s ==\
    \ 1\n    puts \"1 fruit\"\n  elsif s.to_i < 0\n    puts \"negative number\"\n\
    \  else\n    puts s.to_i - n\n  end\nend\n</code>\n<|/ a tags=ruby |>\n<| a tags=ruby\
    \ dscore=1 |>\nA small variation to Amadan's answer\n<code>", "  a = s.split(/\\\
    W+/)\n  a.map!{|x| x.gsub(/\\s+/,'_').to_i}\n  a.each do |i|\n    sum = a[i]\n\
    \    a[i] = 0\n    puts \"#{i} - #{i} - #{sum}\"\n  end\n  puts \"#{a.count-1}\
    \ - #{a.count} - #{a.last}\"\nend\n</code>\n<|/ a tags=ruby |>\n<| a tags=ruby\
    \ dscore=2 |>\nYou can do it in ruby as easy as:\n<code>", "  \n  s = s + \"and\"\
    \ \n  \n  # find first \"and\" \n  pos = s.index(\"and\")\n  \n  # split the string\
    \ and get total number of apples and oranges\n  apples = Integer(s[0...pos])\n\
    \  oranges = Integer(s[pos + 3..-1])\n  \n  # find the number of fruits in the\
    \ basket \n  # using division rule\n  count = apples / oranges\n  \n  puts \"\
    apples = #{apples}\" \n  puts \"oranges = #{oranges}\" \n  puts \"count = #{count}\"\
    \n  return count - (apples % oranges)\nend\n</code>\n<|/ a tags=string,ruby,parsing,ruby-on-rails\
    \ |>\n<| c |>\nThank you for pointing me to the right direction. After reading\
    \ the Ruby documentation on String's index() method more carefully I now understand\
    \ the 'and' was throwing off the index() method and how that happens. Thanks!\n\
    <|/ c |>\n<| c |>\n- glad I could help.\n<|/ c |>\n<| a dscore=1 |>\nYou probably\
    \ should use regular expressions, for example:\n<code>", "    apples, oranges,\
    \ mango = s.split(\" \")\n    apples, oranges, mango = apples.to_i, oranges.to_i,\
    \ mango.to_i\n    return n-mango if apples + oranges >= mango else 0\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI see a lot of great answers here, thanks for sharing!\
    \ I'm new to programming and this is very informative and helpful.\n<|/ c |>\n\
    <| a dscore=0 |>\nAs others have said, a very simple solution is:\n<code>", " \
    \ s.split(\" \").inject(0) {|result,el|\n    if el == \"apples\"\n      result\
    \ + n.to_i\n    el == \"oranges\"\n      result + n.to_i\n    el == \"mangoes\"\
    \n      result + n.to_i\n  }\nend", "  arr = s.split(\" \") #split string into\
    \ an array\n  apples = arr[0].to_i #convert the first item in the array to an\
    \ integer\n  oranges = arr[1].to_i #convert the second item in the array to an\
    \ integer\n  fruits = apples + oranges # sum of apples and oranges\n  m = 0\n\
    \  if fruits < n # check if there is enough fruits in the basket\n    fruits =\
    \ fruits - n # return n - fruits to account for the remaining oranges\n    m =\
    \ (fruits.to_f / n).ceil # floor the quotient\n    m += 1 # add one to the number\
    \ of mango fruits\n  end\n  return m\nend", "\ts, n = s.split(\" \"), n.to_i\n\
    \ts.map!{|x| x.to_i} if s.is_a?(String)\n\ts = s.product([n, 0]).min\n\ts.to_i\
    \ - n\nend\nputs fruit_distribution(\"5 apples and 6 oranges\", 19)\nputs fruit_distribution(\"\
    0 apples and 1 oranges\",3)\nputs fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\nputs fruit_distribution(\"100 apples and 1 oranges\",120)", "    apples\
    \ = n - s.to_i\n    oranges = apples.modulo(7)\n    \n    mango_count = apples.divided_by((7\
    \ - oranges).abs)\n    \n    return mango_count.to_i\nend\n</code>\n<|/ a |>\n\
    <| c |>\nWelcome to Stack Overflow! While this code may solve the question, [including\
    \ an explanation](//meta.stackexchange.com/q/114762) of how and why this solves\
    \ the problem would really help to improve the quality of your post, and probably\
    \ result in more up-votes. Remember that you are answering the question for readers\
    \ in the future, not just the person asking now. Please [edit] your answer to\
    \ add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a tags=math,ruby,string |>\nOne line answer for those that\
    \ don't need comments and that don't need variables:\n<code>", "    num = n.to_i\n\
    \    apples = num.to_i\n    oranges = apples+num.to_i\n    mangos = oranges-apples\n\
    \    apples.to_s\n    oranges.to_s\n    mangos.to_s\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI see no reason for the use of `to_s` or implicit conversion to\
    \ `String` when `+` is used on `Fixnum`s.\n<|/ c |>\n<| c |>\nI agree, it doesn't\
    \ matter in this case, as both `apples` and `oranges` are `Fixnum`s and `to_s`\
    \ is used to convert them into a `String` anyways.\n<|/ c |>\n<| c |>\nThanks\
    \ for the great answer! However, I don't understand how you're getting the value\
    \ of 19 - 5 - 6 = 8. I know what 19 is but how are you getting 6-5=2 because it's\
    \ just subtracting apples from oranges? I'm having a difficult time wrapping my\
    \ head around how this is working!\n<|/ c |>\n<| c |>\nI've updated my answer\
    \ with the reason for the result `8`.\n<|/ c |>\n<| c |>\nThanks again for the\
    \ great answer! The reason why you get the result of 8 is because when you subtract\
    \ apples from oranges, you get an int. Then, to get the number of mango apples\
    \ in the basket you just need to subtract this int from apples and you get the\
    \ result of 8. So is there a way to do this without using to_s and converting\
    \ the apples and oranges variables to a string?\n<|/ c |>\n<| a |>\n<code>", " \
    \   s = s.split(\" \")\n    n = n.to_i\n    total = 0\n    i = 0\n    while i\
    \ < n\n        total += s[i].to_i\n        i += 1\n    return total\nend\n</cell>\n\
    <code language=julia-1.5>\nfruit_distribution(\"5 apples and 6 oranges\", 19)\n\
    </cell>\n<code language=julia-1.5>\nfruit_distribution(\"0 apples and 1 oranges\"\
    ,3)\n</cell>\n<code language=julia-1.5>\nfruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n</cell>\n<code language=julia-1.5>\nfruit_distribution(\"100 apples and\
    \ 1 oranges\",120)\n</cell>\n<code language=julia-1.5>", '    apples, oranges,
    mangos = *s.split', "  if s.split(\" \").size != 2\n    puts \"Number of apples\
    \ and oranges must be given in the same string.\"\n    return nil\n  end\n  if\
    \ n.to_i != s.to_i\n    puts \"Number of apples and oranges must be given in the\
    \ same integer.\"\n    return nil\n  end\n  apples = s.split(\"apples\")[1].to_i\n\
    \  oranges = s.split(\"oranges\")[1].to_i\n  fruits = s.split(\"and\")[0].to_i\n\
    \  total_oranges = apples+oranges\n  apples_total = fruits+apples-total_oranges\n\
    \  total_mango = apples_total-fruits\n  puts \"#{total_oranges} - #{total_mango}\"\
    \nend\n</code>\nThe last two lines inside the function are a little unusual. You've\
    \ got some variables that end up being used only once -- total_oranges and total_mango\
    \ -- so you can just use them without having to declare them earlier. \nFor what\
    \ it's worth, I think the whole code is about as clean as it gets. The only downside\
    \ is that it uses some Ruby constructs that you're not familiar with. \nRuby allows\
    \ you to access parts of arrays through array indexing like array[0] returns the\
    \ first element of the array, array[1] returns the second, and array[n] returns\
    \ the nth element of the array. \nStrings also support array indexing. That means\
    \ you can do mystring.split() and get an array of all the words in mystring. \n\
    Ruby also allows you to add two strings together using the plus operator, which\
    \ returns the concatenation of those two strings. \nThe Ruby parser also allows\
    \ you to use regular expressions to find a pattern inside a string and replace\
    \ it with something else. \nYour code also looks like a Ruby program to me, so\
    \ I wouldn't be surprised if you were able to turn it into a program that runs\
    \ on your system with little modification. \nGood luck!\n<|/ a |>\n<| c |>\nThank\
    \ you for the help and I will definitely look into your suggestions.\n<|/ c |>\n\
    <| c |>\nHi, I have some questions I hope you can help me with. Where is n is\
    \ the number of apples. In the code you just used apples, oranges, and mango.\
    \ Why is it not n? Also is it possible to find the number of oranges in the code\
    \ that you just wrote? It seems like it is hard coded. Thank you so much for the\
    \ help!\n<|/ c |>\n<| c |>\nOh, I missed the fact that you were given some strings\
    \ and an int. Yes, you're right, I should have used n. n represents the number\
    \ of apples -- just like you did in the code you posted. ", "  s.gsub(/[^0-9]+/,\
    \ '').split(\" \").map {|item| item.to_i}.map {|item| item + n}\nend", " \n  #\
    \ initialize sum\n  sum = 0", "  apples = 0\n  oranges = 0\n  mangoes = 0", " \
    \ s = s.split(\" \")\n  \n  apples = s.count.(\"apples\")\n  oranges = s.count.(\"\
    oranges\")\n  \n  fruits =  n - apples - oranges\n  \n  fruits == 0 ? 0 : fruits\
    \ == 1 ? 1 : fruits == 2 ? 2 : fruits == 3 ? 3 : fruits == 4 ? 4 : \n    fruits\
    \ == 5 ? 5 : fruits == 6 ? 6 : fruits == 7 ? 7 : fruits == 8 ? 8 : \n    fruits\
    \ == 9 ? 9 : fruits == 10 ? 10 : fruits == 11 ? 11 : fruits == 12 ? 12 : \n  \
    \  fruits == 13 ? 13 : fruits == 14 ? 14 : fruits == 15 ? 15 : fruits == 16 ?\
    \ 16 : \n    fruits == 17 ? 17 : fruits == 18 ? 18 : fruits == 19 ? 19 : fruits\
    \ == 20 ? 20 : \n    fruits == 21 ? 21 : fruits == 22 ? 22 : fruits == 23 ? 23\
    \ : fruits == 24 ? 24 : \n    fruits == 25 ? 25 : fruits == 26 ? 26 : fruits ==\
    \ 27 ? 27 : fruits == 28 ? 28 : \n    fruits == 29 ? 29 : fruits == 30 ? 30 :\
    \ fruits == 31 ? 31 : fruits == 32 ? 32 : \n    fruits == 33 ? 33 : fruits ==\
    \ 34 ? 34 : fruits == 35 ? 35 : fruits == 36 ? 36 : \n    fruits == 37 ? 37 :\
    \ fruits == 38 ? 38 : fruits == 39 ? 39 : fruits == 40 ? 40 : \n    fruits ==\
    \ 41 ? 41 : fruits == 42 ? 42 : fruits == 43 ? 43 : fruits == 44 ? 44 : \n   \
    \ fruits == 45 ? 45 : fruits == 46 ? 46 : fruits == 47 ? 47 : fruits == 48 ? 48\
    \ : \n    fruits == 49 ? 49 : fruits == 50 ? 50 : fruits == 51 ? 51 : fruits ==\
    \ 52 ? 52 : \n    fruits == 53 ? 53 : fruits == 54 ? 54 : fruits == 55 ? 55 :\
    \ fruits == 56 ? 56 : \n    fruits == 57 ? 57 : fruits == 58 ? 58 : fruits ==\
    \ 59 ? 59 : fruits == 60 ? 60 : \n    fruits == 61 ? 61 : fruits == 62 ? 62 :\
    \ fru", "  apples, oranges, mangos = 0, 0, 0\n  s.split(\"and\").each do |fruit|\n\
    \    if fruit == \"apples\"\n      apples += 1;\n    elsif fruit == \"oranges\"\
    \n      oranges += 1;\n    elsif fruit == \"mango\"\n      mangos += 1;\n    end\n\
    \  end\n  mangos = (n-mangos) if mangos > n\n  mangos = 0 unless mangos\n  apples\
    \ = mangos + apples if mangos\n  apples = n - apples if apples < n\n  apples =\
    \ 0 if apples < 0\n  oranges = n - oranges if oranges < n\n  oranges = 0 if oranges\
    \ < 0\n  apples + oranges + mangos\nend", "    fruits = ArraySpace.new(n.to_s).downto(0)\
    \ do |i|\n        apples = i.to_i\n        oranges = 0\n        loop do\n    \
    \        oranges << rand(5) + apples.rand(6) # fruits \n            if oranges\
    \ > apples then break\n        end\n        fruits[i + 1] = oranges - apples\n\
    \    end\n    # return fruits.reduce(:+) - fruits.reduce(:+)\n    fruits.reduce(:+)\n\
    end\nputs fruit_distribution(\"2 apples and 3 oranges\", 100)\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\nHere is a quick ruby solution\n<code>", " \n\
    \  count = []\n  sum = 0\n  \n  i = 0\n  while i < n\n    a = s.split(\" \")[i]\n\
    \    if a.include?(' ') then\n      a = a.split[' '][1]\n    end\n    if count.include?(a)\n\
    \      count[a] += 1\n    else\n      count[a] = 1\n    end\n    sum += count[a]\n\
    \    i += 1\n  end", "  apples = s.scan(/\\d+/).map { |s| s.to_i }\n  oranges\
    \ = s.scan(/\\d+/).map { |s| s.to_i }\n  fruits =s.scan(/\\d+/).map { |s| s.to_i\
    \ }\n  \n  mn = fruits.map{|x|x+n-mn.sum}.min\n  mn = mn.to_i\n  \n  if apples.min<0\n\
    \    return apples.min\n  elsif oranges.min<0\n    return oranges.min\n  else\n\
    \    fruits.min\n  end\nend\n</code>\n<|/ a |>\n<| a |>\nYour code fails due to\
    \ the fact that your apple and orange counters do not reset upon each iteration\
    \ of the loop. You need to make your counters reset at the start of each loop.\n\
    <code>", "  orange = 0\n  apple = 0\n  fruit = s.split\n  fruit.each do |f|\n\
    \    f == \"oranges\" ? orange += 1 : apple += 1\n  end\n  return orange - apple\
    \ - n\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthank you for your response.\
    \ I am not familiar with ruby code so I thought that it would be best to include\
    \ it in this question.\n<|/ c |>\n<| c |>\nYour question is also tagged [tag:java]\
    \ but you never mentioned that in your question. Can you please clarify?\n<|/\
    \ c |>\n<| c |>\nsorry, my bad. I thought Java was the most familiar language.\
    \ Now I added Java in the question. thank you\n<|/ c |>\n<| c |>\nIn that case,\
    \ I think my code should be fine. Do you get any errors?\n<|/ c |>\n<| c |>\n\
    I tried it but the result I get is \"0\"\n<|/ c |>\n<| a |>\nThis can be done\
    \ in a very simple way using simple mathematics. As you can see in the first example,\
    \ there are 10 apples and 15 oranges so there would be 15 mango fruits in the\
    \ basket. But the second example, you have 5 apples and 6 oranges, so 15 mango\
    \ fruits. Similarly, in third example, there are 2 apples and 3 oranges, so 3\
    \ mango fruits.\nI assume that you are given two input strings. The first one\
    \ is the string that contains the total number of apples and oranges. The second\
    \ is the string that contains the total number of fruits in the basket.\nBelow\
    \ is a solution that uses simple mathematics:\n<code>", "  s.to_i.times { |i|\
    \ a[i] += n if s.start_with?('apples') }\n  a.reject { |e| e.to_i < n }.length\n\
    end\n</cell>\n<cell>\nputs fruit_distribution(\"5 apples and 6 oranges\", 19)\n\
    puts fruit_distribution(\"0 apples and 1 oranges\",3)\nputs fruit_distribution(\"\
    2 apples and 3 oranges\", 100)\nputs fruit_distribution(\"100 apples and 1 oranges\"\
    ,120)\n</cell>\n<text>\nQuestion 12\nThere are two kinds of fruits in the basket:\
    \ apples and oranges. Write a method that receives two numbers and returns the\
    \ number of fruits of the second kind in the basket of the first. \nFor examle:\n\
    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"\
    0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and\
    \ 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1\
    \ oranges\",120) -> 120 - 100 - 1 = 19", "  s = s.to_s.gsub(/apples/, '').gsub(/oranges/,\
    \ '').gsub(/apples/, '').gsub(/oranges/, '').to_s.gsub(/apples/, '').to_i\n  print\
    \ s\n  n = n.to_s.gsub(/apples/, '').gsub(/oranges/, '').gsub(/apples/, '').gsub(/oranges/,\
    \ '').to_s.gsub(/apples/, '').to_i\n  print n\n  s = s - n - 2\n  print s\n  return\
    \ s\nend\n</cell>\n<cell>\nputs fruit_distribution(\"5 apples and 6 oranges\"\
    , 19)\n</cell>\n<cell>\nputs fruit_distribution(\"0 apples and 1 oranges\",3)\n\
    </cell>\n<cell>\nputs fruit_distribution(\"2 apples and 3 oranges\", 100)\n</cell>\n\
    <cell>\nputs fruit_distribution(\"100 apples and 1 oranges\",120)\n</cell>\n<text>\n\
    Task 9\nGiven the string that represents the total number of apples and oranges\
    \ \nthat were distributed in a basket of fruit \nthis basket contains apples,\
    \ oranges, and mango fruits, \nreturn the number of mango fruits in the basket.",
  "    if s.empty?\n        n\n    else\n        l = s.split(' and ')\n        total\
    \ = l.pop\n        l.each do |element|\n            l = element.split ' and'\n\
    \            count = l.pop\n            if count.to_i == n\n                return\
    \ count\n            end\n        end\n    end\nend", "    apples = apple = orange\
    \ = mango = 0\n    apples_index = [apple, orange, mango]\n    basket = s.split(//)\n\
    \    basket_index = [apples, oranges, mango]\n    basket.map! {|i| i.to_i}\n \
    \   basket.each_index { |i| basket_index[i] += basket[i] - 1 }\n    basket_index[oranges]\
    \ += n - apples - oranges\n    basket_index[mango] += 1\n    basket_index.each\
    \ { |i, v| basket[i] = v - 1 }\n    basket\nend\n</code>\nIn a comment, you ask\
    \ about performance. It should be possible to make this algorithm more efficient\
    \ than the Ruby version, but I suspect it is far more complex than the Ruby version.\n\
    To do this, I suspect you would have to make some changes to the Ruby version,\
    \ namely to the array manipulation code. First, I suggest you change basket =\
    \ s.split(//) to basket = s.split(//).to_a. Then, instead of using map.each, you\
    \ should use map!. Finally, instead of using each, you should use each_index.\n\
    <code>\napples = apple = orange = mango = 0\napples_index = [apple, orange, mango]\n\
    basket = s.split(//)\nbasket_index = [apples, oranges, mango]\nbasket.map! {|i|\
    \ i.to_i}\nbasket.each_index { |i| basket_index[i] += basket[i] - 1 }\nbasket_index[oranges]\
    \ += n - apples - oranges\nbasket_index[mango] += 1\nbasket_index.each { |i, v|\
    \ basket[i] = v - 1 }\nbasket\n</code>\nI made this change and ran the benchmark,\
    \ using the following code:\n<code>", "    apple = 0\n    orange = 0\n    mango\
    \ = 0\n    s.count(\"apples\")\n    s.count(\"oranges\")\n    s.count(\"mango\"\
    )\n    apples = s.count(\"apples\")\n    oranges = s.count(\"oranges\")\n    mangos\
    \ = s.count(\"mango\")\n    if apples > oranges and apples > mangos and oranges\
    \ > mangos:\n        mango = oranges - mangos + mangos\n    elif apples > oranges\
    \ and apples < mangos and oranges > mangos:\n        mango = apples - mangos +\
    \ mangos\n    elif apples > oranges and apples < mangos and mangos < oranges:\n\
    \        mango = apples - mangos + mangos - oranges\n    elif apples > oranges\
    \ and apples < mangos and oranges < mangos:\n        mango = apples - mangos +\
    \ mangos - oranges - mangos\n    elif apples < oranges and apples > mangos and\
    \ mangos > oranges:\n        mango = mangos - oranges + oranges\n    elif apples\
    \ < oranges and apples < mangos and mangos < oranges:\n        mango = mangos\
    \ - oranges + oranges - mangos\n    elif apples < oranges and apples < mangos\
    \ and oranges < mangos:\n        mango = mangos - oranges + oranges - mangos -\
    \ apples\n    return mango\nend\n</cell>\n<code language=julia-1.5>", "  n = n.to_i\n\
    \  s = s.downcase\n  fruits = s.scan(/\\d+/)\n  apples, oranges = fruits.first.to_i,\
    \ fruits.last.to_i\n  apples -= oranges\n  apples = apples.abs if apples <= n\
    \ else n\n  return apples if apples == n else n - apples\nend", "    apples, oranges,\
    \ mango = s.split(\" \")\n    apples_count = apples.to_i\n    oranges_count =\
    \ oranges.to_i\n    mango_count = mango.to_i\n    mango_count = mango_count -\
    \ apples_count - oranges_count\n    return mango_count + fruit_distribution(n,\
    \ n - apples_count - oranges_count)\nend", "   apples, oranges, mangos = s.split('\
    \ ') \n   apples = apples.to_i\n   oranges = oranges.to_i\n   mangos = mangos.to_i\n\
    \   fruits_number = apples + oranges + mangos\n   fruit_number = fruits_number\
    \ % n\n   return fruit_number\nend\n</code>\nThe method above is called a modulo\
    \ operation and basically divides two numbers and returns the remainder. The %\
    \ operator returns the remainder of a division between two numbers.\nThe to_i\
    \ method converts a string to an integer if the string can be converted.\nRuby\
    \ also has some built in methods that help with string processing and conversion\
    \ such as split. \nRuby also has many methods that operate on strings like chars,\
    \ downcase, upcase, and so on. You can read more about them here.\n<|/ a dscore=3\
    \ tags=ruby |>\n<| c |>\nThis is exactly the kind of thing I was looking for!\n\
    <|/ c |>\n<| c |>\nGreat answer, but why not `fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19)` instead of `fruit_distribution(\"5 apples and 6 oranges\"\
    , 19).to_i`?\n<|/ c |>\n<| c |>\nGood point, that would probably be cleaner.\n\
    <|/ c |>\n<| c |>\nAlso, instead of `apples, oranges, mangos = s.split` you could\
    \ use `s.split(\" \")` to avoid the splitting on spaces.\n<|/ c |>\n<| c |>\n\
    Good points. I've updated my answer to include those changes.\n<|/ c |>\n<| a\
    \ |>\nYou can use the .split method, which will return the array. Then, you would\
    \ use the .to_i method to convert those strings into integers. \n<code>", "  \
    \  return n\nend", "  apples, oranges, mangos = s.split(/ +\\s(?=apples|oranges|mangos)/)\n\
    \  apples, oranges, mangos = apples.to_i, oranges.to_i, mangos.to_i\n  apples,\
    \ oranges, mangos = apples * n, oranges * n, mangos * n\n  apples -= mangos\n\
    \  oranges -= mangos\n  mangos += apples-oranges\n  return mangos\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>", "  total = 0\n  apple = 0\n  orange = 0\n\
    \  count = 0\n  s.scan(/\\d+/) do |i|\n    if i.to_i != 0\n      total = total\
    \ + i.to_i\n    end\n  end\n  s.scan(/\\w+/) do |i|\n    if i.to_s != \"\"\n \
    \     if i.to_s =~ /apple/i\n        apple = apple + i.to_i\n      end\n     \
    \ if i.to_s =~ /orange/i\n        orange = orange + i.to_i\n      end\n    end\n\
    \  end\n  return count if apple <= n && orange <= n && total <= n\n  return 0\n\
    end\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| a tags=ruby |>\nA very simple and\
    \ effective way is to split the string by \"apple\", \"orange\" and \"mango\"\
    \ keywords and then sum the count of each fruit. \n<code>", "  apples, oranges,\
    \ mangos = s.scan(/\\d+/).to_a\n  apple_distribution, orange_distribution, mango_distribution\
    \ = s.scan(/\\d+/).to_a\n  \n  total_apples   = apple_distribution.inject(0){\
    \ |sum,val| sum + val }\n  total_oranges  = orange_distribution.inject(0){ |sum,val|\
    \ sum + val }\n  total_mangoes  = mango_distribution.inject(0){ |sum,val| sum\
    \ + val }\n  \n  total_fruits = apple_distribution + orange_distribution + mango_distribution\n\
    \  \n  total_mangoes = total_fruits-total_apples+total_oranges\n  \n  return total_mangoes\n\
    end", "  apples, oranges, mango = s.split(\" \")\n  apples.to_i\n  oranges.to_i\n\
    \  mango.to_i\nend", "  \n  #initialize your solution here\n  m = 0\n  \n  #get\
    \ total number of oranges and apples in basket \n  apples = s.split('and')\n \
    \ orange = apples[1].split('or')[0].split(' ')[0].to_i\n  \n  while n > orange\n\
    \    m += orange\n    n -= orange\n  \n  apples = apples[0].split('and')\n  apples\
    \ = apples[1].split('or')[0].split(' ')[0].to_i\n  \n  while n > apples\n    m\
    \ += apples\n    n -= apples\n  \n  \n  return m \nend", "  # your code here\n\
    \  return s.to_i - n.to_i\nend", "  # Your code here\n  a = (s.split \"apples\
    \ and oranges\")[1].to_i\n  b = (s.split \"apples and oranges\")[0].to_i\n  c\
    \ = n.to_i\n  d = a - b - c\n  return d\nend", "  \n  # write your code here\n\
    \  fruits = s.split(' ')\n  apple = fruits.count('apple')\n  orange = fruits.count('orange')\n\
    \  mango = fruits.count('mango')\n  result = mango - apple - orange + n\n  return\
    \ result\nend\n</code>\n<|/ a tags=ruby,algorithm dscore=1 |>\n<| c |>\nI think\
    \ it should be `s.split(\" \")`, not `s.split()`\n<|/ c |>\n<| c |>\nWhy should\
    \ that be `s.split(\" \")` and not `s.split()`?\n<|/ c |>\n<| c |>\n`s.split(\"\
    \ \").count` is better than `s.split(\" \").count`\n<|/ c |>\n<| c |>\nI thought\
    \ that `s.split(' ')` would be better because I thought that `split` might use\
    \ regex which could slow down the algorithm, but in this case it is probably the\
    \ same.\n<|/ c |>\n<| c |>\nIf you have an array `\"5 apples and 6 oranges\"`\
    \ then `s.split(\" \")` will split it into `\"5\", \"apples\", \"and\", \"6\"\
    , \"oranges\"` while `s.split()` will just split it into `[\"5\", \"apples\",\
    \ \"and\", \"6\", \"oranges\"]`. So `s.split()` is more efficient because you\
    \ don't have to convert it back into an array.\n<|/ c |>\n<| a dscore=0 |>\nYou\
    \ can do the following\n<code>", "  s.split(\" \").map(&:to_i).reduce(:+)\n  s.split(\"\
    \ \").map(&:to_i).reduce(:+) - n\nend", "    total = 0\n    s_array = s.split(\"\
    \ \")\n    for i in s_array\n      total += i.to_i if i.to_i > 0 else 0\n    total\
    \ = total - n\n    total = (n - total) if total > n else total\n    return total\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThank you so much, this is great! I'm\
    \ still working on it, but this looks great! I learned alot from it.\n<|/ c |>\n\
    <| c |>\nI added another method to it that might be a bit easier to understand\n\
    <|/ c |>\n<| c |>\nThank you so much! This really helps me!\n<|/ c |>\n<| a |>\n\
    In addition to Sachin's answer, here's an alternative solution that converts the\
    \ input string into an array of integers (apples and oranges) and then uses Enumerable#sum\
    \ to sum the array:\n<code>", "  apple = s.split('apples')[1].split('and')[0].to_i\n\
    \  orange = s.split('oranges')[1].split('and')[0].to_i\n  mango = s.split('mangoes')[1].split('and')[0].to_i\n\
    \  return mango - (apple + orange)\nend", "  s = s.to_s.gsub(/apples/, \"1\")\n\
    \  s = s.gsub(/oranges/, \"2\")\n  s = s.gsub(/apples/, \"3\")\n  s = s.gsub(/oranges/,\
    \ \"4\")\n  s = s.gsub(/apples/, \"5\")\n  s = s.gsub(/oranges/, \"6\")\n  s =\
    \ s.gsub(/apples/, \"7\")\n  s = s.gsub(/oranges/, \"8\")\n  s = s.gsub(/apples/,\
    \ \"9\")\n  s = s.gsub(/oranges/, \"10\")\n  s = s.gsub(/apples/, \"11\")\n  s\
    \ = s.gsub(/oranges/, \"12\")\n  s = s.gsub(/apples/, \"13\")\n  s = s.gsub(/oranges/,\
    \ \"14\")\n  s = s.gsub(/apples/, \"15\")\n  s = s.gsub(/oranges/, \"16\")\n \
    \ s = s.gsub(/apples/, \"17\")\n  s = s.gsub(/oranges/, \"18\")\n  s = s.gsub(/apples/,\
    \ \"19\")\n  s = s.gsub(/oranges/, \"20\")\n  s = s.gsub(/apples/, \"21\")\n \
    \ s = s.gsub(/oranges/, \"22\")\n  s = s.gsub(/apples/, \"23\")\n  s = s.gsub(/oranges/,\
    \ \"24\")\n  s = s.gsub(/apples/, \"25\")\n  s = s.gsub(/oranges/, \"26\")\n \
    \ s = s.gsub(/apples/, \"27\")\n  s = s.gsub(/oranges/, \"28\")\n  s = s.gsub(/apples/,\
    \ \"29\")\n  s = s.gsub(/oranges/, \"30\")\n  s = s.gsub(/apples/, \"31\")\n \
    \ s = s.gsub(/oranges/, \"32\")\n  s = s.gsub(/apples/, \"33\")\n  s = s.gsub(/oranges/,\
    \ \"34\")\n  s = s.gsub(/apples/, \"35\")\n  s = s.gsub(/oranges/, \"36\")\n \
    \ s = s.gsub(/apples/, \"37\")\n  s = s.gsub(/oranges/, \"38\")\n  s = s.gsub(/apples/,\
    \ \"39\")\n  s = s.gsub(/oranges/, \"40\")\n  s = s.gsub(/apples/, \"41\")\n \
    \ s = s.gsub(/oranges/, \"42\")\n  s = s.gsub(/apples/, \"43\")\n  s = s.gsub(/oranges/,\
    \ \"44\")\n  s = s.gsub(/apples/, \"45\")\n  s = s.gsub(/oranges/, \"46\")\n \
    \ s = s.gsub(/apples/, \"47", "  # Your code here\n  s = s.split(\" \")\n  apple\
    \ = s.count(\"apples\")\n  orange = s.count(\"oranges\")\n  mango = s.count(\"\
    mango\")\n  m = 0\n  for i in range(0, n):\n    if mango < n-i:\n      m = n-i\n\
    \  return mango - apple - orange\n  ", "  apples = n.to_i # convert the string\
    \ to the integer\n  s.split(', ').map { |i| apples.include?(i.to_i) }.count\n\
    end\n</code>\n<|/ a |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  s.split(\"\
    \ \").map(&:to_i).reduce(:+) - n\nend\n</code>\n<|/ a |>\n<| c |>\nIf you're looking\
    \ to avoid `.to_i` you can use `s.split(\" \").map(&:to_i).reduce(:+) - n`.\n\
    <|/ c |>\n<| c |>\nThis answer would be more useful if you added a little explanation.\n\
    <|/ c |>\n<| c |>\nThis is a very elegant solution!\n<|/ c |>\n<| c |>\nThe code\
    \ in this answer will work for any number of apples and oranges, regardless of\
    \ whether there is one or multiple numbers in the string. `'5 apples and 6 oranges'`\
    \ will correctly return `8`, but `'apples and oranges'` will return `5`.\n<|/\
    \ c |>\n<| c |>\nI know, I just thought it would be more straightforward\n<|/\
    \ c |>\n<| a dscore=1 tags=ruby,ruby-on-rails,string,regex |>\nI hope you don't\
    \ mind this answer, and I'm sure you'll accept it, but I think it is the simplest\
    \ and most clear solution to your problem. \n<code>", "    number= s.split(\"\
    \ \") \n    oranges = number.pop(1).to_i\n    apples = number.pop(1).to_i\n  \
    \  fruit =  number.map { |item| item.to_i }\n    mango = (oranges.to_i + apples.to_i).to_i\
    \ - (fruit.sum + oranges.to_i)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  return n - s.split(' ').count { |a| a.include?(\"orange\") }\
    \ if s.count >= n\n  s.scan(/(\\d+) oranges?/).sum { |a| a[1].to_i }\nend\n</code>\n\
    <|/ a tags=ruby,regex dscore=0 |>\n<| c |>\nIt does not, please read question.\
    \ Thanks.\n<|/ c |>\n<| c |>\nOk, I added a comment above.\n<|/ c |>\n<| c |>\n\
    I guess you misunderstood my question, I do not care about how many apples and\
    \ oranges they have. I am interested in the total number of fruits.\n<|/ c |>\n\
    <| c |>\n, I have added a further explanation to the question and your answer.\
    \ Please take a look.\n<|/ c |>\n<| c |>\n, I have updated my answer per your\
    \ clarifications. Please take a look.\n<|/ c |>\n<| a tags=ruby,regex dscore=0\
    \ |>\nTo answer your question about what your approach was doing wrong, here is\
    \ an example of what happened:\n<code>\n\"1 apple, 1 orange, 1 apple, 2 oranges,\
    \ 3 apples, 1 orange, 1 apple\".scan(/([a-zA-Z]+)\\sapples?/).count\n</code>\n\
    This was the original regex:\n<code>\n\"1 apple, 1 orange, 1 apple, 2 oranges,\
    \ 3 apples, 1 orange, 1 apple\".scan(/([a-zA-Z]+)\\sapples?/).count", " \n  arr\
    \ =[]\n  arr_1 =[]\n  arr_2 =[]\n  arr_3 =[]\n  arr_4 =[]\n  arr_5 =[]\n  arr_6\
    \ = []\n  arr_7 = []\n  arr_8 = []\n  arr_9 = []\n  arr_10 = []\n  arr_11 = []\n\
    \  arr_12 = []\n  arr_13 = []\n  arr_14 = []\n  arr_15 = []\n  arr_16 = []\n \
    \ arr_17 = []\n  arr_18 = []\n  arr_19 = []\n  arr_20 = []\n  arr_21 = []\n  arr_22\
    \ = []\n  arr_23 = []\n  arr_24 = []\n  arr_25 = []\n  arr_26 = []\n  arr_27 =\
    \ []\n  arr_28 = []\n  arr_29 = []\n  arr_30 = []\n  arr_31 = []\n  arr_32 = []\n\
    \  arr_33 = []\n  arr_34 = []\n  arr_35 = []\n  arr_36 = []\n  arr_37 = []\n \
    \ arr_38 = []\n  arr_39 = []\n  arr_40 = []\n  arr_41 = []\n  arr_42 = []\n  arr_43\
    \ = []\n  arr_44 = []\n  arr_45 = []\n  arr_46 = []\n  arr_47 = []\n  arr_48 =\
    \ []\n  arr_49 = []\n  arr_50 = []\n  arr_51 = []\n  arr_52 = []\n  arr_53 = []\n\
    \  arr_54 = []\n  arr_55 = []\n  arr_56 = []\n  arr_57 = []\n  arr_58 = []\n \
    \ arr_59 = []\n  arr_60 = []\n  arr_61 = []\n  arr_62 = []\n  arr_63 = []\n  arr_64\
    \ = []\n  arr_65 = []\n  arr_66 = []\n  arr_67 = []\n  arr_68 = []\n  arr_69 =\
    \ []\n  arr_70 = []\n  arr_71 = []\n  arr_72 = []\n  arr_73 = []\n  arr_74 = []\n\
    \  arr_75 = []\n  arr_76 = []\n  arr_77 = []\n  arr_78 = []\n  arr_79 = []\n \
    \ arr_80 = []\n  arr_81 = []\n  arr_82 = []\n  arr_83 = []\n  arr_84 = []\n  arr_85\
    \ = []\n  arr_86 = []\n  arr_87 = []\n  arr_88 = []\n  arr_89 = []\n  arr_90 =\
    \ []\n  arr_91 = []\n  arr_92 = []\n  arr_93 = []\n  arr_94 = []\n  arr_95 = []\n\
    \  arr_96 = []\n  ", "  apples, oranges, mango = s.split.map { |i| i.to_i }\n\
    \  fruit = apples + oranges + mango\n  fruit - n + mango \nend", "  # write your\
    \ code here\nend", "  apples = n.to_i - s.to_i\n  oranges = s.to_i - apples.to_i\n\
    \  mango = apples - oranges\n  return mango\nend\n</cell>\n<cell>", "  apples,\
    \ oranges, mangos = s(0).split(\" \"), s(1).split(\" \"), s(2).split(\" \")\n\
    \  total_apples = apples.count(\"apples\")\n  total_oranges = oranges.count(\"\
    oranges\")\n  total_mangos = mangos.count(\"mango\")\n  result = (total_oranges\
    \ - total_apples) - total_mangos - n\n  puts \"result: #{result}\"\n  result\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nTo add on to what Gary has\
    \ said, you aren't storing the apples and oranges in variables. When you count\
    \ them, you're actually counting them as a string which is why it works when you\
    \ add them. You should assign them to variables.\n<code>\napples, oranges, mangos\
    \ = s(0).split(\" \"), s(1).split(\" \"), s(2).split(\" \")\ntotal_apples = apples.count(\"\
    apples\")\ntotal_oranges = oranges.count(\"oranges\")\ntotal_mangos = mangos.count(\"\
    mango\")\n</code>\n<|/ a tags=ruby |>\n<| a |>\nIf your string always contains\
    \ the number of apples, oranges and mangoes, then you can use the String#count\
    \ method to count them:\n<code>\nfruits = \"5 apples and 6 oranges\"", "  apple\
    \ = s.split(\" \").count (\"apples\")\n  orange = s.split(\" \").count (\"oranges\"\
    )\n  mango = 0\n  if orange+apple > n\n    puts apple - orange\n  else \n    puts\
    \ orange+apple-n\n  end \nend", " \n  s.scan(/\\d+/) do |total| \n    if total\
    \ == 0 || total == nil\n      return 0\n    else\n      s.scan(/\\d+/) do |number|\
    \ \n        if number == 0 || number == nil\n          return 0\n        else\n\
    \          s.scan(/\\w+/) do |fruit| \n            if fruit == nil\n         \
    \     return 0\n            else\n              return total - number - fruit.split.sum\n\
    \            end\n          end\n        end\n      end\n    end\n  end\nend",
  "    \n    # Your code here\n    \nend", "  apples = s.split(' apples and ')[1].split('\
    \ oranges')[0]\n  oranges = s.split(' apples and ')[0].split(' oranges')[1]\n\
    \  \n  if(apples.to_i > oranges.to_i)\n    return apples.to_i - oranges.to_i -\
    \ n\n  else\n    return oranges.to_i - apples.to_i - n\nend", "  apples, oranges,\
    \ mango = s.split('and')\n  apples, oranges, mango = apples.split(', '), oranges.split(',\
    \ '), mango.split(', ')\n  apples = apples.to_i\n  oranges = oranges.to_i\n  mango\
    \ = mango.to_i\n  total_apples, total_oranges = apples.sum, oranges.sum\n  total_fruits\
    \ = apples + oranges + mango\n  apples_left_in_basket = n - total_fruits\n  mango\
    \ = mango - total_fruits - apples_left_in_basket\n  \n  \n  return mango\nend",
  "\tapples_oranges_mango = 0\n\tapples_oranges = s.split(\" \")[0]\n\toranges = s.split(\"\
    \ \")[1]\n\tmangos = s.split(\" \")[2]\n\tapples_oranges = apples_oranges.to_i\n\
    \toranges = oranges.to_i\n\tmangos = mangos.to_i\n\ts.split.each do |s|\n\t\t\
    s = s.to_i\n\t\tif s == apples_oranges + oranges + mangos\n\t\t\tapples_oranges_mango\
    \ += s\n\t\tend\n\tend\n\tapples_oranges_mango - apples_oranges - oranges - mangos\n\
    end", "    puts \"There are #{n} fruits in your basket.\"\n    puts \"You have:\
    \ #{s.chomp.split(' ')}\"\n    apples = s.split(' ').size - 3\n    oranges = s.split('\
    \ ').size - 2\n    mangos = s.split(' ').size - 1\n    puts \"apples: #{apples}\"\
    \n    puts \"oranges: #{oranges}\"\n    puts \"mangos: #{mangos}\"\n    puts \"\
    mangos = #{mangos} - #{apples + oranges + 1}\"\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails-4,string\
    \ |>\n<| c |>\nI love this answer. I was thinking about this too. :)\n<|/ c |>\n\
    <| c |>\nThis answer is not the optimal solution, it's just a  demonstration of\
    \ an approach that might work for the OPs purposes. As such, it doesn't really\
    \ answer the question. It should have been a comment on my answer instead. I'm\
    \ upvoting it nonetheless.\n<|/ c |>\n<| c |>\nI like the use of slice. Very clever!\n\
    <|/ c |>\n<| c |>\nThanks for your contribution. I would really like to know what\
    \ are the downsides of my approach.\n<|/ c |>\n<| a dscore=1 |>\nIf you want a\
    \ more flexible approach, consider using regular expressions, especially the match\
    \ method with lookarounds inside your match string, which can handle all the combinations\
    \ of patterns you want to handle and also use capture groups to get the fruit\
    \ counts from your string:\n<code>", "  apples = s[/\\d+/].to_i\n  oranges = s.scan(/\\\
    d+/).reduce(:|)\n  fruits = s.scan(/\\w+/).reduce(:+)\n  fruits_count = fruits.to_i\n\
    \  \n  fruits - (apples + oranges - fruits_count)\nend", "    apples = s.split('\
    \ apples and ')\n    oranges = s.split(' oranges and ')\n    mango = s.split('\
    \ mango fruit and ')\n    # add return statement\nend", "  sum = (s.split('and').reduce(:+))\n\
    \  apples = n.to_i\n  oranges = sum - apples\n  fruit = apples+oranges+(apples-oranges)*(apples.to_f/oranges.to_f)\n\
    \  fruit == 0 ? 0 : (fruit.to_f-(fruit-apples).to_f)/apples.to_f\nend", "  n =\
    \ s.scan(/\\d+/)\n  s = s.scan(/\\d+/).join(\"+\")\n  s = n.to_i - s.to_i\n  s.to_i\n\
    end", "  apples = s.split(' and')[0].to_i\n  oranges = s.split(' and')[1].to_i\n\
    \  fruits = s.split(' and')[2].to_i\n  fruits-=apples-oranges\n  fruits+=(apples-(n-fruits))\n\
    \  return fruits\nend\n</cell>\n<code language=julia-1.0>", "  if s.nil? or n.nil?\n\
    \    return nil\n  end\n  \n  apples = n.to_i\n  oranges = s.to_i\n  \n  apples_diff\
    \ = apples - oranges\n  \n  apples_count = apples_diff.nil? ? nil : apples_diff.to_i\n\
    \  oranges_count = oranges.nil? ? nil : oranges.to_i\n  \n  if apples_count.nil?\
    \ or oranges_count.nil?\n    return nil\n  end\n  \n  apples_diff == 0 && oranges_count\
    \ == apples_count ? apples_count : nil\nend", "    apples = oranges = 0\n    fruits\
    \ = 0\n    s.split(\"and\")\n    s.split(\"and\").each do |x|\n        fruits\
    \ += x.strip.to_i\n        fruits -= x.strip.to_i if x.strip.to_i > 0\n    end\n\
    \    fruits -= fruits % n\n    return fruits if fruits < n\n    fruits -= n\n\
    \    fruits = fruits.abs\n    fruits -= fruits.quo(n)\n    fruits %= n\n    return\
    \ fruits.to_i\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "    apples\
    \ = 0\n    oranges = 0\n    mangoes = 0\n    apples_and_oranges = \"\"\n    number_of_apples_and_oranges\
    \ = s.length\n    number_of_fruit = n", "    if s.to_s.empty?\n        puts \"\
    Error input String is empty\"\n    else\n        apples = s.to_s.split(' and ').map(&:to_i)\n\
    \        oranges = n - (apples[0] + apples[1])\n        mangos = n - (apples[0]\
    \ + apples[1] + oranges)\n        puts mangos == 0 ? 'Your basket does not contain\
    \ any mangoes!' : mangos == 1 ? 'Your basket contains 1 mango!' : mangos == 2\
    \ ? 'Your basket contains 2 mangoes!' : nil\n    end\nend", "    return s.split('\
    \ ') \n    # Split your string into an array of fruit\n    # Calculate the total\
    \ number of the fruits\n    # Calculate how many of the fruits in the array is\
    \ mango\nend", " \n    apples = n.to_i\n    oranges = apples.to_f\n    fruits\
    \ = s.length.to_i\n    mangos = fruits - apples - oranges", "    apples, oranges\
    \ = s.split(' ') \n    numberofApples = int(apples.split('and')[0]) \n    numberofOranges\
    \ = int(oranges.split('and')[0]) \n    numberofMangos = 0\n    \n    for i in\
    \ range(1,n+1): \n        if numberofApples == i:\n            numberofMangos\
    \ += i \n            numberofApples = 0\n        elif numberofOranges == i:\n\
    \            numberofMangos += i\n            numberofOranges = 0\n        else:\n\
    \            numberofMangos += i - numberofApples - numberofOranges\n        \
    \    numberofApples = 0\n            numberofOranges = 0", "\ts.split(\" \").each_with_index\
    \ do |apple, apple_index|\n\t\tapple_index += 2\n\t\tapple = apple.to_i\n\t\t\
    apple_index += 2\n\t\toranges = apple - apple_index\n\t\tn -= oranges\n\t\ts -=\
    \ apple_index\n\t\tn -= apple\n\t\tbreak if n == 0\n\tend\n\treturn n\nend", " \
    \ apples = n.to_s.split(/\\W+/)\n  oranges = apples.last(2).reduce(:+)\n  apples\
    \ = apples.first(2).reduce(:+)\n  apples += oranges\n  apples.to_i\nend\n</code>\n\
    <|/ a tags=ruby dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/28376915)\n<|/ c |>\n<| c |>\nI did\
    \ provide an answer to the question. He just asked what kind of solution to use,\
    \ and I found it helpful. Not everyone has that luxury yet.\n<|/ c |>\n<| a |>\n\
    My solution\n<code>", " \n    # Initialize a variable to store the number\n  \
    \  # of apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Split\
    \ s into \"apples\" + space + \"oranges\"\n    words = s.split(\" \", 2)", " \
    \ apple = s.split(\" \")[0]\n  orange = s.split(\" \")[1]\n  fruits = s.split(\"\
    \ \")[2]\n  apple = apple.to_i\n  orange = orange.to_i\n  fruits = fruits.to_i\n\
    \  m = (orange - apple) / fruits\n  m = m.to_i\n  return m if m <= n \n  return\
    \ n\nend", "  s.split(\" \").each{|s| puts s}\n  return n-2-s.split(\" \").uniq.count{\
    \ |a| a == \"apples\" }\nend", "  s.gsub(/\\s+/, '').split(', ').map{|fruit| fruit.to_i}.max\
    \ - (s.gsub(/\\s+/, '').split(', ').map{|fruit| fruit.to_i}.max - n)\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| a dscore=0 |>\n<code>", "  apples, oranges, mango\
    \ = s.split(\" \") \n  apples.to_i + (oranges.to_i*3) - (mango.to_i*3)\nend\n\
    </code>\n<|/ a tags=ruby,if-statement |>\n<| a dscore=0 |>\nThis task seems to\
    \ need no explanation at all\n<code>", "  # Write your code here\n  apples = 0\n\
    \  oranges = 0\n  mangos = 0", "  return s.split(' and ').select{|x| x.to_i !=\
    \ 0}.sum - n\nend", "    return s.split.to_i - (s.split.to_i + n.to_i).to_i\n\
    end\n</code>\n<|/ a |>\n<| a dscore=2 tags=ruby |>\nI guess this is more of an\
    \ exercise in String Manipulation.\nYou can try the following way:\n<code>\nfruits\
    \ = \"apples, oranges, and mango\"\nfruits.gsub!(/,\\s*|and,\\s+/, \"and\")\n\
    fruits.gsub!(/and,/, \" and \")\nfruits.gsub!(/and/, \"and\")\nputs fruits\n</code>\n\
    <|/ a |>\n<| a tags=ruby |>\nI like this one:\n<code>", "  puts s\n  puts n\n\
    \  s.split(/\\s(and|or)/)\n  apples = n.to_i\n  oranges = s.gsub(/apples?(\\s|\\\
    d)+and?(\\s|\\d)+oranges?/, apples).to_i\n  mangos = (apples-oranges-apples).to_i\n\
    \  puts \"Mangos: #{mangos}\"\n  return mangos\nend", "    apples = n[0].to_i\n\
    \    oranges = n[1].to_i\n    total_fruits = apples + oranges\n    apples = apples.abs\
    \ % total_fruits\n    oranges = oranges.abs % total_fruits\n    mango_fruits =\
    \ apples + oranges - total_fruits\n    return mango_fruits\nend", "  s.split(\"\
    \ \").each do |fruit|\n    fruit.split(\" \").each do |number|\n      if number[0].to_i\
    \ == 1 && number[1].to_i == 0\n        n.to_i\n      end\n    end\n  end\nend",
  "  n1 = n.to_i\n  s1 = 'apples'\n  s2 = 'oranges'\n  s3 = 'mango'\n  \n  apples\
    \ = s.split(\" \").count(\"#{s1}\")\n  oranges = s.split(\" \").count(\"#{s2}\"\
    )\n  mangos = s.split(\" \").count(\"#{s3}\")", "\ts.split(\" \").map do |fruit|\
    \ \n\t\tfruit = fruit[0].to_i\n\t\ts = fruit[1].length.to_i \n\t\tfruit.times\
    \ { n -= s }\n\t\tn\n\tend.reduce(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
