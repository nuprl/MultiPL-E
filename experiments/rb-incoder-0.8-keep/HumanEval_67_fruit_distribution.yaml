name: HumanEval_67_fruit_distribution
language: rb
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 -\
  \ 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n#\
  \ fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n# fruit_distribution(\"\
  100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\ndef fruit_distribution(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
