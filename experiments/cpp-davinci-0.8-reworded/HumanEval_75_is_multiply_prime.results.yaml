language: cpp
name: HumanEval_75_is_multiply_prime
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// start to write your code here\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpl1o9tbku: /tmp/tmpl1o9tbku.cpp:15: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int firstFactor = 0;\n    int secondFactor = 0;\n    int thirdFactor\
    \ = 0;\n    if (a % 2 == 0) {\n        firstFactor = 2;\n        a /= 2;\n   \
    \ }\n    if (a % 3 == 0) {\n        secondFactor = 3;\n        a /= 3;\n    }\n\
    \    if (a % 5 == 0) {\n        thirdFactor = 5;\n        a /= 5;\n    }\n   \
    \ if (a == 1 && firstFactor * secondFactor * thirdFactor == 30) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp0wx663ax: /tmp/tmp0wx663ax.cpp:35: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    if (a == 1 || a == 2)\n        return true;\n\
    \    for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            if (count > 2)\n                return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpfu0j7ctr: /tmp/tmpfu0j7ctr.cpp:25: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int n = a;\n    std::vector<int> prime_numbers;\n    prime_numbers.push_back(2);\n\
    \    while (n != 1) {\n        if (n % prime_numbers.back() == 0) {\n        \
    \    prime_numbers.push_back(prime_numbers.back());\n            n /= prime_numbers.back();\n\
    \        } else {\n            prime_numbers.back()++;\n        }\n    }\n   \
    \ std::cout << std::endl;\n    int num = prime_numbers.size();\n    for (int i\
    \ = 0; i < num - 3; i++) {\n        for (int j = i + 1; j < num - 2; j++) {\n\
    \            for (int k = j + 1; k < num - 1; k++) {\n                if (prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: '










    '
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // TODO: Your code here\n    int count = 0;\n    for (int i = 2; i\
    \ <= a; i++) {\n        if (a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    return count == 3;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// TODO: complete the function\n\t// This function must return true\
    \ if the given number is the multiplication of 3 prime numbers\n\t// and false\
    \ otherwise.\n\t// Knowing that (a) is less then 100. \n\t// Example:\n\t// >>>\
    \ is_multiply_prime((30))\n\t// (true)\n\t// 30 = 2 * 3 * 5\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi8njvbpu: /tmp/tmpi8njvbpu.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// Write your code here\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8e548bar: /tmp/tmp8e548bar.cpp:15: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<long> v;\n    for (long i = 2; i <= 100; i++) {\n    \
    \    bool is_prime = true;\n        for (long j = 2; j * j <= i; j++) {\n    \
    \        if (i % j == 0) {\n                is_prime = false;\n              \
    \  break;\n            }\n        }\n        if (is_prime) {\n            v.push_back(i);\n\
    \        }\n    }\n    int x = v.size();\n    for (int i = 0; i < x; i++) {\n\
    \        for (int j = 0; j < x; j++) {\n            for (int k = 0; k < x; k++)\
    \ {\n                if (v[i] * v[j] * v[k] == a) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tlong x = a;\n\tlong y = 1;\n\tfor (long p = 2; p <= a; p++) {\n\t\t\
    if (a % p == 0) {\n\t\t\ta = a / p;\n\t\t\ty = y * p;\n\t\t\tp = 1;\n\t\t}\n\t\
    }\n\tif (y == x) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnbd3iqz5: /tmp/tmpnbd3iqz5.cpp:29: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool f = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i\
    \ == 0) {\n            if (i % 2 != 0) {\n                f = 1;\n           \
    \     for (int j = 3; j < a; j++) {\n                    if (a % j == 0) {\n \
    \                       if (j % 2 != 0) {\n                            f = 1;\n\
    \                            for (int k = 5; k < a; k++) {\n                 \
    \               if (a % k == 0) {\n                                    if (k %\
    \ 2 != 0) {\n                                        f = 1;\n                \
    \                        std::cout << i << \" \" << j << \" \" << k << \"\\n\"\
    ;\n                                        return true;\n                    \
    \                }\n                                }\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppalonx7q: /tmp/tmppalonx7q.cpp:41: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    long divisor = 2;\n    std::vector<long> primes;\n    int number_of_primes\
    \ = 0;\n    while (a > 1) {\n        if (a % divisor == 0) {\n            a /=\
    \ divisor;\n            if (number_of_primes >= 3) {\n                return false;\n\
    \            }\n            number_of_primes++;\n            primes.push_back(divisor);\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2wl9gigl: /tmp/tmp2wl9gigl.cpp:30: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a>=0);\n\tif (a == 0) {\n\t\treturn false;\n\t}\n\tif (a == 1)\
    \ {\n\t\treturn true;\n\t}\n\tstd::set<long> primes;\n\tfor (long i = 2; i <=\
    \ a; i++) {\n\t\tbool is_prime = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\
    \t\tif (i % j == 0) {\n\t\t\t\tis_prime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif (is_prime) {\n\t\t\tprimes.insert(i);\n\t\t}\n\t}\n\twhile(a != 1) {\n\
    \t\tbool is_found = false;\n\t\tfor (auto i : primes) {\n\t\t\tif (a % i == 0)\
    \ {\n\t\t\t\ta /= i;\n\t\t\t\tis_found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif (!is_found) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpel7a4hab: /tmp/tmpel7a4hab.cpp:48: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint number_of_devisors = 0;\n\tfor (int i = 1; i < a; i++) {\n\t\tif\
    \ (a % i == 0) {\n\t\t\tnumber_of_devisors++;\n\t\t}\n\t}\n\tif (number_of_devisors\
    \ == 2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqok7cx8g: /tmp/tmpqok7cx8g.cpp:27: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(a < 100);\n    int i,j,k;\n    int x = a;\n    for(i=2;i<=x;i++)\n\
    \    {\n        if(x%i==0)\n        {\n            for(j=2;j<=x;j++)\n       \
    \     {\n                if(x%j==0)\n                {\n                    for(k=2;k<=x;k++)\n\
    \                    {\n                        if(x%k==0)\n                 \
    \       {\n                            return true;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nrmkfi7: /tmp/tmp8nrmkfi7.cpp:37: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    \n    if (a == 2 || a == 3 || a == 5)\n        return true;\n    else\
    \ if (a == 1)\n        return false;\n    else {\n        if (a % 2 == 0)\n  \
    \          a /= 2;\n        if (a % 3 == 0)\n            a /= 3;\n        if (a\
    \ % 5 == 0)\n            a /= 5;\n        if (a == 1)\n            return true;\n\
    \        else\n            return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpg8kl1lyz: /tmp/tmpg8kl1lyz.cpp:31: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 0) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp28ybsj63: /tmp/tmp28ybsj63.cpp:24: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> v;\n    for (int i = 2; i <= a; i++) {\n        if\
    \ (a % i == 0) {\n            v.push_back(i);\n            a /= i;\n         \
    \   i--;\n        }\n    }\n    assert(v.size() <= 3);\n    if (v.size() != 3)\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpfeo8ns8q: /tmp/tmpfeo8ns8q.cpp:19: bool is_multiply_prime(long int):
    Assertion `v.size() <= 3'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    return a>=6 && a%2==0 && a%3==0 && a%5==0;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp36tfq1sf: /tmp/tmp36tfq1sf.cpp:17: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  // Your code here\n  int j = 0;\n  bool res = true;\n  if (a == 0 ||\
    \ a == 1) {\n    return false;\n  }\n  for (int i = 2; i < a / 2; i++) {\n   \
    \ if (a % i == 0) {\n      for (int j = 2; j < i / 2; j++) {\n        if (i %\
    \ j == 0) {\n          return false;\n        }\n      }\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcqvixzm2: /tmp/tmpcqvixzm2.cpp:30: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp24iqfn16: /tmp/tmp24iqfn16.cpp:17: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  // your code\n  int count=0;\n  for(int i=2;i<=a;i++)\n  {\n    if(a%i==0)\n\
    \    {\n      for(int j=2;j<=i/2;j++)\n      {\n        if(i%j==0)\n        {\n\
    \          break;\n        }\n        else\n        {\n          count++;\n  \
    \      }\n      }\n    }\n  }\n  if(count==3)\n  {\n    return true;\n  }\n  else\n\
    \  {\n    return false;\n  }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpdb35kjac: /tmp/tmpdb35kjac.cpp:42: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, flag = 0;\n\tif (a <= 1) {\n\t\treturn false;\n\t}\n\tfor (i\
    \ = 2; i <= a / 2; ++i) {\n\t\tif (a % i == 0) {\n\t\t\tflag = 1;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (flag == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8yip0jui: /tmp/tmp8yip0jui.cpp:28: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i < a; i++) {\n        for (int j = 2; j < a; j++)\
    \ {\n            for (int k = 2; k < a; k++) {\n                if (i * j * k\
    \ == a) {\n                    std::cout << a << \" = \" << i << \" * \" << j\
    \ << \" * \" << k << std::endl;\n                    return true;\n          \
    \      }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfb7g3oas: /tmp/tmpfb7g3oas.cpp:31: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: '30 = 2 * 3 * 5

    8 = 2 * 2 * 2

    125 = 5 * 5 * 5

    105 = 3 * 5 * 7

    126 = 2 * 3 * 21

    '
  timestamp: 1660099613
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool is_prime(long a);\n    int n = 0;\n    int arr[100];\n    int\
    \ arr2[100];\n    for (int i = 2; i < a; i++) {\n        if (is_prime(i) && a\
    \ % i == 0) {\n            arr[n] = i;\n            n++;\n        }\n    }\n \
    \   bool flag = false;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = i + 1; j < n; j++) {\n            if (arr[i] * arr[j] <= a) {\n          \
    \      if (a % (arr[i] * arr[j]) == 0) {\n                    arr2[i] = arr[i];\n\
    \                    arr2[j] = arr[j];\n                    for (int k = 0; k\
    \ < n; k++) {\n                        if (a % (arr2[i] * arr2[j] * arr[k]) ==\
    \ 0) {\n                            flag = true;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return flag;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: '/usr/bin/ld: /tmp/ccrprOww.o: in function `is_multiply_prime(long)'':

    tmp26qtuo8v.cpp:(.text+0x56): undefined reference to `is_prime(long)''

    collect2: error: ld returned 1 exit status

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    \n    long f[100] = {0};\n    long s = sqrt(a);\n    for (long i =\
    \ 2; i <= s; i++) {\n        if (a % i == 0) {\n            if (f[i] == 0) {\n\
    \                f[i] = 1;\n                a /= i;\n                i--;\n  \
    \          } else {\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpglq60_ld: /tmp/tmpglq60_ld.cpp:29: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool result = false;\n    // TODO: Write your code here\n    long\
    \ n = a;\n    int count = 0;\n    while (n % 2 == 0)\n    {\n        count++;\n\
    \        n = n / 2;\n    }\n    if (count > 0)\n    {\n        count = 0;\n  \
    \      for (int i = 3; i <= sqrt(n); i = i + 2)\n        {\n            while\
    \ (n % i == 0)\n            {\n                count++;\n                n = n\
    \ / i;\n            }\n        }\n        if (n > 2)\n            count++;\n \
    \       result = (count == 3);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpog5fwt7k: /tmp/tmpog5fwt7k.cpp:40: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n   std::vector<long> prime;\n   prime.push_back(2);\n   prime.push_back(3);\n\
    \   prime.push_back(5);\n   prime.push_back(7);\n   prime.push_back(11);\n   prime.push_back(13);\n\
    \   prime.push_back(17);\n   prime.push_back(19);\n   prime.push_back(23);\n \
    \  prime.push_back(29);\n   prime.push_back(31);\n   prime.push_back(37);\n  \
    \ prime.push_back(41);\n   prime.push_back(43);\n   prime.push_back(47);\n   prime.push_back(53);\n\
    \   prime.push_back(59);\n   prime.push_back(61);\n   prime.push_back(67);\n \
    \  prime.push_back(71);\n   prime.push_back(73);\n   prime.push_back(79);\n  \
    \ prime.push_back(83);\n   prime.push_back(89);\n   prime.push_back(97);\n   long\
    \ temp = 0;\n   int num_of_prime = 0;\n   for (int i = 0; i < prime.size(); i++)\
    \ {\n      if (a % prime[i] == 0) {\n         temp = temp * prime[i];\n      \
    \   num_of_prime++;\n      }\n   }\n   if (num_of_prime == 3 && temp == a)\n \
    \     return true;\n   else \n      return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpmb6r4xxm: /tmp/tmpmb6r4xxm.cpp:53: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // To do\n    std::vector<int> factors;\n    int k = 2;\n    while\
    \ (a > 1) {\n        while (a % k == 0) {\n            factors.push_back(k);\n\
    \            a /= k;\n        }\n        k++;\n    }\n    if (factors.size() !=\
    \ 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int ans = 0;\n    for (int i = 1; i <= sqrt(a); i++) {\n        if\
    \ (a % i == 0) {\n            ans++;\n        }\n    }\n    if (ans != 3) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp53f80e3h: /tmp/tmp53f80e3h.cpp:25: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> b;\n    int test = a;\n    for (int i = 2; i <= a;\
    \ i++) {\n        if (a % i == 0) {\n            a = a / i;\n            b.push_back(i);\n\
    \            i = 1;\n        }\n    }\n    int c = 1;\n    for (auto i : b) {\n\
    \        c *= i;\n    }\n    if (c == test) {\n        return true;\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpje8kvlkv: /tmp/tmpje8kvlkv.cpp:31: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a < 3) {\n        return false;\n    }\n    for (int i = 2; i\
    \ < a; i++) {\n        if (a % i == 0) {\n            for (int j = 2; j < a; j++)\
    \ {\n                if (i * j == a) {\n                    return true;\n   \
    \             }\n            }\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl37_wrh5: /tmp/tmpl37_wrh5.cpp:30: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int arr_prime[100];\n    int count = 0;\n    int temp = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        for (int j = 2; j <= i; j++) {\n       \
    \     if (i % j == 0) {\n                temp++;\n            }\n        }\n \
    \       if (temp == 1) {\n            arr_prime[count] = i;\n            count++;\n\
    \        }\n        temp = 0;\n    }\n    for (int i = 0; i < count; i++) {\n\
    \        for (int j = 0; j < count; j++) {\n            for (int k = 0; k < count;\
    \ k++) {\n                if (arr_prime[i] * arr_prime[j] * arr_prime[k] == a)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: '*** stack smashing detected ***: terminated

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if(a == 1) return false;\n    std::vector<int> vec;\n    while(a %\
    \ 2 == 0) {\n        vec.push_back(2);\n        a /= 2;\n    }\n    for(int i\
    \ = 3; i <= sqrt(a); i+=2) {\n        while(a % i == 0) {\n            vec.push_back(i);\n\
    \            a /= i;\n        }\n    }\n    if(a > 2) vec.push_back(a);\n    return\
    \ vec.size() == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a <= 0) {\n        return false;\n    }\n    for (int i = 2; i\
    \ <= a; i++) {\n        if (a % i == 0) {\n            a /= i;\n            break;\n\
    \        }\n    }\n    for (int i = 2; i <= a; i++) {\n        if (a % i == 0)\
    \ {\n            a /= i;\n            break;\n        }\n    }\n    for (int i\
    \ = 2; i <= a; i++) {\n        if (a % i == 0) {\n            a /= i;\n      \
    \      break;\n        }\n    }\n    return a == 1;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp75zib5k7: /tmp/tmp75zib5k7.cpp:36: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) {\n\t\treturn true;\n\t}\n\tlong tmp = a;\n\tfor (long i\
    \ = 2; i <= sqrt(a); i++) {\n\t\tint cnt = 0;\n\t\twhile (tmp % i == 0) {\n\t\t\
    \tcnt++;\n\t\t\ttmp /= i;\n\t\t}\n\t\tif (cnt >= 3) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif (tmp >= 3) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp56hcrnns: /tmp/tmp56hcrnns.cpp:34: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// write your code here.\n\tint arr[a];\n\tfor (int i = 0; i < a; i++)\n\
    \t\tarr[i] = 1;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (arr[i] == 1) {\n\t\t\
    \tfor (int j = i; j * i < a; j++) {\n\t\t\t\tarr[i * j] = 0;\n\t\t\t}\n\t\t}\n\
    \t}\n\tint count = 0;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (arr[i] == 1) {\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\t//printf(\"%d\\n\", count);\n\tif (count >= 3) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\n}\nint main() {\n \
    \   auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8o342ybb: /tmp/tmp8o342ybb.cpp:42: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // your code here...\n    int x = 0;\n    while(a%2 == 0){\n     \
    \   a = a/2;\n        x++;\n    }\n    while(a%3 == 0){\n        a = a/3;\n  \
    \      x++;\n    }\n    while(a%5 == 0){\n        a = a/5;\n        x++;\n   \
    \ }\n    if(x == 3){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0r1795lc: /tmp/tmp0r1795lc.cpp:39: int main(): Assertion `candidate((105))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a < 100);\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\
    \t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\tif (count == 3) {\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t}\n\treturn false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptz_jpjkg: /tmp/tmptz_jpjkg.cpp:11: bool is_multiply_prime(long int):
    Assertion `a < 100'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tfor (long i = 2; i <= a / 2; i++) {\n\t\tif (a % i\
    \ == 0) {\n\t\t\tlong b = a / i;\n\t\t\tfor (long j = 2; j <= b / 2; j++) {\n\t\
    \t\t\tif (b % j == 0) {\n\t\t\t\t\tlong c = b / j;\n\t\t\t\t\tfor (long k = 2;\
    \ k <= c / 2; k++) {\n\t\t\t\t\t\tif (c % k == 0) {\n\t\t\t\t\t\t\treturn false;\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tbool is_multiplied = false;\n\tint divisor = 2;\n\t\
    if (a == 2)\n\t\treturn true;\n\twhile (a != 1) {\n\t\tif (a % divisor == 0) {\n\
    \t\t\tis_multiplied = true;\n\t\t\ta /= divisor;\n\t\t}\n\t\telse {\n\t\t\tif\
    \ (is_multiplied)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tdivisor++;\n\t\t\
    }\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpemm9mzl1: /tmp/tmpemm9mzl1.cpp:32: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // your code here\n    int flag = 0;\n    int x = 0;\n    if(a ==\
    \ 1)\n        return false;\n    while(a != 1)\n    {\n        if(a % 2 == 0)\n\
    \        {\n            a = a / 2;\n            flag = 1;\n        }\n       \
    \ else if(a % 3 == 0)\n        {\n            a = a / 3;\n            flag = 1;\n\
    \        }\n        else if(a % 5 == 0)\n        {\n            a = a / 5;\n \
    \           flag = 1;\n        }\n        else if(a % 7 == 0)\n        {\n   \
    \         a = a / 7;\n            flag = 1;\n        }\n        else if(a % 11\
    \ == 0)\n        {\n            a = a / 11;\n            flag = 1;\n        }\n\
    \        else if(a % 13 == 0)\n        {\n            a = a / 13;\n          \
    \  flag = 1;\n        }\n        else if(a % 17 == 0)\n        {\n           \
    \ a = a / 17;\n            flag = 1;\n        }\n        else if(a % 19 == 0)\n\
    \        {\n            a = a / 19;\n            flag = 1;\n        }\n      \
    \  else if(a % 23 == 0)\n        {\n            a = a / 23;\n            flag\
    \ = 1;\n        }\n        else if(a % 29 == 0)\n        {\n            a = a\
    \ / 29;\n            flag = 1;\n        }\n        else if(a % 31 == 0)\n    \
    \    {\n            a = a / 31;\n            flag = 1;\n        }\n        else\
    \ if(a % 37 == 0)\n        {\n            a = a / 37;\n            flag = 1;\n\
    \        }\n        else if(a % 41 == 0)\n        {\n            a = a / 41;\n\
    \            flag = 1;\n        }\n        else if(a % 43 == 0)\n        {\n \
    \           a = a / 43;\n            flag = 1;\n        }\n        else if(a %\
    \ 47 == 0)\n        {\n            a = a / 47;\n            flag = 1;\n      \
    \  }\n        else if\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzc81d1e.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpzzc81d1e.cpp:94:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   94 | }\n      | ^\n      | (\n/tmp/tmpzzc81d1e.cpp:95:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   95 |\
    \ int main() {\n      |            ^\n/tmp/tmpzzc81d1e.cpp:107:1: error: expected\
    \ \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpzzc81d1e.cpp:10:32:\
    \ note: to match this \u2018{\u2019\n   10 | bool is_multiply_prime(long a) {\n\
    \      |                                ^\n/tmp/tmpzzc81d1e.cpp:107:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  107 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660099611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  bool flag = true;\n  for (int i = 2; i <= a / 2; ++i) {\n    if (a %\
    \ i == 0) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsgwcljds: /tmp/tmpsgwcljds.cpp:22: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool is_prime_num[a+1];\n    memset(is_prime_num, true, sizeof(is_prime_num));\n\
    \    for (int i = 2; i*i <= a; i++) {\n        if (is_prime_num[i] == true) {\n\
    \            for (int j = i*i; j <= a; j += i)\n                is_prime_num[j]\
    \ = false;\n        }\n    }\n    for (int i = 2; i <= a; i++) {\n        if (is_prime_num[i])\
    \ {\n            for (int j = 2; j <= a; j++) {\n                if (is_prime_num[j])\
    \ {\n                    for (int k = 2; k <= a; k++) {\n                    \
    \    if (is_prime_num[k]) {\n                            if (i*j*k == a) {\n \
    \                               return true;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint arr[3];\n\tint n = 0;\n\tbool is_prime[100];\n\tfor (int i = 0;\
    \ i < 100; i++) {\n\t\tis_prime[i] = true;\n\t}\n\tfor (int i = 2; i < 100; i++)\
    \ {\n\t\tif (is_prime[i]) {\n\t\t\tfor (int j = i * i; j < 100; j += i) {\n\t\t\
    \t\tis_prime[j] = false;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 2; i < 100; i++)\
    \ {\n\t\tif (is_prime[i]) {\n\t\t\tif (a % i == 0) {\n\t\t\t\tarr[n] = i;\n\t\t\
    \t\tn++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n == 3);\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp52z_777z: /tmp/tmp52z_777z.cpp:38: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// TODO: Implement this function\n\t// Hint: use the 'is_prime' function\n\
    \t\n\tif(a<=1) return false;\n\tif(a==2) return true;\n\tfor(int i=2;i<sqrt(a);i++){\n\
    \t\tif(a%i==0) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmphje6for3: /tmp/tmphje6for3.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i < a/2; i++) {\n        if (a % i == 0) {\n     \
    \       int y = a / i;\n            for (int j = 2; j < y/2; j++) {\n        \
    \        if (y % j == 0) {\n                    int z = y / j;\n             \
    \       return true;\n                }\n            }\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n  \
    \  assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmplhrtlc85: /tmp/tmplhrtlc85.cpp:28: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    //Write your code here\n\n    //solution 1\n    long b = 2;\n    long\
    \ c = 0;\n    while (a > 1) {\n        if (a % b == 0) {\n            a /= b;\n\
    \            c++;\n        } else {\n            b++;\n        }\n    }\n    if\
    \ (c == 3) {\n        return true;\n    } else {\n        return false;\n    }\n\
    \n    //solution 2\n    /*\n    long b = 2;\n    long c = 0;\n    while (a > 1)\
    \ {\n        if (a % b == 0) {\n            a /= b;\n            c++;\n      \
    \  } else {\n            b++;\n        }\n    }\n    if (c == 3) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n    */\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  \n  int flag = 0;\n  // base case \n  if (a <= 1) \n      return false;\
    \ \n  if (a <= 3) \n      return true; \n  if (a % 2 == 0 || a % 3 == 0) \n  \
    \    return false; \n  for (int i = 5; i * i <= a; i = i + 6) \n      if (a %\
    \ i == 0 || a % (i + 2) == 0) \n          return false; \n  return true; \n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw52bre82: /tmp/tmpw52bre82.cpp:27: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    long n = a;\n    if (n < 0) n = -n;\n    long divisor = 2;\n    long\
    \ last_divisor = 1;\n    while (n > 1) {\n        if (n % divisor == 0) {\n  \
    \          last_divisor = divisor;\n            n /= divisor;\n            while\
    \ (n % divisor == 0) {\n                n /= divisor;\n            }\n       \
    \ }\n        divisor++;\n    }\n    if (last_divisor == a) return false;\n   \
    \ else return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbu1yeac: /tmp/tmpnbu1yeac.cpp:33: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// TODO: Fill in this function\n\tif (a == 0 || a == 1) {\n\t\treturn\
    \ false;\n\t}\n\tif (a == 2 || a == 3 || a == 5) {\n\t\treturn true;\n\t}\n\t\
    if (a % 2 == 0 || a % 3 == 0 || a % 5 == 0) {\n\t\treturn false;\n\t}\n\tstd::vector<int>\
    \ primeFactors;\n\tint i = 2;\n\twhile (a > 1) {\n\t\tif (a % i == 0) {\n\t\t\t\
    primeFactors.push_back(i);\n\t\t\ta /= i;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t\
    }\n\t}\n\tif (primeFactors.size() == 3) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9tpd_t22: /tmp/tmp9tpd_t22.cpp:39: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tstd::vector<long> v;\n\tfor (int i = 2; i < 100; i++) {\n\t\tbool check\
    \ = true;\n\t\tfor (int j = 2; j <= i / 2; j++) {\n\t\t\tif (i % j == 0) {\n\t\
    \t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (check) {\n\t\t\t\
    v.push_back(i);\n\t\t}\n\t}\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tfor (int\
    \ j = 0; j < v.size(); j++) {\n\t\t\tfor (int k = 0; k < v.size(); k++) {\n\t\t\
    \t\tif (v[i] * v[j] * v[k] == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool flag = true;\n    if (a == 1 || a == 0) {\n        return false;\n\
    \    }\n    for (int i = 2; i <= a / 2; i++) {\n        if (a % i == 0) {\n  \
    \          for (int j = 2; j <= a / 2; j++) {\n                if (i % j == 0)\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n            for (int k = 2; k <= a / 2; k++) {\n   \
    \             if (a % k == 0) {\n                    for (int l = 2; l <= a /\
    \ 2; l++) {\n                        if (k % l == 0) {\n                     \
    \       flag = false;\n                            break;\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpxsqp8a1h: /tmp/tmpxsqp8a1h.cpp:39: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// it is kaka\n    bool result = false;\n    // cout << \"a = \" <<\
    \ a << endl;\n    for (int i = 2; i < a; i++) {\n        for (int j = 2; j < a;\
    \ j++) {\n            for (int k = 2; k < a; k++) {\n                if (i * j\
    \ * k == a) {\n                    // cout << \"i = \" << i << \" j = \" << j\
    \ << \" k = \" << k << endl;\n                    result = true;\n           \
    \     }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp110tx3vo: /tmp/tmp110tx3vo.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if(a==0){\n        return false;\n    }\n    if(a==1){\n        return\
    \ true;\n    }\n    std::vector<long> v;\n    for(long i=2;i<=a;i++){\n      \
    \  int f=0;\n        for(long j=2;j<=sqrt(i);j++){\n            if(i%j==0){\n\
    \                f=1;\n                break;\n            }\n        }\n    \
    \    if(f==0){\n            v.push_back(i);\n        }\n    }\n    for(int i=0;i<v.size();i++){\n\
    \        int f=0;\n        for(int j=0;j<v.size();j++){\n            if(a%(v[i]*v[j])==0){\n\
    \                f=1;\n                break;\n            }\n        }\n    \
    \    if(f==1){\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn2ihbzs3: /tmp/tmpn2ihbzs3.cpp:49: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) return false;\n\t// number of primes is known to be under\
    \ 100\n\tint prime_number[100];\n\tint c = 0;\n\tfor (int i = 2; i < 100; i++)\
    \ {\n\t\tif (is_prime(i)) {\n\t\t\tprime_number[c] = i;\n\t\t\tc++;\n\t\t}\n\t\
    }\n\tint k = 0;\n\twhile (prime_number[k] < a) {\n\t\tfor (int j = 0; j < c; j++)\
    \ {\n\t\t\tif (prime_number[k] * prime_number[j] * prime_number[j + 1] == a) return\
    \ true;\n\t\t}\n\t\tk++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns3xl2dz.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpns3xl2dz.cpp:16:7: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   16 |   if (is_prime(i)) {\n      |       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    //assign the value to the variable\n    int x = a;\n    //find the\
    \ factors of the given number\n    std::vector<int> factor;\n    for (int i =\
    \ 2; i <= x; i++) {\n        while (x % i == 0) {\n            factor.push_back(i);\n\
    \            x /= i;\n        }\n    }\n    //check if the factors are prime or\
    \ not\n    int count = 0;\n    for (int i = 0; i < factor.size(); i++) {\n   \
    \     int prime = 0;\n        for (int j = 2; j <= factor[i] / 2; j++) {\n   \
    \         if (factor[i] % j == 0) {\n                prime = 1;\n            \
    \    break;\n            }\n        }\n        if (prime == 0) {\n           \
    \ count++;\n        }\n    }\n    //check if the number of prime factors are 3\n\
    \    if (count == 3) {\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n  \
    \  assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tbool is_prime(long n);\n\tint i;\n\tfor (i = 2; i < a; i++) {\n\t\t\
    if (is_prime(i) && a % i == 0) {\n\t\t\ta /= i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    for (int j = i; j < a; j++) {\n\t\tif (is_prime(j) && a % j == 0) {\n\t\t\ta /=\
    \ j;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_prime(a)) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: '/usr/bin/ld: /tmp/ccr33hu2.o: in function `is_multiply_prime(long)'':

    tmpt3kdec0s.cpp:(.text+0x2b): undefined reference to `is_prime(long)''

    /usr/bin/ld: tmpt3kdec0s.cpp:(.text+0x8f): undefined reference to `is_prime(long)''

    /usr/bin/ld: tmpt3kdec0s.cpp:(.text+0xe1): undefined reference to `is_prime(long)''

    collect2: error: ld returned 1 exit status

    '
  stdout: ''
  timestamp: 1660099615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(a < 100);\n    bool used[100] = {0};\n    long i;\n    for\
    \ (i = 2; i * i <= a; i++) {\n        if (a % i == 0) {\n            used[i] =\
    \ 1;\n            used[a / i] = 1;\n        }\n    }\n    int count = 0;\n   \
    \ for (i = 2; i < 100; i++) {\n        if (used[i]) {\n            count++;\n\
    \        }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp4ans46pp: /tmp/tmp4ans46pp.cpp:31: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tint b[101];\n\tfor (int i = 0; i < 101; i++) {\n\t\
    \tb[i] = 0;\n\t}\n\tfor (int i = 2; i <= sqrt(a); i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tif (b[i] == 0) {\n\t\t\t\tb[i] = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tint c = a / i;\n\t\t\tif (b[c] == 0) {\n\t\t\t\t\
    b[c] = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tint count = 0;\n\tfor (int i = 2; i < 101; i++) {\n\t\tif (b[i] == 1) {\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpscqtxljw: /tmp/tmpscqtxljw.cpp:49: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  long i = 2;\n  bool ok;\n  for (i = 2; i <= sqrt(a); i++) {\n    if\
    \ (a % i == 0) {\n      ok = true;\n      a = a / i;\n      break;\n    }\n  }\n\
    \  for (i = 2; i <= sqrt(a); i++) {\n    if (a % i == 0) {\n      ok = true;\n\
    \      a = a / i;\n      break;\n    }\n  }\n  if (ok) {\n    if (a == 1) {\n\
    \      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else\
    \ {\n    return false;\n  }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpmgzbw0bh: /tmp/tmpmgzbw0bh.cpp:42: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a < 100);\n\tint i = 2;\n\tstd::vector<int> primes;\n\twhile\
    \ (a != 1) {\n\t\tif (a % i == 0) {\n\t\t\ta /= i;\n\t\t\tprimes.push_back(i);\n\
    \t\t}\n\t\telse\n\t\t\ti++;\n\t}\n\treturn primes.size() == 3;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0fhuknwm: /tmp/tmp0fhuknwm.cpp:11: bool is_multiply_prime(long int):
    Assertion `a < 100'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // TODO: write your code here\n    int b = a;\n    int c = 0;\n  \
    \  for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            a = a\
    \ / i;\n            c++;\n            if (c == 3)\n                break;\n  \
    \      }\n    }\n    if (c == 3)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2k01jh6e: /tmp/tmp2k01jh6e.cpp:30: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    int m = primes.size();\n\
    \    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < m; j++) {\n  \
    \          for (int k = 0; k < m; k++) {\n                if (primes[i] * primes[j]\
    \ * primes[k] == a) {\n                    return true;\n                }\n \
    \           }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  \n  long mult_prime = 1;\n  for (long i = 2; i < a; i++) {\n    if (a\
    \ % i == 0) {\n      if (is_prime(i)) {\n        mult_prime *= i;\n      }\n \
    \   }\n  }\n  if (mult_prime == a) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppn_ko2vq.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmppn_ko2vq.cpp:15:11: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   15 |       if (is_prime(i)) {\n      |           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    bool isPrime(int n);\n    for (int i = 2; i <\
    \ a; i++) {\n        if (a % i == 0) {\n            if (isPrime(i)) {\n      \
    \          count++;\n            }\n        }\n    }\n    if (count == 3) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: '/usr/bin/ld: /tmp/ccBolsn2.o: in function `is_multiply_prime(long)'':

    tmp6fywymc6.cpp:(.text+0x46): undefined reference to `isPrime(int)''

    collect2: error: ld returned 1 exit status

    '
  stdout: ''
  timestamp: 1660099615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  assert(0 <= a && a <= 100);\n  // FIXME: implement\n  return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0m73rvjb: /tmp/tmp0m73rvjb.cpp:18: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    if (a % 2 == 0) {\n        count++;\n        if\
    \ (a % 3 == 0) {\n            count++;\n            if (a % 5 == 0) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmps2omdw4l: /tmp/tmps2omdw4l.cpp:27: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a < 100);\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\
    \t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\twhile (a % i == 0) {\n\t\t\t\ta /=\
    \ i;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmprus39974: /tmp/tmprus39974.cpp:32: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  // int cnt = 0;\n  // bool flag = false;\n  // bool is_prime = true;\n\
    \  // if (a == 1) {\n  //   return false;\n  // }\n  // for (int i = 2; i < a\
    \ / 2; i++) {\n  //   if (a % i == 0) {\n  //     is_prime = false;\n  //    \
    \ break;\n  //   }\n  // }\n  // if (is_prime) {\n  //   return true;\n  // }\n\
    \  // for (int i = 2; i < a / 2; i++) {\n  //   if (a % i == 0) {\n  //     for\
    \ (int j = 2; j < i / 2; j++) {\n  //       if (i % j == 0) {\n  //         flag\
    \ = true;\n  //         break;\n  //       }\n  //     }\n  //     if (!flag)\
    \ {\n  //       cnt++;\n  //     }\n  //     flag = false;\n  //   }\n  // }\n\
    \  // return cnt == 3;\n  long arr[101] = {0};\n  for (int i = 2; i <= a; i++)\
    \ {\n    if (arr[i] == 0) {\n      for (int j = i; j <= a; j += i) {\n       \
    \ arr[j]++;\n      }\n    }\n  }\n  for (int i = 2; i <= a; i++) {\n    if (arr[i]\
    \ == 3) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8h8ffvhl: /tmp/tmp8h8ffvhl.cpp:60: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i <= sqrt(a); i++) {\n        if (a % i == 0) {\n\
    \            return is_multiply_prime(a / i);\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm3pa6g6m: /tmp/tmpm3pa6g6m.cpp:20: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    int small = 0;\n    for (int i = 2;\
    \ i * i <= a; i++) {\n        while (a % i == 0) {\n            a /= i;\n    \
    \        small++;\n        }\n    }\n    if (a > 1)\n        small++;\n    return\
    \ small == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int counter = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            counter++;\n            while (a % i == 0) {\n    \
    \            a /= i;\n            }\n        }\n    }\n    return counter == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdm41pq0c: /tmp/tmpdm41pq0c.cpp:26: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i\
    \ == 0) {\n            if (cnt == 3) {\n                return false;\n      \
    \      }\n            cnt++;\n        }\n    }\n    return cnt == 3;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjn_gnta6: /tmp/tmpjn_gnta6.cpp:25: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  std::vector<long> vec;\n  vec.reserve(40);\n  long x = 2;\n  while (x\
    \ <= a / x) {\n    if (a % x == 0) {\n      vec.push_back(x);\n      a /= x;\n\
    \    } else {\n      x++;\n    }\n  }\n  vec.push_back(a);\n  return vec.size()\
    \ == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Your code here\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp3s24_ga0: /tmp/tmp3s24_ga0.cpp:15: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool result = false;\n    for (int i = 1; i < a; i++) {\n        for\
    \ (int j = i; j < a; j++) {\n            for (int k = j; k < a; k++) {\n     \
    \           if (i * j * k == a) {\n                    result = true;\n      \
    \          }\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6oyj2pqi: /tmp/tmp6oyj2pqi.cpp:28: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if(a == 1)\n        return false;\n    else if(a == 2)\n        return\
    \ true;\n    long tmp = a;\n    int i = 2;\n    while(tmp != 1) {\n        if(tmp\
    \ % i == 0) {\n            tmp /= i;\n            i = 2;\n        }\n        else\n\
    \            i++;\n    }\n    if(i > 3)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm4095nsc: /tmp/tmpm4095nsc.cpp:31: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp24iqfn16: /tmp/tmp24iqfn16.cpp:17: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tstd::vector<int> primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n\tfor (auto i : primes)\
    \ {\n\t\tfor (auto j : primes) {\n\t\t\tfor (auto k : primes) {\n\t\t\t\tif (i\
    \ * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(a > 0);\n    if (a == 1) return false;\n    if (a == 2) return\
    \ true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i <= a / 2; i\
    \ += 2) {\n        if (a % i == 0) {\n            return is_multiply_prime(a /\
    \ i);\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpgkk0xzvn: /tmp/tmpgkk0xzvn.cpp:24: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool is_prime = false;\n    long num1 = 0;\n    long num2 = 0;\n \
    \   long num3 = 0;\n    int count = 0;\n    for (long i = 2; i <= a; i++) {\n\
    \        is_prime = true;\n        for (long j = 2; j < i; j++) {\n          \
    \  if (i % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            for (long k =\
    \ 2; k <= a; k++) {\n                is_prime = true;\n                for (long\
    \ l = 2; l < k; l++) {\n                    if (k % l == 0) {\n              \
    \          is_prime = false;\n                        break;\n               \
    \     }\n                }\n                if (is_prime) {\n                \
    \    if (i * k == a) {\n                        count++;\n                   \
    \     num1 = i;\n                        num2 = k;\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return count == 2;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc6vmzxnh: /tmp/tmpc6vmzxnh.cpp:48: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a <= 1) {\n        return false;\n    }\n    if (a == 2 || a ==\
    \ 3 || a == 5) {\n        return true;\n    }\n    if (a % 2 == 0 || a % 3 ==\
    \ 0 || a % 5 == 0) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0cszvp83: /tmp/tmp0cszvp83.cpp:24: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(0 <= a && a <= 100);\n    // Find all divisors of the given\
    \ number, find their number and check if it is equal to 3.\n    // If it is equal\
    \ to 3, check the given number.\n    // In order to do this, divide the given\
    \ number by a given divisor.\n    // If the remainder of the division is equal\
    \ to 0, then add 1 to the counter.\n    // After that, increase the divisor by\
    \ 1 and repeat the action until the divisor is equal to the given number.\n  \
    \  // If the counter is equal to 3, then check the given number. If a given number\
    \ is the multiplication of 3 prime numbers, \n    // then it will never be equal\
    \ to the multiplication of two of them. So if the given number is not equal to\
    \ 6 or 10, then \n    // it is the multiplication of 3 prime numbers. Otherwise,\
    \ if the given number is equal to 6 or 10, then return false.\n    long counter\
    \ = 0;\n    for (long i = 2; i <= a; i++) {\n        if (a % i == 0) {\n     \
    \       counter += 1;\n        }\n    }\n    if (counter == 3) {\n        if (a\
    \ != 6 && a != 10) {\n            return true;\n        }\n        else {\n  \
    \          return false;\n        }\n    }\n    else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptzwzkd2m: /tmp/tmptzwzkd2m.cpp:41: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> arr = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        for (int j = 0; j < arr.size(); j++) {\n     \
    \       for (int k = 0; k < arr.size(); k++) {\n                if (arr[i] * arr[j]\
    \ * arr[k] == a) {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if(a == 1 || a == 0)\n    return false;\n  if(a == 2 || a == 3 || a\
    \ == 5)\n    return true;\n  int temp = 0;\n  int x = a;\n  for(int i = 2; i <=\
    \ x; i++) {\n    while(x % i == 0) {\n      x /= i;\n      temp++;\n    }\n  }\n\
    \  if(temp == 3)\n    return true;\n  return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj_8mkaqh: /tmp/tmpj_8mkaqh.cpp:29: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool is_prime_array[100];\n    for (int i = 0; i < 100; i++) {\n \
    \       is_prime_array[i] = true;\n    }\n    for (int i = 2; i < 100; i++) {\n\
    \        if (is_prime_array[i]) {\n            for (int j = i * i; j < 100; j\
    \ += i) {\n                is_prime_array[j] = false;\n            }\n       \
    \ }\n    }\n    for (int i = 2; i < a; i++) {\n        if (is_prime_array[i])\
    \ {\n            for (int j = i; j < a; j++) {\n                if (is_prime_array[j])\
    \ {\n                    for (int k = j; k < a; k++) {\n                     \
    \   if (is_prime_array[k]) {\n                            if (i * j * k == a)\
    \ {\n                                return true;\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp24iqfn16: /tmp/tmp24iqfn16.cpp:17: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  long arr_a[3];\n  int index = 0;\n  long prime = 2;\n  while (a > 1)\
    \ {\n    if (a % prime == 0) {\n      arr_a[index] = prime;\n      index++;\n\
    \      a /= prime;\n    } else {\n      prime++;\n    }\n  }\n  if (index == 3)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n \
    \   auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: '*** stack smashing detected ***: terminated

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  assert(a<100);\n  // Your code here!\n  // If a number is a multiplication\
    \ of 3 prime numbers,\n  // then it's divisible by 3 prime numbers.\n  // So you\
    \ should write a code to check divisibility\n  // of a by 3 prime numbers 2, 3,\
    \ 5.\n  // Hint: Google the C++ function to check if a number\n  // is divisible\
    \ by another number.\n  \n  if(a%2==0){\n    if(a%3==0){\n      if(a%5==0){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwkio3ia_: /tmp/tmpwkio3ia_.cpp:33: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tint count = 0;\n\tint i = 2;\n\twhile (a != 1) {\n\
    \t\twhile (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t}\n\t\ti++;\n\t}\n\
    \tif (count == 3)\n\t\treturn true;\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  int counter = 0;\n  long temp = a;\n  for (long i = 2; i <= sqrt(a);\
    \ i++) {\n    counter = 0;\n    while (a % i == 0) {\n      counter++;\n     \
    \ a /= i;\n    }\n    if (counter == 1) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpepf02cat: /tmp/tmpepf02cat.cpp:29: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  std::vector<int> prime_numbers;\n  for (int i = 2; i <= sqrt(a); i++)\
    \ {\n    if (a % i == 0) {\n      if (std::count(prime_numbers.begin(), prime_numbers.end(),\
    \ i) == 0) {\n        prime_numbers.push_back(i);\n      }\n      a /= i;\n  \
    \    i--;\n    }\n  }\n  if (std::count(prime_numbers.begin(), prime_numbers.end(),\
    \ a) == 0) {\n    prime_numbers.push_back(a);\n  }\n  std::sort(prime_numbers.begin(),\
    \ prime_numbers.end());\n  return (prime_numbers.size() == 3);\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfuu_k9is: /tmp/tmpfuu_k9is.cpp:31: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if (a == 2 || a == 3 || a == 5) {\n    return true;\n  }\n  long i =\
    \ 2;\n  long temp = a;\n  while (temp != 1) {\n    if (temp % i == 0) {\n    \
    \  temp /= i;\n      if (i != 2 && i != 3 && i != 5) {\n        return false;\n\
    \      }\n    } else {\n      i++;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp32qhy6un: /tmp/tmp32qhy6un.cpp:30: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int arr[a],arr2[a];\n    int res = 0;\n    int i,j,k;\n    for(i=2;i<a;i++){\n\
    \        if(a%i==0){\n            for(j=2;j<i;j++){\n                if(i%j==0){\n\
    \                    res++;\n                }\n            }\n            if(res==0){\n\
    \                arr[i]=i;\n            }\n        }\n    }\n    j=0;\n    for(i=0;i<a;i++){\n\
    \        if(arr[i]!=0){\n            arr2[j]=arr[i];\n            j++;\n     \
    \   }\n    }\n    int flg=0;\n    for(i=0;i<a;i++){\n        for(j=0;j<a;j++){\n\
    \            for(k=0;k<a;k++){\n                if(arr2[i]*arr2[j]*arr2[k]==a){\n\
    \                    flg=1;\n                }\n            }\n        }\n   \
    \ }\n    if(flg==1){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptwsplzzi: /tmp/tmptwsplzzi.cpp:58: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099617
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if (a < 6) return false;\n  for (long i = 2; i <= a / 2; i++) {\n  \
    \  if (a % i == 0) {\n      if (is_multiply_prime(a / i)) return true;\n     \
    \ long b = a / i;\n      for (long j = 2; j <= b / 2; j++) {\n        if (b %\
    \ j == 0) {\n          if (is_multiply_prime(b / j)) return true;\n          long\
    \ c = b / j;\n          for (long k = 2; k <= c / 2; k++) {\n            if (c\
    \ % k == 0) {\n              return false;\n            }\n          }\n     \
    \     return true;\n        }\n      }\n    }\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0up4b_hn: /tmp/tmp0up4b_hn.cpp:40: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 0 || a == 1) {\n        return false;\n    }\n    for (int\
    \ i = 2; i < a; i++) {\n        if (a % i == 0) {\n            long b = a / i;\n\
    \            for (int j = 2; j < b; j++) {\n                if (b % j == 0) {\n\
    \                    long c = b / j;\n                    for (int k = 2; k <\
    \ c; k++) {\n                        if (c % k == 0) {\n                     \
    \       return false;\n                        }\n                    }\n    \
    \                return true;\n                }\n            }\n        }\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099617
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    long count = 0;\n    for (long i = 2; i <= 100; i++) {\n        bool\
    \ isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++) {\n           \
    \ if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime && a % i == 0) {\n            count++;\n\
    \        }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpbhlsfmb2: /tmp/tmpbhlsfmb2.cpp:30: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  long x = 2;\n  bool check = false;\n  for (int i = 2; i < a; i++) {\n\
    \    if (a % i == 0) {\n      if (i > 1) {\n\tfor (int j = 2; j < i; j++) {\n\t\
    \  if (i % j == 0) {\n\t    check = false;\n\t    break;\n\t  }\n\t  else {\n\t\
    \    check = true;\n\t  }\n\t}\n\tif (check == true) {\n\t  if (x == i) {\n\t\
    \    return false;\n\t  }\n\t  else {\n\t    x = i;\n\t  }\n\t}\n      }\n   \
    \ }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpg8yedlhe: /tmp/tmpg8yedlhe.cpp:40: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint check = 0;\n\tfor (int i = 2; i <= 100; i++) {\n\t\tif (a % i ==\
    \ 0) {\n\t\t\tfor (int j = 2; j <= 100; j++) {\n\t\t\t\tif (i % j == 0) {\n\t\t\
    \t\t\tcheck++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (check == 1) {\n\t\t\t\tfor (int\
    \ z = 2; z <= 100; z++) {\n\t\t\t\t\tif (a % z == 0) {\n\t\t\t\t\t\tfor (int x\
    \ = 2; x <= 100; x++) {\n\t\t\t\t\t\t\tif (z % x == 0) {\n\t\t\t\t\t\t\t\tcheck++;\n\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (check == 2) {\n\t\t\t\t\t\t\t\
    for (int v = 2; v <= 100; v++) {\n\t\t\t\t\t\t\t\tif (a % v == 0) {\n\t\t\t\t\t\
    \t\t\t\tfor (int n = 2; n <= 100; n++) {\n\t\t\t\t\t\t\t\t\t\tif (v % n == 0)\
    \ {\n\t\t\t\t\t\t\t\t\t\t\tcheck++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\
    }\n\t\t\t\t\t\t\t\t\tif (check == 3) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\
    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwyz9pyhr: /tmp/tmpwyz9pyhr.cpp:50: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 2) return true;\n    int count_prime = 0;\n    for (int i\
    \ = 2; i < a; i++) {\n        if (a % i == 0) {\n            if (i == 2) {\n \
    \               count_prime++;\n                if (count_prime == 3) break;\n\
    \            }\n            else {\n                bool is_prime = true;\n  \
    \              for (int j = 2; j < i; j++) {\n                    if (i % j ==\
    \ 0) {\n                        is_prime = false;\n                        break;\n\
    \                    }\n                }\n                if (is_prime) {\n \
    \                   count_prime++;\n                    if (count_prime == 3)\
    \ break;\n                }\n            }\n        }\n    }\n    if (count_prime\
    \ == 3) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp1z9y7x2d: /tmp/tmp1z9y7x2d.cpp:41: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int t = a;\n    int c = 0;\n    for (int i = 2; i < a/2; i++) {\n\
    \        while (a % i == 0) {\n            a /= i;\n            c++;\n       \
    \ }\n    }\n    if (c == 3) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmph4w5nluo: /tmp/tmph4w5nluo.cpp:27: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i;\n    for (i = 2; i < a; i++) {\n        if (a % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpordp0mhy: /tmp/tmpordp0mhy.cpp:20: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int result = false;\n    if (a == 2 || a == 3 || a == 5 || a == 7\
    \ || a == 11 || a == 13 || a == 17 || a == 19 || a == 23 || a == 29 || a == 31\
    \ || a == 37 || a == 41 || a == 43 || a == 47 || a == 53 || a == 59 || a == 61\
    \ || a == 67 || a == 71 || a == 73 || a == 79 || a == 83 || a == 89 || a == 97)\
    \ {\n        result = true;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_hfpbler: /tmp/tmp_hfpbler.cpp:19: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    long current = a;\n    int i = 2;\n    while (current > 1) {\n   \
    \     while (current % i == 0) {\n            current /= i;\n        }\n     \
    \   i++;\n    }\n    return current == 1;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpjpf2teea: /tmp/tmpjpf2teea.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // write the function body\n    if(a <= 0) return false;\n    int\
    \ result = 1;\n    for(int i = 2; i <= a; i++) {\n        if(a % i == 0) {\n \
    \           int count = 0;\n            while(a % i == 0) {\n                a\
    \ /= i;\n                count++;\n            }\n            if(count > 1) {\n\
    \                result *= i;\n            }\n        }\n    }\n    return (result\
    \ == a);\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz4qam5dc: /tmp/tmpz4qam5dc.cpp:30: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    long long counter = 0;\n    for (long long i = 2; i < a; i++) {\n\
    \        if (a % i == 0) {\n            if (a / i != 1) {\n                return\
    \ false;\n            }\n            else {\n                counter++;\n    \
    \        }\n        }\n    }\n    if (counter == 3) {\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpqyczpayo: /tmp/tmpqyczpayo.cpp:32: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i <= a / i; i++) {\n        if (a % i == 0) {\n  \
    \          for (int j = i; j <= a / j; j++) {\n                if (a % j == 0)\
    \ {\n                    for (int k = j; k <= a / k; k++) {\n                \
    \        if (a % k == 0) {\n                            if (i * j * k == a) {\n\
    \                                return true;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpbigkxswl: /tmp/tmpbigkxswl.cpp:36: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  for (int i = 2; i <= a; i++)\
    \ {\n    if (a % i == 0) {\n      a = a / i;\n      if (x == 0) {\n        x =\
    \ i;\n      } else if (y == 0) {\n        y = i;\n      } else if (z == 0) {\n\
    \        z = i;\n      }\n      i = 2;\n    }\n  }\n  if (x * y * z == a && x\
    \ != y && y != z && x != z) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmps_l564bg: /tmp/tmps_l564bg.cpp:36: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tstd::vector<int> v;\n\tfor (int i = 2; i < 100; i++) {\n\t\tbool b =\
    \ true;\n\t\tfor (int j = 2; j <= i / 2; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\
    \t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (b) {\n\t\t\tv.push_back(i);\n\
    \t\t}\n\t}\n\tint i = 0;\n\twhile (a > 1) {\n\t\tif (a % v[i] == 0) {\n\t\t\t\
    a /= v[i];\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (a == 1) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpeljnlh0v: /tmp/tmpeljnlh0v.cpp:42: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i = 2;\n\tint count = 0;\n\twhile (a > 1) {\n\t\twhile (a % i ==\
    \ 0) {\n\t\t\ta /= i;\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif (count == 3)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099618
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // nh\xE3n t\u1EED nghi\u1EC7m \n    bool flag = false;\n    // l\u1EB7\
    p nh\xE3n t\u1EED nghi\u1EC7m, n\u1EBFu c\xF3 th\u1EC3 chia h\u1EBFt cho s\u1ED1\
    \ nguy\xEAn t\u1ED1 th\xEC ti\u1EBFp t\u1EE5c th\u1EED chia ti\u1EBFp \n    //\
    \ v\xEC chia s\u1ED1 nguy\xEAn t\u1ED1 kh\xF4ng v\u01B0\u1EE3t qu\xE1 s\u1ED1\
    \ nguy\xEAn t\u1ED1 th\xEC \u0111\xE3 l\xE0m cho s\u1ED1 ch\u1EB5n th\xE0nh s\u1ED1\
    \ l\u1EBB\n    // m\xE0 s\u1ED1 ch\u1EB5n chia s\u1ED1 l\u1EBB th\xEC tr\u1EA3\
    \ v\u1EC1 s\u1ED1 l\u1EBB \n    for (int i = 2; i <= a/2; i++) {\n        if (a\
    \ % i == 0) {\n            if (is_prime(i)) {\n                flag = true;\n\
    \                if (is_prime(a/i)) {\n                    return true;\n    \
    \            }\n            }\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvzxsnc9h.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpvzxsnc9h.cpp:18:17: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   18 |             if (is_prime(i)) {\n      |                \
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if(a<=1)\n    return false;\n  bool isPrime[a+1];\n  memset(isPrime,\
    \ true, sizeof(isPrime));\n  for (int p=2; p*p<=a; p++) {\n    if (isPrime[p]\
    \ == true) {\n      for (int i=p*2; i<=a; i += p)\n        isPrime[i] = false;\n\
    \    }\n  }\n  bool b = false;\n  for (int p=2; p<=a; p++) {\n    if (isPrime[p])\
    \ {\n      if (a%p == 0 && isPrime[a/p]) {\n        b = true;\n        break;\n\
    \      }\n    }\n  }\n  return b;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp9s889shu: /tmp/tmp9s889shu.cpp:34: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a>=1);\n\t// Returns true if (a) is the multiplication of 3 prime\
    \ numbers.\n\t// and false otherwise.\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpyi8jdkp3: /tmp/tmpyi8jdkp3.cpp:17: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp24iqfn16: /tmp/tmp24iqfn16.cpp:17: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    long a_cpy = a;\n    std::vector<long> primes;\n    for (long i =\
    \ 2; i <= a_cpy; i++) {\n        long pow = 0;\n        while (a_cpy % i == 0)\
    \ {\n            a_cpy /= i;\n            pow++;\n        }\n        if (pow !=\
    \ 0) {\n            primes.push_back(i);\n        }\n    }\n    if (primes.size()\
    \ == 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcvtqauy2: /tmp/tmpcvtqauy2.cpp:32: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool is_prime = true;\n    for (long i = 2; i <= a / 2; i++) {\n \
    \       if (a % i == 0) {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    return is_prime;\n}\nint main() {\n    auto candidate =\
    \ is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpt2sds0kr: /tmp/tmpt2sds0kr.cpp:22: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// your code here\n\tassert(a < 100);\n\tint arr[99] = { 1,1,1,1,1,1,1,1,1,1,\n\
    \t\t1,1,1,1,1,1,1,1,1,1,\n\t\t1,1,1,1,1,1,1,1,1,1,\n\t\t1,1,1,1,1,1,1,1,1,1,\n\
    \t\t1,1,1,1,1,1,1,1,1,1,\n\t\t1,1,1,1,1,1,1,1,1,1,\n\t\t1,1,1,1,1,1,1,1,1,1,\n\
    \t\t1,1,1,1,1,1,1,1,1,1,\n\t\t1,1,1,1,1,1,1,1,1,1,\n\t\t1,1,1,1,1,1,1,1,1,1 };\n\
    \tfor (int i = 2; i < 100; i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tfor (int j =\
    \ i * 2; j < 100; j += i) {\n\t\t\t\tarr[j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tint n\
    \ = a;\n\tint x, y, z;\n\tfor (int i = 2; i < 100; i++) {\n\t\tif (arr[i] == 1)\
    \ {\n\t\t\tx = i;\n\t\t\tfor (int j = i; j < 100; j++) {\n\t\t\t\tif (arr[j] ==\
    \ 1) {\n\t\t\t\t\ty = j;\n\t\t\t\t\tfor (int k = j; k < 100; k++) {\n\t\t\t\t\t\
    \tif (arr[k] == 1) {\n\t\t\t\t\t\t\tz = k;\n\t\t\t\t\t\t\tif (x * y * z == n)\
    \ {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj4swf05b.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpj4swf05b.cpp:22:23: error: too many initializers for \u2018int [99]\u2019\
    \n   22 |   1,1,1,1,1,1,1,1,1,1 };\n      |                       ^\n/tmp/tmpj4swf05b.cpp:46:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   46 | int main() {\n      |            ^\n/tmp/tmpj4swf05b.cpp:58:1: error:\
    \ expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpj4swf05b.cpp:38:36:\
    \ note: to match this \u2018{\u2019\n   38 |      for (int k = j; k < 100; k++)\
    \ {\n      |                                    ^\n/tmp/tmpj4swf05b.cpp:58:1:\
    \ error: expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpj4swf05b.cpp:36:22:\
    \ note: to match this \u2018{\u2019\n   36 |     if (arr[j] == 1) {\n      | \
    \                     ^\n/tmp/tmpj4swf05b.cpp:58:1: error: expected \u2018}\u2019\
    \ at end of input\n   58 | }\n      | ^\n/tmp/tmpj4swf05b.cpp:35:34: note: to\
    \ match this \u2018{\u2019\n   35 |    for (int j = i; j < 100; j++) {\n     \
    \ |                                  ^\n/tmp/tmpj4swf05b.cpp:58:1: error: expected\
    \ \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpj4swf05b.cpp:33:20:\
    \ note: to match this \u2018{\u2019\n   33 |   if (arr[i] == 1) {\n      |   \
    \                 ^\n/tmp/tmpj4swf05b.cpp:58:1: error: expected \u2018}\u2019\
    \ at end of input\n   58 | }\n      | ^\n/tmp/tmpj4swf05b.cpp:32:32: note: to\
    \ match this \u2018{\u2019\n   32 |  for (int i = 2; i < 100; i++) {\n      |\
    \                                ^\n/tmp/tmpj4swf05b.cpp:58:1: error: expected\
    \ \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpj4swf05b.cpp:10:32:\
    \ note: to match this \u2018{\u2019\n   10 | bool is_multiply_prime(long a) {\n\
    \      |                                ^\n/tmp/tmpj4swf05b.cpp:58:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   58 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  return (a == 2*3*5);\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpv9amkt19: /tmp/tmpv9amkt19.cpp:17: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // step 1: find all prime numbers <= 100.\n    std::vector<int> prime_numbers;\n\
    \    for (int i = 2; i <= 100; i++) {\n        bool is_prime = true;\n       \
    \ for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n             \
    \   is_prime = false;\n                break;\n            }\n        }\n    \
    \    if (is_prime) {\n            prime_numbers.push_back(i);\n        }\n   \
    \ }\n    // step 2: find all possible factors of a.\n    std::vector<std::vector<int>>\
    \ factors;\n    factors.push_back(std::vector<int>());\n    for (int i = 0; i\
    \ < prime_numbers.size(); i++) {\n        int prime_number = prime_numbers[i];\n\
    \        if (a % prime_number == 0) {\n            int tmp = a / prime_number;\n\
    \            if (tmp % prime_number == 0) {\n                std::vector<int>\
    \ factors_tmp(factors.size());\n                for (int j = 0; j < factors.size();\
    \ j++) {\n                    factors_tmp[j] = factors[j];\n                }\n\
    \                for (int j = 0; j < factors_tmp.size(); j++) {\n            \
    \        factors_tmp[j].push_back(prime_number);\n                }\n        \
    \        factors.insert(factors.end(), factors_tmp.begin(), factors_tmp.end());\n\
    \            } else {\n                for (int j = 0; j < factors.size(); j++)\
    \ {\n                    factors[j].push_back(prime_number);\n               \
    \ }\n            }\n        }\n    }\n    // step 3: remove non-3-prime-number\
    \ factors.\n    std::vector<std::vector<int>> factors_final;\n    for (int i =\
    \ 0; i < factors.size(); i++) {\n        if (factors[i].size() == 3) {\n     \
    \       factors_final.push_back(factors[i]);\n        }\n    }\n    return factors_final.size()\
    \ != 0;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nyrr6ws.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp4nyrr6ws.cpp:35:47: error: cannot convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<int>\
    \ >, std::vector<int> >::value_type\u2019 {aka \u2018std::vector<int>\u2019} to\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type\u2019\
    \ {aka \u2018int\u2019} in assignment\n   35 |                     factors_tmp[j]\
    \ = factors[j];\n      |                                               ^\n/tmp/tmp4nyrr6ws.cpp:38:36:\
    \ error: request for member \u2018push_back\u2019 in \u2018factors_tmp.std::vector<int>::operator[](((std::vector<int>::size_type)j))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<int>,\
    \ int>::value_type\u2019 {aka \u2018int\u2019}\n   38 |                     factors_tmp[j].push_back(prime_number);\n\
    \      |                                    ^~~~~~~~~\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp4nyrr6ws.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:\
    \ In instantiation of \u2018static _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II,\
    \ _II, _OI) [with _II = int*; _OI = std::vector<int>*]\u2019:\n/usr/include/c++/9/bits/stl_algobase.h:404:30:\
    \   required from \u2018_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove\
    \ = false; _II = int*; _OI = std::vector<int>*]\u2019\n/usr/include/c++/9/bits/stl_algobase.h:441:30:\
    \   required from \u2018_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove\
    \ = false; _II = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _OI =\
    \ __gnu_cxx::__normal_iterator<std::vector<int>*, std::vector<std::vector<int>\
    \ > >]\u2019\n/usr/include/c++/9/bits/stl_algobase.h:474:7:   required from \u2018\
    _OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >; _OI = __gnu_cxx::__normal_iterator<std::vector<int>*, std::vector<std::vector<int>\
    \ > >]\u2019\n/usr/include/c++/9/bits/vector.tcc:744"
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i, j, k;\n    for (i = 2; i < a; i++) {\n        if (a % i ==\
    \ 0) {\n            for (j = 2; j < a; j++) {\n                if (a % j == 0)\
    \ {\n                    for (k = 2; k < a; k++) {\n                        if\
    \ (a % k == 0) {\n                            if (i * j * k == a) {\n        \
    \                        return true;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpkrv1nm2h: /tmp/tmpkrv1nm2h.cpp:37: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n\
    \            for(int j=2;j<a;j++){\n                if(a%j==0){\n            \
    \        for(int k=2;k<a;k++){\n                        if(a%k==0){\n        \
    \                    return true;\n                        }\n               \
    \     }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9gpdufsu: /tmp/tmp9gpdufsu.cpp:32: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i;\n\tint c = 0;\n\tfor (i = 2; i <= a; i++) {\n\t\tif (a % i ==\
    \ 0) {\n\t\t\tc++;\n\t\t\ta = a / i;\n\t\t\ti--;\n\t\t}\n\t}\n\treturn c == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tint i = 0;\n\tint primes[100];\n\tprimes[i++] = 2;\n\
    \tfor (int j = 3; j <= a; j += 2) {\n\t\tbool is_prime = true;\n\t\tfor (int k\
    \ = 0; k < i; k++) {\n\t\t\tif (j % primes[k] == 0) {\n\t\t\t\tis_prime = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_prime) {\n\t\t\tprimes[i++] = j;\n\t\
    \t}\n\t}\n\tfor (int j = 0; j < i; j++) {\n\t\tif (a % primes[j] == 0) {\n\t\t\
    \tfor (int k = j + 1; k < i; k++) {\n\t\t\t\tif (a % primes[k] == 0) {\n\t\t\t\
    \t\tfor (int l = k + 1; l < i; l++) {\n\t\t\t\t\t\tif (a % primes[l] == 0) {\n\
    \t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp1l7gyowl: /tmp/tmp1l7gyowl.cpp:46: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i <= sqrt(a); i++) {\n        int cnt = 0;\n     \
    \   while (a % i == 0) {\n            cnt++;\n            a /= i;\n        }\n\
    \        if (cnt >= 3) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpusrhjv7r: /tmp/tmpusrhjv7r.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int factor = 2;\n    int power = 0;\n    bool prime = false;\n   \
    \ int count = 0;\n    if (a < 100) {\n        while (a > 1) {\n            if\
    \ (a % factor == 0) {\n                a /= factor;\n                power++;\n\
    \            } else {\n                prime = true;\n                for (int\
    \ i = 2; i <= factor / 2; i++) {\n                    if (factor % i == 0) {\n\
    \                        prime = false;\n                        break;\n    \
    \                }\n                }\n                if (prime) {\n        \
    \            count++;\n                }\n                factor++;\n        \
    \        power = 0;\n            }\n        }\n        return count == 3;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpholtjfdz: /tmp/tmpholtjfdz.cpp:42: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpiaxys0s6: /tmp/tmpiaxys0s6.cpp:15: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  bool result = false;\n  int primes[] = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n  for\
    \ (int i = 0; i < 25; i++) {\n    if (a % primes[i] == 0) {\n      if (a == primes[i])\
    \ {\n        return false;\n      }\n      a = a / primes[i];\n      result =\
    \ true;\n      for (int i = 0; i < 25; i++) {\n        if (a % primes[i] == 0)\
    \ {\n          if (a == primes[i]) {\n            return false;\n          }\n\
    \          a = a / primes[i];\n          result = true;\n          for (int i\
    \ = 0; i < 25; i++) {\n            if (a % primes[i] == 0) {\n              if\
    \ (a == primes[i]) {\n                return false;\n              }\n       \
    \       a = a / primes[i];\n              result = true;\n            }\n    \
    \      }\n        }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9m9mdzb9: /tmp/tmp9m9mdzb9.cpp:45: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// Write your code here\n\tint ct = 0;\n\tfor (int i = 2; i < a; i++)\
    \ {\n\t\tif (a % i == 0) {\n\t\t\ta /= i;\n\t\t\tct++;\n\t\t\ti--;\n\t\t}\n\t\
    }\n\tif (ct == 2) return true;\n\telse return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099618
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> v;\n    while (a % 2 == 0) {\n        v.push_back(2);\n\
    \        a /= 2;\n    }\n    int i = 3;\n    while (i <= a) {\n        while (a\
    \ % i == 0) {\n            v.push_back(i);\n            a /= i;\n        }\n \
    \       i += 2;\n    }\n    return v.size() == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 0 || a == 1) {\n        return false;\n    }\n    for (int\
    \ i = 2; i <= a; i++) {\n        for (int j = 2; j <= a; j++) {\n            for\
    \ (int k = 2; k <= a; k++) {\n                if (a == i * j * k) {\n        \
    \            return true;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpuoy_pu9g: /tmp/tmpuoy_pu9g.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if(a<=0) return false;\n  if(a == 1) return true;\n  if(a % 2 == 0)\
    \ {\n    return is_multiply_prime(a/2);\n  }\n  for(int i = 3; i <= sqrt(a); i+=2)\
    \ {\n    if(a % i == 0) {\n      return is_multiply_prime(a/i);\n    }\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n  \
    \  assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpmfgh6f_q: /tmp/tmpmfgh6f_q.cpp:25: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if(a == 2 || a == 3 || a == 5) return true;\n  if(a % 2 == 0 || a %\
    \ 3 == 0 || a % 5 == 0) return false;\n  long i;\n  for(i = 5; i <= sqrt(a); i++)\
    \ {\n    if(a % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptu8d9smn: /tmp/tmptu8d9smn.cpp:21: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tlong num = a;\n\tfor (int i = 2; i < sqrt(num); i++) {\n\t\tif (num\
    \ % i == 0) {\n\t\t\tif (is_prime(i)) {\n\t\t\t\tnum /= i;\n\t\t\t\tif (is_prime(num))\
    \ {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmporl7b9k3.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmporl7b9k3.cpp:14:8: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   14 |    if (is_prime(i)) {\n      |        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int num = a;\n    if (num < 2) return false;\n    if (num % 2 == 0)\
    \ return num == 2;\n    if (num % 3 == 0) return num == 3;\n    if (num % 5 ==\
    \ 0) return num == 5;\n    for (int i = 7; i * i <= num; i += 2) {\n        if\
    \ (num % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_80u5tfj: /tmp/tmp_80u5tfj.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tbool ans = true;\n\tif (a == 0 || a == 1) {\n\t\tans = false;\n\t}\n\
    \telse {\n\t\tint divider = 2;\n\t\tlong temp = a;\n\t\twhile (divider < 100)\
    \ {\n\t\t\tif (temp % divider == 0) {\n\t\t\t\ttemp = temp / divider;\n\t\t\t\t\
    divider = 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdivider++;\n\t\t\t}\n\t\t}\n\t\t\
    if (temp == 1) {\n\t\t\tans = true;\n\t\t}\n\t\telse {\n\t\t\tans = false;\n\t\
    \t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmph1s_k655: /tmp/tmph1s_k655.cpp:38: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Todo: Return true if a is multiplication of 3 prime numbers and\
    \ false otherwise\n    long b = a;\n    int i = 0;\n    int num[5];\n    for (i\
    \ = 2; i < a; i++) {\n        if (a % i == 0) {\n            b = a / i;\n    \
    \        break;\n        }\n    }\n    int j = 0;\n    for (j = 2; j < b; j++)\
    \ {\n        if (b % j == 0) {\n            num[0] = i;\n            num[1] =\
    \ j;\n            num[2] = b / j;\n            break;\n        }\n    }\n    return\
    \ num[2] < 100 && num[1] < 100 && num[0] < 100;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpfhs612yh: /tmp/tmpfhs612yh.cpp:37: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int arr[100] = {0};\n    int c = 0;\n    int aa = a;\n    while(aa\
    \ > 1) {\n        if(aa % 2 == 0) {\n            if(arr[2] == 0)\n           \
    \     c++;\n            arr[2]++;\n            aa /= 2;\n        }\n        else\
    \ {\n            for(int i = 3; i < aa; i += 2) {\n                if(aa % i ==\
    \ 0) {\n                    if(arr[i] == 0)\n                        c++;\n  \
    \                  arr[i]++;\n                    aa /= i;\n                 \
    \   break;\n                }\n            }\n        }\n    }\n    if(c == 3)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool x = false;\n    if(a%2==0){\n        a/=2;\n        if(a%3==0){\n\
    \            a/=3;\n            if(a%5==0){\n                x = true;\n     \
    \       }\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp97ripech: /tmp/tmp97ripech.cpp:27: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099620
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  assert(a > 0);\n  for (int i = 2; i <= a / 2; i++) {\n    if (a % i\
    \ == 0) {\n      if (is_prime(i)) {\n        if (is_prime(a / i)) {\n        \
    \  if (is_prime(a / i / i)) {\n            return true;\n          }\n       \
    \ }\n      }\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpwqc_5w.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpgpwqc_5w.cpp:14:11: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   14 |       if (is_prime(i)) {\n      |           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  assert(a<100);\n  if(a<6) {\n    return false;\n  }\n  if(a == 6) {\n\
    \    return true;\n  }\n  int count = 0;\n  for(int i = 2; i<=a/2; i++) {\n  \
    \  if(a%i == 0) {\n      count++;\n    }\n  }\n  if(count == 2) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpff_rosap: /tmp/tmpff_rosap.cpp:32: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    // We will store the value of a in an\
    \ array with two indexes.\n    // value of a at index i will be one if a is divisible\
    \ by (i+1) or zero otherwise.\n    // This is only the case when it's a prime\
    \ number.\n    // So we will check the index of array that their value is equal\
    \ to 1\n    int arr[100] = {0};\n    int counter = 0;\n    for(int i = 0; i <\
    \ 100; i++) {\n        if(a % (i+1) == 0 && arr[i] == 0) {\n            arr[i]\
    \ = 1;\n            counter += 1;\n        }\n    }\n    return counter == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp851dwzxe: /tmp/tmp851dwzxe.cpp:29: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a < 6) return false;\n    int flag = 0;\n    while (a % 2 == 0)\
    \ {\n        a /= 2;\n        flag = 1;\n    }\n    for (int i = 3; i <= sqrt(a);\
    \ i += 2) {\n        while (a % i == 0) {\n            flag++;\n            a\
    \ /= i;\n        }\n    }\n    if (a > 2) flag++;\n    return flag == 3;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppjq0hs1k: /tmp/tmppjq0hs1k.cpp:30: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099620
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<long> v;\n    for (long i = 2; i <= a; i++) {\n      \
    \  bool is_prime = true;\n        for (long j = 2; j <= i / 2; j++) {\n      \
    \      if (i % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime && a % i == 0) {\n           \
    \ v.push_back(i);\n            a /= i;\n            i--;\n        }\n    }\n \
    \   return v.size() == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a <= 1) return false;\n    else if (a <= 3) return true;\n   \
    \ else if (a % 2 == 0 || a % 3 == 0) return false;\n    int i = 5;\n    while\
    \ (i * i <= a) {\n        if (a % i == 0 || a % (i + 2) == 0) return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpd96cyxe6: /tmp/tmpd96cyxe6.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i = 0;\n    if (a == 1) {\n        return false;\n    }\n    for\
    \ (i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            break;\n    \
    \    }\n    }\n    if (i == a) {\n        return true;\n    }\n    else {\n  \
    \      return false;\n    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpkl3zwbvf: /tmp/tmpkl3zwbvf.cpp:29: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\
    \t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\tif (count > 3) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\treturn count == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpi__39yho: /tmp/tmpi__39yho.cpp:16: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tlong s = sqrt(a);\n\tlong i = 2;\n\tint count = 0;\n\twhile (i <= s)\
    \ {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\tif (count > 2) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ta /= i;\n\t\t\ts = sqrt(a);\n\t\t}\n\t\telse {\n\t\t\t\
    i++;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpbd6gy38r: /tmp/tmpbd6gy38r.cpp:31: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int index = 0;\n    int prime_number[100];\n    prime_number[index++]\
    \ = 2;\n    int number = 3;\n    while (a != 1) {\n        if (a % number == 0)\
    \ {\n            a /= number;\n            prime_number[index++] = number;\n \
    \       } else {\n            number += 2;\n        }\n    }\n    for (int i =\
    \ 0; i < index; i++) {\n        for (int j = i + 1; j < index; j++) {\n      \
    \      for (int k = j + 1; k < index; k++) {\n                if (prime_number[i]\
    \ * prime_number[j] * prime_number[k] == number)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(a > 0);\n    int count = 0;\n    if (a < 3) {\n        return\
    \ false;\n    }\n    if (a % 2 == 0) {\n        count += 1;\n        while (a\
    \ % 2 == 0) {\n            a /= 2;\n        }\n    }\n    for (int i = 3; i <=\
    \ std::sqrt(a); i += 2) {\n        if (a % i == 0) {\n            count += 1;\n\
    \            while (a % i == 0) {\n                a /= i;\n            }\n  \
    \      }\n    }\n    if (a > 2) {\n        count += 1;\n    }\n    if (count ==\
    \ 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp23q5to6r: /tmp/tmp23q5to6r.cpp:42: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  // return true;\n  for (int i = 2; i <= a / 2; i++) {\n    if (a % i\
    \ == 0) {\n      long tmp = a / i;\n      for (int j = 2; j <= tmp / 2; j++) {\n\
    \        if (tmp % j == 0) {\n          long tmp1 = tmp / j;\n          for (int\
    \ k = 2; k <= tmp1 / 2; k++) {\n            if (tmp1 % k == 0) {\n           \
    \   return false;\n            }\n          }\n          if (tmp1 == 1) {\n  \
    \          return false;\n          }\n          return true;\n        }\n   \
    \   }\n      if (tmp == 1) {\n        return false;\n      }\n      return true;\n\
    \    }\n  }\n  if (a == 1) {\n    return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcn41o51q: /tmp/tmpcn41o51q.cpp:42: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpi__39yho: /tmp/tmpi__39yho.cpp:16: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(a < 100);\n    return ((a / 2) * (a / 3) * (a / 5) == a);\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb62kb1zk: /tmp/tmpb62kb1zk.cpp:17: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i = 2;\n    while (a % i != 0) {\n        i++;\n    }\n    if\
    \ (i == a) {\n        return false;\n    }\n    long a1 = a / i;\n    int j =\
    \ 2;\n    while (a1 % j != 0) {\n        j++;\n    }\n    if (j == a1) {\n   \
    \     return false;\n    }\n    long a2 = a1 / j;\n    int k = 2;\n    while (a2\
    \ % k != 0) {\n        k++;\n    }\n    if (k == a2) {\n        return false;\n\
    \    }\n    if (a2 / k == 1) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjzraw8m9: /tmp/tmpjzraw8m9.cpp:42: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i = 2;\n\twhile (a != 1 && i <= a) {\n\t\tif (a % i == 0) {\n\t\t\
    \ta /= i;\n\t\t\ti = 2;\n\t\t}\n\t\telse\n\t\t\ti++;\n\t}\n\tif (a == 1)\n\t\t\
    return true;\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpvbq04ei6: /tmp/tmpvbq04ei6.cpp:26: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool flag = false;\n    int c = 0;\n    for (int i = 2; i <= a; i++)\
    \ {\n        if (a % i == 0) {\n            c++;\n            a = a / i;\n   \
    \         i--;\n        }\n    }\n    if (c == 3) {\n        flag = true;\n  \
    \  }\n    return flag;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099620
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    assert(a < 100 && a > 0);\n    for (int i = 2; i < a; i++) {\n   \
    \     for (int j = 2; j < a; j++) {\n            for (int k = 2; k < a; k++) {\n\
    \                if (a == i * j * k) {\n                    if (is_prime(i) &&\
    \ is_prime(j) && is_prime(k)) {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqxxjek5.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpxqxxjek5.cpp:16:25: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   16 |                     if (is_prime(i) && is_prime(j) && is_prime(k))\
    \ {\n      |                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099620
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\tint prime[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n\tfor (int i\
    \ = 0; i < 24; i++) {\n\t\tfor (int j = 0; j < 24; j++) {\n\t\t\tfor (int k =\
    \ 0; k < 24; k++) {\n\t\t\t\tif (prime[i] * prime[j] * prime[k] == a) {\n\t\t\t\
    \t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tbool k = true;\n\tfor (int i = 2; i < a / 2; i++)\
    \ {\n\t\twhile (a % i == 0) {\n\t\t\ta = a / i;\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    if (count != 3) {\n\t\tk = false;\n\t}\n\treturn k;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphk36qefq: /tmp/tmphk36qefq.cpp:27: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int counter = 0;\n    int count = 0;\n    while (a % 2 == 0) {\n \
    \       counter++;\n        a = a / 2;\n    }\n    if (counter > 0) {\n      \
    \  count++;\n    }\n    counter = 0;\n    for (int i = 3; i <= sqrt(a); i += 2)\
    \ {\n        while (a % i == 0) {\n            counter++;\n            a = a /\
    \ i;\n        }\n        if (counter > 0) {\n            count++;\n        }\n\
    \        counter = 0;\n    }\n    if (a > 2) {\n        count++;\n    }\n    if\
    \ (count == 3) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd4x9lzf1: /tmp/tmpd4x9lzf1.cpp:43: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpi__39yho: /tmp/tmpi__39yho.cpp:16: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) {\n        return true;\n    }\n    if (a == 2) {\n  \
    \      return true;\n    }\n    if (a == 3) {\n        return true;\n    }\n \
    \   if (a == 5) {\n        return true;\n    }\n    if (a == 7) {\n        return\
    \ true;\n    }\n    if (a == 9) {\n        return true;\n    }\n    if (a == 11)\
    \ {\n        return true;\n    }\n    if (a == 13) {\n        return true;\n \
    \   }\n    if (a == 15) {\n        return true;\n    }\n    if (a == 17) {\n \
    \       return true;\n    }\n    if (a == 19) {\n        return true;\n    }\n\
    \    if (a == 21) {\n        return true;\n    }\n    if (a == 23) {\n       \
    \ return true;\n    }\n    if (a == 25) {\n        return true;\n    }\n    if\
    \ (a == 27) {\n        return true;\n    }\n    if (a == 29) {\n        return\
    \ true;\n    }\n    if (a == 31) {\n        return true;\n    }\n    if (a ==\
    \ 33) {\n        return true;\n    }\n    if (a == 35) {\n        return true;\n\
    \    }\n    if (a == 37) {\n        return true;\n    }\n    if (a == 39) {\n\
    \        return true;\n    }\n    if (a == 41) {\n        return true;\n    }\n\
    \    if (a == 43) {\n        return true;\n    }\n    if (a == 45) {\n       \
    \ return true;\n    }\n    if (a == 47) {\n        return true;\n    }\n    if\
    \ (a == 49) {\n        return true;\n    }\n    if (a == 51) {\n        return\
    \ true;\n    }\n    if (a == 53) {\n        return true;\n    }\n    if (a ==\
    \ 55) {\n        return true;\n    }\n    if (a == 57) {\n        return true;\n\
    \    }\n   \n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4wyprlil: /tmp/tmp4wyprlil.cpp:105: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Question: How to get the division result and its remainder \n \
    \   // at the same time?\n    // Is that a good function? \n    int i, j;\n  \
    \  for (i = 2; i < a; i++) {\n        for (j = 2; j < a; j++) {\n            //\
    \ Question: how to get the division result and its remainder at the same time?\n\
    \            if (a % i == 0) {\n                for (j = 2; j < a; j++) {\n  \
    \                  if (a % j == 0) {\n                        for (j = 2; j <\
    \ a; j++) {\n                            if (a % j == 0) {\n                 \
    \               return true;\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp_svmfs3h: /tmp/tmp_svmfs3h.cpp:38: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// TODO: complete the function.\n\tlong x = a;\n\tlong counter = 0;\n\
    \tlong arr[a];\n\tif (a > 2) {\n\t\tfor (long i = 2; i < x; i++) {\n\t\t\tif (x\
    \ % i == 0) {\n\t\t\t\tcounter++;\n\t\t\t\tarr[counter] = i;\n\t\t\t\tx = x /\
    \ i;\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t}\n\t\tlong first = arr[1];\n\t\tlong second\
    \ = arr[2];\n\t\tlong third = arr[3];\n\t\tif (x > first) {\n\t\t\tif (x > second)\
    \ {\n\t\t\t\tif (x > third) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpjo8_41vs: /tmp/tmpjo8_41vs.cpp:40: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // put your code here\n    \n    int counter = 0;\n    int num = 0;\n\
    \    bool flag = false;\n    for(int i = 2; i <= a; i++)\n    {\n        if(a\
    \ % i == 0)\n        {\n            flag = true;\n            for(int j = 2; j\
    \ <= i/2; j++)\n            {\n                if(i % j == 0)\n              \
    \  {\n                    flag = false;\n                    break;\n        \
    \        }\n            }\n            if(flag == true)\n            {\n     \
    \           //cout << i << \" \";\n                counter++;\n              \
    \  num = i;\n            }\n        }\n    }\n    if(counter == 3)\n    {\n  \
    \      //cout << num << endl;\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n    \n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpws0td9p9: /tmp/tmpws0td9p9.cpp:52: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i,j,k;\n\tfor(i=1;i<=a;i++)\n\t{\n\t\tfor(j=1;j<=a;j++)\n\t\t{\n\
    \t\t\tfor(k=1;k<=a;k++)\n\t\t\t{\n\t\t\t\tif(i!=j && j!=k && i!=k)\n\t\t\t\t{\n\
    \t\t\t\t\tif(i*j*k==a)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpji8tg431: /tmp/tmpji8tg431.cpp:35: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tfor (int i = 2; i < a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tfor (int\
    \ j = 2; j < a; j++) {\n\t\t\t\tif (a % j == 0) {\n\t\t\t\t\tfor (int k = 2; k\
    \ < a; k++) {\n\t\t\t\t\t\tif (a % k == 0) {\n\t\t\t\t\t\t\tif (i * j * k == a)\
    \ {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\
    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_h6spz41: /tmp/tmp_h6spz41.cpp:36: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    for (int\
    \ i = 2; i * i <= a; i++) {\n        if (a % i == 0) {\n            if (a / i\
    \ == i) {\n                return true;\n            } else {\n              \
    \  int a1 = a / i;\n                for (int j = 2; j * j <= a1; j++) {\n    \
    \                if (a1 % j == 0) {\n                        if (a1 / j == j)\
    \ {\n                            return true;\n                        } else\
    \ {\n                            return false;\n                        }\n  \
    \                  }\n                }\n                return true;\n      \
    \      }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpqkyl0cwm: /tmp/tmpqkyl0cwm.cpp:37: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // empty\n    return false;\n}\nint main() {\n    auto candidate =\
    \ is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmph1ig8xi2: /tmp/tmph1ig8xi2.cpp:17: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  // Fill the answer here.\n  for(int i=2;i<a;i++){\n    if(a%i==0){\n\
    \      int n=a/i;\n      for(int j=2;j<n;j++){\n        if(n%j==0){\n        \
    \  int m=n/j;\n          if(m==j){\n            return false;\n          }\n \
    \         for(int k=2;k<m;k++){\n            if(m%k==0){\n              return\
    \ false;\n            }\n          }\n          return true;\n        }\n    \
    \  }\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp49mg39kf: /tmp/tmp49mg39kf.cpp:37: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // TODO: your code goes here\n    if(a<=1) return false;\n    std::vector<int>\
    \ v;\n    for(int i=2;i<=a;i++){\n        if(a%i==0){\n            v.push_back(i);\n\
    \            a/=i;\n            i--;\n        }\n    }\n    if(v.size()!=3) return\
    \ false;\n    for(int i=0;i<3;i++){\n        if(v[i]==2) continue;\n        for(int\
    \ j=2;j<v[i];j++){\n            if(v[i]%j==0) return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    while (a%2 == 0) {\n        a /= 2;\n        cnt++;\n\
    \    }\n    while (a%3 == 0) {\n        a /= 3;\n        cnt++;\n    }\n    while\
    \ (a%5 == 0) {\n        a /= 5;\n        cnt++;\n    }\n    return cnt == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmtm0ai7j: /tmp/tmpmtm0ai7j.cpp:33: int main(): Assertion `candidate((105))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  assert(a < 100);\n  // Your code here\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpcnhovd84: /tmp/tmpcnhovd84.cpp:16: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) {\n\t\treturn false;\n\t}\n\tfor (int i = 2; i < a; i++)\
    \ {\n\t\tint n = a;\n\t\twhile (n % i == 0) {\n\t\t\tn /= i;\n\t\t}\n\t\tif (n\
    \ == 1) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv2tkedp8: /tmp/tmpv2tkedp8.cpp:28: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> vec;\n    for (long i = 2; i < 100; i++) {\n    \
    \    if (a % i == 0) {\n            vec.push_back(i);\n            a /= i;\n \
    \       }\n    }\n    assert(vec.size() <= 3);\n    return vec.size() == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsrbxdhdl: /tmp/tmpsrbxdhdl.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int prime_array[a];\n    for (int i = 0; i < a; i++) {\n        prime_array[i]\
    \ = 0;\n    }\n    for (int i = 2; i < a; i++) {\n        for (int j = i + 1;\
    \ j < a; j++) {\n            if (prime_array[j] == 0 && j % i == 0) {\n      \
    \          prime_array[j] = 1;\n            }\n        }\n    }\n    int count\
    \ = 0;\n    for (int i = 2; i < a; i++) {\n        if (prime_array[i] == 0) {\n\
    \            count++;\n        }\n    }\n    long primes[count];\n    int k =\
    \ 0;\n    for (int i = 2; i < a; i++) {\n        if (prime_array[i] == 0) {\n\
    \            primes[k] = i;\n            k++;\n        }\n    }\n    int temp[count];\n\
    \    int result = 0;\n    for (int i = 0; i < count; i++) {\n        temp[i] =\
    \ 0;\n    }\n    for (int i = 0; i < count; i++) {\n        for (int j = i; j\
    \ < count; j++) {\n            for (int k = j; k < count; k++) {\n           \
    \     if (a == primes[i] * primes[j] * primes[k]) {\n                    temp[i]\
    \ = 1;\n                    temp[j] = 1;\n                    temp[k] = 1;\n \
    \                   result = 1;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // your code here\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp3visfqme: /tmp/tmp3visfqme.cpp:15: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  if (a <= 2) {\n    return false;\n  }\n  if (a % 2 == 0) {\n    a /=\
    \ 2;\n  }\n  if (a % 3 == 0) {\n    a /= 3;\n  }\n  if (a % 5 == 0) {\n    a /=\
    \ 5;\n  }\n  if (a == 1) {\n    return true;\n  }\n  if (a % 2 == 0) {\n    a\
    \ /= 2;\n  }\n  if (a % 3 == 0) {\n    a /= 3;\n  }\n  if (a % 5 == 0) {\n   \
    \ a /= 5;\n  }\n  if (a == 1) {\n    return true;\n  }\n  if (a % 2 == 0) {\n\
    \    a /= 2;\n  }\n  if (a % 3 == 0) {\n    a /= 3;\n  }\n  if (a % 5 == 0) {\n\
    \    a /= 5;\n  }\n  if (a == 1) {\n    return true;\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppt2uk7ce: /tmp/tmppt2uk7ce.cpp:54: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// check if a is even\n\tif (a % 2 == 0) {\n\t\t// if it is, check if\
    \ a is divisible by 3\n\t\tif (a % 3 == 0) {\n\t\t\t// if it is, check if a is\
    \ divisible by 5\n\t\t\tif (a % 5 == 0) {\n\t\t\t\t// if it is, return true\n\t\
    \t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// else return false\n\treturn false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp10l9ldlx: /tmp/tmp10l9ldlx.cpp:30: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a < 6) {\n        return false;\n    }\n    for (int i = 2; i\
    \ <= 100; i++) {\n        if (a % i == 0) {\n            for (int j = 2; j <=\
    \ 100; j++) {\n                if (i != j && a % j == 0) {\n                 \
    \   for (int k = 2; k <= 100; k++) {\n                        if (i != k && j\
    \ != k && a % k == 0) {\n                            if (a == i * j * k) {\n \
    \                               return true;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp4n13ga_x: /tmp/tmp4n13ga_x.cpp:35: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your solution here\n\tif(a == 2 || a == 3 || a == 5) return\
    \ true;\n\t\n\tint count = 0;\n\twhile(a % 2 == 0){\n\t\ta /= 2;\n\t\tcount++;\n\
    \t}\n\tif(count == 1) return false;\n\tcount = 0;\n\twhile(a % 3 == 0){\n\t\t\
    a /= 3;\n\t\tcount++;\n\t}\n\tif(count == 1) return false;\n\tcount = 0;\n\twhile(a\
    \ % 5 == 0){\n\t\ta /= 5;\n\t\tcount++;\n\t}\n\tif(count == 1) return false;\n\
    \t\n\tif(a == 1) return true;\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp8mfjw03k: /tmp/tmp8mfjw03k.cpp:38: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a < 100);\n\tif (a <= 1)\n\t\treturn false;\n\tif (a == 2 ||\
    \ a == 3 || a == 5)\n\t\treturn true;\n\tint tab[3] = { 2, 3, 5 };\n\tint prime_counter\
    \ = 0;\n\tbool is_prime = true;\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (a %\
    \ tab[i] == 0) {\n\t\t\tprime_counter++;\n\t\t\tif (prime_counter > 3)\n\t\t\t\
    \treturn false;\n\t\t\tis_prime = true;\n\t\t\tint temp = a / tab[i];\n\t\t\t\
    for (int i = 2; i < temp; i++) {\n\t\t\t\tif (temp % i == 0) {\n\t\t\t\t\tis_prime\
    \ = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_prime)\n\t\t\t\t\
    prime_counter++;\n\t\t}\n\t}\n\tif (prime_counter == 3)\n\t\treturn true;\n\t\
    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp615hh7r1: /tmp/tmp615hh7r1.cpp:42: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i < std::sqrt(a); i++) {\n        if (a % i == 0)\
    \ {\n            if (is_prime(i) and is_prime(a / i)) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6bjko6m.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpc6bjko6m.cpp:13:17: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   13 |             if (is_prime(i) and is_prime(a / i)) {\n   \
    \   |                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  assert(a>0);\n  for(int i=2;i<a;i++){\n    int j=a;\n    while(j!=1){\n\
    \      if(j%i==0){\n        j=j/i;\n      }\n      else{\n        break;\n   \
    \   }\n    }\n    if(j==1){\n      return true;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbv8emm5j: /tmp/tmpbv8emm5j.cpp:31: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // fill your code here\n    if(a == 0 || a == 1){\n        return\
    \ false;\n    }\n    int c = 0;\n    for(int i = 2; i <= a; i++){\n        if(a\
    \ % i == 0){\n            c++;\n            a = a / i;\n            i--;\n   \
    \     }\n    }\n    if(c == 3){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    if(a<=0){\n    \treturn false;\n\t}\n\
    \tlong i = 2;\n\twhile(i*i <= a){\n\t\twhile(a%i == 0){\n\t\t\ta = a/i;\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn a == 2 || a == 3 || a == 5;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk598dyz9: /tmp/tmpk598dyz9.cpp:26: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tassert(a > 0);\n\t// Be careful when we got 0 \n\t//  (a == 0) will\
    \ be true when (a == 0)\n\t//  a == 0 will be true when a == 0\n\tint counter\
    \ = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcounter++;\n\
    \t\t\tstd::cout << i << std::endl;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\t\
    if (counter == 3)\n\t\treturn true;\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: '5

    2

    3

    5

    2

    2

    2

    2

    5

    5

    5

    5

    3

    5

    7

    2

    3

    3

    7

    3

    3

    3

    3

    3

    3

    3

    3

    3

    3

    11

    7

    11

    13

    '
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a <= 1) {\n        return false;\n    }\n\n    for (long i = 2;\
    \ i <= a; i++) {\n        if (a % i == 0) {\n            for (long j = 2; j <=\
    \ a; j++) {\n                if (a % j == 0) {\n                    for (long\
    \ k = 2; k <= a; k++) {\n                        if (a % k == 0) {\n         \
    \                   if (i * j * k == a) {\n                                return\
    \ true;\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpse81si1g: /tmp/tmpse81si1g.cpp:40: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  for (int i = 2; i <= a / 2; i++) {\n    if (a % i == 0) {\n      long\
    \ divided_a = a / i;\n      if (divided_a == 1)\n        return false;\n     \
    \ if (divided_a != i) {\n        for (int j = 2; j <= divided_a / 2; j++) {\n\
    \          if (divided_a % j == 0) {\n            long divided_divided_a = divided_a\
    \ / j;\n            if (divided_divided_a == 1)\n              return false;\n\
    \            if (divided_divided_a != j) {\n              for (int k = 2; k <=\
    \ divided_divided_a / 2; k++) {\n                if (divided_divided_a % k ==\
    \ 0) {\n                  long divided_divided_divided_a = divided_divided_a /\
    \ k;\n                  if (divided_divided_divided_a == 1)\n                \
    \    return false;\n                  if (divided_divided_divided_a != k)\n  \
    \                  return false;\n                }\n              }\n       \
    \     }\n          }\n        }\n      }\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg36xcmz4: /tmp/tmpg36xcmz4.cpp:42: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tint a_prime = 2;\n\twhile (a_prime < a) {\n\t\tif\
    \ (a % a_prime == 0) {\n\t\t\tcount++;\n\t\t\ta /= a_prime;\n\t\t}\n\t\telse {\n\
    \t\t\ta_prime++;\n\t\t}\n\t}\n\treturn count == 2;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7aq2bq6j: /tmp/tmp7aq2bq6j.cpp:15: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i < a; i++) {\n        for (int j = 2; j < a; j++)\
    \ {\n            for (int k = 2; k < a; k++) {\n                if (i*j*k == a\
    \ && i != j && j != k && i != k) {\n                    return true;\n       \
    \         }\n            }\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmipw8sws: /tmp/tmpmipw8sws.cpp:26: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 2) return true;\n    if (a < 2) return false;\n    if (!(a\
    \ & 1)) return false;\n    for (int i = 3; i < a; i += 2)\n        if (!(a % i))\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp6gr9o445: /tmp/tmp6gr9o445.cpp:20: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tlong fac = a;\n\tint cnt = 0;\n\tfor (int i = 2; i <= fac; i++) {\n\t\
    \tif (fac % i == 0) {\n\t\t\tfac /= i;\n\t\t\tif (i > 7) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tcnt++;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (cnt == 3) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp58ug9rkq: /tmp/tmp58ug9rkq.cpp:39: int main(): Assertion `candidate((1001))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n       \
    \     for (int j = 2; j < a / i; j++) {\n                if ((a / i) % j == 0)\
    \ {\n                    for (int k = 2; k < a / (i * j); k++) {\n           \
    \             if ((a / (i * j)) % k == 0) {\n                            return\
    \ true;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwg6sv5cv: /tmp/tmpwg6sv5cv.cpp:29: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    std::vector<int> result;\n    for (int i = 2; i <= a; ++i) {\n   \
    \     if (a % i == 0) {\n            result.push_back(i);\n            a /= i;\n\
    \            i = 1;\n        }\n    }\n    for (auto i : result) {\n        for\
    \ (int j = 2; j <= i; ++j) {\n            if (i % j == 0 && i != j) {\n      \
    \          return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbyua_rl_: /tmp/tmpbyua_rl_.cpp:30: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i;\n    while (a%2 == 0) {\n        a = a/2;\n    }\n    while\
    \ (a%3 == 0) {\n        a = a/3;\n    }\n    while (a%5 == 0) {\n        a = a/5;\n\
    \    }\n    if (a == 1) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n  \
    \  assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfmhmjvn: /tmp/tmpgfmhmjvn.cpp:29: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool result = false;\n    int* div = new int[2];\n    int count =\
    \ 0;\n    if (a % 2 == 0) {\n        while (a % 2 == 0) {\n            a /= 2;\n\
    \            count += 1;\n        }\n        div[0] = 2;\n    }\n    if (a % 3\
    \ == 0) {\n        while (a % 3 == 0) {\n            a /= 3;\n            count\
    \ += 1;\n        }\n        div[1] = 3;\n    }\n    for (int i = 5; i <= sqrt(a);\
    \ i += 2) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n   \
    \             a /= i;\n                count += 1;\n            }\n          \
    \  if (count == 3) {\n                result = true;\n                break;\n\
    \            }\n            div[count - 1] = i;\n        }\n    }\n    if (a >\
    \ 1) {\n        count += 1;\n        div[count - 1] = a;\n    }\n    if (count\
    \ == 3) {\n        result = true;\n    }\n    std::cout << \"The dividers of this\
    \ number are \" << div[0] << \", \" << div[1] << \", \" << div[2] << \".\" <<\
    \ std::endl;\n    return result;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: 'The dividers of this number are 5, 0, 0.

    The dividers of this number are 2, 3, 5.

    The dividers of this number are 2, 0, 0.

    The dividers of this number are 2, 5, 0.

    The dividers of this number are 0, 0, 0.

    The dividers of this number are 0, 5, 7.

    The dividers of this number are 2, 3, 0.

    The dividers of this number are 0, 3, 0.

    The dividers of this number are 0, 3, 0.

    The dividers of this number are 7, 11, 13.

    '
  timestamp: 1660099623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  \n  // TODO: Write your implementation here.\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcizkxpm2: /tmp/tmpcizkxpm2.cpp:16: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099623
