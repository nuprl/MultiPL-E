language: cpp
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary(\"db\");\n  if (decimal == 0) {\n    binary.append(\"0db\");\n    return\
    \ binary;\n  }\n  while (decimal != 0) {\n    binary.append(std::to_string(decimal\
    \ % 2));\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary.append(\"db\");\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    int index = sizeof(long)*8-1;\n    binary.push_back('d');\n   \
    \ binary.push_back('b');\n    for(int i = 0; i < sizeof(long)*8; i++) {\n    \
    \    long mask = 1;\n        mask = mask << index;\n        mask = mask & decimal;\n\
    \        binary.push_back(mask?'1':'0');\n        index--;\n    }\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppjfkkg29: /tmp/tmppjfkkg29.cpp:31: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n      \
    \      binary = \"0\" + binary;\n        } else {\n            binary = \"1\"\
    \ + binary;\n        }\n        decimal /= 2;\n    }\n    binary = \"db\" + binary\
    \ + \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp7v9ioddq: /tmp/tmp7v9ioddq.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ result = \"db\";\n\tint remainder = 0;\n\tint q = 0;\n\tlong bin = 0;\n\tlong\
    \ mult = 1;\n\t\n\twhile (decimal != 0) {\n\t\tremainder = decimal % 2;\n\t\t\
    bin = bin + (remainder * mult);\n\t\tmult = mult * 10;\n\t\tdecimal = decimal\
    \ / 2;\n\t}\n\t\n\tlong temp = bin;\n\twhile (temp != 0) {\n\t\tresult += std::to_string(temp\
    \ % 10);\n\t\ttemp = temp / 10;\n\t}\n\t\n\tresult += \"db\";\n\t\n\treturn result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4ykdzy7q: /tmp/tmp4ykdzy7q.cpp:39: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    assert(decimal\
    \ >= 0);\n    std::string res = \"db\";\n    while (decimal > 0) {\n        res.push_back('0'\
    \ + decimal % 2);\n        decimal /= 2;\n    }\n    std::reverse(res.begin()\
    \ + 2, res.end());\n    res.push_back('d');\n    res.push_back('b');\n    return\
    \ res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqpbdz0x6: /tmp/tmpqpbdz0x6.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result=\"db\";\n    while(decimal>0){\n        result+=(decimal%2)+'0';\n  \
    \      decimal/=2;\n    }\n    result+=\"db\";\n    std::reverse(result.begin()+2,result.end()-2);\n\
    \    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpfz7cgvtq: /tmp/tmpfz7cgvtq.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // insert\
    \ code here\n    std::string ret = \"db\";\n    if (decimal == 0) {\n        ret.append(\"\
    0db\");\n        return ret;\n    }\n    while (decimal > 0) {\n        long temp\
    \ = decimal % 2;\n        decimal /= 2;\n        if (temp == 0) {\n          \
    \  ret.append(\"0\");\n        } else {\n            ret.append(\"1\");\n    \
    \    }\n    }\n    std::reverse(ret.begin() + 2, ret.end());\n    ret.append(\"\
    db\");\n    return ret;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin_str;\n  while (decimal > 0) {\n    bin_str += std::to_string(decimal % 2);\n\
    \    decimal /= 2;\n  }\n  std::reverse(bin_str.begin(), bin_str.end());\n  return\
    \ \"db\" + bin_str + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_q37mh49: /tmp/tmp_q37mh49.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin;\n    while (decimal > 0) {\n        int rem = decimal % 2;\n        bin\
    \ += rem + '0';\n        decimal /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n\
    \    bin = \"db\" + bin + \"db\";\n    return bin;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpgc5ho8bp: /tmp/tmpgc5ho8bp.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binaryStr = \"db\";\n  // Write your code here\n  while(decimal > 0) {\n   \
    \ binaryStr += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  std::reverse(binaryStr.begin()\
    \ + 2, binaryStr.end());\n  binaryStr += \"db\";\n  return binaryStr;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpm_41d30r: /tmp/tmpm_41d30r.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary=\"db\";\n  if(decimal<=0)\n  {\n    return \"\";\n  }\n  int rem;\n \
    \ while(decimal>0)\n  {\n    rem=decimal%2;\n    binary+=std::to_string(rem);\n\
    \    decimal/=2;\n  }\n  std::reverse(binary.begin(),binary.end());\n  binary+=\"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdj98vtz8: /tmp/tmpdj98vtz8.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    binary += \"db\";\n    while (decimal > 0) {\n        if (decimal\
    \ % 2 == 0)\n            binary += \"0\";\n        else\n            binary +=\
    \ \"1\";\n        decimal /= 2;\n    }\n    binary += \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3obs3go: /tmp/tmpk3obs3go.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ answer = \"db\";\n  if (decimal == 0) {\n    answer += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    answer += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  answer += \"db\";\n  std::reverse(answer.begin() + 2, answer.end()\
    \ - 2);\n  return answer;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  while (decimal > 0) {\n    bin += std::to_string(decimal %\
    \ 2);\n    decimal /= 2;\n  }\n  std::reverse(bin.begin() + 2, bin.end());\n \
    \ bin += \"db\";\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmph9gw3olp: /tmp/tmph9gw3olp.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ out = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      out\
    \ += \"0\";\n    } else {\n      out += \"1\";\n    }\n    decimal /= 2;\n  }\n\
    \  std::reverse(out.begin() + 2, out.end());\n  out += \"db\";\n  return out;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyok9fda2: /tmp/tmpyok9fda2.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  int binaryNum[32];\n\
    \  int i = 0;\n  while (decimal > 0) {\n    binaryNum[i] = decimal % 2;\n    decimal\
    \ = decimal / 2;\n    i++;\n  }\n  std::string ret(\"db\");\n  while (i > 0) {\n\
    \    i--;\n    if (binaryNum[i] == 0) {\n      ret += \"0\";\n    } else {\n \
    \     ret += \"1\";\n    }\n  }\n  ret += \"db\";\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvxpw5pae: /tmp/tmpvxpw5pae.cpp:35: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  string str\
    \ = \"db\";\n  do {\n    if (decimal % 2 == 0) {\n      str += \"0\";\n    } else\
    \ {\n      str += \"1\";\n    }\n    decimal /= 2;\n  } while (decimal > 0);\n\
    \  reverse(str.begin() + 2, str.end());\n  str += \"db\";\n  return str;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctb1usyq.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpctb1usyq.cpp:14:3: error: \u2018string\u2019 was not declared\
    \ in this scope\n   14 |   string str = \"db\";\n      |   ^~~~~~\n/tmp/tmpctb1usyq.cpp:14:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpctb1usyq.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpctb1usyq.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpctb1usyq.cpp:17:7: error: \u2018str\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   17 |       str += \"0\";\n      |       ^~~\n\
    \      |       std\n/tmp/tmpctb1usyq.cpp:19:7: error: \u2018str\u2019 was not\
    \ declared in this scope; did you mean \u2018std\u2019?\n   19 |       str +=\
    \ \"1\";\n      |       ^~~\n      |       std\n/tmp/tmpctb1usyq.cpp:23:11: error:\
    \ \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   23 |   reverse(str.begin() + 2, str.end());\n      |           ^~~\n   \
    \   |           std\n/tmp/tmpctb1usyq.cp"
  stdout: ''
  timestamp: 1660115618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result = \"db\";\n    while (decimal > 0) {\n        result.push_back(char('0'\
    \ + decimal % 2));\n        decimal /= 2;\n    }\n    std::reverse(result.begin()\
    \ + 2, result.end());\n    result.push_back('d');\n    result.push_back('b');\n\
    \    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmsqjyxeg: /tmp/tmpmsqjyxeg.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin = \"db\";\n    if (decimal == 0) {\n        bin += \"0\";\n    }\n    else\
    \ {\n        while (decimal > 0) {\n            bin += std::to_string(decimal\
    \ % 2);\n            decimal /= 2;\n        }\n    }\n    std::reverse(bin.begin()\
    \ + 2, bin.end());\n    bin += \"db\";\n    return bin;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_number = \"db\";\n  while (decimal) {\n    binary_number.push_back(decimal%2\
    \ + '0');\n    decimal /= 2;\n  }\n  std::reverse(binary_number.begin() + 2, binary_number.end());\n\
    \  binary_number.push_back('d');\n  binary_number.push_back('b');\n  return binary_number;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmzzx_yjn: /tmp/tmpmzzx_yjn.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    assert(decimal\
    \ >= 0);\n    std::string binary = \"db\";\n    std::stack<int> s;\n    while\
    \ (decimal) {\n        s.push(decimal % 2);\n        decimal /= 2;\n    }\n  \
    \  while (!s.empty()) {\n        binary += std::to_string(s.top());\n        s.pop();\n\
    \    }\n    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdfhe0hca: /tmp/tmpdfhe0hca.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // Write\
    \ your code here\n\n    std::string result;\n    long remainder = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        result += std::to_string(remainder);\n\
    \        decimal /= 2;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    result = \"db\" + result + \"db\";\n    return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpd0t_8sp3: /tmp/tmpd0t_8sp3.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n     \
    \ bin = \"0\" + bin;\n    } else {\n      bin = \"1\" + bin;\n    }\n    decimal\
    \ /= 2;\n  }\n  bin += \"db\";\n  return bin;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp25ye1s8l: /tmp/tmp25ye1s8l.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream\
    \ ss;\n    std::string binary_string;\n    ss << std::bitset<32>(decimal);\n \
    \   ss >> binary_string;\n    return \"db\" + binary_string + \"db\";\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpc256y526: /tmp/tmpc256y526.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal\
    \ == 0) return \"db0db\";\n    std::string res = \"db\";\n    while (decimal >\
    \ 0) {\n        res.push_back('0' + decimal % 2);\n        decimal /= 2;\n   \
    \ }\n    std::reverse(res.begin() + 2, res.end());\n    res.push_back('d');\n\
    \    res.push_back('b');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        if (decimal%2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    for (int i = binary.length(); i\
    \ < 32; i++) {\n        binary += \"0\";\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_an09wke: /tmp/tmp_an09wke.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal\
    \ < 0) {\n        throw std::domain_error(\"You have to provide a non-negative\
    \ number\");\n    }\n\n    if (decimal == 0) {\n        return \"db0db\";\n  \
    \  }\n\n    std::string binary_string = \"db\";\n    std::vector<int> binary_numbers;\n\
    \n    while (decimal > 0) {\n        binary_numbers.push_back(decimal % 2);\n\
    \        decimal /= 2;\n    }\n\n    for (int i = binary_numbers.size() - 1; i\
    \ >= 0; i--) {\n        binary_string += std::to_string(binary_numbers[i]);\n\
    \    }\n\n    binary_string += \"db\";\n\n    return binary_string;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary = \"db\";\n\twhile (decimal > 0) {\n\t\tlong rem = decimal % 2;\n\t\t\
    binary += std::to_string(rem);\n\t\tdecimal /= 2;\n\t}\n\tbinary += \"db\";\n\t\
    std::reverse(binary.begin(), binary.end());\n\treturn binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpg__fzqrb: /tmp/tmpg__fzqrb.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    return\
    \ \"db\" + std::bitset<8>(decimal).to_string() + \"db\";\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppanzk37z: /tmp/tmppanzk37z.cpp:18: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  if(decimal == 0) {\n    bin.append(\"0db\");\n    return bin;\n\
    \  }\n  std::vector<int> temp;\n  while(decimal != 0) {\n    temp.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  while(!temp.empty()) {\n    bin.append(std::to_string(temp.back()));\n\
    \    temp.pop_back();\n  }\n  bin.append(\"db\");\n  return bin;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_str(\"db\");\n  bool flag = false;\n  for (unsigned long i = 0x80000000;\
    \ i > 0; i >>= 1) {\n    if (decimal & i) {\n      binary_str += '1';\n      flag\
    \ = true;\n    } else if (flag) {\n      binary_str += '0';\n    }\n  }\n  binary_str\
    \ += \"db\";\n  return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp57i6jc5j: /tmp/tmp57i6jc5j.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // Write\
    \ your code here.\n    std::string ret = \"db\";\n    for (long quotient = decimal,\
    \ remainder; quotient != 0;) {\n        remainder = quotient % 2;\n        quotient\
    \ /= 2;\n        ret += (remainder == 0) ? '0' : '1';\n    }\n    std::reverse(ret.begin()\
    \ + 2, ret.end());\n    ret += \"db\";\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp0dtx2lz5: /tmp/tmp0dtx2lz5.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_rep;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary_rep.push_back('0');\n\
    \    } else {\n      binary_rep.push_back('1');\n    }\n    decimal /= 2;\n  }\n\
    \  int size = binary_rep.size();\n  for (int i = 0; i < size; i++) {\n    std::swap(binary_rep[i],\
    \ binary_rep[size - i - 1]);\n  }\n  return \"db\" + binary_rep + \"db\";\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpd4f8d1yj: /tmp/tmpd4f8d1yj.cpp:31: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ out = \"db\";\n    while (decimal) {\n        out += (decimal % 2 == 0) ? \"\
    0\" : \"1\";\n        decimal /= 2;\n    }\n    out += \"db\";\n    std::reverse(out.begin()\
    \ + 2, out.end() - 2);\n    return out;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptwhpewz6: /tmp/tmptwhpewz6.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // TODO\n\
    \    std::string binary = \"db\";\n    while(decimal != 0) {\n        if(decimal\
    \ % 2 == 0)\n            binary += \"0\";\n        else\n            binary +=\
    \ \"1\";\n        decimal /= 2;\n    }\n    binary += \"db\";\n    reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpntmvjkcf: /tmp/tmpntmvjkcf.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpuh558io9: /tmp/tmpuh558io9.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    int r = decimal % 2;\n    if\
    \ (r == 0)\n      binary += \"0\";\n    else\n      binary += \"1\";\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyka_emjl: /tmp/tmpyka_emjl.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  int r = 0;\n  while (decimal > 0) {\n    r = decimal % 2;\n\
    \    binary = binary + std::to_string(r);\n    decimal = decimal / 2;\n  }\n \
    \ binary = binary + \"db\";\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpg3b11a_w: /tmp/tmpg3b11a_w.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  char bin[17];\n\
    \  char* ptr=&bin[16];\n  *ptr='\\0';\n  ptr--;\n  while(decimal > 0){\n    *ptr=(decimal%2)+'0';\n\
    \    ptr--;\n    decimal /= 2;\n  }\n  ptr++;\n  std::string result=\"db\";\n\
    \  while(*ptr!='\\0'){\n    result+=*ptr;\n    ptr++;\n  }\n  result+=\"db\";\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp57hu_qgj: /tmp/tmp57hu_qgj.cpp:34: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    int i\
    \ = 0;\n    long remainder;\n    std::string result = \"db\";\n    while (decimal\
    \ > 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += std::to_string(remainder);\n        i++;\n    }\n    for (int j = i; j <\
    \ 7; j++) {\n        result += \"0\";\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    result += \"db\";\n    return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp58vjap3a: /tmp/tmp58vjap3a.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // assert(decimal\
    \ >= 0);\n  // TODO\n  std::string result = \"db\";\n  while (decimal > 0) {\n\
    \    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp50u9xz_a: /tmp/tmp50u9xz_a.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ answer = \"db\";\n    // long n = decimal;\n    while (decimal != 0) {\n   \
    \     if (decimal % 2 == 0) {\n            answer = \"0\" + answer;\n        }\
    \ else {\n            answer = \"1\" + answer;\n        }\n        decimal /=\
    \ 2;\n    }\n    return answer + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9843mj_z: /tmp/tmp9843mj_z.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin_str;\n    while (decimal > 0) {\n        bin_str += decimal % 2 + '0';\n\
    \        decimal /= 2;\n    }\n    bin_str += \"db\";\n    std::reverse(bin_str.begin(),\
    \ bin_str.end());\n    return bin_str;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpfdkor6cx: /tmp/tmpfdkor6cx.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal >= 1) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpt3s7v_ha: /tmp/tmpt3s7v_ha.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // you are\
    \ given a number\n  // you have to convert the number into binary format\n  //\
    \ to convert a number into binary format\n  // you have to divide the number by\
    \ 2 using modulo\n  // and you will get the remainder value\n  // of the divison\n\
    \  // you have to get the array of remiainder\n  // and then convert them into\
    \ a binary array\n  // to convert a remainders array into a binary\n  // you need\
    \ to find the size of the array\n  // you need to initalize the string with\n\
    \  // a size of the remiainder plus 4\n  // first and last two characters of the\
    \ string\n  // will be d and b\n  // then you have to replace the second character\n\
    \  // with 0 or 1 depending on the first remainder\n  // you have to convert the\
    \ whole remainders array\n  // into a binary array\n  // you have to return the\
    \ binary array\n  // as a string\n  // you need to create a vector to store the\
    \ remainders\n  // then you need to divide the number until it is equal to 0\n\
    \  // modulo the number by 2\n  // and then push the remainder into the vector\n\
    \  // then you need to reserve a space in the binary string\n  // which is equal\
    \ to the size of the vector plus 4\n  // then you need to go through each character\
    \ of the vector\n  // from the beginning\n  // and convert them into 0 or 1\n\
    \  // and then add it to the string\n  // then you need to return the string\n\
    \  std::vector<int> remainders;\n  while (decimal > 0) {\n    int remainder =\
    \ decimal % 2;\n    remainders.push_back(remainder);\n    decimal = decimal /\
    \ 2;\n  }\n  std::string binary;\n  binary.reserve(remainders.size() + 4);\n \
    \ binary.push_back('d');\n  binary.push_back('b');\n  for (int i = remainders.size()\
    \ - 1; i >= 0; i--) {\n    if (remainders[i] == 0) {\n      binary.push_back('0');\n\
    \    } else {\n      binary.push_back('1');\n    }\n \n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpijtc80nc.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpijtc80nc.cpp:63:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   63 | int main() {\n      |     \
    \       ^\n/tmp/tmpijtc80nc.cpp:69:1: error: expected \u2018}\u2019 at end of\
    \ input\n   69 | }\n      | ^\n/tmp/tmpijtc80nc.cpp:13:45: note: to match this\
    \ \u2018{\u2019\n   13 | std::string decimal_to_binary(long decimal) {\n     \
    \ |                                             ^\n/tmp/tmpijtc80nc.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // Your\
    \ code here\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj9kpzcxi: /tmp/tmpj9kpzcxi.cpp:18: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ result = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   result += \"0\";\n    } else {\n      result += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n  result += \"\
    db\";\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9wgv3bma: /tmp/tmp9wgv3bma.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  // Start from the end and keep multiplying by two\n  while\
    \ (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    }\
    \ else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpene94flh: /tmp/tmpene94flh.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    std::string db = \"db\";\n    binary += db;\n    if (decimal ==\
    \ 0) {\n        binary += \"0\";\n    }\n    else {\n        while (decimal >\
    \ 0) {\n            int temp = decimal % 2;\n            decimal /= 2;\n     \
    \       if (temp == 0) {\n                binary += \"0\";\n            }\n  \
    \          else {\n                binary += \"1\";\n            }\n        }\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    binary += db;\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmqw1s61t: /tmp/tmpmqw1s61t.cpp:38: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    int remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        if (remainder == 0) {\n     \
    \       binary += \"0\";\n        } else {\n            binary += \"1\";\n   \
    \     }\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptvlasttn: /tmp/tmptvlasttn.cpp:31: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin;\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n    \
    \    bin += std::to_string(remainder);\n        decimal /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return \"db\" + bin + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdxi3_q2n: /tmp/tmpdxi3_q2n.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ r = \"db\";\n    while (decimal > 0) {\n        r.insert(1, 1, decimal % 2 +\
    \ '0');\n        decimal /= 2;\n    }\n    return r + \"db\";\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmph9kffrpl: /tmp/tmph9kffrpl.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp92onjduf: /tmp/tmp92onjduf.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n   std::string\
    \ binary = \"db\";\n   if (decimal > 0) {\n    int decimalForCopy = decimal;\n\
    \    while (decimalForCopy >= 2) {\n        decimalForCopy /= 2;\n    }\n    while\
    \ (decimalForCopy < decimal) {\n        decimalForCopy *= 2;\n    }\n    while\
    \ (decimalForCopy > decimal) {\n        binary += \"0\";\n        decimalForCopy\
    \ /= 2;\n    }\n    while (decimalForCopy > 2) {\n        if (decimal >= decimalForCopy\
    \ / 2) {\n            binary += \"1\";\n            decimal -= decimalForCopy\
    \ / 2;\n        } else {\n            binary += \"0\";\n        }\n        decimalForCopy\
    \ /= 2;\n    }\n    if (decimal == 2) {\n        binary += \"10\";\n    } else\
    \ if (decimal == 1) {\n        binary += \"1\";\n    }\n    binary += \"db\";\n\
    \    return binary;\n   } else if (decimal == 0) {\n       return \"db0db\";\n\
    \   } else {\n       return \"db-1db\";\n   }\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnfc7epb2: /tmp/tmpnfc7epb2.cpp:52: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal\
    \ == 0) {\n        return \"db0db\";\n    }\n    std::string result = \"db\";\n\
    \    while (decimal > 0) {\n        result += std::to_string(decimal % 2);\n \
    \       decimal /= 2;\n    }\n    result += \"db\";\n    return std::string(result.rbegin(),\
    \ result.rend());\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpfj3_fok9: /tmp/tmpfj3_fok9.cpp:28: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  assert(decimal\
    \ >= 0);\n  //TODO\n  std::string binary_string;\n  long binary = 0;\n  long remainder;\n\
    \  long i = 1;\n  while (decimal != 0) {\n    remainder = decimal % 2;\n    decimal\
    \ /= 2;\n    binary += remainder * i;\n    i *= 10;\n  }\n  std::ostringstream\
    \ converter;\n  converter << binary;\n  binary_string = converter.str();\n  return\
    \ \"db\" + binary_string + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    assert(decimal\
    \ >= 0);\n    std::string binary = \"db\";\n    std::string temp;\n    while (decimal\
    \ > 0) {\n        if (decimal % 2 == 0) {\n            temp = '0' + temp;\n  \
    \      } else {\n            temp = '1' + temp;\n        }\n        decimal /=\
    \ 2;\n    }\n    return binary + temp + 'd' + 'b';\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnvk409th: /tmp/tmpnvk409th.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_string = \"db\";\n  while (decimal > 0) {\n    binary_string += (decimal\
    \ % 2) ? \"1\" : \"0\";\n    decimal /= 2;\n  }\n  binary_string += \"db\";\n\
    \  std::reverse(binary_string.begin() + 2, binary_string.end() - 2);\n  return\
    \ binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp7hbtju73: /tmp/tmp7hbtju73.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  while (decimal > 0) {\n    binary = ((decimal % 2) ? \"1\" : \"0\"\
    ) + binary;\n    decimal /= 2;\n  }\n  return \"db\" + binary + \"db\";\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp2vjuaz60: /tmp/tmp2vjuaz60.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ mystring;\n    mystring += \"db\";\n    for (int i = 0; i < sizeof(long) * 8;\
    \ i++) {\n        if (decimal & 1)\n            mystring += \"1\";\n        else\n\
    \            mystring += \"0\";\n        decimal >>= 1;\n    }\n    std::reverse(mystring.begin(),\
    \ mystring.end());\n    mystring += \"db\";\n    return mystring;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpuu7tx_9n: /tmp/tmpuu7tx_9n.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary = \"db\";\n\twhile (decimal > 0) {\n\t\tif (decimal % 2 == 0) {\n\t\t\
    \tbinary += \"0\";\n\t\t}\n\t\telse {\n\t\t\tbinary += \"1\";\n\t\t}\n\t\tdecimal\
    \ /= 2;\n\t}\n\tstd::reverse(binary.begin() + 2, binary.end());\n\tbinary += \"\
    db\";\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpe4kuqp2o: /tmp/tmpe4kuqp2o.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ result = \"db\";\n  while (decimal > 0) {\n    int remainder = decimal % 2;\n\
    \    result += std::to_string(remainder);\n    decimal /= 2;\n  }\n  std::reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5vh2ojz9: /tmp/tmp5vh2ojz9.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::stringstream\
    \ ss;\n  ss << \"db\";\n  for (int i = 31; i >= 0; i--) {\n    if (decimal & (1u\
    \ << i)) {\n      ss << \"1\";\n    } else {\n      ss << \"0\";\n    }\n  }\n\
    \  ss << \"db\";\n  return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmph33ccf86: /tmp/tmph33ccf86.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // write\
    \ code here\n    //\"db\"\n    std::string temp;\n    while(decimal>0){\n    \
    \    if(decimal%2==0){\n            temp+=\"0\";\n        }\n        else{\n \
    \           temp+=\"1\";\n        }\n        decimal/=2;\n    }\n    std::string\
    \ res=\"db\";\n    for(int i=temp.size()-1;i>=0;i--){\n        res+=temp[i];\n\
    \    }\n    res+=\"db\";\n    return res;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpfxj1618f: /tmp/tmpfxj1618f.cpp:35: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // your\
    \ code goes here\n  std::string binary;\n  binary += \"db\";\n  if (decimal ==\
    \ 0) {\n    binary += \"0\";\n  } else {\n    while (decimal > 0) {\n      if\
    \ (decimal % 2 == 0) {\n        binary += \"0\";\n      } else {\n        binary\
    \ += \"1\";\n      }\n      decimal /= 2;\n    }\n  }\n  binary += \"db\";\n \
    \ std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  if (decimal\
    \ == 0) {\n    return \"db0db\";\n  }\n  std::string ret;\n  ret.push_back('d');\n\
    \  ret.push_back('b');\n  if (decimal < 0) {\n    decimal *= -1;\n    ret.push_back('-');\n\
    \  }\n  std::stack<char> st;\n  while (decimal > 0) {\n    if (decimal % 2 ==\
    \ 0) {\n      st.push('0');\n    } else {\n      st.push('1');\n    }\n    decimal\
    \ /= 2;\n  }\n  while (!st.empty()) {\n    ret.push_back(st.top());\n    st.pop();\n\
    \  }\n  ret.push_back('d');\n  ret.push_back('b');\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ ret = \"db\";\n  if(decimal == 0)\n    ret += \"0\";\n  while(decimal > 0) {\n\
    \    ret += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  return ret\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkdb0c2zb: /tmp/tmpkdb0c2zb.cpp:26: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary=\"db\";\n    if(decimal==0)\n        binary+=\"0\";\n    else{\n    \
    \    while(decimal>0){\n            binary+=(decimal%2+'0');\n            decimal/=2;\n\
    \        }\n    }\n    reverse(binary.begin()+2,binary.end());\n    binary+=\"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // FIXME!!!\n\
    \    //TODO: Write your implementation here\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvtvmz0vq: /tmp/tmpvtvmz0vq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // your\
    \ code here\n  return \"db\" + std::bitset<15>(decimal).to_string() + \"db\";\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9d5dvuz3: /tmp/tmp9d5dvuz3.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    int rem = decimal % 2;\n   \
    \ binary += std::to_string(rem);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpikk_hei5: /tmp/tmpikk_hei5.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  assert(decimal\
    \ >= 0);\n  if (decimal == 0) return \"db0db\";\n  std::string res = \"db\";\n\
    \  for (; decimal > 0; decimal /= 2) res += (decimal % 2 + '0');\n  res += \"\
    db\";\n  std::reverse(res.begin() + 2, res.end() - 2);\n  return res;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ res = \"db\";\n    if (decimal == 0) {\n        res += \"0\";\n    }\n    while\
    \ (decimal > 0) {\n        int cur = decimal % 2;\n        res += std::to_string(cur);\n\
    \        decimal /= 2;\n    }\n    std::reverse(res.begin() + 2, res.end());\n\
    \    res += \"db\";\n    return res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\t// long\
    \ decimal, remainder;\n\tstd::string rem = \"\";\n\twhile (decimal > 0) {\n\t\t\
    rem += std::to_string(decimal % 2);\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(rem.begin(),\
    \ rem.end());\n\trem = \"db\" + rem + \"db\";\n\treturn rem;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpek1qmntm: /tmp/tmpek1qmntm.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    long i;\n\
    \    std::string result = \"db\";\n    std::string temp = \"\";\n    long rem;\n\
    \    for (i = 0; i < 8; i++) {\n        rem = decimal % 2;\n        temp = std::to_string(rem)\
    \ + temp;\n        decimal = decimal / 2;\n    }\n    result = result + temp +\
    \ \"db\";\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpu5osc6m7: /tmp/tmpu5osc6m7.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  std::string binary2 = \"db\";\n  if (decimal == 0) {\n \
    \   binary = \"db0db\";\n  }\n  else {\n    while (decimal > 0) {\n      if (decimal\
    \ % 2 == 0) {\n        binary += \"0\";\n      }\n      else {\n        binary\
    \ += \"1\";\n      }\n      decimal /= 2;\n    }\n    for (int i = binary.length()\
    \ - 1; i >= 2; i--) {\n      binary2 += binary[i];\n    }\n  }\n  return binary2;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpwgaaqrq4: /tmp/tmpwgaaqrq4.cpp:37: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  assert(decimal\
    \ > 0);\n  long rest = decimal;\n  std::string binary;\n  while (rest != 0) {\n\
    \    binary.push_back(rest % 2 + '0');\n    rest /= 2;\n  }\n  std::reverse(binary.begin(),\
    \ binary.end());\n  return std::string(\"db\") + binary + std::string(\"db\");\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdpz12xx7: /tmp/tmpdpz12xx7.cpp:14: std::string decimal_to_binary(long
    int): Assertion `decimal > 0'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    long rem = 0;\n    while (decimal != 0) {\n        rem\
    \ = decimal % 2;\n        binary += std::to_string(rem);\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary += \"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyoxmeklb: /tmp/tmpyoxmeklb.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ ret = \"db\";\n  if (decimal == 0) {\n    ret.append(\"0db\");\n    return ret;\n\
    \  }\n  std::stack<long> stack;\n  while (decimal != 0) {\n    stack.push(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  while (!stack.empty()) {\n    ret.append(std::to_string(stack.top()));\n\
    \    stack.pop();\n  }\n  ret.append(\"db\");\n  return ret;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    //write\
    \ the code here\n    std::string binary_string = \"db\";\n    while(decimal >\
    \ 0) {\n        if(decimal%2 == 0) {\n            binary_string = \"0\" + binary_string;\n\
    \        } else {\n            binary_string = \"1\" + binary_string;\n      \
    \  }\n        decimal = decimal/2;\n    }\n    binary_string += \"db\";\n    return\
    \ binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp410nnm61: /tmp/tmp410nnm61.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  int remainder;\n  while (decimal > 0) {\n    remainder =\
    \ decimal % 2;\n    binary = binary + std::to_string(remainder);\n    decimal\
    \ = decimal / 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary\
    \ += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpxiz_yiod: /tmp/tmpxiz_yiod.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_string = \"db\";\n  std::string binary_character;\n  long divisor;\n\
    \  while (decimal > 0) {\n    divisor = decimal / 2;\n    if (decimal % 2 == 0)\
    \ {\n      binary_character = \"0\";\n    } else {\n      binary_character = \"\
    1\";\n    }\n    binary_string.append(binary_character);\n    decimal = divisor;\n\
    \  }\n  binary_string.append(\"db\");\n  std::reverse(binary_string.begin(), binary_string.end());\n\
    \  return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy3bdhlgq: /tmp/tmpy3bdhlgq.cpp:33: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    if (decimal == 0)\n        binary += \"0\";\n    else\
    \ {\n        while (decimal > 0) {\n            long remainder = decimal % 2;\n\
    \            binary += std::to_string(remainder);\n            decimal /= 2;\n\
    \        }\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary{\"db\"};\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp61303k_a: /tmp/tmp61303k_a.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  std::vector<char> binary_chars;\n  // for loop for extracting\
    \ the binary numbers from the decimal number\n  for (int i = 0; decimal > 0; i++)\
    \ {\n    if (decimal % 2 == 0) {\n      binary_chars.push_back('0');\n    } else\
    \ {\n      binary_chars.push_back('1');\n    }\n    decimal /= 2;\n  }\n  // for\
    \ loop for appending the binary characters to the string\n  for (int i = binary_chars.size()\
    \ - 1; i >= 0; i--) {\n    binary += binary_chars[i];\n  }\n  binary += \"db\"\
    ;\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprbasz8m5: /tmp/tmprbasz8m5.cpp:34: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ result = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   result = '0' + result;\n    } else {\n      result = '1' + result;\n    }\n\
    \    decimal /= 2;\n  }\n  result += 'db';\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp2jjpbt3r: /tmp/tmp2jjpbt3r.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  long quotient = decimal;\n  long remainder;\n  do {\n    remainder\
    \ = quotient % 2;\n    quotient = quotient / 2;\n    if (remainder == 0) {\n \
    \     binary.push_back('0');\n    } else {\n      binary.push_back('1');\n   \
    \ }\n  } while (quotient != 0);\n  binary.append(\"db\");\n  std::reverse(binary.begin(),\
    \ binary.end());\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyz8vvfsz: /tmp/tmpyz8vvfsz.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    long val = decimal;\n    if (val==0) {\n        binary\
    \ = binary + \"0\";\n    }\n    while (val != 0) {\n        if (val % 2 == 0)\
    \ {\n            binary = binary + \"0\";\n        } else {\n            binary\
    \ = binary + \"1\";\n        }\n        val = val / 2;\n    }\n    binary = binary\
    \ + \"db\";\n    std::reverse(binary.begin()+2, binary.end()-2);\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // Part\
    \ A: Convert decimal to binary in the format \"db111111db\"\n  // Hint: Use std::bitset<8>\
    \ and convert to string\n  // Your code here\n  std::bitset<8> binary(decimal);\n\
    \  std::string binary_str = \"db\" + binary.to_string() + \"db\";\n  return binary_str;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5qzbnw03: /tmp/tmp5qzbnw03.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  return \"\
    db\" + std::bitset<64>(decimal).to_string() + \"db\";\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpd0fzx9rs: /tmp/tmpd0fzx9rs.cpp:18: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    long remainder\
    \ = 0;\n    std::string ans = \"db\";\n    // handle 0 as special case\n    if\
    \ (decimal == 0) {\n        ans = ans + \"0\" + \"db\";\n        return ans;\n\
    \    }\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        ans += std::to_string(remainder);\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    ans += \"db\";\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6jusflkg: /tmp/tmp6jusflkg.cpp:33: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  // Please implement this function and return the string\
    \ \"dbxxxxxdb\" where xxxxx is the\n  // binary representation of the input decimal.\n\
    \  // You have to support decimal numbers from 0 to 2147483647.\n  if (decimal\
    \ == 0) {\n    binary += \"0\";\n  } else {\n    while (decimal > 0) {\n     \
    \ binary += std::to_string(decimal % 2);\n      decimal /= 2;\n    }\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binaryString;\n    binaryString = \"db\";\n    if (decimal == 0) {\n       \
    \ binaryString = binaryString + \"0\" + \"db\";\n        return binaryString;\n\
    \    }\n    while (decimal != 0) {\n        binaryString = binaryString + std::to_string(decimal\
    \ % 2);\n        decimal = decimal / 2;\n    }\n    reverse(binaryString.begin()\
    \ + 2, binaryString.end());\n    binaryString = binaryString + \"db\";\n    return\
    \ binaryString;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n  \
    \  assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"\
    ));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // Check\
    \ if the number is negative.\n  bool is_negative = false;\n  if (decimal < 0)\
    \ {\n    is_negative = true;\n    decimal = -decimal;\n  }\n  // Keep track of\
    \ the binary number.\n  std::string binary_number;\n  // If the number is 0, it's\
    \ binary representation is 0.\n  if (decimal == 0) {\n    binary_number = \"0\"\
    ;\n  }\n  // Otherwise, keep dividing the number by 2 until it becomes 0.\n  while\
    \ (decimal != 0) {\n    long reminder = decimal % 2;\n    decimal /= 2;\n    //\
    \ Prepend the number to the binary number.\n    binary_number = std::to_string(reminder)\
    \ + binary_number;\n  }\n  // Prepend a '1' if the number is negative.\n  if (is_negative)\
    \ {\n    binary_number = \"1\" + binary_number;\n  }\n  // Prepend 0s to the binary\
    \ number to make it 8-bits long.\n  binary_number = std::string(8 - binary_number.length(),\
    \ '0') + binary_number;\n  // Surround the binary number with \"db\".\n  binary_number\
    \ = \"db\" + binary_number + \"db\";\n  return binary_number;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpxtm5ca8j: /tmp/tmpxtm5ca8j.cpp:45: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary;\n\tbinary.push_back('d');\n\tbinary.push_back('b');\n\tint num_digits\
    \ = 0;\n\twhile (decimal != 0) {\n\t\tif (decimal % 2 == 0) {\n\t\t\tbinary.push_back('0');\n\
    \t\t} else {\n\t\t\tbinary.push_back('1');\n\t\t}\n\t\tdecimal /= 2;\n\t\tnum_digits++;\n\
    \t}\n\tif (num_digits > 0) {\n\t\tstd::reverse(binary.begin() + 2, binary.end());\n\
    \t}\n\tbinary.push_back('d');\n\tbinary.push_back('b');\n\treturn binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptt270598: /tmp/tmptt270598.cpp:36: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // your\
    \ code goes here...\n  string s = \"db\";\n  long tmp = decimal;\n  long a = 0;\n\
    \  long b = 0;\n  for (int i = 0; i < decimal; i++) {\n    if (decimal / 2 ==\
    \ 1) {\n      a = decimal % 2;\n      s += to_string(a);\n      break;\n    }\n\
    \    a = decimal % 2;\n    s += to_string(a);\n    decimal = decimal / 2;\n  }\n\
    \  // string rev = s;\n  // reverse(rev.begin(), rev.end());\n  // return s.append(rev);\n\
    \  reverse(s.begin(), s.end());\n  return s;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkx0itr6p.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpkx0itr6p.cpp:15:3: error: \u2018string\u2019 was not declared\
    \ in this scope\n   15 |   string s = \"db\";\n      |   ^~~~~~\n/tmp/tmpkx0itr6p.cpp:15:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkx0itr6p.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkx0itr6p.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpkx0itr6p.cpp:22:7: error: \u2018s\u2019 was not declared in this scope\n\
    \   22 |       s += to_string(a);\n      |       ^\n/tmp/tmpkx0itr6p.cpp:22:12:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   22 |       s += to_string(a);\n      |    \
    \        ^~~~~~~~~\n      |            std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n   "
  stdout: ''
  timestamp: 1660115624
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ str = \"db\";\n  int k = 1;\n  while (decimal / (2 * k) != 0)\n    k *= 2;\n\
    \  while (k > 0) {\n    str += std::to_string(decimal / k);\n    decimal %= k;\n\
    \    k /= 2;\n  }\n  str += \"db\";\n  return str;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0)\n     \
    \ binary += \"0\";\n    else\n      binary += \"1\";\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpu0_mxkoi: /tmp/tmpu0_mxkoi.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0)\n\
    \            binary += \"0\";\n        else\n            binary += \"1\";\n  \
    \      decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphbqfue20: /tmp/tmphbqfue20.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ result = \"db\";\n\tstd::string binary = \"\";\n\twhile (decimal > 0) {\n\t\t\
    binary = binary + std::to_string(decimal % 2);\n\t\tdecimal = decimal / 2;\n\t\
    }\n\tstd::reverse(binary.begin(), binary.end());\n\tresult += binary;\n\tresult\
    \ += \"db\";\n\treturn result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpjqz_vje7: /tmp/tmpjqz_vje7.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary=\"db\";\n    if(decimal==0)\n        binary=binary+\"0\";\n    else {\n\
    \        while(decimal>0) {\n            if(decimal%2==0)\n                binary=binary+\"\
    0\";\n            else\n                binary=binary+\"1\";\n            decimal=decimal/2;\n\
    \        }\n    }\n    reverse(binary.begin()+2,binary.end());\n    binary=binary+\"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    long num\
    \ = decimal;\n    long rem;\n    std::string binary = \"\";\n    while (num >\
    \ 0) {\n        rem = num % 2;\n        num = num / 2;\n        binary = (char)(rem\
    \ + '0') + binary;\n    }\n    if (binary.size() < 8) {\n        for (size_t i\
    \ = binary.size(); i < 8; i++) {\n            binary = '0' + binary;\n       \
    \ }\n    }\n    binary = \"db\" + binary + \"db\";\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvapyfuav: /tmp/tmpvapyfuav.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result = \"db\";\n    if (decimal == 0) {\n        result += \"0\";\n    }\n\
    \    while (decimal != 0) {\n        result += (decimal % 2 == 0) ? \"0\" : \"\
    1\";\n        decimal /= 2;\n    }\n    result += \"db\";\n    return std::string(result.rbegin(),\
    \ result.rend());\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpaf_5ka8h: /tmp/tmpaf_5ka8h.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal\
    \ == 0) {\n        return \"db0db\";\n    }\n    std::string binary;\n    binary.append(\"\
    db\");\n    for (long i = decimal; i > 0; i /= 2) {\n        binary.push_back((i\
    \ % 2) + '0');\n    }\n    binary.append(\"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp8n9zr25g: /tmp/tmp8n9zr25g.cpp:28: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin;\n  while (decimal > 0) {\n    bin += std::to_string(decimal % 2);\n   \
    \ decimal /= 2;\n  }\n  std::reverse(bin.begin(), bin.end());\n  bin = \"db\"\
    \ + bin + \"db\";\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpi81e5u55: /tmp/tmpi81e5u55.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    if (decimal == 0) return binary + \"0\" + binary;\n  \
    \  while (decimal != 0) {\n        binary += (decimal & 1) ? \"1\" : \"0\";\n\
    \        decimal >>= 1;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  int arr[100];\n\
    \  int i = 0;\n  while (decimal > 0) {\n    arr[i] = decimal % 2;\n    decimal\
    \ = decimal / 2;\n    i++;\n  }\n  std::string s = \"db\";\n  for (int j = i -\
    \ 1; j >= 0; j--) {\n    s += std::to_string(arr[j]);\n  }\n  s += \"db\";\n \
    \ return s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvs2calq3: /tmp/tmpvs2calq3.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    long i\
    \ = 0;\n    long long binary = 0;\n    while (decimal != 0) {\n        binary\
    \ += (decimal % 2) * pow(10, i);\n        decimal /= 2;\n        ++i;\n    }\n\
    \    std::string str = \"db\";\n    std::string binaryString = std::to_string(binary);\n\
    \    str.append(binaryString);\n    str.append(\"db\");\n    return str;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  if (decimal\
    \ == 0) {\n    return \"db0db\";\n  }\n  // This is a conversion function\n  //\
    \ Now write the logic for the function\n  // 'return' the value after the required\
    \ conversion\n  std::string result = \"db\";\n  int bit = 0;\n  while (decimal\
    \ > 0) {\n    bit = decimal % 2;\n    decimal = decimal / 2;\n    result = std::to_string(bit)\
    \ + result;\n  }\n  result = result + \"db\";\n  return result;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpwd_ztuwa: /tmp/tmpwd_ztuwa.cpp:33: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ str = \"db\";\n  // Your solution goes here\n  while(decimal > 0) {\n    if(decimal\
    \ % 2 == 0)\n      str = str + \"0\";\n    else\n      str = str + \"1\";\n  \
    \  decimal = decimal / 2;\n  }\n  return str + \"db\";\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpaz78u0c_: /tmp/tmpaz78u0c_.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  while (decimal != 0) {\n    bin += std::to_string(decimal %\
    \ 2);\n    decimal /= 2;\n  }\n  bin += \"db\";\n  std::reverse(bin.begin() +\
    \ 2, bin.end() - 2);\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpwwe_3vot: /tmp/tmpwwe_3vot.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  while (decimal != 0) {\n    binary = std::to_string(decimal % 2)\
    \ + binary;\n    decimal /= 2;\n  }\n  binary = \"db\" + binary + \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpha9eby8t: /tmp/tmpha9eby8t.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    long remainder = decimal % 2;\n\
    \    binary += std::to_string(remainder);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkl66oz48: /tmp/tmpkl66oz48.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    //convert\
    \ the number to binary\n    //store the output in a string\n    //return the string\n\
    \    return \"db\" + std::bitset<8>(decimal).to_string() + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp37736br0: /tmp/tmp37736br0.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  assert(decimal\
    \ >= 0);\n  std::string binary = \"db\";\n  while (decimal > 0) {\n    binary\
    \ += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  binary += \"db\"\
    ;\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp24022wg1: /tmp/tmp24022wg1.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    }\
    \ else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal\
    \ < 2) {\n        return std::string(decimal + 2, '0');\n    }\n    else {\n \
    \       return decimal_to_binary(decimal / 2) + std::to_string(decimal % 2);\n\
    \    }\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp32b6ugkc: /tmp/tmp32b6ugkc.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    assert(decimal\
    \ >= 0);\n    if (decimal == 0) return \"db0db\";\n    std::string binary = \"\
    db\";\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal % 2));\n\
    \        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary = \"db\";\n\tlong rem;\n\tif (decimal <= 1) {\n\t\tbinary += \"0\";\n\
    \t\tbinary += \"1\";\n\t\tbinary += \"db\";\n\t\treturn binary;\n\t}\n\twhile\
    \ (decimal != 0) {\n\t\trem = decimal % 2;\n\t\tbinary += std::to_string(rem);\n\
    \t\tdecimal /= 2;\n\t}\n\tstd::reverse(binary.begin(), binary.end());\n\treturn\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6halpvy0: /tmp/tmp6halpvy0.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ result = \"db\";\n\tstd::string binaryString = \"\";\n\tlong base = 2;\n\tlong\
    \ remainder = 0;\n\twhile (decimal > 0) {\n\t\tremainder = decimal % base;\n\t\
    \tif (remainder == 0) {\n\t\t\tbinaryString = \"0\" + binaryString;\n\t\t} else\
    \ {\n\t\t\tbinaryString = \"1\" + binaryString;\n\t\t}\n\t\tdecimal = decimal\
    \ / base;\n\t}\n\tresult = result + binaryString + \"db\";\n\treturn result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpasgi8eze: /tmp/tmpasgi8eze.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0)\n\
    \            result = \"0\" + result;\n        else\n            result = \"1\"\
    \ + result;\n        decimal /= 2;\n    }\n    result += \"db\";\n    return result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp44i8k8ky: /tmp/tmp44i8k8ky.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_repr;\n  while (decimal > 0) {\n    binary_repr += (decimal % 2) ? '1'\
    \ : '0';\n    decimal /= 2;\n  }\n  std::reverse(binary_repr.begin(), binary_repr.end());\n\
    \  return \"db\" + binary_repr + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmgt8h90d: /tmp/tmpmgt8h90d.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  while (decimal != 0) {\n    bin += std::to_string(decimal %\
    \ 2);\n    decimal /= 2;\n  }\n  std::reverse(bin.begin() + 2, bin.end());\n \
    \ bin += \"db\";\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvrpcu3cg: /tmp/tmpvrpcu3cg.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    int remainder = decimal % 2;\n\
    \    binary.insert(1, std::to_string(remainder));\n    decimal /= 2;\n  }\n  binary\
    \ += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpms54vhpi: /tmp/tmpms54vhpi.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpbqrzng37: /tmp/tmpbqrzng37.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // Write\
    \ your code here\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5690x1ph: /tmp/tmp5690x1ph.cpp:18: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    int binary_bits\
    \ = 0;\n    long temp = decimal;\n    while (temp != 0) {\n        temp /= 2;\n\
    \        binary_bits++;\n    }\n    std::string binary = \"db\";\n    std::string\
    \ one = \"1\";\n    std::string zero = \"0\";\n    for (int i = 0; i < binary_bits;\
    \ i++) {\n        if (decimal % 2 == 0) {\n            binary = zero + binary;\n\
    \        } else {\n            binary = one + binary;\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_p6aa2xa: /tmp/tmp_p6aa2xa.cpp:36: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  std::bitset<64> b(decimal);\n  binary += b.to_string();\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv6yjgscz: /tmp/tmpv6yjgscz.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115624
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += (decimal % 2) ? \"\
    1\" : \"0\";\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpsvy_y5hr: /tmp/tmpsvy_y5hr.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    int remainder;\n    while (decimal != 0) {\n        remainder =\
    \ decimal % 2;\n        decimal /= 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp083tvkbt: /tmp/tmp083tvkbt.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\t// TODO:\
    \ implement this function\n\tstd::string binary_num;\n\t// binary_num = std::bitset<15>(decimal).to_string();\n\
    \t// // std::cout << binary_num;\n\t// binary_num = \"db\" + binary_num + \"db\"\
    ;\n\t// return binary_num;\n\tlong i = 0;\n\tlong rem = 0;\n\tlong bin = 0;\n\t\
    long num = decimal;\n\twhile (num > 0) {\n\t\trem = num % 2;\n\t\tbin = (rem *\
    \ pow(10, i)) + bin;\n\t\tnum = num / 2;\n\t\ti++;\n\t}\n\tbinary_num = \"db\"\
    \ + std::to_string(bin) + \"db\";\n\treturn binary_num;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  if(decimal == 0) {\n    bin = \"db0db\";\n  }\n  else if(decimal\
    \ < 0) {\n    decimal = abs(decimal);\n    while(decimal != 0) {\n      if(decimal\
    \ % 2 == 0) {\n        bin += \"0\";\n      }\n      else {\n        bin += \"\
    1\";\n      }\n      decimal /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n\
    \    bin += \"db\";\n  }\n  else {\n    while(decimal != 0) {\n      if(decimal\
    \ % 2 == 0) {\n        bin += \"0\";\n      }\n      else {\n        bin += \"\
    1\";\n      }\n      decimal /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n\
    \    bin += \"db\";\n  }\n  return bin;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqyaog7rr: /tmp/tmpqyaog7rr.cpp:50: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  while (decimal) {\n    binary += std::to_string(decimal % 2);\n \
    \   decimal = decimal / 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin(),\
    \ binary.end());\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptnmkydjk: /tmp/tmptnmkydjk.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    int binaryNum[1000];\n\
    \    int i = 0;\n    while (decimal > 0) {\n        binaryNum[i] = decimal % 2;\n\
    \        decimal = decimal / 2;\n        i++;\n    }\n    std::string a = \"db\"\
    ;\n    for (int j = i - 1; j >= 0; j--) {\n        a += std::to_string(binaryNum[j]);\n\
    \    }\n    a += \"db\";\n    return a;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpu27hn8h6: /tmp/tmpu27hn8h6.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    char binary[20];\n\
    \    int length = 0;\n    while (decimal != 0) {\n        if (decimal % 2 == 0)\
    \ {\n            binary[length] = '0';\n        } else {\n            binary[length]\
    \ = '1';\n        }\n        decimal /= 2;\n        length++;\n    }\n    std::string\
    \ binary_str = \"db\";\n    for (int i = length - 1; i >= 0; i--) {\n        binary_str\
    \ += binary[i];\n    }\n    binary_str += \"db\";\n    return binary_str;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvn71k2b7: /tmp/tmpvn71k2b7.cpp:34: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        binary.push_back(decimal\
    \ % 2 ? '1' : '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp0e_ntgpr: /tmp/tmp0e_ntgpr.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    assert(decimal\
    \ >= 0);\n    std::string binary_str;\n    while (decimal != 0) {\n        if\
    \ (decimal % 2 == 0) {\n            binary_str.insert(0, \"0\");\n        } else\
    \ {\n            binary_str.insert(0, \"1\");\n        }\n        decimal /= 2;\n\
    \    }\n    binary_str.insert(0, \"db\");\n    binary_str.insert(binary_str.size(),\
    \ \"db\");\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpf9qd46jh: /tmp/tmpf9qd46jh.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::vector<int>\
    \ binary_reversed;\n\twhile (decimal >= 1) {\n\t\tbinary_reversed.push_back(decimal\
    \ % 2);\n\t\tdecimal /= 2;\n\t}\n\tstd::string binary = \"db\";\n\tfor (int i\
    \ = binary_reversed.size() - 1; i >= 0; i--) {\n\t\tbinary += std::to_string(binary_reversed[i]);\n\
    \t}\n\tbinary += \"db\";\n\treturn binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9uhpbo4r: /tmp/tmp9uhpbo4r.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115625
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  assert(decimal>=0);\n\
    \  std::string str;\n  str.push_back('d');\n  str.push_back('b');\n  do {\n  \
    \  str.push_back('0'+decimal%2);\n    decimal/=2;\n  } while(decimal>0);\n  str.push_back('d');\n\
    \  str.push_back('b');\n  std::reverse(str.begin()+2,str.end()-2);\n  return str;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115626
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result;\n    if (decimal == 0) return \"db0db\";\n    int len = 0;\n    while\
    \ (decimal != 0) {\n        len++;\n        result.push_back(decimal % 2 + '0');\n\
    \        decimal /= 2;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    binary.append(result);\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  char a[100];\n\
    \  char b[100];\n  std::string s = \"db\";\n  int index = 0;\n  while (decimal\
    \ != 0) {\n    a[index] = (decimal % 2) + '0';\n    decimal /= 2;\n    index++;\n\
    \  }\n  for (int i = 0; i < index; i++) {\n    b[i] = a[index - i - 1];\n  }\n\
    \  s += b;\n  s += \"db\";\n  return s;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4r9rc5u6: /tmp/tmp4r9rc5u6.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n  \
    \    binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpn9g5crkr: /tmp/tmpn9g5crkr.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // this\
    \ is not a good idea but the problem can be solved this way\n  std::string binary\
    \ = \"db\";\n  for (unsigned long i = (1L << 63); i > 0; i = i / 2) {\n    binary.append(std::to_string((decimal\
    \ & i) != 0));\n  }\n  binary.append(\"db\");\n  return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp3z45xhou: /tmp/tmp3z45xhou.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::vector<int>\
    \ binary;\n    while (decimal != 0) {\n        binary.push_back(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::string str;\n    str.push_back('d');\n\
    \    str.push_back('b');\n    while (!binary.empty()) {\n        str.push_back(binary.back()\
    \ + '0');\n        binary.pop_back();\n    }\n    str.push_back('d');\n    str.push_back('b');\n\
    \    return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvllsde64: /tmp/tmpvllsde64.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin = \"db\";\n    while (decimal>0) {\n        bin += std::to_string(decimal%2);\n\
    \        decimal = decimal/2;\n    }\n    reverse(bin.begin()+2, bin.end());\n\
    \    bin += \"db\";\n    return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpaeoeq7fb: /tmp/tmpaeoeq7fb.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ s;\n    if (decimal == 0)\n        return \"db0db\";\n    while (decimal > 0)\
    \ {\n        int rem = decimal % 2;\n        s += std::to_string(rem);\n     \
    \   decimal /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n    s = \"db\"\
    \ + s + \"db\";\n    return s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpncicxghk: /tmp/tmpncicxghk.cpp:18: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // Write\
    \ your code here\n  std::vector<int> bin{};\n  while (decimal >= 1) {\n    bin.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::string str = \"db\";\n  while (!bin.empty())\
    \ {\n    str += std::to_string(bin.back());\n    bin.pop_back();\n  }\n  str +=\
    \ \"db\";\n  return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpig_vs7o1: /tmp/tmpig_vs7o1.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        if (decimal % 2 == 0)\
    \ {\n            binary = \"0\" + binary;\n        } else {\n            binary\
    \ = \"1\" + binary;\n        }\n        decimal /= 2;\n    }\n    binary += \"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmph1qosugp: /tmp/tmph1qosugp.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin = \"db\";\n    for (int i = 0; i < 64; i++) {\n        if (decimal >= (1\
    \ << (63 - i))) {\n            bin += \"1\";\n            decimal -= (1 << (63\
    \ - i));\n        } else {\n            bin += \"0\";\n        }\n    }\n    bin\
    \ += \"db\";\n    return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpavx6b70n: /tmp/tmpavx6b70n.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ output = \"db\";\n  if (decimal == 0) {\n    output.append(\"0db\");\n    return\
    \ output;\n  }\n  while (decimal != 0) {\n    output.append(std::to_string(decimal\
    \ % 2));\n    decimal /= 2;\n  }\n  output.append(\"db\");\n  std::reverse(output.begin()\
    \ + 2, output.end() - 2);\n  return output;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ db = \"db\";\n  std::string binaryNumber = \"\";\n  for (int i = 0; i < 64;\
    \ i++) {\n    if (decimal % 2 == 0) {\n      binaryNumber = \"0\" + binaryNumber;\n\
    \    } else {\n      binaryNumber = \"1\" + binaryNumber;\n    }\n    decimal\
    \ /= 2;\n  }\n  binaryNumber = db + binaryNumber + db;\n  return binaryNumber;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnw00dg1y: /tmp/tmpnw00dg1y.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ result = \"db\";\n  while (decimal) {\n    result += decimal % 2 ? \"1\" : \"\
    0\";\n    decimal /= 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n\
    \  result += \"db\";\n  return result;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmgsim0fy: /tmp/tmpmgsim0fy.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += decimal % 2 + '0';\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n \
    \ binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpimbmnn_5: /tmp/tmpimbmnn_5.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // your\
    \ code goes here\n  long remainder;\n  std::string result=\"\";\n  while(decimal>0)\n\
    \  {\n    remainder=decimal%2;\n    result+=std::to_string(remainder);\n    decimal/=2;\n\
    \  }\n  std::reverse(result.begin(),result.end());\n  result=\"db\"+result+\"\
    db\";\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpd3p004bn: /tmp/tmpd3p004bn.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n   std::string\
    \ binary;\n    while(decimal>0)\n    {\n        if(decimal%2==0)\n        {\n\
    \            binary+=\"0\";\n        }\n        else\n        {\n            binary+=\"\
    1\";\n        }\n        decimal=decimal/2;\n    }\n    std::reverse(binary.begin(),binary.end());\n\
    \    return \"db\"+binary+\"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_34segr6: /tmp/tmp_34segr6.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ s = \"db\";\n\twhile (decimal > 0) {\n\t\ts += std::to_string(decimal % 2);\n\
    \t\tdecimal /= 2;\n\t}\n\treverse(s.begin() + 2, s.end());\n\ts += \"db\";\n\t\
    return s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpinlhm5a3: /tmp/tmpinlhm5a3.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ bin, ret = \"db\";\n    while (decimal) {\n        bin += (decimal % 2) ? '1'\
    \ : '0';\n        decimal /= 2;\n    }\n    reverse(bin.begin(), bin.end());\n\
    \    bin += \"db\";\n    return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_etwyqao: /tmp/tmp_etwyqao.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n// Write your\
    \ code here.\n\tstd::string s;\n\twhile(decimal>0){\n\t\tint rem=decimal%2;\n\t\
    \tdecimal=decimal/2;\n\t\ts.push_back(rem+'0');\n\t}\n\tstd::reverse(s.begin(),s.end());\n\
    \ts=\"db\"+s+\"db\";\n\treturn s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpziawy24i: /tmp/tmpziawy24i.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    binary = \"db\";\n    int count = 0;\n    long x = decimal;\n \
    \   for (int i = 0; i < 30; i++) {\n        if (decimal % 2 == 0) {\n        \
    \    binary = \"0\" + binary;\n        } else {\n            binary = \"1\" +\
    \ binary;\n        }\n        decimal = decimal / 2;\n        if (decimal == 0)\
    \ {\n            break;\n        }\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphr9bb6n0: /tmp/tmphr9bb6n0.cpp:34: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary.push_back((decimal % 2)\
    \ + '0');\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n\
    \  binary.push_back('d');\n  binary.push_back('b');\n  return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppbl9n9kw: /tmp/tmppbl9n9kw.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  bool flag = 0;\n  binary = \"db\";\n  if (decimal == 0) {\n    binary\
    \ += \"0\";\n  }\n  for (int i = sizeof(decimal) * 8 - 1; i >= 0; i--) {\n   \
    \ if (decimal & (1 << i)) {\n      binary += \"1\";\n      flag = 1;\n    } else\
    \ if (flag) {\n      binary += \"0\";\n    }\n  }\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv2f9bkk6: /tmp/tmpv2f9bkk6.cpp:34: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  //your code\
    \ here\n  char string[100] = \"db\";\n  int i = 2;\n  while(decimal > 0) {\n \
    \   if(decimal % 2 == 0) {\n      string[i] = '0';\n    } else {\n      string[i]\
    \ = '1';\n    }\n    decimal /= 2;\n    i++;\n  }\n  string[i] = 'd';\n  string[i+1]\
    \ = 'b';\n  string[i+2] = '\\0';\n  return string;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq_7n7rpi: /tmp/tmpq_7n7rpi.cpp:33: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary_str;\n    binary_str += \"db\";\n    for (int i = 64; i >= 0; i--) {\n\
    \        long res = decimal >> i;\n        if (res & 1) {\n            binary_str\
    \ += \"1\";\n        } else {\n            binary_str += \"0\";\n        }\n \
    \   }\n    binary_str += \"db\";\n    return binary_str;\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv9kn6chr: /tmp/tmpv9kn6chr.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal\
    \ == 0) {\n        return \"db0db\";\n    }\n    std::string str = \"db\";\n \
    \   while (decimal > 0) {\n        int remainder = decimal % 2;\n        str +=\
    \ std::to_string(remainder);\n        decimal /= 2;\n    }\n    std::reverse(str.begin()\
    \ + 2, str.end());\n    str += \"db\";\n    return str;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // write\
    \ your code here\n    std::string binary_value = \"db\";\n    if (decimal == 0)\
    \ {\n        binary_value += \"0\";\n    }\n    else {\n        std::vector<int>\
    \ binary;\n        int remainder;\n        while (decimal > 0) {\n           \
    \ remainder = decimal % 2;\n            binary.push_back(remainder);\n       \
    \     decimal /= 2;\n        }\n        int length = binary.size();\n        for\
    \ (int i = length - 1; i >= 0; i--) {\n            binary_value += std::to_string(binary[i]);\n\
    \        }\n    }\n    binary_value += \"db\";\n    return binary_value;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  if (decimal\
    \ == 0) return \"db0db\";\n  std::string binary = \"db\";\n  int reminder = 0;\n\
    \  while (decimal != 0) {\n    reminder = decimal % 2;\n    binary += std::to_string(reminder);\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin(), binary.end());\n  binary\
    \ += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp93veb4bp: /tmp/tmp93veb4bp.cpp:29: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_number;\n  int count = 0;\n  while (decimal > 0) {\n    count++;\n  \
    \  binary_number += decimal % 2 + '0';\n    decimal /= 2;\n  }\n  binary_number\
    \ += \"b\";\n  while (count < 7) {\n    binary_number += '0';\n    count++;\n\
    \  }\n  binary_number += \"b\";\n  std::reverse(binary_number.begin(), binary_number.end());\n\
    \  return binary_number;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppc7v0v15: /tmp/tmppc7v0v15.cpp:32: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n  \
    \    binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpn9g5crkr: /tmp/tmpn9g5crkr.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ bin = \"db\";\n  if (decimal == 0) return bin + \"0\" + bin;\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) bin = \"0\" + bin;\n    else bin = \"1\"\
    \ + bin;\n    decimal /= 2;\n  }\n  return bin + \"db\";\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpc1xeaiz8: /tmp/tmpc1xeaiz8.cpp:26: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    if (decimal==0)\
    \ {\n        return \"db0db\";\n    }\n    else {\n        std::string str=\"\"\
    ;\n        while (decimal!=0) {\n            if (decimal%2==0) {\n           \
    \     str+=\"0\";\n            }\n            else {\n                str+=\"\
    1\";\n            }\n            decimal=decimal/2;\n        }\n        std::reverse(str.begin(),str.end());\n\
    \        str=\"db\"+str+\"db\";\n        return str;\n    }\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ res = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      res\
    \ += \"0\";\n    } else {\n      res += \"1\";\n    }\n    decimal /= 2;\n  }\n\
    \  std::reverse(res.begin() + 2, res.end());\n  res += \"db\";\n  return res;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpbh6f9rhz: /tmp/tmpbh6f9rhz.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ res;\n    res += \"db\";\n    for (long i = 0; i < 8; i++) {\n        if (decimal\
    \ % 2 == 0) {\n            res = '0' + res;\n        } else {\n            res\
    \ = '1' + res;\n        }\n        decimal /= 2;\n    }\n    res += \"db\";\n\
    \    return res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptdj3yk_t: /tmp/tmptdj3yk_t.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115627
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while\
    \ (decimal != 0) {\n    int remainder = decimal % 2;\n    binary += remainder\
    \ == 0 ? \"0\" : \"1\";\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2,\
    \ binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115627
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::vector<int>\
    \ binary(0);\n  // The number is inserted in the vector in reverse order to make\
    \ it easier to print\n  while (decimal) {\n    binary.push_back(decimal % 2);\n\
    \    decimal /= 2;\n  }\n  std::string output = \"db\";\n  // Since I insert the\
    \ digits in the reverse order, I iterate on the vector in reverse order\n  for\
    \ (int i = binary.size() - 1; i >= 0; i--) {\n    output += binary[i] + '0';\n\
    \  }\n  output += \"db\";\n  return output;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp8m_armt4: /tmp/tmp8m_armt4.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0)\n    \
    \  binary += \"0\";\n    else\n      binary += \"1\";\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpcegns0q7: /tmp/tmpcegns0q7.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  if (decimal\
    \ == 0) {\n    return \"db0db\";\n  }\n  std::string output = \"db\";\n  while\
    \ (decimal != 0) {\n    output += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  std::reverse(output.begin() + 2, output.end());\n  output += \"db\"\
    ;\n  return output;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result(\"db\");\n    while (decimal) {\n        result += decimal & 1 ? '1'\
    \ : '0';\n        decimal /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpc9kj0uyo: /tmp/tmpc9kj0uyo.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // Write\
    \ your code here\n  std::string str = \"db\";\n  while(decimal>0){\n    if(decimal%2==0){\n\
    \      str += \"0\";\n    }else{\n      str += \"1\";\n    }\n    decimal /= 2;\n\
    \  }\n  std::reverse(str.begin()+2, str.end());\n  str += \"db\";\n  return str;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp0ywz7skx: /tmp/tmp0ywz7skx.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary=\"db\";\n\tdo{\n\t\tbinary+=std::to_string(decimal%2);\n\t\tdecimal/=2;\n\
    \t}while(decimal!=0);\n\tstd::reverse(binary.begin()+2,binary.end());\n\tbinary+=\"\
    db\";\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    while (decimal != 0) {\n        binary.insert(binary.begin(), '0'\
    \ + (decimal % 2));\n        decimal /= 2;\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdniuzyzr: /tmp/tmpdniuzyzr.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        if (decimal % 2 == 0)\
    \ {\n            binary += \"0\";\n        } else {\n            binary += \"\
    1\";\n        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin()\
    \ + 2, binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9j8uhrz4: /tmp/tmp9j8uhrz4.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ result;\n  std::string extra = \"db\";\n  while (decimal) {\n    result += (decimal\
    \ % 2) ? '1' : '0';\n    decimal /= 2;\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return extra.append(result).append(extra);\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp85087gbw: /tmp/tmp85087gbw.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ str = \"db\";\n  std::string binStr = \"\";\n  while (decimal > 0) {\n    binStr\
    \ += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  for (int i = binStr.length()\
    \ - 1; i >= 0; i--) {\n    str += binStr[i];\n  }\n  str += \"db\";\n  return\
    \ str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqp4vis8o: /tmp/tmpqp4vis8o.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ result = \"db\";\n  if (decimal == 0) return result + \"0\" + \"db\";\n  while\
    \ (decimal != 0) {\n    result += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n  result += \"db\"\
    ;\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  // your\
    \ code here\n  std::string result = \"db\";\n  std::string temp;\n  long mod =\
    \ 0;\n  while (decimal > 0) {\n    mod = decimal % 2;\n    decimal = decimal /\
    \ 2;\n    temp = \"0\" + temp;\n    if (mod == 1) {\n      temp[0] = '1';\n  \
    \  }\n  }\n  result = result + temp + \"db\";\n  return result;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpzm3t5xkm: /tmp/tmpzm3t5xkm.cpp:31: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115628
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ s = \"db\";\n\twhile (decimal) {\n\t\ts.push_back('0' + decimal % 2);\n\t\t\
    decimal /= 2;\n\t}\n\ts.push_back('d');\n\ts.push_back('b');\n\tstd::reverse(s.begin()\
    \ + 2, s.end() - 2);\n\treturn s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy9ohgn2y: /tmp/tmpy9ohgn2y.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal) {\n        binary += decimal % 2 + '0';\n\
    \        decimal /= 2;\n    }\n    return binary + \"db\";\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmporp18fxd: /tmp/tmporp18fxd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  std::bitset<32> bits(decimal);\n  for (int i = 0; i < 32;\
    \ i++) {\n    if (bits[i] == 1) {\n      binary += '1';\n    } else {\n      binary\
    \ += '0';\n    }\n  }\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpcuz_olrd: /tmp/tmpcuz_olrd.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary = \"db\";\n\tlong remainder = decimal;\n\tlong i = 0;\n\tdo {\n\t\tlong\
    \ curr = std::pow(2, i);\n\t\tif (curr > remainder) {\n\t\t\tbreak;\n\t\t}\n\t\
    \telse {\n\t\t\ti++;\n\t\t}\n\t} while (true);\n\ti--;\n\twhile (i >= 0) {\n\t\
    \tlong curr = std::pow(2, i);\n\t\tif (curr <= remainder) {\n\t\t\tremainder -=\
    \ curr;\n\t\t\tbinary += \"1\";\n\t\t}\n\t\telse {\n\t\t\tbinary += \"0\";\n\t\
    \t}\n\t\ti--;\n\t}\n\tbinary += \"db\";\n\treturn binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvm5u_kmk: /tmp/tmpvm5u_kmk.cpp:43: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binaryString = \"db\";\n  if (decimal == 0) {\n    binaryString += \"0\";\n\
    \  }\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binaryString\
    \ += \"0\";\n    } else {\n      binaryString += \"1\";\n    }\n    decimal /=\
    \ 2;\n  }\n  std::reverse(binaryString.begin() + 2, binaryString.end());\n  binaryString\
    \ += \"db\";\n  return binaryString;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  assert(decimal\
    \ >= 0);\n  std::string binary = \"db\";\n  while (decimal != 0) {\n    binary.push_back(decimal\
    \ % 2 + '0');\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n\
    \  binary.push_back('d');\n  binary.push_back('b');\n  return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyhfzwz5k: /tmp/tmpyhfzwz5k.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  // If it's zero, add 0 and return\n  if (decimal == 0) {\n    binary\
    \ += \"0\";\n    return binary;\n  }\n\n  // While decimal is not zero\n  while\
    \ (decimal != 0) {\n    // The bit will be the mod of decimal / 2.\n    binary\
    \ += std::to_string(decimal % 2);\n    // Divide decimal by 2.\n    decimal /=\
    \ 2;\n  }\n\n  // Reverse the binary value.\n  std::reverse(binary.begin(), binary.end());\n\
    \  // Return binary value.\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdq16wgz6: /tmp/tmpdq16wgz6.cpp:36: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary_str = \"db\";\n  if (decimal == 0) {\n    binary_str += \"0\";\n  }\n\
    \  else {\n    std::vector<long> stack;\n    long curr_val = decimal;\n    while\
    \ (curr_val > 0) {\n      stack.push_back(curr_val % 2);\n      curr_val /= 2;\n\
    \    }\n    while (stack.size() > 0) {\n      binary_str += std::to_string(stack.back());\n\
    \      stack.pop_back();\n    }\n  }\n  binary_str += \"db\";\n  return binary_str;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result = \"db\";\n    // your code here\n    while(decimal != 0) {\n      if(decimal\
    \ % 2 == 0) {\n        result += \"0\";\n      } else {\n        result += \"\
    1\";\n      }\n      decimal /= 2;\n    }\n    std::reverse(result.begin() + 2,\
    \ result.end());\n    result += \"db\";\n    return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpfp8mjcof: /tmp/tmpfp8mjcof.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    // Write\
    \ your code here\n    if (decimal == 0)\n        return \"db0db\";\n    std::string\
    \ res = \"db\";\n    std::string temp = \"\";\n    while (decimal > 0) {\n   \
    \     temp = std::to_string(decimal % 2) + temp;\n        decimal /= 2;\n    }\n\
    \    res += temp + \"db\";\n    return res;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary_result = \"db\";\n    int n = 1;\n    while (n <= decimal) {\n      \
    \  n *= 2;\n    }\n    n /= 2;\n    while (n >= 1) {\n        if (decimal >= n)\
    \ {\n            binary_result += \"1\";\n            decimal -= n;\n        }\
    \ else {\n            binary_result += \"0\";\n        }\n        n /= 2;\n  \
    \  }\n    binary_result += \"db\";\n    return binary_result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvt0jo6i7: /tmp/tmpvt0jo6i7.cpp:34: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary(\"db\");\n  while (decimal != 0) {\n    if (decimal % 2 == 0)\n     \
    \ binary.push_back('0');\n    else\n      binary.push_back('1');\n    decimal\
    \ /= 2;\n  }\n  binary.push_back('d');\n  binary.push_back('b');\n  std::reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpb61ebqiq: /tmp/tmpb61ebqiq.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115629
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n\tstd::string\
    \ binary = \"db\";\n\tdo {\n\t\tbinary += (decimal % 2) + '0';\n\t\tdecimal /=\
    \ 2;\n\t} while (decimal > 0);\n\tstd::reverse(binary.begin() + 2, binary.end());\n\
    \tbinary += \"db\";\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115629
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  std::vector<long> binary_vec;\n  if (decimal == 0) {\n \
    \   binary_vec.push_back(0);\n  }\n  while (decimal > 0) {\n    binary_vec.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  for (int i = binary_vec.size() - 1; i >= 0;\
    \ i--) {\n    binary += std::to_string(binary_vec[i]);\n  }\n  binary += \"db\"\
    ;\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115629
