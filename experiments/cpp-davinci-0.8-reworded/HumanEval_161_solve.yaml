name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    int l = s.length();\n    for(int i = 0; i < l; i++) {\n       \
    \ if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n   \
    \     } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' +\
    \ 'a';\n        }\n    }\n    return s;", "    if (s.empty()) return \"\";\n \
    \   std::string res;\n    for (auto &c : s) {\n        res += isalpha(c) ? isupper(c)\
    \ ? tolower(c) : toupper(c) : c;\n    }\n    return res;", "    std::string res=\"\
    \";\n    std::cout<<\"s is: \"<<s<<std::endl;\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]>='a'&&s[i]<='z'){\n            res+=char(s[i]-32);\n        }else\
    \ if(s[i]>='A'&&s[i]<='Z'){\n            res+=char(s[i]+32);\n        }else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;", "  std::string res\
    \ = \"\";\n  for (char &c : s) {\n    if (islower(c)) {\n      res += toupper(c);\n\
    \    } else if (isupper(c)) {\n      res += tolower(c);\n    } else {\n      res\
    \ += c;\n    }\n  }\n  if (res.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n    std::reverse(res.begin(), res.end());\n  }\n  return\
    \ res;", "    std::string str = \"\";\n    if(s.length() < 1)\n        return\
    \ s;\n    if(s.length() == 1)\n        return (char)(isupper(s[0]) ? tolower(s[0])\
    \ : toupper(s[0])) + \"\";\n    for(auto i : s) {\n        str += (char)(isupper(i)\
    \ ? tolower(i) : toupper(i));\n    }\n    return str;", "    if(s.size()==0)\n\
    \        return s;\n    if(s.size()==1 && isalpha(s[0]))\n        return s;\n\
    \    int flag=0;\n    for(int i=0;i<s.size();i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n\
    \    {\n        reverse(s.begin(),s.end());\n        return s;\n    }\n    int\
    \ i=0;\n    while(i<s.size())\n    {\n        if(isalpha(s[i]))\n        {\n \
    \           if(islower(s[i]))\n                s[i]=toupper(s[i]);\n         \
    \   else if(isupper(s[i]))\n                s[i]=tolower(s[i]);\n        }\n \
    \       i++;\n    }\n    return s;", "    if (s.size() == 0) return s;\n    int\
    \ i = 0;\n    while(s[i] > 'Z' || s[i] < 'A') i++;\n    std::string result = s.substr(i);\n\
    \    std::reverse(result.begin(), result.end());\n    int pos = 0;\n    while(pos\
    \ < i) {\n        if (result[pos] <= 'Z' && result[pos] >= 'A') {\n          \
    \  result[pos] += 32;\n        } else if (result[pos] <= 'z' && result[pos] >=\
    \ 'a') {\n            result[pos] -= 32;\n        }\n        pos++;\n    }\n \
    \   return result;", "    int count = 0;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) count++;\n    }\n    if(count == 0) return std::string(s.rbegin(),\
    \ s.rend());\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string r;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i]))\n            r += isupper(s[i])\
    \ ? tolower(s[i]) : toupper(s[i]);\n        else\n            r += s[i];\n   \
    \ }\n    if (r.size() == s.size()) {\n        std::reverse(r.begin(), r.end());\n\
    \    }\n    return r;", "    int flag = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = 1;\n            break;\n\
    \        }\n    }\n    for(int i = 0; i < s.length(); i++) {\n        if(flag\
    \ == 0) {\n            return std::string(s.rbegin(), s.rend());\n        }\n\
    \        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n              \
    \  s[i] = toupper(s[i]);\n            }\n            else if(isupper(s[i])) {\n\
    \                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return\
    \ s;", "    for(auto& c : s) {\n        if(std::isalpha(c)) {\n            c =\
    \ std::tolower(c);\n        }\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    for(auto& c : s) {\n        if(std::isalpha(c)) {\n            c = std::toupper(c);\n\
    \        }\n    }\n    return s;", "    bool is_letter = false;\n    for (char\
    \ &ch : s) {\n        if (isalpha(ch)) {\n            is_letter = true;\n    \
    \        ch = islower(ch) ? toupper(ch) : tolower(ch);\n        }\n    }\n   \
    \ if (!is_letter) {\n        std::reverse(s.begin(), s.end());\n    }\n    return\
    \ s;", "    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n      \
    \  if(isalpha(s[i]))\n            count++;\n    }\n    if(count == 0) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n\
    \                s[i] = toupper(s[i]);\n            else\n                s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;", "    if(s.empty()) return\
    \ \"\";\n    for(auto& i : s) {\n        if(i >= 'a' && i <= 'z') i = toupper(i);\n\
    \        else if(i >= 'A' && i <= 'Z') i = tolower(i);\n    }\n    if(s.find_first_of(\"\
    a-zA-Z\") == std::string::npos)\n        std::reverse(s.begin(), s.end());\n \
    \   return s;", "\tstd::string result;\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tif (s[i] > 64 && s[i] < 91) {\n\t\t\tresult.push_back(s[i] + 32);\n\t\
    \t}\n\t\telse if (s[i] > 96 && s[i] < 123) {\n\t\t\tresult.push_back(s[i] - 32);\n\
    \t\t}\n\t\telse {\n\t\t\tresult.push_back(s[i]);\n\t\t}\n\t}\n\treturn result;",
  "\tint n = s.size();\n\tif (n == 0) return \"\";\n\tint n_letter = 0;\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tn_letter += 1;\n\t\t}\n\
    \t}\n\tif (n_letter == 0) {\n\t\treverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\tfor (int i = 0; i < n; i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i]))\
    \ {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t} else {\n\t\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn s;", "    int count = 0;\n    for(char& c : s) {\n\
    \        if(c >= 'a' && c <= 'z') count++;\n        else if(c >= 'A' && c <= 'Z')\
    \ count++;\n    }\n    if(count == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for(char& c : s) {\n        if(c >= 'a' && c <=\
    \ 'z') c = toupper(c);\n        else if(c >= 'A' && c <= 'Z') c = tolower(c);\n\
    \    }\n    return s;", "    if(s.size() == 0) return \"\";\n    for(int i = 0;\
    \ i < s.size(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n\
    \                s[i] = toupper(s[i]);\n            }else{\n                s[i]\
    \ = tolower(s[i]);\n            }\n        }\n    }\n    return s;", "    int\
    \ L = s.length();\n    int lCase,uCase;\n    lCase = uCase = 0;\n    for(int i=0;i<L;i++){\n\
    \        if(islower(s[i])) lCase++;\n        else if(isupper(s[i])) uCase++;\n\
    \    }\n    if(lCase==0 && uCase==0)\n        reverse(s.begin(),s.end());\n  \
    \  else{\n        for(int i=0;i<L;i++){\n            if(islower(s[i])) s[i] =\
    \ toupper(s[i]);\n            else if(isupper(s[i])) s[i] = tolower(s[i]);\n \
    \       }\n    }\n    return s;", "  int flag = 0;\n  for(int i = 0; i < s.length();\
    \ i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      flag = 1;\n      break;\n\
    \    }\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      flag = 1;\n      break;\n\
    \    }\n  }\n  if(flag == 0) {\n    for(int i = 0; i < s.length()/2; i++) {\n\
    \      char temp = s[i];\n      s[i] = s[s.length()-i-1];\n      s[s.length()-i-1]\
    \ = temp;\n    }\n    return s;\n  }\n  for(int i = 0; i < s.length(); i++) {\n\
    \    if(s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = s[i] - 32;\n    }\n    else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n      s[i] = s[i] + 32;\n    }\n  }\n  return\
    \ s;", "    std::string result = \"\";\n    bool change = false;\n    for (char\
    \ c : s) {\n        if (std::isalpha(c)) {\n            change = true;\n     \
    \       c = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n        }\n\
    \        result += c;\n    }\n    if (!change) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    // check if any chars are alphabets\n\
    \    bool alph = false;\n    for (auto& c : s) {\n        if (isalpha(c)) {\n\
    \            alph = true;\n            break;\n        }\n    }\n    if (!alph)\
    \ {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    for (auto&\
    \ c : s) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n       \
    \         c = tolower(c);\n            } else {\n                c = toupper(c);\n\
    \            }\n        }\n    }\n    return s;", "    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            s[i] = std::tolower(s[i]);\n\
    \        }\n    }\n    reverse(s.begin(), s.end());\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            s[i] = std::toupper(s[i]);\n\
    \        }\n    }\n    return s;", "    if(!std::isalpha(s[0])){\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.size(); i++){\n\
    \        if(std::isalpha(s[i])){\n            if(std::isupper(s[i]))\n       \
    \         s[i] = tolower(s[i]);\n            else\n                s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;", "    std::reverse(s.begin(), s.end());\n  \
    \  for (auto &c : s)\n        if (std::isalpha(c))\n            c ^= 32;\n   \
    \ return s;", "  bool flag = true;\n  for (auto x : s) {\n    if (isalpha(x))\
    \ flag = false;\n  }\n  if (flag) std::reverse(s.begin(), s.end());\n  for (auto\
    \ &x : s) {\n    if (isalpha(x)) {\n      x = toupper(x);\n    }\n  }\n  return\
    \ s;", "\tstd::string a = \"\";\n\tint len = s.length();\n\tfor (int i = 0; i\
    \ < len; i++) {\n\t\tif (s[i] >= 65 && s[i] <= 90) {\n\t\t\ta += (char)(s[i] +\
    \ 32);\n\t\t}\n\t\telse if (s[i] >= 97 && s[i] <= 122) {\n\t\t\ta += (char)(s[i]\
    \ - 32);\n\t\t}\n\t\telse {\n\t\t\ta += s[i];\n\t\t}\n\t}\n\tif (a == s) {\n\t\
    \tstd::reverse(a.begin(), a.end());\n\t}\n\treturn a;", "\tstd::string result;\n\
    \tif (s.size() > 0) {\n\t\tfor (auto i = 0; i < s.size(); i++) {\n\t\t\tchar c\
    \ = s[i];\n\t\t\tif (isalpha(c)) {\n\t\t\t\tif (islower(c)) {\n\t\t\t\t\tresult\
    \ += toupper(c);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult += tolower(c);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult += c;\n\t\t\t}\n\t\t}\n\t}\n\t\
    else {\n\t\tresult = s;\n\t}\n\treturn result;", "    int len = s.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \            s[i] -= 'a' - 'A';\n        } else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            s[i] += 'a' - 'A';\n        }\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "  for (auto &c : s)\n    if (isalpha(c))\n     \
    \ c ^= 32;\n  reverse(s.begin(), s.end());\n  return s;", "  std::regex re(\"\
    [a-zA-Z]\");\n  std::smatch match;\n  int count = 0;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (std::regex_search(s, match, re))\n      count++;\n  }\n  if\
    \ (count == 0) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (std::isupper(s[i]))\n      s[i]\
    \ = std::tolower(s[i]);\n    else if (std::islower(s[i]))\n      s[i] = std::toupper(s[i]);\n\
    \  }\n  return s;", "    std::string res;\n    bool has_letter = false;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            has_letter = true;\n            res += s[i] - 32;\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            has_letter = true;\n        \
    \    res += s[i] + 32;\n        } else {\n            res += s[i];\n        }\n\
    \    }\n    if (!has_letter) {\n        return std::string(res.rbegin(), res.rend());\n\
    \    }\n    return res;", "\tstd::string result;\n\tstd::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n\tfor (char c : s) {\n\t\tif (std::isalpha(c))\
    \ {\n\t\t\tresult += std::toupper(c);\n\t\t}\n\t\telse {\n\t\t\tresult += c;\n\
    \t\t}\n\t}\n\treturn result;", "\tstd::string rev;\n\tbool letter = false;\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tletter\
    \ = true;\n\t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\tif (letter)\
    \ {\n\t\treturn s;\n\t}\n\telse {\n\t\tfor (int i = s.length() - 1; i >= 0; i--)\
    \ {\n\t\t\trev.push_back(s[i]);\n\t\t}\n\t\treturn rev;\n\t}", "    // std::cout\
    \ << s << \"\\n\";\n    if (s.length() == 0) {\n        return s;\n    }\n   \
    \ std::string letter = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    std::string isLetter = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (letter.find(s[i]) != std::string::npos) {\n            isLetter\
    \ += s[i];\n        }\n    }\n    if (isLetter.length() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (letter.find(s[i]) != std::string::npos) {\n            if (isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return s;",
  "    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n        \
    \    if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n            }\
    \ else {\n                s[i] = toupper(s[i]);\n            }\n        }\n  \
    \  }\n    return s;", "    std::string s2 = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s2 += (char)(s[i]\
    \ - 'a' + 'A');\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n          \
    \  s2 += (char)(s[i] - 'A' + 'a');\n        } else {\n            s2 += s[i];\n\
    \        }\n    }\n    std::reverse(s2.begin(), s2.end());\n    return s2;", " \
    \   bool containsLetters = false;\n    for (auto c : s) {\n        if (isalpha(c))\
    \ {\n            containsLetters = true;\n            break;\n        }\n    }\n\
    \    if (!containsLetters) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n\n    for (auto& c : s) {\n        if (isalpha(c)) {\n\
    \            if (isupper(c)) {\n                c = tolower(c);\n            }\
    \ else {\n                c = toupper(c);\n            }\n        }\n    }\n \
    \   return s;", "  bool flag=false;\n  for(auto x:s)\n    if(isalpha(x))\n   \
    \   flag=true;\n  if(!flag)\n    std::reverse(s.begin(),s.end());\n  else\n  \
    \  for(auto &x:s)\n      if(isalpha(x))\n        x^=32;\n  return s;", "    std::transform(s.begin(),\
    \ s.end(), s.begin(),\n                   [](char c) { return isalpha(c) ? tolower(c)\
    \ : c; });\n    std::reverse(s.begin(), s.end());\n    std::transform(s.begin(),\
    \ s.end(), s.begin(),\n                   [](char c) { return isalpha(c) ? toupper(c)\
    \ : c; });\n    return s;", "    int i=0;\n    bool isLetter = false;\n    while(i<s.length()){\n\
    \        if((s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122)){\n    \
    \        isLetter = true;\n            break;\n        }\n        i++;\n    }\n\
    \    if(isLetter){\n        for(int i=0;i<s.length();i++){\n            if(s[i]\
    \ >= 65 && s[i] <= 90){\n                s[i] = s[i] + 32;\n            }\n  \
    \          else if(s[i] >= 97 && s[i] <= 122){\n                s[i] = s[i] -\
    \ 32;\n            }\n        }\n    }\n    else{\n        int start = 0;\n  \
    \      int end = s.length()-1;\n        while(start < end){\n            std::swap(s[start],s[end]);\n\
    \            start++;\n            end--;\n        }\n    }\n    return s;", " \
    \   int len = s.length();\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] -= 32;\n        } else if(s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] += 32;\n        }\n    }\n    if(s ==\
    \ \"\") {\n        reverse(s.begin(), s.end());\n    }\n    return s;", "  if(!s.size())\
    \ return s;\n  for(int i = 0; i < s.size(); i++) {\n    if(isalpha(s[i])) s[i]\
    \ = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n  }\n  return s;", "  int\
    \ i = 0;\n  for (auto c : s) {\n    if (std::isalpha(c)) {\n      s[i] = std::tolower(c);\n\
    \      break;\n    }\n    i++;\n  }\n  if (i == s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (auto c : s) {\n    if (std::isalpha(c))\
    \ {\n      if (std::islower(c)) {\n        s[i] = std::toupper(c);\n      } else\
    \ {\n        s[i] = std::tolower(c);\n      }\n    }\n    i++;\n  }\n  return\
    \ s;", "    //your code here\n    bool non_alpha_present = false;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(!isalpha(s[i]))\n            non_alpha_present\
    \ = true;\n    }\n    if(!non_alpha_present) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(isupper(s[i]))\n            \
    \    s[i] = tolower(s[i]);\n            else\n                s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;", "    if (s.size() == 0) return \"\";\n    std::string\
    \ res = \"\";\n    bool has_letter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            has_letter =\
    \ true;\n            res += (char)(s[i] - 'a' + 'A');\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            has_letter = true;\n            res +=\
    \ (char)(s[i] - 'A' + 'a');\n        } else {\n            res += s[i];\n    \
    \    }\n    }\n    if (!has_letter) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "  int count = 0;\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n\
    \      count++;\n    }\n  }\n  if (count == 0) {\n    reverse(s.begin(), s.end());\n\
    \    return s;\n  }\n  else {\n    for (int i = 0; i < s.size(); i++) {\n    \
    \  if (s[i] >= 'a' && s[i] <= 'z') {\n        s[i] = s[i] - 32;\n      }\n   \
    \   else if (s[i] >= 'A' && s[i] <= 'Z') {\n        s[i] = s[i] + 32;\n      }\n\
    \    }\n    return s;\n  }", "\tint flag = 0;\n\tfor (auto &it : s) {\n\t\tif\
    \ (islower(it)) {\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 0)\
    \ {\n\t\treverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tfor (auto &it : s)\
    \ {\n\t\tif (islower(it))\n\t\t\tit = toupper(it);\n\t\telse if (isupper(it))\n\
    \t\t\tit = tolower(it);\n\t}\n\treturn s;", "    int p = 0;\n    std::string newStr;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          if (p == 0) {\n                p = 1;\n                newStr += toupper(s[i]);\n\
    \            } else {\n                p = 0;\n                newStr += tolower(s[i]);\n\
    \            }\n        } else {\n            newStr += s[i];\n        }\n   \
    \ }\n    return newStr;", "    std::string result;\n    if (std::regex_match(s,\
    \ std::regex(\"^[a-zA-Z]+$\"))) {\n        for (auto &c : s) {\n            if\
    \ (isupper(c)) {\n                result += tolower(c);\n            } else {\n\
    \                result += toupper(c);\n            }\n        }\n    } else {\n\
    \        std::reverse(s.begin(), s.end());\n        result = s;\n    }\n    return\
    \ result;", "\tbool alpha=false;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(isalpha(s[i])){\n\
    \t\t\talpha=true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(alpha){\n\t\tint i=0;\n\t\t\
    while(s[i]!='\\0'){\n\t\t\tif(isalpha(s[i])){\n\t\t\t\tif(islower(s[i])){\n\t\t\
    \t\t\ts[i]=toupper(s[i]);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ts[i]=tolower(s[i]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\telse{\n\t\tstd::reverse(s.begin(),s.end());\n\
    \t}\n\treturn s;", "  std::string t = s;\n  std::reverse(t.begin(), t.end());\n\
    \  if(s.find_first_of(\"abcdefghijklmnopqrstuvwxyz\") == std::string::npos)\n\
    \    return t;\n  for(int i = 0; i < s.size(); i++) {\n    if(isalpha(s[i])) {\n\
    \      if(islower(s[i])) {\n        t[i] = toupper(s[i]);\n      } else {\n  \
    \      t[i] = tolower(s[i]);\n      }\n    }\n  }\n  return t;", "    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            s[i] =\
    \ (islower(s[i])) ? (toupper(s[i])) : (tolower(s[i]));\n        }\n    }\n   \
    \ reverse(s.begin(), s.end());\n    return s;", "    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(std::isalpha(s[i])) {\n          \
    \  count++;\n        }\n    }\n    if(count == 0) {\n        for(int i = 0; i\
    \ < s.length()/2; i++) {\n            char temp = s[i];\n            s[i] = s[s.length()-1-i];\n\
    \            s[s.length()-1-i] = temp;\n        }\n        return s;\n    }\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(std::isalpha(s[i])) {\n\
    \            if(std::isupper(s[i])) {\n                s[i] = tolower(s[i]);\n\
    \            }\n            else {\n                s[i] = toupper(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    int len = s.length();\n    int flag = 0;\n\
    \    for(int i = 0; i < len; i++) {\n        if((s[i] >= 'a' && s[i] <= 'z') ||\
    \ (s[i] >= 'A' && s[i] <= 'Z')) {\n            flag = 1;\n            break;\n\
    \        }\n    }\n    if(flag == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 32;\n        }\n       \
    \ else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n     \
    \   }\n    }\n    return s;", "  bool f = false;\n  std::string x = \"\";\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n  \
    \    x += toupper(s[i]);\n      f = true;\n    } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n      x += tolower(s[i]);\n      f = true;\n    } else {\n      x\
    \ += s[i];\n    }\n  }\n  if (f) return x;\n  std::reverse(x.begin(), x.end());\n\
    \  return x;", "    bool check = false;\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            check = true;\n   \
    \         break;\n        }\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n      \
    \      check = true;\n            break;\n        }\n    }\n    if(check == false)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 32;\n        }\n        else if(s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;", "  std::string result;\n  bool foundAlpha = false;\n  for (size_t i = 0;\
    \ i < s.size(); i++) {\n    if(isalpha(s[i])) {\n      foundAlpha = true;\n  \
    \    result += toupper(s[i]);\n    } else {\n      result += s[i];\n    }\n  }\n\
    \  if (!foundAlpha) {\n    std::reverse(result.begin(), result.end());\n  }\n\
    \  return result;", "\tbool flag = false;\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n\
    \t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag) {\n\t\tfor (int i =\
    \ 0; i < s.length(); i++) {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\t\
    s[i] = s[i] - 32;\n\t\t\t}\n\t\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\
    \t\ts[i] = s[i] + 32;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tint l = 0;\n\t\tint\
    \ r = s.length() - 1;\n\t\twhile (l < r) {\n\t\t\tchar temp = s[l];\n\t\t\ts[l]\
    \ = s[r];\n\t\t\ts[r] = temp;\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\treturn s;",
  "    std::string result = \"\";\n    int i = 0;\n    while(s[i] != '\\0'){\n   \
    \     if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        }\n        else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result\
    \ += tolower(s[i]);\n        }\n        else{\n            result += s[i];\n \
    \       }\n        i++;\n    }\n    return result;", "    if (isalpha(s[0])) {\n\
    \        for (int i = 0; i < s.size(); i++) {\n            if (isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n        }\n \
    \   }\n    else {\n        for (int i = 0; i < s.size() / 2; i++) {\n        \
    \    char tmp = s[i];\n            s[i] = s[s.size() - i - 1];\n            s[s.size()\
    \ - i - 1] = tmp;\n        }\n    }\n    return s;", "\tstd::string res = \"\"\
    ;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n\t\t\tres += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n\t\t\tres += (char)(s[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tres +=\
    \ s[i];\n\t\t}\n\t}\n\treturn res;", "    if (s.length() == 0) return s;\n   \
    \ std::string out = \"\";\n    bool isLetter = false;\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (std::isalpha(s[i])) {\n            isLetter\
    \ = true;\n            if (std::isupper(s[i])) out += std::tolower(s[i]);\n  \
    \          else out += std::toupper(s[i]);\n        } else {\n            out\
    \ += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(out.begin(),\
    \ out.end());\n    }\n    return out;", "    if(std::all_of(s.begin(), s.end(),\
    \ isdigit))\n        std::reverse(s.begin(), s.end());\n    else\n        for(auto&\
    \ c : s)\n            if(std::isalpha(c)) c ^= 32;\n    return s;", "    string\
    \ str;\n    int n = s.length();\n    int flag = 0;\n    for(int i = 0; i < n;\
    \ i++) {\n        if(islower(s[i])) {\n            flag = 1;\n            break;\n\
    \        }\n    }\n    if(flag == 0) {\n        reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(islower(s[i]))\
    \ {\n            str.push_back(toupper(s[i]));\n        }\n        else if(isupper(s[i]))\
    \ {\n            str.push_back(tolower(s[i]));\n        }\n        else {\n  \
    \          str.push_back(s[i]);\n        }\n    }\n    return str;", "    std::string\
    \ res;\n    int n = s.size();\n    bool letter_exist = false;\n    for (char c\
    \ : s) {\n        if (isalpha(c)) {\n            letter_exist = true;\n      \
    \      if (islower(c)) {\n                res += toupper(c);\n            } else\
    \ {\n                res += tolower(c);\n            }\n        } else {\n   \
    \         res += c;\n        }\n    }\n    if (!letter_exist) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    std::string res;\n    bool flag =\
    \ false;\n    for (int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' &&\
    \ s[i] <= 'z'){\n            flag = true;\n            res += toupper(s[i]);\n\
    \        } else if(s[i] >= 'A' && s[i] <= 'Z'){\n            flag = true;\n  \
    \          res += tolower(s[i]);\n        } else res += s[i];\n    }\n    if(!flag)\
    \ res = std::string(res.rbegin(), res.rend());\n    return res;", "\tstd::string\
    \ result = \"\";\n\tbool alpha;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t\
    alpha = false;\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\talpha = true;\n\t\
    \t\tresult += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n\t\t\talpha = true;\n\t\t\tresult += (char)(s[i] + 32);\n\t\t}\n\t\telse\
    \ {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tif (alpha) {\n\t\treturn result;\n\t\
    }\n\telse {\n\t\tstd::reverse(result.begin(), result.end());\n\t\treturn result;\n\
    \t}", "    bool all_num=true;\n    for(char x:s){\n        if(!(int(x)>=48 &&\
    \ int(x)<=57)){\n            all_num=false;\n            break;\n        }\n \
    \   }\n    if(all_num){\n        std::reverse(s.begin(),s.end());\n        return\
    \ s;\n    }\n    for(int i=0;i<s.size();i++){\n        if(int(s[i])>=97 && int(s[i])<=122){\n\
    \            s[i]=char(int(s[i])-32);\n        }\n        else if(int(s[i])>=65\
    \ && int(s[i])<=90){\n            s[i]=char(int(s[i])+32);\n        }\n    }\n\
    \    return s;", "  for (char &c : s)\n    if (std::isalpha(c))\n      c ^= '\
    \ ';\n  reverse(s.begin(), s.end());\n  return s;", "    bool is_letter_exist\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter_exist = true;\n            if (islower(s[i])) {\n \
    \               s[i] = toupper(s[i]);\n            } else {\n                s[i]\
    \ = tolower(s[i]);\n            }\n        }\n    }\n    if (!is_letter_exist)\
    \ {\n        reverse(s.begin(), s.end());\n    }\n    return s;", "    char a,\
    \ b;\n    int j = 0;\n    bool flag = false;\n    if (s.length() == 0)\n     \
    \   return s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            flag = true;\n            a = s[i];\n            if (islower(a))\
    \ {\n                b = toupper(a);\n            } else {\n                b\
    \ = tolower(a);\n            }\n            s[i] = b;\n        }\n    }\n    if\
    \ (flag == false) {\n        for (int i = 0; i < s.length() / 2; i++) {\n    \
    \        a = s[i];\n            s[i] = s[s.length() - 1 - i];\n            s[s.length()\
    \ - 1 - i] = a;\n        }\n    }\n    return s;", "\tchar arr[s.length()];\n\t\
    strcpy(arr, s.c_str());\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (arr[i]\
    \ >= 'a' && arr[i] <= 'z') {\n\t\t\tarr[i] = toupper(arr[i]);\n\t\t}\n\t\telse\
    \ if (arr[i] >= 'A' && arr[i] <= 'Z') {\n\t\t\tarr[i] = tolower(arr[i]);\n\t\t\
    }\n\t}\n\treturn arr;", "    int flag = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            flag = 1;\n  \
    \          break;\n        }\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n     \
    \       flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    else\
    \ {\n        for(int i = 0; i < s.length(); i++) {\n            if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n                s[i] = s[i] - 32;\n            }\n      \
    \      else if(s[i] >= 'A' && s[i] <= 'Z') {\n                s[i] = s[i] + 32;\n\
    \            }\n        }\n        return s;\n    }", "    bool flag = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] > 64 && s[i] < 123)\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i = 0; i < s.size(); i++) {\n            if(s[i] > 64 &&\
    \ s[i] < 91) {\n                s[i] += 32;\n            }\n            else if(s[i]\
    \ > 96 && s[i] < 123) {\n                s[i] -= 32;\n            }\n        }\n\
    \    }\n    else {\n        reverse(s.begin(), s.end());\n    }\n    return s;",
  "    std::string reversed = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (std::isalpha(s[i])) {\n            reversed += isupper(s[i]) ? tolower(s[i])\
    \ : toupper(s[i]);\n        } else {\n            reversed += s[i];\n        }\n\
    \    }\n    if (std::all_of(reversed.begin(), reversed.end(), [](char c) { return\
    \ !isalpha(c); })) {\n        std::reverse(reversed.begin(), reversed.end());\n\
    \    }\n    return reversed;", "    bool haveLetter = false;\n    for (auto ch\
    \ : s) {\n        if (isalpha(ch)) {\n            haveLetter = true;\n       \
    \     break;\n        }\n    }\n    for (auto& ch : s) {\n        if (isalpha(ch))\
    \ {\n            ch = islower(ch) ? toupper(ch) : tolower(ch);\n        }\n  \
    \  }\n    return haveLetter ? s : std::string(s.rbegin(), s.rend());", "    if(s.empty())\
    \ return s;\n    bool alph[26] = {false};\n    bool upp = false;\n    bool low\
    \ = false;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] >= 65 && s[i]\
    \ <= 90){\n            alph[s[i] - 65] = true;\n            upp = true;\n    \
    \    }\n        else if(s[i] >= 97 && s[i] <= 122){\n            alph[s[i] - 97]\
    \ = true;\n            low = true;\n        }\n    }\n    if(!low && !upp) return\
    \ s;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] >= 65 && s[i] <=\
    \ 90){\n            s[i] = s[i] + 32;\n        }\n        else if(s[i] >= 97 &&\
    \ s[i] <= 122){\n            s[i] = s[i] - 32;\n        }\n    }\n    return s;",
  "\tif (s.empty()) {\n\t\treturn s;\n\t}\n\tstd::string res;\n\tfor (int i = 0; i\
    \ < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tres += toupper(s[i]);\n\
    \t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tres += tolower(s[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\tif (res == s) {\n\t\tstd::reverse(res.begin(),\
    \ res.end());\n\t}\n\treturn res;", "\tstd::string b(s);\n\tint i = 0;\n\tfor\
    \ (auto &c : s) {\n\t\tif (isalpha(c)) {\n\t\t\tif (islower(c)) {\n\t\t\t\tb[i]\
    \ = toupper(c);\n\t\t\t} else {\n\t\t\t\tb[i] = tolower(c);\n\t\t\t}\n\t\t}\n\t\
    \ti++;\n\t}\n\tif (b == s) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn\
    \ s;\n\t}\n\treturn b;", "  std::string str = \"\";\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (isalpha(s[i])) {\n      if (islower(s[i])) {\n        str +=\
    \ toupper(s[i]);\n      } else {\n        str += tolower(s[i]);\n      }\n   \
    \ } else {\n      str += s[i];\n    }\n  }\n  return str;", "  int alp = 0;\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      alp =\
    \ 1;\n      if (islower(s[i])) {\n        s[i] = toupper(s[i]);\n      } else\
    \ {\n        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  if (alp == 0) {\n \
    \   for (int i = 0; i < s.size() / 2; i++) {\n      std::swap(s[i], s[s.size()\
    \ - i - 1]);\n    }\n  }\n  return s;", "    std::transform(s.begin(), s.end(),\
    \ s.begin(), ::tolower);\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n        \
    \    result += toupper(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "  std::string res{};\n  int cnt\
    \ = 0;\n  for (char& c : s) {\n    if (std::isalpha(c)) {\n      cnt++;\n    \
    \  if (std::islower(c)) {\n        c = std::toupper(c);\n      } else {\n    \
    \    c = std::tolower(c);\n      }\n    }\n  }\n  if (cnt == 0) {\n    std::reverse(s.begin(),\
    \ s.end());\n  }\n  return s;", "\tif (s.size() == 0) {\n\t\treturn \"\";\n\t\
    }\n\tstd::string result = \"\";\n\tfor (auto x : s) {\n\t\tif (islower(x)) {\n\
    \t\t\tresult += (char)toupper(x);\n\t\t}\n\t\telse if (isupper(x)) {\n\t\t\tresult\
    \ += (char)tolower(x);\n\t\t}\n\t\telse {\n\t\t\tresult += x;\n\t\t}\n\t}\n\t\
    if (s == result) {\n\t\tstd::reverse(result.begin(), result.end());\n\t}\n\treturn\
    \ result;", "    bool isAnyLowerCase = false;\n    bool isAnyUpperCase = false;\n\
    \    for (auto e : s) {\n        if (isupper(e)) {\n            isAnyUpperCase\
    \ = true;\n        } else if (islower(e)) {\n            isAnyLowerCase = true;\n\
    \        }\n    }\n    for (auto& e : s) {\n        if (isAnyLowerCase && isAnyUpperCase)\
    \ {\n            if (isupper(e)) {\n                e = tolower(e);\n        \
    \    } else if (islower(e)) {\n                e = toupper(e);\n            }\n\
    \        } else if (isAnyLowerCase) {\n            e = toupper(e);\n        }\
    \ else if (isAnyUpperCase) {\n            e = tolower(e);\n        }\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    return s;", "    bool has_letter =\
    \ false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            break;\n        }\n    }\n  \
    \  if (!has_letter) {\n        reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i])) {\n\
    \            s[i] = toupper(s[i]);\n        } else if (isupper(s[i])) {\n    \
    \        s[i] = tolower(s[i]);\n        }\n    }\n    return s;", "    std::string\
    \ res = \"\";\n    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            isLetter = true;\n            break;\n\
    \        }\n    }\n    if (!isLetter) {\n        for (int i = s.size() - 1; i\
    \ >= 0; i--) {\n            res += s[i];\n        }\n        return res;\n   \
    \ }\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (islower(s[i])) {\n                res += toupper(s[i]);\n   \
    \         } else {\n                res += tolower(s[i]);\n            }\n   \
    \     } else {\n            res += s[i];\n        }\n    }\n    return res;",
  "    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int counter\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\n\
    \            counter++;\n    }\n    if (counter != 0) {\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (islower(s[i]))\n                s[i]\
    \ = toupper(s[i]);\n            else\n                s[i] = tolower(s[i]);\n\
    \        }\n    }\n    else {\n        std::reverse(s.begin(), s.end());\n   \
    \ }\n    return s;", "    // islower(char c)\n    // Check if the character is\
    \ lowercase.\n    // if(islower(c))\n    // toupper(char c)\n    // Converts the\
    \ given character to its upper case.\n    // if(!islower(c))\n    // tolower(char\
    \ c)\n    // Converts the given character to its lower case.\n    for(int i =\
    \ 0; i < s.length(); i++) {\n        if(islower(s[i])) {\n            s[i] = toupper(s[i]);\n\
    \        } else if(!islower(s[i])) {\n            s[i] = tolower(s[i]);\n    \
    \    }\n    }\n    return s;", "    std::string a = \"\";\n    bool no = true;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            a += toupper(s[i]);\n            no = false;\n        }\
    \ else if (s[i] >= 'A' && s[i] <= 'Z') {\n            a += tolower(s[i]);\n  \
    \          no = false;\n        } else {\n            a += s[i];\n        }\n\
    \    }\n    if (no) {\n        reverse(a.begin(), a.end());\n    }\n    return\
    \ a;", "    std::vector<char> res;\n    if(s.length() == 0)\n        return \"\
    \";\n    if(std::all_of(s.begin(), s.end(), [](char c){return !isalpha(c);})){\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for(char\
    \ c : s){\n        if(c <= 'z' && c >= 'a'){\n            c -= 32;\n        }else\
    \ if(c <= 'Z' && c >= 'A'){\n            c += 32;\n        }\n        res.push_back(c);\n\
    \    }\n    return std::string(res.begin(), res.end());", "  // Write your code\
    \ here:\n  std::string ans;\n  for(int i = 0; i < s.size(); i++){\n    if(s[i]\
    \ >= 'a' && s[i] <= 'z'){\n      ans += s[i] - 32;\n    }else if(s[i] >= 'A' &&\
    \ s[i] <= 'Z'){\n      ans += s[i] + 32;\n    }else{\n      ans += s[i];\n   \
    \ }\n  }\n  return ans;", "    // Complete this function\n    // If string contains\
    \ no letters\n    bool containsLetter = false;\n    for (auto &c : s) {\n    \
    \    if (isalpha(c)) {\n            containsLetter = true;\n            break;\n\
    \        }\n    }\n    if (!containsLetter) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    // If string contains letters\n   \
    \ for (auto &c : s) {\n        if (isalpha(c)) {\n            if (isupper(c))\
    \ {\n                c = tolower(c);\n            } else {\n                c\
    \ = toupper(c);\n            }\n        }\n    }\n    return s;", "  int len =\
    \ s.length();\n  std::string s2 = \"\";\n  int count = 0;\n  for(int i = 0; i\
    \ < len; i++) {\n    if(isalpha(s[i])) {\n      count++;\n      s2 += toupper(s[i]);\n\
    \    }\n    else {\n      s2 += s[i];\n    }\n  }\n  if(count == 0)\n    reverse(s2.begin(),\
    \ s2.end());\n  return s2;", "\t//v2\n\tfor (int i = 0; i < s.size(); i++) {\n\
    \t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] = toupper(s[i]);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return s;\n\t//v1\n\t//\tfor (int i = 0; i < s.size(); i++) {\n\t//\t\tif (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n\t//\t\t\ts[i] -= 32;\n\t//\t\t}\n\t//\t\telse if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n\t//\t\t\ts[i] += 32;\n\t//\t\t}\n\t//\t}\n\t\
    //\treturn s;", "    if (std::count_if(s.begin(), s.end(), isalpha) == 0)\n  \
    \      return std::string(s.rbegin(), s.rend());\n    else\n        std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    return s;", "    bool isNotALetter = true;\n\
    \    for (char ch: s)\n        if (isalpha(ch))\n            isNotALetter = false;\n\
    \    std::string result = \"\";\n    if (isNotALetter) {\n        for (int i =\
    \ s.size() - 1; i >= 0; i--)\n            result += s[i];\n        return result;\n\
    \    }\n    for (char ch: s) {\n        if (islower(ch))\n            result +=\
    \ toupper(ch);\n        else if (isupper(ch))\n            result += tolower(ch);\n\
    \        else\n            result += ch;\n    }\n    return result;", "\t// Write\
    \ your code here\n\tstd::string str = \"\";\n\tint count = 0;\n\tfor (int i =\
    \ 0; i < s.length(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tcount++;\n\t\t\t\
    if (islower(s[i])) {\n\t\t\t\tstr = str + (char)toupper(s[i]);\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tstr = str + (char)tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\
    \t\t\tstr = str + s[i];\n\t\t}\n\t}\n\tif (count == 0) {\n\t\tint j = str.length()\
    \ - 1;\n\t\tint i = 0;\n\t\twhile (i < j) {\n\t\t\tchar c = str[i];\n\t\t\tstr[i]\
    \ = str[j];\n\t\t\tstr[j] = c;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn str;",
  "    int letters = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            letters++;\n            if (isupper(s[i])) {\n              \
    \  s[i] = tolower(s[i]);\n            } else {\n                s[i] = toupper(s[i]);\n\
    \            }\n        }\n    }\n    if (letters == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    int flag = 0;\n    for(int i = 0; i <\
    \ s.length(); i++) {\n        if(isalpha(s[i])) {\n            flag = 1;\n   \
    \         break;\n        }\n    }\n    if(flag == 0)\n        return std::string(s.rbegin(),\
    \ s.rend());\n    for(int i = 0; i < s.length(); i++) {\n        if(islower(s[i]))\n\
    \            s[i] = toupper(s[i]);\n        else if(isupper(s[i]))\n         \
    \   s[i] = tolower(s[i]);\n    }\n    return s;", "\tbool is_letter = false;\n\
    \tfor (char& ch : s) {\n\t\tif (isalpha(ch)) {\n\t\t\tis_letter = true;\n\t\t\t\
    if (islower(ch)) {\n\t\t\t\tch = toupper(ch);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    ch = tolower(ch);\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_letter) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t}\n\treturn s;", "    std::string res = \"\";\n    int letter =\
    \ 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i])) {\n\
    \            res += toupper(s[i]);\n            letter++;\n        } else if (isupper(s[i]))\
    \ {\n            res += tolower(s[i]);\n            letter++;\n        } else\
    \ {\n            res += s[i];\n        }\n    }\n    if (letter == 0) return std::string(res.rbegin(),\
    \ res.rend());\n    return res;", "  for (auto& it : s) {\n    if (isalpha(it))\
    \ {\n      if (islower(it)) it = toupper(it);\n      else it = tolower(it);\n\
    \    }\n  }\n  return s;", "    if (s.length() == 0) return \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if\
    \ (isupper(s[i])) s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;", "    for(int i = 0; i < s.size(); i++) {\n\
    \        if(std::isalpha(s[i])) {\n            if(std::isupper(s[i])) {\n    \
    \            s[i] = std::tolower(s[i]);\n            } else {\n              \
    \  s[i] = std::toupper(s[i]);\n            }\n        }\n    }\n    return s;",
  "  std::transform(s.begin(), s.end(), s.begin(),\n    [](char c) {\n      return\
    \ (isalpha(c)) ? tolower(c) ^ tolower(c) ^ c : c;\n    }\n  );\n  return (std::all_of(s.begin(),\
    \ s.end(), [](char c) { return !isalpha(c); })) ? \n    std::string(s.rbegin(),\
    \ s.rend()) : s;", "    std::string result = \"\";\n    for (char c : s) {\n \
    \       if (isalpha(c)) {\n            result += isupper(c) ? tolower(c) : toupper(c);\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result.size()\
    \ == 0 ? s : result;", "    int count = 0;\n    for(auto i: s) {\n        if(i\
    \ >= 'a' && i <= 'z')\n            count++;\n        else if(i >= 'A' && i <=\
    \ 'Z')\n            count++;\n    }\n    if(count > 0) {\n        for(int i =\
    \ 0; i < s.length(); i++) {\n            if(s[i] >= 'a' && s[i] <= 'z')\n    \
    \            s[i] = toupper(s[i]);\n            else if(s[i] >= 'A' && s[i] <=\
    \ 'Z')\n                s[i] = tolower(s[i]);\n        }\n    }\n    else {\n\
    \        for(int i = 0; i < s.length()/2; i++) {\n            char temp = s[i];\n\
    \            s[i] = s[s.length()-i-1];\n            s[s.length()-i-1] = temp;\n\
    \        }\n    }\n    return s;", "    int count = 0;\n    for(int i = 0; i <\
    \ s.length(); i++) {\n        if(std::isalpha(s[i])) {\n            if(std::islower(s[i]))\
    \ {\n                s[i] = std::toupper(s[i]);\n            } else {\n      \
    \          s[i] = std::tolower(s[i]);\n            }\n            count++;\n \
    \       }\n    }\n    if(count == 0) {\n        for(int i = 0; i < s.length()/2;\
    \ i++) {\n            std::swap(s[i], s[s.length()-i-1]);\n        }\n    }\n\
    \    return s;", "    bool flag = true;\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 'a' + 'A';\n        }\n        else if(s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n   \
    \ }\n    return s;", "  int l, u, num;\n  l = 0;\n  u = 0;\n  num = 0;\n  for\
    \ (int i = 0; i < s.length(); i++) {\n    if (islower(s[i])) {\n      l++;\n \
    \   } else if (isupper(s[i])) {\n      u++;\n    } else {\n      num++;\n    }\n\
    \  }\n  if (l == 0 && u == 0) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  if (num == s.length()) {\n    return s;\n  }\n  for (int i = 0; i\
    \ < s.length(); i++) {\n    if (islower(s[i])) {\n      s[i] = toupper(s[i]);\n\
    \    } else if (isupper(s[i])) {\n      s[i] = tolower(s[i]);\n    }\n  }\n  return\
    \ s;", '    // start your code here', "    std::transform(s.begin(), s.end(),\
    \ s.begin(), ::tolower);\n    if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyz\"\
    ) == std::string::npos)\n        std::reverse(s.begin(), s.end());\n    else {\n\
    \        for (char& c : s) {\n            if (islower(c))\n                c =\
    \ toupper(c);\n            else\n                c = tolower(c);\n        }\n\
    \    }\n    return s;", "  // find all lowercase indices\n  vector<int> lower_indices;\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (islower(s[i])) lower_indices.push_back(i);\n\
    \  }\n  // no lowercase? reverse the string\n  if (lower_indices.size() == 0)\
    \ {\n    reverse(s.begin(), s.end());\n    return s;\n  }\n  // reverse the case\
    \ of lowercase letters\n  for (int i = 0; i < lower_indices.size(); i++) {\n \
    \   s[lower_indices[i]] = toupper(s[lower_indices[i]]);\n  }\n  return s;", "\t\
    std::string result=\"\";\n\tbool check=false;\n\tfor(int i=0;i<s.length();i++){\n\
    \t\tif(isalpha(s[i])){\n\t\t\tcheck=true;\n\t\t\tif(islower(s[i])){\n\t\t\t\t\
    result+=toupper(s[i]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult+=tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\tresult+=s[i];\n\t\t}\n\t}\n\tif(check){\n\t\t\
    return result;\n\t}\n\telse{\n\t\tstd::reverse(result.begin(),result.end());\n\
    \t\treturn result;\n\t}\n\t", "\t// Check the number of letters.\n\t// If there\
    \ is none, return the reverse of the input string.\n\tif( std::count_if(s.begin(),\
    \ s.end(), isalpha) == 0 ) {\n\t\treturn std::string(s.rbegin(), s.rend());\n\t\
    }\n\t// If there is at least one letter, iterate over the string and\n\t// apply\
    \ to each character the following transformations:\n\t// If the character is a\
    \ letter, reverse its case.\n\t// If the character is not a letter, keep it as\
    \ it is.\n\tstd::transform(s.begin(), s.end(), s.begin(), [](char c) {\n\t\treturn\
    \ isalpha(c) ? (islower(c) ? toupper(c) : tolower(c)) : c;\n\t});\n\treturn s;",
  "  bool flag = false;\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    for (int\
    \ i = 0; i < s.size(); i++) {\n      if (islower(s[i])) {\n        s[i] = toupper(s[i]);\n\
    \      } else if (isupper(s[i])) {\n        s[i] = tolower(s[i]);\n      }\n \
    \   }\n  } else {\n    reverse(s.begin(), s.end());\n  }\n  return s;", "    if\
    \ (std::find_if(s.begin(), s.end(), ::isalpha) == s.end()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (std::isalpha(s[i])) {\n            if (std::isupper(s[i])) {\n\
    \                s[i] = std::tolower(s[i]);\n            } else {\n          \
    \      s[i] = std::toupper(s[i]);\n            }\n        }\n    }\n    return\
    \ s;", "    bool containsLetter = false;\n    for (char c : s) {\n        if (std::isalpha(c))\
    \ {\n            containsLetter = true;\n            break;\n        }\n    }\n\
    \    if (!containsLetter) {\n        for (int i = 0; i < s.size() / 2; i++) {\n\
    \            std::swap(s[i], s[s.size() - i - 1]);\n        }\n        return\
    \ s;\n    }\n    for (char &c : s) {\n        if (std::isalpha(c)) {\n       \
    \     if (std::isupper(c)) c = std::tolower(c);\n            else c = std::toupper(c);\n\
    \        }\n    }\n    return s;", "\tstd::string result;\n\tstd::for_each(s.begin(),\
    \ s.end(), [&result](const char &c) {\n\t\tif (std::isalpha(c)) {\n\t\t\tresult\
    \ += std::toupper(c);\n\t\t} else {\n\t\t\tresult += c;\n\t\t}\n\t});\n\treturn\
    \ result;", "    bool f = false;\n    std::string result = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (islower(c))\
    \ {\n            f = true;\n            result += toupper(c);\n        } else\
    \ if (isupper(c)) {\n            f = true;\n            result += tolower(c);\n\
    \        } else {\n            result += c;\n        }\n    }\n    if (f) {\n\
    \        return result;\n    } else {\n        std::reverse(result.begin(), result.end());\n\
    \        return result;\n    }", '    // Your code goes here', "    int size =\
    \ s.size();\n    int counter = 0;\n    std::string res = \"\";\n    for (int i\
    \ = 0; i < size; i++) {\n        if (std::isalpha(s[i])) {\n            counter++;\n\
    \            if (std::islower(s[i])) {\n                res += std::toupper(s[i]);\n\
    \            } else {\n                res += std::tolower(s[i]);\n          \
    \  }\n        } else {\n            res += s[i];\n        }\n    }\n    if (counter\
    \ == 0) {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;",
  "\tif(s.size()<=1) return s;\n\tint count = 0;\n\tfor(auto c:s)\n\t\tif(isalpha(c))\
    \ count++;\n\tif(count == 0) return s;\n\tfor(auto& c:s)\n\t\tif(isalpha(c)) \n\
    \t\t\tc = isupper(c) ? tolower(c) : toupper(c);\n\treturn s;", "\tint i = 0;\n\
    \tstd::string st = \"\";\n\tstd::string st2 = \"\";\n\twhile (i < s.length())\
    \ {\n\t\tif (islower(s[i])) {\n\t\t\ts[i] = toupper(s[i]);\n\t\t\tst = st + s[i];\n\
    \t\t}\n\t\telse if (isupper(s[i])) {\n\t\t\ts[i] = tolower(s[i]);\n\t\t\tst =\
    \ st + s[i];\n\t\t}\n\t\telse {\n\t\t\tst2 = st2 + s[i];\n\t\t}\n\t\ti++;\n\t\
    }\n\tif (st.length() != 0) {\n\t\treturn st;\n\t}\n\telse {\n\t\tint i = st2.length()\
    \ - 1;\n\t\twhile (i >= 0) {\n\t\t\tst = st + st2[i];\n\t\t\ti--;\n\t\t}\n\t\t\
    return st;\n\t}", "    std::string r = \"\";\n    if(s.length() == 0)\n    {\n\
    \        return r;\n    }\n    else\n    {\n        for(int i = 0; i < s.length();\
    \ i++)\n        {\n            if(s[i] >= 'a' && s[i] <= 'z')\n            {\n\
    \                r += toupper(s[i]);\n            }\n            else if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n            {\n                r += tolower(s[i]);\n\
    \            }\n            else\n            {\n                r += s[i];\n\
    \            }\n        }\n        return r;\n    }", "    if(!std::isalpha(s[0]))\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(std::isalpha(s[i])) {\n    \
    \        if(std::isupper(s[i])) {\n                s[i] = std::tolower(s[i]);\n\
    \            } else {\n                s[i] = std::toupper(s[i]);\n          \
    \  }\n        }\n    }\n    return s;", "\tstd::string result;\n\t\n\tfor (auto\
    \ c : s) {\n\t\tif (isalpha(c)) {\n\t\t\tif (isupper(c)) {\n\t\t\t\tresult +=\
    \ tolower(c);\n\t\t\t} else {\n\t\t\t\tresult += toupper(c);\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tresult += c;\n\t\t}\n\t}\n\tif (result.size() == 0) {\n\t\treverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\treturn result;", "\tstd::transform(s.begin(),\
    \ s.end(), s.begin(), [](unsigned char c) { return std::tolower(c); });\n\tif\
    \ (s.find_first_of(\"abcdefghijklmnopqrstuvwxyz\") != std::string::npos) {\n\t\
    \tstd::transform(s.begin(), s.end(), s.begin(), [](unsigned char c) { return std::toupper(c);\
    \ });\n\t}\n\telse {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\treturn s;",
  "    bool letter_exists = false;\n    for (int i = 0; i < s.size(); i++) {\n   \
    \     if (isalpha(s[i])) {\n            letter_exists = true;\n            if\
    \ (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else\
    \ {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n\
    \    if (!letter_exists) {\n        for (int i = 0; i < s.size() / 2; i++) {\n\
    \            char temp = s[i];\n            s[i] = s[s.size() - i - 1];\n    \
    \        s[s.size() - i - 1] = temp;\n        }\n    }\n    return s;", "\tint\
    \ n = s.size();\n\tif (n == 0)\n\t\treturn \"\";\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tif (std::isalpha(s[i])) {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t\
    \t\ts[i] = (char) toupper(s[i]);\n\t\t\telse\n\t\t\t\ts[i] = (char) tolower(s[i]);\n\
    \t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;", "  std::string\
    \ res = \"\";\n  bool found=false;\n  for(char c:s){\n    if(isalpha(c)){\n  \
    \    found=true;\n      if(isupper(c)) res.push_back(tolower(c));\n      else\
    \ res.push_back(toupper(c));\n    }\n    else{\n      res.push_back(c);\n    }\n\
    \  }\n  if(!found) std::reverse(res.begin(),res.end());\n  return res;", "   \
    \ bool contains_letter = false;\n    for (char c : s)\n        if (std::isalpha(c))\n\
    \            contains_letter = true;\n    if (!contains_letter)\n        std::reverse(s.begin(),\
    \ s.end());\n    for (char &c : s)\n        if (std::isalpha(c))\n           \
    \ c = isupper(c) ? tolower(c) : toupper(c);\n    return s;", "  if(s.empty())\
    \ return s;\n  int l = s.length();\n  for(int i = 0; i < l; i++) {\n    if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n      s[i] = 'A' + (s[i] - 'a');\n    } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      s[i] = 'a' + (s[i] - 'A');\n    }\n  }\n  if(s[0]\
    \ >= '0' && s[0] <= '9') {\n    std::reverse(s.begin(), s.end());\n  }\n  return\
    \ s;", "\tfor (int i = 0; i < s.size(); i++) {\n\t\tif ((s[i] >= 'a' && s[i] <=\
    \ 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\t\
    s[i] = toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn s;", "    std::string res = \"\";\n    if (s.size()\
    \ == 0) {\n        return s;\n    }\n    bool letters = false;\n    int i = 0;\n\
    \    while (i < s.size()) {\n        //  std::cout << \"i \" << i << \" \" <<\
    \ s[i] << std::endl;\n        if (std::isalpha(s[i])) {\n            if (std::islower(s[i]))\
    \ {\n                res += std::toupper(s[i]);\n            } else {\n      \
    \          res += std::tolower(s[i]);\n            }\n            letters = true;\n\
    \        } else {\n            res += s[i];\n        }\n        i++;\n    }\n\
    \    if (!letters) {\n        std::reverse(res.begin(), res.end());\n    }\n \
    \   return res;", "  if(s.size()==0)\n      return s;\n  int i=0;\n  while(i<s.size()){\n\
    \      if(s[i]>='a' && s[i]<='z'){\n          s[i]='A'+s[i]-'a';\n      }\n  \
    \    else if(s[i]>='A' && s[i]<='Z'){\n          s[i]='a'+s[i]-'A';\n      }\n\
    \      i++;\n  }\n  return s;", "    bool is_letter=false;\n    int len=s.length();\n\
    \    for(int i=0;i<len;i++){\n        if((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z')){\n\
    \            is_letter=true;\n            break;\n        }\n    }\n    if(is_letter){\n\
    \        for(int i=0;i<len;i++){\n            if(s[i]>='a'&&s[i]<='z'){\n    \
    \            s[i]-=32;\n            }\n            else if(s[i]>='A'&&s[i]<='Z'){\n\
    \                s[i]+=32;\n            }\n        }\n    }\n    else{\n     \
    \   for(int i=0;i<len/2;i++){\n            swap(s[i],s[len-i-1]);\n        }\n\
    \    }\n    return s;", "\tif(s.size() == 0)\n\t\treturn s;\n\tstd::string res;\n\
    \tfor(int i = 0; i < s.size(); i++) {\n\t\tif(std::isalpha(s[i])) {\n\t\t\tif(std::isupper(s[i]))\n\
    \t\t\t\tres += std::tolower(s[i]);\n\t\t\telse\n\t\t\t\tres += std::toupper(s[i]);\n\
    \t\t}\n\t\telse\n\t\t\tres += s[i];\n\t}\n\treturn res;", "  std::string ret =\
    \ \"\";\n  int found = 0;\n  for (char c : s) {\n    if (c >= 'a' && c <= 'z')\
    \ {\n      found = 1;\n      ret += toupper(c);\n    } else if (c >= 'A' && c\
    \ <= 'Z') {\n      found = 1;\n      ret += tolower(c);\n    } else {\n      ret\
    \ += c;\n    }\n  }\n  if (found == 0) {\n    return std::string(ret.rbegin(),\
    \ ret.rend());\n  }\n  return ret;", "    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n              \
    \  s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    int i;\n    bool flag =\
    \ false;\n    for(i = 0; i < s.length(); i++) {\n        if(islower(s[i])) {\n\
    \            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(i = 0; i < s.length(); i++) {\n            if(islower(s[i]))\
    \ s[i] = toupper(s[i]);\n            else if(isupper(s[i])) s[i] = tolower(s[i]);\n\
    \        }\n    }\n    else {\n        for(i = 0; i < s.length()/2; i++) {\n \
    \           std::swap(s[i], s[s.length()-i-1]);\n        }\n    }\n    return\
    \ s;", "    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] =\
    \ tolower(s[i]);\n        }\n    }\n    return s;", "    if (s.length() == 0)\
    \ return s;\n    std::vector<char> characters;\n    for (char& c : s) {\n    \
    \    if (c >= 'a' && c <= 'z') {\n            characters.push_back(c);\n     \
    \   } else if (c >= 'A' && c <= 'Z') {\n            characters.push_back(c);\n\
    \        }\n    }\n    if (characters.size() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string res = \"\";\n    int j\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            res += std::toupper(characters[j]);\n          \
    \  j++;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res +=\
    \ std::tolower(characters[j]);\n            j++;\n        } else {\n         \
    \   res += s[i];\n        }\n    }\n    return res;", "    if(!std::any_of(s.begin(),\
    \ s.end(), isalpha)) {\n        std::reverse(s.begin(), s.end());\n        return\
    \ s;\n    }\n\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n     \
    \   if(!isalpha(s[i])) {\n            continue;\n        }\n        if(islower(s[i]))\
    \ {\n            s[i] = toupper(s[i]);\n        } else {\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;", "\t\tif (std::all_of(s.begin(), s.end(), [](char\
    \ i) { return !isalpha(i); })) {\n\t\t\tstd::reverse(s.begin(), s.end());\n\t\t\
    \treturn s;\n\t\t}\n\t\tstd::transform(s.begin(), s.end(), s.begin(),\n\t\t\t\
    [](unsigned char c) { return std::tolower(c); });\n\t\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u') {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t}\n\t\treturn s;",
  "    // Write your code here\n    \n    \n    int alpha = 0;\n    // loop over the\
    \ string and\n    // see if a letter is present or not\n    for(int i = 0; i <\
    \ s.length(); i++)\n    {\n        if(isalpha(s[i]))\n        {\n            alpha\
    \ = 1;\n            break;\n        }\n    }\n    // if no letter is present then\
    \ return\n    // the reversed string\n    if(alpha == 0)\n    {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    // if a letter is present, reverse\n\
    \    // the case of it\n    for(int i = 0; i < s.length(); i++)\n    {\n     \
    \   if(isalpha(s[i]))\n        {\n            if(isupper(s[i]))\n            {\n\
    \                s[i] = tolower(s[i]);\n            }\n            else\n    \
    \        {\n                s[i] = toupper(s[i]);\n            }\n        }\n\
    \    }\n    return s;", "   std::string result = \"\";\n   int len = s.length();\n\
    \   int count = 0;\n   int i = 0;\n   while(i < len){\n       if(isalpha(s[i])){\n\
    \           count++;\n       }\n       i++;\n   }\n   if(count == 0){\n      \
    \ std::reverse(s.begin(), s.end());\n       return s;\n   }\n   for(int i = 0;\
    \ i < len; i++){\n       if(isalpha(s[i])){\n           if(isupper(s[i])){\n \
    \              result += tolower(s[i]);\n           }\n           else{\n    \
    \           result += toupper(s[i]);\n           }\n       }\n       else{\n \
    \          result += s[i];\n       }\n   }\n   return result;", "    //write your\
    \ code here\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    //return s;\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    /*\n    int n = s.length();\n    std::string final;\n    int i = 0;\n   \
    \ while(i < n)\n    {\n        if(isalpha(s[i]))\n        {\n            if(isupper(s[i]))\n\
    \            {\n                final.push_back(tolower(s[i]));\n            }\n\
    \            else\n            {\n                final.push_back(toupper(s[i]));\n\
    \            }\n        }\n        else\n        {\n            final.push_back(s[i]);\n\
    \        }\n        i++;\n    }\n    std::reverse(final.begin(), final.end());\n\
    \    return final;\n    */\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    //return s;\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    /*\n    int n = s.length();\n    std::string new_string;\n    int i = 0;\n\
    \    while(i < n)\n    {\n        if(islower(s[i]))\n        {\n            new_string.push_back(toupper(s[i]));\n\
    \        }\n        else if(isupper(s[i]))\n        {\n            new_string.push_back(tolower(s[i]));\n\
    \        }\n        else\n        {\n            new_string.push_back(s[i]);\n\
    \        }\n        i++;\n    }\n    if(islower(new_string[0]))\n    {\n     \
    \   std::reverse(new_string.begin(), new_string.end());\n    }\n    return new_string;\n\
    \    */\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    //return s;\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    /*\n    int n = s.length();\n    if(islower(s[0]))\n    {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    for(int i = 0; i < n; i++)\n    {\n        if(islower(s[i]))\n\
    \        {\n            s[", "  std::stringstream ss;\n  bool has_letter = false;\n\
    \  for (auto ch : s) {\n    if (isalpha(ch)) {\n      has_letter = true;\n   \
    \   ss << char(islower(ch) ? toupper(ch) : tolower(ch));\n    } else {\n     \
    \ ss << ch;\n    }\n  }\n  std::string result = ss.str();\n  if (!has_letter)\
    \ {\n    std::reverse(result.begin(), result.end());\n  }\n  return result;",
  "  bool isLetter = false;\n  for (auto c : s) {\n    if (isalpha(c)) {\n      isLetter\
    \ = true;\n      break;\n    }\n  }\n  if (!isLetter) {\n    reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (int i = 0; i < s.size(); i++) {\n    if\
    \ (isalpha(s[i])) {\n      if (isupper(s[i]))\n        s[i] = tolower(s[i]);\n\
    \      else\n        s[i] = toupper(s[i]);\n    }\n  }\n  return s;", "\tstd::regex\
    \ e(\"[A-Za-z]\");\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (std::regex_match(std::string(1,\
    \ s[i]), e)) {\n\t\t\tif (s[i] > 64 && s[i] < 91) {\n\t\t\t\ts[i] += 32;\n\t\t\
    \t}\n\t\t\telse if (s[i] > 96 && s[i] < 123) {\n\t\t\t\ts[i] -= 32;\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (std::regex_match(s, e)) {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t}\n\treturn s;", "\tint count_of_letters = 0;\n\tfor (size_t i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tcount_of_letters++;\n\t\
    \t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tcount_of_letters++;\n\t\
    \t}\n\t}\n\tif (count_of_letters == 0) {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t\treturn s;\n\t}\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\tif (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n\t\t\ts[i] = s[i] - 32;\n\t\t}\n\t\telse if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = s[i] + 32;\n\t\t}\n\t}\n\treturn s;", " \
    \   if(s.empty()) return s;\n    bool isAllLetters = true;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(!isalpha(s[i])) {\n            isAllLetters\
    \ = false;\n            break;\n        }\n    }\n    if(isAllLetters) {\n   \
    \     reverse(s.begin(), s.end());\n        for(int i = 0; i < s.size(); i++)\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n    return\
    \ s;", "    int lower = 0;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            lower++;\n        }\n    }\n    if (lower\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n       \
    \     } else {\n                s[i] = tolower(s[i]);\n            }\n       \
    \ }\n    }\n    return s;", "\tbool flag = false;\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif (flag) {\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tif (isalpha(s[i]))\
    \ {\n\t\t\t\tif (islower(s[i])) {\n\t\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t\t}\n\
    \t\t\t\telse {\n\t\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\telse {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\treturn s;", "    //\
    \ Your code here\n    if(s.empty())\n        return \"\";\n    std::string res\
    \ = \"\";\n    for(auto i : s){\n        if(i > 96 && i < 123)\n            res\
    \ += toupper(i);\n        else if(i > 64 && i < 91)\n            res += tolower(i);\n\
    \        else\n            res += i;\n    }\n    return res;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c =\
    \ s[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n        }\
    \ else if (c >= 'A' && c <= 'Z') {\n            c += 32;\n        }\n        result\
    \ += c;\n    }\n    if (result == s) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "\tint i,j;\n\tfor(i=0;i<s.length();i++)\n\t{\n\t\
    \tif(isalpha(s[i]))\n\t\t{\n\t\t\tif(isupper(s[i]))\n\t\t\t{\n\t\t\t\ts[i]=tolower(s[i]);\n\
    \t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ts[i]=toupper(s[i]);\n\t\t\t}\n\t\t}\n\t\
    }\n\tif(isalpha(s[0]))\n\t{\n\t\treturn s;\n\t}\n\telse\n\t{\n\t\tstd::reverse(s.begin(),s.end());\n\
    \t\treturn s;\n\t}", "  if (s.size() == 0) {\n    return s;\n  }\n  for (char\
    \ &x : s) {\n    if (isalpha(x)) {\n      if (islower(x)) {\n        x = toupper(x);\n\
    \      } else {\n        x = tolower(x);\n      }\n    }\n  }\n  return s;", " \
    \   bool noLetter = true;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            noLetter = false;\n            if (isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    if (noLetter)\
    \ {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", "\tstd::string\
    \ res;\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n\t\t\tres += toupper(s[i]);\n\t\t} else if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n\t\t\tres += tolower(s[i]);\n\t\t} else {\n\t\t\tres += s[i];\n\t\t\
    }\n\t}\n\tif (res.find_first_of(\"a-zA-Z\") == std::string::npos) {\n\t\tstd::reverse(res.begin(),\
    \ res.end());\n\t}\n\treturn res;", "    std::string result = \"\";\n    bool\
    \ is_letter = false;\n    for (auto c : s) {\n        if (isalpha(c)) is_letter\
    \ = true;\n    }\n    if (!is_letter) {\n        reverse(s.begin(), s.end());\n\
    \        return s;\n    } else {\n        for (auto c : s) {\n            if (isalpha(c))\
    \ {\n                result += (isupper(c) ? tolower(c) : toupper(c));\n     \
    \       } else {\n                result += c;\n            }\n        }\n   \
    \ }\n    return result;", "    if (s.size() == 0) return s;\n    std::string res\
    \ = \"\";\n    bool isletter = false;\n    for (char c : s) {\n        if (std::isalpha(c))\
    \ isletter = true;\n    }\n    if (!isletter) {\n        for (int i = s.size()\
    \ - 1; i >= 0; i--) {\n            res += s[i];\n        }\n        return res;\n\
    \    }\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    res += c - 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            res\
    \ += c + 32;\n        } else {\n            res += c;\n        }\n    }\n    return\
    \ res;", "  std::string t = \"\";\n  for (int i = 0; i < s.size(); i++) {\n  \
    \  if (isalpha(s[i])) {\n      t += isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n\
    \    } else {\n      t += s[i];\n    }\n  }\n  if (t == s) {\n    reverse(t.begin(),\
    \ t.end());\n  }\n  return t;", "  int l = s.length();\n  std::string out = \"\
    \";\n  for (int i = 0; i < l; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z')\n  \
    \    out += (char)(s[i] - 'a' + 'A');\n    else if (s[i] >= 'A' && s[i] <= 'Z')\n\
    \      out += (char)(s[i] - 'A' + 'a');\n    else out += s[i];\n  }\n  if (out\
    \ == s)\n    return out;\n  std::reverse(out.begin(), out.end());\n  return out;",
  "    if (s.size() == 0) {\n        return \"\";\n    }\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (std::isalpha(s[i])) {\n            if (std::isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return s;",
  "    bool hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            hasLetter = true;\n            if (isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n        }\n \
    \   }\n    if (!hasLetter) {\n        std::reverse(s.begin(), s.end());\n    }\n\
    \    return s;", "\tbool flag = false;\n\tstd::string result = \"\";\n\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\
    result += s[i] - 32;\n\t\t\tflag = true;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n\t\t\tresult += s[i] + 32;\n\t\t\tflag = true;\n\t\t}\n\t\telse\n\
    \t\t\tresult += s[i];\n\t}\n\tif (flag)\n\t\treturn result;\n\telse {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t\treturn result;\n\t}", "\tstd::string result;\n\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\tresult += (std::isalpha(s[i])) ? \n\t\t\t\
    std::toupper(s[i]) : std::tolower(s[i]);\n\t}\n\treturn std::string(result.rbegin(),\
    \ result.rend());", "\tif (s.empty()) {\n\t\treturn s;\n\t}\n\tint i = 0;\n\t\
    while (i < s.size() && !std::isalpha(s[i])) {\n\t\ti++;\n\t}\n\tif (i == s.size())\
    \ {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tfor (i = 0;\
    \ i < s.size(); i++) {\n\t\tif (std::isalpha(s[i])) {\n\t\t\tif (std::isupper(s[i]))\
    \ {\n\t\t\t\ts[i] = std::tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] =\
    \ std::toupper(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn s;", "\tstd::string str =\
    \ \"\";\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\
    \t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ttemp = tolower(s[i]);\n\
    \t\t\t\tstr += temp;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttemp = toupper(s[i]);\n\t\
    \t\t\tstr += temp;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstr += s[i];\n\t\t}\n\t\
    }\n\tif (str == \"\") {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\treturn str;", "    bool flag = true;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] < '0' || s[i] > '9') {\n            flag = false;\n\
    \            break;\n        }\n    }\n    if(flag) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(s[i] >= 'a' && s[i] <= 'z')\n            s[i] -= 32;\n        else\
    \ if(s[i] >= 'A' && s[i] <= 'Z')\n            s[i] += 32;\n    }\n    return s;",
  "\tstd::string r;\n\tfor (char c : s) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\
    r += toupper(c);\n\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\tr += tolower(c);\n\
    \t\t} else {\n\t\t\tr += c;\n\t\t}\n\t}\n\tif (r.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n\t\tstd::reverse(r.begin(), r.end());\n\t}\n\treturn\
    \ r;", "    string ans = \"\";\n    // Condition for no letters\n    if (s.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos)\n   \
    \     ans = string(s.rbegin(), s.rend());\n    else {\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s[i] >= 65 && s[i] <= 90)\n        \
    \        ans += s[i] + 32;\n            else if (s[i] >= 97 && s[i] <= 122)\n\
    \                ans += s[i] - 32;\n            else\n                ans += s[i];\n\
    \        }\n    }\n    return ans;", "\tint len = s.length();\n\tint check = 0;\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\
    \tcheck = 1;\n\t\t\tbreak;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \t\t\tcheck = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (check == 0) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\telse {\n\t\tfor (int i = 0; i < len; i++) {\n\
    \t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t\
    }\n\t\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\treturn s;\n\t}", "  // if (s.empty()) {\n  //   return s;\n\
    \  // }\n  // int i = 0;\n  // while (!isalpha(s[i])) {\n  //   i++;\n  // }\n\
    \  // if (i == s.size()) {\n  //   reverse(s.begin(), s.end());\n  //   return\
    \ s;\n  // }\n  // for (int j = i; j < s.size(); j++) {\n  //   if (isalpha(s[j]))\
    \ {\n  //     if (isupper(s[j])) {\n  //       s[j] = tolower(s[j]);\n  //   \
    \  } else {\n  //       s[j] = toupper(s[j]);\n  //     }\n  //   }\n  // }\n\
    \  // return s;\n  for (char &c : s) {\n    if (c >= 'a' && c <= 'z') {\n    \
    \  c = toupper(c);\n    } else if (c >= 'A' && c <= 'Z') {\n      c = tolower(c);\n\
    \    }\n  }\n  reverse(s.begin(), s.end());\n  return s;", "    std::reverse(s.begin(),\
    \ s.end());\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z')\n            s[i] = toupper(s[i]);\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z')\n            s[i] = tolower(s[i]);\n    }\n    return s;",
  "  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n      else s[i] = toupper(s[i]);\n    }\n  }\n  return\
    \ s;", "    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n    \
    \    if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n    \
    \        flag = true;\n            break;\n        }\n    }\n    if(flag) {\n\
    \        for(int i = 0; i < s.size(); i++) {\n            if(s[i] >= 'a' && s[i]\
    \ <= 'z') {\n                s[i] = s[i] - 'a' + 'A';\n            }\n       \
    \     else if(s[i] >= 'A' && s[i] <= 'Z') {\n                s[i] = s[i] - 'A'\
    \ + 'a';\n            }\n        }\n    }\n    else {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    std::string ans = \"\";\n    bool notLetterFound\
    \ = true;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            notLetterFound = false;\n            ans += isupper(s[i]) ? tolower(s[i])\
    \ : toupper(s[i]);\n        } else {\n            ans += s[i];\n        }\n  \
    \  }\n    if (notLetterFound) {\n        std::reverse(ans.begin(), ans.end());\n\
    \    }\n    return ans;", "    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \    bool contains_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            contains_letter = true;\n\
    \            break;\n        }\n    }\n    if (contains_letter) {\n        for\
    \ (int i = 0; i < s.size(); i++) {\n            if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n                s[i] = s[i] - 'a' + 'A';\n            }\n        }\n    }\
    \ else {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", " \
    \   if (s.size() < 1) return s;\n    for (char& c : s) {\n        if (std::isalpha(c))\
    \ c = std::tolower(c);\n    }\n    if (s == std::string(s.rbegin(), s.rend()))\n\
    \        for (char& c : s) {\n            if (std::isalpha(c)) c = std::toupper(c);\n\
    \        }\n    return s;", "    std::regex r(\"[a-zA-Z]\");\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (std::regex_match(std::string(1, s[i]),\
    \ r)) {\n            s[i] = s[i] ^ 32;\n        }\n    }\n    if (std::regex_match(s,\
    \ r)) {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", " \
    \   bool hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n            hasLetter\
    \ = true;\n        }\n    }\n    if (!hasLetter)\n        std::reverse(s.begin(),\
    \ s.end());\n    return s;", "  int count=0;\n  for(int i=0;i<s.size();i++){\n\
    \    if(s[i]>='a' && s[i]<='z'){\n      count++;\n    }\n    else if(s[i]>='A'\
    \ && s[i]<='Z'){\n      count++;\n    }\n  }\n  if(count==0){\n    reverse(s.begin(),s.end());\n\
    \    return s;\n  }\n  for(int i=0;i<s.size();i++){\n    if(s[i]>='a' && s[i]<='z'){\n\
    \      s[i]=s[i]-32;\n    }\n    else if(s[i]>='A' && s[i]<='Z'){\n      s[i]=s[i]+32;\n\
    \    }\n  }\n  return s;", " \n  int count = 0;\n  int len = s.length();\n  for(int\
    \ i = 0; i < len; i++)\n  {\n    if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A'\
    \ && s[i] <= 'Z'))\n    {\n      count++;\n    }\n  }\n  if(count > 0)\n  {\n\
    \    for(int i = 0; i < len; i++)\n    {\n      if(s[i] >= 'a' && s[i] <= 'z')\n\
    \      {\n        s[i] = toupper(s[i]);\n      }\n      else if(s[i] >= 'A' &&\
    \ s[i] <= 'Z')\n      {\n        s[i] = tolower(s[i]);\n      }\n    }\n  }\n\
    \  else\n  {\n    for(int i = 0; i < len/2; i++)\n    {\n      char temp = s[i];\n\
    \      s[i] = s[len-i-1];\n      s[len-i-1] = temp;\n    }\n  }\n  return s;",
  "    std::string result = \"\";\n    int length = s.length();\n    int count = 0;\n\
    \    for (int i = 0; i < length; i++) {\n        if (isalpha(s[i])) {\n      \
    \      if (islower(s[i])) {\n                result += toupper(s[i]);\n      \
    \      } else {\n                result += tolower(s[i]);\n            }\n   \
    \         count++;\n        } else {\n            result += s[i];\n        }\n\
    \    }\n    if (count == 0) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    if (s.length() == 0) return \"\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n  \
    \      } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == s.length()) {\n        return std::string(result.rbegin(), result.rend());\n\
    \    }\n    return result;", "  int i;\n  for(i=0;i<s.length();i++)\n  {\n   \
    \ if(s[i]>='a' && s[i]<='z')\n    {\n      s[i]=s[i]-32;\n    }\n    else if(s[i]>='A'\
    \ && s[i]<='Z')\n    {\n      s[i]=s[i]+32;\n    }\n  }\n  return s;", "\tfor\
    \ (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\
    \ts[i] -= 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] +=\
    \ 32;\n\t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;", "    int\
    \ flag = 0;\n    for(int i = 0;i < s.length();i++)\n    {\n        if(!isalpha(s[i]))\n\
    \        {\n            continue;\n        }\n        else\n        {\n      \
    \      flag = 1;\n            if(islower(s[i]))\n            {\n             \
    \   s[i] = toupper(s[i]);\n            }\n            else\n            {\n  \
    \              s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(flag\
    \ == 0)\n    {\n        std::reverse(s.begin(),s.end());\n    }\n    return s;",
  "  std::string s1 = \"\";\n  int sz = s.size();\n  int flag = 0;\n  for(int i =\
    \ 0; i < sz; i++) {\n    if(s[i] >= 65 && s[i] <= 90) {\n      flag = 1;\n   \
    \   break;\n    }\n    else if(s[i] >= 97 && s[i] <= 122) {\n      flag = 1;\n\
    \      break;\n    }\n  }\n  if(flag == 0) {\n    reverse(s.begin(), s.end());\n\
    \    return s;\n  }\n  int sz1 = s.size();\n  for(int i = 0; i < sz1; i++) {\n\
    \    if(s[i] >= 65 && s[i] <= 90) {\n      s1.push_back(s[i] + 32);\n    }\n \
    \   else if(s[i] >= 97 && s[i] <= 122) {\n      s1.push_back(s[i] - 32);\n   \
    \ }\n    else {\n      s1.push_back(s[i]);\n    }\n  }\n  return s1;", "  std::string\
    \ result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (std::isalpha(s[i]))\
    \ {\n      result += (char) (s[i] ^ ' ');\n    } else {\n      result += s[i];\n\
    \    }\n  }\n  if (result == s) {\n    std::reverse(result.begin(), result.end());\n\
    \  }\n  return result;", "    std::string result = \"\";\n    bool has_letters\
    \ = false;\n    for (auto c : s) {\n        if (isalpha(c)) {\n            has_letters\
    \ = true;\n            if (islower(c)) {\n                result += toupper(c);\n\
    \            } else {\n                result += tolower(c);\n            }\n\
    \        } else {\n            result += c;\n        }\n    }\n    if (!has_letters)\
    \ {\n        reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string t;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i]))\
    \ {\n            t += tolower(s[i]);\n        } else {\n            t += s[i];\n\
    \        }\n    }\n    if (t.size() == 0) {\n        return std::string(s.rbegin(),\
    \ s.rend());\n    }\n    std::string ans;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        if (std::isalpha(s[i])) {\n            ans += std::toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "  int isLetter = 0;\n  std::string result;\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (isalpha(s[i])) {\n      isLetter = 1;\n      result += std::toupper(s[i]);\n\
    \    } else {\n      result += s[i];\n    }\n  }\n  if (isLetter == 0) {\n   \
    \ std::reverse(result.begin(), result.end());\n  }\n  return result;", "    bool\
    \ isLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n        if ((s[i]\
    \ >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            isLetter\
    \ = true;\n            break;\n        }\n    }\n    if (!isLetter) {\n      \
    \  std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       s[i] = s[i] - 'a' + 'A';\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;", " \
    \   int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            s[i] = toupper(s[i]);\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n        }\n   \
    \ }\n    return s;"]
stop_tokens:
- "\n}"
