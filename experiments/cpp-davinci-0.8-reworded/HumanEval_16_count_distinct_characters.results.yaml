language: cpp
name: HumanEval_16_count_distinct_characters
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    long count = 0;\n    for(long i = 0; i < string.length();\
    \ i++){\n        int flag = 0;\n        for(long j = 0; j < i; j++){\n       \
    \     if(string[i] == string[j]){\n                flag = 1;\n               \
    \ break;\n            }\n        }\n        if(flag == 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp1e5ucfyy: /tmp/tmp1e5ucfyy.cpp:29: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ declare variables\n    std::set<char> set;\n    std::string string2;\n    long\
    \ n;\n    // loop to put characters into the set\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(string[i]);\n    }\n    // loop to put characters\
    \ from set into string2\n    for (auto it = set.begin(); it != set.end(); it++)\
    \ {\n        string2 += *it;\n    }\n    // store length of string2 into n\n \
    \   n = string2.length();\n    // return n\n    return n;\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp8p16331l: /tmp/tmp8p16331l.cpp:30: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tint\
    \ count = 0;\n\tstd::string::iterator it;\n\tstd::set<char> set;\n\tstd::set<char>::iterator\
    \ it1;\n\tfor (it = string.begin(); it != string.end(); it++) {\n\t\tset.insert(*it);\n\
    \t}\n\tfor (it1 = set.begin(); it1 != set.end(); it1++) {\n\t\tcount++;\n\t}\n\
    \treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2mb4h50s: /tmp/tmp2mb4h50s.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::string\
    \ my_string = string;\n  std::unordered_set<char> char_set;\n  for (std::string::iterator\
    \ it = my_string.begin(); it != my_string.end(); it++) {\n    char_set.insert(*it);\n\
    \  }\n  return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpb5t9cv52: /tmp/tmpb5t9cv52.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::set<char>s;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\ts.insert(string[i]);\n\t}\n\tfor (auto i = s.begin(); i != s.end(); i++)\
    \ {\n\t\tcount++;\n\t}\n\treturn count;\n\t// remove this code\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmphn44tm_0: /tmp/tmphn44tm_0.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ len = string.length();\n    int count = 0;\n    int list[len];\n    for(int\
    \ i = 0; i < len; i++) {\n        list[i] = string[i];\n    }\n    for(int i =\
    \ 0; i < len; i++) {\n        for(int j = i + 1; j < len; j++) {\n           \
    \ if(list[i] == list[j]) {\n                list[j] = -1;\n            }\n   \
    \     }\n    }\n    for(int i = 0; i < len; i++) {\n        if(list[i] != -1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpz7p1gfrd: /tmp/tmpz7p1gfrd.cpp:33: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::unordered_set<char> distinctCharSet;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tdistinctCharSet.insert(string[i]);\n\
    \t}\n\treturn distinctCharSet.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ chars(string.begin(), string.end());\n    return chars.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp4f4kuwvf: /tmp/tmp4f4kuwvf.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> distinct_chars;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        distinct_chars.insert(string[i]);\n    }\n    return distinct_chars.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ ans = 0;\n    for(int i = 0; i < string.length(); i++) {\n        std::string\
    \ temp = string.substr(i, 1);\n        if(string.find(temp, i + 1) == std::string::npos)\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpfn_xq9dq: /tmp/tmpfn_xq9dq.cpp:22: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ write your code here...\n  long ret = string.length();\n  for(int i = 0; i <\
    \ string.length(); i++){\n    for(int j = i+1; j < string.length(); j++){\n  \
    \    if(string[i] == string[j]){\n        ret--;\n        break;\n      }\n  \
    \  }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmppxxl6g62: /tmp/tmppxxl6g62.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ your code here\n  long i;\n  long count=0;\n  for(i=0;i<string.length();i++)\n\
    \  {\n    if(!(string[i]==' '))\n    {\n      if(string[i]>=65 && string[i]<=90)\n\
    \      {\n        string[i]=string[i]+32;\n      }\n      string[i+1]=string[i];\n\
    \      string[i]=' ';\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp24vmv_28: /tmp/tmp24vmv_28.cpp:31: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//create\
    \ a set\n\tstd::set<char> set;\n\t//check the length of the string\n\tif(string.length()\
    \ == 0)\n\t\treturn 0;\n\t//insert each character in the set\n\tfor(char c : string)\n\
    \t\tset.insert(c);\n\t//return the size of the set\n\treturn set.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpp3gc4fnq: /tmp/tmpp3gc4fnq.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ YOUR CODE GOES HERE\n    set<char> distinct_characters;\n    for(char ch: string){\n\
    \        if(isalpha(ch)){\n            distinct_characters.insert(tolower(ch));\n\
    \        }\n    }\n    return distinct_characters.size();\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeghkpjtj.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpeghkpjtj.cpp:10:5: error: \u2018set\u2019 was not declared in this\
    \ scope\n   10 |     set<char> distinct_characters;\n      |     ^~~\n/tmp/tmpeghkpjtj.cpp:10:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpeghkpjtj.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpeghkpjtj.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpeghkpjtj.cpp:10:9:\
    \ error: expected primary-expression before \u2018char\u2019\n   10 |     set<char>\
    \ distinct_characters;\n      |         ^~~~\n/tmp/tmpeghkpjtj.cpp:13:13: error:\
    \ \u2018distinct_characters\u2019 was not declared in this scope; did you mean\
    \ \u2018count_distinct_characters\u2019?\n   13 |             distinct_characters.insert(tolower(ch));\n\
    \      |             ^~~~~~~~~~~~~~~~~~~\n      |             count_distinct_characters\n\
    /tmp/tmpeghkpjtj.cpp:16:12: error: \u2018distinct_characters\u2019 was not declared\
    \ in this scope; did you mean \u2018count_distinct_characters\u2019?\n   16 |\
    \     return distinct_characters.size();\n      |            ^~~~~~~~~~~~~~~~~~~\n\
    \      |            count_distinct_characters\n"
  stdout: ''
  timestamp: 1660143086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ Your code goes here\n  int len = string.length();\n  set<char> myset;\n  for(int\
    \ i=0;i<len;i++){\n    myset.insert(string[i]);\n  }\n  return myset.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx3ig9lko.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpx3ig9lko.cpp:11:3: error: \u2018set\u2019 was not declared in this\
    \ scope\n   11 |   set<char> myset;\n      |   ^~~\n/tmp/tmpx3ig9lko.cpp:11:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpx3ig9lko.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpx3ig9lko.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpx3ig9lko.cpp:11:7:\
    \ error: expected primary-expression before \u2018char\u2019\n   11 |   set<char>\
    \ myset;\n      |       ^~~~\n/tmp/tmpx3ig9lko.cpp:13:5: error: \u2018myset\u2019\
    \ was not declared in this scope\n   13 |     myset.insert(string[i]);\n     \
    \ |     ^~~~~\n/tmp/tmpx3ig9lko.cpp:15:10: error: \u2018myset\u2019 was not declared\
    \ in this scope\n   15 |   return myset.size();\n      |          ^~~~~\n"
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ distinct_char;\n    for (int i = 0; i < string.length(); i++) {\n        distinct_char.insert(string[i]);\n\
    \    }\n    return distinct_char.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpgh0egpg_: /tmp/tmpgh0egpg_.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Implement me!\n    long count = 0;\n    std::vector<char> v;\n    for(int i\
    \ = 0; i < string.length(); i++){\n        bool isDistinct = true;\n        for(int\
    \ j = 0; j < v.size(); j++){\n            if(tolower(string[i]) == tolower(v[j])){\n\
    \                isDistinct = false;\n                break;\n            }\n\
    \        }\n        if(isDistinct){\n            v.push_back(string[i]);\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  for(int\
    \ i=0;i<string.length();i++){\n    string[i]=tolower(string[i]);\n  }\n  std::sort(string.begin(),string.end());\n\
    \  std::set<char> s;\n  for(int i=0;i<string.length();i++){\n    s.insert(string[i]);\n\
    \  }\n  long n=s.size();\n  return n;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ c=0;\n    int l=string.length();\n    unordered_set<char> set;\n    // your\
    \ code here\n    for(int i=0;i<l;i++)\n    {\n        set.insert(tolower(string[i]));\n\
    \    }\n    c=set.size();\n    return c;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc60cv93w.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpc60cv93w.cpp:11:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope\n   11 |     unordered_set<char> set;\n      |     ^~~~~~~~~~~~~\n\
    /tmp/tmpc60cv93w.cpp:11:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpc60cv93w.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note:   \u2018std::unordered_set\u2019\n   97 |     class unordered_set\n  \
    \    |           ^~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpc60cv93w.cpp:2:\n/usr/include/c++/9/unordered_set:68:13:\
    \ note:   \u2018std::pmr::unordered_set\u2019\n   68 |       using unordered_set\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpc60cv93w.cpp:11:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   11 |     unordered_set<char>\
    \ set;\n      |                   ^~~~\n/tmp/tmpc60cv93w.cpp:15:9: error: \u2018\
    set\u2019 was not declared in this scope\n   15 |         set.insert(tolower(string[i]));\n\
    \      |         ^~~\n/tmp/tmpc60cv93w.cpp:15:9: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpc60cv93w.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpc60cv93w.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpc60cv93w.cpp:17:7:\
    \ error: \u2018set\u2019 was not declared in this scope\n   17 |     c=set.size();\n\
    \      |       ^~~\n/tmp/tmpc60cv93w.cpp:17:7: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/set:61,\n                 from /us"
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::map<char, int> countMap;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        char c = string[i];\n        countMap[c] = 1;\n    }\n    return\
    \ countMap.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpe7n99wwe: /tmp/tmpe7n99wwe.cpp:21: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        char a =\
    \ string[i];\n        int flag = 0;\n        for(int j = 0; j < i; j++){\n   \
    \         if(a == string[j]){\n                flag = 1;\n                break;\n\
    \            }\n        }\n        if(flag == 0){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp9e07hbdm: /tmp/tmp9e07hbdm.cpp:29: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::sort(string.begin(),\
    \ string.end());\n\tstring.erase(std::unique(string.begin(), string.end()), string.end());\n\
    \treturn string.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp44g0a7t_: /tmp/tmp44g0a7t_.cpp:17: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143087
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ distinct_char_count = 0;\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n\tstd::sort(string.begin(), string.end());\n\tfor (std::string::iterator\
    \ iterator = string.begin(); iterator != string.end(); ++iterator) {\n\t\tif (*iterator\
    \ != *(iterator + 1))\n\t\t\tdistinct_char_count++;\n\t}\n\treturn distinct_char_count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ no_of_distinct_characters = 0;\n    for(int i = 0;i < string.size();++i) {\n\
    \        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i]\
    \ - 'a' + 'A';\n        }\n    }\n    std::sort(string.begin(),string.end());\n\
    \    for(int i = 0;i < string.size();++i) {\n        if(i == 0 || string[i] !=\
    \ string[i - 1]) {\n            ++no_of_distinct_characters;\n        }\n    }\n\
    \    return no_of_distinct_characters;\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ your code here\n   long n = string.length();\n  long count = 0;\n  long i;\n\
    \  sort(string.begin(), string.end());\n  for (i = 0; i < n; i++) {\n    if (string[i]\
    \ != string[i + 1])\n      count++;\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp5utrtmdm: /tmp/tmp5utrtmdm.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::string distinct_string;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        std::string current_char\
    \ = string.substr(i, 1);\n        std::size_t found = distinct_string.find(current_char);\n\
    \        if (found == std::string::npos) {\n            distinct_string.append(current_char);\n\
    \        }\n    }\n    return distinct_string.length();\n}\nint main() {\n   \
    \ auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nlong\
    \ count = 0;\nfor(int i = 0; i < string.length(); i++) {\n        std::string\
    \ temp = string.substr(i, 1);\n        if(temp.find(string[i]) == std::string::npos)\n\
    \            count++;\n    }\nreturn count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp4l2ojoyw: /tmp/tmp4l2ojoyw.cpp:20: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ s;\n  for(char c : string) {\n    s.insert(tolower(c));\n  }\n  return s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        for(int j\
    \ = i + 1; j < string.length(); j++){\n            if(string[i] == string[j]){\n\
    \                string.erase(j, 1);\n                j--;\n            }\n  \
    \      }\n    }\n    count = string.length();\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpizoctev8: /tmp/tmpizoctev8.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (count_if(string.begin(),\
    \ string.end(), [&](char c) {\n\t\t\treturn toupper(c) == toupper(string[i]);\n\
    \t\t}) == 1)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp8u9_jtzu: /tmp/tmp8u9_jtzu.cpp:22: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ distinct_characters = 0;\n\tstring.erase(remove(string.begin(), string.end(),\
    \ ' '), string.end()); //remove spaces\n\tlong alphabet[26];\n\tfor (int i = 0;\
    \ i < 26; i++) {\n\t\talphabet[i] = 0;\n\t}\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tchar ch = string[i];\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\t\
    if (alphabet[ch - 'a'] == 0) {\n\t\t\t\talphabet[ch - 'a'] = 1;\n\t\t\t\tdistinct_characters++;\n\
    \t\t\t}\n\t\t}\n\t\telse if (ch >= 'A' && ch <= 'Z') {\n\t\t\tif (alphabet[ch\
    \ - 'A'] == 0) {\n\t\t\t\talphabet[ch - 'A'] = 1;\n\t\t\t\tdistinct_characters++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn distinct_characters;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpv06k69rn: /tmp/tmpv06k69rn.cpp:38: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ Write your code here\n  int n = string.length();\n  long count=0;\n  int arr[26]={0};\n\
    \  for(int i=0;i<n;i++)\n  {\n    if(string[i]>='a' && string[i]<='z')\n    {\n\
    \      arr[string[i]-'a']++;\n    }\n    else if(string[i]>='A' && string[i]<='Z')\n\
    \    {\n      arr[string[i]-'A']++;\n    }\n  }\n  for(int i=0;i<26;i++)\n  {\n\
    \    if(arr[i]>0)\n    {\n      count++;\n    }\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpdrui_b7g: /tmp/tmpdrui_b7g.cpp:39: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::vector<char>\
    \ str_to_char(string.begin(), string.end());\n    std::set<char> st;\n    for\
    \ (int i = 0; i < str_to_char.size(); i++) {\n        st.insert(str_to_char[i]);\n\
    \    }\n    return st.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpyg1h581x: /tmp/tmpyg1h581x.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ c = 0;\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::sort(string.begin(), string.end());\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string[i] != string[i + 1]) {\n            c++;\n      \
    \  }\n    }\n    return c;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ count = 0;\n    std::string s = \"\";\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(s.find(tolower(string[i])) == std::string::npos){\n      \
    \      s += tolower(string[i]);\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ chars;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchars.insert(tolower(string[i]));\n\
    \t}\n\treturn chars.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ distinct_chars = 0;\n    //*******************************************\n   \
    \ //*********Your code goes here**********\n    //*******************************************\n\
    \    return distinct_chars;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpbhnb20iu: /tmp/tmpbhnb20iu.cpp:18: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  \t\
    //replace with your solution\n\tlong size = string.size();\n\tlong distinct =\
    \ 0;\n\tlong i = 0;\n\tfor(i=0;i<size;i++){\n\t\tchar t = string[i];\n\t\tlong\
    \ j = 0;\n\t\tlong check = 0;\n\t\tfor(j=0;j<i;j++){\n\t\t\tif(t==string[j]){\n\
    \t\t\t\tcheck = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(check==0){\n\t\t\t\
    distinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpdkezossm: /tmp/tmpdkezossm.cpp:33: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    string = string + '0';\n    // Write your code here\n    //\
    \ To print results to the standard output you can use std::cout\n    // Example:\
    \ std::cout << \"Hello world!\";\n    sort(string.begin(), string.end());\n  \
    \  for(int i = 0; i < string.length() - 1; i++) {\n        if(string[i] != string[i\
    \ + 1])\n            count++;\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpe47ibn1w: /tmp/tmpe47ibn1w.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tint\
    \ str_len = string.length();\n\tstd::string lower_string = \"\";\n\tfor (int i\
    \ = 0; i < str_len; i++) {\n\t\tchar ch = string[i];\n\t\tlower_string += std::tolower(ch);\n\
    \t}\n\tlong count = 0;\n\tfor (int i = 0; i < str_len; i++) {\n\t\tchar ch = lower_string[i];\n\
    \t\tif (lower_string.find(ch) == i) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  return\
    \ (long)std::set<char>(string.begin(), string.end()).size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpq7505luz: /tmp/tmpq7505luz.cpp:15: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::vector<char>\
    \ v(string.begin(), string.end());\n    std::sort(v.begin(), v.end());\n    std::vector<char>\
    \ v1(v.begin(), std::unique(v.begin(), v.end()));\n    return v1.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpvqvvbuez: /tmp/tmpvqvvbuez.cpp:18: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\treturn\
    \ string.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpb8kphvfp: /tmp/tmpb8kphvfp.cpp:15: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143087
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ ans=0;\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::set<char> data(string.begin(), string.end());\n    return data.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> char_set;\n    std::string string_lower(string);\n\
    \    std::transform(string_lower.begin(), string_lower.end(), string_lower.begin(),\
    \ ::tolower);\n    for (char& c : string_lower) {\n        if (char_set.find(c)\
    \ == char_set.end()) {\n            char_set.insert(c);\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\treturn\
    \ std::set<char>(string.begin(), string.end()).size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpjpgi0g3d: /tmp/tmpjpgi0g3d.cpp:15: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ length = string.length();\n    long ans = 0;\n    std::vector<int> temp(26,\
    \ 0);\n    for(int i = 0; i < length; i++) {\n        int index = tolower(string[i])\
    \ - 'a';\n        if(temp[index] == 0) {\n            ans++;\n            temp[index]\
    \ = 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<int>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpm8whh7e6: /tmp/tmpm8whh7e6.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ length = string.length();\n  unordered_set<char> distinct_chars;\n  for (long\
    \ i = 0; i < length; i++) {\n    if (distinct_chars.find(tolower(string[i])) ==\
    \ distinct_chars.end()) {\n      distinct_chars.insert(tolower(string[i]));\n\
    \    }\n  }\n  return distinct_chars.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3wlwp6s.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpe3wlwp6s.cpp:10:3: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope\n   10 |   unordered_set<char> distinct_chars;\n      |   ^~~~~~~~~~~~~\n\
    /tmp/tmpe3wlwp6s.cpp:10:3: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpe3wlwp6s.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note:   \u2018std::unordered_set\u2019\n   97 |     class unordered_set\n  \
    \    |           ^~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpe3wlwp6s.cpp:2:\n/usr/include/c++/9/unordered_set:68:13:\
    \ note:   \u2018std::pmr::unordered_set\u2019\n   68 |       using unordered_set\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpe3wlwp6s.cpp:10:17: error: expected\
    \ primary-expression before \u2018char\u2019\n   10 |   unordered_set<char> distinct_chars;\n\
    \      |                 ^~~~\n/tmp/tmpe3wlwp6s.cpp:12:9: error: \u2018distinct_chars\u2019\
    \ was not declared in this scope\n   12 |     if (distinct_chars.find(tolower(string[i]))\
    \ == distinct_chars.end()) {\n      |         ^~~~~~~~~~~~~~\n/tmp/tmpe3wlwp6s.cpp:16:10:\
    \ error: \u2018distinct_chars\u2019 was not declared in this scope\n   16 |  \
    \ return distinct_chars.size();\n      |          ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660143086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nlong\
    \ count;\nstring temp;\ntemp= string;\n \n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i]\
    \ = string[i] + 32;\n        }\n    }\n \n    for (long i = 0; i < string.length();\
    \ i++) {\n        for (long j = i + 1; j < string.length();) {\n            if\
    \ (string[j] == string[i]) {\n                string.erase(string.begin() + j);\n\
    \            } else {\n                j++;\n            }\n        }\n    }\n\
    \ \n    count = string.length();\n \n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl52kfv64.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpl52kfv64.cpp:10:7: error: expected \u2018;\u2019 before \u2018temp\u2019\
    \n   10 | string temp;\n      |       ^~~~~\n      |       ;\n/tmp/tmpl52kfv64.cpp:11:1:\
    \ error: \u2018temp\u2019 was not declared in this scope\n   11 | temp= string;\n\
    \      | ^~~~\n"
  stdout: ''
  timestamp: 1660143086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ len = string.length();\n    set<char> s;\n    for(int i=0;i<len;i++){\n    \
    \    s.insert(string[i]);\n    }\n    return s.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6lwnlny.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpl6lwnlny.cpp:10:5: error: \u2018set\u2019 was not declared in this\
    \ scope\n   10 |     set<char> s;\n      |     ^~~\n/tmp/tmpl6lwnlny.cpp:10:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpl6lwnlny.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpl6lwnlny.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpl6lwnlny.cpp:10:9:\
    \ error: expected primary-expression before \u2018char\u2019\n   10 |     set<char>\
    \ s;\n      |         ^~~~\n/tmp/tmpl6lwnlny.cpp:12:9: error: \u2018s\u2019 was\
    \ not declared in this scope\n   12 |         s.insert(string[i]);\n      |  \
    \       ^\n/tmp/tmpl6lwnlny.cpp:14:12: error: \u2018s\u2019 was not declared in\
    \ this scope\n   14 |     return s.size();\n      |            ^\n"
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ int count = 0;\n  // bool check = true;\n  // std::set<char> set;\n  // for(std::string::iterator\
    \ it = string.begin(); it != string.end(); it++){\n  //   if(set.find(*it) ==\
    \ set.end()){\n  //     count++;\n  //     set.insert(*it);\n  //   }\n  // }\n\
    \  // return count;\n  int count = 0;\n  bool check = true;\n  for(std::string::iterator\
    \ it = string.begin(); it != string.end(); it++){\n    for(std::string::iterator\
    \ jt = string.begin(); jt != string.end(); jt++){\n      if(*it == *jt){\n   \
    \     check = false;\n        break;\n      }\n    }\n    if(check){\n      count++;\n\
    \    }\n    check = true;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpigeq11ug: /tmp/tmpigeq11ug.cpp:38: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    long count=0;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        int flag=0;\n        for(int j=0;j<i;j++)\n        {\n       \
    \     if(string[i]==string[j])\n            {\n                flag=1;\n     \
    \           break;\n            }\n        }\n        if(flag==0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmphmx2qh66: /tmp/tmphmx2qh66.cpp:33: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return std::set<char>(string.begin(),\
    \ string.end()).size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ Convert all characters to lowercase\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tstd::unordered_set<char> set(string.begin(),\
    \ string.end());\n\treturn set.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ total_characters = 0;\n  for (auto it = string.begin(); it != string.end();\
    \ it++) {\n    if (string.find(*it) != string.npos) {\n      total_characters\
    \ += 1;\n    }\n  }\n  return total_characters;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp1sttem4_: /tmp/tmp1sttem4_.cpp:21: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\nlong\
    \ count = 0;\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    std::sort(string.begin(), string.end());\nfor (long i = 0; i < string.length();\
    \ i++) {\n\tif (string[i] != string[i+1]) {\n\t\tcount++;\n\t}\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj11mfqf5.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpj11mfqf5.cpp:17:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   17 | int main() {\n      |            ^\n/tmp/tmpj11mfqf5.cpp:24:1:\
    \ error: expected \u2018}\u2019 at end of input\n   24 | }\n      | ^\n/tmp/tmpj11mfqf5.cpp:8:52:\
    \ note: to match this \u2018{\u2019\n    8 | long count_distinct_characters(std::string\
    \ string) {\n      |                                                    ^\n/tmp/tmpj11mfqf5.cpp:24:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   24 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660143085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ int ans = 0;\n  // std::string::iterator it;\n  // std::set<char> str;\n  //\
    \ for(it = string.begin(); it != string.end(); it++) {\n  //   str.insert(*it);\n\
    \  // }\n  // return str.size();\n  // return ans;\n  // it is a good habit to\
    \ write return when you are returning something from a function\n  //return 0;\n\
    \  // write your code here\n  long count = 0;\n  std::set<char> s;\n  std::set<char>::iterator\
    \ it;\n  for(it = s.begin(); it != s.end(); it++) {\n    s.insert(*it);\n  }\n\
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp0ugzyk06: /tmp/tmp0ugzyk06.cpp:31: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  int\
    \ count[200] = {0};\n  for(int i = 0; i < string.length(); i++) {\n    int a =\
    \ string[i];\n    count[a]++;\n  }\n  int distinct = 0;\n  for(int i = 0; i <\
    \ 200; i++) {\n    if(count[i] > 0)\n      distinct++;\n  }\n  return distinct;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpnruksat_: /tmp/tmpnruksat_.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ count = 0;\n    int n = string.length();\n    int i;\n    int j;\n    int is_duplicate\
    \ = 0;\n    std::set<char> characters;\n    std::set<char>::iterator it;\n   \
    \ for (i = 0; i < n; i++) {\n        is_duplicate = 0;\n        for (it = characters.begin();\
    \ it != characters.end(); it++) {\n            if (string[i] == *it) {\n     \
    \           is_duplicate = 1;\n                break;\n            }\n       \
    \ }\n        if (is_duplicate == 0) {\n            characters.insert(string[i]);\n\
    \        }\n    }\n    return characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpn3bv3ofb: /tmp/tmpn3bv3ofb.cpp:34: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  return\
    \ std::set<std::string>{string.begin(), string.end()}.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvuzz143r.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::__cxx11::basic_string<char>; _Args = {char&}; _Tp = std::_Rb_tree_node<std::__cxx11::basic_string<char>\
    \ >]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018\
    static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>;\
    \ _Args = {char&}; _Tp = std::_Rb_tree_node<std::__cxx11::basic_string<char> >;\
    \ std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/usr/include/c++/9/bits/stl_tree.h:614:32:   required from \u2018\
    void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_construct_node(std::_Rb_tree<_Key,\
    \ _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _Args&& ...) [with _Args =\
    \ {char&}; _Key = std::__cxx11::basic_string<char>; _Val = std::__cxx11::basic_string<char>;\
    \ _KeyOfValue = std::_Identity<std::__cxx11::basic_string<char> >; _Compare =\
    \ std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_nod"
  stdout: ''
  timestamp: 1660143088
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ distinct = 0;\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower); // Convert to lower case\n\n\tstd::string unique = \"\";\n\tfor\
    \ (char c : string) {\n\t\tif (unique.find(c) == std::string::npos)\n\t\t\tunique\
    \ += c;\n\t}\n\n\treturn unique.length();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ s;\n  for(int i=0;i<string.length();i++){\n    s.insert(string[i]);\n  }\n \
    \ return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpgms83lue: /tmp/tmpgms83lue.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ set;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tset.insert(string[i]);\n\
    \t}\n\treturn set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpxfpjf23l: /tmp/tmpxfpjf23l.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  assert(false);\n\
    \  long result = 0;\n  return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpcx4awj49: /tmp/tmpcx4awj49.cpp:9: long int count_distinct_characters(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Good luck. :-)\n    int count = 0;\n    std::set<char> myset;\n    for(int i\
    \ = 0; i < string.length(); i++){\n        if(myset.find(string[i]) == myset.end()){\n\
    \            myset.insert(string[i]);\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp__5cb99e: /tmp/tmp__5cb99e.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for (auto\
    \ i : string) {\n        s.insert(i);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ write your code here\n\t// you should return the number of different characters\n\
    \t// the function takes a string, not a char array\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstring.erase(std::unique(string.begin(),\
    \ string.end()), string.end());\n\treturn string.length();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpq652evql: /tmp/tmpq652evql.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ distinct_chars = 0;\n    for (long i = 0; i < string.length(); i++) {\n    \
    \    long char_ascii = (long)string[i];\n        if (char_ascii >= 65 && char_ascii\
    \ <= 90) {\n            distinct_chars += 1;\n        }\n        else if (char_ascii\
    \ >= 97 && char_ascii <= 122) {\n            distinct_chars += 1;\n        }\n\
    \    }\n    return distinct_chars;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpvl6rxv0c: /tmp/tmpvl6rxv0c.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ _set;\n    for(char i: string) {\n        _set.insert(tolower(i));\n    }\n\
    \    return _set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::map<char,int>\
    \ stringMap;\n    for(long i=0;i<string.length();i++){\n        stringMap[string[i]]++;\n\
    \    }\n    return stringMap.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp4d_uxcwe: /tmp/tmp4d_uxcwe.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  int\
    \ i,count=0;\n  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  sort(string.begin(),string.end());\n  for(i=0;i<string.length();i++)\n  {\n\
    \     if(string[i]!=string[i+1])\n        count++;\n  }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    set<char>\
    \ s;\n    for(char c: string)\n    {\n        s.insert(tolower(c));\n    }\n \
    \   return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxjhk73v1.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpxjhk73v1.cpp:9:5: error: \u2018set\u2019 was not declared in this scope\n\
    \    9 |     set<char> s;\n      |     ^~~\n/tmp/tmpxjhk73v1.cpp:9:5: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/set:61,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n         \
    \        from /tmp/tmpxjhk73v1.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpxjhk73v1.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpxjhk73v1.cpp:9:9:\
    \ error: expected primary-expression before \u2018char\u2019\n    9 |     set<char>\
    \ s;\n      |         ^~~~\n/tmp/tmpxjhk73v1.cpp:12:9: error: \u2018s\u2019 was\
    \ not declared in this scope\n   12 |         s.insert(tolower(c));\n      | \
    \        ^\n/tmp/tmpxjhk73v1.cpp:14:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   14 |     return s.size();\n      |            ^\n"
  stdout: ''
  timestamp: 1660143088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ distinct_count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]!='\
    \ '){\n            distinct_count++;\n            string[i]=' ';\n           \
    \ for(int j=i+1;j<string.length();j++){\n                if(string[i]==string[j]){\n\
    \                    string[j]=' ';\n                }\n            }\n      \
    \  }\n    }\n    return distinct_count;\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpf4m_8t2_: /tmp/tmpf4m_8t2_.cpp:27: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count=0;\n\tchar c='$';\n\tif(string.size()>0)\n\t{\n\t\tfor(int i=0;i<string.size();i++)\n\
    \t\t{\n\t\t\tif(string[i]!=c)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tc=string[i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpmorjcx0x: /tmp/tmpmorjcx0x.cpp:28: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ Write your code here\n\tlong count = 0;\n\tstd::string::iterator it;\n\tstd::sort(string.begin(),\
    \ string.end());\n\tfor (it = string.begin(); it != string.end(); it++) {\n\t\t\
    std::string::iterator it2 = it + 1;\n\t\tif (*it != *it2) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpdyzkgc_b: /tmp/tmpdyzkgc_b.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ count = 0;\n  std::string str = \"\";\n  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  for (long i = 0; i < string.length(); i++) {\n\
    \    if (str.find(string[i]) == std::string::npos) {\n      str += string[i];\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::map<char, bool> map;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (map.find(tolower(string[i])) == map.end()) {\n\t\t\tmap[tolower(string[i])]\
    \ = true;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    int i;\n    long size = string.size();\n    for(i = 0; i < size;\
    \ i++) {\n        if(string[i] != ' ') {\n            count++;\n            for(int\
    \ j = i + 1; j < size; j++) {\n                if(string[i] == string[j]) {\n\
    \                    string[j] = ' ';\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpd674_qp0: /tmp/tmpd674_qp0.cpp:28: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::vector<char> letters;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (std::find(letters.begin(), letters.end(), std::tolower(string[i]))\
    \ == letters.end()) {\n            letters.push_back(std::tolower(string[i]));\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ n = string.length();\n    std::map<char, int> mp;\n    for(int i = 0; i < n;\
    \ i++)\n        mp[tolower(string[i])]++;\n    return mp.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ s;\n\tfor(int i=0;i<string.length();i++){\n\t\ts.insert(tolower(string[i]));\n\
    \t}\n\treturn s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ set;\n\tfor (char ch : string) {\n\t\tset.insert(tolower(ch));\n\t}\n\treturn\
    \ set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \tstd::sort(string.begin(), string.end());\n\tauto i = string.begin();\n\twhile\
    \ (i != string.end()) {\n\t\tif (i == string.begin()) {\n\t\t\tcount++;\n\t\t\
    }\n\t\telse {\n\t\t\tif (*i != *(i - 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::vector<char> string_vec(string.begin(),\
    \ string.end());\n    std::set<char> distinct_chars(string_vec.begin(), string_vec.end());\n\
    \    return distinct_chars.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    return\
    \ std::set<char>(string.begin(), string.end()).size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpf8ryl4gg: /tmp/tmpf8ryl4gg.cpp:15: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //string.size()\n\
    \  std::set<char>str(string.begin(),string.end());\n  return str.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpspzty051: /tmp/tmpspzty051.cpp:17: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ Write your solution code below this line.\n\tstd::set<char> s;\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tfor (auto c : string) {\n\t\ts.insert(c);\n\
    \t}\n\treturn s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ charSet;\n    for (int i = 0; i < string.length(); i++) {\n        charSet.insert(tolower(string[i]));\n\
    \    }\n    return charSet.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ letters;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tletters.insert(tolower(string[i]));\n\
    \t}\n\treturn letters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code here\n    long count=0;\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    sort(string.begin(),string.end());\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        if(string[i]!=string[i+1])\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n\tlong count = 0;\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tfor(int i = 0; i < string.length(); i++)\n\t\
    {\n\t\tif(string[i] != ' ')\n\t\t{\n\t\t\tif(string[i] != string[i+1])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpxsz9nppb: /tmp/tmpxsz9nppb.cpp:28: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    std::string s = string;\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    std::unordered_set<char> myset;\n    for(auto\
    \ x: s)\n    {\n        myset.insert(x);\n    }\n    return myset.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ char_set;\n  for (int i = 0; i < string.length(); i++) {\n    char c = string[i];\n\
    \    char_set.insert(c);\n  }\n  return char_set.size();\n}\nint main() {\n  \
    \  auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpo6h0bn4n: /tmp/tmpo6h0bn4n.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t\n\t\
    return 0;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp5imurys7: /tmp/tmp5imurys7.cpp:15: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//auto\
    \ string_temp = string;\n\tlong count = 0;\n\tfor (long index = 0; index < string.length();\
    \ index++) {\n\t\tbool found = false;\n\t\tchar current_character = tolower(string[index]);\n\
    \t\tfor (long jndex = 0; jndex < index; jndex++) {\n\t\t\tif (current_character\
    \ == tolower(string[jndex])) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tif (!found) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(std::tolower(c));\n  \
    \  }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::vector<bool> distinct(26,\
    \ false);\n    long distinct_count = 0;\n    for (auto c : string) {\n       \
    \ if (!distinct[c - 'a']) {\n            distinct[c - 'a'] = true;\n         \
    \   distinct_count++;\n        }\n    }\n    return distinct_count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ YOUR CODE GOES HERE\n    std::set<char> string_set;\n    for (auto &i : string)\
    \ {\n        string_set.insert(tolower(i));\n    }\n    return string_set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t\t\
    long number_of_distinct_characters=0;\n\t\tint i=0;\n\t\tstd::map<char, int> alphabet;\n\
    \t\twhile(string[i]!='\\0'){\n\t\t\tif(alphabet.find(string[i])==alphabet.end()){\n\
    \t\t\t\talphabet[string[i]]++;\n\t\t\t\tnumber_of_distinct_characters++;\n\t\t\
    \t}\n\t\t\ti++;\n\t\t}\n\t\treturn number_of_distinct_characters;\n\t}\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdz6jh88.cpp:21:1: error: expected declaration before \u2018}\u2019\
    \ token\n   21 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ count = 0;\n    for(char c: string){\n        int count1 = 0;\n        for(char\
    \ d: string){\n            if(tolower(c) == tolower(d)){\n                count1\
    \ = 1;\n                break;\n            }\n        }\n        if(count1 ==\
    \ 0){\n            count += 1;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpaeqz48vi: /tmp/tmpaeqz48vi.cpp:27: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ long count = 0;\n\t// std::set<char> s;\n\t// for(auto ch : string)\n\t// \t\
    s.insert(tolower(ch));\n\t// count = s.size();\n\t// return count;\n\tstd::set<char>\
    \ s;\n\tfor(auto ch : string)\n\t\ts.insert(tolower(ch));\n\treturn s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ result = 0;\n    std::set<char> chars;\n    for (char &c : string) {\n     \
    \   if (chars.find(tolower(c)) == chars.end()) {\n            result++;\n    \
    \        chars.insert(tolower(c));\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    long count=0;\n    long len=string.length();\n    string\
    \ a;\n    for(long i=0;i<len;i++)\n    {\n        long flag=0;\n        char c=string[i];\n\
    \        for(long j=0;j<a.length();j++)\n        {\n            if(c==a[j])\n\
    \            {\n                flag=1;\n                break;\n            }\n\
    \        }\n        if(flag==0)\n        {\n            a+=c;\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptlg85mpx.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmptlg85mpx.cpp:12:11: error: expected \u2018;\u2019 before \u2018a\u2019\
    \n   12 |     string a;\n      |           ^~\n      |           ;\n/tmp/tmptlg85mpx.cpp:17:24:\
    \ error: \u2018a\u2019 was not declared in this scope\n   17 |         for(long\
    \ j=0;j<a.length();j++)\n      |                        ^\n/tmp/tmptlg85mpx.cpp:27:13:\
    \ error: \u2018a\u2019 was not declared in this scope\n   27 |             a+=c;\n\
    \      |             ^\n"
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ Transform string to lowercase\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\t// Set keeps track of all the different characters\
    \ in the string\n\tstd::set<char> char_set;\n\t// Loop over all characters\n\t\
    for (char letter : string) {\n\t\t// If the character is already in the set, do\
    \ nothing\n\t\tif (char_set.find(letter) != char_set.end()) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\t// Otherwise, put the character in the set\n\t\tchar_set.insert(letter);\n\
    \t}\n\t// Return the size of the set\n\treturn char_set.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return std::unordered_set<char>(string.begin(),\
    \ string.end()).size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::string::iterator\
    \ iter;\n    long count=0;\n    for(iter=string.begin();iter!=string.end();iter++){\n\
    \        if(std::find(string.begin(),iter,tolower(*iter))==iter){\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmphovx69_p: /tmp/tmphovx69_p.cpp:24: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::string::iterator\
    \ end_unique = std::unique(string.begin(), string.end());\n  return std::distance(string.begin(),\
    \ end_unique);\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp0mwl4scy: /tmp/tmp0mwl4scy.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ int len = string.length();\n  // std::vector<char> d(len);\n  // int x = 0;\n\
    \  // for (int i = 0; i < len; i++) {\n  //   if (std::find(d.begin(), d.end(),\
    \ string[i]) == d.end()) {\n  //     d[x] = string[i];\n  //     x++;\n  //  \
    \ }\n  // }\n  // return x;\n  std::string s;\n  for (char c : string) {\n   \
    \ if (s.find(tolower(c)) == std::string::npos) {\n      s += tolower(c);\n   \
    \ }\n  }\n  return s.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tlong n = string.length();\n\tif(n <= 1)\n\t\treturn n;\n\telse\n\
    \t{\n\t\tstd::sort(string.begin(), string.end());\n\t\tfor(long i = 0; i < n-1;\
    \ i++)\n\t\t{\n\t\t\tif(string[i] != string[i+1])\n\t\t\t\tcount++;\n\t\t}\n\t\
    \treturn count + 1;\n\t}\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpybus_yd4: /tmp/tmpybus_yd4.cpp:28: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ length = string.length();\n    std::unordered_set<char> s;\n    for(int i =\
    \ 0; i < length; i++) {\n        s.insert(tolower(string[i]));\n    }\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ s;\n\tfor(int i=0;i<string.length();i++){\n\t\ts.insert(tolower(string[i]));\n\
    \t}\n\treturn s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tconst\
    \ int length = string.length();\n\tlong count = 0;\n\tchar alpha[26] = {0};\n\t\
    for(int i = 0; i < length; i++) {\n\t\tint index = tolower(string[i]) - 'a';\n\
    \t\tif(alpha[index] == 0) {\n\t\t\talpha[index] = 1;\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpuwnrmkxs: /tmp/tmpuwnrmkxs.cpp:27: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    std::string new_string = \"\";\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (i == 0) {\n            new_string += string[i];\n      \
    \  } else {\n            if (string[i] != string[i - 1]) {\n                new_string\
    \ += string[i];\n            }\n        }\n    }\n    return new_string.length();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ ans=0;\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n   \
    \     if(s.find(tolower(string[i]))==s.end()){\n            s.insert(tolower(string[i]));\n\
    \            ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ set;\n  int count = 0;\n  for (int i = 0; i < string.length(); i++) {\n    if\
    \ (set.find(tolower(string[i])) == set.end()) {\n      set.insert(tolower(string[i]));\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (auto s : string) {\n        set.insert(tolower(s));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ uset;\n    for(auto x: string) {\n        char ch = std::tolower(x);\n     \
    \   uset.insert(ch);\n    }\n    return uset.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tfor (char i = 'a'; i <= 'z'; i++) {\n\t\tcount += string.find(i)\
    \ != -1;\n\t}\n\tfor (char i = 'A'; i <= 'Z'; i++) {\n\t\tcount += string.find(i)\
    \ != -1;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp_ujtui8b: /tmp/tmp_ujtui8b.cpp:22: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(long index = 0; index < string.length(); index++){\n   \
    \     char temp = string[index];\n        if(temp == ' '){\n            continue;\n\
    \        }\n        long index2 = index + 1;\n        for(; index2 < string.length();\
    \ index2++){\n            if(string[index2] == temp || temp == string[index2]\
    \ + 32 || temp == string[index2] - 32){\n                string[index2] = ' ';\n\
    \            }\n        }\n        count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpufg5ljm0: /tmp/tmpufg5ljm0.cpp:31: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::string::iterator it;\n\tstd::map<char,int>  map;\n\tfor(it\
    \ = string.begin(); it != string.end(); it++)\n\t{\n\t\tif(map.find(*it) == map.end())\n\
    \t\t{\n\t\t\tcount++;\n\t\t\tmap[*it] = 0;\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp8glwv9si: /tmp/tmp8glwv9si.cpp:26: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n// Write\
    \ your solution here\n//Iterate over all the characters in the given string.\n\
    //If the character is new (i.e., not present in the map), insert into the map.\n\
    //Else, ignore the character.\n//The final map size (number of characters) will\
    \ give the answer.\n  std::map<char, int> map;\n  for(int i=0; i<string.length();\
    \ i++){\n    map[string[i]]++;\n  }\n  return map.size();\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpvg9levvh: /tmp/tmpvg9levvh.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    char first = ' ';\n    int count = 0;\n    for (char i : string) {\n    \
    \    if (i != first) {\n            count++;\n            first = i;\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpv3o7ejoc: /tmp/tmpv3o7ejoc.cpp:27: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ result = 0;\n  std::set<char> unique;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    unique.insert(tolower(string[i]));\n  }\n  result = unique.size();\n\
    \  return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code here\n    int i=0;\n    string upp_s=\"\";\n    int count=0;\n   \
    \ for(int j=0;j<string.length();j++){\n        upp_s+=toupper(string[j]);\n  \
    \  }\n    sort(upp_s.begin(),upp_s.end());\n    for(int k=0;k<upp_s.length();k++){\n\
    \        if(upp_s[k]!=upp_s[k+1]){\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5lpny8tr.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp5lpny8tr.cpp:11:11: error: expected \u2018;\u2019 before \u2018upp_s\u2019\
    \n   11 |     string upp_s=\"\";\n      |           ^~~~~~\n      |          \
    \ ;\n/tmp/tmp5lpny8tr.cpp:14:9: error: \u2018upp_s\u2019 was not declared in this\
    \ scope\n   14 |         upp_s+=toupper(string[j]);\n      |         ^~~~~\n/tmp/tmp5lpny8tr.cpp:16:10:\
    \ error: \u2018upp_s\u2019 was not declared in this scope\n   16 |     sort(upp_s.begin(),upp_s.end());\n\
    \      |          ^~~~~\n/tmp/tmp5lpny8tr.cpp:16:5: error: \u2018sort\u2019 was\
    \ not declared in this scope; did you mean \u2018std::sort\u2019?\n   16 |   \
    \  sort(upp_s.begin(),upp_s.end());\n      |     ^~~~\n      |     std::sort\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp5lpny8tr.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:296:1:\
    \ note: \u2018std::sort\u2019 declared here\n  296 | sort(_ExecutionPolicy&& __exec,\
    \ _RandomAccessIterator __first, _RandomAccessIterator __last);\n      | ^~~~\n"
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::unordered_set<char> set;\n\
    \    for (auto i : string) {\n        set.insert(i);\n    }\n    return set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143091
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  \t\
    long count = 0;\n  \tint num;\n\tstd::string arr[string.length()];\n\tfor(int\
    \ i = 0; i < string.length(); i++){\n\t\tint num = int(string[i]);\n\t\tif(num\
    \ >= 65 && num <= 90){\n\t\t\tnum += 32;\n\t\t}\n\t\tchar ch = char(num);\n\t\t\
    string[i] = ch;\n\t}\n\tstd::sort(string.begin(), string.end());\n\tfor(int i\
    \ = 0; i < string.length(); i++){\n\t\tint num = int(string[i]);\n\t\tif(num >=\
    \ 65 && num <= 90){\n\t\t\tnum += 32;\n\t\t}\n\t\tchar ch = char(num);\n\t\tarr[i]\
    \ = ch;\n\t}\n\tfor(int i = 0; i < string.length(); i++){\n\t\tif(arr[i] != arr[i+1]){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    map<char,int>m;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        m[string[i]]++;\n    }\n    return m.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk06xo7mr.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpk06xo7mr.cpp:10:5: error: \u2018map\u2019 was not declared in this\
    \ scope\n   10 |     map<char,int>m;\n      |     ^~~\n/tmp/tmpk06xo7mr.cpp:10:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpk06xo7mr.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:100:11:\
    \ note:   \u2018std::map\u2019\n  100 |     class map\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpk06xo7mr.cpp:2:\n/usr/include/c++/9/map:82:13:\
    \ note:   \u2018std::pmr::map\u2019\n   82 |       using map\n      |        \
    \     ^~~\n/tmp/tmpk06xo7mr.cpp:10:9: error: expected primary-expression before\
    \ \u2018char\u2019\n   10 |     map<char,int>m;\n      |         ^~~~\n/tmp/tmpk06xo7mr.cpp:13:9:\
    \ error: \u2018m\u2019 was not declared in this scope\n   13 |         m[string[i]]++;\n\
    \      |         ^\n/tmp/tmpk06xo7mr.cpp:15:12: error: \u2018m\u2019 was not declared\
    \ in this scope; did you mean \u2018tm\u2019?\n   15 |     return m.size();\n\
    \      |            ^\n      |            tm\n"
  stdout: ''
  timestamp: 1660143091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count=0;\n    std::vector<char> chars;\n    for(int i=0;i<string.length();i++){\n\
    \        char c=string[i];\n        if(std::find(chars.begin(),chars.end(),c)==chars.end()){\n\
    \            chars.push_back(c);\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp54hw35_r: /tmp/tmp54hw35_r.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        for(int j\
    \ = i+1; j < string.length(); j++){\n            if(string[i] == string[j]){\n\
    \                string.erase(j,1);\n                j--;\n            }\n   \
    \     }\n    }\n    return string.length();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmps7pyiqba: /tmp/tmps7pyiqba.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    return\
    \ 0L;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp727xioic: /tmp/tmp727xioic.cpp:14: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ sum = 0;\n  int l = 0;\n  int u = 0;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n      l++;\n    else\
    \ if (string[i] >= 'A' && string[i] <= 'Z')\n      u++;\n  }\n  sum = l + u;\n\
    \  return sum;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpup8ze8zx: /tmp/tmpup8ze8zx.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count=0;\n    bool check[52]={0};\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]>='a' && string[i]<='z'){\n            if(check[string[i]-'a']==0){\n\
    \                count++;\n                check[string[i]-'a']=1;\n         \
    \   }\n        }\n        else if(string[i]>='A' && string[i]<='Z'){\n       \
    \     if(check[string[i]-'A'+26]==0){\n                count++;\n            \
    \    check[string[i]-'A'+26]=1;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp1trycs2y: /tmp/tmp1trycs2y.cpp:31: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n \tstd::set<char>\
    \ s;\n \tfor(int i=0;i<string.length();i++){\n \t\ts.insert(string[i]);\n \t}\n\
    \ \tlong count=s.size();\n \treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpy9r6k06b: /tmp/tmpy9r6k06b.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    string.erase(std::remove(string.begin(),\
    \ string.end(), ' '), string.end());\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    std::vector<std::string> chars;\n    long count = 0;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        std::string s(1, string[i]);\n        if\
    \ (std::find(chars.begin(), chars.end(), s) == chars.end()) {\n            chars.push_back(s);\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmps1c9cm50: /tmp/tmps1c9cm50.cpp:29: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Takes a string,\n    // returns the number of distinct characters in it\n  \
    \  int count[256];\n    int l = string.length();\n    int i = 0;\n    while(i\
    \ < 256)\n    {\n        count[i] = 0;\n        i = i + 1;\n    }\n    int result\
    \ = 0;\n    i = 0;\n    while(i < l)\n    {\n        count[string[i]] = count[string[i]]\
    \ + 1;\n        i = i + 1;\n    }\n    i = 0;\n    while(i < 256)\n    {\n   \
    \     if(count[i] != 0)\n        {\n            result = result + 1;\n       \
    \ }\n        i = i + 1;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpcyfuyudf: /tmp/tmpcyfuyudf.cpp:41: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    bool ch[256] = {false};\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (ch[tolower(string[i])] == false) {\n            ch[tolower(string[i])]\
    \ = true;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    return\
    \ std::set<char>(string.begin(), string.end()).size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpf8ryl4gg: /tmp/tmpf8ryl4gg.cpp:15: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ create a set that contains only distinct elements\n    std::set<char> characters;\n\
    \    // traverse the input string\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        // add every character to the set\n        characters.insert(string[i]);\n\
    \    }\n    // return the size of the set\n    return characters.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpvfcrqq7r: /tmp/tmpvfcrqq7r.cpp:23: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ s;\n  for(int i=0;i<string.length();i++){\n    s.insert(tolower(string[i]));\n\
    \  }\n  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Write your code here\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] >= 'a' && string[i] <= 'z'){\n            count++;\n\
    \        }\n        else if(string[i] >= 'A' && string[i] <= 'Z'){\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2p76o030: /tmp/tmp2p76o030.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ count = 0;\n  std::vector<char> v;\n  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  for (long i = 0; i < string.length(); i++) {\n\
    \    if (std::find(v.begin(), v.end(), string[i]) == v.end()) {\n      v.push_back(string[i]);\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //set\
    \ stores unique characters\n    std::set<char> distinct;\n    int i = 0;\n   \
    \ while(i < string.length()){\n        //inserting into set\n        distinct.insert(string[i]);\n\
    \        i += 1;\n    }\n    //sz returning set size\n    return distinct.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpbv058lsg: /tmp/tmpbv058lsg.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    bool visited[26] = {false};\n    for(long i = 0; i < string.length();\
    \ i++) {\n        if(!visited[string[i] - 'a']) {\n            visited[string[i]\
    \ - 'a'] = true;\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmptlnl8a6j: /tmp/tmptlnl8a6j.cpp:23: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Write your code here\n    if(string.length() == 0) return 0;\n    set<char>\
    \ st;\n    for(int i = 0; i < string.length(); i++){\n        st.insert(tolower(string[i]));\n\
    \    }\n    return st.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfji5nwqf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpfji5nwqf.cpp:11:5: error: \u2018set\u2019 was not declared in this\
    \ scope\n   11 |     set<char> st;\n      |     ^~~\n/tmp/tmpfji5nwqf.cpp:11:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpfji5nwqf.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpfji5nwqf.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpfji5nwqf.cpp:11:9:\
    \ error: expected primary-expression before \u2018char\u2019\n   11 |     set<char>\
    \ st;\n      |         ^~~~\n/tmp/tmpfji5nwqf.cpp:13:9: error: \u2018st\u2019\
    \ was not declared in this scope; did you mean \u2018std\u2019?\n   13 |     \
    \    st.insert(tolower(string[i]));\n      |         ^~\n      |         std\n\
    /tmp/tmpfji5nwqf.cpp:15:12: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   15 |     return st.size();\n      |      \
    \      ^~\n      |            std\n"
  stdout: ''
  timestamp: 1660143091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code here\n    long count = 0;\n    std::map<char, int> m;\n    for(auto\
    \ i : string){\n        m[i]++;\n    }\n    for(auto i : m){\n        if(i.second\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpqia1woz8: /tmp/tmpqia1woz8.cpp:26: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ length = string.length();\n  std::set<char> s;\n  for(long i = 0; i < length;\
    \ i++) {\n    s.insert(tolower(string[i]));\n  }\n  return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    \
    \ std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n \
    \    std::set<char> test_set;\n     for(long index = 0; index < string.length();\
    \ index++){\n         test_set.insert(string[index]);\n     }\n     return test_set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count=0;\n    int length=string.length();\n    std::set<char> S;\n    for(int\
    \ i=0;i<length;i++){\n        S.insert(string[i]);\n    }\n    std::set<char>::iterator\
    \ itr;\n    for(itr=S.begin();itr!=S.end();itr++){\n        count++;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpf4n188de: /tmp/tmpf4n188de.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::vector<char> string_sorted = string;\n\tstd::sort(string_sorted.begin(),\
    \ string_sorted.end());\n\tfor (int i = 0; i < string_sorted.size(); i++) {\n\t\
    \tif (i == 0) {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string_sorted[i] != string_sorted[i\
    \ - 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe96ilj6e.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpe96ilj6e.cpp:10:36: error: conversion from \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to non-scalar type \u2018\
    std::vector<char>\u2019 requested\n   10 |  std::vector<char> string_sorted =\
    \ string;\n      |                                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660143092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        bool flag\
    \ = true;\n        for(int j = 0; j < i; j++){\n            if(string[i] == string[j]){\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpxabqet70: /tmp/tmpxabqet70.cpp:28: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ found;\n    for (char c : string) {\n        found.insert(tolower(c));\n   \
    \ }\n    return found.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ count = 0;\n  std::vector<bool> bool_vec(128, false);\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (!bool_vec[tolower(string[i])]) {\n      bool_vec[tolower(string[i])]\
    \ = true;\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ Write your code here\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  std::set<char> set1;\n  for(int i=0;i<string.length();i++)\n\
    \  {\n      set1.insert(string[i]);\n  }\n  return set1.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ i,j;\n    int count=0;\n    // Similar to merge sort\n    for(i=0;i<string.length();i++)\n\
    \    {\n        for(j=0;j<i;j++)\n        {\n            if(string[i]==string[j])\n\
    \            {\n                break;\n            }\n        }\n        if(i==j)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp28jq01bi: /tmp/tmp28jq01bi.cpp:32: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143093
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        if(s.find(tolower(string[i])) == s.end()) {\n            s.insert(tolower(string[i]));\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ Remove lower case characters\n\tstd::string string_upper_case = string;\n\t\
    std::transform(string_upper_case.begin(), string_upper_case.end(), string_upper_case.begin(),\
    \ ::toupper);\n\t// Remove duplicates\n\tstd::string string_distinct = string_upper_case;\n\
    \tstd::sort(string_distinct.begin(), string_distinct.end());\n\tstring_distinct.erase(std::unique(string_distinct.begin(),\
    \ string_distinct.end()), string_distinct.end());\n\t// Get length\n\tlong string_length\
    \ = string_distinct.length();\n\t// Return\n\treturn string_length;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ cnt = 0;\n    std::vector<int> v(26, 0);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    for (auto &e : string)\n    \
    \    if (!v[e - 'a']) {\n            v[e - 'a'] = 1;\n            cnt++;\n   \
    \     }\n    return cnt;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ Please fill your code here\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  // std::vector<char> lister;\n  int current_length = 0;\n  int\
    \ length = string.length();\n  for (int index = 0; index < length; index++){\n\
    \    if (current_length == 0){\n      // lister.push_back(string[index]);\n  \
    \    current_length++;\n    }\n    else{\n      bool already_exist = false;\n\
    \      for (int idx = 0; idx < current_length; idx++){\n        if (string[index]\
    \ == string[idx]){\n          already_exist = true;\n          break;\n      \
    \  }\n      }\n      if (!already_exist){\n        // lister.push_back(string[index]);\n\
    \        current_length++;\n      }\n    }\n  }\n  return current_length;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpvf42_k2n: /tmp/tmpvf42_k2n.cpp:41: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::vector<std::string>string_vec;\n\
    \    long string_vec_len = string.length();\n    for(int i = 0; i < string_vec_len;\
    \ i++){\n        std::string temp_string(1,string[i]);\n        string_vec.push_back(temp_string);\n\
    \    }\n    std::sort(string_vec.begin(),string_vec.end());\n    std::vector<std::string>::iterator\
    \ it;\n    it = std::unique(string_vec.begin(),string_vec.end());\n    string_vec.resize(std::distance(string_vec.begin(),it));\n\
    \    return string_vec.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmppx77z850: /tmp/tmppx77z850.cpp:25: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ count=0;\n  //for (std::string::iterator it = string.begin(); it != string.end();\
    \ ++it)\n  //{\n  //  \n  //}\n  //std::cout<<string;\n  std::vector<char> v;\n\
    \  for(int i=0;i<string.length();i++)\n  {\n    v.push_back(string[i]);\n  }\n\
    \  std::sort(v.begin(),v.end());\n  //std::cout<<\"vec\"<<v;\n  std::vector<char>::iterator\
    \ ip;\n  ip=std::unique(v.begin(),v.end());\n  v.resize(std::distance(v.begin(),ip));\n\
    \  //std::cout<<\"vec\"<<v;\n  for(int i=0;i<v.size();i++)\n  {\n    count++;\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp9h7wepxy: /tmp/tmp9h7wepxy.cpp:36: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count=0;\n\t// Write your code here.\n\t//int size=string.size();\n\t//int string[size];\n\
    \tfor(int i=0;i<string.size();i++)\n\t{\n\t\tstring[i]=tolower(string[i]);\n\t\
    }\n\tstd::map<char,int> m1;\n\tstd::map<char,int>::iterator it;\n\tfor(int i=0;i<string.size();i++)\n\
    \t{\n\t\tm1[string[i]]++;\n\t}\n\tfor(it=m1.begin();it!=m1.end();it++)\n\t{\n\t\
    \tif(it->second>0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    std::string::iterator it;\n    int i;\n    char c;\n    for (it =\
    \ string.begin(); it < string.end(); it++) {\n        c = std::tolower(*it);\n\
    \        set.insert(c);\n    }\n    return set.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ Return the count of distinct characters in string\n\tlong len = string.length();\n\
    \tstd::map<char,int> m;\n\tfor(int i=0;i<len;i++){\n\t\tm[string[i]] = 1;\n\t\
    }\n\treturn m.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpb57ryu48: /tmp/tmpb57ryu48.cpp:21: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ n = string.length();\n    int count[256] = {0};\n    for (int i = 0; i < n;\
    \ i++) {\n        count[tolower(string[i])]++;\n    }\n    int result = 0;\n \
    \   for (int i = 0; i < 256; i++) {\n        if (count[i] != 0) {\n          \
    \  result++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::map<char,int>\
    \ unique_characters;\n    std::string::iterator it = string.begin();\n    while(it\
    \ != string.end()){\n        unique_characters[*it]++;\n        it++;\n    }\n\
    \    return unique_characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpl_bi6x_4: /tmp/tmpl_bi6x_4.cpp:21: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ chars;\n  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  for (auto &c : string) {\n    chars.insert(c);\n  }\n  return chars.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> st(string.begin(),\
    \ string.end());\n  std::cout << \"Number of distinct characters:\" << st.size()\
    \ << std::endl;\n  return st.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: 'Number of distinct characters:0

    Number of distinct characters:5

    Number of distinct characters:5

    Number of distinct characters:1

    Number of distinct characters:5

    '
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ s;\n  for(int i=0;i<string.length();i++){\n    s.insert(string[i]);\n  }\n \
    \ return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpgms83lue: /tmp/tmpgms83lue.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143088
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::string temp = \"\";\n    for(char c : string){\n      \
    \  if(temp.find(tolower(c)) == std::string::npos){\n            temp += tolower(c);\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ distinct_char_count = 0;\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n\tstd::set<char> distinct_chars(string.begin(), string.end());\n\
    \treturn distinct_chars.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> S;\n    for(long i = 0; i < string.length();\
    \ i++)\n        S.insert(tolower(string[i]));\n    return S.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower); //Convert all characters to lower\
    \ case\n    std::set<char> uniqueCharacters;\n\n    for(char character : string)\
    \ {\n        uniqueCharacters.insert(character);\n    }\n\n    return uniqueCharacters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::sort(string.begin(), string.end());\n\
    \tstd::string string2;\n\tstring2.push_back(string[0]);\n\tstring.erase(0, 1);\n\
    \twhile (string.length() != 0) {\n\t\tif (string[0] != string2[string2.length()\
    \ - 1]) {\n\t\t\tstring2.push_back(string[0]);\n\t\t}\n\t\tstring.erase(0, 1);\n\
    \t}\n\treturn string2.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpf3go_mtj: /tmp/tmpf3go_mtj.cpp:24: int main(): Assertion `candidate((""))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ counter = 0;\n    std::set<char> mySet;\n    for(auto i : string){\n       \
    \ mySet.insert(i);\n    }\n    return mySet.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpfx3awe22: /tmp/tmpfx3awe22.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ n = string.length();\n\tlong count=0;\n\tchar s[n];\n\tstrcpy(s,string.c_str());\n\
    \tfor(long i=0;i<n;i++){\n\t\tfor(long j=i+1;j<n;j++){\n\t\t\tif(s[i]==s[j]){\n\
    \t\t\t\tcount=count+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n-count);\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpnzwduag9: /tmp/tmpnzwduag9.cpp:27: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::string\
    \ string2 = string;\n\tstd::transform(string2.begin(), string2.end(), string2.begin(),\
    \ ::tolower);\n\tstd::set<char> s;\n\tfor (int i = 0; i < string2.length(); i++)\
    \ {\n\t\ts.insert(string2[i]);\n\t}\n\treturn s.size();\n}\nint main() {\n   \
    \ auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count=0;\n\tstd::set<char> distinct_characters;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tchar key=tolower(string[i]);\n\t\tauto it=distinct_characters.find(key);\n\
    \t\tif(it==distinct_characters.end()){\n\t\t\tdistinct_characters.insert(key);\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::unordered_set<char> visited_characters;\n    for (char\
    \ current_character : string) {\n        if (visited_characters.find(current_character)\
    \ == visited_characters.end()) {\n            count++;\n            visited_characters.insert(current_character);\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpqpuotccu: /tmp/tmpqpuotccu.cpp:23: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    long count = 0;\n    for (auto ch : string) {\n        if (set.count(tolower(ch))\
    \ == 0) {\n            count += 1;\n            set.insert(tolower(ch));\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> distinctChars;\n    for (auto const & c : string)\
    \ {\n        distinctChars.insert(std::tolower(c));\n    }\n    count = distinctChars.size();\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ string_set;\n    for (char ch : string) {\n        string_set.insert(tolower(ch));\n\
    \    }\n    return string_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ distinct_characters = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::vector<char> v(string.begin(), string.end());\n    std::sort(v.begin(),\
    \ v.end());\n    auto last = std::unique(v.begin(), v.end());\n    distinct_characters\
    \ = std::distance(v.begin(), last);\n    return distinct_characters;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ i,j,k,l,m;\n  i=j=k=l=m=0;\n  std::set<char> s;\n  while(string[i]!='\\0'){\n\
    \    s.insert(string[i]);\n    i++;\n  }\n  return s.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp1qgzwfdw: /tmp/tmp1qgzwfdw.cpp:22: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    char\
    \ character;\n    // A set that contains only distinct elements\n    std::set<char>\
    \ distinct_chars;\n    for (std::string::iterator iter = string.begin(); iter\
    \ != string.end(); iter++) {\n        character = *iter;\n        // Cast to lowercase\
    \ if the character is uppercase\n        if (character >= 'A' && character <=\
    \ 'Z') {\n            character = character + ('a' - 'A');\n        }\n      \
    \  distinct_chars.insert(character);\n    }\n    return distinct_chars.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    long i = 0;\n    while (i < string.length()) {\n        char\
    \ curr = string[i];\n        count++;\n        while (i < string.length() && curr\
    \ == string[i]) {\n            i++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpokdrna4a: /tmp/tmpokdrna4a.cpp:24: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  long\
    \ size = string.size();\n  int ans = 0;\n  std::vector<int> check(26,0);\n  for(int\
    \ i=0;i<size;i++){\n    int a = string[i] - 'a';\n    int b = string[i] - 'A';\n\
    \    if(a>=0 && a<26 && check[a]==0){\n      ans++;\n      check[a] = 1;\n   \
    \ }\n    else if(b>=0 && b<26 && check[b]==0){\n      ans++;\n      check[b] =\
    \ 1;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp4r4kfew0: /tmp/tmp4r4kfew0.cpp:32: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tchar ch;\n\tint num;\n\tint len = string.length();\n\tstd::vector<char>\
    \ freq(26,0);\n\tfor(int i=0;i<len;i++){\n\t\tch = string[i];\n\t\tnum = int(ch);\n\
    \t\tif(num>=65 && num<=90){\n\t\t\tnum = num + 32;\n\t\t}\n\t\tfreq[num-97] =\
    \ 1;\n\t}\n\tfor(int i=0;i<26;i++){\n\t\tif(freq[i] == 1){\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpnjidhzw1: /tmp/tmpnjidhzw1.cpp:35: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ char_set;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchar_set.insert(tolower(string[i]));\n\
    \t}\n\treturn char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ write your code here\n    long count = 0;\n    for(long i = 0; i < string.length();\
    \ i++){\n        char current = string[i];\n        for(long j = 0; j < string.length();\
    \ j++){\n            if(current != string[j]){\n                // if(string[j]\
    \ == string[i]){\n                //     break;\n                // }\n      \
    \          if(j == string.length() - 1){\n                    count++;\n     \
    \           }\n            }else{\n                break;\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpihc328g2: /tmp/tmpihc328g2.cpp:31: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        set.insert(string[i]);\n  \
    \  }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143094
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tset<char>\
    \ s;\n\tfor(auto i:string)\n\t\ts.insert(tolower(i));\n\treturn s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vyf3g1v.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp8vyf3g1v.cpp:9:2: error: \u2018set\u2019 was not declared in this scope\n\
    \    9 |  set<char> s;\n      |  ^~~\n/tmp/tmp8vyf3g1v.cpp:9:2: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/set:61,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n         \
    \        from /tmp/tmp8vyf3g1v.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp8vyf3g1v.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmp8vyf3g1v.cpp:9:6:\
    \ error: expected primary-expression before \u2018char\u2019\n    9 |  set<char>\
    \ s;\n      |      ^~~~\n/tmp/tmp8vyf3g1v.cpp:11:3: error: \u2018s\u2019 was not\
    \ declared in this scope\n   11 |   s.insert(tolower(i));\n      |   ^\n/tmp/tmp8vyf3g1v.cpp:12:9:\
    \ error: \u2018s\u2019 was not declared in this scope\n   12 |  return s.size();\n\
    \      |         ^\n"
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        if(s.find(string[i]) ==\
    \ s.end()){\n            s.insert(string[i]);\n        }\n    }\n    return s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmptztktlf8: /tmp/tmptztktlf8.cpp:21: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    assert(string\
    \ != \"\");\n    long count = 0;\n    for (char c : string) {\n        if (string.find(c)\
    \ != string.rfind(c))\n            count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpus84y6f1: /tmp/tmpus84y6f1.cpp:9: long int count_distinct_characters(std::string):
    Assertion `string != ""'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ your solution goes here\n\tunordered_set<char> distinct;\n\tfor (auto i : string)\
    \ {\n\t\tdistinct.insert(tolower(i));\n\t}\n\treturn distinct.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4l4l4__i.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp4l4l4__i.cpp:10:2: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope\n   10 |  unordered_set<char> distinct;\n      |  ^~~~~~~~~~~~~\n\
    /tmp/tmp4l4l4__i.cpp:10:2: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp4l4l4__i.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note:   \u2018std::unordered_set\u2019\n   97 |     class unordered_set\n  \
    \    |           ^~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp4l4l4__i.cpp:2:\n/usr/include/c++/9/unordered_set:68:13:\
    \ note:   \u2018std::pmr::unordered_set\u2019\n   68 |       using unordered_set\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmp4l4l4__i.cpp:10:16: error: expected\
    \ primary-expression before \u2018char\u2019\n   10 |  unordered_set<char> distinct;\n\
    \      |                ^~~~\n/tmp/tmp4l4l4__i.cpp:12:3: error: \u2018distinct\u2019\
    \ was not declared in this scope\n   12 |   distinct.insert(tolower(i));\n   \
    \   |   ^~~~~~~~\n/tmp/tmp4l4l4__i.cpp:14:9: error: \u2018distinct\u2019 was not\
    \ declared in this scope\n   14 |  return distinct.size();\n      |         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660143094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    if(string.length()==0)\n\
    \        return 0;\n    if(string.length()==1)\n        return 1;\n    int count=0;\n\
    \    int n=string.length();\n    bool flag=false;\n    int hash[26]={0};\n   \
    \ for(int i=0;i<n;i++)\n    {\n        flag=false;\n        if(string[i]>='a'\
    \ && string[i]<='z')\n        {\n            if(hash[string[i]-'a']==0)\n    \
    \        {\n                count++;\n                hash[string[i]-'a']=1;\n\
    \            }\n            flag=true;\n        }\n        if(string[i]>='A' &&\
    \ string[i]<='Z')\n        {\n            if(hash[string[i]-'A']==0)\n       \
    \     {\n                count++;\n                hash[string[i]-'A']=1;\n  \
    \          }\n            flag=true;\n        }\n        if(flag==false)\n   \
    \         continue;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpcjfpu9qw: /tmp/tmpcjfpu9qw.cpp:49: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]>=97\
    \ && string[i]<=122){\n            for(int j=0;j<i;j++){\n                if(string[j]==string[i]){\n\
    \                    break;\n                }\n                if(j==i-1){\n\
    \                    count+=1;\n                }\n            }\n        }\n\
    \        else if(string[i]>=65 && string[i]<=90){\n            for(int j=0;j<i;j++){\n\
    \                if(string[j]==string[i]){\n                    break;\n     \
    \           }\n                if(j==i-1){\n                    count+=1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpgj4nzjlb: /tmp/tmpgj4nzjlb.cpp:37: int main(): Assertion `candidate(("abcde"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::vector<bool>\
    \ arr (256, false);\n\tlong count = 0;\n\tfor (long i = 0; i < string.length();\
    \ i++) {\n\t\tif (arr[tolower(string[i])] == false) {\n\t\t\tarr[tolower(string[i])]\
    \ = true;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660143095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ n = string.length();\n    bool character_seen[256] = {false};\n    for (long\
    \ i = 0; i < n; i++) {\n        character_seen[string[i]] = true;\n    }\n   \
    \ long count = 0;\n    for (long i = 0; i < 256; i++) {\n        if (character_seen[i])\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpk3u8vpkl: /tmp/tmpk3u8vpkl.cpp:26: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660143095
