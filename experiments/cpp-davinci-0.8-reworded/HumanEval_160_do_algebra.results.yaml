language: cpp
name: HumanEval_160_do_algebra
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    int i = 0;\n    long ans = operand[0];\n    for(i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            ans += operand[i+1];\n   \
    \     }\n        else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpdjfhyujg: /tmp/tmpdjfhyujg.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpj0r3zn54: /tmp/tmpj0r3zn54.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tint n = op.size();\n\tassert(n == operand.size() - 1);\n\tlong\
    \ dp[n + 1][n + 1];\n\tfor (int i = 0; i <= n; i++) {\n\t\tfor (int j = 0; j <=\
    \ n; j++) {\n\t\t\tdp[i][j] = 0;\n\t\t}\n\t}\n\tint h = n;\n\twhile (h > 0) {\n\
    \t\tfor (int i = 0; i < n - h + 1; i++) {\n\t\t\tif (h == 1) {\n\t\t\t\tif (op[i]\
    \ == \"+\") dp[i][i + 1] = operand[i] + operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"-\") dp[i][i + 1] = operand[i] - operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"*\") dp[i][i + 1] = operand[i] * operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"//\") dp[i][i + 1] = operand[i] / operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"**\") dp[i][i + 1] = pow(operand[i], operand[i + 1]);\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tfor (int j = i; j < i + h; j++) {\n\t\t\t\t\tlong left = dp[i][j];\n\
    \t\t\t\t\tlong right = dp[j + 1][i + h];\n\t\t\t\t\tlong ans = 0;\n\t\t\t\t\t\
    if (op[j] == \"+\") ans = left + right;\n\t\t\t\t\telse if (op[j] == \"-\") ans\
    \ = left - right;\n\t\t\t\t\telse if (op[j] == \"*\") ans = left * right;\n\t\t\
    \t\t\telse if (op[j] == \"//\") ans = left / right;\n\t\t\t\t\telse if (op[j]\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmperni0nxl.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmperni0nxl.cpp:49:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   49 |      else if (op[j]\n    \
    \  |              ~     ^\n      |                    )\n   50 | }\n      | ~\
    \                   \n/tmp/tmperni0nxl.cpp:50:1: error: could not convert \u2018\
    op.std::vector<std::__cxx11::basic_string<char> >::operator[](((std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type)j))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n   50 | }\n      | ^\n      | |\n      | __gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmperni0nxl.cpp:50:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n/tmp/tmperni0nxl.cpp:51:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   51 | int main() {\n      |            ^\n\
    /tmp/tmperni0nxl.cpp:56:1: error: expected \u2018}\u2019 at end of input\n   56\
    \ | }\n      | ^\n/tmp/tmperni0nxl.cpp:40:9: note: to match this \u2018{\u2019\
    \n   40 |    else {\n      |         ^\n/tmp/tmperni0nxl.cpp:56:1: error: expected\
    \ \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmperni0nxl.cpp:32:39:\
    \ note: to match this \u2018{\u2019\n   32 |   for (int i = 0; i < n - h + 1;\
    \ i++) {\n      |                                       ^\n/tmp/tmperni0nxl.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmperni0nxl.cpp:31:16:\
    \ note: to match this \u2018{\u2019\n   31 |  while (h > 0) {\n      |       \
    \         ^\n/tmp/tmperni0nxl.cpp:56:1: error: expected \u2018}\u2019 at end of\
    \ input\n   56 | }\n      | ^\n/tmp/tmperni0nxl.cpp:21:73: note: to match this\
    \ \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n      |                                                        \
    \                 ^\n/tmp/tmperni0nxl.cpp:56:1: warning: control reaches end of\
    \ non-void"
  stdout: ''
  timestamp: 1660065077
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> stack;\n\tint last = operand.size() - 1;\n\t\
    for (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"**\") {\n\t\t\tlong\
    \ l = stack.top();\n\t\t\tstack.pop();\n\t\t\tstack.push(pow(l, operand[last -\
    \ i]));\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong l = stack.top();\n\
    \t\t\tstack.pop();\n\t\t\tstack.push(l / operand[last - i]);\n\t\t}\n\t\telse\
    \ if (op[i] == \"*\") {\n\t\t\tlong l = stack.top();\n\t\t\tstack.pop();\n\t\t\
    \tstack.push(l * operand[last - i]);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\
    \t\tlong l = stack.top();\n\t\t\tstack.pop();\n\t\t\tstack.push(l - operand[last\
    \ - i]);\n\t\t}\n\t\telse if (op[i] == \"+\") {\n\t\t\tlong l = stack.top();\n\
    \t\t\tstack.pop();\n\t\t\tstack.push(l + operand[last - i]);\n\t\t}\n\t\telse\
    \ {\n\t\t\tstack.push(operand[last - i]);\n\t\t}\n\t}\n\treturn stack.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065078
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // add code here\n    std::stack<long> s;\n    for(int i=0;i<op.size();i++){\n\
    \        if(op[i]==\"+\"){\n            int ele1=s.top();\n            s.pop();\n\
    \            int ele2=s.top();\n            s.pop();\n            s.push(ele1+ele2);\n\
    \        }\n        else if(op[i]==\"-\"){\n            int ele1=s.top();\n  \
    \          s.pop();\n            int ele2=s.top();\n            s.pop();\n   \
    \         s.push(ele2-ele1);\n        }\n        else if(op[i]==\"*\"){\n    \
    \        int ele1=s.top();\n            s.pop();\n            int ele2=s.top();\n\
    \            s.pop();\n            s.push(ele1*ele2);\n        }\n        else\
    \ if(op[i]==\"//\"){\n            int ele1=s.top();\n            s.pop();\n  \
    \          int ele2=s.top();\n            s.pop();\n            s.push(ele2/ele1);\n\
    \        }\n        else if(op[i]==\"**\"){\n            int ele1=s.top();\n \
    \           s.pop();\n            int ele2=s.top();\n            s.pop();\n  \
    \          s.push(pow(ele2,ele1));\n        }\n        else{\n            s.push(operand[i]);\n\
    \        }\n    }\n    return s.top();\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpj0r3zn54: /tmp/tmpj0r3zn54.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // insert your code here\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    return 0;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpgzoo2tgb: /tmp/tmpgzoo2tgb.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpj0r3zn54: /tmp/tmpj0r3zn54.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    assert(op.size() == operand.size() - 1);\n    assert(op.size()\
    \ >= 1);\n    assert(operand.size() >= 2);\n    std::stack<long> s;\n    for (int\
    \ i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n            long\
    \ sum = s.top();\n            s.pop();\n            sum += operand[i+1];\n   \
    \         s.push(sum);\n        } else if (op[i] == \"-\") {\n            long\
    \ diff = s.top();\n            s.pop();\n            diff -= operand[i+1];\n \
    \           s.push(diff);\n        } else if (op[i] == \"*\") {\n            long\
    \ prod = s.top();\n            s.pop();\n            prod *= operand[i+1];\n \
    \           s.push(prod);\n        } else if (op[i] == \"//\") {\n           \
    \ long quot = s.top();\n            s.pop();\n            quot /= operand[i+1];\n\
    \            s.push(quot);\n        } else if (op[i] == \"**\") {\n          \
    \  long exp = s.top();\n            s.pop();\n            exp = pow(exp, operand[i+1]);\n\
    \            s.push(exp);\n        }\n    }\n    return s.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  \n  // YOUR CODE HERE\n  long res = operand[0];\n  std::cout <<\
    \ res << std::endl;\n  int n = op.size();\n  for(int i = 0; i < n; i++){\n   \
    \ if(op[i] == \"+\"){\n      res += operand[i+1];\n    }\n    else if(op[i] ==\
    \ \"-\"){\n      res -= operand[i+1];\n    }\n    else if(op[i] == \"*\"){\n \
    \     res *= operand[i+1];\n    }\n    else if(op[i] == \"//\"){\n      res /=\
    \ operand[i+1];\n    }\n    else if(op[i] == \"**\"){\n      res = pow(res, operand[i+1]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp22t3bjru: /tmp/tmp22t3bjru.cpp:49: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: '2

    2

    '
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tassert(op.size() == operand.size() - 1);\n\tlong answer = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tanswer\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tanswer -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tanswer *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tanswer /= operand[i + 1];\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tanswer = pow(answer, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpiouphk7i: /tmp/tmpiouphk7i.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> num;\n  std::stack<std::string> sign;\n  long\
    \ num1, num2;\n  std::string opr;\n  long result = 0;\n  std::string sgn = \"\"\
    ;\n  // check if the vector size is correct\n  if ((op.size() + 1) != operand.size())\
    \ {\n    std::cout << \"ERROR!!!!\" << std::endl;\n    return 0;\n  }\n  int i\
    \ = operand.size() - 1;\n  // push the first operand to num stack\n  num.push(operand[i]);\n\
    \  // push the first sign to sign stack\n  sign.push(op[i - 1]);\n  // remove\
    \ the first operand from operand vector\n  operand.pop_back();\n  i--;\n  // iterate\
    \ through the operators and operands\n  while (i != 0) {\n    if (op[i - 1] ==\
    \ \"-\" || op[i - 1] == \"+\") {\n      if (sign.top() == \"-\" || sign.top()\
    \ == \"+\") {\n        opr = sign.top();\n        sign.pop();\n        num1 =\
    \ num.top();\n        num.pop();\n        num2 = operand[i];\n        num.push(evaluate(num1,\
    \ num2, opr));\n        sign.push(op[i - 1]);\n      } else {\n        sign.push(op[i\
    \ - 1]);\n        num.push(operand[i]);\n      }\n    } else if (op[i - 1] ==\
    \ \"//\" || op[i - 1] == \"*\" || op[i - 1] == \"**\") {\n      if (sign.top()\
    \ == \"//\" || sign.top() == \"*\" || sign.top() == \"**\") {\n        opr = sign.top();\n\
    \        sign.pop();\n        num1 = num.top();\n        num.pop();\n        num2\
    \ = operand[i];\n        num.push(evaluate(num1, num2, opr));\n        sign.push(op[i\
    \ - 1]);\n      } else {\n        sign.push(op[i - 1]);\n}\nint main() {\n   \
    \ auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsyd1moq.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpqsyd1moq.cpp:50:18: error: \u2018\
    evaluate\u2019 was not declared in this scope\n   50 |         num.push(evaluate(num1,\
    \ num2, opr));\n      |                  ^~~~~~~~\n/tmp/tmpqsyd1moq.cpp:63:18:\
    \ error: \u2018evaluate\u2019 was not declared in this scope\n   63 |        \
    \ num.push(evaluate(num1, num2, opr));\n      |                  ^~~~~~~~\n/tmp/tmpqsyd1moq.cpp:68:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   68 | int main() {\n      |            ^\n/tmp/tmpqsyd1moq.cpp:73:1: error:\
    \ expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpqsyd1moq.cpp:56:76:\
    \ note: to match this \u2018{\u2019\n   56 |     } else if (op[i - 1] == \"//\"\
    \ || op[i - 1] == \"*\" || op[i - 1] == \"**\") {\n      |                   \
    \                                                         ^\n/tmp/tmpqsyd1moq.cpp:73:1:\
    \ error: expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpqsyd1moq.cpp:42:18:\
    \ note: to match this \u2018{\u2019\n   42 |   while (i != 0) {\n      |     \
    \             ^\n/tmp/tmpqsyd1moq.cpp:73:1: error: expected \u2018}\u2019 at end\
    \ of input\n   73 | }\n      | ^\n/tmp/tmpqsyd1moq.cpp:21:73: note: to match this\
    \ \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n      |                                                        \
    \                 ^\n/tmp/tmpqsyd1moq.cpp:73:1: warning: control reaches end of\
    \ non-void function [-Wreturn-type]\n   73 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660065077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\t// To print results to the standard\
    \ output you can use std::cout\n\t// Example: std::cout << \"Hello world!\";\n\
    \tlong res = operand[0];\n\tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i]\
    \ == \"+\")\n\t\t\tres += operand[i + 1];\n\t\telse if (op[i] == \"-\")\n\t\t\t\
    res -= operand[i + 1];\n\t\telse if (op[i] == \"*\")\n\t\t\tres *= operand[i +\
    \ 1];\n\t\telse if (op[i] == \"//\")\n\t\t\tres /= operand[i + 1];\n\t\telse if\
    \ (op[i] == \"**\")\n\t\t\tres = pow(res, operand[i + 1]);\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbi03dx8q: /tmp/tmpbi03dx8q.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here.\n\tint n = op.size();\n\tlong res;\n\t\
    for (int i = 0; i < n; i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\toperand[i + 1]\
    \ = operand[i] + operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\t\
    operand[i + 1] = operand[i] - operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    *\") {\n\t\t\toperand[i + 1] = operand[i] * operand[i + 1];\n\t\t}\n\t\telse if\
    \ (op[i] == \"//\") {\n\t\t\toperand[i + 1] = operand[i] / operand[i + 1];\n\t\
    \t}\n\t\telse if (op[i] == \"**\") {\n\t\t\toperand[i + 1] = pow(operand[i], operand[i\
    \ + 1]);\n\t\t}\n\t}\n\tres = operand[n];\n\treturn res;\n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbswgph1w: /tmp/tmpbswgph1w.cpp:48: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // cout << \"Operators are: \";\n    // for (auto op: op) {\n\
    \    //     cout << op << \" \";\n    // }\n    // cout << endl;\n    // cout\
    \ << \"Operands are: \";\n    // for (auto operand: operand) {\n    //     cout\
    \ << operand << \" \";\n    // }\n    // cout << endl;\n    long result = operand[0];\n\
    \    for (int i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n  \
    \          result += operand[i+1];\n        } else if (op[i] == \"-\") {\n   \
    \         result -= operand[i+1];\n        } else if (op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        } else if (op[i] == \"//\") {\n    \
    \        result /= operand[i+1];\n        } else if (op[i] == \"**\") {\n    \
    \        result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpvc7svap7: /tmp/tmpvc7svap7.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\
    \t\tif (op[i] == \"+\") {\n\t\t\tst.push(operand[i + 1] + operand[i]);\n\t\t}\n\
    \t\telse if (op[i] == \"-\") {\n\t\t\tst.push(operand[i] - operand[i + 1]);\n\t\
    \t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tst.push(operand[i] * operand[i + 1]);\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tst.push(operand[i] / operand[i +\
    \ 1]);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tst.push(pow(operand[i],\
    \ operand[i + 1]));\n\t\t}\n\t}\n\treturn st.top();\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp7fug0ila: /tmp/tmp7fug0ila.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  long answer=0;\n  while(op.size()>0){\n \
    \   if(op[0]==\"//\"){\n      int a=operand[0];\n      int b=operand[1];\n   \
    \   answer=a/b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"**\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=pow(a,b);\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"*\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=a*b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"+\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=a+b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"-\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=a-b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else{\n      break\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfgohren.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpjfgohren.cpp:71:12: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   71 |       break\n      |     \
    \       ^\n      |            ;\n   72 | }\n      | ~           \n/tmp/tmpjfgohren.cpp:73:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   73 | int main() {\n      |            ^\n/tmp/tmpjfgohren.cpp:78:1: error:\
    \ expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpjfgohren.cpp:24:21:\
    \ note: to match this \u2018{\u2019\n   24 |   while(op.size()>0){\n      |  \
    \                   ^\n/tmp/tmpjfgohren.cpp:78:1: error: expected \u2018}\u2019\
    \ at end of input\n   78 | }\n      | ^\n/tmp/tmpjfgohren.cpp:21:73: note: to\
    \ match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string> op,\
    \ std::vector<long> operand) {\n      |                                      \
    \                                   ^\n/tmp/tmpjfgohren.cpp:78:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   78 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660065077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpj0r3zn54: /tmp/tmpj0r3zn54.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  int n = op.size();\n  long res = operand[0];\n  for(int i = 0;\
    \ i < n; i++) {\n    if(op[i] == \"+\") res += operand[i+1];\n    else if(op[i]\
    \ == \"-\") res -= operand[i+1];\n    else if(op[i] == \"*\") res *= operand[i+1];\n\
    \    else if(op[i] == \"//\") res /= operand[i+1];\n    else if(op[i] == \"**\"\
    ) res = std::pow(res, operand[i+1]);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpjxffymwt: /tmp/tmpjxffymwt.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\tlong ans = operand[0];\n\tfor (int\
    \ i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\")\n\t\t\tans += operand[i\
    \ + 1];\n\t\telse if (op[i] == \"-\")\n\t\t\tans -= operand[i + 1];\n\t\telse\
    \ if (op[i] == \"*\")\n\t\t\tans *= operand[i + 1];\n\t\telse if (op[i] == \"\
    //\")\n\t\t\tans /= operand[i + 1];\n\t\telse if (op[i] == \"**\")\n\t\t\tans\
    \ = pow(ans, operand[i + 1]);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp6stjgamn: /tmp/tmp6stjgamn.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> result;\n    long operand1, operand2;\n   \
    \ for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n       \
    \     operand1 = result.top();\n            result.pop();\n            operand2\
    \ = result.top();\n            result.pop();\n            result.push(operand1\
    \ + operand2);\n        }\n        else if(op[i] == \"-\") {\n            operand1\
    \ = result.top();\n            result.pop();\n            operand2 = result.top();\n\
    \            result.pop();\n            result.push(operand1 - operand2);\n  \
    \      }\n        else if(op[i] == \"*\") {\n            operand1 = result.top();\n\
    \            result.pop();\n            operand2 = result.top();\n           \
    \ result.pop();\n            result.push(operand1 * operand2);\n        }\n  \
    \      else if(op[i] == \"//\") {\n            operand1 = result.top();\n    \
    \        result.pop();\n            operand2 = result.top();\n            result.pop();\n\
    \            result.push(operand1 / operand2);\n        }\n        else if(op[i]\
    \ == \"**\") {\n            operand1 = result.top();\n            result.pop();\n\
    \            operand2 = result.top();\n            result.pop();\n           \
    \ result.push(pow(operand1, operand2));\n        }\n        else {\n         \
    \   result.push(operand[i]);\n        }\n    }\n    return result.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = std::pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptfh762po: /tmp/tmptfh762po.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi24mb5j_: /tmp/tmpi24mb5j_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Implement this function\n    stack<long> myStack;\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(myStack.size() < 2){\n            myStack.push(operand[i]);\n\
    \        }\n        else{\n            long operand1 = myStack.top();\n      \
    \      myStack.pop();\n            long operand2 = myStack.top();\n          \
    \  myStack.pop();\n            if(op[i] == \"+\")\n                myStack.push(operand1\
    \ + operand2);\n            else if(op[i] == \"-\")\n                myStack.push(operand1\
    \ - operand2);\n            else if(op[i] == \"*\")\n                myStack.push(operand1\
    \ * operand2);\n            else if(op[i] == \"//\")\n                myStack.push(operand1\
    \ / operand2);\n            else if(op[i] == \"**\")\n                myStack.push(pow(operand1,\
    \ operand2));\n        }\n    }\n    long res = myStack.top();\n    myStack.pop();\n\
    \    assert(myStack.empty());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqfgcq7h.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpzqfgcq7h.cpp:23:5: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   23\
    \ |     stack<long> myStack;\n      |     ^~~~~\n      |     std::stack\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpzqfgcq7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpzqfgcq7h.cpp:23:11: error: expected primary-expression\
    \ before \u2018long\u2019\n   23 |     stack<long> myStack;\n      |         \
    \  ^~~~\n/tmp/tmpzqfgcq7h.cpp:25:12: error: \u2018myStack\u2019 was not declared\
    \ in this scope\n   25 |         if(myStack.size() < 2){\n      |            ^~~~~~~\n\
    /tmp/tmpzqfgcq7h.cpp:45:16: error: \u2018myStack\u2019 was not declared in this\
    \ scope\n   45 |     long res = myStack.top();\n      |                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        long curr_val = operand[i+1];\n        if(op[i] == \"+\")\n\
    \            result += curr_val;\n        else if(op[i] == \"-\")\n          \
    \  result -= curr_val;\n        else if(op[i] == \"*\")\n            result *=\
    \ curr_val;\n        else if(op[i] == \"//\")\n            result /= curr_val;\n\
    \        else if(op[i] == \"**\")\n            result = std::pow(result, curr_val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpt_0uwqko: /tmp/tmpt_0uwqko.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long a = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            a += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            a -= operand[i+1];\n        }\n\
    \        else if(op[i] == \"*\") {\n            a *= operand[i+1];\n        }\n\
    \        else if(op[i] == \"//\") {\n            a /= operand[i+1];\n        }\n\
    \        else if(op[i] == \"**\") {\n            a = pow(a, operand[i+1]);\n \
    \       }\n    }\n    return a;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp4axdh6xu: /tmp/tmp4axdh6xu.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n   // Function to do algebra \n   // fill in code here\n    std::stack<long>\
    \ st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"//\"){\n       \
    \     long a = st.top();\n            st.pop();\n            st.push(a/operand[i+1]);\n\
    \        }\n        else if(op[i]==\"**\"){\n            long a = st.top();\n\
    \            st.pop();\n            st.push(std::pow(a,operand[i+1]));\n     \
    \   }\n        else{\n            st.push(operand[i]);\n        }\n    }\n   \
    \ long result = st.top();\n    st.pop();\n    while(!st.empty()){\n        if(op[op.size()-1]==\"\
    +\"){\n            result += st.top();\n        }\n        else if(op[op.size()-1]==\"\
    -\"){\n            result -= st.top();\n        }\n        else if(op[op.size()-1]==\"\
    *\"){\n            result *= st.top();\n        }\n        st.pop();\n       \
    \ op.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065079
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  std::stack<long> st;\n  for(int i=0;i<op.size();i++){\n\
    \    // std::cout<<st.top()<<std::endl;\n    if(op[i]==\"*\"){\n      long val=st.top();\n\
    \      st.pop();\n      st.push(val*operand[i+1]);\n    }\n    else if(op[i]==\"\
    +\"){\n      long val=st.top();\n      st.pop();\n      st.push(val+operand[i+1]);\n\
    \    }\n    else if(op[i]==\"-\"){\n      long val=st.top();\n      st.pop();\n\
    \      st.push(val-operand[i+1]);\n    }\n    else if(op[i]==\"//\"){\n      long\
    \ val=st.top();\n      st.pop();\n      st.push(val/operand[i+1]);\n    }\n  \
    \  else if(op[i]==\"**\"){\n      long val=st.top();\n      st.pop();\n      st.push(pow(val,operand[i+1]));\n\
    \    }\n    else{\n      st.push(operand[i]);\n    }\n  }\n  return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ans=operand[0];\n    for(int i=0;i<op.size();i++)\n   \
    \ {\n        if(op[i]==\"+\")\n        {\n            ans+=operand[i+1];\n   \
    \     }\n        else if(op[i]==\"-\")\n        {\n            ans-=operand[i+1];\n\
    \        }\n        else if(op[i]==\"*\")\n        {\n            ans*=operand[i+1];\n\
    \        }\n        else if(op[i]==\"//\")\n        {\n            ans/=operand[i+1];\n\
    \        }\n        else if(op[i]==\"**\")\n        {\n            ans=pow(ans,operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp24vdl3lz: /tmp/tmp24vdl3lz.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpj0r3zn54: /tmp/tmpj0r3zn54.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\tlong result = operand[0];\n\tfor (int\
    \ i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\
    \t\telse if (op[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\t\
    else if (op[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t\
    }\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmphj5vl36z: /tmp/tmphj5vl36z.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    stack<char> s;\n    stack<int> ns;\n    int n=operand.size();\n\
    \    char ch;\n    int x,y;\n    long ans;\n    for(int i=0;i<n-1;i++){\n    \
    \  ch=op[i][0];\n      if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^'){\n\
    \        x=ns.top();\n        ns.pop();\n        y=ns.top();\n        ns.pop();\n\
    \        if(ch=='+') ns.push(x+y);\n        else if(ch=='-') ns.push(y-x);\n \
    \       else if(ch=='*') ns.push(x*y);\n        else if(ch=='/') ns.push(y/x);\n\
    \        else if(ch=='^') ns.push(pow(y,x));\n      }\n      else{\n        ns.push(operand[i]);\n\
    \      }\n    }\n    ans=ns.top();\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fohylm_.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp5fohylm_.cpp:22:5: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   22\
    \ |     stack<char> s;\n      |     ^~~~~\n      |     std::stack\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp5fohylm_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp5fohylm_.cpp:22:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   22 |     stack<char> s;\n      |           ^~~~\n\
    /tmp/tmp5fohylm_.cpp:23:11: error: expected primary-expression before \u2018int\u2019\
    \n   23 |     stack<int> ns;\n      |           ^~~\n/tmp/tmp5fohylm_.cpp:31:11:\
    \ error: \u2018ns\u2019 was not declared in this scope; did you mean \u2018ans\u2019\
    ?\n   31 |         x=ns.top();\n      |           ^~\n      |           ans\n\
    /tmp/tmp5fohylm_.cpp:42:9: error: \u2018ns\u2019 was not declared in this scope;\
    \ did you mean \u2018ans\u2019?\n   42 |         ns.push(operand[i]);\n      |\
    \         ^~\n      |         ans\n/tmp/tmp5fohylm_.cpp:45:9: error: \u2018ns\u2019\
    \ was not declared in this scope; did you mean \u2018ans\u2019?\n   45 |     ans=ns.top();\n\
    \      |         ^~\n      |         ans\n"
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // NOTE: please don't modify input \n    long res = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        res += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n\
    \            res -= operand[i+1];\n        }\n        else if(op[i] == \"*\")\
    \ {\n            res *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\") {\n            res /= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"**\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpgdypvky4: /tmp/tmpgdypvky4.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> s;\n\tfor (int i = 0; i < op.size(); i++) {\n\
    \t\tif (op[i] == \"+\") {\n\t\t\tlong a = s.top();\n\t\t\ts.pop();\n\t\t\tlong\
    \ b = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(a + b);\n\t\t}\n\t\telse if (op[i]\
    \ == \"-\") {\n\t\t\tlong a = s.top();\n\t\t\ts.pop();\n\t\t\tlong b = s.top();\n\
    \t\t\ts.pop();\n\t\t\ts.push(b - a);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\
    \t\tlong a = s.top();\n\t\t\ts.pop();\n\t\t\tlong b = s.top();\n\t\t\ts.pop();\n\
    \t\t\ts.push(a * b);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong a = s.top();\n\
    \t\t\ts.pop();\n\t\t\tlong b = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(b / a);\n\
    \t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = s.top();\n\t\t\ts.pop();\n\
    \t\t\tlong b = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(pow(b, a));\n\t\t}\n\t\t\
    else {\n\t\t\ts.push(operand[i]);\n\t\t}\n\t}\n\treturn s.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstack<long> s;\n\tfor (int i = 0; i < op.size(); i++) {\n\t\t\
    if (op[i] == \"+\") {\n\t\t\tlong n1 = s.top();\n\t\t\ts.pop();\n\t\t\tlong n2\
    \ = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(n1 + n2);\n\t\t}\n\t\telse if (op[i]\
    \ == \"-\") {\n\t\t\tlong n1 = s.top();\n\t\t\ts.pop();\n\t\t\tlong n2 = s.top();\n\
    \t\t\ts.pop();\n\t\t\ts.push(n2 - n1);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\
    \t\t\tlong n1 = s.top();\n\t\t\ts.pop();\n\t\t\tlong n2 = s.top();\n\t\t\ts.pop();\n\
    \t\t\ts.push(n1 * n2);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong n1\
    \ = s.top();\n\t\t\ts.pop();\n\t\t\tlong n2 = s.top();\n\t\t\ts.pop();\n\t\t\t\
    s.push(n2 / n1);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong n1 = s.top();\n\
    \t\t\ts.pop();\n\t\t\tlong n2 = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(pow(n2,\
    \ n1));\n\t\t}\n\t\telse {\n\t\t\ts.push(operand[i]);\n\t\t}\n\t}\n\treturn s.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemnyvbb8.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpemnyvbb8.cpp:22:2: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   22\
    \ |  stack<long> s;\n      |  ^~~~~\n      |  std::stack\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpemnyvbb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpemnyvbb8.cpp:22:8: error: expected primary-expression\
    \ before \u2018long\u2019\n   22 |  stack<long> s;\n      |        ^~~~\n/tmp/tmpemnyvbb8.cpp:25:14:\
    \ error: \u2018s\u2019 was not declared in this scope\n   25 |    long n1 = s.top();\n\
    \      |              ^\n/tmp/tmpemnyvbb8.cpp:32:14: error: \u2018s\u2019 was\
    \ not declared in this scope\n   32 |    long n1 = s.top();\n      |         \
    \     ^\n/tmp/tmpemnyvbb8.cpp:39:14: error: \u2018s\u2019 was not declared in\
    \ this scope\n   39 |    long n1 = s.top();\n      |              ^\n/tmp/tmpemnyvbb8.cpp:46:14:\
    \ error: \u2018s\u2019 was not declared in this scope\n   46 |    long n1 = s.top();\n\
    \      |              ^\n/tmp/tmpemnyvbb8.cpp:53:14: error: \u2018s\u2019 was\
    \ not declared in this scope\n   53 |    long n1 = s.top();\n      |         \
    \     ^\n/tmp/tmpemnyvbb8.cpp:60:4: error: \u2018s\u2019 was not declared in this\
    \ scope\n   60 |    s.push(operand[i]);\n      |    ^\n/tmp/tmpemnyvbb8.cpp:63:9:\
    \ error: \u2018s\u2019 was not declared in this scope\n   63 |  return s.top();\n\
    \      |         ^\n"
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code here\n    std::stack<int> operations;\n    std::stack<int>\
    \ operands;\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"\
    ){\n            operations.push(1);\n        }\n        else if(op[i] == \"-\"\
    ){\n            operations.push(2);\n        }\n        else if(op[i] == \"*\"\
    ){\n            operations.push(3);\n        }\n        else if(op[i] == \"//\"\
    ){\n            operations.push(4);\n        }\n        else if(op[i] == \"**\"\
    ){\n            operations.push(5);\n        }\n    }\n    for(int i = 0; i <\
    \ operand.size(); i++){\n        operands.push(operand[i]);\n    }\n    int top;\n\
    \    int x, y;\n    while(!operations.empty()){\n        top = operations.top();\n\
    \        operations.pop();\n        x = operands.top();\n        operands.pop();\n\
    \        y = operands.top();\n        operands.pop();\n        if(top == 1){\n\
    \            operands.push(x + y);\n        }\n        else if(top == 2){\n  \
    \          operands.push(y - x);\n        }\n        else if(top == 3){\n    \
    \        operands.push(x * y);\n        }\n        else if(top == 4){\n      \
    \      operands.push(y / x);\n        }\n        else if(top == 5){\n        \
    \    operands.push(pow(y, x));\n        }\n    }\n    return operands.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp5o3tr868: /tmp/tmp5o3tr868.cpp:74: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\t\t\
    if (op[i] == \"+\") {\n\t\t\tlong x = st.top();\n\t\t\tst.pop();\n\t\t\tlong y\
    \ = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(x + y);\n\t\t}\n\t\telse if (op[i]\
    \ == \"-\") {\n\t\t\tlong x = st.top();\n\t\t\tst.pop();\n\t\t\tlong y = st.top();\n\
    \t\t\tst.pop();\n\t\t\tst.push(y - x);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\
    \t\t\tlong x = st.top();\n\t\t\tst.pop();\n\t\t\tlong y = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(x * y);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong x =\
    \ st.top();\n\t\t\tst.pop();\n\t\t\tlong y = st.top();\n\t\t\tst.pop();\n\t\t\t\
    st.push(y / x);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong x = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong y = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(y,\
    \ x));\n\t\t}\n\t\telse {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw90bh3_.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpuw90bh3_.cpp:22:2: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   22\
    \ |  stack<long> st;\n      |  ^~~~~\n      |  std::stack\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpuw90bh3_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpuw90bh3_.cpp:22:8: error: expected primary-expression\
    \ before \u2018long\u2019\n   22 |  stack<long> st;\n      |        ^~~~\n/tmp/tmpuw90bh3_.cpp:25:13:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   25 |    long x = st.top();\n      |             ^~\n      |            \
    \ std\n/tmp/tmpuw90bh3_.cpp:32:13: error: \u2018st\u2019 was not declared in this\
    \ scope; did you mean \u2018std\u2019?\n   32 |    long x = st.top();\n      |\
    \             ^~\n      |             std\n/tmp/tmpuw90bh3_.cpp:39:13: error:\
    \ \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   39 |    long x = st.top();\n      |             ^~\n      |            \
    \ std\n/tmp/tmpuw90bh3_.cpp:46:13: error: \u2018st\u2019 was not declared in this\
    \ scope; did you mean \u2018std\u2019?\n   46 |    long x = st.top();\n      |\
    \             ^~\n      |             std\n/tmp/tmpuw90bh3_.cpp:53:13: error:\
    \ \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   53 |    long x = st.top();\n      |             ^~\n      |            \
    \ std\n/tmp/tmpuw90bh3_.cpp:60:4: error: \u2018st\u2019 was not declared in this\
    \ scope; did you mean \u2018std\u2019?\n   60 |    st.push(operand[i]);\n    \
    \  |    ^~\n      |    std\n/tmp/tmpuw90bh3_.cpp:63:9: error: \u2018st\u2019 was\
    \ not declared in this scope; did you mean \u2018std\u2019?\n   63 |  return st.top();\n\
    \      |         ^~\n      |         std\n"
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  assert(op.size()==operand.size()-1);\n  assert(op.size()>0);\n\
    \  assert(operand.size()>1);\n  std::stack<long> s;\n  long value = operand[0];\n\
    \  for(int i=0;i<op.size();i++){\n    long oper2 = operand[i+1];\n    if(op[i]==\"\
    +\"){\n      value += oper2;\n    }else if(op[i]==\"-\"){\n      value -= oper2;\n\
    \    }else if(op[i]==\"*\"){\n      value *= oper2;\n    }else if(op[i]==\"//\"\
    ){\n      value /= oper2;\n    }else if(op[i]==\"**\"){\n      value = pow(value,oper2);\n\
    \    }\n  }\n  return value;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp661tbl7t: /tmp/tmp661tbl7t.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    long n = operand.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(i == 0) {\n            s.push(operand[i]);\n\
    \        } else {\n            if(op[i-1] == \"+\") {\n                s.push(s.top()\
    \ + operand[i]);\n            } else if(op[i-1] == \"-\") {\n                s.push(s.top()\
    \ - operand[i]);\n            } else if(op[i-1] == \"*\") {\n                s.push(s.top()\
    \ * operand[i]);\n            } else if(op[i-1] == \"//\") {\n               \
    \ s.push(s.top() / operand[i]);\n            } else if(op[i-1] == \"**\") {\n\
    \                s.push(pow(s.top(), operand[i]));\n            }\n        }\n\
    \    }\n    return s.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv049epyq: /tmp/tmpv049epyq.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  op.size();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpnjyc1s1q: /tmp/tmpnjyc1s1q.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> s;\n\tint i = 0;\n\tfor (auto x : op) {\n\t\t\
    if (x == \"+\") {\n\t\t\tauto a = s.top();\n\t\t\ts.pop();\n\t\t\tauto b = operand[i];\n\
    \t\t\ts.push(a + b);\n\t\t}\n\t\telse if (x == \"-\") {\n\t\t\tauto a = s.top();\n\
    \t\t\ts.pop();\n\t\t\tauto b = operand[i];\n\t\t\ts.push(a - b);\n\t\t}\n\t\t\
    else if (x == \"*\") {\n\t\t\tauto a = s.top();\n\t\t\ts.pop();\n\t\t\tauto b\
    \ = operand[i];\n\t\t\ts.push(a * b);\n\t\t}\n\t\telse if (x == \"//\") {\n\t\t\
    \tauto a = s.top();\n\t\t\ts.pop();\n\t\t\tauto b = operand[i];\n\t\t\ts.push(a\
    \ / b);\n\t\t}\n\t\telse if (x == \"**\") {\n\t\t\tauto a = s.top();\n\t\t\ts.pop();\n\
    \t\t\tauto b = operand[i];\n\t\t\ts.push(pow(a, b));\n\t\t}\n\t\telse {\n\t\t\t\
    s.push(operand[i]);\n\t\t}\n\t\ti++;\n\t}\n\treturn s.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> stack;\n\tstack.push(operand[0]);\n\tfor (int\
    \ i = 0; i < op.size(); i++) {\n\t\tlong a = stack.top();\n\t\tstack.pop();\n\t\
    \tlong b = operand[i + 1];\n\t\tif (op[i] == \"+\") {\n\t\t\tstack.push(a + b);\n\
    \t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tstack.push(a - b);\n\t\t}\n\t\telse\
    \ if (op[i] == \"*\") {\n\t\t\tstack.push(a * b);\n\t\t}\n\t\telse if (op[i] ==\
    \ \"/\") {\n\t\t\tstack.push(a / b);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\
    \t\t\tstack.push(pow(a, b));\n\t\t}\n\t}\n\treturn stack.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpfwpj5gr_: /tmp/tmpfwpj5gr_.cpp:49: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ans = operand[0];\n    int cnt = 0;\n    while(cnt < op.size()){\n\
    \        if(op[cnt] == \"+\"){\n            ans += operand[cnt+1];\n        }\n\
    \        else if(op[cnt] == \"-\"){\n            ans -= operand[cnt+1];\n    \
    \    }\n        else if(op[cnt] == \"*\"){\n            ans *= operand[cnt+1];\n\
    \        }\n        else if(op[cnt] == \"//\"){\n            ans /= operand[cnt+1];\n\
    \        }\n        else if(op[cnt] == \"**\"){\n            ans = pow(ans, operand[cnt+1]);\n\
    \        }\n        cnt++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpo26ab1ai: /tmp/tmpo26ab1ai.cpp:47: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpze622s1y: /tmp/tmpze622s1y.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ans = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            ans += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp95j2s___: /tmp/tmp95j2s___.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() + 1 != operand.size()) {\n        return -1;\n\
    \    }\n    long result = operand[0];\n    std::stack<long> s;\n    s.push(result);\n\
    \    long num = 0;\n    for(int i = 0; i < op.size(); i++) {\n        std::string\
    \ o = op[i];\n        if(o == \"+\") {\n            num = operand[i + 1];\n  \
    \          s.push(num);\n            result += num;\n        } else if(o == \"\
    -\") {\n            num = operand[i + 1];\n            s.push(num);\n        \
    \    result -= num;\n        } else if(o == \"*\") {\n            num = operand[i\
    \ + 1];\n            result = result * num;\n            num = s.top();\n    \
    \        s.pop();\n            s.push(num * result);\n        } else if(o == \"\
    //\") {\n            num = operand[i + 1];\n            result = result / num;\n\
    \            num = s.top();\n            s.pop();\n            s.push(num / result);\n\
    \        } else if(o == \"**\") {\n            num = operand[i + 1];\n       \
    \     result = std::pow(result, num);\n            num = s.top();\n          \
    \  s.pop();\n            s.push(std::pow(num, result));\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi0o1qzqy: /tmp/tmpi0o1qzqy.cpp:64: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(long i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp170jxuea: /tmp/tmp170jxuea.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") res += operand[i+1];\n        else if(op[i] ==\
    \ \"-\") res -= operand[i+1];\n        else if(op[i] == \"*\") res *= operand[i+1];\n\
    \        else if(op[i] == \"//\") res /= operand[i+1];\n        else if(op[i]\
    \ == \"**\") res = pow(res, operand[i+1]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpld63_tl5: /tmp/tmpld63_tl5.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  for(int i = 0; i < op.size(); i++) {\n    if(op[i] == \"+\") {\n\
    \      operand[i + 1] = operand[i] + operand[i + 1];\n    }\n    else if(op[i]\
    \ == \"-\") {\n      operand[i + 1] = operand[i] - operand[i + 1];\n    }\n  \
    \  else if(op[i] == \"*\") {\n      operand[i + 1] = operand[i] * operand[i +\
    \ 1];\n    }\n    else if(op[i] == \"//\") {\n      operand[i + 1] = operand[i]\
    \ / operand[i + 1];\n    }\n    else if(op[i] == \"**\") {\n      operand[i +\
    \ 1] = std::pow(operand[i], operand[i + 1]);\n    }\n  }\n  return operand[operand.size()\
    \ - 1];\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmphl17cpsh: /tmp/tmphl17cpsh.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result;\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmprzj6tdnm: /tmp/tmprzj6tdnm.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  if (op.size() == 0 || operand.size() < 2) {\n    return -1;\n\
    \  }\n  std::stack<long> stack;\n  stack.push(operand[0]);\n  long num1, num2;\n\
    \  for (size_t i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\") {\n     \
    \ stack.push(operand[i + 1]);\n    } else if (op[i] == \"-\") {\n      stack.push(-operand[i\
    \ + 1]);\n    } else if (op[i] == \"*\") {\n      num1 = stack.top();\n      stack.pop();\n\
    \      stack.push(num1 * operand[i + 1]);\n    } else if (op[i] == \"//\") {\n\
    \      num1 = stack.top();\n      stack.pop();\n      stack.push(num1 / operand[i\
    \ + 1]);\n    } else if (op[i] == \"**\") {\n      num1 = stack.top();\n     \
    \ stack.pop();\n      stack.push(pow(num1, operand[i + 1]));\n    }\n  }\n  long\
    \ result = 0;\n  while (!stack.empty()) {\n    result += stack.top();\n    stack.pop();\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n  \
    \  assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ans = operand[0];\n    for(long i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            ans += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            ans *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            ans /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            ans = std::pow(ans, operand[i+1]);\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpcd1ecxjt: /tmp/tmpcd1ecxjt.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  //assert(op.size() == operand.size() - 1);\n  std::stack<int>\
    \ st;\n  for(int i = 0; i < op.size(); i++) {\n    if(st.size() < 2) {\n     \
    \ st.push(operand[i]);\n    }\n    else {\n      long a = st.top();\n      st.pop();\n\
    \      long b = st.top();\n      st.pop();\n      if(op[i] == \"+\") {\n     \
    \   st.push(a + b);\n      }\n      else if(op[i] == \"-\") {\n        st.push(a\
    \ - b);\n      }\n      else if(op[i] == \"*\") {\n        st.push(a * b);\n \
    \     }\n      else if(op[i] == \"/\") {\n        st.push(a / b);\n      }\n \
    \     else if(op[i] == \"**\") {\n        st.push(pow(a, b));\n      }\n    }\n\
    \  }\n  return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp1s2ey9kd: /tmp/tmp1s2ey9kd.cpp:54: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> stack;\n  stack.push(operand[0]);\n  for (size_t\
    \ i = 0; i < op.size(); i++) {\n    stack.push(operand[i + 1]);\n    if (op[i]\
    \ == \"+\") {\n      long x1 = stack.top();\n      stack.pop();\n      long x2\
    \ = stack.top();\n      stack.pop();\n      stack.push(x1 + x2);\n    } else if\
    \ (op[i] == \"-\") {\n      long x1 = stack.top();\n      stack.pop();\n     \
    \ long x2 = stack.top();\n      stack.pop();\n      stack.push(x2 - x1);\n   \
    \ } else if (op[i] == \"*\") {\n      long x1 = stack.top();\n      stack.pop();\n\
    \      long x2 = stack.top();\n      stack.pop();\n      stack.push(x1 * x2);\n\
    \    } else if (op[i] == \"//\") {\n      long x1 = stack.top();\n      stack.pop();\n\
    \      long x2 = stack.top();\n      stack.pop();\n      stack.push(x2 / x1);\n\
    \    } else if (op[i] == \"**\") {\n      long x1 = stack.top();\n      stack.pop();\n\
    \      long x2 = stack.top();\n      stack.pop();\n      stack.push(pow(x2, x1));\n\
    \    }\n  }\n  return stack.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpon08chaq: /tmp/tmpon08chaq.cpp:63: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") res += operand[i+1];\n        else if(op[i] ==\
    \ \"-\") res -= operand[i+1];\n        else if(op[i] == \"*\") res *= operand[i+1];\n\
    \        else if(op[i] == \"//\") res /= operand[i+1];\n        else if(op[i]\
    \ == \"**\") res = pow(res, operand[i+1]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpld63_tl5: /tmp/tmpld63_tl5.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = std::pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptfh762po: /tmp/tmptfh762po.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    for(long i = 0; i < op.size(); i++)\
    \ {\n        long op2 = operand[i+1];\n        if(op[i] == \"+\") {\n        \
    \    stk.push(operand[i] + op2);\n        } else if(op[i] == \"-\") {\n      \
    \      stk.push(operand[i] - op2);\n        } else if(op[i] == \"*\") {\n    \
    \        stk.push(operand[i] * op2);\n        } else if(op[i] == \"//\") {\n \
    \           stk.push(operand[i] / op2);\n        } else if(op[i] == \"**\") {\n\
    \            stk.push(std::pow(operand[i], op2));\n        }\n    }\n    return\
    \ stk.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpb_w387r_: /tmp/tmpb_w387r_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong sum=0;\n\tfor(long i=0;i<op.size();i++)\n\t{\n\t\tif(op[i]==\"\
    +\")\n\t\t{\n\t\t\tsum=sum+operand[i]+operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    -\")\n\t\t{\n\t\t\tsum=sum-operand[i]-operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    *\")\n\t\t{\n\t\t\tsum=sum*operand[i]*operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    /\")\n\t\t{\n\t\t\tsum=sum/operand[i]/operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    ^\")\n\t\t{\n\t\t\tsum=sum^operand[i]^operand[i+1];\n\t\t}\n\t}\n  return sum;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpscr4pb8s: /tmp/tmpscr4pb8s.cpp:50: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code here\n    std::stack<std::string> operators;\n\
    \    std::stack<long> operands;\n    // TODO: implement your code here\n    for(int\
    \ i=0;i<op.size();i++){\n      operators.push(op[i]);\n    }\n    for(int i=0;i<operand.size();i++){\n\
    \      operands.push(operand[i]);\n    }\n    while(operators.size()!=0){\n  \
    \    std::string op=operators.top();\n      operators.pop();\n      long operand2=operands.top();\n\
    \      operands.pop();\n      long operand1=operands.top();\n      operands.pop();\n\
    \      if(op==\"+\"){\n        operands.push(operand1+operand2);\n      }\n  \
    \    else if(op==\"-\"){\n        operands.push(operand1-operand2);\n      }\n\
    \      else if(op==\"*\"){\n        operands.push(operand1*operand2);\n      }\n\
    \      else if(op==\"//\"){\n        operands.push(operand1/operand2);\n     \
    \ }\n      else if(op==\"**\"){\n        operands.push(pow(operand1,operand2));\n\
    \      }\n    }\n    return operands.top();\n  }\nint main()\n{\n    std::vector<std::string>\
    \ v1{\"+\",\"-\",\"*\",\"//\",\"**\"};\n    std::vector<long> v2{2,4,7,1,8};\n\
    \    std::cout<<do_algebra(v1,v2);\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqefrz7tv.cpp:63:5: error: redefinition of \u2018int main()\u2019\
    \n   63 | int main() {\n      |     ^~~~\n/tmp/tmpqefrz7tv.cpp:57:5: note: \u2018\
    int main()\u2019 previously defined here\n   57 | int main()\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  if (op.size() != operand.size() - 1) return -1;\n  std::stack<long>\
    \ st;\n  st.push(operand[0]);\n  st.push(operand[1]);\n  for (int i = 2; i < operand.size();\
    \ i++) {\n    if (op[i - 1] == \"*\") {\n      long l = st.top();\n      st.pop();\n\
    \      long r = operand[i];\n      st.push(l * r);\n    } else if (op[i - 1] ==\
    \ \"+\") {\n      long l = st.top();\n      st.pop();\n      long r = operand[i];\n\
    \      st.push(l + r);\n    } else if (op[i - 1] == \"-\") {\n      long l = st.top();\n\
    \      st.pop();\n      long r = operand[i];\n      st.push(l - r);\n    } else\
    \ if (op[i - 1] == \"//\") {\n      long l = st.top();\n      st.pop();\n    \
    \  long r = operand[i];\n      st.push(l / r);\n    } else if (op[i - 1] == \"\
    **\") {\n      long l = st.top();\n      st.pop();\n      long r = operand[i];\n\
    \      st.push(pow(l, r));\n    }\n  }\n  return st.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpwyx6_15l: /tmp/tmpwyx6_15l.cpp:58: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpby1meik2: /tmp/tmpby1meik2.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Insert your code here\n  int l = op.size();\n  int i = 0;\n\
    \  int j = 0;\n  long ans = operand[i];\n  i++;\n  j++;\n  for(;j<l;j++){\n  \
    \  if(op[j] == \"+\"){\n      ans += operand[i];\n      i++;\n    }\n    else\
    \ if(op[j] == \"-\"){\n      ans -= operand[i];\n      i++;\n    }\n    else if(op[j]\
    \ == \"*\"){\n      ans *= operand[i];\n      i++;\n    }\n    else if(op[j] ==\
    \ \"//\"){\n      ans /= operand[i];\n      i++;\n    }\n    else if(op[j] ==\
    \ \"**\"){\n      ans = pow(ans,operand[i]);\n      i++;\n    }\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbi7plx_r: /tmp/tmpbi7plx_r.cpp:55: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") result += operand[i+1];\n        else if(op[i]\
    \ == \"-\") result -= operand[i+1];\n        else if(op[i] == \"*\") result *=\
    \ operand[i+1];\n        else if(op[i] == \"//\") result /= operand[i+1];\n  \
    \      else if(op[i] == \"**\") result = (long)pow(result, operand[i+1]);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpb0hx71pf: /tmp/tmpb0hx71pf.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong tmp;\n\tfor (int i = 1; i < operand.size(); i++) {\n\t\t\
    if (op[i - 1] == \"+\") {\n\t\t\toperand[i] = operand[i - 1] + operand[i];\n\t\
    \t}\n\t\telse if (op[i - 1] == \"-\") {\n\t\t\toperand[i] = operand[i - 1] - operand[i];\n\
    \t\t}\n\t\telse if (op[i - 1] == \"*\") {\n\t\t\toperand[i] = operand[i - 1] *\
    \ operand[i];\n\t\t}\n\t\telse if (op[i - 1] == \"//\") {\n\t\t\toperand[i] =\
    \ operand[i - 1] / operand[i];\n\t\t}\n\t\telse if (op[i - 1] == \"**\") {\n\t\
    \t\ttmp = operand[i - 1];\n\t\t\tfor (int j = 1; j < operand[i]; j++) {\n\t\t\t\
    \toperand[i] = tmp * operand[i - 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn operand[operand.size()\
    \ - 1];\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmps3crd7i9: /tmp/tmps3crd7i9.cpp:47: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    s.push(operand[0]);\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") s.push(operand[i+1]);\n\
    \        else if(op[i] == \"-\") s.push(-operand[i+1]);\n        else if(op[i]\
    \ == \"*\") {\n            s.top() *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\") {\n            s.top() /= operand[i+1];\n        }\n        else\
    \ if(op[i] == \"**\") {\n            long x = s.top();\n            s.pop();\n\
    \            s.push(pow(x, operand[i+1]));\n        }\n    }\n    long sum = 0;\n\
    \    while(!s.empty()) {\n        sum += s.top();\n        s.pop();\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (size_t i = 0; i < op.size();\
    \ i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\
    \telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] ==\
    \ \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpsobmrgvp: /tmp/tmpsobmrgvp.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // return 3;\n  // your code here\n  std::stack<int> my_stack;\n\
    \  int res=0;\n  if(op.size()==0 || operand.size()==0){\n    return 0;\n  }\n\
    \  int num_of_op=op.size();\n  int num_of_operand=operand.size();\n  if(num_of_op!=num_of_operand-1){\n\
    \    return 0;\n  }\n  for(int i=0;i<num_of_op;i++){\n    my_stack.push(operand[i]);\n\
    \    if(op[i]==\"+\"){\n      my_stack.push(my_stack.top());\n      my_stack.pop();\n\
    \      my_stack.top()+=my_stack.top();\n      my_stack.pop();\n    }\n    else\
    \ if(op[i]==\"-\"){\n      my_stack.push(my_stack.top());\n      my_stack.pop();\n\
    \      my_stack.top()-=my_stack.top();\n      my_stack.pop();\n    }\n    else\
    \ if(op[i]==\"*\"){\n      my_stack.push(my_stack.top());\n      my_stack.pop();\n\
    \      my_stack.top()*=my_stack.top();\n      my_stack.pop();\n    }\n    else\
    \ if(op[i]==\"//\"){\n      my_stack.push(my_stack.top());\n      my_stack.pop();\n\
    \      my_stack.top()/=my_stack.top();\n      my_stack.pop();\n    }\n    else\
    \ if(op[i]==\"**\"){\n      my_stack.push(my_stack.top());\n      my_stack.pop();\n\
    \      my_stack.top()=pow(my_stack.top(),my_stack.top());\n      my_stack.pop();\n\
    \    }\n  }\n  my_stack.push(operand[num_of_operand-1]);\n  res=my_stack.top();\n\
    \  return res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp1ffyhe40: /tmp/tmp1ffyhe40.cpp:73: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            res -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            res *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpvj4b5iq4: /tmp/tmpvj4b5iq4.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong res = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tres += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tres -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tres *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"//\"\
    ) {\n\t\t\tres /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\
    \tres = pow(res, operand[i + 1]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpxb6iw6zh: /tmp/tmpxb6iw6zh.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  // return 0;\n  int N = op.size();\n\
    \  std::vector<int> level(N+1, 0);\n  level[0] = 5;\n  for(int i = 0; i < N; i++)\
    \ {\n    if(op[i] == \"*\" || op[i] == \"/\") {\n      level[i+1] = 4;\n    }\
    \ else if(op[i] == \"+\" || op[i] == \"-\") {\n      level[i+1] = 3;\n    } else\
    \ if(op[i] == \"**\") {\n      level[i+1] = 2;\n    }\n  }\n  std::vector<std::vector<long>>\
    \ dp(N+1, std::vector<long>(N+1, 0));\n  std::vector<std::vector<long>> dps(N+1,\
    \ std::vector<long>(N+1, 0));\n  for(int i = 0; i < N; i++) {\n    dp[i][i+1]\
    \ = operand[i];\n    dps[i][i+1] = operand[i];\n  }\n  for(int i = 1; i <= N;\
    \ i++) {\n    for(int j = i-1; j >= 0; j--) {\n      dp[j][i] = INT_MAX;\n   \
    \   for(int k = j+1; k < i; k++) {\n        if(level[k] > level[j]) {\n      \
    \    continue;\n        }\n        long temp = 0;\n        if(op[k-1] == \"+\"\
    ) {\n          temp = dp[j][k] + dp[k][i];\n        } else if(op[k-1] == \"-\"\
    ) {\n          temp = dp[j][k] - dp[k][i];\n        } else if(op[k-1] == \"*\"\
    ) {\n          temp = dp[j][k] * dp[k][i];\n        } else if(op[k-1] == \"/\"\
    ) {\n          temp = dp[j][k] / dp[k][i];\n        }\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcloels7g.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpcloels7g.cpp:60:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n     \
    \ |            ^\n/tmp/tmpcloels7g.cpp:65:1: error: expected \u2018}\u2019 at\
    \ end of input\n   65 | }\n      | ^\n/tmp/tmpcloels7g.cpp:43:35: note: to match\
    \ this \u2018{\u2019\n   43 |     for(int j = i-1; j >= 0; j--) {\n      |   \
    \                                ^\n/tmp/tmpcloels7g.cpp:65:1: error: expected\
    \ \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpcloels7g.cpp:42:31:\
    \ note: to match this \u2018{\u2019\n   42 |   for(int i = 1; i <= N; i++) {\n\
    \      |                               ^\n/tmp/tmpcloels7g.cpp:65:1: error: expected\
    \ \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpcloels7g.cpp:21:73:\
    \ note: to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmpcloels7g.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   65 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    assert(op.size() == operand.size() - 1);\n    assert(op.size()\
    \ > 0);\n    assert(operand.size() > 1);\n    for (int i = 1; i < operand.size();\
    \ i++) {\n        if (op[i - 1] == \"+\") {\n            operand[i] = operand[i\
    \ - 1] + operand[i];\n        } else if (op[i - 1] == \"-\") {\n            operand[i]\
    \ = operand[i - 1] - operand[i];\n        } else if (op[i - 1] == \"*\") {\n \
    \           operand[i] = operand[i - 1] * operand[i];\n        } else if (op[i\
    \ - 1] == \"//\") {\n            operand[i] = operand[i - 1] / operand[i];\n \
    \       } else if (op[i - 1] == \"**\") {\n            operand[i] = pow(operand[i\
    \ - 1], operand[i]);\n        }\n    }\n    return operand[operand.size() - 1];\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpal34ostn: /tmp/tmpal34ostn.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  \tlong res = operand[0];\n  \tfor(int i = 0; i < op.size(); i++)\
    \ {\n  \t\tif(op[i] == \"+\")\n  \t\t\tres += operand[i+1];\n  \t\telse if(op[i]\
    \ == \"-\")\n  \t\t\tres -= operand[i+1];\n  \t\telse if(op[i] == \"*\")\n  \t\
    \t\tres *= operand[i+1];\n  \t\telse if(op[i] == \"//\")\n  \t\t\tres /= operand[i+1];\n\
    \  \t\telse if(op[i] == \"**\")\n  \t\t\tres = pow(res, operand[i+1]);\n  \t}\n\
    \  \treturn res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpmtxfs3_m: /tmp/tmpmtxfs3_m.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi24mb5j_: /tmp/tmpi24mb5j_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long total = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            total += operand[i+1];\n \
    \       }\n        else if(op[i] == \"-\") {\n            total -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            total *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            total /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            total = pow(total,\
    \ operand[i+1]);\n        }\n    }\n    return total;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpcq00oknt: /tmp/tmpcq00oknt.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        switch(op[i][0]) {\n            case '+':\n                result\
    \ += operand[i+1];\n                break;\n            case '-':\n          \
    \      result -= operand[i+1];\n                break;\n            case '*':\n\
    \                result *= operand[i+1];\n                break;\n           \
    \ case '/':\n                result /= operand[i+1];\n                break;\n\
    \            case '^':\n                result = pow(result, operand[i+1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpwhki9wc0: /tmp/tmpwhki9wc0.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong sum=0;\n\tfor(int i=0;i<op.size();i++)\n\t{\n\t\tif(op[i]==\"\
    +\")\n\t\t{\n\t\t\tsum+=operand[i]+operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    -\")\n\t\t{\n\t\t\tsum+=operand[i]-operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    *\")\n\t\t{\n\t\t\tsum+=operand[i]*operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    /\")\n\t\t{\n\t\t\tsum+=operand[i]/operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    **\")\n\t\t{\n\t\t\tsum+=pow(operand[i],operand[i+1]);\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpqqt9zn7i: /tmp/tmpqqt9zn7i.cpp:50: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpze622s1y: /tmp/tmpze622s1y.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  assert(op.size() == operand.size() - 1);\n  assert(op.size() >=\
    \ 1);\n  assert(operand.size() >= 2);\n  long r = operand[0];\n  for (int i =\
    \ 0; i < op.size(); i++) {\n    switch (op[i][0]) {\n      case '+':\n       \
    \ r += operand[i + 1];\n        break;\n      case '-':\n        r -= operand[i\
    \ + 1];\n        break;\n      case '*':\n        r *= operand[i + 1];\n     \
    \   break;\n      case '/':\n        r /= operand[i + 1];\n        break;\n  \
    \    case '^':\n        r = pow(r, operand[i + 1]);\n        break;\n      default:\n\
    \        assert(false);\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpj7qiswsh: /tmp/tmpj7qiswsh.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    stack<int> st;\n    st.push(operand[0]);\n    for(int i=0;i<op.size();i++){\n\
    \        int temp = operand[i+1];\n        if(op[i]==\"+\"){\n            st.push(temp);\n\
    \        }\n        else if(op[i]==\"-\"){\n            st.push(-temp);\n    \
    \    }\n        else if(op[i]==\"*\"){\n            st.top()*=temp;\n        }\n\
    \        else if(op[i]==\"//\"){\n            st.top()/=temp;\n        }\n   \
    \     else if(op[i]==\"**\"){\n            int t = st.top();\n            st.pop();\n\
    \            st.push(pow(t,temp));\n        }\n    }\n    int ans = 0;\n    while(!st.empty()){\n\
    \        ans+=st.top();\n        st.pop();\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30zybbxy.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp30zybbxy.cpp:22:5: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   22\
    \ |     stack<int> st;\n      |     ^~~~~\n      |     std::stack\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp30zybbxy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp30zybbxy.cpp:22:11: error: expected primary-expression\
    \ before \u2018int\u2019\n   22 |     stack<int> st;\n      |           ^~~\n\
    /tmp/tmp30zybbxy.cpp:23:5: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   23 |     st.push(operand[0]);\n      |   \
    \  ^~\n      |     std\n"
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  if (op.size() == 0) {\n    return operand[0];\n  }\n\n  long res\
    \ = operand[0];\n  for (size_t i = 0; i < op.size(); i++) {\n    if (op[i] ==\
    \ \"+\") {\n      res += operand[i + 1];\n    } else if (op[i] == \"-\") {\n \
    \     res -= operand[i + 1];\n    } else if (op[i] == \"*\") {\n      res *= operand[i\
    \ + 1];\n    } else if (op[i] == \"//\") {\n      res /= operand[i + 1];\n   \
    \ } else if (op[i] == \"**\") {\n      res = pow(res, operand[i + 1]);\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpken_n2_d: /tmp/tmpken_n2_d.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long res = operand[0];\n  for(int i = 0; i < op.size(); i++) {\n\
    \    if(op[i] == \"+\") res += operand[i+1];\n    else if(op[i] == \"-\") res\
    \ -= operand[i+1];\n    else if(op[i] == \"*\") res *= operand[i+1];\n    else\
    \ if(op[i] == \"//\") res /= operand[i+1];\n    else if(op[i] == \"**\") res =\
    \ pow(res, operand[i+1]);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmplsuxni7p: /tmp/tmplsuxni7p.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> numbers;\n    long a, b;\n    for (long i =\
    \ 0; i < op.size(); i++) {\n        switch (op[i][0]) {\n            case '+':\n\
    \                a = numbers.top();\n                numbers.pop();\n        \
    \        b = numbers.top();\n                numbers.pop();\n                numbers.push(a\
    \ + b);\n                break;\n            case '-':\n                a = numbers.top();\n\
    \                numbers.pop();\n                b = numbers.top();\n        \
    \        numbers.pop();\n                numbers.push(b - a);\n              \
    \  break;\n            case '*':\n                a = numbers.top();\n       \
    \         numbers.pop();\n                b = numbers.top();\n               \
    \ numbers.pop();\n                numbers.push(a * b);\n                break;\n\
    \            case '/':\n                a = numbers.top();\n                numbers.pop();\n\
    \                b = numbers.top();\n                numbers.pop();\n        \
    \        numbers.push(b / a);\n                break;\n            case '^':\n\
    \                a = numbers.top();\n                numbers.pop();\n        \
    \        b = numbers.top();\n                numbers.pop();\n                numbers.push(pow(b,\
    \ a));\n                break;\n            default:\n                break;\n\
    \        }\n        numbers.push(operand[i+1]);\n    }\n    return numbers.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    int n = op.size();\n    long ans = operand[0];\n    for(int\
    \ i = 0; i < n; i++) {\n        if(op[i] == \"+\") {\n            ans += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp552pue6g: /tmp/tmp552pue6g.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    stk.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long x = operand[i+1];\n        long a\
    \ = stk.top();\n        stk.pop();\n        if(op[i] == \"+\") {\n           \
    \ stk.push(a+x);\n        }\n        else if(op[i] == \"-\") {\n            stk.push(a-x);\n\
    \        }\n        else if(op[i] == \"*\") {\n            stk.push(a*x);\n  \
    \      }\n        else if(op[i] == \"//\") {\n            stk.push(a/x);\n   \
    \     }\n        else if(op[i] == \"**\") {\n            stk.push(std::pow(a,\
    \ x));\n        }\n    }\n    return stk.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmphosondsm: /tmp/tmphosondsm.cpp:49: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    //std::string MyStr = op[0];\n    long res=operand[0];\n   \
    \ for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            res+=operand[i+1];\n\
    \        }\n        else if(op[i]==\"-\"){\n            res-=operand[i+1];\n \
    \       }\n        else if(op[i]==\"*\"){\n            res*=operand[i+1];\n  \
    \      }\n        else if(op[i]==\"//\"){\n            res/=operand[i+1];\n  \
    \      }\n        else if(op[i]==\"**\"){\n            res=pow(res,operand[i+1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp06kvfqxq: /tmp/tmp06kvfqxq.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::string operators[] = {\"+\", \"-\", \"*\", \"//\", \"**\"\
    };\n    std::stack<long> stk;\n    for(long i = 0; i < op.size(); i++) {\n   \
    \     for(long j = 0; j < 5; j++) {\n            if(op[i] == operators[j]) {\n\
    \                if(stk.size() < 2) {\n                    std::cout << \"insufficient\
    \ operands\" << std::endl;\n                    return -1;\n                }\n\
    \                long a = stk.top();\n                stk.pop();\n           \
    \     long b = stk.top();\n                stk.pop();\n                long ans\
    \ = 0;\n                switch(j) {\n                    case 0:\n           \
    \             ans = b + a;\n                        break;\n                 \
    \   case 1:\n                        ans = b - a;\n                        break;\n\
    \                    case 2:\n                        ans = b * a;\n         \
    \               break;\n                    case 3:\n                        ans\
    \ = b / a;\n                        break;\n                    case 4:\n    \
    \                    ans = std::pow(b, a);\n                        break;\n \
    \               }\n                stk.push(ans);\n            }\n        }\n\
    \    }\n    long sum = 0;\n    while(!stk.empty()) {\n        sum += stk.top();\n\
    \        stk.pop();\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmplp90yock: /tmp/tmplp90yock.cpp:66: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: 'insufficient operands

    '
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code goes here\n    long left = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            left +=\
    \ operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            left\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            left\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ left /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n      \
    \      left = pow(left, operand[i+1]);\n        }\n    }\n    return left;\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptige9exh: /tmp/tmptige9exh.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        long tmp = operand[i+1];\n        if(op[i] == \"+\") {\n        \
    \    res += tmp;\n        }\n        else if(op[i] == \"-\") {\n            res\
    \ -= tmp;\n        }\n        else if(op[i] == \"*\") {\n            res *= tmp;\n\
    \        }\n        else if(op[i] == \"//\") {\n            res /= tmp;\n    \
    \    }\n        else if(op[i] == \"**\") {\n            res = pow(res, tmp);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpdkc4wxq0: /tmp/tmpdkc4wxq0.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  int size = op.size();\n  if(size == 0)\n    return operand[0];\n\
    \  else if(size == 1)\n    return (op[0] == \"+\") ? operand[0] + operand[1] :\
    \ (op[0] == \"-\") ? operand[0] - operand[1] : (op[0] == \"*\") ? operand[0] *\
    \ operand[1] : (op[0] == \"//\") ? operand[0] / operand[1] : (op[0] == \"**\"\
    ) ? pow(operand[0], operand[1]) : operand[0];\n  else if(size == 2)\n    return\
    \ (op[0] == \"+\") ? (op[1] == \"+\") ? operand[0] + operand[1] + operand[2] :\
    \ (op[1] == \"-\") ? operand[0] + operand[1] - operand[2] : (op[1] == \"*\") ?\
    \ operand[0] + operand[1] * operand[2] : (op[1] == \"//\") ? operand[0] + operand[1]\
    \ / operand[2] : (op[1] == \"**\") ? operand[0] + pow(operand[1], operand[2])\
    \ : operand[0] + operand[1]\n            : (op[0] == \"-\") ? (op[1] == \"+\"\
    ) ? operand[0] - operand[1] + operand[2] : (op[1] == \"-\") ? operand[0] - operand[1]\
    \ - operand[2] : (op[1] == \"*\") ? operand[0] - operand[1] * operand[2] : (op[1]\
    \ == \"//\") ? operand[0] - operand[1] / operand[2] : (op[1] == \"**\") ? operand[0]\
    \ - pow(operand[1], operand[2]) : operand[0] - operand[1]\n            : (op[0]\
    \ == \"*\") ? (op[1] == \"+\") ? operand[0] *\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor65klhu.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpor65klhu.cpp:31:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpor65klhu.cpp:30:61:\
    \ error: expected \u2018:\u2019 before \u2018}\u2019 token\n   30 |          \
    \   : (op[0] == \"*\") ? (op[1] == \"+\") ? operand[0] *\n      |            \
    \                                                 ^\n      |                 \
    \                                            :\n   31 | }\n      | ~         \
    \                                                   \n/tmp/tmpor65klhu.cpp:31:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   31 | }\n \
    \     | ^\n/tmp/tmpor65klhu.cpp:30:61: error: expected \u2018:\u2019 before \u2018\
    }\u2019 token\n   30 |             : (op[0] == \"*\") ? (op[1] == \"+\") ? operand[0]\
    \ *\n      |                                                             ^\n \
    \     |                                                             :\n   31 |\
    \ }\n      | ~                                                            \n/tmp/tmpor65klhu.cpp:31:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   31 | }\n \
    \     | ^\n/tmp/tmpor65klhu.cpp:30:61: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n   30 |             : (op[0] == \"*\") ? (op[1] == \"+\") ? operand[0]\
    \ *\n      |                                                             ^\n \
    \     |                                                             ;\n   31 |\
    \ }\n      | ~                                                            \n"
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() != operand.size() - 1) {\n        return -1;\n\
    \    }\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            result += operand[i + 1];\n   \
    \     } else if(op[i] == \"-\") {\n            result -= operand[i + 1];\n   \
    \     } else if(op[i] == \"*\") {\n            result *= operand[i + 1];\n   \
    \     } else if(op[i] == \"//\") {\n            result /= operand[i + 1];\n  \
    \      } else if(op[i] == \"**\") {\n            result = std::pow(result, operand[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp89nlg0b0: /tmp/tmp89nlg0b0.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here!\n    long result = operand[0];\n  \
    \  for(long long i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n  \
    \          result += operand[i+1];\n        }\n        else if(op[i] == \"-\"\
    ){\n            result -= operand[i+1];\n        }\n        else if(op[i] == \"\
    *\"){\n            result *= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp8ej7krwi: /tmp/tmp8ej7krwi.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long ans = operand[0];\n  for(int i = 0; i < op.size(); i++) {\n\
    \    if(op[i] == \"+\")\n      ans += operand[i+1];\n    else if(op[i] == \"-\"\
    )\n      ans -= operand[i+1];\n    else if(op[i] == \"*\")\n      ans *= operand[i+1];\n\
    \    else if(op[i] == \"//\")\n      ans /= operand[i+1];\n    else if(op[i] ==\
    \ \"**\")\n      ans = pow(ans, operand[i+1]);\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp6wsdlmac: /tmp/tmp6wsdlmac.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    stack<long> st;\n    for(int i=0;i<op.size();i++){\n       \
    \ if(op[i]==\"+\"){\n            long b=st.top();\n            st.pop();\n   \
    \         long a=st.top();\n            st.pop();\n            st.push(a+b);\n\
    \        }\n        else if(op[i]==\"-\"){\n            long b=st.top();\n   \
    \         st.pop();\n            long a=st.top();\n            st.pop();\n   \
    \         st.push(a-b);\n        }\n        else if(op[i]==\"*\"){\n         \
    \   long b=st.top();\n            st.pop();\n            long a=st.top();\n  \
    \          st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long b=st.top();\n            st.pop();\n            long\
    \ a=st.top();\n            st.pop();\n            st.push(a/b);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long b=st.top();\n            st.pop();\n\
    \            long a=st.top();\n            st.pop();\n            st.push(pow(a,b));\n\
    \        }\n        else\n            st.push(operand[i]);\n    }\n    return\
    \ st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6h40hg_0.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp6h40hg_0.cpp:22:5: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   22\
    \ |     stack<long> st;\n      |     ^~~~~\n      |     std::stack\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp6h40hg_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp6h40hg_0.cpp:22:11: error: expected primary-expression\
    \ before \u2018long\u2019\n   22 |     stack<long> st;\n      |           ^~~~\n\
    /tmp/tmp6h40hg_0.cpp:25:20: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   25 |             long b=st.top();\n      |\
    \                    ^~\n      |                    std\n/tmp/tmp6h40hg_0.cpp:32:20:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   32 |             long b=st.top();\n      |                    ^~\n     \
    \ |                    std\n/tmp/tmp6h40hg_0.cpp:39:20: error: \u2018st\u2019\
    \ was not declared in this scope; did you mean \u2018std\u2019?\n   39 |     \
    \        long b=st.top();\n      |                    ^~\n      |            \
    \        std\n/tmp/tmp6h40hg_0.cpp:46:20: error: \u2018st\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   46 |             long b=st.top();\n\
    \      |                    ^~\n      |                    std\n/tmp/tmp6h40hg_0.cpp:53:20:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   53 |             long b=st.top();\n      |                    ^~\n     \
    \ |                    std\n/tmp/tmp6h40hg_0.cpp:60:13: error: \u2018st\u2019\
    \ was not declared in this scope; did you mean \u2018std\u2019?\n   60 |     \
    \        st.push(operand[i]);\n      |             ^~\n      |             std\n\
    /tmp/tmp6h40hg_0.cpp:62:12: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n "
  stdout: ''
  timestamp: 1660065081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> result;\n  for(int i = 0; i < op.size(); i++)\
    \ {\n    if(op[i] == \"+\") {\n      long sum = result.top() + operand[i+1];\n\
    \      result.pop();\n      result.push(sum);\n    }\n    else if(op[i] == \"\
    -\") {\n      long diff = result.top() - operand[i+1];\n      result.pop();\n\
    \      result.push(diff);\n    }\n    else if(op[i] == \"*\") {\n      long product\
    \ = result.top() * operand[i+1];\n      result.pop();\n      result.push(product);\n\
    \    }\n    else if(op[i] == \"//\") {\n      long div = result.top() / operand[i+1];\n\
    \      result.pop();\n      result.push(div);\n    }\n    else if(op[i] == \"\
    **\") {\n      long pow = pow(result.top(), operand[i+1]);\n      result.pop();\n\
    \      result.push(pow);\n    }\n  }\n  return result.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5oj9j8ou.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp5oj9j8ou.cpp:45:48: error: \u2018\
    pow\u2019 cannot be used as a function\n   45 |       long pow = pow(result.top(),\
    \ operand[i+1]);\n      |                                                ^\n"
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzu1wl_xk: /tmp/tmpzu1wl_xk.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(operand.size() <= 1 || op.size() < 1 || operand.size() <\
    \ op.size() + 1)\n        return INT_MIN;\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n       \
    \     result += operand[i + 1];\n        } else if(op[i] == \"-\") {\n       \
    \     result -= operand[i + 1];\n        } else if(op[i] == \"*\") {\n       \
    \     result *= operand[i + 1];\n        } else if(op[i] == \"//\") {\n      \
    \      result /= operand[i + 1];\n        } else if(op[i] == \"**\") {\n     \
    \       result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp3oayn3p2: /tmp/tmp3oayn3p2.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065082
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  std::stack<long> stack;\n  for(int\
    \ i = 0; i < op.size(); i++) {\n    std::string op_now = op[i];\n    long right\
    \ = operand[i+1];\n    if(op_now == \"+\") {\n      stack.push(stack.top() + right);\n\
    \    }\n    else if(op_now == \"-\") {\n      stack.push(stack.top() - right);\n\
    \    }\n    else if(op_now == \"*\") {\n      stack.push(stack.top() * right);\n\
    \    }\n    else if(op_now == \"//\") {\n      stack.push(stack.top() / right);\n\
    \    }\n    else if(op_now == \"**\") {\n      stack.push(std::pow(stack.top(),\
    \ right));\n    }\n  }\n  return stack.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065082
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    for(long i = 0; i < op.size(); i++) {\n        if(op[i] == \"\
    //\") {\n            operand[i] = operand[i] / operand[i + 1];\n            op.erase(op.begin()\
    \ + i);\n            operand.erase(operand.begin() + i + 1);\n            i--;\n\
    \        }\n    }\n    for(long i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"**\") {\n            operand[i] = pow(operand[i], operand[i + 1]);\n  \
    \          op.erase(op.begin() + i);\n            operand.erase(operand.begin()\
    \ + i + 1);\n            i--;\n        }\n    }\n    for(long i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"*\") {\n            operand[i] = operand[i] *\
    \ operand[i + 1];\n            op.erase(op.begin() + i);\n            operand.erase(operand.begin()\
    \ + i + 1);\n            i--;\n        }\n    }\n    for(long i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            operand[i] = operand[i] +\
    \ operand[i + 1];\n            op.erase(op.begin() + i);\n            operand.erase(operand.begin()\
    \ + i + 1);\n            i--;\n        }\n    }\n    for(long i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"-\") {\n            operand[i] = operand[i] -\
    \ operand[i + 1];\n            op.erase(op.begin() + i);\n            operand.erase(operand.begin()\
    \ + i + 1);\n            i--;\n        }\n    }\n    return operand[0];\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065081
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n   std::vector<long> result;\n   int i = 0;\n   result.push_back(operand[i]);\n\
    \   for(; i < op.size(); i++) {\n      if(op[i] == \"+\") {\n         result.push_back(operand[i+1]);\n\
    \      } else if(op[i] == \"-\") {\n         result.push_back(-operand[i+1]);\n\
    \      } else if(op[i] == \"*\") {\n         result.back() *= operand[i+1];\n\
    \      } else if(op[i] == \"//\") {\n         result.back() /= operand[i+1];\n\
    \      } else if(op[i] == \"**\") {\n         result.back() = pow(result.back(),\
    \ operand[i+1]);\n      }\n   }\n   return std::accumulate(result.begin(), result.end(),\
    \ 0);\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  assert(op.size() == operand.size() - 1);\n  assert(operand.size()\
    \ >= 2);\n  assert(op.size() >= 1);\n  for (int i = 0; i < operand.size(); i++)\
    \ {\n    assert(operand[i] >= 0);\n  }\n  std::stack<long> st;\n  st.push(operand[0]);\n\
    \  st.push(operand[1]);\n  for (int i = 0; i < op.size(); i++) {\n    long op2\
    \ = st.top();\n    st.pop();\n    long op1 = st.top();\n    st.pop();\n    if\
    \ (op[i] == \"+\") {\n      st.push(op1 + op2);\n    } else if (op[i] == \"-\"\
    ) {\n      st.push(op1 - op2);\n    } else if (op[i] == \"*\") {\n      st.push(op1\
    \ * op2);\n    } else if (op[i] == \"//\") {\n      st.push(op1 / op2);\n    }\
    \ else if (op[i] == \"**\") {\n      st.push(pow(op1, op2));\n    }\n    st.push(operand[i\
    \ + 2]);\n  }\n  return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp2p2it5h0: /tmp/tmp2p2it5h0.cpp:53: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long count = operand[0];\n    int i = 0;\n    for(int j = 1;\
    \ j < operand.size(); ++j) {\n        if(op[i] == \"+\")\n            count +=\
    \ operand[j];\n        else if(op[i] == \"-\")\n            count -= operand[j];\n\
    \        else if(op[i] == \"*\")\n            count *= operand[j];\n        else\
    \ if(op[i] == \"//\")\n            count /= operand[j];\n        else if(op[i]\
    \ == \"**\")\n            count = pow(count, operand[j]);\n        ++i;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpxfr8evg7: /tmp/tmpxfr8evg7.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065082
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    stk.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            stk.push(operand[i+1]);\n\
    \        } else if(op[i] == \"-\") {\n            stk.push(-operand[i+1]);\n \
    \       } else if(op[i] == \"*\") {\n            long val = stk.top();\n     \
    \       stk.pop();\n            stk.push(val * operand[i+1]);\n        } else\
    \ if(op[i] == \"//\") {\n            long val = stk.top();\n            stk.pop();\n\
    \            stk.push(val / operand[i+1]);\n        } else if(op[i] == \"**\"\
    ) {\n            long val = stk.top();\n            stk.pop();\n            stk.push(pow(val,\
    \ operand[i+1]));\n        }\n    }\n    long ans = 0;\n    while(!stk.empty())\
    \ {\n        ans += stk.top();\n        stk.pop();\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065082
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here.\n    stack<long> s;\n    s.push(operand[0]);\n\
    \    for(int i=0;i<op.size();i++){\n        long b = operand[i+1];\n        if(op[i]==\"\
    +\"){\n            long a = s.top();\n            s.pop();\n            s.push(a+b);\n\
    \        }\n        else if(op[i]==\"-\"){\n            long a = s.top();\n  \
    \          s.pop();\n            s.push(a-b);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a = s.top();\n            s.pop();\n            s.push(a*b);\n\
    \        }\n        else if(op[i]==\"//\"){\n            long a = s.top();\n \
    \           s.pop();\n            s.push(a/b);\n        }\n        else if(op[i]==\"\
    **\"){\n            long a = s.top();\n            s.pop();\n            s.push(pow(a,b));\n\
    \        }\n    }\n    return s.top();\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7du0w45y.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp7du0w45y.cpp:23:5: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   23\
    \ |     stack<long> s;\n      |     ^~~~~\n      |     std::stack\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp7du0w45y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp7du0w45y.cpp:23:11: error: expected primary-expression\
    \ before \u2018long\u2019\n   23 |     stack<long> s;\n      |           ^~~~\n\
    /tmp/tmp7du0w45y.cpp:24:5: error: \u2018s\u2019 was not declared in this scope\n\
    \   24 |     s.push(operand[0]);\n      |     ^\n"
  stdout: ''
  timestamp: 1660065082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  int n = op.size();\n  if(n == 0)\n    return operand[0];\n  if(n\
    \ == 1)\n    return operand[0] + operand[1];\n  if(n == 2)\n    return operand[0]\
    \ + operand[1] + operand[2];\n  long res = 0;\n  for(int i = 0; i < n; i++) {\n\
    \    if(op[i] == \"+\") {\n      res += operand[i] + operand[i+1];\n    }\n  \
    \  else if(op[i] == \"-\") {\n      res += operand[i] - operand[i+1];\n    }\n\
    \    else if(op[i] == \"*\") {\n      res += operand[i] * operand[i+1];\n    }\n\
    \    else if(op[i] == \"//\") {\n      res += operand[i] / operand[i+1];\n   \
    \ }\n    else if(op[i] == \"**\") {\n      res += pow(operand[i], operand[i+1]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp3gjaclzt: /tmp/tmp3gjaclzt.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065082
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  \n  std::stack<long> s;\n  int c = operand.size();\n\
    \  for(int i = 0; i < c; i++)\n  {\n    s.push(operand[i]);\n    if(i < c-1)\n\
    \    {\n      long result;\n      long second = s.top();\n      s.pop();\n   \
    \   long first = s.top();\n      s.pop();\n      if(op[i] == \"+\")\n      {\n\
    \        result = first + second;\n      }\n      else if(op[i] == \"-\")\n  \
    \    {\n        result = first - second;\n      }\n      else if(op[i] == \"*\"\
    )\n      {\n        result = first * second;\n      }\n      else if(op[i] ==\
    \ \"//\")\n      {\n        result = first / second;\n      }\n      else if(op[i]\
    \ == \"**\")\n      {\n        result = pow(first, second);\n      }\n      s.push(result);\n\
    \    }\n  }\n  return s.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi24mb5j_: /tmp/tmpi24mb5j_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpze622s1y: /tmp/tmpze622s1y.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Your code goes here\n  //instead of the vector we can pass\
    \ the operand values in the parameters of the function and use them directly.\n\
    \  long result=operand[0];\n  for(int i=0;i<op.size();i++)\n  {\n    if(op[i]==\"\
    +\")\n    {\n      result+=operand[i+1];\n    }\n    else if(op[i]==\"-\")\n \
    \   {\n      result-=operand[i+1];\n    }\n    else if(op[i]==\"*\")\n    {\n\
    \      result*=operand[i+1];\n    }\n    else if(op[i]==\"//\")\n    {\n     \
    \ result/=operand[i+1];\n    }\n    else if(op[i]==\"**\")\n    {\n      result=pow(result,operand[i+1]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmprfnsxpy8: /tmp/tmprfnsxpy8.cpp:53: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code here\n    std::stack<long> operand_stk;\n    std::stack<std::string>\
    \ op_stk;\n    long ans = 0;\n    for(int i = 0; i < op.size(); i++){\n      \
    \  if(op[i] == \"*\"){\n            long a = operand_stk.top();\n            operand_stk.pop();\n\
    \            long b = operand[i + 1];\n            operand_stk.push(a * b);\n\
    \        }\n        else if(op[i] == \"/\"){\n            long a = operand_stk.top();\n\
    \            operand_stk.pop();\n            long b = operand[i + 1];\n      \
    \      operand_stk.push(a / b);\n        }\n        else if(op[i] == \"+\"){\n\
    \            op_stk.push(\"+\");\n            operand_stk.push(operand[i + 1]);\n\
    \        }\n        else if(op[i] == \"-\"){\n            op_stk.push(\"-\");\n\
    \            operand_stk.push(operand[i + 1]);\n        }\n    }\n    ans = operand_stk.top();\n\
    \    operand_stk.pop();\n    while(!op_stk.empty()){\n        if(op_stk.top()\
    \ == \"+\"){\n            ans += operand_stk.top();\n            operand_stk.pop();\n\
    \        }\n        else if(op_stk.top() == \"-\"){\n            ans -= operand_stk.top();\n\
    \            operand_stk.pop();\n        }\n        op_stk.pop();\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  int n = op.size();\n  int m = operand.size();\n  std::stack<long>\
    \ S;\n  std::vector<int> priority;\n  priority.resize(n);\n  for(int i = 0; i\
    \ < n; i++) {\n    if(op[i] == \"+\" || op[i] == \"-\") {\n      priority[i] =\
    \ 1;\n    }\n    else if(op[i] == \"*\" || op[i] == \"/\") {\n      priority[i]\
    \ = 2;\n    }\n    else {\n      priority[i] = 3;\n    }\n  }\n  for(int i = 0;\
    \ i < n; i++) {\n    if(priority[i] == 3) {\n      long a = operand[i];\n    \
    \  long b = operand[i + 1];\n      long temp = 0;\n      if(op[i] == \"**\") {\n\
    \        temp = pow(a, b);\n      }\n      else if(op[i] == \"//\") {\n      \
    \  temp = a / b;\n      }\n      operand[i + 1] = temp;\n    }\n  }\n  S.push(operand[m\
    \ - 1]);\n  for(int i = n - 1; i >= 0; i--) {\n    if(priority[i] == 2) {\n  \
    \    long a = operand[i];\n      long b = S.top();\n      S.pop();\n      long\
    \ temp = 0;\n      if(op[i] == \"*\") {\n        temp = a * b;\n      }\n    \
    \  else {\n        temp = a / b;\n      }\n      S.push(temp);\n    }\n  }\n \
    \ for(int i = 0; i < n; i++) {\n    if(priority[i] == 1) {\n      long a = operand[i];\n\
    \      long b = S.top();\n      S.pop();\n      long temp = 0;\n      if(op[i]\
    \ == \"+\") {\n        temp = a + b;\n      }\n      else {\n        temp = a\
    \ - b;\n      }\n      S.push(temp);\n   \n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvro2xo9s.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpvro2xo9s.cpp:83:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   83 | int main() {\n     \
    \ |            ^\n/tmp/tmpvro2xo9s.cpp:88:1: error: expected \u2018}\u2019 at\
    \ end of input\n   88 | }\n      | ^\n/tmp/tmpvro2xo9s.cpp:68:30: note: to match\
    \ this \u2018{\u2019\n   68 |   for(int i = 0; i < n; i++) {\n      |        \
    \                      ^\n/tmp/tmpvro2xo9s.cpp:88:1: error: expected \u2018}\u2019\
    \ at end of input\n   88 | }\n      | ^\n/tmp/tmpvro2xo9s.cpp:21:73: note: to\
    \ match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string> op,\
    \ std::vector<long> operand) {\n      |                                      \
    \                                   ^\n/tmp/tmpvro2xo9s.cpp:88:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   88 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660065082
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code here\n    long op1,op2;\n    std::stack<long> st;\n\
    \    for(int i=0;i<op.size();i++)\n    {\n        if(op[i]==\"+\")\n        {\n\
    \            op1=st.top();\n            st.pop();\n            op2=st.top();\n\
    \            st.pop();\n            st.push(op1+op2);\n        }\n        else\
    \ if(op[i]==\"-\")\n        {\n            op1=st.top();\n            st.pop();\n\
    \            op2=st.top();\n            st.pop();\n            st.push(op2-op1);\n\
    \        }\n        else if(op[i]==\"*\")\n        {\n            op1=st.top();\n\
    \            st.pop();\n            op2=st.top();\n            st.pop();\n   \
    \         st.push(op1*op2);\n        }\n        else if(op[i]==\"//\")\n     \
    \   {\n            op1=st.top();\n            st.pop();\n            op2=st.top();\n\
    \            st.pop();\n            st.push(op2/op1);\n        }\n        else\
    \ if(op[i]==\"**\")\n        {\n            op1=st.top();\n            st.pop();\n\
    \            op2=st.top();\n            st.pop();\n            st.push(pow(op2,op1));\n\
    \        }\n        else\n        {\n            st.push(operand[i]);\n      \
    \  }\n    }\n    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(operand.size() == 0)\n        return 0;\n    else if(operand.size()\
    \ == 1)\n        return operand[0];\n    else if(op.size() == 0)\n        return\
    \ 0;\n    long ans = operand[0];\n    std::stack<long> s;\n    std::stack<std::string>\
    \ opr;\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"*\" ||\
    \ op[i] == \"/\"){\n            while(!opr.empty() && (opr.top() == \"*\" || opr.top()\
    \ == \"/\")){\n                ans = (opr.top() == \"*\") ? (s.top() * operand[i\
    \ + 1]) : (s.top() / operand[i + 1]);\n                s.pop();\n            \
    \    opr.pop();\n            }\n            s.push(ans);\n            opr.push(op[i]);\n\
    \        }\n        else if(op[i] == \"+\" || op[i] == \"-\"){\n            while(!opr.empty()\
    \ && (opr.top() == \"+\" || opr.top() == \"-\")){\n                ans = (opr.top()\
    \ == \"+\") ? (s.top() + operand[i + 1]) : (s.top() - operand[i + 1]);\n     \
    \           s.pop();\n                opr.pop();\n            }\n            s.push(ans);\n\
    \            opr.push(op[i]);\n        }\n    }\n    while(!opr.empty()){\n  \
    \      ans = (opr.top() == \"+\") ? (s.top() + operand[operand.size() - 1]) :\
    \ (s.top() - operand[operand.size() - 1]);\n        s.pop();\n        opr.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp8mpw3q2h: /tmp/tmp8mpw3q2h.cpp:60: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  //long d=0;\n  int i;\n  long a;\n  int temp;\n\
    \  for(i=0;i<op.size();i++)\n  {\n      if(op[i]==\"+\")\n      {\n          a=operand[i]+operand[i+1];\n\
    \          temp=i+1;\n          operand.erase(operand.begin()+i);\n          operand.erase(operand.begin()+i);\n\
    \          operand.insert(operand.begin()+i,a);\n          op.erase(op.begin()+i);\n\
    \          //operand.erase(operand.begin()+i+1);\n          i=temp-1;\n      }\n\
    \      else if(op[i]==\"-\")\n      {\n          a=operand[i]-operand[i+1];\n\
    \          temp=i+1;\n          operand.erase(operand.begin()+i);\n          operand.erase(operand.begin()+i);\n\
    \          operand.insert(operand.begin()+i,a);\n          op.erase(op.begin()+i);\n\
    \          //operand.erase(operand.begin()+i+1);\n          i=temp-1;\n      }\n\
    \      else if(op[i]==\"*\")\n      {\n          a=operand[i]*operand[i+1];\n\
    \          temp=i+1;\n          operand.erase(operand.begin()+i);\n          operand.erase(operand.begin()+i);\n\
    \          operand.insert(operand.begin()+i,a);\n          op.erase(op.begin()+i);\n\
    \          //operand.erase(operand.begin()+i+1);\n          i=temp-1;\n      }\n\
    \      else if(op[i]==\"//\")\n      {\n          a=operand[i]/operand[i+1];\n\
    \          temp=i+1;\n          operand.erase(operand.begin()+i);\n          operand.erase(oper\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3pcuxcz.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpa3pcuxcz.cpp:67:25: error: \u2018\
    oper\u2019 was not declared in this scope; did you mean \u2018op\u2019?\n   67\
    \ |           operand.erase(oper\n      |                         ^~~~\n     \
    \ |                         op\n/tmp/tmpa3pcuxcz.cpp:69:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   69 | int main() {\n     \
    \ |            ^\n/tmp/tmpa3pcuxcz.cpp:74:1: error: expected \u2018}\u2019 at\
    \ end of input\n   74 | }\n      | ^\n/tmp/tmpa3pcuxcz.cpp:28:3: note: to match\
    \ this \u2018{\u2019\n   28 |   {\n      |   ^\n/tmp/tmpa3pcuxcz.cpp:74:1: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpa3pcuxcz.cpp:21:73:\
    \ note: to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmpa3pcuxcz.cpp:74:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   74 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660065082
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  //int i = 0;\n  int max = 0;\n  for(int i = 0; i < op.size();\
    \ i++){\n    if(op[i] == \"//\"){\n      long temp = operand[i] // operand[i+1];\n\
    \      operand[i] = temp;\n      operand.erase(operand.begin() + i + 1);\n   \
    \   op.erase(op.begin() + i);\n      i--;\n    }\n    else if(op[i] == \"**\"\
    ){\n      long temp = pow(operand[i], operand[i+1]);\n      operand[i] = temp;\n\
    \      operand.erase(operand.begin() + i + 1);\n      op.erase(op.begin() + i);\n\
    \      i--;\n    }\n  }\n  for(int i = 0; i < op.size(); i++){\n    if(op[i] ==\
    \ \"*\"){\n      long temp = operand[i] * operand[i+1];\n      operand[i] = temp;\n\
    \      operand.erase(operand.begin() + i + 1);\n      op.erase(op.begin() + i);\n\
    \      i--;\n    }\n  }\n  for(int i = 0; i < op.size(); i++){\n    if(op[i] ==\
    \ \"+\"){\n      long temp = operand[i] + operand[i+1];\n      operand[i] = temp;\n\
    \      operand.erase(operand.begin() + i + 1);\n      op.erase(op.begin() + i);\n\
    \      i--;\n    }\n    else if(op[i] == \"-\"){\n      long temp = operand[i]\
    \ - operand[i+1];\n      operand[i] = temp;\n      operand.erase(operand.begin()\
    \ + i + 1);\n      op.erase(op.begin() + i);\n      i--;\n    }\n  }\n  return\
    \ operand[0];\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps119iba3.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmps119iba3.cpp:27:7: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018operand\u2019\n   27 |       operand[i]\
    \ = temp;\n      |       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660065082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    s.push(operand[0]);\n    int i=0;\n\
    \    while(i<op.size()){\n        long num1 = s.top();\n        s.pop();\n   \
    \     long num2 = operand[i+1];\n        if(op[i]==\"+\"){\n            s.push(num1+num2);\n\
    \        }else if(op[i]==\"-\"){\n            s.push(num1-num2);\n        }else\
    \ if(op[i]==\"*\"){\n            s.push(num1*num2);\n        }else if(op[i]==\"\
    //\"){\n            s.push(num1/num2);\n        }else if(op[i]==\"**\"){\n   \
    \         s.push(pow(num1,num2));\n        }\n        i++;\n    }\n    return\
    \ s.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpnxxlgsc7: /tmp/tmpnxxlgsc7.cpp:47: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Create a Stack\n\tstd::stack<long> s;\n\tint i = 0;\n\ts.push(operand[i++]);\n\
    \tfor (const auto& a : op) {\n\t\tif (a == \"+\") {\n\t\t\ts.push(operand[i++]);\n\
    \t\t}\n\t\telse if (a == \"-\") {\n\t\t\ts.push(-operand[i++]);\n\t\t}\n\t\telse\
    \ if (a == \"*\") {\n\t\t\ts.top() *= operand[i++];\n\t\t}\n\t\telse if (a ==\
    \ \"//\") {\n\t\t\ts.top() /= operand[i++];\n\t\t}\n\t\telse if (a == \"**\")\
    \ {\n\t\t\ts.top() = (long)pow(s.top(), operand[i++]);\n\t\t}\n\t}\n\t// Pop stack\
    \ to get result\n\tlong result = 0;\n\twhile (!s.empty()) {\n\t\tresult += s.top();\n\
    \t\ts.pop();\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\")\n\t\t\tresult += operand[i + 1];\n\t\telse if (op[i]\
    \ == \"-\")\n\t\t\tresult -= operand[i + 1];\n\t\telse if (op[i] == \"*\")\n\t\
    \t\tresult *= operand[i + 1];\n\t\telse if (op[i] == \"//\")\n\t\t\tresult /=\
    \ operand[i + 1];\n\t\telse if (op[i] == \"**\")\n\t\t\tresult = pow(result, operand[i\
    \ + 1]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpxzz07kuv: /tmp/tmpxzz07kuv.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tif (op.size() == 0 || operand.size() == 0) return 0;\n\tif (op.size()\
    \ != operand.size() - 1) {\n\t\treturn 0;\n\t}\n\tlong result = operand[0];\n\t\
    std::vector<std::string> op_stack;\n\tstd::vector<long> operand_stack;\n\toperand_stack.push_back(result);\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\" || op[i] == \"\
    -\") {\n\t\t\twhile (!op_stack.empty()) {\n\t\t\t\tlong temp = operand_stack.back();\n\
    \t\t\t\toperand_stack.pop_back();\n\t\t\t\tif (op_stack.back() == \"+\") {\n\t\
    \t\t\t\ttemp += operand_stack.back();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttemp\
    \ -= operand_stack.back();\n\t\t\t\t}\n\t\t\t\toperand_stack.pop_back();\n\t\t\
    \t\toperand_stack.push_back(temp);\n\t\t\t\top_stack.pop_back();\n\t\t\t}\n\t\t\
    \top_stack.push_back(op[i]);\n\t\t\toperand_stack.push_back(operand[i + 1]);\n\
    \t\t}\n\t\telse if (op[i] == \"*\" || op[i] == \"//\") {\n\t\t\twhile (!op_stack.empty()\
    \ && (op_stack.back() == \"*\" || op_stack.back() == \"//\")) {\n\t\t\t\tlong\
    \ temp = operand_stack.back();\n\t\t\t\toperand_stack.pop_back();\n\t\t\t\tif\
    \ (op_stack.back() == \"*\") {\n\t\t\t\t\ttemp *= operand_stack.back();\n\t\t\t\
    \t}\n\t\t\t\telse {\n\t\t\t\t\ttemp /= operand_stack.back();\n\t\t\t\t}\n\t\t\t\
    \toperand_stack.pop_back();\n\t\t\t\toper\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvj58y36u.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpvj58y36u.cpp:59:5: error: \u2018oper\u2019\
    \ was not declared in this scope; did you mean \u2018op\u2019?\n   59 |     oper\n\
    \      |     ^~~~\n      |     op\n/tmp/tmpvj58y36u.cpp:61:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   61 | int main() {\n     \
    \ |            ^\n/tmp/tmpvj58y36u.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpvj58y36u.cpp:48:43: note: to match\
    \ this \u2018{\u2019\n   48 |   else if (op[i] == \"*\" || op[i] == \"//\") {\n\
    \      |                                           ^\n/tmp/tmpvj58y36u.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpvj58y36u.cpp:30:38:\
    \ note: to match this \u2018{\u2019\n   30 |  for (int i = 0; i < op.size(); i++)\
    \ {\n      |                                      ^\n/tmp/tmpvj58y36u.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpvj58y36u.cpp:21:73:\
    \ note: to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmpvj58y36u.cpp:66:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   66 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660065082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    switch (op[i][0]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '/':\n        result /= operand[i + 1];\n        break;\n      case '%':\n \
    \       result %= operand[i + 1];\n        break;\n      case '^':\n        result\
    \ = pow(result, operand[i + 1]);\n        break;\n      default:\n        break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpq9giwsfu: /tmp/tmpq9giwsfu.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stack;\n    stack.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        int op1 = stack.top();\n        stack.pop();\n\
    \        int op2 = operand[i+1];\n        if(op[i] == \"+\") {\n            stack.push(op1\
    \ + op2);\n        } else if(op[i] == \"-\") {\n            stack.push(op1 - op2);\n\
    \        } else if(op[i] == \"*\") {\n            stack.push(op1 * op2);\n   \
    \     } else if(op[i] == \"//\") {\n            stack.push(op1 / op2);\n     \
    \   } else if(op[i] == \"**\") {\n            stack.push(pow(op1, op2));\n   \
    \     }\n    }\n    return stack.top();\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpxymz_675: /tmp/tmpxymz_675.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tint num_ops = op.size();\n\tint num_operands = operand.size();\n\
    \tlong ans = operand[0];\n\tfor (int i = 0; i < num_ops; i++) {\n\t\tstring ops\
    \ = op[i];\n\t\tlong oper = operand[i + 1];\n\t\tif (ops == \"+\")\n\t\t\tans\
    \ += oper;\n\t\telse if (ops == \"-\")\n\t\t\tans -= oper;\n\t\telse if (ops ==\
    \ \"*\")\n\t\t\tans *= oper;\n\t\telse if (ops == \"//\")\n\t\t\tans /= oper;\n\
    \t\telse if (ops == \"**\")\n\t\t\tans = pow(ans, oper);\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9k5gd9hd.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp9k5gd9hd.cpp:26:3: error: \u2018string\u2019\
    \ was not declared in this scope; did you mean \u2018std::string\u2019?\n   26\
    \ |   string ops = op[i];\n      |   ^~~~~~\n      |   std::string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9k5gd9hd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmp9k5gd9hd.cpp:28:7:\
    \ error: \u2018ops\u2019 was not declared in this scope; did you mean \u2018op\u2019\
    ?\n   28 |   if (ops == \"+\")\n      |       ^~~\n      |       op\n"
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ret = operand[0];\n    for (int i = 0; i < op.size(); i++)\
    \ {\n        if (op[i] == \"+\") {\n            ret += operand[i+1];\n       \
    \ } else if (op[i] == \"-\") {\n            ret -= operand[i+1];\n        } else\
    \ if (op[i] == \"*\") {\n            ret *= operand[i+1];\n        } else if (op[i]\
    \ == \"//\") {\n            ret /= operand[i+1];\n        } else if (op[i] ==\
    \ \"**\") {\n            ret = pow(ret, operand[i+1]);\n        }\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmph_rlqpar: /tmp/tmph_rlqpar.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpze622s1y: /tmp/tmpze622s1y.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\")\n            result += operand[i+1];\n  \
    \      else if(op[i] == \"-\")\n            result -= operand[i+1];\n        else\
    \ if(op[i] == \"*\")\n            result *= operand[i+1];\n        else if(op[i]\
    \ == \"//\")\n            result /= operand[i+1];\n        else if(op[i] == \"\
    **\")\n            result = pow(result, operand[i+1]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptzer5fsi: /tmp/tmptzer5fsi.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> to_do;\n\tto_do.push(operand[0]);\n\tfor (int\
    \ i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tlong tmp = to_do.top();\n\
    \t\t\tto_do.pop();\n\t\t\tto_do.push(tmp + operand[i + 1]);\n\t\t}\n\t\telse if\
    \ (op[i] == \"-\") {\n\t\t\tlong tmp = to_do.top();\n\t\t\tto_do.pop();\n\t\t\t\
    to_do.push(tmp - operand[i + 1]);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\
    \tlong tmp = to_do.top();\n\t\t\tto_do.pop();\n\t\t\tto_do.push(tmp * operand[i\
    \ + 1]);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong tmp = to_do.top();\n\
    \t\t\tto_do.pop();\n\t\t\tto_do.push(tmp / operand[i + 1]);\n\t\t}\n\t\telse if\
    \ (op[i] == \"**\") {\n\t\t\tlong tmp = to_do.top();\n\t\t\tto_do.pop();\n\t\t\
    \tto_do.push(std::pow(tmp, operand[i + 1]));\n\t\t}\n\t}\n\treturn to_do.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptd3bs12l: /tmp/tmptd3bs12l.cpp:56: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res=operand[0];\n    for(int i=0;i<op.size();i++){\n  \
    \      switch(op[i][0]){\n            case '+':\n                res+=operand[i+1];\n\
    \                break;\n            case '-':\n                res-=operand[i+1];\n\
    \                break;\n            case '*':\n                res*=operand[i+1];\n\
    \                break;\n            case '/':\n                res/=operand[i+1];\n\
    \                break;\n            case '^':\n                res=pow(res,operand[i+1]);\n\
    \                break;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpg8sfwaax: /tmp/tmpg8sfwaax.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  int operand_size = operand.size();\n  int\
    \ op_size = op.size();\n  //long result = operand[0];\n  long result = 0;\n  for(int\
    \ i = 0; i < operand_size; i++){\n    if(i == 0){\n      if(op[i] == \"+\"){\n\
    \        result = operand[i] + operand[i+1];\n      }\n      else if(op[i] ==\
    \ \"-\"){\n        result = operand[i] - operand[i+1];\n      }\n      else if(op[i]\
    \ == \"*\"){\n        result = operand[i] * operand[i+1];\n      }\n      else\
    \ if(op[i] == \"//\"){\n        result = operand[i] / operand[i+1];\n      }\n\
    \      else if(op[i] == \"**\"){\n        result = pow(operand[i], operand[i+1]);\n\
    \      }\n    }\n    else{\n      if(op[i] == \"+\"){\n        result = result\
    \ + operand[i+1];\n      }\n      else if(op[i] == \"-\"){\n        result = result\
    \ - operand[i+1];\n      }\n      else if(op[i] == \"*\"){\n        result = result\
    \ * operand[i+1];\n      }\n      else if(op[i] == \"//\"){\n        result =\
    \ result / operand[i+1];\n      }\n      else if(op[i] == \"**\"){\n        result\
    \ = pow(result, operand[i+1]);\n      }\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  assert(op.size() == operand.size() - 1);\n  assert(op.size() >=\
    \ 1);\n  assert(operand.size() >= 2);\n  std::stack<long> stack;\n  for (int i\
    \ = 0; i < op.size(); i++) {\n    long b = operand[i+1];\n    long a = operand[i];\n\
    \    std::string curr_op = op[i];\n    if (curr_op == \"+\") {\n      stack.push(a\
    \ + b);\n    } else if (curr_op == \"-\") {\n      stack.push(a - b);\n    } else\
    \ if (curr_op == \"*\") {\n      stack.push(a * b);\n    } else if (curr_op ==\
    \ \"//\") {\n      stack.push(a / b);\n    } else if (curr_op == \"**\") {\n \
    \     stack.push(pow(a, b));\n    }\n  }\n  return stack.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpqr_l4f1c: /tmp/tmpqr_l4f1c.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<int> st;\n    st.push(operand[0]);\n    operand.erase(operand.begin());\n\
    \    int a = 0, b = 0;\n    while(!op.empty()){\n        if(op[0] == \"+\"){\n\
    \            a = st.top();\n            st.pop();\n            b = operand[0];\n\
    \            operand.erase(operand.begin());\n            st.push(a+b);\n    \
    \    }else if(op[0] == \"-\"){\n            a = st.top();\n            st.pop();\n\
    \            b = operand[0];\n            operand.erase(operand.begin());\n  \
    \          st.push(a-b);\n        }else if(op[0] == \"*\"){\n            a = st.top();\n\
    \            st.pop();\n            b = operand[0];\n            operand.erase(operand.begin());\n\
    \            st.push(a*b);\n        }else if(op[0] == \"//\"){\n            a\
    \ = st.top();\n            st.pop();\n            b = operand[0];\n          \
    \  operand.erase(operand.begin());\n            st.push(a/b);\n        }else if(op[0]\
    \ == \"**\"){\n            a = st.top();\n            st.pop();\n            b\
    \ = operand[0];\n            operand.erase(operand.begin());\n            st.push(pow(a,b));\n\
    \        }\n        op.erase(op.begin());\n    }\n    return st.top();\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpwrvb12dr: /tmp/tmpwrvb12dr.cpp:65: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  std::stack<long> number;\n  int i = 0;\n\
    \  number.push(operand[i++]);\n  while (i < operand.size()) {\n    if (op[i -\
    \ 1] == \"+\") {\n      number.push(operand[i++]);\n    } else if (op[i - 1] ==\
    \ \"-\") {\n      number.push(-operand[i++]);\n    } else if (op[i - 1] == \"\
    *\") {\n      long tmp = number.top();\n      number.pop();\n      number.push(tmp\
    \ * operand[i++]);\n    } else if (op[i - 1] == \"//\") {\n      long tmp = number.top();\n\
    \      number.pop();\n      number.push(tmp / operand[i++]);\n    } else if (op[i\
    \ - 1] == \"**\") {\n      long tmp = number.top();\n      number.pop();\n   \
    \   number.push(pow(tmp, operand[i++]));\n    }\n  }\n  long result = 0;\n  while\
    \ (!number.empty()) {\n    result += number.top();\n    number.pop();\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065084
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t//your code here\n\tstd::stack<long> s;\n\tfor (int i = 0; i <\
    \ op.size(); i++) {\n\t\tif (op[i] == \"//\") {\n\t\t\tlong a = s.top();\n\t\t\
    \ts.pop();\n\t\t\tlong b = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(b / a);\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = s.top();\n\t\t\ts.pop();\n\t\
    \t\tlong b = s.top();\n\t\t\ts.pop();\n\t\t\ts.push(pow(b, a));\n\t\t}\n\t\telse\
    \ {\n\t\t\ts.push(operand[i]);\n\t\t}\n\t}\n\tlong ans = s.top();\n\ts.pop();\n\
    \twhile (!s.empty()) {\n\t\tif (op[op.size() - 1] == \"+\")\n\t\t\tans += s.top();\n\
    \t\telse if (op[op.size() - 1] == \"-\")\n\t\t\tans -= s.top();\n\t\telse if (op[op.size()\
    \ - 1] == \"*\")\n\t\t\tans *= s.top();\n\t\ts.pop();\n\t}\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065084
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> mystack;\n  for(int i = 0; i < op.size(); i++)\
    \ {\n    if(op[i] == \"+\") {\n      long op1 = mystack.top();\n      mystack.pop();\n\
    \      long op2 = operand[i+1];\n      mystack.push(op1 + op2);\n    }\n    else\
    \ if(op[i] == \"-\") {\n      long op1 = mystack.top();\n      mystack.pop();\n\
    \      long op2 = operand[i+1];\n      mystack.push(op1 - op2);\n    }\n    else\
    \ if(op[i] == \"*\") {\n      long op1 = mystack.top();\n      mystack.pop();\n\
    \      long op2 = operand[i+1];\n      mystack.push(op1 * op2);\n    }\n    else\
    \ if(op[i] == \"//\") {\n      long op1 = mystack.top();\n      mystack.pop();\n\
    \      long op2 = operand[i+1];\n      mystack.push(op1 / op2);\n    }\n    else\
    \ if(op[i] == \"**\") {\n      long op1 = mystack.top();\n      mystack.pop();\n\
    \      long op2 = operand[i+1];\n      mystack.push(pow(op1, op2));\n    }\n \
    \ }\n  return mystack.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065084
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> myStack;\n    int operandSize = operand.size();\n\
    \    for(int i = 0; i < operandSize; i++) {\n        myStack.push(operand[i]);\n\
    \        std::string curr = op[i];\n        if(curr == \"+\") {\n            int\
    \ operand1 = myStack.top();\n            myStack.pop();\n            int operand2\
    \ = myStack.top();\n            myStack.pop();\n            myStack.push(operand1\
    \ + operand2);\n        } else if(curr == \"-\") {\n            int operand1 =\
    \ myStack.top();\n            myStack.pop();\n            int operand2 = myStack.top();\n\
    \            myStack.pop();\n            myStack.push(operand2 - operand1);\n\
    \        } else if(curr == \"*\") {\n            int operand1 = myStack.top();\n\
    \            myStack.pop();\n            int operand2 = myStack.top();\n     \
    \       myStack.pop();\n            myStack.push(operand1 * operand2);\n     \
    \   } else if(curr == \"//\") {\n            int operand1 = myStack.top();\n \
    \           myStack.pop();\n            int operand2 = myStack.top();\n      \
    \      myStack.pop();\n            myStack.push(operand2 / operand1);\n      \
    \  } else if(curr == \"**\") {\n            int operand1 = myStack.top();\n  \
    \          myStack.pop();\n            int operand2 = myStack.top();\n       \
    \     myStack.pop();\n            myStack.push(pow(operand2, operand1));\n   \
    \     }\n    }\n    return myStack.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<int> number;\n    for(int i = operand.size() - 1;\
    \ i >= 0; i--)\n        number.push(operand[i]);\n    for(int i = 0; i < op.size();\
    \ i++) {\n        long a = number.top();\n        number.pop();\n        long\
    \ b = number.top();\n        number.pop();\n        if(op[i] == \"+\")\n     \
    \       number.push(a + b);\n        else if(op[i] == \"-\")\n            number.push(a\
    \ - b);\n        else if(op[i] == \"*\")\n            number.push(a * b);\n  \
    \      else if(op[i] == \"//\")\n            number.push(a / b);\n        else\
    \ if(op[i] == \"**\")\n            number.push(pow(a, b));\n    }\n    return\
    \ number.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmphp1shv6x: /tmp/tmphp1shv6x.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\tif (op.size() != operand.size() - 1)\
    \ {\n\t\treturn 0;\n\t}\n\telse {\n\t\tlong long result = operand[0];\n\t\tfor\
    \ (int i = 0; i < op.size(); i++) {\n\t\t\tif (op[i] == \"+\") {\n\t\t\t\tresult\
    \ += operand[i + 1];\n\t\t\t}\n\t\t\telse if (op[i] == \"-\") {\n\t\t\t\tresult\
    \ -= operand[i + 1];\n\t\t\t}\n\t\t\telse if (op[i] == \"*\") {\n\t\t\t\tresult\
    \ *= operand[i + 1];\n\t\t\t}\n\t\t\telse if (op[i] == \"//\") {\n\t\t\t\tresult\
    \ /= operand[i + 1];\n\t\t\t}\n\t\t\telse if (op[i] == \"**\") {\n\t\t\t\tresult\
    \ = pow(result, operand[i + 1]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp_oy_8dmc: /tmp/tmp_oy_8dmc.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::string ops[] = {\"+\", \"-\", \"*\", \"//\", \"**\"};\n\
    \    int i = 0;\n    while(i < op.size()) {\n        if(op[i] == ops[0])\n   \
    \         operand[i+1] = operand[i] + operand[i+1];\n        else if(op[i] ==\
    \ ops[1])\n            operand[i+1] = operand[i] - operand[i+1];\n        else\
    \ if(op[i] == ops[2])\n            operand[i+1] = operand[i] * operand[i+1];\n\
    \        else if(op[i] == ops[3])\n            operand[i+1] = operand[i] / operand[i+1];\n\
    \        else if(op[i] == ops[4])\n            operand[i+1] = pow(operand[i],\
    \ operand[i+1]);\n        i++;\n    }\n    return operand[i];\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpncun6d8r: /tmp/tmpncun6d8r.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n   // Write your code here\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpo34oilqi: /tmp/tmpo34oilqi.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Do not forget to add parentheses.\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < op.size(); i++) {\n        res += std::to_string(operand[i])\
    \ + op[i];\n    }\n    res += std::to_string(operand[operand.size() - 1]);\n \
    \   long eval_result = 0;\n    try {\n        eval_result = std::stol(res);\n\
    \    } catch (std::out_of_range const & e) {\n        // Do nothing.\n    }\n\
    \    return eval_result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv1ye6nav: /tmp/tmpv1ye6nav.cpp:38: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\")\n\t\t\tresult += operand[i + 1];\n\t\telse if (op[i]\
    \ == \"-\")\n\t\t\tresult -= operand[i + 1];\n\t\telse if (op[i] == \"*\")\n\t\
    \t\tresult *= operand[i + 1];\n\t\telse if (op[i] == \"//\")\n\t\t\tresult /=\
    \ operand[i + 1];\n\t\telse if (op[i] == \"**\")\n\t\t\tresult = pow(result, operand[i\
    \ + 1]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpxzz07kuv: /tmp/tmpxzz07kuv.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long x = operand[0];\n    for(long i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            x += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            x -= operand[i+1];\n        }\n\
    \        else if(op[i] == \"*\") {\n            x *= operand[i+1];\n        }\n\
    \        else if(op[i] == \"//\") {\n            x /= operand[i+1];\n        }\n\
    \        else if(op[i] == \"**\") {\n            x = pow(x, operand[i+1]);\n \
    \       }\n    }\n    return x;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpqa9tzhky: /tmp/tmpqa9tzhky.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stack;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        // std::cout << op[i] << \" \" << operand[i] << \" \" << operand[i+1]\
    \ << std::endl;\n        if(op[i] == \"+\") {\n            stack.push(operand[i]\
    \ + operand[i+1]);\n        } else if(op[i] == \"-\") {\n            stack.push(operand[i]\
    \ - operand[i+1]);\n        } else if(op[i] == \"*\") {\n            stack.push(operand[i]\
    \ * operand[i+1]);\n        } else if(op[i] == \"//\") {\n            stack.push(operand[i]\
    \ / operand[i+1]);\n        } else if(op[i] == \"**\") {\n            stack.push(pow(operand[i],\
    \ operand[i+1]));\n        }\n    }\n    return stack.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpu4u8th65: /tmp/tmpu4u8th65.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi24mb5j_: /tmp/tmpi24mb5j_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // error checking\n    assert(op.size() == operand.size() -\
    \ 1);\n    assert(op.size() >= 1);\n    assert(operand.size() >= 2);\n    for\
    \ (int i = 0; i < operand.size(); i++)\n        assert(operand[i] >= 0);\n   \
    \ // do algerbra\n    long result = operand[0];\n    for (int i = 0; i < op.size();\
    \ i++) {\n        if (op[i] == \"+\") result += operand[i+1];\n        else if\
    \ (op[i] == \"-\") result -= operand[i+1];\n        else if (op[i] == \"*\") result\
    \ *= operand[i+1];\n        else if (op[i] == \"//\") result /= operand[i+1];\n\
    \        else if (op[i] == \"**\") result = pow(result, operand[i+1]);\n     \
    \   else {\n            assert(false);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp2sqsk8v2: /tmp/tmp2sqsk8v2.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Ask the user to input a set of operators and a set of numbers.\n\
    \tstd::string op;\n\tstd::vector<long> operand;\n\t// Handle the exception for\
    \ the operator vector and operand vector, please use assert\n\tassert(op.size()\
    \ != operand.size()-1);\n\t// First, we convert the strings in the operator vector\
    \ to characters.\n\tstd::vector<char> charVec;\n\tfor (int i = 0; i < op.size();\
    \ i++) {\n\t\tcharVec.push_back(op[i][0]);\n\t}\n\t// Algebraic logic\n\tfor (int\
    \ i = 0; i < operand.size(); i++) {\n\t\tif (charVec[i] == '*') {\n\t\t\toperand[i]\
    \ = operand[i] * operand[i+1];\n\t\t\toperand.erase(operand.begin() + i + 1);\n\
    \t\t\tcharVec.erase(charVec.begin() + i);\n\t\t\ti--;\n\t\t}\n\t\telse if (charVec[i]\
    \ == '/') {\n\t\t\toperand[i] = operand[i] / operand[i+1];\n\t\t\toperand.erase(operand.begin()\
    \ + i + 1);\n\t\t\tcharVec.erase(charVec.begin() + i);\n\t\t\ti--;\n\t\t}\n\t\t\
    else if (charVec[i] == '+') {\n\t\t\toperand[i] = operand[i] + operand[i+1];\n\
    \t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\tcharVec.erase(charVec.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t\telse if (charVec[i] == '-') {\n\t\t\toperand[i]\
    \ = operand[i] - operand[i+1];\n\t\t\toperand.erase(operand.begin() + i + 1);\n\
    \t\t\tcharVec.erase(charVec.begin() +\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7xtsmyj_.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp7xtsmyj_.cpp:23:14: error: declaration\
    \ of \u2018std::string op\u2019 shadows a parameter\n   23 |  std::string op;\n\
    \      |              ^~\n/tmp/tmp7xtsmyj_.cpp:24:20: error: declaration of \u2018\
    std::vector<long int> operand\u2019 shadows a parameter\n   24 |  std::vector<long>\
    \ operand;\n      |                    ^~~~~~~\n/tmp/tmp7xtsmyj_.cpp:30:28: error:\
    \ invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\
    \ {aka char}[int]\u2019 for array subscript\n   30 |   charVec.push_back(op[i][0]);\n\
    \      |                            ^\n/tmp/tmp7xtsmyj_.cpp:56:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   56 | }\n      | ^\n/tmp/tmp7xtsmyj_.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp7xtsmyj_.cpp:62:1: error:\
    \ expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmp7xtsmyj_.cpp:33:43:\
    \ note: to match this \u2018{\u2019\n   33 |  for (int i = 0; i < operand.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp7xtsmyj_.cpp:62:1:\
    \ error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmp7xtsmyj_.cpp:21:73:\
    \ note: to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmp7xtsmyj_.cpp:62:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   62 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long num = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            num += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            num -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            num *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            num /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            num = pow(num, operand[i+1]);\n\
    \        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp4tugx1ml: /tmp/tmp4tugx1ml.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong ans=operand[0];\n\tfor(int i=0;i<op.size();i++)\n\t{\n\t\t\
    if(op[i]==\"+\")\n\t\t{\n\t\t\tans+=operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"\
    -\")\n\t\t{\n\t\t\tans-=operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"*\")\n\t\t\
    {\n\t\t\tans*=operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"//\")\n\t\t{\n\t\t\t\
    ans/=operand[i+1];\n\t\t}\n\t\telse if(op[i]==\"**\")\n\t\t{\n\t\t\tans=pow(ans,operand[i+1]);\n\
    \t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpjjgj1b9q: /tmp/tmpjjgj1b9q.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() == 0 || operand.size() == 0)\n        return 0;\n\
    \    std::stack<long> s;\n    long result = 0;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result = operand[i] + operand[i+1];\n\
    \            s.push(result);\n        } else if(op[i] == \"-\") {\n          \
    \  result = operand[i] - operand[i+1];\n            s.push(result);\n        }\
    \ else if(op[i] == \"*\") {\n            result = operand[i] * operand[i+1];\n\
    \            s.push(result);\n        } else if(op[i] == \"//\") {\n         \
    \   result = operand[i] / operand[i+1];\n            s.push(result);\n       \
    \ } else if(op[i] == \"**\") {\n            result = pow(operand[i], operand[i+1]);\n\
    \            s.push(result);\n        }\n    }\n    while(!s.empty()) {\n    \
    \    result += s.top();\n        s.pop();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpcliwys2b: /tmp/tmpcliwys2b.cpp:52: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // write your code here\n    // for (int i = 0; i < op.size();\
    \ i++) {\n    //     std::cout << op[i] << std::endl;\n    // }\n    // for (int\
    \ i = 0; i < operand.size(); i++) {\n    //     std::cout << operand[i] << std::endl;\n\
    \    // }\n    std::vector<long> temp;\n    long result = 0;\n    // long op_size\
    \ = op.size();\n    long operand_size = operand.size();\n    long i = 0;\n   \
    \ while (i < operand_size) {\n        if (op[i] == \"*\") {\n            temp.push_back(operand[i]\
    \ * operand[i+1]);\n            i++;\n        } else if (op[i] == \"+\") {\n \
    \           temp.push_back(operand[i] + operand[i+1]);\n            i++;\n   \
    \     } else if (op[i] == \"-\") {\n            temp.push_back(operand[i] - operand[i+1]);\n\
    \            i++;\n        } else if (op[i] == \"//\") {\n            temp.push_back(operand[i]\
    \ / operand[i+1]);\n            i++;\n        } else if (op[i] == \"**\") {\n\
    \            long a = operand[i];\n            long b = operand[i+1];\n      \
    \      long c = 1;\n            while (b > 0) {\n                c *= a;\n   \
    \             b--;\n            }\n            temp.push_back(c);\n          \
    \  i++;\n        } else {\n            temp.push_back(operand[i]);\n        }\n\
    \        i++;\n    }\n    result = temp[0];\n    for (int i = 1; i < temp.size();\
    \ i++) {\n        result = result + temp[i];\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpt4k_qpr0: /tmp/tmpt4k_qpr0.cpp:70: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    // Your code here\n    if(op.size() ==\
    \ 0){\n        return operand[0];\n    }\n    std::stack<std::string> opStack;\n\
    \    std::stack<long> operandStack;\n    opStack.push(op[0]);\n    operandStack.push(operand[0]);\n\
    \    for(int i = 1; i < op.size(); i++){\n        if(op[i] == \"-\" || op[i] ==\
    \ \"+\"){\n            opStack.push(op[i]);\n            operandStack.push(operand[i]);\n\
    \        }else if(op[i] == \"*\"){\n            long newOperand = operandStack.top()\
    \ * operand[i];\n            operandStack.pop();\n            operandStack.push(newOperand);\n\
    \        }else if(op[i] == \"//\"){\n            long newOperand = operandStack.top()\
    \ / operand[i];\n            operandStack.pop();\n            operandStack.push(newOperand);\n\
    \        }else if(op[i] == \"**\"){\n            long newOperand = pow(operandStack.top(),\
    \ operand[i]);\n            operandStack.pop();\n            operandStack.push(newOperand);\n\
    \        }\n    }\n    long result = operandStack.top();\n    operandStack.pop();\n\
    \    while(!opStack.empty()){\n        if(opStack.top() == \"+\"){\n         \
    \   result += operandStack.top();\n        }else if(opStack.top() == \"-\"){\n\
    \            result -= operandStack.top();\n        }\n        operandStack.pop();\n\
    \        opStack.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmphb7oe6wz: /tmp/tmphb7oe6wz.cpp:64: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long num = operand[0];\n  for(int i = 0; i < op.size(); i++) {\n\
    \    if(op[i] == \"+\")\n      num += operand[i+1];\n    else if(op[i] == \"-\"\
    )\n      num -= operand[i+1];\n    else if(op[i] == \"*\")\n      num *= operand[i+1];\n\
    \    else if(op[i] == \"//\")\n      num /= operand[i+1];\n    else if(op[i] ==\
    \ \"**\")\n      num = pow(num, operand[i+1]);\n  }\n  return num;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp46p9_68s: /tmp/tmp46p9_68s.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    assert(op.size() == operand.size() - 1);\n    long sum = operand[0];\n\
    \    for (int i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n  \
    \          sum += operand[i + 1];\n        } else if (op[i] == \"-\") {\n    \
    \        sum -= operand[i + 1];\n        } else if (op[i] == \"*\") {\n      \
    \      sum *= operand[i + 1];\n        } else if (op[i] == \"//\") {\n       \
    \     sum /= operand[i + 1];\n        } else if (op[i] == \"**\") {\n        \
    \    sum = pow(sum, operand[i + 1]);\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpgxezxttv: /tmp/tmpgxezxttv.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065084
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// We will use stack, if the current char is operator, then pop\
    \ two numbers from the stack\n\t// and push the result to the stack.\n\t// Special\
    \ case: / and -.\n\t// - : if we pop from stack, it will be from top to bottom,\
    \ and we need to put them in \n\t// reverse order.\n\t// / : if it is /, we need\
    \ to cast to integer and save it to the stack.\n\tstd::stack<long> st;\n\tint\
    \ sz = op.size();\n\tfor (int i = 0; i < sz; i++) {\n\t\tif (op[i] == \"*\") {\n\
    \t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(a * b);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b -\
    \ a);\n\t\t}\n\t\telse if (op[i] == \"+\") {\n\t\t\tlong a = st.top();\n\t\t\t\
    st.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a + b);\n\t\
    \t}\n\t\telse if (op[i] == \"/\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\
    \t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b / a);\n\t\t}\n\t\t\
    else if (op[i] == \"^\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\t\
    long b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b, a));\n\t\t}\n\t\telse\
    \ {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long operand1 = st.top();\n        st.pop();\n\
    \        long operand2 = operand[i+1];\n        long total = 0;\n        if(op[i]\
    \ == \"+\") {\n            total = operand1 + operand2;\n        }\n        else\
    \ if(op[i] == \"-\") {\n            total = operand1 - operand2;\n        }\n\
    \        else if(op[i] == \"*\") {\n            total = operand1 * operand2;\n\
    \        }\n        else if(op[i] == \"//\") {\n            total = operand1 /\
    \ operand2;\n        }\n        else if(op[i] == \"**\") {\n            total\
    \ = pow(operand1, operand2);\n        }\n        st.push(total);\n    }\n    return\
    \ st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpz0eu_9yf: /tmp/tmpz0eu_9yf.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n   std::stack<long> S;\n   for(int i = 0; i < op.size(); i++) {\n\
    \       if(op[i] == \"+\") {\n           long temp = S.top();\n           S.pop();\n\
    \           S.push(S.top() + temp);\n       }\n       else if(op[i] == \"-\")\
    \ {\n           long temp = S.top();\n           S.pop();\n           S.push(S.top()\
    \ - temp);\n       }\n       else if(op[i] == \"*\") {\n           long temp =\
    \ S.top();\n           S.pop();\n           S.push(S.top() * temp);\n       }\n\
    \       else if(op[i] == \"//\") {\n           long temp = S.top();\n        \
    \   S.pop();\n           S.push(S.top() / temp);\n       }\n       else if(op[i]\
    \ == \"**\") {\n           long temp = S.top();\n           S.pop();\n       \
    \    S.push(pow(S.top(), temp));\n       }\n       else {\n           std::cout\
    \ << \"Not an operator\" << std::endl;\n       }\n   }\n   return S.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() == 0 || operand.size() == 0) {\n        return\
    \ 0;\n    }\n    // we need one more stack to store the intermediate result\n\
    \    std::stack<long> operand_stack;\n    // init the stack with the first value\n\
    \    operand_stack.push(operand[0]);\n    for(int i = 0; i < op.size(); i++) {\n\
    \        // pop the intermediate result in the stack\n        long a = operand_stack.top();\n\
    \        operand_stack.pop();\n        // pop the second value for the operator\n\
    \        long b = operand[i+1];\n        if(op[i] == \"+\") {\n            operand_stack.push(a+b);\n\
    \        } else if(op[i] == \"-\") {\n            operand_stack.push(a-b);\n \
    \       } else if(op[i] == \"*\") {\n            operand_stack.push(a*b);\n  \
    \      } else if(op[i] == \"//\") {\n            operand_stack.push(a/b);\n  \
    \      } else if(op[i] == \"**\") {\n            operand_stack.push(pow(a, b));\n\
    \        }\n    }\n    return operand_stack.top();\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp7k0aw500: /tmp/tmp7k0aw500.cpp:52: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Create a stack of type <long, string>\n  // The first value\
    \ is the number, the second value is the operator\n  std::stack<std::pair<long,\
    \ std::string>> stack;\n  // Push first element into the stack\n  stack.push(std::make_pair(operand[0],\
    \ op[0]));\n  // Iterate from the second element\n  for (int i = 1; i < operand.size();\
    \ i++) {\n    // If the current operator has a higher precedence than top operator\n\
    \    // of the stack, then push it in the stack\n    if (op[i] == \"**\" || (op[i]\
    \ == \"*\" && stack.top().second != \"**\") ||\n        (op[i] == \"/\" && stack.top().second\
    \ != \"**\" && stack.top().second != \"*\") ||\n        (op[i] == \"+\" && stack.top().second\
    \ != \"**\" && stack.top().second != \"*\" &&\n         stack.top().second !=\
    \ \"/\") ||\n        (op[i] == \"-\" && stack.top().second != \"**\" && stack.top().second\
    \ != \"*\" &&\n         stack.top().second != \"/\" && stack.top().second != \"\
    +\")) {\n      stack.push(std::make_pair(operand[i], op[i]));\n    } else {\n\
    \      // Pop top element\n      auto temp = stack.top();\n      stack.pop();\n\
    \      // Compute result based on the operation, and push it in the stack\n  \
    \    switch (temp.second[0]) {\n        case '+':\n          stack.push(std::make_pair(temp.first\
    \ + operand[i], op[i]));\n          break;\n        case '-':\n          stack.push(std::make_pair(temp.first\
    \ - operand[i], op[i]));\n          break;\n        case '*':\n          stack.push(std::make_pair(temp.first\
    \ * operand[i], op[i]));\n          break;\n        case '/':\n          stack.push(std::make_pair(temp.first\
    \ / operand[i], op[i]));\n          break;\n        case\n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ypru_b_.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmp7ypru_b_.cpp:57:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmp7ypru_b_.cpp:56:13:\
    \ error: expected \u2018:\u2019 before \u2018}\u2019 token\n   56 |         case\n\
    \      |             ^\n      |             :\n   57 | }\n      | ~          \
    \  \n/tmp/tmp7ypru_b_.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmp7ypru_b_.cpp:58:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   58 | int main() {\n     \
    \ |            ^\n/tmp/tmp7ypru_b_.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp7ypru_b_.cpp:38:12: note: to match\
    \ this \u2018{\u2019\n   38 |     } else {\n      |            ^\n/tmp/tmp7ypru_b_.cpp:63:1:\
    \ error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmp7ypru_b_.cpp:28:44:\
    \ note: to match this \u2018{\u2019\n   28 |   for (int i = 1; i < operand.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmp7ypru_b_.cpp:63:1:\
    \ error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmp7ypru_b_.cpp:21:73:\
    \ note: to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmp7ypru_b_.cpp:63:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   63 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Implement your solution here\n    long result = operand[0];\n\
    \    for(int i = 1; i < operand.size(); i++){\n        if(op[i-1] == \"+\"){\n\
    \            result += operand[i];\n        }\n        else if(op[i-1] == \"-\"\
    ){\n            result -= operand[i];\n        }\n        else if(op[i-1] == \"\
    *\"){\n            result *= operand[i];\n        }\n        else if(op[i-1] ==\
    \ \"//\"){\n            result /= operand[i];\n        }\n        else if(op[i-1]\
    \ == \"**\"){\n            result = pow(result, operand[i]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp78wj8vee: /tmp/tmp78wj8vee.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Complete this function\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp61wk42oq: /tmp/tmp61wk42oq.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long ans=operand[0];\n  for(int i=0;i<op.size();i++)\n  {\n  \
    \  if(op[i]==\"+\")\n    {\n      ans+=operand[i+1];\n    }\n    else if(op[i]==\"\
    -\")\n    {\n      ans-=operand[i+1];\n    }\n    else if(op[i]==\"*\")\n    {\n\
    \      ans*=operand[i+1];\n    }\n    else if(op[i]==\"//\")\n    {\n      ans/=operand[i+1];\n\
    \    }\n    else if(op[i]==\"**\")\n    {\n      ans=pow(ans,operand[i+1]);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpxzgvovle: /tmp/tmpxzgvovle.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    assert(op.size() == operand.size() - 1);\n    assert(op.size()\
    \ > 0);\n    assert(operand.size() > 1);\n    std::stack<long> s;\n    for (int\
    \ i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n            s.push(operand[i]\
    \ + operand[i + 1]);\n        } else if (op[i] == \"-\") {\n            s.push(operand[i]\
    \ - operand[i + 1]);\n        } else if (op[i] == \"*\") {\n            s.push(operand[i]\
    \ * operand[i + 1]);\n        } else if (op[i] == \"//\") {\n            s.push(operand[i]\
    \ / operand[i + 1]);\n        } else if (op[i] == \"**\") {\n            s.push(pow(operand[i],\
    \ operand[i + 1]));\n        }\n    }\n    return s.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpcjafpm1m: /tmp/tmpcjafpm1m.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  for(int i = op.size() - 1; i >= 0; i--) {\n    if(op[i] == \"\
    *\") {\n      operand[i + 1] = operand[i] * operand[i + 1];\n      operand.erase(operand.begin()\
    \ + i);\n      op.erase(op.begin() + i);\n    }\n    else if(op[i] == \"/\") {\n\
    \      operand[i + 1] = operand[i] / operand[i + 1];\n      operand.erase(operand.begin()\
    \ + i);\n      op.erase(op.begin() + i);\n    }\n    else if(op[i] == \"^\") {\n\
    \      operand[i + 1] = pow(operand[i], operand[i + 1]);\n      operand.erase(operand.begin()\
    \ + i);\n      op.erase(op.begin() + i);\n    }\n  }\n  for(int i = op.size()\
    \ - 1; i >= 0; i--) {\n    if(op[i] == \"+\") {\n      operand[i + 1] = operand[i]\
    \ + operand[i + 1];\n      operand.erase(operand.begin() + i);\n      op.erase(op.begin()\
    \ + i);\n    }\n    else if(op[i] == \"-\") {\n      operand[i + 1] = operand[i]\
    \ - operand[i + 1];\n      operand.erase(operand.begin() + i);\n      op.erase(op.begin()\
    \ + i);\n    }\n  }\n  return operand[0];\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpb5gljp7h: /tmp/tmpb5gljp7h.cpp:55: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // TODO: Implement your code here\n    long ans=operand[0];\n\
    \    for(int i=0;i<op.size();i++)\n    {\n        if(op[i]==\"+\")\n        {\n\
    \            ans=ans+operand[i+1];\n        }\n        else if(op[i]==\"-\")\n\
    \        {\n            ans=ans-operand[i+1];\n        }\n        else if(op[i]==\"\
    *\")\n        {\n            ans=ans*operand[i+1];\n        }\n        else if(op[i]==\"\
    //\")\n        {\n            ans=ans/operand[i+1];\n        }\n        else if(op[i]==\"\
    **\")\n        {\n            ans=pow(ans,operand[i+1]);\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpior7ukzv: /tmp/tmpior7ukzv.cpp:52: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ans=operand[0];\n    for(int i=0;i<op.size();i++)\n   \
    \ {\n        if(op[i]==\"+\")\n        {\n            ans+=operand[i+1];\n   \
    \     }\n        else if(op[i]==\"-\")\n        {\n            ans-=operand[i+1];\n\
    \        }\n        else if(op[i]==\"*\")\n        {\n            ans*=operand[i+1];\n\
    \        }\n        else if(op[i]==\"//\")\n        {\n            ans/=operand[i+1];\n\
    \        }\n        else if(op[i]==\"**\")\n        {\n            ans=pow(ans,operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp24vdl3lz: /tmp/tmp24vdl3lz.cpp:51: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    for(auto i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            stk.push(operand[i] + operand[i+1]);\n\
    \        } else if(op[i] == \"-\") {\n            stk.push(operand[i] - operand[i+1]);\n\
    \        } else if(op[i] == \"*\") {\n            stk.push(operand[i] * operand[i+1]);\n\
    \        } else if(op[i] == \"//\") {\n            stk.push(operand[i] / operand[i+1]);\n\
    \        } else if(op[i] == \"**\") {\n            stk.push(pow(operand[i], operand[i+1]));\n\
    \        }\n    }\n    return stk.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp7wbp54tu: /tmp/tmp7wbp54tu.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tint count = 0;\n\tint size = operand.size();\n\tint op_size =\
    \ op.size();\n\tstd::stack<long> st;\n\tlong left, right;\n\tfor (int i = 0; i\
    \ < size; i++) {\n\t\tst.push(operand[i]);\n\t\tif (count < op_size) {\n\t\t\t\
    if (op[count] == \"+\") {\n\t\t\t\tright = st.top();\n\t\t\t\tst.pop();\n\t\t\t\
    \tleft = st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.push(left + right);\n\t\t\t\
    }\n\t\t\telse if (op[count] == \"-\") {\n\t\t\t\tright = st.top();\n\t\t\t\tst.pop();\n\
    \t\t\t\tleft = st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.push(left - right);\n\t\
    \t\t}\n\t\t\telse if (op[count] == \"*\") {\n\t\t\t\tright = st.top();\n\t\t\t\
    \tst.pop();\n\t\t\t\tleft = st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.push(left\
    \ * right);\n\t\t\t}\n\t\t\telse if (op[count] == \"//\") {\n\t\t\t\tright = st.top();\n\
    \t\t\t\tst.pop();\n\t\t\t\tleft = st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.push(left\
    \ / right);\n\t\t\t}\n\t\t\telse if (op[count] == \"**\") {\n\t\t\t\tright = st.top();\n\
    \t\t\t\tst.pop();\n\t\t\t\tleft = st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.push(pow(left,\
    \ right));\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn st.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065085
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    int n = op.size();\n    long ans = operand[0];\n    if(n ==\
    \ 0)\n        return operand[0];\n    if(n == 1)\n        return operand[0] +\
    \ operand[1];\n    // perform ** first\n    for(int i = 0; i < n; i++){\n    \
    \    if(op[i] == \"**\"){\n            long p1 = operand[i];\n            long\
    \ p2 = operand[i+1];\n            long res = pow(p1, p2);\n            // std::cout\
    \ << \"pow : \" << p1 << \" \" << p2 << \" \" << res << std::endl;\n         \
    \   op.erase(op.begin() + i);\n            operand.erase(operand.begin() + i);\n\
    \            operand[i] = res;\n            n = op.size();\n            if(i >\
    \ 0)\n                i--;\n        }\n    }\n    // perform *, /\n    for(int\
    \ i = 0; i < n; i++){\n        if(op[i] == \"*\"){\n            long p1 = operand[i];\n\
    \            long p2 = operand[i+1];\n            long res = p1 * p2;\n      \
    \      // std::cout << \"mul : \" << p1 << \" \" << p2 << \" \" << res << std::endl;\n\
    \            op.erase(op.begin() + i);\n            operand.erase(operand.begin()\
    \ + i);\n            operand[i] = res;\n            n = op.size();\n         \
    \   if(i > 0)\n                i--;\n        }else if(op[i] == \"//\"){\n    \
    \        long p1 = operand[i];\n            long p2 = operand[i+1];\n        \
    \    long res = p1 / p2;\n            // std::cout << \"div : \" << p1 << \" \"\
    \ << p2 << \" \" << res << std::endl;\n            op.erase(op.begin() + i);\n\
    \            operand.erase(operand.begin() + i);\n            operand[i\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnjkv8p5.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmplnjkv8p5.cpp:63:22: error: expected\
    \ \u2018]\u2019 before \u2018}\u2019 token\n   63 |             operand[i\n  \
    \    |                      ^\n      |                      ]\n   64 | }\n   \
    \   | ~                     \n/tmp/tmplnjkv8p5.cpp:63:22: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   63 |             operand[i\n      |   \
    \                   ^\n      |                      ;\n   64 | }\n      | ~  \
    \                   \n/tmp/tmplnjkv8p5.cpp:65:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   65 | int main() {\n     \
    \ |            ^\n/tmp/tmplnjkv8p5.cpp:70:1: error: expected \u2018}\u2019 at\
    \ end of input\n   70 | }\n      | ^\n/tmp/tmplnjkv8p5.cpp:44:31: note: to match\
    \ this \u2018{\u2019\n   44 |     for(int i = 0; i < n; i++){\n      |       \
    \                        ^\n/tmp/tmplnjkv8p5.cpp:70:1: error: expected \u2018\
    }\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmplnjkv8p5.cpp:21:73: note:\
    \ to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmplnjkv8p5.cpp:70:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   70 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long x = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        long y = operand[i+1];\n        if(op[i] == \"+\") {\n          \
    \  x += y;\n        } else if(op[i] == \"-\") {\n            x -= y;\n       \
    \ } else if(op[i] == \"*\") {\n            x *= y;\n        } else if(op[i] ==\
    \ \"//\") {\n            x /= y;\n        } else if(op[i] == \"**\") {\n     \
    \       x = std::pow(x, y);\n        }\n    }\n    return x;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpsoqgbs_q: /tmp/tmpsoqgbs_q.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  int ret = operand[0];\n  for (int i = 0; i < op.size(); i++) {\n\
    \    if (op[i] == \"+\") {\n      ret += operand[i+1];\n    } else if (op[i] ==\
    \ \"-\") {\n      ret -= operand[i+1];\n    } else if (op[i] == \"*\") {\n   \
    \   ret *= operand[i+1];\n    } else if (op[i] == \"//\") {\n      ret /= operand[i+1];\n\
    \    } else if (op[i] == \"**\") {\n      ret = pow(ret, operand[i+1]);\n    }\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp72yhh_tw: /tmp/tmp72yhh_tw.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() == 0 || operand.size() == 0) return 0;\n    std::stack<long>\
    \ stk;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            stk.push(operand[i] + operand[i+1]);\n        } else if(op[i] ==\
    \ \"-\") {\n            stk.push(operand[i] - operand[i+1]);\n        } else if(op[i]\
    \ == \"*\") {\n            stk.push(operand[i] * operand[i+1]);\n        } else\
    \ if(op[i] == \"//\") {\n            stk.push(operand[i] / operand[i+1]);\n  \
    \      } else if(op[i] == \"**\") {\n            stk.push(pow(operand[i], operand[i+1]));\n\
    \        }\n    }\n    return stk.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpjxn01ihu: /tmp/tmpjxn01ihu.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long ans = operand[0];\n  for(int i = 0; i < op.size(); i++) {\n\
    \    if(op[i] == \"+\") {\n      ans += operand[i+1];\n    }\n    else if(op[i]\
    \ == \"-\") {\n      ans -= operand[i+1];\n    }\n    else if(op[i] == \"*\")\
    \ {\n      ans *= operand[i+1];\n    }\n    else if(op[i] == \"//\") {\n     \
    \ ans /= operand[i+1];\n    }\n    else if(op[i] == \"**\") {\n      ans = pow(ans,\
    \ operand[i+1]);\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpdml2urp1: /tmp/tmpdml2urp1.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi24mb5j_: /tmp/tmpi24mb5j_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // TODO Write your code here\n    long ans = operand[0];\n \
    \   for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\")\n            ans +=\
    \ operand[i+1];\n        else if(op[i]==\"-\")\n            ans -= operand[i+1];\n\
    \        else if(op[i]==\"*\")\n            ans *= operand[i+1];\n        else\
    \ if(op[i]==\"//\")\n            ans /= operand[i+1];\n        else if(op[i]==\"\
    **\")\n            ans = pow(ans,operand[i+1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpuwwlknai: /tmp/tmpuwwlknai.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(long i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp170jxuea: /tmp/tmp170jxuea.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    long x, y;\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            y = s.top();\n\
    \            s.pop();\n            x = s.top();\n            s.pop();\n      \
    \      s.push(x + y);\n        }\n        else if(op[i] == \"-\") {\n        \
    \    y = s.top();\n            s.pop();\n            x = s.top();\n          \
    \  s.pop();\n            s.push(x - y);\n        }\n        else if(op[i] == \"\
    *\") {\n            y = s.top();\n            s.pop();\n            x = s.top();\n\
    \            s.pop();\n            s.push(x * y);\n        }\n        else if(op[i]\
    \ == \"//\") {\n            y = s.top();\n            s.pop();\n            x\
    \ = s.top();\n            s.pop();\n            s.push(x / y);\n        }\n  \
    \      else if(op[i] == \"**\") {\n            y = s.top();\n            s.pop();\n\
    \            x = s.top();\n            s.pop();\n            s.push(pow(x, y));\n\
    \        }\n        else {\n            s.push(operand[i]);\n        }\n    }\n\
    \    return s.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  for(int i = 0; i < op.size(); i++) {\n    if(op[i] == \"//\")\
    \ {\n      operand[i] = operand[i] / operand[i+1];\n      operand.erase(operand.begin()\
    \ + i + 1);\n      op.erase(op.begin() + i);\n      i--;\n    }\n  }\n  for(int\
    \ i = 0; i < op.size(); i++) {\n    if(op[i] == \"**\") {\n      operand[i] =\
    \ pow(operand[i], operand[i+1]);\n      operand.erase(operand.begin() + i + 1);\n\
    \      op.erase(op.begin() + i);\n      i--;\n    }\n  }\n  for(int i = 0; i <\
    \ op.size(); i++) {\n    if(op[i] == \"*\") {\n      operand[i] = operand[i] *\
    \ operand[i+1];\n      operand.erase(operand.begin() + i + 1);\n      op.erase(op.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for(int i = 0; i < op.size(); i++) {\n    if(op[i]\
    \ == \"+\") {\n      operand[i] = operand[i] + operand[i+1];\n      operand.erase(operand.begin()\
    \ + i + 1);\n      op.erase(op.begin() + i);\n      i--;\n    }\n  }\n  for(int\
    \ i = 0; i < op.size(); i++) {\n    if(op[i] == \"-\") {\n      operand[i] = operand[i]\
    \ - operand[i+1];\n      operand.erase(operand.begin() + i + 1);\n      op.erase(op.begin()\
    \ + i);\n      i--;\n    }\n  }\n  return operand[0];\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    assert(op.size() == operand.size() - 1);\n    std::stack<long>\
    \ s;\n    s.push(operand[0]);\n    for (int i = 0; i < op.size(); i++) {\n   \
    \     if (op[i] == \"+\") {\n            s.push(operand[i + 1]);\n        } else\
    \ if (op[i] == \"-\") {\n            s.push(-operand[i + 1]);\n        } else\
    \ if (op[i] == \"*\") {\n            long tmp = s.top();\n            s.pop();\n\
    \            s.push(tmp * operand[i + 1]);\n        } else if (op[i] == \"//\"\
    ) {\n            long tmp = s.top();\n            s.pop();\n            s.push(tmp\
    \ / operand[i + 1]);\n        } else if (op[i] == \"**\") {\n            long\
    \ tmp = s.top();\n            s.pop();\n            s.push(pow(tmp, operand[i\
    \ + 1]));\n        }\n    }\n    long sum = 0;\n    while (!s.empty()) {\n   \
    \     sum += s.top();\n        s.pop();\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    long temp = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        std::string current = op[i];\n       \
    \ if(current == \"+\") {\n            temp += operand[i+1];\n        } else if(current\
    \ == \"-\") {\n            temp -= operand[i+1];\n        } else if(current ==\
    \ \"*\") {\n            temp *= operand[i+1];\n        } else if(current == \"\
    //\") {\n            temp /= operand[i+1];\n        } else if(current == \"**\"\
    ) {\n            temp = pow(temp, operand[i+1]);\n        }\n    }\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpuq3jho_n: /tmp/tmpuq3jho_n.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // do algebra\n    // your code goes here\n    std::stack<long>\
    \ res;\n    res.push(operand[0]);\n    long tmp;\n    for(int i = 0; i < op.size();\
    \ i++){\n        switch(op[i][0]){\n            case '+':\n                res.push(operand[i+1]);\n\
    \                break;\n            case '-':\n                res.push(-operand[i+1]);\n\
    \                break;\n            case '*':\n                tmp = res.top();\n\
    \                res.pop();\n                res.push(tmp * operand[i+1]);\n \
    \               break;\n            case '/':\n                tmp = res.top();\n\
    \                res.pop();\n                res.push(tmp / operand[i+1]);\n \
    \               break;\n            case '^':\n                tmp = res.top();\n\
    \                res.pop();\n                res.push(pow(tmp, operand[i+1]));\n\
    \                break;\n        }\n    }\n    tmp = 0;\n    while(!res.empty()){\n\
    \        tmp += res.top();\n        res.pop();\n    }\n    return tmp;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpsoi1slwu: /tmp/tmpsoi1slwu.cpp:61: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\")\n            result += operand[i+1];\n  \
    \      else if(op[i] == \"-\")\n            result -= operand[i+1];\n        else\
    \ if(op[i] == \"*\")\n            result *= operand[i+1];\n        else if(op[i]\
    \ == \"//\")\n            result /= operand[i+1];\n        else if(op[i] == \"\
    **\")\n            result = pow(result, operand[i+1]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptzer5fsi: /tmp/tmptzer5fsi.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    int n = op.size();\n    long res = operand[0];\n    for(int\
    \ i = 0; i < n; i++) {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            res -= operand[i+1];\n     \
    \   } else if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else\
    \ if(op[i] == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i]\
    \ == \"**\") {\n            res = (long)pow(res, operand[i+1]);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n  \
    \  assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpyaj6ex39: /tmp/tmpyaj6ex39.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long ans = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            ans += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp95j2s___: /tmp/tmp95j2s___.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // write your code here\n    //std::cout<<\"Op:\"<<op.size()<<\"\
    , operand:\"<<operand.size()<<std::endl;\n    assert(op.size()==operand.size()-1);\n\
    \    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n        long a,b;\n\
    \        if(st.size()>0){\n            a=st.top();\n            st.pop();\n  \
    \      }\n        if(st.size()>0){\n            b=st.top();\n            st.pop();\n\
    \        }\n        //std::cout<<a<<op[i]<<b<<std::endl;\n        if(op[i]==\"\
    +\"){\n            st.push(a+b);\n        }else if(op[i]==\"-\"){\n          \
    \  st.push(b-a);\n        }else if(op[i]==\"*\"){\n            st.push(a*b);\n\
    \        }else if(op[i]==\"//\"){\n            st.push(b/a);\n        }else if(op[i]==\"\
    **\"){\n            st.push(pow(b,a));\n        }\n    }\n    for(int i=op.size();i<operand.size();i++){\n\
    \        st.push(operand[i]);\n    }\n    return st.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpobk1xu_0: /tmp/tmpobk1xu_0.cpp:56: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    long temp;\n    for(long i = 0; i\
    \ < op.size(); i++) {\n        if(st.size() == 0) {\n            st.push(operand[i]);\n\
    \        } else {\n            if(op[i] == \"+\") {\n                st.push(st.top()\
    \ + operand[i+1]);\n            } else if(op[i] == \"-\") {\n                st.push(st.top()\
    \ - operand[i+1]);\n            } else if(op[i] == \"*\") {\n                st.push(st.top()\
    \ * operand[i+1]);\n            } else if(op[i] == \"//\") {\n               \
    \ st.push(st.top() / operand[i+1]);\n            } else if(op[i] == \"**\") {\n\
    \                temp = st.top();\n                st.pop();\n               \
    \ st.push(pow(temp, operand[i+1]));\n            }\n        }\n    }\n    return\
    \ st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpwah_m0ry: /tmp/tmpwah_m0ry.cpp:47: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// write your code here\n\t//return 0;\n\tstd::stack<long> stk;\n\
    \tfor (size_t i = 0; i < op.size(); i++) {\n\t\tlong num1 = operand[i];\n\t\t\
    long num2 = operand[i + 1];\n\t\tstd::string str = op[i];\n\t\tif (str == \"+\"\
    )\n\t\t\tstk.push(num1 + num2);\n\t\telse if (str == \"-\")\n\t\t\tstk.push(num1\
    \ - num2);\n\t\telse if (str == \"*\")\n\t\t\tstk.push(num1 * num2);\n\t\telse\
    \ if (str == \"//\")\n\t\t\tstk.push(num1 / num2);\n\t\telse if (str == \"**\"\
    )\n\t\t\tstk.push(pow(num1, num2));\n\t}\n\treturn stk.top();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp7yx3r006: /tmp/tmp7yx3r006.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long ans = operand[0];\n  long temp = ans;\n  for(long i = 0;\
    \ i < op.size(); i++) {\n    if(op[i] == \"+\") {\n      ans += operand[i+1];\n\
    \    }\n    else if(op[i] == \"-\") {\n      ans -= operand[i+1];\n    }\n   \
    \ else if(op[i] == \"*\") {\n      ans *= operand[i+1];\n    }\n    else if(op[i]\
    \ == \"//\") {\n      ans /= operand[i+1];\n    }\n    else if(op[i] == \"**\"\
    ) {\n      ans = pow(temp, operand[i+1]);\n    }\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzpqpav76: /tmp/tmpzpqpav76.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() != operand.size() - 1)\n        throw std::invalid_argument(\"\
    Operator and operand length must be equal\");\n    //op is the vector with operators\
    \ (+,-,*...) \n    //operand is the vector with operands (num)\n    // Iterate\
    \ through the vector with operators and perform the operations from left to right\n\
    \    int i=0;\n    long result = operand[i];\n    for(int i=0; i<op.size(); i++){\n\
    \        if(op[i] == \"+\")\n            result += operand[i+1];\n        else\
    \ if(op[i] == \"-\")\n            result -= operand[i+1];\n        else if(op[i]\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op[i] == \"\
    //\")\n            result /= operand[i+1];\n        else if(op[i] == \"**\")\n\
    \            result = pow(result, operand[i+1]);\n        else\n            throw\
    \ std::invalid_argument(\"Invalid operator input\");\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmplqr9s0pp: /tmp/tmplqr9s0pp.cpp:48: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code here\n    long  res = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\")\n            res +=\
    \ operand[i+1];\n        else if(op[i] == \"-\")\n            res -= operand[i+1];\n\
    \        else if(op[i] == \"*\")\n            res *= operand[i+1];\n        else\
    \ if(op[i] == \"//\")\n            res /= operand[i+1];\n        else if(op[i]\
    \ == \"**\")\n            res = pow(res, operand[i+1]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp1ng2015z: /tmp/tmp1ng2015z.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> operands;\n    std::stack<char> operators;\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\" || op[i]\
    \ == \"-\" || op[i] == \"*\" || op[i] == \"/\" || op[i] == \"^\") {\n        \
    \    operators.push(op[i][0]);\n        } else {\n            operands.push(operand[i]);\n\
    \        }\n        while(operators.size() > 0 && operands.size() > 1) {\n   \
    \         char currentOperator = operators.top();\n            long result = 0;\n\
    \            long a = operands.top();\n            operands.pop();\n         \
    \   long b = operands.top();\n            operands.pop();\n            if(currentOperator\
    \ == '+') {\n                result = a + b;\n            } else if(currentOperator\
    \ == '-') {\n                result = b - a;\n            } else if(currentOperator\
    \ == '*') {\n                result = a * b;\n            } else if(currentOperator\
    \ == '/') {\n                result = b / a;\n            } else if(currentOperator\
    \ == '^') {\n                result = pow(b, a);\n            }\n            operands.push(result);\n\
    \            operators.pop();\n        }\n    }\n    return operands.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9pv_b9tb: /tmp/tmp9pv_b9tb.cpp:56: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Enter your code here\n    long ans = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            ans\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n\
    \        } else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n     \
    \   } else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n        }\
    \ else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp5drhu0co: /tmp/tmp5drhu0co.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong ret = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\")\n\t\t\tret += operand[i + 1];\n\t\telse if (op[i]\
    \ == \"-\")\n\t\t\tret -= operand[i + 1];\n\t\telse if (op[i] == \"*\")\n\t\t\t\
    ret *= operand[i + 1];\n\t\telse if (op[i] == \"//\")\n\t\t\tret /= operand[i\
    \ + 1];\n\t\telse if (op[i] == \"**\")\n\t\t\tret = std::pow(ret, operand[i +\
    \ 1]);\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmplsoklbvp: /tmp/tmplsoklbvp.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = std::pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmphs6s98e7: /tmp/tmphs6s98e7.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tint n = op.size();\n\tstd::stack<long> st;\n\tint i = 0;\n\twhile\
    \ (i < n) {\n\t\tlong num = operand[i];\n\t\tif (op[i] == \"+\") {\n\t\t\tnum\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tnum -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tnum *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tnum /= operand[i + 1];\n\t\t}\n\t\
    \telse if (op[i] == \"**\") {\n\t\t\tnum = pow(num, operand[i + 1]);\n\t\t}\n\t\
    \tst.push(num);\n\t\ti++;\n\t}\n\tlong result = 0;\n\twhile (!st.empty()) {\n\t\
    \tresult += st.top();\n\t\tst.pop();\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmps2j6l2gv: /tmp/tmps2j6l2gv.cpp:54: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t//N is the size of the vector op, and M is the size of the vector\
    \ operand\n\tint N = op.size();\n\tint M = operand.size();\n\tassert(N == M -\
    \ 1);\n\tstd::vector<long> result(N, 0);\n\tstd::vector<long> result_temp(N, 0);\n\
    \tfor (int i = 0; i < N; i++) {\n\t\tresult[i] = operand[i] + operand[i + 1];\n\
    \t\tresult_temp[i] = operand[i] + operand[i + 1];\n\t}\n\tfor (int i = 0; i <\
    \ N; i++) {\n\t\tif (op[i] == \"*\") {\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\
    \t\t\tif (j == i) {\n\t\t\t\t\tresult[j] = result_temp[j] * operand[j + 2];\n\t\
    \t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult[j] = result_temp[j];\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tresult_temp = result;\n\t\t}\n\t\telse if (op[i] == \"/\") {\n\t\t\t\
    for (int j = 0; j < N; j++) {\n\t\t\t\tif (j == i) {\n\t\t\t\t\tresult[j] = result_temp[j]\
    \ / operand[j + 2];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult[j] = result_temp[j];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tresult_temp = result;\n\t\t}\n\t\telse if (op[i] ==\
    \ \"**\") {\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tif (j == i) {\n\t\t\t\
    \t\tresult[j] = pow(result_temp[j], operand[j + 2]);\n\t\t\t\t}\n\t\t\t\telse\
    \ {\n\t\t\t\t\tresult[j] = result_temp[j];\n\t\t\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps_hlm9om.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmps_hlm9om.cpp:64:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n     \
    \ |            ^\n/tmp/tmps_hlm9om.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmps_hlm9om.cpp:56:32: note: to match\
    \ this \u2018{\u2019\n   56 |    for (int j = 0; j < N; j++) {\n      |      \
    \                          ^\n/tmp/tmps_hlm9om.cpp:69:1: error: expected \u2018\
    }\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmps_hlm9om.cpp:55:27: note:\
    \ to match this \u2018{\u2019\n   55 |   else if (op[i] == \"**\") {\n      |\
    \                           ^\n/tmp/tmps_hlm9om.cpp:69:1: error: expected \u2018\
    }\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmps_hlm9om.cpp:32:30: note:\
    \ to match this \u2018{\u2019\n   32 |  for (int i = 0; i < N; i++) {\n      |\
    \                              ^\n/tmp/tmps_hlm9om.cpp:69:1: error: expected \u2018\
    }\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmps_hlm9om.cpp:21:73: note:\
    \ to match this \u2018{\u2019\n   21 | long do_algebra(std::vector<std::string>\
    \ op, std::vector<long> operand) {\n      |                                  \
    \                                       ^\n/tmp/tmps_hlm9om.cpp:69:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   69 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660065086
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // check validity\n  if(operand.size() == 0) return 0;\n  std::stack<long>\
    \ stack;\n  // loop through operand and operator\n  for(int i = 0; i < operand.size();\
    \ i++) {\n    stack.push(operand[i]);\n    if(i == operand.size() - 1) break;\n\
    \    std::string curr_op = op[i];\n    long operand1 = stack.top();\n    stack.pop();\n\
    \    long operand2 = stack.top();\n    stack.pop();\n    // do calculation and\
    \ push result back to stack\n    if(curr_op == \"+\") stack.push(operand1 + operand2);\n\
    \    else if(curr_op == \"-\") stack.push(operand1 - operand2);\n    else if(curr_op\
    \ == \"*\") stack.push(operand1 * operand2);\n    else if(curr_op == \"//\") stack.push(operand1\
    \ / operand2);\n    else if(curr_op == \"**\") stack.push(pow(operand1, operand2));\n\
    \  }\n  // return result\n  return stack.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong out = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tout += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tout -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tout *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"//\"\
    ) {\n\t\t\tout /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\
    \tout = pow(out, operand[i + 1]);\n\t\t}\n\t}\n\treturn out;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmptbmiew_x: /tmp/tmptbmiew_x.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> my_stack;\n  int i = 0;\n  int j = 0;\n  while(!my_stack.empty()\
    \ || i < op.size() || j < operand.size()) {\n    if(op[i] == \"+\") {\n      long\
    \ x = my_stack.top();\n      my_stack.pop();\n      long y = my_stack.top();\n\
    \      my_stack.pop();\n      my_stack.push(x + y);\n      i++;\n    } else if(op[i]\
    \ == \"-\") {\n      long x = my_stack.top();\n      my_stack.pop();\n      long\
    \ y = my_stack.top();\n      my_stack.pop();\n      my_stack.push(x - y);\n  \
    \    i++;\n    } else if(op[i] == \"*\") {\n      long x = my_stack.top();\n \
    \     my_stack.pop();\n      long y = my_stack.top();\n      my_stack.pop();\n\
    \      my_stack.push(x * y);\n      i++;\n    } else if(op[i] == \"//\") {\n \
    \     long x = my_stack.top();\n      my_stack.pop();\n      long y = my_stack.top();\n\
    \      my_stack.pop();\n      my_stack.push(x / y);\n      i++;\n    } else if(op[i]\
    \ == \"**\") {\n      long x = my_stack.top();\n      my_stack.pop();\n      long\
    \ y = my_stack.top();\n      my_stack.pop();\n      my_stack.push(pow(x, y));\n\
    \      i++;\n    } else {\n      my_stack.push(operand[j]);\n      j++;\n    }\n\
    \  }\n  return my_stack.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res=0;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"\
    +\"){\n            res=operand[i]+operand[i+1];\n            operand[i+1]=res;\n\
    \        }\n        else if(op[i]==\"-\"){\n            res=operand[i]-operand[i+1];\n\
    \            operand[i+1]=res;\n        }\n        else if(op[i]==\"*\"){\n  \
    \          res=operand[i]*operand[i+1];\n            operand[i+1]=res;\n     \
    \   }\n        else if(op[i]==\"//\"){\n            res=operand[i]/operand[i+1];\n\
    \            operand[i+1]=res;\n        }\n        else if(op[i]==\"**\"){\n \
    \           res=pow(operand[i],operand[i+1]);\n            operand[i+1]=res;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpi3al93lb: /tmp/tmpi3al93lb.cpp:50: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbb7aj21g: /tmp/tmpbb7aj21g.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tassert(op.size()+1 == operand.size());\n\tstd::stack<long> nums;\n\
    \tstd::stack<std::string> ops;\n\tint i=0;\n\tnums.push(operand[i++]);\n\tfor(auto\
    \ &c: op){\n\t\tnums.push(operand[i++]);\n\t\tint num2 = nums.top();\n\t\tnums.pop();\n\
    \t\tint num1 = nums.top();\n\t\tnums.pop();\n\t\tlong num;\n\t\tif(c == \"+\"\
    ) num = num1 + num2;\n\t\telse if(c == \"-\") num = num1 - num2;\n\t\telse if(c\
    \ == \"*\") num = num1 * num2;\n\t\telse if(c == \"//\") num = num1 / num2;\n\t\
    \telse if(c == \"**\") num = std::pow(num1, num2);\n\t\tnums.push(num);\n\t}\n\
    \treturn nums.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp7jlqxkv1: /tmp/tmp7jlqxkv1.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> s;\n\tlong op1, op2;\n\tlong ans = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tswitch (op[i][0]) {\n\t\tcase '+':\n\
    \t\t\tans += operand[i + 1];\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tans -= operand[i\
    \ + 1];\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tans *= operand[i + 1];\n\t\t\tbreak;\n\
    \t\tcase '/':\n\t\t\tans /= operand[i + 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ ans;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpqlaty4xo: /tmp/tmpqlaty4xo.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660065087
