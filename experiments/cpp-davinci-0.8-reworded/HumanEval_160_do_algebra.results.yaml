name: HumanEval_160_do_algebra
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    int i = 0;\n    long ans = operand[0];\n    for(i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            ans += operand[i+1];\n   \
    \     }\n        else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptrzoj1nx.cpp: In function 'int main()':\n/tmp/tmptrzoj1nx.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptrzoj1nx.cpp:2:\n/tmp/tmptrzoj1nx.cpp:45:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmptrzoj1nx.cpp:45:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmptrzoj1nx.cpp:45:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptrzoj1nx.cpp:45:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmptrzoj1nx.cpp:45:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptrzoj1nx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp67uzlhax.cpp: In function 'int main()':\n/tmp/tmp67uzlhax.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp67uzlhax.cpp:2:\n/tmp/tmp67uzlhax.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp67uzlhax.cpp:40:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp67uzlhax.cpp:40:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp67uzlhax.cpp:40:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp67uzlhax.cpp:40:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp67uzlhax.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tint n = op.size();\n\tassert(n == operand.size() - 1);\n\tlong\
    \ dp[n + 1][n + 1];\n\tfor (int i = 0; i <= n; i++) {\n\t\tfor (int j = 0; j <=\
    \ n; j++) {\n\t\t\tdp[i][j] = 0;\n\t\t}\n\t}\n\tint h = n;\n\twhile (h > 0) {\n\
    \t\tfor (int i = 0; i < n - h + 1; i++) {\n\t\t\tif (h == 1) {\n\t\t\t\tif (op[i]\
    \ == \"+\") dp[i][i + 1] = operand[i] + operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"-\") dp[i][i + 1] = operand[i] - operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"*\") dp[i][i + 1] = operand[i] * operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"//\") dp[i][i + 1] = operand[i] / operand[i + 1];\n\t\t\t\telse if (op[i]\
    \ == \"**\") dp[i][i + 1] = pow(operand[i], operand[i + 1]);\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tfor (int j = i; j < i + h; j++) {\n\t\t\t\t\tlong left = dp[i][j];\n\
    \t\t\t\t\tlong right = dp[j + 1][i + h];\n\t\t\t\t\tlong ans = 0;\n\t\t\t\t\t\
    if (op[j] == \"+\") ans = left + right;\n\t\t\t\t\telse if (op[j] == \"-\") ans\
    \ = left - right;\n\t\t\t\t\telse if (op[j] == \"*\") ans = left * right;\n\t\t\
    \t\t\telse if (op[j] == \"//\") ans = left / right;\n\t\t\t\t\telse if (op[j]\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5y86gycx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp5y86gycx.cpp:50:1: error: expected ')'\
    \ before '}' token\n }\n ^\n/tmp/tmp5y86gycx.cpp:50:1: error: could not convert\
    \ 'op.std::vector<_Tp, _Alloc>::operator[]<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(((std::vector<std::basic_string<char> >::size_type)j))' from 'std::basic_string<char>'\
    \ to 'bool'\n/tmp/tmp5y86gycx.cpp:50:1: error: expected primary-expression before\
    \ '}' token\n/tmp/tmp5y86gycx.cpp:50:1: error: expected ';' before '}' token\n\
    /tmp/tmp5y86gycx.cpp:51:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmp5y86gycx.cpp:56:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmp5y86gycx.cpp:56:1: error: expected '}'\
    \ at end of input\n/tmp/tmp5y86gycx.cpp:56:1: error: expected '}' at end of input\n\
    /tmp/tmp5y86gycx.cpp:56:1: error: expected '}' at end of input\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> stack;\n\tint last = operand.size() - 1;\n\t\
    for (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"**\") {\n\t\t\tlong\
    \ l = stack.top();\n\t\t\tstack.pop();\n\t\t\tstack.push(pow(l, operand[last -\
    \ i]));\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong l = stack.top();\n\
    \t\t\tstack.pop();\n\t\t\tstack.push(l / operand[last - i]);\n\t\t}\n\t\telse\
    \ if (op[i] == \"*\") {\n\t\t\tlong l = stack.top();\n\t\t\tstack.pop();\n\t\t\
    \tstack.push(l * operand[last - i]);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\
    \t\tlong l = stack.top();\n\t\t\tstack.pop();\n\t\t\tstack.push(l - operand[last\
    \ - i]);\n\t\t}\n\t\telse if (op[i] == \"+\") {\n\t\t\tlong l = stack.top();\n\
    \t\t\tstack.pop();\n\t\t\tstack.push(l + operand[last - i]);\n\t\t}\n\t\telse\
    \ {\n\t\t\tstack.push(operand[last - i]);\n\t\t}\n\t}\n\treturn stack.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaic7ebcb.cpp: In function 'int main()':\n/tmp/tmpaic7ebcb.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaic7ebcb.cpp:2:\n/tmp/tmpaic7ebcb.cpp:58:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpaic7ebcb.cpp:58:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpaic7ebcb.cpp:58:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaic7ebcb.cpp:58:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpaic7ebcb.cpp:58:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpaic7ebcb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // add code here\n    std::stack<long> s;\n    for(int i=0;i<op.size();i++){\n\
    \        if(op[i]==\"+\"){\n            int ele1=s.top();\n            s.pop();\n\
    \            int ele2=s.top();\n            s.pop();\n            s.push(ele1+ele2);\n\
    \        }\n        else if(op[i]==\"-\"){\n            int ele1=s.top();\n  \
    \          s.pop();\n            int ele2=s.top();\n            s.pop();\n   \
    \         s.push(ele2-ele1);\n        }\n        else if(op[i]==\"*\"){\n    \
    \        int ele1=s.top();\n            s.pop();\n            int ele2=s.top();\n\
    \            s.pop();\n            s.push(ele1*ele2);\n        }\n        else\
    \ if(op[i]==\"//\"){\n            int ele1=s.top();\n            s.pop();\n  \
    \          int ele2=s.top();\n            s.pop();\n            s.push(ele2/ele1);\n\
    \        }\n        else if(op[i]==\"**\"){\n            int ele1=s.top();\n \
    \           s.pop();\n            int ele2=s.top();\n            s.pop();\n  \
    \          s.push(pow(ele2,ele1));\n        }\n        else{\n            s.push(operand[i]);\n\
    \        }\n    }\n    return s.top();\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvg220ki.cpp: In function 'int main()':\n/tmp/tmpdvg220ki.cpp:67:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdvg220ki.cpp:2:\n/tmp/tmpdvg220ki.cpp:68:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpdvg220ki.cpp:68:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpdvg220ki.cpp:68:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdvg220ki.cpp:68:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpdvg220ki.cpp:68:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpdvg220ki.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzww9jbwm.cpp: In function 'int main()':\n/tmp/tmpzww9jbwm.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzww9jbwm.cpp:2:\n/tmp/tmpzww9jbwm.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpzww9jbwm.cpp:40:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpzww9jbwm.cpp:40:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzww9jbwm.cpp:40:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpzww9jbwm.cpp:40:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpzww9jbwm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // insert your code here\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    return 0;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeswr7nrk.cpp: In function 'int main()':\n/tmp/tmpeswr7nrk.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeswr7nrk.cpp:2:\n/tmp/tmpeswr7nrk.cpp:39:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpeswr7nrk.cpp:39:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpeswr7nrk.cpp:39:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpeswr7nrk.cpp:39:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpeswr7nrk.cpp:39:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeswr7nrk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphuobug5m.cpp: In function 'int main()':\n/tmp/tmphuobug5m.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphuobug5m.cpp:2:\n/tmp/tmphuobug5m.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmphuobug5m.cpp:40:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmphuobug5m.cpp:40:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphuobug5m.cpp:40:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphuobug5m.cpp:40:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphuobug5m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    assert(op.size() == operand.size() - 1);\n    assert(op.size()\
    \ >= 1);\n    assert(operand.size() >= 2);\n    std::stack<long> s;\n    for (int\
    \ i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n            long\
    \ sum = s.top();\n            s.pop();\n            sum += operand[i+1];\n   \
    \         s.push(sum);\n        } else if (op[i] == \"-\") {\n            long\
    \ diff = s.top();\n            s.pop();\n            diff -= operand[i+1];\n \
    \           s.push(diff);\n        } else if (op[i] == \"*\") {\n            long\
    \ prod = s.top();\n            s.pop();\n            prod *= operand[i+1];\n \
    \           s.push(prod);\n        } else if (op[i] == \"//\") {\n           \
    \ long quot = s.top();\n            s.pop();\n            quot /= operand[i+1];\n\
    \            s.push(quot);\n        } else if (op[i] == \"**\") {\n          \
    \  long exp = s.top();\n            s.pop();\n            exp = pow(exp, operand[i+1]);\n\
    \            s.push(exp);\n        }\n    }\n    return s.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9r0jqgsn.cpp: In function 'int main()':\n/tmp/tmp9r0jqgsn.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9r0jqgsn.cpp:2:\n/tmp/tmp9r0jqgsn.cpp:58:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp9r0jqgsn.cpp:58:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp9r0jqgsn.cpp:58:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9r0jqgsn.cpp:58:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp9r0jqgsn.cpp:58:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp9r0jqgsn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  \n  // YOUR CODE HERE\n  long res = operand[0];\n  std::cout <<\
    \ res << std::endl;\n  int n = op.size();\n  for(int i = 0; i < n; i++){\n   \
    \ if(op[i] == \"+\"){\n      res += operand[i+1];\n    }\n    else if(op[i] ==\
    \ \"-\"){\n      res -= operand[i+1];\n    }\n    else if(op[i] == \"*\"){\n \
    \     res *= operand[i+1];\n    }\n    else if(op[i] == \"//\"){\n      res /=\
    \ operand[i+1];\n    }\n    else if(op[i] == \"**\"){\n      res = pow(res, operand[i+1]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj73o6u88.cpp: In function 'int main()':\n/tmp/tmpj73o6u88.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj73o6u88.cpp:2:\n/tmp/tmpj73o6u88.cpp:48:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpj73o6u88.cpp:48:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpj73o6u88.cpp:48:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj73o6u88.cpp:48:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpj73o6u88.cpp:48:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj73o6u88.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tassert(op.size() == operand.size() - 1);\n\tlong answer = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tanswer\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tanswer -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tanswer *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tanswer /= operand[i + 1];\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tanswer = pow(answer, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8aw2hyd.cpp: In function 'int main()':\n/tmp/tmpb8aw2hyd.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8aw2hyd.cpp:2:\n/tmp/tmpb8aw2hyd.cpp:45:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpb8aw2hyd.cpp:45:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpb8aw2hyd.cpp:45:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb8aw2hyd.cpp:45:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpb8aw2hyd.cpp:45:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb8aw2hyd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> num;\n  std::stack<std::string> sign;\n  long\
    \ num1, num2;\n  std::string opr;\n  long result = 0;\n  std::string sgn = \"\"\
    ;\n  // check if the vector size is correct\n  if ((op.size() + 1) != operand.size())\
    \ {\n    std::cout << \"ERROR!!!!\" << std::endl;\n    return 0;\n  }\n  int i\
    \ = operand.size() - 1;\n  // push the first operand to num stack\n  num.push(operand[i]);\n\
    \  // push the first sign to sign stack\n  sign.push(op[i - 1]);\n  // remove\
    \ the first operand from operand vector\n  operand.pop_back();\n  i--;\n  // iterate\
    \ through the operators and operands\n  while (i != 0) {\n    if (op[i - 1] ==\
    \ \"-\" || op[i - 1] == \"+\") {\n      if (sign.top() == \"-\" || sign.top()\
    \ == \"+\") {\n        opr = sign.top();\n        sign.pop();\n        num1 =\
    \ num.top();\n        num.pop();\n        num2 = operand[i];\n        num.push(evaluate(num1,\
    \ num2, opr));\n        sign.push(op[i - 1]);\n      } else {\n        sign.push(op[i\
    \ - 1]);\n        num.push(operand[i]);\n      }\n    } else if (op[i - 1] ==\
    \ \"//\" || op[i - 1] == \"*\" || op[i - 1] == \"**\") {\n      if (sign.top()\
    \ == \"//\" || sign.top() == \"*\" || sign.top() == \"**\") {\n        opr = sign.top();\n\
    \        sign.pop();\n        num1 = num.top();\n        num.pop();\n        num2\
    \ = operand[i];\n        num.push(evaluate(num1, num2, opr));\n        sign.push(op[i\
    \ - 1]);\n      } else {\n        sign.push(op[i - 1]);\n}\nint main() {\n   \
    \ auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbl6ukek.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpmbl6ukek.cpp:50:42: error: 'evaluate' was\
    \ not declared in this scope\n         num.push(evaluate(num1, num2, opr));\n\
    \                                          ^\n/tmp/tmpmbl6ukek.cpp:63:42: error:\
    \ 'evaluate' was not declared in this scope\n         num.push(evaluate(num1,\
    \ num2, opr));\n                                          ^\n/tmp/tmpmbl6ukek.cpp:68:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpmbl6ukek.cpp:73:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpmbl6ukek.cpp:73:1: error: expected '}' at end of input\n/tmp/tmpmbl6ukek.cpp:73:1:\
    \ error: expected '}' at end of input\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\t// To print results to the standard\
    \ output you can use std::cout\n\t// Example: std::cout << \"Hello world!\";\n\
    \tlong res = operand[0];\n\tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i]\
    \ == \"+\")\n\t\t\tres += operand[i + 1];\n\t\telse if (op[i] == \"-\")\n\t\t\t\
    res -= operand[i + 1];\n\t\telse if (op[i] == \"*\")\n\t\t\tres *= operand[i +\
    \ 1];\n\t\telse if (op[i] == \"//\")\n\t\t\tres /= operand[i + 1];\n\t\telse if\
    \ (op[i] == \"**\")\n\t\t\tres = pow(res, operand[i + 1]);\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplx4obmon.cpp: In function 'int main()':\n/tmp/tmplx4obmon.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx4obmon.cpp:2:\n/tmp/tmplx4obmon.cpp:42:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmplx4obmon.cpp:42:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmplx4obmon.cpp:42:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplx4obmon.cpp:42:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmplx4obmon.cpp:42:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplx4obmon.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here.\n\tint n = op.size();\n\tlong res;\n\t\
    for (int i = 0; i < n; i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\toperand[i + 1]\
    \ = operand[i] + operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\t\
    operand[i + 1] = operand[i] - operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    *\") {\n\t\t\toperand[i + 1] = operand[i] * operand[i + 1];\n\t\t}\n\t\telse if\
    \ (op[i] == \"//\") {\n\t\t\toperand[i + 1] = operand[i] / operand[i + 1];\n\t\
    \t}\n\t\telse if (op[i] == \"**\") {\n\t\t\toperand[i + 1] = pow(operand[i], operand[i\
    \ + 1]);\n\t\t}\n\t}\n\tres = operand[n];\n\treturn res;\n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpre7sphq4.cpp: In function 'int main()':\n/tmp/tmpre7sphq4.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpre7sphq4.cpp:2:\n/tmp/tmpre7sphq4.cpp:47:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpre7sphq4.cpp:47:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpre7sphq4.cpp:47:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpre7sphq4.cpp:47:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpre7sphq4.cpp:47:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpre7sphq4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // cout << \"Operators are: \";\n    // for (auto op: op) {\n\
    \    //     cout << op << \" \";\n    // }\n    // cout << endl;\n    // cout\
    \ << \"Operands are: \";\n    // for (auto operand: operand) {\n    //     cout\
    \ << operand << \" \";\n    // }\n    // cout << endl;\n    long result = operand[0];\n\
    \    for (int i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n  \
    \          result += operand[i+1];\n        } else if (op[i] == \"-\") {\n   \
    \         result -= operand[i+1];\n        } else if (op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        } else if (op[i] == \"//\") {\n    \
    \        result /= operand[i+1];\n        } else if (op[i] == \"**\") {\n    \
    \        result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp76tql6md.cpp: In function 'int main()':\n/tmp/tmp76tql6md.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp76tql6md.cpp:2:\n/tmp/tmp76tql6md.cpp:50:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp76tql6md.cpp:50:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp76tql6md.cpp:50:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp76tql6md.cpp:50:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp76tql6md.cpp:50:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp76tql6md.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\
    \t\tif (op[i] == \"+\") {\n\t\t\tst.push(operand[i + 1] + operand[i]);\n\t\t}\n\
    \t\telse if (op[i] == \"-\") {\n\t\t\tst.push(operand[i] - operand[i + 1]);\n\t\
    \t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tst.push(operand[i] * operand[i + 1]);\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tst.push(operand[i] / operand[i +\
    \ 1]);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tst.push(pow(operand[i],\
    \ operand[i + 1]));\n\t\t}\n\t}\n\treturn st.top();\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofkm2ybs.cpp: In function 'int main()':\n/tmp/tmpofkm2ybs.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpofkm2ybs.cpp:2:\n/tmp/tmpofkm2ybs.cpp:44:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpofkm2ybs.cpp:44:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpofkm2ybs.cpp:44:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpofkm2ybs.cpp:44:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpofkm2ybs.cpp:44:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpofkm2ybs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  long answer=0;\n  while(op.size()>0){\n \
    \   if(op[0]==\"//\"){\n      int a=operand[0];\n      int b=operand[1];\n   \
    \   answer=a/b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"**\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=pow(a,b);\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"*\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=a*b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"+\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=a+b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else if(op[0]==\"-\"){\n      int a=operand[0];\n      int b=operand[1];\n\
    \      answer=a-b;\n      operand.erase(operand.begin());\n      operand.erase(operand.begin());\n\
    \      operand.insert(operand.begin(),answer);\n      op.erase(op.begin());\n\
    \    }\n    else{\n      break\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpno3zeeqy.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpno3zeeqy.cpp:72:1: error: expected ';'\
    \ before '}' token\n }\n ^\n/tmp/tmpno3zeeqy.cpp:73:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpno3zeeqy.cpp:78:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmpno3zeeqy.cpp:78:1: error:\
    \ expected '}' at end of input\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm4qsq5v9.cpp: In function 'int main()':\n/tmp/tmpm4qsq5v9.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm4qsq5v9.cpp:2:\n/tmp/tmpm4qsq5v9.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpm4qsq5v9.cpp:40:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpm4qsq5v9.cpp:40:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm4qsq5v9.cpp:40:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpm4qsq5v9.cpp:40:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm4qsq5v9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  int n = op.size();\n  long res = operand[0];\n  for(int i = 0;\
    \ i < n; i++) {\n    if(op[i] == \"+\") res += operand[i+1];\n    else if(op[i]\
    \ == \"-\") res -= operand[i+1];\n    else if(op[i] == \"*\") res *= operand[i+1];\n\
    \    else if(op[i] == \"//\") res /= operand[i+1];\n    else if(op[i] == \"**\"\
    ) res = std::pow(res, operand[i+1]);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfx5sdq9w.cpp: In function 'int main()':\n/tmp/tmpfx5sdq9w.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfx5sdq9w.cpp:2:\n/tmp/tmpfx5sdq9w.cpp:35:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfx5sdq9w.cpp:35:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfx5sdq9w.cpp:35:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfx5sdq9w.cpp:35:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfx5sdq9w.cpp:35:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfx5sdq9w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\tlong ans = operand[0];\n\tfor (int\
    \ i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\")\n\t\t\tans += operand[i\
    \ + 1];\n\t\telse if (op[i] == \"-\")\n\t\t\tans -= operand[i + 1];\n\t\telse\
    \ if (op[i] == \"*\")\n\t\t\tans *= operand[i + 1];\n\t\telse if (op[i] == \"\
    //\")\n\t\t\tans /= operand[i + 1];\n\t\telse if (op[i] == \"**\")\n\t\t\tans\
    \ = pow(ans, operand[i + 1]);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzrrzhk3a.cpp: In function 'int main()':\n/tmp/tmpzrrzhk3a.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzrrzhk3a.cpp:2:\n/tmp/tmpzrrzhk3a.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpzrrzhk3a.cpp:40:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpzrrzhk3a.cpp:40:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzrrzhk3a.cpp:40:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpzrrzhk3a.cpp:40:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpzrrzhk3a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  exit_code: 1
  status: SyntaxError
