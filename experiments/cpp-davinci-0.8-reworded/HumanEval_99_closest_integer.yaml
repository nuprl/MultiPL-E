name: HumanEval_99_closest_integer
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ a value (string) representing a number\n// and returns the closest integer to\
  \ it. If the number is equidistant\n// from two integers, round it away from zero.\n\
  // Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
  15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
  \ number is equidistant\n// from two integers, the one you should return is the\
  \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\")\
  \ should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string\
  \ value) {\n"
tests: "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
  10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
  -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
  0\")) == (0));\n}\n"
completions: ["  float num = std::stof(value);\n  if (num >= 0){\n    if (num - std::floor(num)\
    \ >= 0.5){\n      return std::ceil(num);\n    }\n    else{\n      return std::floor(num);\n\
    \    }\n  }\n  else{\n    if (num - std::floor(num) >= 0.5){\n      return std::ceil(num);\n\
    \    }\n    else{\n      return std::floor(num);\n    }\n  }", "  long int x =\
    \ stol(value);\n  float res = x - (int)x;\n  if (res >= 0.5) {\n    return ceil(x);\n\
    \  } else {\n    return floor(x);\n  }", "  float f;\n  std::istringstream is(value);\n\
    \  is >> f;\n  long l = f;\n  return f > l ? l + 1 : l;", "\t// Your code here.",
  '', "  // version 1\n  // auto it = static_cast<int>(atof(value.c_str()));\n  //\
    \ if(value.find('.') != std::string::npos){\n  //   double fractionalPart = atof(value.c_str())\
    \ - it;\n  //   if(fractionalPart < 0.5){\n  //     return it;\n  //   }else{\n\
    \  //     return it + 1;\n  //   }\n  // }else{\n  //   return it;\n  // }\n\n\
    \  // version 2\n  // return round(atof(value.c_str()));\n\n  // version 3\n \
    \ double valueToRound = atof(value.c_str());\n  return (long)valueToRound;", " \
    \   double num = std::stod(value);\n    return std::lround(num);", "  double d_val\
    \ = atof(value.c_str());\n  if (d_val > 0)\n    return d_val + 0.5;\n  else if\
    \ (d_val < 0)\n    return d_val - 0.5;\n  else\n    return 0;", "  std::stringstream\
    \ ss;\n  ss << value;\n  double d = 0.0;\n  ss >> d;\n  return (long)(d + 0.5);",
  "    double num = stod(value);\n    return round(num);", "    long val = std::stol(value);\n\
    \    if (val < 0) return val - 1;\n    return val + 1;", "  // Write your code\
    \ here\n  double number = atof(value.c_str());\n  // std::cout << number << std::endl;\n\
    \  if(number > 0) {\n    return std::ceil(number);\n  } else {\n    return std::floor(number);\n\
    \  }", "  std::string s = \"0123456789\";\n  for (int i = 0; i < value.length();\
    \ i++) {\n    if (s.find(value[i]) == std::string::npos) {\n      value.erase(i,\
    \ 1);\n      i--;\n    }\n  }\n  std::stringstream ss(value);\n  long int result;\n\
    \  ss >> result;\n  if (value[value.length() - 1] > '4') {\n    result++;\n  }\n\
    \  return result;", "   float x= stof(value);\n   int num=0;\n   float n=0;\n\
    \   for(int i=x;i>=0;i--){\n      float m=fabs(x-i);\n      if(m<=n){\n      \
    \   num=i;\n         n=m;\n      }\n   }\n   return num;", "    std::stringstream\
    \ toDouble(value);\n    double d;\n    toDouble >> d;\n    long rounded = round(d);\n\
    \    return rounded;", "  std::istringstream buffer(value);\n  double d;\n  buffer\
    \ >> d;\n  return d >= 0 ? std::floor(d) : std::ceil(d);", "    double x = std::stod(value);\n\
    \    int y = std::round(x);\n    return y;", "  int num = std::stoi(value);\n\
    \  int dec = num - (int)num;\n  if (dec < 0.5) {\n    return num;\n  } else {\n\
    \    return num + 1;\n  }", "  return value.find('.') != std::string::npos ? std::round(std::stod(value))\
    \ : std::stol(value);", "  // your code goes here\n  double new_val = std::stod(value);\n\
    \  if(abs(ceil(new_val) - new_val) > abs(floor(new_val) - new_val)) {\n    return\
    \ round(new_val);\n  }\n  else {\n    return ceil(new_val);\n  }", "    double\
    \ x = strtod(value.c_str(), NULL);\n    // if (x < 0)\n    //     return floor(x);\n\
    \    // else\n    //     return ceil(x);\n    return round(x);", "\tdouble  d\
    \ = atof(value.c_str());\n\tint     i = static_cast<int>(d);\n\tdouble  diff_i\
    \ = fabs(d - i);\n\tdouble  diff_ip1 = fabs(d - (i + 1));\n\tint     ret = diff_i\
    \ < diff_ip1 ? i : i + 1;\n\treturn (ret);", "    double temp = std::stod(value);\n\
    \    long result = (long)temp;\n    return result + ((temp-result) > 0 ? 1 : 0);",
  "  std::stringstream ss(value);\n  double d = 0.0;\n  ss >> d;\n  long integer =\
    \ (long)d;\n  double fraction = d - integer;\n  if (std::abs(fraction) == 0.5)\
    \ {\n    integer += (fraction > 0) ? 1 : -1;\n  } else if (std::abs(fraction)\
    \ > 0.5) {\n    integer += (fraction > 0) ? 1 : -1;\n  }\n  return integer;",
  "\t// TODO\n\tint size = value.size();\n\t// cout << size << endl;\n\tstd::stringstream\
    \ ss;\n\tfor (int i = 0; i < size; i++) {\n\t\tif (value[i] != '.') {\n\t\t\t\
    ss << value[i];\n\t\t}\n\t}\n\tint closestInteger = std::stoi(ss.str());\n\t//\
    \ std::cout << closestInteger << std::endl;\n\tdouble num = std::stod(value);\n\
    \tdouble decimal = num - closestInteger;\n\t// std::cout << decimal << std::endl;\n\
    \tif (decimal >= 0.5) {\n\t\tclosestInteger += 1;\n\t}\n\telse if (decimal <=\
    \ -0.5) {\n\t\tclosestInteger -= 1;\n\t}\n\treturn closestInteger;", "\treturn\
    \ floor(stod(value) + 0.5);", "    int position = value.find(\".\");\n    int\
    \ decimal_part = stoi(value.substr(position+1, 2));\n    int integer_part = stoi(value.substr(0,\
    \ position));\n    if (decimal_part == 0)\n        return integer_part;\n    else\
    \ if (decimal_part < 5)\n        return integer_part;\n    else if (decimal_part\
    \ > 5)\n        return integer_part + 1;\n    else if (decimal_part == 5) {\n\
    \        // This will happen only if the last digit of the integer part\n    \
    \    // is odd\n        if ((integer_part % 2) == 1)\n            return integer_part\
    \ + 1;\n        else\n            return integer_part;\n    }", "  float f = std::stof(value);\n\
    \  float intpart;\n  float fracpart = modf(f, &intpart);\n  if (fracpart >= 0.5)\
    \ {\n    intpart += 1;\n  }\n  return (long)intpart;", "    bool isNegative =\
    \ false;\n    long number = 0;\n    if(value[0] == '-') {\n        isNegative\
    \ = true;\n        value = value.substr(1);\n    }\n    long part1 = std::stol(value.substr(0,\
    \ value.find('.')));\n    long part2 = std::stol(value.substr(value.find('.')\
    \ + 1));\n    if(part2 > 5) {\n        if(!isNegative) number = part1 + 1;\n \
    \       else number = part1 - 1;\n    }\n    else number = part1;\n    return\
    \ number;", "  // your code here\n  std::stringstream ss(value);\n  int num;\n\
    \  ss >> num;\n  float dec = std::stof(value) - num;\n  if (dec > 0.5)\n    return\
    \ num + 1;\n  else if (dec < -0.5)\n    return num - 1;\n  else\n    return num;",
  "  float parsedFloat = std::stof(value);\n  if (parsedFloat >= 0) {\n    return\
    \ std::ceil(parsedFloat);\n  } else {\n    return std::floor(parsedFloat);\n \
    \ }", "    double input = stod(value);\n    if(input < 0)\n        return (long)input\
    \ - 1;\n    else\n        return (long)input;", "  // Your code here\n  if(value[0]=='-'){\n\
    \    value.erase(0,1);\n    if(value.back()=='0'){\n      value.pop_back();\n\
    \      return -stol(value);\n    }\n    if(value.back()=='5'){\n      value.pop_back();\n\
    \      long num=stol(value);\n      if(num%2==0){\n        return -num;\n    \
    \  }\n      else{\n        return -(num+1);\n      }\n    }\n    else{\n     \
    \ value.pop_back();\n      return -stol(value);\n    }\n  }\n  else{\n    if(value.back()=='0'){\n\
    \      value.pop_back();\n      return stol(value);\n    }\n    if(value.back()=='5'){\n\
    \      value.pop_back();\n      long num=stol(value);\n      if(num%2==0){\n \
    \       return num;\n      }\n      else{\n        return num+1;\n      }\n  \
    \  }\n    else{\n      value.pop_back();\n      return stol(value);\n    }\n \
    \ }", '    return std::stol(value);', "  int i = 0;\n  long result;\n  std::string\
    \ str = \"\";\n  if (value[0] == '-') {\n    i = 1;\n  }\n  while (value[i] !=\
    \ '.') {\n    str += value[i];\n    i++;\n  }\n  result = std::stol(str);\n  if\
    \ (std::stol(value.substr(i+1, 1)) < 5) {\n    return result;\n  }\n  if (value[0]\
    \ == '-') {\n    return result - 1;\n  }\n  return result + 1;", "  long result;\n\
    \  long val=std::atol(value.c_str());\n  long x=std::round(val);\n  double y=val-x;\n\
    \  if(y<=0.5)\n    result=val+y;\n  else\n    result=val-y;\n  return result;",
  "    double a=atof(value.c_str());\n    return a>0?ceil(a):floor(a);", "  double\
    \ dbl = std::stod(value);\n  if (dbl >= 0) {\n    return std::ceil(dbl);\n  }\
    \ else {\n    return std::floor(dbl);\n  }", "  std::stringstream str(value);\n\
    \  double d;\n  str >> d;\n  if ((int)d == d)\n    return (int)d;\n  else\n  \
    \  return (int)d + 1;", "  long f1 = std::stol(value);\n  long f2 = f1;\n  float\
    \ f = std::stof(value);\n  f = f - f1;\n  f1 = std::round(f1);\n  if (f > 0.5)\n\
    \    return f1 + 1;\n  else if (f < -0.5)\n    return f1 - 1;\n  else\n    return\
    \ f1;", "    std::string decimal = value.substr(value.find('.')+1);\n    int decimal_value\
    \ = std::stoi(decimal);\n    int integer_value = std::stoi(value.substr(0, value.find('.')));\n\
    \    if (decimal_value < 5) {\n        return integer_value;\n    } else {\n \
    \       if (integer_value >= 0) {\n            return integer_value + 1;\n   \
    \     } else {\n            return integer_value - 1;\n        }\n    }", "  \
    \  double val = std::stod(value);\n    return val>=0? (long)floor(val+0.5):(long)ceil(val-0.5);",
  "  double val = stod(value);\n  return round(val);", "    float f = std::stof(value);\n\
    \    std::cout << std::round(f) << \"\\n\";\n    return std::round(f);", "\tlong\
    \ result = 0;\n\tdouble num = std::stod(value);\n\tif (num > 0) {\n\t\tif (num\
    \ - (long)num < 0.5)\n\t\t\tresult = (long)num;\n\t\telse\n\t\t\tresult = (long)num\
    \ + 1;\n\t}\n\telse {\n\t\tif (num - (long)num > -0.5)\n\t\t\tresult = (long)num;\n\
    \t\telse\n\t\t\tresult = (long)num - 1;\n\t}\n\treturn result;", "  std::cout\
    \ << \"INPUT: \" << value << std::endl;\n  if(value[0] == '-') {\n    value =\
    \ value.substr(1);\n    return -1 * std::round(std::stod(value));\n  }\n  return\
    \ std::round(std::stod(value));", "int x=std::stod(value);\nif(x<std::stod(value))\n\
    {return x;}\nelse if(x>std::stod(value))\n{return x+1;}\nelse{return x;}", "\t\
    double dvalue = std::stod(value);\n\tlong lvalue = std::lround(dvalue);\n\treturn\
    \ lvalue;", "  long num = 0;\n  for (auto& c : value) {\n    num *= 10;\n    num\
    \ += c - '0';\n  }\n  return num;", "    double number = std::stod(value);\n \
    \   double int_part = 0;\n    double dec_part = modf(number, &int_part);\n   \
    \ return (int) (dec_part > 0.5 ? int_part + 1 : int_part);", "    if (value[0]\
    \ == '-') {\n        value.erase(0, 1);\n        if (value.find('.') == std::string::npos)\
    \ {\n            return std::stol(value) * -1;\n        }\n        double floatValue\
    \ = std::stod(value);\n        floatValue = std::ceil(floatValue);\n        return\
    \ floatValue * -1;\n    }\n    if (value.find('.') == std::string::npos) {\n \
    \       return std::stol(value);\n    }\n    double floatValue = std::stod(value);\n\
    \    floatValue = std::ceil(floatValue);\n    return floatValue;", "    // Write\
    \ your code here\n    float x = std::stof(value);\n    float y = std::ceil(x);\n\
    \    float z = std::floor(x);\n    if(abs(x-y)>abs(x-z))\n        return (long)z;\n\
    \    else\n        return (long)y;", "\tint ret = (int) std::round(std::stod(value));\n\
    \treturn ret;", "  std::istringstream stream(value);\n  double d;\n  stream >>\
    \ d;\n  return (long) d;", '  return round(stof(value));', "\tint size=value.size();\n\
    \tfor(int i=0;i<size;i++){\n\t\tif(value[i]=='.'){\n\t\t\tlong num=stol(value);\n\
    \t\t\treturn num;\n\t\t}\n\t}\n\treturn stol(value);", "  double input_double;\n\
    \  int input_int;\n  input_double = std::stod(value);\n  input_int = (int) input_double;\n\
    \  if(input_double < 0) {\n    if((input_double - input_int) <= -0.5) {\n    \
    \  return (input_int - 1);\n    }\n    else {\n      return input_int;\n    }\n\
    \  }\n  else {\n    if((input_double - input_int) >= 0.5) {\n      return (input_int\
    \ + 1);\n    }\n    else {\n      return input_int;\n    }\n  }", "  // Return\
    \ the closest integer as a long\n  // 1. convert the string to floating point\
    \ number.\n  //    std::string::size_type sz;\n  // 2. round the number using\
    \ the round function (round.h).\n  // 3. convert the rounded number to integer.\n\
    \  // 4. return the integer as a long.\n  std::string::size_type sz;\n  double\
    \ num = std::stod(value, &sz);\n  int result = round(num);\n  return result;",
  "  int value_len = value.length();\n  if(value_len == 0) {\n    return 0;\n  }\n\
    \  char last_char = value[value_len - 1];\n  int last_digit = last_char - '0';\n\
    \  if(last_digit < 5) {\n    return std::stol(value);\n  }\n  //std::cout << last_digit\
    \ << std::endl;\n  if(last_digit >= 5) {\n    int i = 0;\n    int increment =\
    \ 0;\n    for(i = value_len - 1; i >= 0; i--) {\n      if(value[i] != '9') {\n\
    \        break;\n      }\n      increment++;\n    }\n    int j = 0;\n    std::string\
    \ num = \"\";\n    for(j = 0; j < i; j++) {\n      num += value[j];\n    }\n \
    \   int num_value = std::stoi(num);\n    num_value++;\n    num = std::to_string(num_value);\n\
    \    while(increment > 0) {\n      num += \"0\";\n      increment--;\n    }\n\
    \    return std::stol(num);\n  }\n  return std::stol(value);", "    long sz =\
    \ value.size();\n    long i;\n    long integer = 0;\n    std::stringstream ss;\n\
    \    ss << value;\n    ss >> integer;\n    for(i = 0; i < sz && value[i] != '.';\
    \ i++);\n    if(i == sz)\n        return integer;\n    long decimal = 0;\n   \
    \ ss >> decimal;\n    if(value[0] == '-')\n        return (decimal < 50) ? integer\
    \ : (integer - 1);\n    return (decimal < 50) ? integer : (integer + 1);", '  return
    std::round(std::stod(value));', "    double floating_value = std::stod(value);\n\
    \    double decimal_part = floating_value - std::floor(floating_value);\n    return\
    \ (decimal_part >= 0.5) ? std::ceil(floating_value) : std::floor(floating_value);",
  "  \n    std::cout << \"value: \" << value << std::endl;\n  \n  double number =\
    \ std::stod(value);\n  \n  std::cout << \"number: \" << number << std::endl;\n\
    \  \n  long closest = static_cast<long>(number);\n  \n  std::cout << \"closest:\
    \ \" << closest << std::endl;\n  \n  return closest;", "  // your code here\n\
    \  long int integer = stoi(value);\n  long double decimal = stod(value) - integer;\n\
    \  if (decimal >= 0.5)\n    return integer + 1;\n  else if (decimal <= -0.5)\n\
    \    return integer - 1;\n  else\n    return integer;", "  //your code here!\n\
    \  int z = value.size();\n  int c = 0;\n  int r = 0;\n  int t = 0;\n  if(value[0]\
    \ == '-'){\n    std::string s = value.substr(1,z-1);\n    std::cout << s << std::endl;\n\
    \    double ans = std::stod(s);\n    int ans2 = (int)ans;\n    int ans3 = ans2;\n\
    \    std::cout << ans2 << std::endl;\n    c = -1;\n    r = 0;\n    std::cout <<\
    \ \"ans2: \" << ans2 << std::endl;\n    for(int i = z-1; i >= 1; i--){\n     \
    \ if(value[i] == '.'){\n        r = i;\n        t = i;\n        std::cout << \"\
    i: \" << i << std::endl;\n        break;\n      }\n    }\n    std::cout << \"\
    r: \" << r << std::endl;\n    if(r == 0){\n      return ans2;\n    }\n    if(r\
    \ != 0){\n      if(r+1 == z){\n        return ans2;\n      }\n      else{\n  \
    \      std::string s2 = value.substr(r+1,z-r);\n        std::cout << s2 << std::endl;\n\
    \        int ans4 = std::stoi(s2);\n        std::cout << \"ans4: \" << ans4 <<\
    \ std::endl;\n        if(ans4 >= 5){\n          ans2 = ans2 + 1;\n          return\
    \ ans2;\n        }\n        else{\n          return ans2;\n        }\n      }\n\
    \    }\n  }\n  else{\n    std::string s = value;\n    std::cout << s << std::endl;\n\
    \    double ans = std::stod(s);\n    int ans2 = (int)ans;\n    int ans3 = ans2;\n\
    \    std::cout << ans2 << std::endl;\n    c = 1;\n    r = 0;\n    std::", '  return
    0;', "  double value_dbl = stod(value);\n  if (value_dbl > 0){\n    value_dbl\
    \ = ceil(value_dbl);\n  } else {\n    value_dbl = floor(value_dbl);\n  }\n  return\
    \ value_dbl;", "  char* end;\n  double d = strtod(value.c_str(), &end);\n  double\
    \ i = round(d);\n  return (long)i;", "  if (value.find(\".\") == -1) {\n    return\
    \ stoi(value);\n  }\n  else {\n    int multiplier = pow(10, value.size() - value.find(\"\
    .\") - 1);\n    double num = stod(value);\n    int nearestInt = num * multiplier;\n\
    \    if (abs(num - (nearestInt / multiplier)) > 0.5) {\n      return (nearestInt\
    \ / multiplier) + ((nearestInt > 0) ? 1 : -1);\n    }\n    else {\n      return\
    \ nearestInt / multiplier;\n    }\n  }", "  float a=std::stof(value);\n  int b=round(a);\n\
    \  std::cout<<b<<std::endl;", "\tdouble num = std::stod(value);\n\tif (((int)num\
    \ - num) >= 0.5) {\n\t\treturn (int)num - 1;\n\t}\n\telse {\n\t\treturn (int)num;\n\
    \t}", "  float val = std::stof(value);\n  if(val >= 0)\n  {\n    if(std::fmod(val,1)\
    \ >= 0.5)\n    {\n      val += 1 - std::fmod(val,1);\n    }\n    else\n    {\n\
    \      val -= std::fmod(val,1);\n    }\n  }\n  else\n  {\n    if(std::fmod(val,1)\
    \ <= -0.5)\n    {\n      val -= std::fmod(val,1) + 1;\n    }\n    else\n    {\n\
    \      val -= std::fmod(val,1);\n    }\n  }\n  return val;", "  int size = value.size();\n\
    \  char n = value[size-1];\n  if(n < '5')\n    return std::stol(value);\n  return\
    \ std::stol(value) + 1;", "    if (value.find('.') == std::string::npos) {\n \
    \       return std::stol(value);\n    }\n    return std::stol(value.substr(0,\
    \ value.find('.')));", "  float number = std::stof(value);\n  float flr = std::floor(number);\n\
    \  float cil = std::ceil(number);\n  if (number - flr < cil - number) {\n    return\
    \ flr;\n  } else {\n    return cil;\n  }", "    double d = std::stod(value);\n\
    \    if (d - (int)d >= 0.5) {\n        return (int)d + 1;\n    }\n    return (int)d;",
  "\treturn std::round(std::stod(value));", '    //.....your code here...', "  double\
    \ num = std::stod(value);\n  long ans = (long)num;\n  if (num - ans >= 0.5) ans++;\n\
    \  return ans;", "  if(value.find(\".\") != std::string::npos) {\n    std::string::size_type\
    \ sz;\n    double val = std::stod(value, &sz);\n    int round = (val + 0.5);\n\
    \    return round;\n  }\n  return std::stoi(value);", "    long number = std::stol(value);\n\
    \    long min = std::round(number);\n    long max = min;\n    if(number - min\
    \ < 0)\n        min = min - 1;\n    else\n        max = max + 1;\n    if(abs(number\
    \ - min) == abs(number - max))\n        return (number > 0) ? max : min;\n   \
    \ return (abs(number - min) < abs(number - max)) ? min : max;", "\treturn std::round(std::stod(value));",
  "  double d = std::stod(value);\n  int r = std::round(d);\n  return r;", "  int\
    \ value_int;\n  double value_double;\n  value_double = std::stod(value);\n  value_int\
    \ = std::stoi(value);\n  if (value_double > value_int) {\n    return value_int\
    \ + 1;\n  }\n  else if (value_double < value_int) {\n    return value_int - 1;\n\
    \  }\n  else if (value_double == value_int) {\n    return value_int;\n  }", " \
    \   double num = std::stod(value);\n    if(num > 0){\n        return std::ceil(num);\n\
    \    }else{\n        return std::floor(num);\n    }", "  double x = std::stod(value);\n\
    \  return std::round(x);", "  // init variables\n  int closest;\n  int current;\n\
    \  int next;\n  double decimal = std::stod(value);\n  // create variables for\
    \ the rounded up and down version of the number\n  closest = (int) round(decimal);\n\
    \  // store the decimal component of the number\n  decimal = decimal - (int) decimal;\n\
    \  // move the decimal component over one place and convert back to integer\n\
    \  current = (int) (decimal * 10);\n  // if the number is negative, multiply it\
    \ by -1\n  if (current < 0) {\n    current *= -1;\n  }\n  // if the current number\
    \ is 5 or over, return the next integer\n  if (current >= 5) {\n    if (value[0]\
    \ == '-') {\n      closest = closest - 1;\n    } else {\n      closest = closest\
    \ + 1;\n    }\n  }\n  return closest;", "  std::cout << value << std::endl;\n\
    \  if (value.find(\".\") == std::string::npos) {\n    return std::stol(value);\n\
    \  } else {\n    auto digits = value.size() - value.find(\".\") - 1;\n    std::cout\
    \ << \"Digits : \" << digits << std::endl;\n    if (digits == 0) {\n      return\
    \ std::stol(value);\n    } else {\n      auto decimal_part = std::stod(value)\
    \ - std::stol(value);\n      std::cout << \"Decimal Part : \" << decimal_part\
    \ << std::endl;\n      if (decimal_part < 0.5) {\n        return std::stol(value);\n\
    \      } else {\n        return std::stol(value) + 1;\n      }\n    }\n  }", " \
    \ int x = std::stoi(value);\n  double y = std::stod(value);\n  if (y-x == 0.5){\n\
    \    return y < 0 ? (x-1) : (x+1);\n  }\n  else{\n    return x;\n  }", "  std::stringstream\
    \ ss(value);\n  double d;\n  ss >> d;\n  std::cout << d << std::endl;\n  if ((d\
    \ - floor(d)) >= 0.5)\n    return ceil(d);\n  else\n    return floor(d);", " \
    \   assert(value != \"0\");\n    long n = std::stol(value);\n    long floor =\
    \ n - n % 1;\n    if (n - floor >= 0.5) {\n        return floor + 1;\n    } else\
    \ {\n        return floor;\n    }", "  long rounded = std::lround(std::stod(value));\n\
    \  return rounded;", "  int index_of_decimal = value.find('.');\n  int length\
    \ = value.length();\n  int output = 0;\n  int left_of_decimal = 0;\n  int right_of_decimal\
    \ = 0;\n  std::string num_before_decimal = \"\";\n  std::string num_after_decimal\
    \ = \"\";\n  if (index_of_decimal > 0){\n    num_before_decimal = value.substr(0,\
    \ index_of_decimal);\n    num_after_decimal = value.substr(index_of_decimal+1,\
    \ length);\n    //std::cout << num_before_decimal << std::endl;\n    //std::cout\
    \ << num_after_decimal << std::endl;\n    left_of_decimal = std::stoi(num_before_decimal);\n\
    \    right_of_decimal = std::stoi(num_after_decimal);\n    if (right_of_decimal\
    \ >= 5){\n      output = left_of_decimal + 1;\n    }\n    else{\n      output\
    \ = left_of_decimal;\n    }\n  }\n  else{\n    output = std::stoi(value);\n  }\n\
    \  return output;", "\tint i = 0;\n\t// remove any leading spaces.\n\twhile (value[i]\
    \ == ' ')\n\t\ti++;\n\tint sign = 1;\n\tif (value[i] == '-') {\n\t\tsign = -1;\n\
    \t\ti++;\n\t}\n\tlong ret = 0;\n\tlong ret1 = 0;\n\t// construct the integer value\
    \ until decimal point.\n\twhile (value[i] != '.') {\n\t\tret = 10 * ret + (value[i]\
    \ - '0');\n\t\ti++;\n\t}\n\ti++;\n\t// construct the integer value after decimal\
    \ point.\n\twhile (value[i] != '\\0') {\n\t\tret1 = 10 * ret1 + (value[i] - '0');\n\
    \t\ti++;\n\t}\n\t// find the closest integer.\n\tif (ret1 == 0)\n\t\treturn ret\
    \ * sign;\n\telse if (ret1 < 5)\n\t\treturn ret * sign;\n\telse if (ret1 > 5)\n\
    \t\treturn (ret + 1) * sign;\n\telse {\n\t\tif (ret % 2 == 0)\n\t\t\treturn ret\
    \ * sign;\n\t\telse\n\t\t\treturn (ret + 1) * sign;\n\t}", '  return 0;', "  int\
    \ n = value.size();\n  int pos_digit_before_decimal;\n  int digit_after_decimal;\n\
    \  long integer;\n  for(int i = 0; i < n; i++) {\n    if(value[i] == '.') {\n\
    \      pos_digit_before_decimal = i;\n      break;\n    }\n  }\n  std::string\
    \ str_digit_before_decimal = value.substr(0, pos_digit_before_decimal);\n  std::string\
    \ str_digit_after_decimal = value.substr(pos_digit_before_decimal + 1, n);\n \
    \ //std::cout << \"str_digit_before_decimal: \" << str_digit_before_decimal <<\
    \ \"\\n\";\n  //std::cout << \"str_digit_after_decimal: \" << str_digit_after_decimal\
    \ << \"\\n\";\n  digit_after_decimal = std::stoi(str_digit_after_decimal);\n \
    \ //std::cout << \"digit_after_decimal: \" << digit_after_decimal << \"\\n\";\n\
    \  if(digit_after_decimal >= 5) {\n    integer = std::stoi(str_digit_before_decimal)\
    \ + 1;\n  }\n  else {\n    integer = std::stoi(str_digit_before_decimal);\n  }\n\
    \  //std::cout << \"integer: \" << integer << \"\\n\";\n  return integer;", "\t\
    int i=value.length();\n\tfloat result=0;\n\tfloat result2=0;\n\tfloat num=0;\n\
    \tfor(int i=0;i<value.length();i++){\n\t\tif(value[i]=='.'){\n\t\t\tresult=atof(value.c_str());\n\
    \t\t\tresult2=result;\n\t\t\tnum=result2-(int)result2;\n\t\t\tif(num<0.5){\n\t\
    \t\t\treturn result;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(result>0){\n\t\t\t\t\t\
    return result+1;\n\t\t\t\t}\n\t\t\t\telse if(result<0){\n\t\t\t\t\treturn result-1;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tresult=atof(value.c_str());\n\treturn result;",
  '  return std::stol(value, 0, 10);', '    // Write your code here', "   long int_val\
    \ = std::stol(value);\n   std::string value_dbl = std::to_string(int_val);\n \
    \  if (value == value_dbl)\n      return int_val;\n   else if (value[0] == '-')\n\
    \      return int_val - 1;\n   else\n      return int_val + 1;", "  float x =\
    \ std::stof(value);\n  if (x - std::floor(x) < 0.5)\n    return std::floor(x);\n\
    \  else\n    return std::ceil(x);", "    // write function code here...\n    long\
    \ closestInt=0;\n    long valueAsLong=std::stol(value);\n    closestInt=std::round(valueAsLong);\n\
    \    return closestInt;", "\t// TODO: Implement the function and remove the line\
    \ below\n\tfloat num = std::stof(value);\n\tfloat value_up = std::ceil(num);\n\
    \tfloat value_down = std::floor(num);\n\tif(num-value_down == value_up-num) {\n\
    \t\tif(value_up > 0)\n\t\t\treturn value_up;\n\t\telse\n\t\t\treturn value_down;\n\
    \t}\n\telse if(num-value_down > value_up-num)\n\t\treturn value_up;\n\telse\n\t\
    \treturn value_down;", "    char buffer[20];\n    sprintf(buffer, \"%.0f\", std::stod(value));\n\
    \    return strtol(buffer, NULL, 10);", "//   std::cout << value << '\\n';\n \
    \ double d = std::stod(value);\n  if(d<0){\n    if(d-std::floor(d)<0.5){\n   \
    \   return std::floor(d);\n    }\n    else{\n      return std::ceil(d);\n    }\n\
    \  }\n  else{\n    if(std::ceil(d)-d<0.5){\n      return std::ceil(d);\n    }\n\
    \    else{\n      return std::floor(d);\n    }\n  }", "  double val = stod(value);\n\
    \  int i = val;\n  double frac = val - i;\n  if (frac >= 0.5) {\n    return i\
    \ + 1;\n  } else {\n    return i;\n  }", "    float valuef = stof(value);\n  \
    \  if (valuef > 0) {\n        return (long)valuef + 1;\n    } else {\n       \
    \ return (long)valuef - 1;\n    }", '  return std::lround(std::stod(value));',
  "\tlong number = stol(value);\n\tstd::cout << number << std::endl;\n\tdouble decimal\
    \ = number - static_cast<long>(number);\n\tstd::cout << decimal << std::endl;\n\
    \tif (decimal >= 0.5)\n\t\treturn static_cast<long>(number) + 1;\n\telse\n\t\t\
    return static_cast<long>(number);\n", "  double val = stod(value);\n  long floor\
    \ = floor(val);\n  long ceil = ceil(val);\n  long result;\n  if(val - floor >\
    \ ceil - val) {\n    result = ceil;\n  } else {\n    result = floor;\n  }\n  return\
    \ result;", "\t// convert string to floating-point number\n\tdouble num = atof(value.c_str());\n\
    \t// round towards zero\n\tint rounded_num = (int)num;\n\tif (num >= 0) {\n\t\t\
    // cases where we round away from zero\n\t\tif (num - rounded_num == 0.5) {\n\t\
    \t\treturn rounded_num + 1;\n\t\t}\n\t\telse {\n\t\t\treturn rounded_num;\n\t\t\
    }\n\t}\n\telse {\n\t\t// round away from zero\n\t\tif (num - rounded_num == -0.5)\
    \ {\n\t\t\treturn rounded_num - 1;\n\t\t}\n\t\telse {\n\t\t\treturn rounded_num;\n\
    \t\t}\n\t}", '    // your code here', '    return std::round(std::stod(value));',
  "  double val = std::stod(value);\n  return val > 0 ? std::ceil(val) : std::floor(val);",
  "  double d = std::stod(value);\n  long l = std::lround(d);\n  return l;", "  long\
    \ n = stol(value);\n  if(n > 0) {\n    if(value.substr(value.find(\".\")+1) >=\
    \ \"5\") {\n      return n+1;\n    }\n    else {\n      return n;\n    }\n  }\n\
    \  else {\n    if(value.substr(value.find(\".\")+1) >= \"5\") {\n      return\
    \ n;\n    }\n    else {\n      return n-1;\n    }\n  }", "  // Write your code\
    \ here\n  float num = std::stof(value);\n  float diff = num - floor(num);\n  if\
    \ (diff > 0.5) {\n    return (long) ceil(num);\n  } else {\n    return (long)\
    \ floor(num);\n  }", "\tstd::stringstream ss;\n\tss << value;\n\tstd::cout <<\
    \ value << std::endl;\n\tdouble temp;\n\tss >> temp;\n\treturn std::round(temp);",
  "    int precision = value.find('.');\n    if (precision == std::string::npos) {\n\
    \        return std::stol(value);\n    }\n    std::string dec = value.substr(precision\
    \ + 1);\n    long decimal = std::stol(dec);\n    long fwd = decimal >= 5 ? 1 :\
    \ 0;\n    value = value.substr(0, precision);\n    return std::stol(value) + fwd;",
  "  // TODO: Implement this function!\n    std::stringstream ss;\n    ss<<value;\n\
    \    double temp;\n    ss>>temp;\n    int a = std::floor(temp);\n    int b = std::ceil(temp);\n\
    \    double mid1 = temp - a;\n    double mid2 = b - temp;\n    if(mid1 > mid2)\n\
    \        return b;\n    return a;", "    long integer = std::stoi(value);\n  \
    \  long decimal = std::stoi(value.substr(value.find(\".\")));\n    if (decimal\
    \ > 5) integer += 1;\n    return integer;", "  //cout << strtol(value.c_str(),\
    \ NULL, 10) << endl;\n  double int_value = strtol(value.c_str(), NULL, 10);\n\
    \  //cout << int_value << endl;\n  int mod_int_value = (int)int_value;\n  //cout\
    \ << mod_int_value << endl;\n  if(int_value - mod_int_value > 0.5)\n    mod_int_value++;\n\
    \  return mod_int_value;", "  double num = stod(value);\n  long closestInt = round(num);\n\
    \  if( (double)closestInt == num ){\n    return closestInt;\n  } else if ( (double)closestInt\
    \ < num ){\n    return closestInt + 1;\n  } else {\n    return closestInt - 1;\n\
    \  }", "  double result;\n  if(value.find('.')==std::string::npos)\n    return\
    \ atol(value.c_str());\n  else\n    result=atof(value.c_str());\n  long x=result;\n\
    \  double y=result-x;\n  if(y<0.5)\n    return x;\n  else\n    return x+1;", "//\
    \ Convert the string to a double, round it to the closest int and\n// then convert\
    \ it back to a string and return it.\nreturn std::stol(std::to_string(std::round(std::stod(value))));",
  "  int x = atoi(value.c_str());\n  float y = atof(value.c_str());\n  if (y>=0) {\n\
    \    if (y-x>=0.5) {\n      return x+1;\n    }\n    else {\n      return x;\n\
    \    }\n  }\n  else {\n    if (y-x<=-0.5) {\n      return x-1;\n    }\n    else\
    \ {\n      return x;\n    }\n  }", "  double val = std::stod(value);\n  // Write\
    \ your code here\n  int num = int(val);\n  double dif = std::abs(val - num);\n\
    \  int num_1 = num + 1;\n  double dif_1 = std::abs(val - num_1);\n  if (dif <\
    \ dif_1) {\n    return num;\n  } else {\n    return num_1;\n  }", "    std::string::size_type\
    \ sz;     // alias of size_t\n    float number = std::stof(value,&sz);\n    float\
    \ decimal = number - int(number);\n    if(decimal >= 0.5){\n        return ceil(number);\n\
    \    }\n    else if(decimal <= -0.5){\n        return floor(number);\n    }\n\
    \    else{\n        return round(number);\n    }", "  int a = std::stol(value);\n\
    \  double b = std::stod(value);\n  std::cout << b << std::endl;\n  std::cout <<\
    \ a << std::endl;\n  if(b > 0) {\n    if(b - a > 0.5) {\n      return a + 1;\n\
    \    }\n    else {\n      return a;\n    }\n  }\n  else {\n    if(a - b > 0.5)\
    \ {\n      return a - 1;\n    }\n    else {\n      return a;\n    }\n  }", "\t\
    int i;\n\tlong double number = std::stold(value);\n\tlong long int len = value.length();\n\
    \tif (number < 0) {\n\t\tnumber = number * -1;\n\t}\n\tint first_digit = std::stoi(value.substr(len\
    \ - 1, 1));\n\tint second_digit = std::stoi(value.substr(len - 2, 1));\n\ti =\
    \ first_digit + second_digit * 10;\n\tif (i < 25) {\n\t\tnumber = number - second_digit\
    \ - first_digit * 10;\n\t}\n\telse if (i > 75) {\n\t\tnumber = number + (100 -\
    \ second_digit) - (10 - first_digit) * 10;\n\t}\n\telse {\n\t\tif (second_digit\
    \ % 2 == 0) {\n\t\t\tnumber = number - second_digit - first_digit * 10;\n\t\t\
    }\n\t\telse {\n\t\t\tnumber = number + (100 - second_digit) - (10 - first_digit)\
    \ * 10;\n\t\t}\n\t}\n\tif (std::stod(value) < 0) {\n\t\tnumber = number * -1;\n\
    \t}\n\treturn (long)number;", "  std::string::size_type pos;\n  double val = std::stod(value,\
    \ &pos);\n  long intpart = (long)val;\n  if (intpart == val)\n    return intpart;\n\
    \  if (val > 0)\n    return intpart + 1;\n  return intpart - 1;", "\tstd::stringstream\
    \ ss(value);\n\tdouble d;\n\tss >> d;\n\treturn d + (d >= 0 ? 0.5 : -0.5);", " \
    \   long close_int = -1;\n    long check_int = strtol(value.c_str(),NULL,10);\n\
    \    long distance_check_int = std::abs(strtol(value.c_str(),NULL,10) - check_int);\n\
    \    long distance_below_int = distance_check_int;\n    long distance_above_int\
    \ = distance_check_int;\n    // Check for the closest int below.\n    for(int\
    \ counter = 1; counter <= std::abs(check_int); counter++){\n        if(check_int\
    \ > 0){\n            distance_below_int = std::abs(check_int - counter);\n   \
    \     }\n        else{\n            distance_below_int = std::abs(check_int +\
    \ counter);\n        }\n        if(distance_below_int < distance_check_int){\n\
    \            distance_check_int = distance_below_int;\n            close_int =\
    \ check_int - counter;\n        }\n    }\n    // Check for the closest int above.\n\
    \    for(int counter = 1; counter <= std::abs(check_int); counter++){\n      \
    \  if(check_int > 0){\n            distance_above_int = std::abs(check_int + counter);\n\
    \        }\n        else{\n            distance_above_int = std::abs(check_int\
    \ - counter);\n        }\n        if(distance_above_int < distance_check_int){\n\
    \            distance_check_int = distance_above_int;\n            close_int =\
    \ check_int + counter;\n        }\n    }\n    return close_int;", "    double\
    \ val = std::stod(value);\n    long intval = (long)val;\n    if (val > intval)\
    \ {\n        if (val > intval + 0.5)\n            intval += 1;\n    }\n    return\
    \ intval;", "\t// Get the integer part and the fractional part\n\tint dot = value.find(\"\
    .\");\n\tstd::string integer = value.substr(0, dot);\n\tstd::string fractional\
    \ = value.substr(dot + 1);\n\t// If fractional is zero, then return the integer\
    \ part\n\tif (fractional == \"0\")\n\t\treturn std::stol(integer);\n\t// Compare\
    \ the first digit after the decimal point\n\telse if (fractional[0] >= '5')\n\t\
    \treturn std::stol(integer) + 1;\n\telse\n\t\treturn std::stol(integer);", "\t\
    if (value.find(\".\") == std::string::npos)\n\t\treturn stol(value);\n\tauto dotPos\
    \ = value.find(\".\");\n\treturn stol(value.substr(0, dotPos)) + (value[dotPos\
    \ + 1] >= '5');", "\treturn 0;", "  // your code here\n  int flag = 0;\n  if(value[0]\
    \ == '-'){\n    flag = 1;\n    value.erase(0,1);\n  }\n  std::string s = \"\"\
    ;\n  for(int i = 0; i < value.size(); i++){\n    if(value[i] == '.'){\n      s\
    \ = value.substr(i+1,value.size() - i);\n      value.erase(i,value.size() - i);\n\
    \      break;\n    }\n  }\n  long val = stol(value);\n  if(s.size() == 0){\n \
    \   if(flag == 1){\n      return -val;\n    }\n    return val;\n  }\n  int val2\
    \ = stoi(s);\n  if(val2 < 5){\n    if(flag == 1){\n      return -val;\n    }\n\
    \    return val;\n  }\n  else{\n    if(flag == 1){\n      return -(val+1);\n \
    \   }\n    return val+1;\n  }\n  return 0;", "    int n = value.size();\n    assert(n\
    \ > 0);\n    int pos;\n    if(value[0] == '-')\n        pos = 1;\n    else\n \
    \       pos = 0;\n    int i = pos;\n    for(; i < n; i++)\n        if(value[i]\
    \ == '.')\n            break;\n    long long_value = 0;\n    long ten = 1;\n \
    \   for(int j = i - 1; j >= pos; j--){\n        long_value += (value[j] - '0')\
    \ * ten;\n        ten *= 10;\n    }\n    long long_value2 = 0;\n    ten = 1;\n\
    \    for(int j = i + 1; j < n; j++){\n        long_value2 += (value[j] - '0')\
    \ * ten;\n        ten *= 10;\n    }\n    if(i == n)\n        return long_value;\n\
    \    if(long_value2 == 0)\n        return long_value;\n    ten = 1;\n    for(int\
    \ j = i + 1; j < n; j++)\n        ten *= 10;\n    if(long_value2 * 2 < ten)\n\
    \        return long_value;\n    if(long_value2 * 2 == ten)\n        return long_value\
    \ + 1;\n    return long_value + 1;", "    double v = atof(value.c_str());\n  \
    \  double r = round(v);\n    if (r < v) {\n        return r + 1;\n    }\n    return\
    \ r;", "  std::stringstream ss(value);\n  float x;\n  ss >> x;\n  long closest_int\
    \ = (long)x;\n  if(x - closest_int > 0.5){\n    closest_int = closest_int + 1;\n\
    \  }\n  return closest_int;", "    // Your code here\n    std::stringstream ss;\n\
    \    int number = std::stoi(value);\n    std::string string = std::to_string(number);\n\
    \    for(int i = 0; i < value.length(); i++){\n        if(value[i] == '.'){\n\
    \            return std::stoi(string);\n        }\n    }\n    return number;",
  "  float rounded, fval = std::stof(value);\n  (fval >= 0) ? rounded = std::ceil(fval)\
    \ : rounded = std::floor(fval);\n  return (long)rounded;", "    std::stringstream\
    \ ss(value);\n    double a;\n    ss >> a;\n    return(int)round(a);", "  float\
    \ f = stof(value);\n  if (f < 0) {\n    return f - 0.5;\n  }\n  else {\n    return\
    \ f + 0.5;\n  }", "    int number = stoi(value);\n    if ((number - (long)number)\
    \ >= 0.5) {\n        return number + 1;\n    }\n    return number;", "  // Your\
    \ code here\n  std::stringstream ss(value);\n  double foo;\n  ss >> foo;\n  std::cout\
    \ << foo << std::endl;\n  if ((foo + 0.5) > int(foo)) {\n    foo = int(foo) +\
    \ 1;\n  }\n  else {\n    foo = int(foo);\n  }\n  return foo;", "  std::string::size_type\
    \ sz;\n  double num = std::stod(value, &sz);\n  return std::lround(num);", " \
    \ // your code here\n  long long int n = std::stoll(value);\n  if (n > 0)\n  {\n\
    \    n = n + 0.5;\n  }\n  else if (n < 0)\n  {\n    n = n - 0.5;\n  }\n  return\
    \ n;", "  long result;\n  double d = stod(value);\n  if (d < 0)\n    result =\
    \ ceil(d);\n  else\n    result = floor(d);\n  return result;", "    // Your code\
    \ here\n    return std::stoi(value);", "  int a = (int)round(std::stod(value));\n\
    \  return a;", "  // your code here\n  float val = std::stof(value);\n  long int\
    \ part_int = std::floor(val);\n  std::cout << part_int << std::endl;\n  float\
    \ part_float = val - part_int;\n  if (part_float < 0.5) {\n    return part_int;\n\
    \  } else {\n    if (part_int > 0) {\n      return part_int + 1;\n    } else {\n\
    \      return part_int - 1;\n    }\n  }", "  // Your code here\n  double number\
    \ = std::stod(value);\n  double fractional = number - floor(number);\n  if (fractional\
    \ >= 0.5) {\n    return (int)ceil(number);\n  }\n  else\n    return (int)floor(number);",
  '', "    // Write your code here\n    double dvalue = std::stod(value);\n    return\
    \ (long)dvalue;", "    // Write your code here\n    int integer_value = atoi(value.c_str());\n\
    \    std::cout << integer_value << std::endl;\n    double double_value = stod(value);\n\
    \    std::cout << double_value << std::endl;\n    double decimal_part = double_value\
    \ - integer_value;\n    std::cout << decimal_part << std::endl;\n    if (decimal_part\
    \ < 0.5) {\n        return integer_value;\n    } else {\n        return integer_value\
    \ + 1;\n    }", "\tif (value.find(\".\") == std::string::npos) {\n\t\treturn std::stol(value);\n\
    \t}\n\telse {\n\t\tauto index = value.find(\".\");\n\t\tdouble number = std::stod(value);\n\
    \t\treturn number >= 0 ? std::ceil(number) : std::floor(number);\n\t}", '  return
    std::round(std::stod(value));', "  double num = std::stod(value);\n  return std::ceil(num);",
  "    double input_as_double = stod(value);\n    return round(input_as_double);",
  "\tdouble a = std::stod(value);\n\t// std::cout << a;\n\t// if (a > 0) {\n\t// \t\
    return (long)std::ceil(a);\n\t// } else {\n\t// \treturn (long)std::floor(a);\n\
    \t// }\n\treturn (long)std::round(a);", "    double d = atof(value.c_str());\n\
    \    return (long)d;", "  int decimal = value.find('.');\n  if (decimal == std::string::npos)\
    \ {\n    return atoi(value.c_str());\n  }\n  int integer = atoi(value.substr(0,\
    \ decimal).c_str());\n  int fraction = atoi(value.substr(decimal + 1, value.size()\
    \ - decimal).c_str());\n  if (fraction >= 5) {\n    return integer + 1;\n  }\n\
    \  return integer;", "    //      std::cout << value << \"\\n\";\n    double val_d\
    \ = std::stod(value);\n    //      std::cout << val_d << \"\\n\";\n    double\
    \ val_check = std::ceil(val_d);\n    //      std::cout << val_check << \"\\n\"\
    ;\n    if (val_check - val_d >= 0.5) {\n        return val_d;\n    } else {\n\
    \        return val_check;\n    }", "int i = 0;\nwhile(value[i]!='.'){\n    i++;",
  "\tif(value[0]=='-') {\n\t\tstd::string t1=value.substr(1,value.size()-1);\n\t\t\
    double t2=atof(t1.c_str());\n\t\tlong t3=std::ceil(t2);\n\t\treturn t3*-1;\n\t\
    }\n\tdouble t1=atof(value.c_str());\n\tlong t2=std::ceil(t1);\n\treturn t2;",
  "\nint a = std::stof(value);\nint b = a - 1;\nint c = a + 1;\nfloat d1 = std::abs(std::stof(value)\
    \ - a);\nfloat d2 = std::abs(std::stof(value) - b);\nfloat d3 = std::abs(std::stof(value)\
    \ - c);\nif (d1 <= d2 && d1 <= d3)\n{\n    return a;", "  // Your code here!\n\
    \  //std::cout<<value<<std::endl;\n  return strtol(value.c_str(),NULL,10);", " \
    \   double value_d = atof(value.c_str());\n    long value_l = value_d;\n    double\
    \ difference = value_d - value_l;\n    // Check if value is already an integer\n\
    \    if (difference == 0.0)\n        return value_l;\n    else if (difference\
    \ >= 0.5)\n        return value_l + 1;\n    else\n        return value_l - 1;",
  "  double d = std::stod(value);\n  return std::round(d);", "  std::string::size_type\
    \ sz;\n  double val = std::stod(value, &sz);\n  double int_part;\n  double dec_part\
    \ = modf(val, &int_part);\n  // for positive values and for values in range (-1,\
    \ 0) round up\n  if (val >= 0 || dec_part < -0.5) {\n    int_part += 0.5;\n  }\n\
    \  // for negative values in range (-1, -0.5) round down\n  if (val < 0 && dec_part\
    \ >= -0.5) {\n    int_part -= 0.5;\n  }\n  return (long)int_part;", "    double\
    \ dvalue = std::stod(value);\n    long ivalue = std::stol(value);\n    return\
    \ (dvalue-ivalue>=0.5)?ivalue+1:ivalue;", '    return floor(atof(value.c_str())
    + 0.5);', "  double decimal = std::stod(value);\n  return (long) round(decimal);",
  "    float n=stof(value);\n    float abs_n=n>0?n:-n;\n    int ceil_n=ceil(abs_n);\n\
    \    float diff_ceil_n=ceil_n-abs_n;\n    int floor_n=floor(abs_n);\n    float\
    \ diff_floor_n=abs_n-floor_n;\n    if(abs_n==floor_n){\n        return n>0?floor_n:-floor_n;\n\
    \    }else if(diff_ceil_n<diff_floor_n){\n        return n>0?ceil_n:-ceil_n;\n\
    \    }else{\n        return n>0?floor_n:-floor_n;\n    }", "\treturn 0;", "  int\
    \ i_value = 0;\n  float f_value = 0;\n  if (value.find('.') == std::string::npos)\
    \ {\n    i_value = std::stoi(value);\n    return i_value;\n  } else {\n    std::stringstream\
    \ ss(value);\n    ss >> f_value;\n    i_value = (int)f_value;\n    int temp =\
    \ f_value - i_value;\n    if (temp >= 0.5) {\n      return i_value + 1;\n    }\
    \ else {\n      return i_value;\n    }\n  }", "  long output;\n  std::stringstream\
    \ input(value);\n  input >> output;\n  return output;", "\tstd::stringstream stream(value);\n\
    \tfloat number;\n\tstream >> number;\n\treturn (long)round(number);", '', "\t\
    float f_val = std::stof(value);\n\tint rounded_off = std::ceil(f_val);\n\treturn\
    \ rounded_off;", '  return 0;', "    int dotIndex = value.find(\".\");\n    if\
    \ (dotIndex == -1) {\n        return std::stol(value);\n    }\n    else {\n  \
    \      std::string c = value.substr(dotIndex + 1, value.length() - dotIndex -\
    \ 1);\n        if (std::stol(c) < 5) {\n            return std::stol(value.substr(0,\
    \ dotIndex));\n        }\n        else {\n            std::string y = value.substr(0,\
    \ dotIndex);\n            long i = std::stol(y);\n            if (value[0] ==\
    \ '-') {\n                return --i;\n            }\n            else {\n   \
    \             return ++i;\n            }\n        }\n    }", "    long val;\n\
    \    float fl;\n    std::stringstream sstr(value);\n    sstr >> fl;\n    val =\
    \ fl;\n    return val;", "    double d = std::stod(value);\n    return std::lround(d);",
  "    int res = 0;\n    double d = std::stod(value);\n    std::cout << d << std::endl;\n\
    \    res = std::round(d);\n    return res;", "  double d = std::stod(value);\n\
    \  double ceil = std::ceil(d);\n  double floor = std::floor(d);\n  if (d - floor\
    \ < ceil - d) {\n    return floor;\n  } else {\n    return ceil;\n  }", '  return
    (long) value;', "  int size = value.size();\n  float ans = std::stof(value, nullptr);\n\
    \  if(ans >= 0) {\n    float dummy = (ans - (int)ans);\n    if(dummy < 0.5)\n\
    \      return (int)ans;\n    else\n      return (int)ans + 1;\n  }\n  else {\n\
    \    float dummy = (ans - (int)ans);\n    if(dummy > -0.5)\n      return (int)ans;\n\
    \    else\n      return (int)ans - 1;\n  }", "  long ans;\n  if (value.length()\
    \ == 0)\n  {\n    return 0;\n  }\n  else if (value.find(\".\") == std::string::npos)\n\
    \  {\n    long x = std::stol(value);\n    ans = x;\n  }\n  else\n  {\n    size_t\
    \ pos = value.find(\".\");\n    size_t len = value.length();\n    int len_dec\
    \ = len - pos - 1;\n    std::stringstream ss1;\n    ss1 << value.substr(0, pos);\n\
    \    std::stringstream ss2;\n    ss2 << value.substr(pos + 1, len_dec);\n    std::stringstream\
    \ ss3;\n    ss3 << value.substr(pos + 1, 1);\n    long x = std::stol(ss1.str());\n\
    \    long y = std::stol(ss2.str());\n    long z = std::stol(ss3.str());\n    if\
    \ (len_dec > 1)\n    {\n      long num1 = (y * (pow(10, len_dec - 1)));\n    \
    \  long num2 = (pow(10, len_dec));\n      ans = x + num1 / num2;\n    }\n    else\n\
    \    {\n      if (z > 5)\n      {\n        ans = x + 1;\n      }\n      else\n\
    \      {\n        ans = x;\n      }\n    }\n  }\n  return ans;", "\tif (value.size()\
    \ == 0) return 0;\n\tif (value.size() == 1) return std::stol(value);\n\t// bool\
    \ is_neg = (value[0] == '-');\n\t// std::cout << \"is_neg \" << is_neg << std::endl;\n\
    \tlong val = std::stol(value);\n\tint decimal_index = 0;\n\t// std::cout << \"\
    val \" << val << std::endl;\n\tfor (int i = 0; i < value.size(); i++) {\n\t\t\
    if (value[i] == '.') {\n\t\t\tdecimal_index = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    int size = value.size() - decimal_index - 1;\n\tlong closest_val = (long) round(val);\n\
    \tstd::cout << std::fixed << std::setprecision(size) << closest_val << std::endl;\n\
    \t// if (is_neg) {\n\t// \tif (val == closest_val) return closest_val - 1;\n\t\
    // \treturn closest_val - 1;\n\t// }\n\t// if (val == closest_val) return closest_val\
    \ + 1;\n\treturn closest_val;", "  double d = std::stod(value);\n  if(d>0)\n \
    \ {\n    return d>=std::floor(d)+0.5?std::ceil(d):std::floor(d);\n  }\n  else\n\
    \  {\n    return d<=std::floor(d)+0.5?std::floor(d):std::ceil(d);\n  }", "   \
    \ // The function you need to implement.\n    float x = std::stof(value);\n  \
    \  int y = std::round(x);\n    return y;", "  assert(value.size() > 0);\n  //\
    \ Your code goes here\n  std::stringstream result(value);\n  double d;\n  result\
    \ >> d;\n  if (d >= 0) {\n    return ceil(d);\n  } else {\n    return floor(d);\n\
    \  }", "    double val = atof(value.c_str());\n    return round(val);", "    //\
    \ 1. convert the str to a double\n    double d = std::stod(value);\n    // 2.\
    \ check if the double is \"close\" to an integer\n    // 3. if it is within 0.5\
    \ of an integer, then we round away from 0.\n    double frac = modf(d, &d);\n\
    \    double closest_int;\n    if (fabs(frac) > 0.5) {\n        if (frac > 0) {\n\
    \            closest_int = ceil(d);\n        } else {\n            closest_int\
    \ = floor(d);\n        }\n    } else {\n        closest_int = d;\n    }\n    //\
    \ 4. round towards 0, otherwise if the double is not close to an\n    // integer\
    \ then we round it towards 0.\n    return (long) closest_int;", "  long result;\n\
    \  //your code here\n  double input = std::stod(value);\n  if(input - static_cast<long>(input)\
    \ > 0.5) {\n    result = static_cast<long>(input) + 1;\n  } else {\n    result\
    \ = static_cast<long>(input);\n  }\n  return result;", "    // Write your code\
    \ here\n    bool isNegative = false;\n    float valueFloat = stof(value);\n  \
    \  if(valueFloat < 0) {\n        isNegative = true;\n        valueFloat = -valueFloat;\n\
    \    }\n    long valueInt = (long)valueFloat;\n    if((float)valueInt == valueFloat)\n\
    \        return isNegative ? -valueInt : valueInt;\n    else {\n        if(valueFloat\
    \ - valueInt > 0.5)\n            return isNegative ? -(valueInt + 1) : (valueInt\
    \ + 1);\n        else\n            return isNegative ? -valueInt : valueInt;\n\
    \    }", '  return std::stol(value);']
stop_tokens:
- "\n}"
