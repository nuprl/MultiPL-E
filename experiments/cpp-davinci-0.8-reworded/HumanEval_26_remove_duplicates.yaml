name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3,\
  \ (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
  \ (long)5})));\n}\n"
completions: ["\tstd::vector<long> result;\n\tlong duplicatedNumbers = 0;\n\tlong\
    \ x = numbers.size();\n\tfor (int i = 0; i < x; i++) {\n\t\tlong chk = numbers[i];\n\
    \t\tfor (int j = i + 1; j < x; j++) {\n\t\t\tif (chk == numbers[j]) {\n\t\t\t\t\
    duplicatedNumbers++;\n\t\t\t\tfor (int k = j; k < x - 1; k++) {\n\t\t\t\t\tnumbers[k]\
    \ = numbers[k + 1];\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t\tx--;\n\t\t\t}\n\t\t}\n\t\
    }\n\tlong y = numbers.size();\n\tfor (int i = 0; i < y - duplicatedNumbers; i++)\
    \ {\n\t\tresult.push_back(numbers[i]);\n\t}\n\treturn result;", "    std::vector<long>\
    \ ans;\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        if (i < numbers.size() - 1 && numbers[i] ==\
    \ numbers[i + 1]) {\n            continue;\n        }\n        ans.push_back(numbers[i]);\n\
    \    }\n    return ans;", "    std::vector<long> output;\n    std::map<long, int>\
    \ occurences;\n    for (std::vector<long>::iterator it = numbers.begin(); it !=\
    \ numbers.end(); ++it) {\n        occurences[*it]++;\n    }\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n        if (occurences[*it]\
    \ == 1) {\n            output.push_back(*it);\n        }\n    }\n    return output;",
  "    std::vector<long> ret;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ i++) {\n        if (std::find(ret.begin(), ret.end(), *i) == ret.end()) {\n\
    \            ret.push_back(*i);\n        }\n    }\n    return ret;", "    // your\
    \ code here\n    std::vector<long> v;\n    std::unordered_set<long> s;\n    for(auto&\
    \ x: numbers){\n        if(s.find(x) == s.end()){\n            v.push_back(x);\n\
    \            s.insert(x);\n        }\n    }\n    return v;", "    std::vector<long>\
    \ myVector;\n    std::sort(numbers.begin(), numbers.end());\n    for (auto const\
    \ i : numbers) {\n        if (std::count(numbers.begin(), numbers.end(), i) ==\
    \ 1) {\n            myVector.push_back(i);\n        }\n    }\n    return myVector;",
  "    std::set<long> s;\n    std::vector<long> res;\n    for (auto n : numbers) {\n\
    \        if (s.find(n) == s.end()) {\n            s.insert(n);\n            res.push_back(n);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::set<long>\
    \ s;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i])\
    \ == s.end()) {\n            s.insert(numbers[i]);\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;", "  std::vector<long> numbers_set;\n  std::vector<long>\
    \ dup;\n  std::vector<long> result;\n  std::set<long>::iterator it;\n  std::set<long>::iterator\
    \ p;\n  std::set<long> numbers_set_s;\n  int i;\n  int temp;\n  int dup_cnt;\n\
    \  int cnt;\n  for (i = 0; i < numbers.size(); i++) {\n    numbers_set_s.insert(numbers[i]);\n\
    \  }\n  for (it = numbers_set_s.begin(); it != numbers_set_s.end(); it++) {\n\
    \    numbers_set.push_back(*it);\n  }\n  for (i = 0; i < numbers_set.size(); i++)\
    \ {\n    temp = numbers_set[i];\n    cnt = 0;\n    for (p = numbers_set_s.begin();\
    \ p != numbers_set_s.end(); p++) {\n      if (temp == *p) {\n        cnt = cnt\
    \ + 1;\n      }\n    }\n    if (cnt > 1) {\n      dup.push_back(temp);\n    }\n\
    \  }\n  for (i = 0; i < numbers.size(); i++) {\n    dup_cnt = 0;\n    for (int\
    \ j = 0; j < dup.size(); j++) {\n      if (numbers[i] == dup[j]) {\n        dup_cnt\
    \ = dup_cnt + 1;\n      }\n    }\n    if (dup_cnt == 0) {\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "  std::vector<long> res;\n  std::map<long, int>\
    \ map;\n  for (auto n : numbers) {\n    if (map.find(n) == map.end()) {\n    \
    \  map[n] = 1;\n      res.push_back(n);\n    }\n  }\n  return res;", "    std::vector<long>\
    \ uniqueNums;\n    std::map<long, int> countMap;\n    std::vector<long>::iterator\
    \ it;\n    for (it = numbers.begin(); it != numbers.end(); it++) {\n        countMap[*it]++;\n\
    \    }\n    for (it = numbers.begin(); it != numbers.end(); it++) {\n        if\
    \ (countMap[*it] == 1) {\n            uniqueNums.push_back(*it);\n        }\n\
    \    }\n    return uniqueNums;", "    std::vector<long> unique;\n    int count;\n\
    \    for (long n : numbers) {\n        count = 0;\n        for (long u : unique)\
    \ {\n            if (n == u) {\n                count++;\n            }\n    \
    \    }\n        if (count == 0) {\n            unique.push_back(n);\n        }\n\
    \    }\n    return unique;", "    std::vector<long> result;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    result.push_back(numbers[0]);\n    for (int i = 1; i <\
    \ numbers.size(); i++) {\n        if (numbers[i] != numbers[i - 1]) {\n      \
    \      result.push_back(numbers[i]);\n        }\n    }\n    return result;", " \
    \   long n=numbers.size();\n    std::vector<long> result;\n    long a[n]={0};\n\
    \    for(long i=0;i<n;i++)\n    {\n        long temp=numbers[i];\n        a[temp]++;\n\
    \    }\n    for(long i=0;i<n;i++)\n    {\n        if(a[i]==1)\n        {\n   \
    \         result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ unique;\n    for (long num : numbers) {\n        if (std::find(unique.begin(),\
    \ unique.end(), num) == unique.end()) {\n            unique.push_back(num);\n\
    \        }\n    }\n    return unique;", "    std::vector<long> dup;\n    std::vector<long>\
    \ temp;\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(numbers[i]==numbers[j]){\n                temp.push_back(numbers[i]);\n\
    \            }\n        }\n    }\n    for(int i=0;i<numbers.size();i++){\n   \
    \     if(numbers[i]!=temp[i]){\n            dup.push_back(numbers[i]);\n     \
    \   }\n    }\n    return dup;", "    std::vector<long> output;\n    std::set<long>\
    \ unique;\n    for (long number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            output.push_back(number);\n\
    \        }\n    }\n    return output;", "    std::map<long, int> map;\n    for\
    \ (long number : numbers) {\n        if (map.find(number) == map.end()) {\n  \
    \          map[number] = 1;\n        } else {\n            map[number] += 1;\n\
    \        }\n    }\n    std::vector<long> unique;\n    for (long number : numbers)\
    \ {\n        if (map[number] > 1) {\n            continue;\n        }\n      \
    \  unique.push_back(number);\n    }\n    return unique;", "    std::vector<long>\
    \ result;\n    for (auto i : numbers) {\n        if (std::find(result.begin(),\
    \ result.end(), i) == result.end()) {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;", "    // For consistency, numbers.size() should\
    \ always return the number of elements in numbers.\n    //assert(numbers.size()\
    \ == numbers.size());\n    // For consistency, all elements should be non-negative.\n\
    \    //assert(*std::min_element(numbers.begin(), numbers.end()) >= (long)0);\n\
    \    std::vector<long> unique_numbers;\n    for (std::vector<long>::iterator it\
    \ = numbers.begin(); it != numbers.end(); ++it) {\n        // For consistency,\
    \ elements should not be repeated.\n        //assert(std::count(numbers.begin(),\
    \ numbers.end(), *it) <= (long)1);\n        if (std::count(unique_numbers.begin(),\
    \ unique_numbers.end(), *it) == (long)0) {\n            unique_numbers.push_back(*it);\n\
    \        }\n    }\n    // For consistency, unique_numbers.size() should always\
    \ return the number of elements in unique_numbers.\n    //assert(unique_numbers.size()\
    \ == unique_numbers.size());\n    // For consistency, all elements should be non-negative.\n\
    \    //assert(*std::min_element(unique_numbers.begin(), unique_numbers.end())\
    \ >= (long)0);\n    return unique_numbers;", "  std::vector<long> res;\n  unordered_set<long>\
    \ seen;\n  for (int i = 0; i < numbers.size(); i++) {\n    if (seen.find(numbers[i])\
    \ == seen.end()) {\n      res.push_back(numbers[i]);\n      seen.insert(numbers[i]);\n\
    \    }\n  }\n  return res;", "  std::set<long> s;\n  std::vector<long> r;\n  for\
    \ (auto i : numbers) {\n    if (s.find(i) == s.end()) {\n      s.insert(i);\n\
    \      r.push_back(i);\n    }\n  }\n  return r;", "    std::vector<long> ret;\n\
    \    std::unordered_set<long> s;\n    for (auto i : numbers) {\n        if (s.find(i)\
    \ == s.end()) {\n            s.insert(i);\n            ret.push_back(i);\n   \
    \     }\n    }\n    return ret;", "    std::vector<long> ret;\n    std::unordered_set<long>\
    \ seen;\n    for (const auto& x : numbers) {\n        if (seen.find(x) == seen.end())\
    \ {\n            ret.push_back(x);\n            seen.insert(x);\n        }\n \
    \   }\n    return ret;", "    std::vector<long> result;\n    for (auto const&\
    \ n : numbers) {\n        if (std::find(result.begin(), result.end(), n) == result.end())\
    \ {\n            result.push_back(n);\n        }\n    }\n    return result;",
  "    std::vector<long> no_duplicates;\n    for (long number : numbers) {\n     \
    \   bool duplicated = false;\n        for (long no_duplicate : no_duplicates)\
    \ {\n            if (number == no_duplicate) {\n                duplicated = true;\n\
    \                break;\n            }\n        }\n        if (!duplicated) {\n\
    \            no_duplicates.push_back(number);\n        }\n    }\n    return no_duplicates;",
  "    int i = 0;\n    for (int j = 1; j < numbers.size(); j++) {\n        if (numbers[i]\
    \ != numbers[j]) {\n            i++;\n            numbers[i] = numbers[j];\n \
    \       }\n    }\n    numbers.resize(i + 1);\n    return numbers;", "    std::vector<long>\
    \ v;\n    for(auto n : numbers) {\n        if(std::find(v.begin(), v.end(), n)\
    \ == v.end()) {\n            v.push_back(n);\n        }\n    }\n    return v;",
  "\tstd::unordered_set<long> unique = {};\n\tstd::vector<long> result = {};\n\tfor\
    \ (int i = 0; i < numbers.size(); i++) {\n\t\tlong value = numbers[i];\n\t\tif\
    \ (unique.find(value) == unique.end()) {\n\t\t\tunique.insert(value);\n\t\t\t\
    result.push_back(value);\n\t\t}\n\t}\n\treturn result;", "    std::vector<long>\
    \ result;\n    std::set<long> myset;\n    for (long i : numbers) {\n        if\
    \ (myset.count(i) == 0) {\n            myset.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> numbers1;\n\tstd::vector<long>\
    \ numbers2;\n\tstd::vector<long> numbers3;\n\tnumbers1 = numbers;\n\tfor (auto\
    \ i : numbers1) {\n\t\tnumbers2.push_back(i);\n\t}\n\tstd::sort(numbers2.begin(),\
    \ numbers2.end());\n\tfor (int i = 0; i < numbers2.size() - 1; i++) {\n\t\tif\
    \ (numbers2[i] != numbers2[i + 1]) {\n\t\t\tnumbers3.push_back(numbers2[i]);\n\
    \t\t}\n\t}\n\tnumbers3.push_back(numbers2[numbers2.size() - 1]);\n\treturn numbers3;",
  "  std::vector<long> ans;\n  std::unordered_set<long> seen;\n  for (auto n : numbers)\
    \ {\n    if (seen.find(n) == seen.end()) {\n      ans.push_back(n);\n      seen.insert(n);\n\
    \    }\n  }\n  return ans;", "    std::vector<long> result;\n    if (numbers.size()\
    \ == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        bool found = false;\n        for (int j\
    \ = 0; j < result.size(); j++) {\n            if (numbers[i] == result[j]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) result.push_back(numbers[i]);\n    }\n    return result;",
  "  std::vector<long> v;\n  std::unordered_set<long> seen;\n  for (auto i : numbers)\
    \ {\n    if (seen.find(i) == seen.end()) {\n      v.push_back(i);\n      seen.insert(i);\n\
    \    }\n  }\n  return v;", "    std::vector<long> unique;\n    std::unordered_set<long>\
    \ duplicates;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (duplicates.find(numbers[i])\
    \ == duplicates.end()) {\n            unique.push_back(numbers[i]);\n        \
    \    duplicates.insert(numbers[i]);\n        }\n    }\n    return unique;", " \
    \   std::set<long> unique_numbers;\n    std::vector<long> unique_numbers_vector;\n\
    \    std::set<long>::iterator itr;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        itr = unique_numbers.find(numbers[i]);\n        if (itr == unique_numbers.end())\
    \ {\n            unique_numbers.insert(numbers[i]);\n            unique_numbers_vector.push_back(numbers[i]);\n\
    \        }\n    }\n    return unique_numbers_vector;", "    // Write your code\
    \ here\n    // To print results to the standard output you can use the printf\
    \ function.\n    // For example: printf(\"%s\", \"Hello world!\");\n    if(numbers.size()<=1)\
    \ return numbers;\n    sort(numbers.begin(),numbers.end());\n    std::vector<long>::iterator\
    \ it = numbers.begin();\n    while(it != numbers.end()){\n    \tlong val = *it;\n\
    \    \tlong count = 1;\n    \t++it;\n    \twhile(it != numbers.end()){\n    \t\
    \tif(*it == val){\n    \t\t\t++count;\n    \t\t\tit = numbers.erase(it);\n   \
    \ \t\t}\n    \t\telse{\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tif(count>1){\n\
    \    \t\tit = numbers.erase(it-1);\n    \t}\n    }\n    return numbers;", "  \
    \  std::vector<long> uniqueElements;\n    std::unordered_set<long> uniqueElementsSet;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (uniqueElementsSet.find(numbers[i])\
    \ == uniqueElementsSet.end()) {\n            uniqueElements.push_back(numbers[i]);\n\
    \            uniqueElementsSet.insert(numbers[i]);\n        }\n    }\n    return\
    \ uniqueElements;", "   // #define INT_MAX 2147483647\n   // #define INT_MIN -2147483648\n\
    \    //define an array for tracking unique number\n    int uniquearray[100001]\
    \ = {0};\n    //define an array for indexing unique number\n    int indexarray[100001]\
    \ = {0};\n    int numlength = numbers.size();\n    int j = 0;\n    for(int i =\
    \ 0; i < numlength; i++){\n        if(uniquearray[numbers[i]] == 0){\n       \
    \     uniquearray[numbers[i]] = 1;\n            indexarray[j] = numbers[i];\n\
    \            j++;\n        }\n    }\n    vector<long> result;\n    for(int i =\
    \ 0; i < j; i++){\n        result.push_back(indexarray[i]);\n    }\n    return\
    \ result;", "  std::unordered_set<long> set;\n  std::vector<long> new_vec;\n \
    \ for (long i : numbers) {\n    if (set.find(i) == set.end()) {\n      set.insert(i);\n\
    \      new_vec.push_back(i);\n    }\n  }\n  return new_vec;", "  std::vector<long>\
    \ output;\n  std::map<long, long> table;\n  for (auto i = numbers.begin(); i !=\
    \ numbers.end(); i++) {\n    table[*i]++;\n  }\n  for (auto i = numbers.begin();\
    \ i != numbers.end(); i++) {\n    if (table[*i] == 1) {\n      output.push_back(*i);\n\
    \    }\n  }\n  return output;", "    sort(numbers.begin(), numbers.end());\n \
    \   numbers.erase(std::unique(numbers.begin(), numbers.end()), numbers.end());\n\
    \    return numbers;", "    std::unordered_set<long> s(numbers.begin(), numbers.end());\n\
    \    numbers.assign(s.begin(), s.end());\n    return numbers;", "  std::vector<long>\
    \ result;\n  std::map<long, int> num_times;\n  for (long x : numbers) {\n    if\
    \ (num_times.find(x) == num_times.end()) {\n      result.push_back(x);\n     \
    \ num_times[x] = 1;\n    } else {\n      num_times[x] += 1;\n    }\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    std::unordered_set<long> set;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i])\
    \ == set.end()) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> result;\n\tlong n\
    \ = numbers.size();\n\tfor (long i = 0; i < n; i++) {\n\t\t// check if element\
    \ is not present in output vector \n\t\tif (std::find(result.begin(), result.end(),\
    \ numbers[i]) == result.end()) {\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\
    \t}\n\treturn result;", "    std::vector<long> output;\n    std::unordered_set<long>\
    \ duplicates;\n    for (long n : numbers) {\n        if (duplicates.find(n) ==\
    \ duplicates.end()) {\n            duplicates.insert(n);\n            output.push_back(n);\n\
    \        }\n    }\n    return output;", "\tstd::map<long, long> arr;\n\tstd::vector<long>::iterator\
    \ vec;\n\tfor (vec = numbers.begin(); vec != numbers.end(); vec++) {\n\t\tarr[*vec]++;\n\
    \t}\n\tnumbers.clear();\n\tstd::map<long, long>::iterator itr;\n\tfor (itr = arr.begin();\
    \ itr != arr.end(); itr++) {\n\t\tif (itr->second == 1) {\n\t\t\tnumbers.push_back(itr->first);\n\
    \t\t}\n\t}\n\treturn numbers;", "    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    for (it = numbers.begin(); it != numbers.end(); ++it) {\n        //\
    \ std::cout << \"arr = \" << *it << std::endl;\n        for (it2 = it + 1; it2\
    \ != numbers.end();) {\n            // std::cout << \"barr = \" << *it2 << std::endl;\n\
    \            if (*it == *it2) {\n                // std::cout << \"arr = \" <<\
    \ *it << \" barr = \" << *it2 << std::endl;\n                it2 = numbers.erase(it2);\n\
    \            } else {\n                ++it2;\n            }\n        }\n    }\n\
    \    return numbers;", "  long i,j;\n  for(i=0;i<numbers.size();i++)\n  {\n  \
    \  for(j=i+1;j<numbers.size();j++)\n    {\n      if(numbers[i]==numbers[j])\n\
    \      {\n        numbers.erase(numbers.begin()+j);\n        j--;\n      }\n \
    \   }\n  }\n    return numbers;", "    std::vector<long>::iterator it = std::unique(numbers.begin(),\
    \ numbers.end());\n    numbers.resize(std::distance(numbers.begin(), it));\n \
    \   return numbers;", "    std::unordered_set<long> set;\n    std::vector<long>\
    \ result;\n    for (long number : numbers) {\n        if (set.find(number) ==\
    \ set.end()) {\n            set.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ checker;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (checker.find(numbers[i])\
    \ == checker.end()) {\n            checker.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    for (int i = 0; i < numbers.size();\
    \ i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n           \
    \ if (numbers[i] == numbers[j]) {\n                numbers.erase(numbers.begin()\
    \ + j);\n                j--;\n            }\n        }\n    }\n    return numbers;",
  "  std::vector<long> result;\n  std::map<long, long> number_and_count;\n  for (auto&\
    \ x : numbers) {\n    auto got = number_and_count.find(x);\n    if (got == number_and_count.end())\
    \ {\n      number_and_count[x] = 1;\n    } else {\n      number_and_count[x] +=\
    \ 1;\n    }\n  }\n  for (auto& x : numbers) {\n    auto got = number_and_count.find(x);\n\
    \    if (got->second == 1) {\n      result.push_back(x);\n    }\n  }\n  return\
    \ result;", "    // Remove duplicates from vector of integer\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    numbers.erase(std::unique(numbers.begin(), numbers.end()),\
    \ numbers.end());\n    return numbers;", "\tstd::set<long> numbers_set;\n\tstd::vector<long>\
    \ answer;\n\tfor (long number : numbers) {\n\t\tif (numbers_set.find(number) ==\
    \ numbers_set.end()) {\n\t\t\tnumbers_set.insert(number);\n\t\t\tanswer.push_back(number);\n\
    \t\t}\n\t}\n\treturn answer;", "    std::set<long> uniques;\n    std::vector<long>\
    \ answer;\n    for (auto number : numbers) {\n        if (uniques.find(number)\
    \ == uniques.end()) {\n            uniques.insert(number);\n            answer.push_back(number);\n\
    \        }\n    }\n    return answer;", "    std::vector<long> result;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        bool unique = true;\n      \
    \  for (int j = 0; j < numbers.size(); j++) {\n            if (i != j && numbers[i]\
    \ == numbers[j]) {\n                unique = false;\n                break;\n\
    \            }\n        }\n        if (unique) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ elements;\n    for (auto number : numbers) {\n        if (elements.find(number)\
    \ == elements.end()) {\n            result.push_back(number);\n            elements.insert(number);\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> fin;\n\tstd::sort(numbers.begin(),\
    \ numbers.end());\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tif (i ==\
    \ 0)\n\t\t\tfin.push_back(numbers[i]);\n\t\telse {\n\t\t\tif (numbers[i] != numbers[i\
    \ - 1])\n\t\t\t\tfin.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn fin;", "   \
    \ std::vector<long> uniqueNumbers;\n    std::unordered_set<long> set;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) ==\
    \ set.end()) {\n            uniqueNumbers.push_back(numbers[i]);\n           \
    \ set.insert(numbers[i]);\n        }\n    }\n    return uniqueNumbers;", "  std::vector<long>\
    \ result;\n  for (auto i : numbers) {\n    if (std::find(result.begin(), result.end(),\
    \ i) == result.end()) {\n      result.push_back(i);\n    }\n  }\n  return result;",
  "  std::vector<long> res;\n  std::unordered_set<long> hashset;\n  for (long elem\
    \ : numbers) {\n    if (hashset.find(elem) == hashset.end()) {\n      hashset.insert(elem);\n\
    \      res.push_back(elem);\n    }\n  }\n  return res;", "\tstd::unordered_set<long>\
    \ s(numbers.begin(), numbers.end());\n\treturn std::vector<long>(s.begin(), s.end());",
  "    std::vector<long> res;\n    std::unordered_set<long> st;\n    std::unordered_set<long>\
    \ done;\n    for(auto i : numbers) {\n        if(st.find(i) == st.end()) {\n \
    \           st.insert(i);\n        } else {\n            done.insert(i);\n   \
    \     }\n    }\n    for(auto i : numbers) {\n        if(done.find(i) == done.end())\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ solution;\n    std::unordered_set<long> seen;\n    for (long number : numbers)\
    \ {\n        if (seen.find(number) == seen.end()) {\n            seen.insert(number);\n\
    \            solution.push_back(number);\n        }\n    }\n    return solution;",
  "    std::vector<long> res;\n    std::set<long> s;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (s.find(numbers[i]) == s.end()) {\n            s.insert(numbers[i]);\n\
    \            res.push_back(numbers[i]);\n        }\n    }\n    return res;", " \
    \   std::unordered_set<long> unique(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result(unique.begin(), unique.end());\n    return result;", "    std::vector<long>\
    \ result;\n    int i;\n    int n = numbers.size();\n    if(n == 0)\n        return\
    \ result;\n    std::sort(numbers.begin(), numbers.end());\n    result.push_back(numbers[0]);\n\
    \    for(i = 1; i < n; i++) {\n        if(numbers[i] != numbers[i-1])\n      \
    \      result.push_back(numbers[i]);\n    }\n    return result;", "    int sz\
    \ = numbers.size();\n    std::map<long, int> mp;\n    std::vector<long> res;\n\
    \    for (int i = 0; i < sz; i++) {\n        mp[numbers[i]]++;\n    }\n    for\
    \ (int i = 0; i < sz; i++) {\n        if (mp[numbers[i]] == 1) {\n           \
    \ res.push_back(numbers[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    // Write your code here\n    std::map<long, int> myMap;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        myMap[numbers[i]] += 1;\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        if (myMap[numbers[i]]\
    \ == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::set<long> s;\n    for (auto\
    \ number : numbers) {\n        if (s.find(number) == s.end()) {\n            s.insert(number);\n\
    \            result.push_back(number);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;", "    std::vector<long> v;\n    std::set<long> s;\n\
    \    for(auto i : numbers) {\n        if(s.find(i) == s.end()) {\n           \
    \ v.push_back(i);\n            s.insert(i);\n        }\n    }\n    return v;",
  "  std::vector<long> unique_numbers;\n  std::set<long> set_of_numbers;\n  for (auto\
    \ number : numbers) {\n    if (set_of_numbers.find(number) == set_of_numbers.end())\
    \ {\n      unique_numbers.push_back(number);\n      set_of_numbers.insert(number);\n\
    \    }\n  }\n  return unique_numbers;", "    std::set<long> v;\n    std::vector<long>\
    \ result;\n    for (auto const& i : numbers) {\n        if (v.find(i) == v.end())\
    \ {\n            v.insert(i);\n            result.push_back(i);\n        }\n \
    \   }\n    return result;", "    // your code here\n    std::set<long> s(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> res(s.begin(), s.end());\n    return\
    \ res;", "    std::vector<long>::iterator it = numbers.begin();\n    while (it\
    \ != numbers.end()) {\n        std::vector<long>::iterator it2 = it + 1;\n   \
    \     while (it2 != numbers.end()) {\n            if (*it == *it2) {\n       \
    \         it2 = numbers.erase(it2);\n            } else {\n                it2++;\n\
    \            }\n        }\n        it++;\n    }\n    return numbers;", "    std::set<long>\
    \ unique;\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (unique.find(numbers[i]) == unique.end()) {\n           \
    \ unique.insert(numbers[i]);\n            result.push_back(numbers[i]);\n    \
    \    }\n    }\n    return result;", "  std::vector<long> unique;\n  for (int i\
    \ = 0; i < numbers.size(); i++) {\n    auto it = std::find(unique.begin(), unique.end(),\
    \ numbers[i]);\n    if (it == unique.end()) {\n      unique.push_back(numbers[i]);\n\
    \    }\n  }\n  return unique;", "    auto iter = std::unique(numbers.begin(),\
    \ numbers.end());\n    numbers.erase(iter, numbers.end());\n    return numbers;",
  "    std::vector<long> new_array;\n    std::set<long> s;\n    for (auto i : numbers)\
    \ {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n         \
    \   new_array.push_back(i);\n        }\n    }\n    return new_array;", "    //\
    \ std::vector<long> res;\n    int n = numbers.size();\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    numbers.erase(std::unique(numbers.begin(), numbers.end()),\
    \ numbers.end());\n    return numbers;", "    // TODO: write code here\n    std::vector<long>\
    \ output;\n    std::set<long> setValue;\n    for(int i = 0; i < numbers.size();\
    \ i++){\n        if(setValue.find(numbers[i]) == setValue.end()){\n          \
    \  setValue.insert(numbers[i]);\n            output.push_back(numbers[i]);\n \
    \       }\n    }\n    return output;", "\tvector<long> numbers2;\n\tlong size\
    \ = numbers.size();\n\tfor (long i = 0; i < size; i++) {\n\t\tif (find(numbers2.begin(),\
    \ numbers2.end(), numbers[i]) == numbers2.end()) {\n\t\t\tnumbers2.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn numbers2;", "  // Write your code here\n  // To print results\
    \ to the standard output you can use std::cout\n  // Example: std::cout << \"\
    Hello world!\";\n  long size = numbers.size();\n  std::vector<long> ans;\n  std::set<long>\
    \ s(numbers.begin(), numbers.end());\n  for(long i = 0; i < size; i++) {\n   \
    \ if(s.find(numbers[i]) != s.end()) {\n      ans.push_back(numbers[i]);\n    \
    \  s.erase(numbers[i]);\n    }\n  }\n  return ans;", "    std::vector<long> answer;\n\
    \    std::unordered_set<long> seen;\n    for (auto& n : numbers) {\n        if\
    \ (seen.find(n) == seen.end()) {\n            answer.push_back(n);\n         \
    \   seen.insert(n);\n        }\n    }\n    return answer;", "  std::unordered_set<long>\
    \ nums;\n  std::vector<long> result;\n  for (long num : numbers) {\n    if (nums.count(num)\
    \ == 0) {\n      nums.insert(num);\n      result.push_back(num);\n    }\n  }\n\
    \  return result;", "    std::map<long, long> count;\n    for (long i : numbers)\
    \ {\n        if (count.find(i) == count.end()) {\n            count[i] = 1;\n\
    \        } else {\n            count[i]++;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i : numbers) {\n        if (count[i] == 1) {\n      \
    \      result.push_back(i);\n        }\n    }\n    return result;", "  std::map<long,int>\
    \ index;\n  for(int i=0;i<numbers.size();i++){\n    index[numbers[i]]++;\n  }\n\
    \  std::vector<long> ans;\n  for(int i=0;i<numbers.size();i++){\n    if(index[numbers[i]]==1){\n\
    \      ans.push_back(numbers[i]);\n    }\n  }\n  return ans;", "    std::vector<long>\
    \ res;\n    long pre_num = -1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] != pre_num) {\n            res.push_back(numbers[i]);\n\
    \            pre_num = numbers[i];\n        }\n    }\n    return res;", "    if\
    \ (numbers.size() == 0) {\n        return numbers;\n    }\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> ans;\n    ans.push_back(numbers[0]);\n\
    \    long prev = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] != prev) {\n            ans.push_back(numbers[i]);\n\
    \            prev = numbers[i];\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ temp = {};\n    for (int i = 0; i < numbers.size(); i++) {\n        if(std::find(temp.begin(),\
    \ temp.end(), numbers[i]) == temp.end())\n            temp.push_back(numbers[i]);\n\
    \    }\n    return temp;", "  std::vector<long>::iterator it;\n  // std::sort(numbers.begin(),\
    \ numbers.end());\n  it = std::unique(numbers.begin(), numbers.end());\n  numbers.resize(std::distance(numbers.begin(),\
    \ it));\n  return numbers;", "    std::vector<long> unique;\n    if(numbers.size()\
    \ == 0) return unique;\n    std::set<long> s;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        if(s.find(numbers[i]) == s.end()) {\n            s.insert(numbers[i]);\n\
    \            unique.push_back(numbers[i]);\n        }\n    }\n    return unique;",
  "    long n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (numbers[i] == numbers[j]) {\n    \
    \            numbers.erase(numbers.begin() + j);\n                n--;\n     \
    \           j--;\n            }\n        }\n    }\n    return numbers;", "  std::vector<long>::iterator\
    \ it = std::unique(numbers.begin(), numbers.end());\n  // Note the iterator returned\
    \ by unique is the last element\n  // *that is unique*\n  std::vector<long> result(numbers.begin(),\
    \ it);\n  return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n \
    \     result.push_back(i);\n      seen.insert(i);\n    }\n  }\n  return result;",
  "std::vector<long> retnums;\nstd::set<long> numSet;\nfor(int i=0;i<numbers.size();i++){\n\
    if(numSet.find(numbers[i]) == numSet.end()){\nnumSet.insert(numbers[i]);\nretnums.push_back(numbers[i]);",
  "  std::vector<long> res;\n  std::unordered_set<long> seen;\n  for (long number\
    \ : numbers) {\n    if (seen.find(number) == seen.end()) {\n      res.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return res;", "  std::vector<long>\
    \ new_numbers;\n  std::sort(numbers.begin(), numbers.end());\n  for (int i = 0;\
    \ i < numbers.size(); i++) {\n    if (numbers[i] != numbers[i + 1]) {\n      new_numbers.push_back(numbers[i]);\n\
    \    }\n  }\n  return new_numbers;", "    auto it = std::unique(numbers.begin(),\
    \ numbers.end());\n    numbers.resize(std::distance(numbers.begin(), it));\n \
    \   return numbers;", "\tstd::vector<long>::iterator it;\n\tfor (it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n\t\tstd::vector<long>::iterator j;\n\t\tlong count\
    \ = 0;\n\t\tfor (j = numbers.begin(); j != numbers.end(); ++j) {\n\t\t\tif (*it\
    \ == *j) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) {\n\t\t\tnumbers.erase(it);\n\
    \t\t\tit--;\n\t\t}\n\t}\n\treturn numbers;", "    std::set<long> s(numbers.begin(),\
    \ numbers.end());\n    numbers.assign(s.begin(), s.end());\n    return numbers;",
  "  std::vector<long> answer;\n  for (int i = 0; i < numbers.size(); i++) {\n   \
    \ bool found = false;\n    for (int j = 0; j < numbers.size(); j++) {\n      if\
    \ (i != j && numbers[i] == numbers[j])\n        found = true;\n    }\n    if (!found)\n\
    \      answer.push_back(numbers[i]);\n  }\n  return answer;", "  std::vector<long>\
    \ v;\n  long i;\n  long n = numbers.size();\n  bool f;\n  for (i = 0; i < n; i++)\
    \ {\n    f = true;\n    long j;\n    for (j = 0; j < i; j++) {\n      if (numbers[i]\
    \ == numbers[j]) {\n        f = false;\n        break;\n      }\n    }\n    if\
    \ (f) {\n      v.push_back(numbers[i]);\n    }\n  }\n  return v;", "    std::vector<long>\
    \ result;\n    std::map<long, long> freq;\n    for (auto x : numbers) {\n    \
    \    if (freq.find(x) == freq.end()) {\n            freq[x] = 1;\n        } else\
    \ {\n            freq[x]++;\n        }\n    }\n    for (auto x : numbers) {\n\
    \        if (freq[x] == 1) {\n            result.push_back(x);\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result = {};\n    for (auto\
    \ i : numbers) {\n        bool found = false;\n        for (auto j : result) {\n\
    \            if (i == j) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> v;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    v.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] != numbers[i - 1]) {\n            v.push_back(numbers[i]);\n\
    \        }\n    }\n    return v;", "  std::vector<long> nonDuplicateNumbers;\n\
    \  std::set<long> duplicateSet;\n  for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); it++) {\n    if (duplicateSet.find(*it) == duplicateSet.end())\
    \ {\n      duplicateSet.insert(*it);\n      nonDuplicateNumbers.push_back(*it);\n\
    \    }\n  }\n  return nonDuplicateNumbers;", "  std::vector<long> res;\n  for\
    \ (auto &x : numbers) {\n    auto it = std::find(res.begin(), res.end(), x);\n\
    \    if (it == res.end()) {\n      res.push_back(x);\n    }\n  }\n  return res;",
  "    // your code here\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;", "    // TODO: implement\
    \ function to remove duplicates from a vector\n    auto it = numbers.begin();\n\
    \    std::vector<long>::iterator it_end = numbers.end();\n    std::unordered_set<long>\
    \ set;\n    while (it != it_end) {\n        if(set.find(*it) != set.end()) {\n\
    \            it = numbers.erase(it);\n        } else {\n            set.insert(*it);\n\
    \            it++;\n        }\n    }\n    return numbers;", "\tstd::vector<long>\
    \ temp;\n\tstd::sort(numbers.begin(), numbers.end());\n\tstd::vector<long>::iterator\
    \ it = std::unique(numbers.begin(), numbers.end());\n\ttemp.assign(numbers.begin(),\
    \ it);\n\treturn temp;", "    std::vector<long> v;\n    std::unordered_set<long>\
    \ s;\n    for (const auto &n : numbers) {\n        if (s.count(n) == 0) {\n  \
    \          s.insert(n);\n            v.push_back(n);\n        }\n    }\n    return\
    \ v;", "  std::vector<long> result;\n  std::unordered_set<long> num_set;\n  for\
    \ (auto&& x : numbers) {\n    if (num_set.find(x) == num_set.end()) {\n      num_set.insert(x);\n\
    \      result.push_back(x);\n    }\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  for (auto num : numbers) {\n    if (std::find(result.begin(), result.end(),\
    \ num) == result.end()) {\n      result.push_back(num);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::map<long, int> occurences;\n  for\
    \ (long number : numbers) {\n    occurences[number]++;\n  }\n  for (long number\
    \ : numbers) {\n    if (occurences[number] == 1) {\n      res.push_back(number);\n\
    \    }\n  }\n  return res;", "  std::vector<long> ret;\n  std::unordered_set<long>\
    \ seen;\n  for (int i = 0; i < numbers.size(); i++) {\n    if (seen.find(numbers[i])\
    \ == seen.end()) {\n      ret.push_back(numbers[i]);\n      seen.insert(numbers[i]);\n\
    \    }\n  }\n  return ret;", "  // Please implement me\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  std::vector<long>::iterator it;\n  it = std::unique(numbers.begin(),\
    \ numbers.end());\n  numbers.resize(std::distance(numbers.begin(), it));\n  return\
    \ numbers;", "  std::vector<long> result;\n  std::unordered_set<long> set;\n \
    \ for (long i = 0; i < numbers.size(); i++) {\n    if (set.find(numbers[i]) ==\
    \ set.end()) {\n      set.insert(numbers[i]);\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "  // lets use a set\n  std::unordered_set<long>\
    \ s(numbers.begin(), numbers.end());\n  std::vector<long> result(s.begin(), s.end());\n\
    \  return result;", "  std::vector<long> output;\n  std::unordered_set<long> seen;\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    if (seen.find(numbers[i]) ==\
    \ seen.end()) {\n      output.push_back(numbers[i]);\n      seen.insert(numbers[i]);\n\
    \    }\n  }\n  return output;", "    std::vector<long> unique;\n    std::unordered_set<long>\
    \ us;\n    for (auto i : numbers) {\n        if (us.find(i) == us.end()) {\n \
    \           unique.push_back(i);\n            us.insert(i);\n        }\n    }\n\
    \    return unique;", "\tassert(numbers.size() > 0);\n\tstd::vector<long> result;\n\
    \tlong previous = numbers[0];\n\tresult.push_back(previous);\n\tfor (long i =\
    \ 1; i < numbers.size(); i++) {\n\t\tif (numbers[i] != previous) {\n\t\t\tresult.push_back(numbers[i]);\n\
    \t\t\tprevious = numbers[i];\n\t\t}\n\t}\n\treturn result;", "    std::unordered_set<long>\
    \ uniq;\n    std::vector<long> result;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        uniq.insert(numbers[i]);\n    }\n    for (size_t i = 0; i <\
    \ numbers.size(); i++) {\n        if (uniq.find(numbers[i]) != uniq.end()) {\n\
    \            result.push_back(numbers[i]);\n            uniq.erase(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::set<long> s;\n    std::vector<long>\
    \ res;\n    for (long number : numbers) {\n        if (s.count(number) == 0) {\n\
    \            s.insert(number);\n            res.push_back(number);\n        }\n\
    \    }\n    return res;", '    return std::vector<long>({(long)1, (long)3, (long)4});',
  "   std::set<long> set(numbers.begin(), numbers.end());\n   std::vector<long> result(set.begin(),\
    \ set.end());\n   return result;", "    std::vector<long> v;\n    std::set<long>\
    \ s;\n    for(auto x: numbers){\n        if(s.find(x) == s.end()){\n         \
    \   v.push_back(x);\n            s.insert(x);\n        }\n    }\n    return v;",
  "  // Write your code here.\n  std::unordered_map<long, long>m;\n  std::vector<long>result;\n\
    \  for(auto i:numbers){\n    m[i]++;\n  }\n  for(auto i:numbers){\n    if(m[i]==1){\n\
    \      result.push_back(i);\n    }\n  }\n  return result;", "\tstd::vector<long>\
    \ ans;\n\tfor (long num : numbers) {\n\t\tif (std::find(ans.begin(), ans.end(),\
    \ num) == ans.end())\n\t\t\tans.push_back(num);\n\t}\n\treturn ans;", "    std::vector<long>\
    \ result;\n    std::sort(numbers.begin(), numbers.end());\n    int s = numbers.size();\n\
    \    for (int i = 0; i < s - 1; i++) {\n        if (numbers[i] != numbers[i +\
    \ 1]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    result.push_back(numbers[s\
    \ - 1]);\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "\tstd::vector<long> new_list;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tbool found = false;\n\t\tfor (int j = 0; j < numbers.size(); j++)\
    \ {\n\t\t\tif (i != j && numbers[i] == numbers[j]) {\n\t\t\t\tfound = true;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tnew_list.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn new_list;", "    std::vector<long> duplicate_numbers;\n \
    \   std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n           \
    \ if (numbers[i] == numbers[j]) {\n                duplicate_numbers.push_back(numbers[i]);\n\
    \            }\n        }\n    }\n    numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), duplicate_numbers[0]), numbers.end());\n    numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), duplicate_numbers[1]), numbers.end());\n    numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), duplicate_numbers[2]), numbers.end());\n    return numbers;",
  "    std::vector<long> res;\n    std::set<long> s;\n    for (auto i : numbers) {\n\
    \        if (s.find(i) == s.end()) {\n            res.push_back(i);\n        \
    \    s.insert(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::unordered_set<long> seen;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (seen.find(*it) == seen.end()) {\n\
    \            res.push_back(*it);\n            seen.insert(*it);\n        }\n \
    \   }\n    return res;", "    std::vector<long> answer;\n    std::map<long, long>\
    \ myMap;\n    std::map<long, long>::iterator itr;\n    for(long i = 0; i < numbers.size();\
    \ i++) {\n        itr = myMap.find(numbers[i]);\n        if(itr == myMap.end())\
    \ {\n            myMap.insert(std::pair<long, long>(numbers[i], i));\n       \
    \ }\n    }\n    std::map<long, long>::iterator it;\n    for(it = myMap.begin();\
    \ it != myMap.end(); it++) {\n        answer.push_back(it->first);\n    }\n  \
    \  return answer;", "\tstd::set<long> s;\n\tstd::vector<long> v;\n\tstd::sort(numbers.begin(),\
    \ numbers.end());\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (s.count(numbers[i])\
    \ == 0) {\n\t\t\ts.insert(numbers[i]);\n\t\t\tv.push_back(numbers[i]);\n\t\t}\n\
    \t}\n\treturn v;", "    std::vector<long> answer;\n    std::map<long, bool> seen;\n\
    \    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            seen[number] = true;\n            answer.push_back(number);\n\
    \        }\n    }\n    return answer;", "    std::map<long,int> mp;\n    std::vector<long>v;\n\
    \    for(auto i:numbers){\n        mp[i]++;\n    }\n    for(auto i:numbers){\n\
    \        if(mp[i]==1){\n            v.push_back(i);\n        }\n    }\n    return\
    \ v;", "    std::vector<long> answer;\n    std::unordered_set<long> seen;\n  \
    \  for (auto i: numbers) {\n        if (seen.find(i) == seen.end()) {\n      \
    \      answer.push_back(i);\n            seen.insert(i);\n        }\n    }\n \
    \   return answer;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ set;\n  for (auto n : numbers) {\n    if (set.find(n) == set.end()) {\n    \
    \  result.push_back(n);\n      set.insert(n);\n    }\n  }\n  return result;",
  "\tstd::vector<long>::iterator ip;\n\tstd::vector<long> result;\n\tstd::set<long>\
    \ seen;\n\tfor (ip = numbers.begin(); ip != numbers.end(); ip++) {\n\t\tif (seen.find(*ip)\
    \ == seen.end()) {\n\t\t\tresult.push_back(*ip);\n\t\t\tseen.insert(*ip);\n\t\t\
    }\n\t}\n\treturn result;", "  std::vector<long> newNums;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  for (int i = 0; i < numbers.size(); i++) {\n    // If a number\
    \ is not already in the new vector\n    if (std::find(newNums.begin(), newNums.end(),\
    \ numbers[i]) == newNums.end()) {\n      newNums.push_back(numbers[i]);\n    }\n\
    \  }\n  return newNums;", "    std::unordered_set<long> val;\n    std::vector<long>\
    \ result;\n    std::for_each(numbers.begin(), numbers.end(), [&val, &result](long\
    \ el) {\n        if (val.find(el) == val.end()) {\n            val.insert(el);\n\
    \            result.push_back(el);\n        }\n    });\n    return result;", " \
    \ std::map<long, int> present;\n  std::vector<long> ret;\n  for (int i = 0; i\
    \ < numbers.size(); i++) {\n    if (present.find(numbers[i]) == present.end())\
    \ {\n      present[numbers[i]] = 1;\n      ret.push_back(numbers[i]);\n    }\n\
    \  }\n  return ret;", "    std::vector<long> res;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::unique_copy(numbers.begin(), numbers.end(), std::back_inserter(res));\n\
    \    return res;", "    std::map<long, int> count;\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); it++) {\n        count[*it]++;\n\
    \    }\n    numbers.erase(std::remove_if(numbers.begin(), numbers.end(), [&count](long\
    \ x) -> bool { return count[x] > 1; }), numbers.end());\n    return numbers;",
  "    // TODO write code here.\n    std::vector<long>::iterator it;\n\n    for(it\
    \ = numbers.begin(); it != numbers.end(); it++)\n    {\n        long value = *it;\n\
    \        std::vector<long>::iterator endIt = std::remove(it+1, numbers.end(),\
    \ value);\n        numbers.erase(endIt, numbers.end());\n    }\n\n    return numbers;",
  "  // your code goes here\n  if(numbers.size()==0){\n    return numbers;\n  }\n\
    \  std::vector<long> result;\n  std::unordered_map<long,long> map;\n  for(auto\
    \ i:numbers){\n    map[i]++;\n  }\n  for(auto i:numbers){\n    if(map[i]==1){\n\
    \      result.push_back(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ uniq_numbers;\n    std::set<long> unique;\n    for (long number : numbers) {\n\
    \        if (unique.find(number) == unique.end()) {\n            unique.insert(number);\n\
    \            uniq_numbers.push_back(number);\n        }\n    }\n    return uniq_numbers;",
  "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    std::unordered_set<long>\
    \ duplicates;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            seen.insert(n);\n        } else {\n            duplicates.insert(n);\n\
    \        }\n    }\n    for (auto n : numbers) {\n        if (duplicates.find(n)\
    \ == duplicates.end()) {\n            result.push_back(n);\n        }\n    }\n\
    \    return result;", "  std::vector<long> retval;\n  std::set<long> temp;\n \
    \ for (int i = 0; i < numbers.size(); i++) {\n    if (temp.find(numbers[i]) ==\
    \ temp.end()) {\n      temp.insert(numbers[i]);\n      retval.push_back(numbers[i]);\n\
    \    }\n  }\n  return retval;", "    std::vector<long> ans;\n    std::unordered_set<long>\
    \ mark;\n    for (long i : numbers) {\n        if (mark.find(i) == mark.end())\
    \ {\n            mark.insert(i);\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;", "    std::vector<long> res;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    long count = 1;\n    long prev = numbers[0];\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] == prev) {\n     \
    \       count++;\n        } else {\n            if (count == 1) res.push_back(prev);\n\
    \            count = 1;\n            prev = numbers[i];\n        }\n    }\n  \
    \  if (count == 1) res.push_back(prev);\n    return res;", "    std::vector<long>\
    \ output;\n    std::unordered_set<long> set;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (set.find(numbers[i]) == set.end()) {\n            set.insert(numbers[i]);\n\
    \            output.push_back(numbers[i]);\n        }\n    }\n    return output;",
  "    int flag;\n    int noOfDup;\n    std::vector<long> result;\n    for(int i=0;i<numbers.size();i++){\n\
    \        flag=0;\n        for(int j=0;j<numbers.size();j++){\n            if(numbers[i]==numbers[j]\
    \ && i!=j){\n                flag++;\n            }\n        }\n        if(flag==0){\n\
    \            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::map<long, int> map;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        map[numbers[i]]++;\n    }\n    std::vector<long> ans;\n    for (auto\
    \ elem : map) {\n        if (elem.second == 1) {\n            ans.push_back(elem.first);\n\
    \        }\n    }\n    return ans;", "  std::vector<long> result(numbers.size());\n\
    \  std::sort(numbers.begin(), numbers.end());\n  result.erase(std::unique_copy(numbers.begin(),\
    \ numbers.end(), result.begin()), result.end());\n  return result;", "    std::vector<long>\
    \ result;\n    for (auto number : numbers) {\n        if (std::find(result.begin(),\
    \ result.end(), number) == result.end()) {\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    for (int i = 0; i < numbers.size();\
    \ i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n           \
    \ if (numbers[i] == numbers[j]) {\n                numbers.erase(numbers.begin()\
    \ + j);\n                j--;\n            }\n        }\n    }\n    return numbers;",
  "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;", "  long\
    \ const n = numbers.size();\n  std::vector<long> res;\n  for (long i = 0; i <\
    \ n; i++) {\n    long const num = numbers[i];\n    bool not_found = true;\n  \
    \  for (long j = 0; j < n; j++) {\n      if (i != j && num == numbers[j]) {\n\
    \        not_found = false;\n        break;\n      }\n    }\n    if (not_found)\
    \ {\n      res.push_back(num);\n    }\n  }\n  return res;", "\tfor (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n\t\tfor (std::vector<long>::iterator\
    \ itt = numbers.begin(); itt != numbers.end(); ++itt) {\n\t\t\tif (it != itt &&\
    \ *it == *itt) {\n\t\t\t\tit = numbers.erase(it);\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn numbers;", "    std::vector<long> result;\n    for (auto number\
    \ : numbers) {\n        if (std::find(result.begin(), result.end(), number) ==\
    \ result.end()) {\n            result.push_back(number);\n        }\n    }\n \
    \   return result;", "  std::vector<long> answer;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  for (int i = 0; i < numbers.size(); i++) {\n    if (i ==\
    \ 0) {\n      answer.push_back(numbers[i]);\n    } else if (numbers[i] != numbers[i\
    \ - 1]) {\n      answer.push_back(numbers[i]);\n    }\n  }\n  return answer;",
  "    std::set<long> numbers_set(numbers.begin(), numbers.end());\n    return std::vector<long>(numbers_set.begin(),\
    \ numbers_set.end());", "    //your code here\n    std::vector<long> v;\n    std::unordered_set<long>\
    \ set;\n    for(long x : numbers){\n        if(set.find(x) == set.end()){\n  \
    \          v.push_back(x);\n            set.insert(x);\n        }\n    }\n   \
    \ return v;", "  std::unordered_set<long> s;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    auto el = numbers[i];\n    if (s.find(el) == s.end()) {\n      s.insert(el);\n\
    \    }\n  }\n  std::vector<long> result;\n  for (const auto& el : s) {\n    result.push_back(el);\n\
    \  }\n  return result;", "\tstd::vector<long> res;\n\tstd::set<long> numSet;\n\
    \tfor (long n : numbers) {\n\t\tif (numSet.find(n) == numSet.end()) {\n\t\t\t\
    res.push_back(n);\n\t\t\tnumSet.insert(n);\n\t\t}\n\t}\n\treturn res;", "\tstd::vector<long>::iterator\
    \ it1;\n\tstd::vector<long>::iterator it2;\n\tstd::vector<long> result;\n\tfor\
    \ (it1 = numbers.begin(); it1 != numbers.end(); it1++) {\n\t\tint count = 0;\n\
    \t\tfor (it2 = numbers.begin(); it2 != numbers.end(); it2++) {\n\t\t\tif (*it1\
    \ == *it2) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) {\n\t\t\t\
    result.push_back(*it1);\n\t\t}\n\t}\n\treturn result;", "  std::unordered_set<long>\
    \ unique_numbers;\n  for (int i = 0; i < numbers.size(); i++) {\n    unique_numbers.insert(numbers[i]);\n\
    \  }\n  std::vector<long> unique_numbers_vector(unique_numbers.begin(), unique_numbers.end());\n\
    \  return unique_numbers_vector;", "  std::vector<long> result;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  auto itr = numbers.begin();\n  while (itr != numbers.end())\
    \ {\n    result.push_back(*itr);\n    itr = std::upper_bound(itr, numbers.end(),\
    \ *itr);\n  }\n  return result;", "  std::set<long> s;\n  std::vector<long> res;\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    if (s.find(numbers[i]) == s.end())\
    \ {\n      s.insert(numbers[i]);\n      res.push_back(numbers[i]);\n    }\n  }\n\
    \  return res;", "    std::vector<long> res;\n    std::unordered_set<long> us;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (us.find(numbers[i])\
    \ == us.end()) {\n            us.insert(numbers[i]);\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;", "    std::unordered_set<long> elements_seen;\n\
    \    std::vector<long> unique_numbers;\n    for (const long& number : numbers)\
    \ {\n        if (elements_seen.find(number) == elements_seen.end()) {\n      \
    \      elements_seen.insert(number);\n            unique_numbers.push_back(number);\n\
    \        }\n    }\n    return unique_numbers;", "\t// Your code goes here\n\t\
    std::vector<long> result;\n\tstd::unordered_set<long> set;\n\tfor (auto itr =\
    \ numbers.begin(); itr != numbers.end(); itr++) {\n\t\tif (set.find(*itr) == set.end())\
    \ {\n\t\t\tresult.push_back(*itr);\n\t\t\tset.insert(*itr);\n\t\t}\n\t}\n\treturn\
    \ result;", "  // your code here\n  long size = numbers.size();\n  std::vector<long>\
    \ ret;\n  for(long i = 0; i < size; i++){\n    if(std::find(ret.begin(), ret.end(),\
    \ numbers[i]) == ret.end()){\n      ret.push_back(numbers[i]);\n    }\n  }\n \
    \ return ret;", "    std::vector<long> result;\n    std::unordered_set<long> temp;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (temp.find(numbers[i])\
    \ == temp.end()) {\n            temp.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> result;\n\tstd::set<long>\
    \ s;\n\tfor (auto n : numbers) {\n\t\tif (s.find(n) == s.end()) {\n\t\t\ts.insert(n);\n\
    \t\t\tresult.push_back(n);\n\t\t}\n\t}\n\treturn result;", "\tstd::vector<long>\
    \ newArr;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (newArr.size()\
    \ == 0) {\n\t\t\tnewArr.push_back(numbers[i]);\n\t\t}\n\t\telse {\n\t\t\tint unique\
    \ = 1;\n\t\t\tfor (int j = 0; j < newArr.size(); j++) {\n\t\t\t\tif (numbers[i]\
    \ == newArr[j]) {\n\t\t\t\t\tunique = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (unique\
    \ == 1) {\n\t\t\t\tnewArr.push_back(numbers[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ newArr;", "    // your code goes here\n    std::vector<long> v;\n    std::map<long,\
    \ long> m;\n    for(long i : numbers){\n        m[i]++;\n    }\n    for(long i\
    \ : numbers){\n        if(m[i] == 1){\n            v.push_back(i);\n        }\n\
    \    }\n    return v;", "    int n = numbers.size();\n    std::vector<long> output;\n\
    \    std::unordered_map<long, int> count;\n    for (int i = 0; i < n; i++) {\n\
    \        count[numbers[i]]++;\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    if (count[numbers[i]] == 1) {\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;", "    std::vector<long> output;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (std::find(output.begin(),\
    \ output.end(), numbers[i]) == output.end()) {\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;", "    std::vector<long> count(100001, 0);\n\
    \    std::vector<long> result;\n    for (auto && number : numbers) {\n       \
    \ count[number]++;\n    }\n    for (auto && number : numbers) {\n        if (count[number]\
    \ > 1) {\n            count[number] = 0;\n        } else {\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    // initialize variables\n    std::vector<long>\
    \ deduplicated;\n    std::unordered_set<long> numbers_seen;\n    // loop over\
    \ the input numbers\n    for (long number : numbers) {\n        // if we have\
    \ not seen this number before, then add it to our deduplicated result\n      \
    \  if (numbers_seen.find(number) == numbers_seen.end()) {\n            numbers_seen.insert(number);\n\
    \            deduplicated.push_back(number);\n        }\n    }\n    return deduplicated;",
  "    std::vector<long> v;\n    std::map<long,long> m;\n    for(auto it = numbers.begin();\
    \ it != numbers.end(); it++) {\n        m[*it]++;\n    }\n    for(auto it = numbers.begin();\
    \ it != numbers.end(); it++) {\n        if(m[*it] == 1) {\n            v.push_back(*it);\n\
    \        }\n    }\n    return v;", "    // your code here\n    std::vector<long>\
    \ x;\n    std::sort(numbers.begin(), numbers.end());\n    x.push_back(numbers[0]);\n\
    \    for(int i = 0; i < numbers.size()-1; i++){\n      if(numbers[i] != numbers[i+1]){\n\
    \        x.push_back(numbers[i+1]);\n      }\n    }\n    return x;", "    std::vector<long>\
    \ result;\n    std::set<long> distinct;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (distinct.find(numbers[i]) == distinct.end()) {\n       \
    \     result.push_back(numbers[i]);\n            distinct.insert(numbers[i]);\n\
    \        }\n    }\n    return result;", "  std::set<long> elements_to_remove;\n\
    \  std::vector<long> result;\n  for (std::vector<long>::iterator it=numbers.begin();\
    \ it!=numbers.end(); ++it) {\n    long element = *it;\n    if (elements_to_remove.find(element)\
    \ != elements_to_remove.end()) {\n      continue;\n    }\n    result.push_back(element);\n\
    \    for (std::vector<long>::iterator it2=it+1; it2!=numbers.end(); ++it2) {\n\
    \      if (*it2 == element) {\n        elements_to_remove.insert(element);\n \
    \       break;\n      }\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> unique;\n    for (auto num : numbers) {\n      \
    \  if (unique.find(num) == unique.end()) {\n            unique.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;", " \
    \ std::vector<long> uniques;\n  uniques.reserve(numbers.size());\n  long prev\
    \ = numbers[0];\n  uniques.push_back(prev);\n  for (long num : numbers) {\n  \
    \  if (num != prev) {\n      uniques.push_back(num);\n      prev = num;\n    }\n\
    \  }\n  return uniques;", "\tstd::vector<long> result = {};\n\tstd::vector<bool>\
    \ check = {};\n\tfor (long number : numbers) {\n\t\tif (std::find(result.begin(),\
    \ result.end(), number) == result.end()) {\n\t\t\tresult.push_back(number);\n\t\
    \t\tcheck.push_back(true);\n\t\t}\n\t\telse {\n\t\t\tcheck.push_back(false);\n\
    \t\t}\n\t}\n\tstd::vector<long> final = {};\n\tfor (int i = 0; i < check.size();\
    \ i++) {\n\t\tif (check[i]) {\n\t\t\tfinal.push_back(numbers[i]);\n\t\t}\n\t}\n\
    \treturn final;", "    int n = numbers.size();\n    std::vector<long> result(n);\n\
    \    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (std::find(result.begin(),\
    \ result.end(), numbers[i]) == result.end()) {\n            result[count] = numbers[i];\n\
    \            count++;\n        }\n    }\n    result.resize(count);\n    return\
    \ result;", "\tstd::map<long, int> mp;\n\tstd::vector<long> res;\n\tfor (long\
    \ el : numbers) {\n\t\tmp[el]++;\n\t}\n\tfor (long el : numbers) {\n\t\tif (mp[el]\
    \ == 1)\n\t\t\tres.push_back(el);\n\t}\n\treturn res;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(numbers.begin(), numbers.end());\n    it = std::unique(numbers.begin(),\
    \ numbers.end());\n    numbers.resize(std::distance(numbers.begin(), it));\n \
    \   return numbers;", "    std::vector<long> copy = numbers;\n    std::vector<long>\
    \ result;\n    std::sort(copy.begin(), copy.end());\n    for (long i = 0; i <\
    \ copy.size(); i++) {\n        if (copy[i] != copy[i + 1]) {\n            result.push_back(copy[i]);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
