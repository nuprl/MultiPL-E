name: HumanEval_1_separate_paren_groups
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string containing multiple groups of nested parentheses. Your goal is to\n//\
  \ separate those group into separate strings and return the vector of those.\n//\
  \ Separate groups are balanced (each open brace is properly closed) and not nested\
  \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
  ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
  (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
  \ paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
  , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
  \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
  ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
  })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
  (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
  ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
completions: []
stop_tokens:
- "\n}"
