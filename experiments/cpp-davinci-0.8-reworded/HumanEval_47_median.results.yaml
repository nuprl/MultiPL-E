language: cpp
name: HumanEval_47_median
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  int n = l.size();\n  assert(n > 0);\n  assert(n % 2 == 1);\n  std::sort(l.begin(),\
    \ l.end());\n  float median = l[n / 2];\n  return median;\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp7pkckfmg: /tmp/tmp7pkckfmg.cpp:11: float median(std::vector<long int>):
    Assertion `n % 2 == 1'' failed.

    '
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int index = floor(l.size() / 2);\n\
    \    if (l.size() % 2 == 0) {\n        return float(l[index - 1] + l[index]) /\
    \ 2;\n    } else {\n        return float(l[index]);\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size()>0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (static_cast<float>(l[l.size() / 2 - 1]) + l[l.size()\
    \ / 2]) / 2;\n    } else {\n        return l[l.size() / 2];\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     float m1 = l[l.size() / 2];\n        float m2 = l[l.size() / 2 - 1];\n \
    \       return (m1 + m2) / 2;\n    } else {\n        return l[l.size() / 2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    long len = l.size();\n    //sort the vector\n    std::sort(l.begin(),\
    \ l.end());\n    if(len % 2 != 0)\n        return (float)l[len/2];\n    return\
    \ (float)(l[(len-1)/2] + l[len/2])/2.0;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  // Replace the body of this function with an algorithm that returns\
    \ the median\n  // of l.\n  sort(l.begin(), l.end());\n  if (l.size() % 2 == 0)\n\
    \    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  else\n    return\
    \ l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // Write your code here\n    sort(l.begin(),l.end());\n    int n=l.size();\n\
    \    float median;\n    if(n%2==0)\n    {\n        median=(float)(l[n/2]+l[n/2-1])/2;\n\
    \    }\n    else\n    {\n        median=l[n/2];\n    }\n    return median;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return ((float)l[n / 2] + (float)l[n / 2 - 1]) / 2;\n   \
    \ } else {\n        return (float)l[n / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int middle = l.size() / 2;\n    std::nth_element(l.begin(), l.begin()\
    \ + middle, l.end());\n    float val = l[middle];\n    if (l.size() % 2 == 0)\
    \ {\n        std::nth_element(l.begin(), l.begin() + middle - 1, l.end());\n \
    \       val = (val + l[middle - 1]) / 2.0;\n    }\n    return val;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  if(l.size() == 0) {\n    return 0;\n  }\n  // Make a copy of the vector\
    \ l.\n  std::vector<long> temp = l;\n  // Sort the vector in ascending order.\n\
    \  std::sort(temp.begin(), temp.end());\n  int size = temp.size();\n  // If the\
    \ size of the vector is odd, return the mid element.\n  if(size % 2 != 0) {\n\
    \    return temp[size / 2];\n  }\n  // If the size of the vector is even, return\
    \ the average of the two middle elements.\n  else {\n    return (temp[size / 2]\
    \ + temp[(size / 2) - 1]) / 2.0;\n  }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n// \tl.push_back((long)0);\n// \tl.push_back((long)1);\n// \tl.push_back((long)2);\n\
    // \tl.push_back((long)3);\n// \tl.push_back((long)4);\n// \tl.push_back((long)5);\n\
    // \tl.push_back((long)6);\n// \tl.push_back((long)7);\n// \tl.push_back((long)8);\n\
    // \tl.push_back((long)9);\n// \tl.push_back((long)10);\n// \tl.push_back((long)11);\n\
    // \tl.push_back((long)12);\n// \tl.push_back((long)13);\n// \tl.push_back((long)14);\n\
    // \tl.push_back((long)15);\n// \tl.push_back((long)16);\n// \tl.push_back((long)17);\n\
    // \tl.push_back((long)18);\n// \tl.push_back((long)19);\n// \tl.push_back((long)20);\n\
    // \tl.push_back((long)21);\n// \tl.push_back((long)22);\n// \tl.push_back((long)23);\n\
    // \tl.push_back((long)24);\n// \tl.push_back((long)25);\n// \tl.push_back((long)26);\n\
    // \tl.push_back((long)27);\n// \tl.push_back((long)28);\n// \tl.push_back((long)29);\n\
    // \tl.push_back((long)30);\n// \tl.push_back((long)31);\n// \tl.push_back((long)32);\n\
    // \tl.push_back((long)33);\n// \tl.push_back((long)34);\n// \tl.push_back((long)35);\n\
    // \tl.push_\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpkbung_8a: /tmp/tmpkbung_8a.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\treturn (l[l.size() / 2] + l[(l.size()\
    \ - 1) / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return 0;\n    auto mid = (l.size() - 1) / 2;\n\
    \    auto mid_iter = l.begin() + mid;\n    std::nth_element(l.begin(), mid_iter,\
    \ l.end());\n    if (l.size() % 2 == 1) return *mid_iter;\n    else {\n      \
    \  auto next_iter = mid_iter + 1;\n        std::nth_element(l.begin(), next_iter,\
    \ l.end());\n        return (*mid_iter + *next_iter) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp0c6m4k7g: /tmp/tmp0c6m4k7g.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080631
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(!l.empty());\n    int sz = l.size();\n    if(sz % 2 == 0) {\n\
    \        float m1 = l[sz/2];\n        float m2 = l[sz/2 - 1];\n        return\
    \ (m1 + m2) / 2;\n    }\n    else {\n        return l[sz/2];\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpz3yklsa4: /tmp/tmpz3yklsa4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    long len = l.size();\n    float\
    \ mid = 0;\n    if (len % 2 == 0) {\n        mid = (l[len / 2] + l[len / 2 - 1])\
    \ / 2.0;\n    } else {\n        mid = l[len / 2];\n    }\n    return mid;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    \n    int n = l.size();\n    if(n % 2 == 0) return (float)(l[n/2]\
    \ + l[n/2 - 1])/2;\n    else return (float)l[n/2];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmps9xdld2j: /tmp/tmps9xdld2j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n  \
    \      return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  int count = l.size();\n  assert(count\
    \ > 0);\n  if (count % 2 == 1) {\n    return (float)l[count / 2];\n  } else {\n\
    \    return (float)(l[count / 2 - 1] + l[count / 2]) / 2;\n  }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // c++11 lambda, [] capture list(by reference)\n    auto f = [&l](const\
    \ long& a, const long& b) { return a < b; };\n    std::sort(l.begin(), l.end(),\
    \ f);\n    long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[mid - 1] + l[mid]) / 2.0;\n    } else {\n        return l[mid];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n   float x;\n   std::sort(l.begin(), l.end());\n   if (l.size() % 2 ==\
    \ 0) {\n      x = l[l.size() / 2] + l[l.size() / 2 - 1];\n      x /= 2;\n   }\
    \ else {\n      x = l[l.size() / 2];\n   }\n   return x;\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    assert(n>0);\n    assert(n<51);\n    std::sort(l.begin(),\
    \ l.end());\n    return (n%2==0) ? (l[n/2-1]+l[n/2])/2.0 : l[n/2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  assert(l.size() % 2 == 1);\n  std::sort(l.begin(),\
    \ l.end());\n  return (float)l[l.size() / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpgwc3g74k: /tmp/tmpgwc3g74k.cpp:10: float median(std::vector<long int>):
    Assertion `l.size() % 2 == 1'' failed.

    '
  stdout: ''
  timestamp: 1660080630
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  size_t sz = l.size();\n  if (sz %\
    \ 2 == 0) {\n    // even number of elements\n    return (l[sz / 2 - 1] + l[sz\
    \ / 2]) / 2.0;\n  } else {\n    // odd number of elements\n    return l[sz / 2];\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size()==0) return 0;\n    sort(l.begin(), l.end());\n    int\
    \ i = l.size()/2;\n    if (l.size()%2 == 0) {\n        return (l[i-1]+l[i])/2.0;\n\
    \    } else {\n        return l[i];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  int i;\n  long temp;\n  std::vector<long> a;\n  std::vector<long> b;\n\
    \  assert(l.size() > (0));\n  // Find the median value of l, and place elements\
    \ less than\n  // this median value into a and elements greater than the median\n\
    \  // value into b.\n  for (i = (0); i < l.size(); i++) {\n    if (l[i] < l[l.size()\
    \ / (2)]) {\n      a.push_back(l[i]);\n    } else {\n      b.push_back(l[i]);\n\
    \    }\n  }\n  // Set l to the elements in a then b.\n  l.resize((0));\n  for\
    \ (i = (0); i < a.size(); i++) {\n    l.push_back(a[i]);\n  }\n  for (i = (0);\
    \ i < b.size(); i++) {\n    l.push_back(b[i]);\n  }\n  // If there are an odd\
    \ number of elements in l, return the median element.\n  if (l.size() % (2) ==\
    \ (1)) {\n    return (float)l[l.size() / (2)];\n  }\n  // If there are an even\
    \ number of elements in l, return the mean of the two\n  // middle elements.\n\
    \  temp = l[l.size() / (2)];\n  temp += l[l.size() / (2) - (1)];\n  return (float)temp\
    \ / (2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpb5s3nufd: /tmp/tmpb5s3nufd.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int N = l.size();\n    std::sort(l.begin(), l.end());\n    if (N %\
    \ 2 == 0)\n        return (l[N / 2 - 1] + l[N / 2]) / 2.0;\n    else\n       \
    \ return l[N / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // >>> l\n    // std::vector<long>({(long)5, (long)3, (long)2, (long)4,\
    \ (long)1})\n    std::sort(l.begin(), l.end());\n    std::cout << \"l: \";\n \
    \   for (auto e : l) {\n        std::cout << e << \" \";\n    }\n    std::cout\
    \ << std::endl;\n    if (l.size() % 2 == 0) {\n        // >>> l.size()\n     \
    \   // (10)\n        // >>> l[l.size()/2 - 1]\n        // (15)\n        // >>>\
    \ l[l.size()/2]\n        // (20)\n        return float(l[l.size()/2 - 1] + l[l.size()/2])\
    \ / 2;\n    } else {\n        // >>> l.size()\n        // (9)\n        // >>>\
    \ l[l.size()/2]\n        // (15)\n        return l[l.size()/2];\n    }\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: "l: 1 2 3 4 5 \nl: -10 4 6 10 20 1000 \nl: 5 \nl: 5 6 \nl: 1 2 3 7 8 9 9\
    \ \n"
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(!(l.empty()));\n  sort(l.begin(), l.end());\n  return ((((l.size())\
    \ % (2)) == (0)) ? ((((float)(l[((l.size()) / (2))])) + ((float)(l[((l.size())\
    \ / (2)) - (1)]))) / (2)) : ((float)(l[((l.size()) / (2))])));\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (((float)l[l.size() / 2]) + ((float)l[l.size() / 2 - 1])) / 2;\n\
    \    } else {\n        return (float)l[l.size() / 2];\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    auto idx = l.size() / 2;\n    std::nth_element(l.begin(), l.begin()\
    \ + idx, l.end());\n    long m = l[idx];\n    if (l.size() % 2 == 0) {\n     \
    \   std::nth_element(l.begin(), l.begin() + idx - 1, l.end());\n        m = (m\
    \ + l[idx - 1]) / 2.0;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpz50judcl: /tmp/tmpz50judcl.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)6,
    (long)5}))) == (5.5)'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() != 0);\n  auto n = l.size();\n  auto h = (n) / 2;\n\
    \  std::sort(l.begin(), l.end());\n  if ((n) % 2 == 0) {\n    return (l[h] + l[h\
    \ + 1]) / 2.0;\n  }\n  return l[h];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp6gy8fi4d: /tmp/tmp6gy8fi4d.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::cout << l[l.size()/2] <<\
    \ \" \" << l[(l.size() - 1)/2] << std::endl;\n    return float(l[l.size()/2] +\
    \ l[(l.size() - 1)/2])/2;\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: '3 3

    10 6

    5 5

    6 5

    7 7

    '
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size()%2 == 0)\n        return (l[l.size()/2-1] + l[l.size()/2])/2.0;\n \
    \   else\n        return l[l.size()/2];\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    return\
    \ (n % 2) ? l[n / 2] : (((float)l[n / 2 - 1]) + l[n / 2]) / 2;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tassert(n > 0);\n\tif (n == 1) return l[0];\n\t\
    int mid = n / 2;\n\tif (n % 2 == 0) return (l[mid] + l[mid - 1]) / 2.0;\n\treturn\
    \ l[mid];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp6tww7vb1: /tmp/tmp6tww7vb1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return 0;\n    } else if (l.size() ==\
    \ 1) {\n        return l[0];\n    } else if (l.size() == 2) {\n        return\
    \ (l[0] + l[1]) / 2.0;\n    } else {\n        int m = (l.size() - 1) / 2;\n  \
    \      std::sort(l.begin(), l.end());\n        float v = l[m];\n        if (l.size()\
    \ % 2 == 0) {\n            v = (v + l[m + 1]) / 2.0;\n        }\n        return\
    \ v;\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // Write your solution here\n    if(l.size() % 2 == 0){\n        int\
    \ k = l.size() / 2;\n        return (float(l[k-1]) + float(l[k])) / 2;\n    }\n\
    \    else{\n        int k = l.size() / 2;\n        return float(l[k]);\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpr7unytqn: /tmp/tmpr7unytqn.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n %\
    \ 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n       \
    \ return l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // write your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ size = l.size();\n    if(size%2 == 0)\n        return (l[size/2-1] + l[size/2])/2.0;\n\
    \    else\n        return l[size/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tif (n%2 == 0) {\n\t\treturn (l[n/2-1] + l[n/2])\
    \ / 2.0;\n\t} else {\n\t\treturn l[n/2];\n\t}\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpwt42lzoz: /tmp/tmpwt42lzoz.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    auto n = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    if(n%2 != 0)\n    {\n        return l[n/2];\n    }\n    else\n\
    \    {\n        return (l[n/2 - 1] + l[n/2])/2.0;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  int k = l.size()/2;\n\
    \  if (l.size() % 2 == 0) {\n    return ((float) l[k-1] + (float) l[k])/2;\n \
    \ } else {\n    return (float) l[k];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() != 0);\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size()>=1);\n  return std::accumulate(l.begin(), l.end(), 0.0)\
    \ / l.size();\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpwli06q2k: /tmp/tmpwli06q2k.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int mid = (l.size() - 1) / 2;\n    std::nth_element(l.begin(), l.begin()\
    \ + mid, l.end());\n    return l[mid];\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpcpjyu24c: /tmp/tmpcpjyu24c.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080633
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n  \
    \      return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tauto cmp = [](long a, long b) {\n\t\treturn a > b;\n\t};\n\tstd::sort(l.begin(),\
    \ l.end(), cmp);\n\tif (l.size() % 2 == 0) {\n\t\tint mid = l.size() / 2;\n\t\t\
    return ((float)l[mid] + (float)l[mid - 1]) / 2;\n\t}\n\telse {\n\t\treturn (float)l[l.size()\
    \ / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    int size = l.size();\n    if (size\
    \ % 2 == 0) {\n        return (l[size / 2] + l[size / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[size / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  // auto n = l.size();\n  std::sort(l.begin(), l.end());\n  // auto med\
    \ = n / 2;\n  return l.size() % 2 ? l[l.size() / 2] : (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    return std::accumulate(l.begin(), l.end(), 0L) / (float)l.size();\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpm__legg0: /tmp/tmpm__legg0.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tif (l.size() % 2 == 0) {\n\t\treturn\
    \ (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n\t}\n\telse {\n\t\treturn\
    \ (float)l[l.size() / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  int n = l.size();\n  assert(n > 0);\n  nth_element(l.begin(), l.begin()\
    \ + n / 2, l.end());\n  if (n % 2 == 1)\n    return l[n / 2];\n  nth_element(l.begin(),\
    \ l.begin() + n / 2 - 1, l.end());\n  return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\
    \t//\n\t//\n\t\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmppu9huxci: /tmp/tmppu9huxci.cpp:183: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  float f = 0.0;\n  return f;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpds0c65xr: /tmp/tmpds0c65xr.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return 0;\n    }\n    if (l.size() ==\
    \ 1) {\n        return l[0];\n    }\n    size_t i;\n    std::vector<long> s(l);\n\
    \    std::sort(s.begin(), s.end());\n    if (s.size() % 2 == 0) {\n        i =\
    \ s.size() / 2;\n        return (s[i - 1] + s[i]) / 2.0;\n    }\n    i = s.size()\
    \ / 2;\n    return s[i];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  if ((l.size()) == (0)) {\n    assert(false);\n  }\n  std::sort(l.begin(),\
    \ l.end());\n  if ((l.size()) % (2) == (0)) {\n    return (float((((l[(l.size())\
    \ / (2)]) + (l[((l.size()) / (2)) - (1)])) / (2.0))));\n  }\n  return (float(l[(l.size())\
    \ / (2)]));\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tlong n = l.size();\n\tlong m = n / 2;\n\tlong i = 0;\n\twhile (i < m)\
    \ {\n\t\tlong j = i;\n\t\twhile (j > 0 && l[j - 1] > l[j]) {\n\t\t\tlong t = l[j];\n\
    \t\t\tl[j] = l[j - 1];\n\t\t\tl[j - 1] = t;\n\t\t\tj--;\n\t\t}\n\t\ti++;\n\t}\n\
    \ti = n - 1;\n\twhile (i > m) {\n\t\tlong j = i;\n\t\twhile (j > m && l[j - 1]\
    \ > l[j]) {\n\t\t\tlong t = l[j];\n\t\t\tl[j] = l[j - 1];\n\t\t\tl[j - 1] = t;\n\
    \t\t\tj--;\n\t\t}\n\t\ti--;\n\t}\n\tif (n % 2 == 1) {\n\t\treturn l[m];\n\t}\n\
    \telse {\n\t\treturn (l[m - 1] + l[m]) / 2.0;\n\t}\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp6ldz9h8a: /tmp/tmp6ldz9h8a.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tassert(l.size() > 0);\n\tint sz = l.size();\n\tstd::sort(l.begin(),\
    \ l.end());\n\tif(sz % 2)\n\t\treturn l[sz / 2];\n\treturn (l[sz / 2] + l[sz /\
    \ 2 - 1]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(!(l.empty()));\n  if (l.size()==(1)) {\n    return ((float)(l[(0)]));\n\
    \  }\n  std::sort(l.begin(), l.end());\n  int size = l.size();\n  if ((size%(2))==(0))\
    \ {\n    return ((float)((l[(size)/(2)]+l[((size)/(2))-1])/(2.0)));\n  }\n  else\
    \ {\n    return ((float)(l[(size-1)/(2)]));\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080636
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if(l.size() == 0)\n    {\n        return 0;\n    }\n    if(l.size()\
    \ == 1)\n    {\n        return (float)l[0];\n    }\n    // Find the middle value.\n\
    \    long mid = (l.size() / 2);\n    if(l.size() % 2 == 0)\n    {\n        return\
    \ ((float)l[mid - 1] + (float)l[mid]) / 2;\n    }\n    return (float)l[mid];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmphtjvrv9c: /tmp/tmphtjvrv9c.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return (((l.size() % (long)2)\
    \ != (long)0) ? l[(l.size() / (long)2)] : (((float)l[(l.size() / (long)2)] + (float)l[((l.size()\
    \ / (long)2) - (long)1)]) / (float)2));\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert((0 < l.size()));\n    std::sort(l.begin(), l.end());\n    size_t\
    \ l2 = l.size()/2;\n    return (l.size() % 2 == 0) ? (((float)l[l2-1] + (float)l[l2])/2)\
    \ : (float)l[l2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    return\
    \ l.size() % 2 == 0 ? float(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2 : l[l.size()\
    \ / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return l.size() % 2 == 0 ? (l[l.size()\
    \ / 2 - 1] + l[l.size() / 2]) / 2.0 : l[l.size() / 2];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080636
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    auto cmp = [](long first, long second)\
    \ { return first > second; };\n    std::sort(l.begin(), l.end(), cmp);\n    int\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return ((float)l[mid]\
    \ + (float)l[mid - 1]) / 2;\n    } else {\n        return (float)l[mid];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080636
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  return l[(int)(l.size() - 1) / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp8m_uuho4: /tmp/tmp8m_uuho4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    assert(n > 0);\n    if(n % 2 == 0) {\n    \
    \    return (l[n/2 - 1] + l[n/2])/2.0;\n    }\n    else {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpq_mx8zhs: /tmp/tmpq_mx8zhs.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080636
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  size_t mid = l.size() / 2;\n  // if the vector\
    \ is of odd size, return the element at the middle.\n  if (l.size() % 2 == 1)\
    \ {\n    return l[mid];\n  }\n  // if the vector is of even size, return the average\
    \ of the two elements in the middle.\n  return ((float)(l[mid - 1] + l[mid]))\
    \ / (float)(2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp2c7aq3o1: /tmp/tmp2c7aq3o1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tif(l.size() % 2 == 0) {\n\t\treturn\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\t}\n\treturn l[l.size() / 2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  size_t n = l.size();\n  size_t i;\n  float med = 0.0;\n  std::sort(l.begin(),\
    \ l.end());\n  if (n % 2 == 0) {\n    i = n / 2;\n    med = (l[i] + l[i - 1])\
    \ / 2.0;\n  } else {\n    i = n / 2;\n    med = l[i];\n  }\n  return med;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    float res;\n    int n = l.size();\n    if(n%2 != 0) {\n        res\
    \ = l[n/2];\n    }\n    else {\n        res = (l[n/2 - 1] + l[n/2])/2.0;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp0jy3hd54: /tmp/tmp0jy3hd54.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size()\
    \ / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  auto  midpoint = l.size() / (long)2;\n  std::sort(l.begin(), l.end());\n\
    \  if (l.size()%(long)2==(long)0) {\n    return (float)(l[midpoint-1] + l[midpoint])/2;\n\
    \  } else {\n    return (float)l[midpoint];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // Sort list.\n    std::sort(l.begin(), l.end());\n    // If size\
    \ is odd, return middle element.\n    if (l.size() % 2 != 0) {\n        return\
    \ (float)(l[(l.size() - 1) / 2]);\n    }\n    // If size is even, return mean\
    \ of middle two elements.\n    return (float)(l[l.size() / 2] + l[(l.size() /\
    \ 2) - 1]) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert((l.size() > (0)));\n    int length = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    if (length % 2 == 0) {\n        int mid = length / 2;\n     \
    \   float m1 = l[mid];\n        float m2 = l[mid - 1];\n        return (m1 + m2)\
    \ / 2;\n    } else {\n        int mid = (length / 2);\n        return l[mid];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  // Sorting the vector\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  // If the size of the vector is even,\n  // then the median is the average\
    \ of\n  // the two elements at indices floor(n/2)\n  // and ceil(n/2) in the sorted\
    \ vector.\n  if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \  }\n  // If the size of the vector is odd,\n  // then the median is the element\
    \ at\n  // index floor(n/2) in the sorted vector.\n  return l[n / 2];\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // Implements a bubble sort.\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        for (int j = 0; j < l.size() - 1; j++) {\n            if (l[j] >\
    \ l[j + 1]) {\n                long temp = l[j];\n                l[j] = l[j +\
    \ 1];\n                l[j + 1] = temp;\n            }\n        }\n    }\n   \
    \ // Assumes the size of the vector is odd.\n    return (float) l[l.size() / 2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp5aewz_eq: /tmp/tmp5aewz_eq.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080638
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::vector<long> v = l;\n  std::sort(v.begin(), v.end());\n  return\
    \ v[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpt7jan_dp: /tmp/tmpt7jan_dp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if(l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // assert(l.size() == 5);\n    int n = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    if (n % 2 != 0) {\n        return l[n / 2];\n    }\n    return\
    \ (l[(n - 1) / 2] + l[n / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if(n == 0) {\n        assert(false);\n    }\n\
    \    std::sort(l.begin(), l.end());\n    if(n % 2 == 0) {\n        return float(l[n\
    \ / 2] + l[n / 2 - 1]) / float(2);\n    }\n    else {\n        return float(l[n\
    \ / 2]);\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tassert((l.size() % (long)2));\n\tint n = l.size();\n\tif (n == 1) {\n\
    \t\treturn l[0];\n\t}\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpwog1winj: /tmp/tmpwog1winj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return ((float)l[l.size()/2] +\
    \ (float)l[(l.size()-1)/2])/2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  if (l.size() == 0) {\n    return -1;\n  }\n  std::sort(l.begin(), l.end());\n\
    \  int mid = l.size() / 2;\n  if (l.size() % 2 == 0) {\n    return (l[mid] + l[mid\
    \ - 1]) / 2.0;\n  } else {\n    return l[mid];\n  }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if(n % 2 == 0) {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    }\n    else {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  int size = l.size();\n  std::sort(l.begin(),\
    \ l.end());\n  if (size % 2 == 0)\n    return (l[size / 2 - 1] + l[size / 2])\
    \ / 2.0;\n  else\n    return l[size / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  float m = l[(l.size()-1)/2];\n  if\
    \ ((l.size() % 2) == 0) {\n    m += l[(l.size()-1)/2 + 1];\n    m /= 2.0;\n  }\n\
    \  return m;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  /* Replace this with the correct median function */\n  // std::vector<long>::iterator\
    \ it = l.begin();\n  // for(it; it != l.end(); it++) {\n  //   std::cout << *it\
    \ << std::endl;\n  // }\n  std::sort(l.begin(), l.end());\n  std::vector<long>::iterator\
    \ it = l.begin();\n  // std::vector<long>::iterator it1 = l.end();\n  int size\
    \ = l.size();\n  // if(size % 2 != 0) {\n  //   std::cout << \"Odd\" << std::endl;\n\
    \  //   // it = l.begin() + (size/2);\n  //   return ((l.begin() + (size/2)) +\
    \ (l.begin() + (size/2) + 1))/2;\n  // } else {\n  //   std::cout << \"Even\"\
    \ << std::endl;\n  //   it = l.begin() + (size/2) - 1;\n  //   return ((*it) +\
    \ (*(it + 1)))/2;\n  // }\n  return ((*(l.begin() + (size/2))) + (*(l.begin()\
    \ + (size/2) - 1)))/2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmptsq7h2b6: /tmp/tmptsq7h2b6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080635
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert((l.size() > (long)0));\n  std::sort(l.begin(), l.end());\n  if\
    \ ((l.size() % (long)2) == (long)0) {\n    return (((float)((l[((l.size() / (long)2)\
    \ - (long)1)] + l[(l.size() / (long)2)]))) / (float)2);\n  }\n  return (float)l[(l.size()\
    \ / (long)2)];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  size_t n = l.size();\n  long a[n];\n  for (size_t\
    \ i = 0; i < n; i++) {\n    a[i] = l[i];\n  }\n  std::sort(a, a + n);\n  if (n\
    \ % 2 == 0) {\n    return ((float)(a[n / 2 - 1] + a[n / 2])) / 2;\n  } else {\n\
    \    return a[n / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  return \n  // Your code goes here\n  \n  ;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqepy9g2.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmppqepy9g2.cpp:9:3: error: return-statement with no value, in function\
    \ returning \u2018float\u2019 [-fpermissive]\n    9 |   return\n      |   ^~~~~~\n"
  stdout: ''
  timestamp: 1660080638
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tif (l.size() == 0)\n\t\treturn 0;\n\telse if (l.size() == 1)\n\t\treturn\
    \ l[0];\n\telse if (l.size() == 2)\n\t\treturn (l[0] + l[1]) / 2.0;\n\telse if\
    \ (l.size() % 2 == 0)\n\t\treturn (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \telse\n\t\treturn l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp6ezlkac3: /tmp/tmp6ezlkac3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tassert(!l.empty());\n\tauto n = l.size();\n\tstd::sort(l.begin(), l.end());\n\
    \tif (n % 2 == 0) {\n\t\t// even\n\t\treturn (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\
    \t}\n\telse {\n\t\t// odd\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    //+BEGIN_SOLUTION\n    int n = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    if (n % 2 == 1) {\n        return (float)l[n/2];\n    } else\
    \ {\n        return (float)(l[n/2-1] + l[n/2]) / 2;\n    }\n    //+END_SOLUTION\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tif(n == 0) {\n\t\treturn (float)0;\n\t}\n\tstd::sort(l.begin(),\
    \ l.end());\n\tif(n % 2 == 0) {\n\t\treturn (float)(l[n / 2] + l[n / 2 - 1]) /\
    \ 2;\n\t}\n\treturn (float)l[n / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int\
    \ m = l.size() / 2;\n    float med = (float) l[m];\n    if (l.size() % 2 == 0)\
    \ {\n        med += (float) l[m - 1];\n        med /= 2;\n    }\n    return med;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(!l.empty());\n    auto n = l.size();\n    assert(n > 0);\n\
    \    std::sort(l.begin(), l.end());\n    return (n % 2) ? l[n / 2] : 0.5 * (l[n\
    \ / 2 - 1] + l[n / 2]);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    std::cout\
    \ << \"sorted l: \";\n    for (long x : l) {\n        std::cout << x << \" \"\
    ;\n    }\n    std::cout << std::endl;\n    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return\
    \ l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: "sorted l: 1 2 3 4 5 \nsorted l: -10 4 6 10 20 1000 \nsorted l: 5 \nsorted\
    \ l: 5 6 \nsorted l: 1 2 3 7 8 9 9 \n"
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n  \
    \      return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  int size\
    \ = l.size();\n  if(size % 2 != 0) {\n    return l[size / 2];\n  }\n  return (l[size\
    \ / 2] + l[size / 2 - 1]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // assert(l.size() > (long)0);\n    // // std::sort(l.begin(), l.end());\n\
    \    // // auto l_size = l.size();\n    // // if (l_size % (long)2 == (long)0)\
    \ {\n    // //   return (float(l[l_size / (long)2 - (long)1]) + float(l[l_size\
    \ / (long)2])) / (float)2;\n    // // } else {\n    // //   return (float)l[l_size\
    \ / (long)2];\n    // // }\n    assert(l.size() > (long)0);\n    std::sort(l.begin(),\
    \ l.end());\n    auto l_size = l.size();\n    if (l_size % (long)2 == (long)0)\
    \ {\n      return (float(l[l_size / (long)2 - (long)1]) + float(l[l_size / (long)2]))\
    \ / (float)2;\n    } else {\n      return (float)l[l_size / (long)2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size()>0);\n  std::sort(l.begin(), l.end());\n  if (l.size()%2==0)\
    \ {\n    int m = l.size()/2;\n    return ((float)(l[m-1]+l[m]))/2;\n  } else {\n\
    \    return (float)l[l.size()/2];\n  }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // Do not use a function from the STL in your solution.\n    std::sort(l.begin(),\
    \ l.end());\n    size_t L = l.size();\n    if(L % 2 == 0) {\n        return (float)(l[L/2\
    \ - 1] + l[L/2]) / 2;\n    }\n    else {\n        return (float)l[L/2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        // even\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        // odd\n        return\
    \ (float)l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     long n = l.size() / 2;\n        return (l[n - 1] + l[n]) / 2.0;\n    } else\
    \ {\n        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  int s = l.size();\n  int mid = (s/2);\n  float ans;\n  if(s%2==0)\n\
    \    ans = (l[mid-1]+l[mid])/2.0;\n  else\n    ans = l[mid];\n  return ans;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpi_cgadjw: /tmp/tmpi_cgadjw.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  int len = l.size();\n  int mid = len\
    \ / 2;\n  if (len % 2 == 0) {\n    return ((l[mid - 1] + l[mid]) / 2.0);\n  }\
    \ else {\n    return l[mid];\n  }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int sz = l.size();\n    // sort the vector\n    std::sort(l.begin(),\
    \ l.end());\n    // get the middle element\n    float m = l[sz/2];\n    // if\
    \ the size is even, get the element on the left of middle and take their average\n\
    \    if (sz % 2 == 0)\n        m = (m + l[sz/2 - 1]) / 2.0;\n    return m;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int length = l.size();\n    if (length == 0) {\n        return 0;\n\
    \    } else if (length == 1) {\n        return (float)l[0];\n    } else if (length\
    \ == 2) {\n        return (float)(l[0] + l[1]) / 2;\n    } else {\n        sort(l.begin(),\
    \ l.end());\n        if (length % 2 == 0) {\n            return (float)(l[length\
    \ / 2] + l[length / 2 - 1]) / 2;\n        } else {\n            return (float)l[length\
    \ / 2];\n        }\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator mid\
    \ = l.begin() + l.size() / 2;\n    float m = l.size() % 2 ? *mid : ((float)(*mid)\
    \ + *(mid - 1)) / 2;\n    return m;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tfloat median = 0;\n\tint size = l.size();\n\
    \t//print(l);\n\tif (size % 2 == 0) {\n\t\t// Even number of elements.\n\t\tfloat\
    \ left = l[size / 2 - 1];\n\t\tfloat right = l[size / 2];\n\t\tmedian = (left\
    \ + right) / 2;\n\t}\n\telse {\n\t\t// Odd number of elements.\n\t\tmedian = l[size\
    \ / 2];\n\t}\n\treturn median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n   int len = l.size();\n   assert(len % 2 == 1);\n   std::sort(l.begin(),\
    \ l.end());\n   return l[len / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp86te0el_: /tmp/tmp86te0el_.cpp:10: float median(std::vector<long int>):
    Assertion `len % 2 == 1'' failed.

    '
  stdout: ''
  timestamp: 1660080641
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0)\n     \
    \   return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    else\n        return\
    \ l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080641
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    if (l.size() % 2) {\n        return\
    \ l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    long n = l.size();\n    sort(l.begin(), l.end());\n    if (n % 2 !=\
    \ 0)\n        return (float)l[n / 2];\n    return (float)(l[(n - 1) / 2] + l[n\
    \ / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // assume input is valid\n    assert(l.size()!=0);\n    assert(l.size()!=1);\n\
    \    assert(l.size()!=2);\n    assert(l.size()%2==1);\n    // You need to code\
    \ this function.\n    // It should return a value of the same type as the elements\
    \ in l.\n    // You can assume that the input is valid, i.e. non-empty, with odd\n\
    \    // number of elements.\n    // It should run in O(n) time, where n is the\
    \ number of elements in l.\n    // You should not use any built-in function that\
    \ computes the median,\n    // such as min() and max().\n    std::sort(l.begin(),\
    \ l.end());\n    // int n = l.size();\n    // int i1 = (n + 1) / 2 - 1;\n    //\
    \ return float(l[i1]);\n    return float(l[l.size()/2]);\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp5oph04bt: /tmp/tmp5oph04bt.cpp:13: float median(std::vector<long int>):
    Assertion `l.size()%2==1'' failed.

    '
  stdout: ''
  timestamp: 1660080642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n  \
    \      return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080631
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  // Assert length of l is > 0\n  assert(l.size() > 0);\n  // Copy l into\
    \ a new vector and sort it.\n  std::vector<long> l_copy(l);\n  std::sort(l_copy.begin(),\
    \ l_copy.end());\n  // Return the middle element (for odd length vectors) or the\
    \ average of the two middle elements (for even length vectors).\n  if (l_copy.size()\
    \ % 2 == 1) {\n    return (float)l_copy[l_copy.size() / 2];\n  } else {\n    return\
    \ ((float)l_copy[l_copy.size() / 2] + (float)l_copy[l_copy.size() / 2 - 1]) /\
    \ 2;\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if(l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    }\n    else {\n        return (float)l[l.size() / 2];\n    }\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  // read the notes in the lab sheet\n  if(l.size() == 0)\n  {\n    return\
    \ 0;\n  }\n  else\n  {\n    int n = l.size();\n    std::vector<long> temp(n);\n\
    \    copy(l.begin(), l.end(), temp.begin());\n    sort(temp.begin(), temp.end());\n\
    \    if(n%2 == 0)\n    {\n      return ((float)(temp[n/2-1]+temp[n/2])/2);\n \
    \   }\n    else\n    {\n      return temp[n/2];\n    }\n  }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  long medianIndex = (l.size() + 1) / 2;\n  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (float)(l[medianIndex - 1]\
    \ + l[medianIndex]) / 2;\n  } else {\n    return (float)l[medianIndex - 1];\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long mid = l.size() / 2;\n    std::nth_element(l.begin(),\
    \ l.begin() + mid, l.end());\n    long median = l[mid];\n    if (l.size() % 2\
    \ == 0) {\n        std::nth_element(l.begin(), l.begin() + mid - 1, l.end());\n\
    \        median = (median + l[mid - 1]) / 2;\n    }\n    return float(median);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp9_w3ngah: /tmp/tmp9_w3ngah.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6,
    (long)5}))) == (5.5)'' failed.

    '
  stdout: ''
  timestamp: 1660080642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  if (l.size() % 2 == 0) {\n    return 0.5 * (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]);\n  } else {\n    return l[l.size() / 2];\n  }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpp2e6kj1l: /tmp/tmpp2e6kj1l.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tif(l.size() == 0) return float(0);\n\tfloat median;\n\tstd::vector<long>::iterator\
    \ itr;\n\tif(l.size() % 2 == 0)\n\t{\n\t\t// Element at (n/2)\n\t\titr = l.begin()\
    \ + l.size()/2;\n\t\t// Element at (n/2 - 1)\n\t\titr--;\n\t\tmedian = (float(*itr)\
    \ + float(*(itr+1)))/2;\n\t}\n\telse\n\t{\n\t\titr = l.begin() + (l.size() - 1)/2;\n\
    \t\tmedian = *itr;\n\t}\n\treturn median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp68o6lax5: /tmp/tmp68o6lax5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0)\n     \
    \   return ((float)(l[l.size() / 2 - 1] + l[l.size() / 2])) / 2;\n    else\n \
    \       return l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tsort(l.begin(), l.end());\n\tauto n = l.size();\n\tif (n == 0) return\
    \ 0;\n\telse if (n % 2 == 0) {\n\t\treturn (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\t\
    }\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0)\n     \
    \   return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    else\n        return\
    \ l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    assert(l.size() % 2 == 1);\n    std::sort(l.begin(),\
    \ l.end());\n    return (float)l[l.size() / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpbxpqjk8q: /tmp/tmpbxpqjk8q.cpp:10: float median(std::vector<long int>):
    Assertion `l.size() % 2 == 1'' failed.

    '
  stdout: ''
  timestamp: 1660080643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        throw \"l is empty!\";\n    }\n    if\
    \ (l.size() == 1) {\n        return (float)l[0];\n    }\n    long m = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return (float)(l[m] + l[m - 1])\
    \ / 2;\n    }\n    return (float)l[m];\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpneg3wdcs: /tmp/tmpneg3wdcs.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n   assert (l.size() > 0);\n   std::sort(l.begin(), l.end());\n   if (l.size()\
    \ % 2 == 0) {\n      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n \
    \  } else {\n      return l[l.size() / 2];\n   }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    assert(l.size() != 0);\n    if (l.size()\
    \ % 2 == 0) {\n        return float(l[(l.size() / 2) - 1] + l[l.size() / 2]) /\
    \ 2;\n    } else {\n        return float(l[l.size() / 2]);\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  float median;\n  size_t length = l.size();\n  std::sort(l.begin(), l.end());\n\
    \  if (length % 2 == 0) {\n    median = (l[length / 2 - 1] + l[length / 2]) /\
    \ 2.0;\n  } else {\n    median = l[length / 2];\n  }\n  return median;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n %\
    \ 2 == 0) {\n        float res = (l[n / 2] + l[n / 2 - 1]) / 2.0;\n        return\
    \ res;\n    }\n    else {\n        return l[n / 2];\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  sort(l.begin(), l.end());\n  if(l.size() %\
    \ 2 == 0) {\n    return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n\
    \  }\n  return (float)l[l.size() / 2];\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size()==0) {\n        assert(0);\n    }\n    else if (l.size()==1)\
    \ {\n        return (float)l[0];\n    }\n    else if (l.size()==2) {\n       \
    \ return (float)(l[0]+l[1])/2;\n    }\n    else {\n        std::sort(l.begin(),\
    \ l.end());\n        int n = l.size();\n        if (n%2==0) {\n            return\
    \ (float)(l[n/2]+l[n/2-1])/2;\n        }\n        else {\n            return (float)l[n/2];\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  long n = (long)l.size();\n  if (n < 1) {\n    return 0.0;\n  }\n  std::sort(l.begin(),\
    \ l.end());\n  if (n % 2 == 0) {\n    return (float)(l[n / 2] + l[n / 2 - 1])\
    \ / 2;\n  } else {\n    return (float)l[n / 2];\n  }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int k =\
    \ n/2;\n    if (n%2) {\n        return (float)l[k];\n    } else {\n        return\
    \ (float)(l[k-1] + l[k])/2;\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n % 2\
    \ == 0) {\n\t\treturn ((float)l[n / 2] + (float)l[n / 2 - 1]) / 2;\n\t}\n\telse\
    \ {\n\t\treturn (float)l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp82xngx2r: /tmp/tmp82xngx2r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    size_t sz = l.size();\n    if (sz == 0) return 0;\n    std::sort(l.begin(),\
    \ l.end());\n    if (sz % 2 == 0) return (l[sz / 2 - 1] + l[sz / 2]) / 2.0;\n\
    \    else return l[sz / 2];\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n  if (n % 2) {\n\
    \    return l[n / 2];\n  } else {\n    return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    auto len = l.size();\n    assert(len\
    \ > 0);\n    return len%2 == 0? (l[len/2] + l[len/2 - 1]) / 2.0 : l[len/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // if odd, then return middle element\n   \
    \ if (n % 2 == 1) {\n        return (float)l[n / 2];\n    }\n    // if even, then\
    \ return average of two middle elements\n    return (float)(l[n / 2 - 1] + l[n\
    \ / 2]) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpp7xybepf: /tmp/tmpp7xybepf.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tassert(l.size() > 0);\n\tsort(l.begin(), l.end());\n\tif (l.size() %\
    \ 2 == 0) {\n\t\treturn float(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n\t\
    }\n\telse {\n\t\treturn l[l.size() / 2];\n\t}\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  auto sz = l.size();\n  if(sz % 2 == 0) {\n    // even number of elements\n\
    \    auto middle = sz / 2;\n    // -1 for zero-based indexing\n    return (l[middle\
    \ - 1] + l[middle]) / 2.0;\n  } else {\n    // odd number of elements\n    return\
    \ l[sz / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp_ew_7f2k: /tmp/tmp_ew_7f2k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) return 0;\n\tstd::sort(l.begin(), l.end());\n\tif\
    \ (l.size() % 2) {\n\t\treturn (float)l[l.size() / 2];\n\t}\n\telse {\n\t\treturn\
    \ (float)(l[l.size() / 2 - 1] + l[l.size() / 2]) / 2;\n\t}\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(!l.empty());\n    std::sort(l.begin(), l.end());\n    auto\
    \ n = l.size();\n    //assert(n % 2 == 1);\n    return (n % 2 == 1) ? (float)l[n\
    \ / 2] : (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int m = n/2;\n    if(n % 2 == 0) {\n      \
    \  // If n is even, return mean of mth and (m+1)th elements.\n        return (float(l[m])\
    \ + float(l[m-1]))/2;\n    } else {\n        // If n is odd, return mth element.\n\
    \        return l[m];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpp1bvsxbb: /tmp/tmpp1bvsxbb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size()%2 == 0) {\n        return (l[l.size()/2] + l[l.size()/2\
    \ - 1])/2.0;\n    } else {\n        return l[l.size()/2];\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpo0f2w0gw: /tmp/tmpo0f2w0gw.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  float m;\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0)\
    \ {\n    m = (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    m\
    \ = l[l.size() / 2];\n  }\n  return m;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  return (l[l.size() / 2] + l[(l.size()\
    \ - 1) / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpac_yht1a: /tmp/tmpac_yht1a.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    //Write your code here.\n    std::sort(l.begin(), l.end());\n    int\
    \ mid = l.size()/2;\n    if(l.size()%2==0)\n        return (l[mid]+l[mid-1])/2.0;\n\
    \    else\n        return l[mid];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int len = l.size();\n    int mn = l[0];\n    int mx = l[0];\n    for\
    \ (int i = 0; i < len; i++) {\n        if (l[i] < mn) {\n            mn = l[i];\n\
    \        }\n        if (l[i] > mx) {\n            mx = l[i];\n        }\n    }\n\
    \    if (len == 1) {\n        return l[0];\n    }\n    if (len % 2 == 0) {\n \
    \       return (float)(l[len / 2] + l[len / 2 - 1]) / 2;\n    }\n    return l[len\
    \ / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp62rxnjj7: /tmp/tmp62rxnjj7.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return 0;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        float x = l[l.size() / 2 -\
    \ 1];\n        float y = l[l.size() / 2];\n        return (x + y) / 2;\n    }\
    \ else {\n        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tassert(n > 0);\n\tsort(l.begin(), l.end());\n\t\
    if (n % 2) return l[n / 2];\n\telse return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tfloat res = 0;\n\tstd::sort(l.begin(), l.end());\n\tif (l.size() % 2\
    \ == 0) {\n\t\tres = (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\t}\n\telse\
    \ {\n\t\tres = l[l.size() / 2];\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if(l.size() % 2 == 0) {\n        long a = l[l.size() / 2];\n     \
    \   long b = l[l.size() / 2 - 1];\n        return (a + b) / 2.0;\n    } else {\n\
    \        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpt6rmxv4s: /tmp/tmpt6rmxv4s.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // Check for even number of elements in the vector.\n    assert(((l.size())\
    \ % (2) == (0)));\n    std::sort(l.begin(), l.end());\n    // Return average of\
    \ middle two elements.\n    return ((l[((l.size()) / (2))] + l[((l.size()) / (2))\
    \ - (1)]) / (2.0));\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp7xaypf1l: /tmp/tmp7xaypf1l.cpp:10: float median(std::vector<long int>):
    Assertion `((l.size()) % (2) == (0))'' failed.

    '
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  size_t mid = l.size() / 2;\n  if (l.size()\
    \ % 2) {\n    return (float)l[mid];\n  } else {\n    return ((float)l[mid] + (float)l[mid\
    \ - 1]) / 2;\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tassert(l.size() > 0);\n\tauto mid = l.size() / 2;\n\tstd::nth_element(l.begin(),\
    \ l.begin() + mid, l.end());\n\tfloat value = (float)l[mid];\n\tif (l.size() %\
    \ 2 == 0) {\n\t\tstd::nth_element(l.begin(), l.begin() + mid - 1, l.end());\n\t\
    \tvalue = (value + (float)l[mid - 1]) / 2;\n\t}\n\treturn value;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    size_t size = l.size();\n    if (size == 0) {\n        return 0;\n\
    \    }\n    std::sort(l.begin(), l.end());\n    if (size % 2 == 0) {\n       \
    \ return (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    } else {\n        return\
    \ l[size / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    long\
    \ i = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return float(l[i] +\
    \ l[i - 1]) / 2;\n    } else {\n        return float(l[i]);\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int half_size = l.size() / 2;\n    if (l.size() % 2 == 0) {\n    \
    \    return (l[half_size] + l[half_size - 1]) / 2.0;\n    } else {\n        return\
    \ l[half_size];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpaityolx_: /tmp/tmpaityolx_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    int sz = l.size();\n    int half =\
    \ sz / 2;\n    if (sz % 2 == 0) {\n        int half_left = half - 1;\n       \
    \ return (l[half_left] + l[half]) / 2.0;\n    } else {\n        return l[half];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    // be more robust in here\n  \
    \  if(l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    long llen = l.size();\n    if(llen\
    \ % 2 == 0) {\n        return 0.5 * (l[llen / 2] + l[llen / 2 - 1]);\n    } else\
    \ {\n        return l[llen / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    return 0.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpvge4bk3j: /tmp/tmpvge4bk3j.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    float m = 0;\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 != 0) {\n        m = (float)l[l.size() / 2];\n    } else {\n        m =\
    \ (float)(l[l.size() / 2] + l[(l.size() / 2) - 1]) / 2;\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\t// Write your code here.\n\tsort(l.begin(), l.end());\n\tint n = l.size();\n\
    \tif (n == 0)\n\t\treturn 0;\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n\telse\n\t\treturn l[n / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    assert(l.size() <= 100);\n    std::sort(l.begin(),\
    \ l.end());\n    return (l.size()%2==0) ? (l[l.size()/2-1]+l[l.size()/2])/2.0\
    \ : l[l.size()/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size()>0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0)\n        return (float(l[l.size() / 2]) + float(l[l.size() / 2 - 1]))\
    \ / 2;\n    else\n        return l[l.size() / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  size_t i\
    \ = l.size() / 2;\n  if (l.size() % 2 == 0) {\n    return (float)(l[i - 1] + l[i])\
    \ / 2;\n  } else {\n    return (float)l[i];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  /* Replace \"return 0.0\" with your code */\n  int n = l.size();\n \
    \ if(n % 2 == 0)\n    return ((float)(l[n/2-1] + l[n/2]))/2;\n  else\n    return\
    \ (float)l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpac50bhdd: /tmp/tmpac50bhdd.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tif(l.size() == 0) {\n\t\treturn -1;\n\t}\n\tif(l.size() == 1) {\n\t\t\
    return l[0];\n\t}\n\t// >>> sort((std::vector<long>({(long)5, (long)4, (long)3,\
    \ (long)2, (long)1})))\n\t// [1, 2, 3, 4, 5]\n\tsort(l.begin(), l.end());\n\t\
    if(l.size() % 2 == 0) {\n\t\t// >>> (std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))[2]\n\t\t// 3\n\t\t// >>> (std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))[3]\n\t\t// 4\n\t\treturn (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[l.size() / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  // >>> random.sample((range(7)), (3))\n  // [0, 1, 4]\n  std::random_shuffle(l.begin(),\
    \ l.end());\n  // >>> l\n  // [3, 1, 2, 4, 5]\n  std::vector<long> m(l.begin(),\
    \ l.begin() + (l.size() / 2));\n  // >>> m\n  // [3, 1, 2]\n  // >>> random.sample((range(7)),\
    \ (3))\n  // [6, 2, 5]\n  std::random_shuffle(l.begin(), l.end());\n  // >>> l\n\
    \  // [3, 1, 2, 4, 5]\n  std::vector<long> n(l.begin() + (l.size() / 2), l.end());\n\
    \  // >>> n\n  // [4, 5]\n  return (median(m) + median(n)) / 2.0;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660080653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return l[l.size() / 2];\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmp92mvpgj_: /tmp/tmp92mvpgj_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-10,
    (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0)'' failed.

    '
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  assert(!l.empty());\n  std::sort(l.begin(), l.end());\n  return l.size()\
    \ % 2 ? l[l.size() / 2] : (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tauto n = l.size();\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tauto l1 =\
    \ l;\n\tstd::sort(l1.begin(), l1.end());\n\tif (n % 2 == 0) {\n\t\treturn ((float)(l1[n\
    \ / 2 - 1] + l1[n / 2])) / (float)2;\n\t}\n\telse {\n\t\treturn (float)l1[n /\
    \ 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    auto n = l.size();\n    if(n %\
    \ 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n     \
    \   return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\nfloat med = 0;\n\tstd::sort(l.begin(), l.end());\n\tif(l.size()%2 != 0)\n\
    \t\tmed = l[l.size()/2];\n\telse\n\t\tmed = (l[l.size()/2] + l[l.size()/2-1])/2.0;\n\
    \treturn med;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tif (l.size() % 2 == 0)\n\t\treturn (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n\telse\n\t\treturn l[l.size() / 2];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpf0vmag2a: /tmp/tmpf0vmag2a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::vector<long> l_l(l);\n  std::sort(l_l.begin(), l_l.end());\n  if\
    \ (l_l.size()%2 == 0) {\n    return ((float)(l_l[l_l.size()/2-1] + l_l[l_l.size()/2]))/2;\n\
    \  } else {\n    return (float)l_l[l_l.size()/2];\n  }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int sz = l.size();\n    if (sz\
    \ % 2 == 0) {\n        return (l[sz / 2] + l[sz / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[sz / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tfloat median = 0;\n\tif (n % 2 == 0) {\n\t\tmedian\
    \ = (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\tmedian = l[n / 2];\n\t\
    }\n\treturn median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmppl9e8zgu: /tmp/tmppl9e8zgu.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) {\n        throw std::invalid_argument(\"\
    List is empty!\");\n    }\n    sort(l.begin(), l.end());\n    if (n%2 != 0) {\n\
    \        return l[n/2];\n    }\n    else {\n        return ((l[n/2] + l[(n/2)-1])/2.0);\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    if(l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpq1hxhk_9: /tmp/tmpq1hxhk_9.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tsort(l.begin(), l.end());\n\tif (n % 2 != 0)\n\t\
    \treturn (float)l[n / 2];\n\treturn (float)(l[(n - 1) / 2] + l[n / 2]) / 2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    return\
    \ (l.size() % 2) ? l[l.size() / 2] : ((float)l[l.size() / 2] + (float)l[l.size()\
    \ / 2 - 1]) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) {\n\t\tthrow std::logic_error(\"List is empty\");\n\
    \t}\n\tsort(l.begin(), l.end());\n\tif (l.size() % 2 == 0) {\n\t\treturn (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[l.size() / 2];\n\
    \t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // TODO: Implement this function. \n    std::sort(l.begin(), l.end());\n\
    \    return (l.size()%2 == 0)?\n            (l[l.size()/2] + l[l.size()/2 - 1])/2.0:\n\
    \            l[l.size()/2];\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    assert(l.size()%2 == 1);\n    std::sort(l.begin(),\
    \ l.end());\n    // Now, l is sorted.\n    return (float)l[l.size()/2];\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpigy0ztaa: /tmp/tmpigy0ztaa.cpp:10: float median(std::vector<long int>):
    Assertion `l.size()%2 == 1'' failed.

    '
  stdout: ''
  timestamp: 1660080648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    //Cerinta: Se da un vector. Sa se calculeze medianul lui.\n    //\
    \ Mediana unui vector v este elementul din mijlocul lui, dupa ce\n    // il sortam.\
    \ Daca vectorul are lungimea para, mediana este\n    // media aritmetica a doua\
    \ elemente din mijlocul lui.\n    // Exemple:\n    // - mediana {4, 7, 3, 1, 5}\
    \ este 4.\n    // - mediana {4, 7, 3, 1, 5, 6} este 4.5 = (4 + 5) / 2.\n    //\
    \ *ATENTIE*: \n    // - Functia nu trebuie sa modifice vectorul original.\n  \
    \  // - Functia trebuie sa fie constanta.\n    std::vector<long> v(l);\n    std::sort(v.begin(),\
    \ v.end());\n    if (v.size() % 2 == 0) {\n        return ((float)v[v.size() /\
    \ 2] + (float)v[v.size() / 2 - 1]) / 2;\n    }\n    return (float)v[v.size() /\
    \ 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  // Should be an even number.\n  int\
    \ middle = l.size() / 2;\n  float result = (l[middle] + l[middle - 1]) / 2.0;\n\
    \  return result;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: Exception
  stderr: 'tmpwer79t9w: /tmp/tmpwer79t9w.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (float(3))'' failed.

    '
  stdout: ''
  timestamp: 1660080649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n    // create a vector of doubles\n    std::vector<double> d;\n    //\
    \ convert vector of longs to doubles\n    std::transform(l.begin(), l.end(), std::back_inserter(d),\
    \ [](double n) {return n;});\n    int m = d.size() / 2;\n    std::nth_element(d.begin(),\
    \ d.begin() + m, d.end());\n    double median = d[m];\n    // if even elements,\
    \ return average of middle two\n    if (d.size() % 2 == 0) {\n        std::nth_element(d.begin(),\
    \ d.begin() + m - 1, d.end());\n        median = (median + d[m - 1]) / 2;\n  \
    \  }\n    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
    \ l) {\n\t\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n  \
    \  if (l.size() % 2 == 0)\n        return (float)(l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2;\n    else\n        return (float)l[l.size() / 2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080649
