name: HumanEval_70_strange_sort_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
  \ return vector in strange order.\n// Strange sorting, is when you start with the\
  \ minimum value,\n// then maximum of the remaining integers, then minimum and so\
  \ on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n\
  // >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n\
  // (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n\
  // (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
  \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
  \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
  \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
  \ (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2,\
  \ (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
  \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
  \ == (std::vector<long>({(long)111111})));\n}\n"
completions: ["    // your code here\n    std::vector<long> temp = lst;\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::vector<long>temp1;\n    if(temp.size()%2==0){\n     \
    \   int  i=0;\n        int j=temp.size()-1;\n        for(int k=0;k<temp.size();k++)\n\
    \        {\n            if(k%2==0)\n            {\n                temp1.push_back(temp[i]);\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          temp1.push_back(temp[j]);\n                j--;\n            }\n  \
    \      }\n        return temp1;\n    }\n    else{\n        int i=0;\n        int\
    \ j=temp.size()-1;\n        for(int k=0;k<temp.size();k++)\n        {\n      \
    \      if(k%2==0)\n            {\n                temp1.push_back(temp[i]);\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          temp1.push_back(temp[j]);\n                j--;\n            }\n  \
    \      }\n        return temp1;\n    }", "    if (lst.size() == 0) {\n       \
    \ return lst;\n    }\n    std::vector<long> ans;\n    std::sort(lst.begin(), lst.end());\n\
    \    std::vector<long>::iterator min = lst.begin();\n    std::vector<long>::iterator\
    \ max = lst.end() - 1;\n    while (max >= min) {\n        ans.push_back(*min);\n\
    \        if (max != min) {\n            ans.push_back(*max);\n        }\n    \
    \    min++;\n        max--;\n    }\n    return ans;", "    if (lst.size() <= 1)\
    \ {\n        return lst;\n    }\n    // sort\n    std::sort(lst.begin(), lst.end());\n\
    \    // initialize result\n    std::vector<long> result;\n    // initializing\
    \ index\n    int index = 0;\n    // false for even index, true for odd index\n\
    \    bool odd = false;\n    for (int i = 0; i < lst.size(); i++) {\n        //\
    \ when odd\n        if (odd) {\n            // add last element\n            result.push_back(lst[lst.size()\
    \ - index - 1]);\n            // increase index\n            index++;\n      \
    \      // turn odd to false\n            odd = false;\n        }\n        // when\
    \ not odd\n        else {\n            // add first element\n            result.push_back(lst[index]);\n\
    \            // turn odd to true\n            odd = true;\n        }\n    }\n\
    \    return result;", "  std::vector<long> result;\n  if(lst.size() <= 1) return\
    \ lst;\n  std::sort(lst.begin(), lst.end());\n  int count = 0;\n  long max_elem\
    \ = lst[lst.size() - 1];\n  while(true) {\n    int min_index = 0;\n    int max_index\
    \ = lst.size() - 1;\n    while(true) {\n      if(count == 0) {\n        result.push_back(lst[min_index]);\n\
    \        if(lst[min_index] == max_elem) {\n          lst.erase(lst.begin() + min_index);\n\
    \          break;\n        }\n        else {\n          lst.erase(lst.begin()\
    \ + min_index);\n          count++;\n        }\n      }\n      else {\n      \
    \  result.push_back(lst[max_index]);\n        if(lst[max_index] == max_elem) {\n\
    \          lst.erase(lst.begin() + max_index);\n          break;\n        }\n\
    \        else {\n          lst.erase(lst.begin() + max_index);\n          count--;\n\
    \        }\n      }\n    }\n    if(lst.size() == 0) break;\n  }\n  return result;",
  "    if (lst.size() <= 1) return lst;\n    std::sort(lst.begin(), lst.end());\n\
    \    std::vector<long> res;\n    int start = 0, end = lst.size() - 1;\n    while\
    \ (start <= end) {\n        res.push_back(lst[start++]);\n        if (start <=\
    \ end) res.push_back(lst[end--]);\n    }\n    return res;", "    std::vector<long>\
    \ lst_copy = lst;\n    std::sort(lst_copy.begin(), lst_copy.end());\n    int j\
    \ = 0;\n    int n = lst.size();\n    if (n == 0) {\n        return lst;\n    }\n\
    \    for (int i = 1; i < n; i++) {\n        if (i % 2 == 0) {\n            lst[i]\
    \ = lst_copy[j];\n            j++;\n        } else {\n            lst[i] = lst_copy[n\
    \ - j - 1];\n        }\n    }\n    return lst;", "  std::vector<long> ret;\n \
    \ if (lst.size() == 0) return ret;\n  std::vector<long> _lst(lst);\n  std::sort(_lst.begin(),\
    \ _lst.end());\n  long min = _lst[0];\n  ret.push_back(min);\n  _lst.erase(_lst.begin());\n\
    \  while (_lst.size() > 0) {\n    long max = _lst[_lst.size() - 1];\n    ret.push_back(max);\n\
    \    _lst.pop_back();\n    if (_lst.size() > 0) {\n      min = _lst[0];\n    \
    \  ret.push_back(min);\n      _lst.erase(_lst.begin());\n    }\n  }\n  return\
    \ ret;", "    std::vector<long> out;\n    sort(lst.begin(), lst.end());\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            out.push_back(lst[i\
    \ / 2]);\n        } else {\n            out.push_back(lst[lst.size() - i / 2 -\
    \ 1]);\n        }\n    }\n    return out;", "    if (lst.size() <= 1) {\n    \
    \    return lst;\n    }\n\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n  \
    \      res.push_back(lst[i]);\n        if (i != j) {\n            res.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;", "    std::vector<long>\
    \ sorted = lst;\n    std::sort(sorted.begin(), sorted.end());\n    for (int i\
    \ = 0; i < lst.size(); i+=2) {\n        lst[i] = sorted[i/2];\n    }\n    for\
    \ (int i = 1; i < lst.size(); i+=2) {\n        lst[i] = sorted[lst.size() - (i/2)\
    \ - 1];\n    }\n    return lst;", "    if (lst.size()==0)\n        return {};\n\
    \    if (lst.size()==1)\n        return lst;\n    std::vector<long> result = {};\n\
    \    std::vector<long> temp = lst;\n    result.push_back(temp[0]);\n    temp.erase(temp.begin());\n\
    \    while (temp.size()>0) {\n        if (temp.size()>1) {\n            result.push_back(temp[temp.size()-1]);\n\
    \            temp.pop_back();\n        }\n        if (temp.size()>0) {\n     \
    \       result.push_back(temp[0]);\n            temp.erase(temp.begin());\n  \
    \      }\n    }\n    return result;", "\t// your code goes here\n\t\n\tstd::vector<long>::iterator\
    \ it;\n\tit = std::min_element(lst.begin(), lst.end());\n\tstd::cout << *it <<\
    \ std::endl;\n\tlst.erase(it);\n\tit = std::max_element(lst.begin(), lst.end());\n\
    \tstd::cout << *it << std::endl;\n\tlst.erase(it);\n\tit = std::min_element(lst.begin(),\
    \ lst.end());\n\tstd::cout << *it << std::endl;\n\tlst.erase(it);\n\tit = std::max_element(lst.begin(),\
    \ lst.end());\n\tstd::cout << *it << std::endl;\n\tlst.erase(it);\n\t\n\treturn\
    \ lst;", "    // note: if list lst is empty, return empty list\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    // note: use std::sort to sort list\
    \ in ascending order\n    std::sort(lst.begin(), lst.end());\n    // note: find\
    \ longest length of list lst\n    int length = lst.size();\n    // note: create\
    \ a new vector to hold modified list\n    std::vector<long> sort(length);\n  \
    \  // note: start from the first element in sorted list\n    int j = 0;\n    //\
    \ note: iterate through each element to find max\n    for (int i = 0; i < length;\
    \ i++) {\n        // note: odd indices are min elements\n        if (i % 2 ==\
    \ 0) {\n            sort[i] = lst[j];\n            j++;\n        }\n        //\
    \ note: even indices are max elements\n        else {\n            sort[i] = lst[length\
    \ - j];\n        }\n    }\n    return sort;", "  long min, max, temp;\n  int n\
    \ = lst.size();\n  std::vector<long> res;\n  if (n == 0) {\n    return res;\n\
    \  }\n  else if (n == 1) {\n    res.push_back(lst[0]);\n    return res;\n  }\n\
    \  else {\n    while (n > 1) {\n      max = lst[0];\n      min = lst[0];\n   \
    \   std::vector<long> v;\n      for (int i = 0; i < n; i++) {\n        v.push_back(lst[i]);\n\
    \      }\n      for (int i = 0; i < n; i++) {\n        if (v[i] > max) {\n   \
    \       max = v[i];\n        }\n        if (v[i] < min) {\n          min = v[i];\n\
    \        }\n      }\n      res.push_back(min);\n      if (min == max) {\n    \
    \    res.push_back(max);\n        return res;\n      }\n      res.push_back(max);\n\
    \      for (int i = 0; i < n; i++) {\n        if (lst[i] == min) {\n         \
    \ lst[i] = -1;\n        }\n        if (lst[i] == max) {\n          lst[i] = -1;\n\
    \        }\n      }\n      std::vector<long> l;\n      for (int i = 0; i < n;\
    \ i++) {\n        if (lst[i] != -1) {\n          l.push_back(lst[i]);\n      \
    \  }\n      }\n      n = l.size();\n      for (int i = 0; i < n; i++) {\n    \
    \    lst[i] = l[i];\n      }\n    }\n    return res;\n  }", "\tint n = lst.size();\n\
    \tstd::vector<long> res;\n\tint i = 0;\n\tstd::sort(lst.begin(), lst.end());\n\
    \twhile (i < n) {\n\t\tres.push_back(lst[i]);\n\t\ti += 1;\n\t\tif (i < n) {\n\
    \t\t\tres.push_back(lst[n - i]);\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn res;", " \
    \   std::vector<long> output;\n    //loop through and add the minimum value of\
    \ the remaining to the new vector\n    while(lst.size() != 0){\n        //find\
    \ min value of the vector\n        int min = lst[0];\n        for(int i = 0; i\
    \ < lst.size(); i++){\n            if(lst[i] < min){\n                min = lst[i];\n\
    \            }\n        }\n        //remove the min value from the vector\n  \
    \      int i = 0;\n        while(lst[i] != min){\n            i++;\n        }\n\
    \        lst.erase(lst.begin() + i);\n        //add the min value to the new vector\n\
    \        output.push_back(min);\n        //find max value of the vector\n    \
    \    int max = lst[0];\n        for(int i = 0; i < lst.size(); i++){\n       \
    \     if(lst[i] > max){\n                max = lst[i];\n            }\n      \
    \  }\n        //remove the max value from the vector\n        i = 0;\n       \
    \ while(lst[i] != max){\n            i++;\n        }\n        lst.erase(lst.begin()\
    \ + i);\n        //add the max value to the new vector\n        output.push_back(max);\n\
    \    }\n    return output;", "  if (lst.size() <= 1) {\n    return lst;\n  }\n\
    \  std::vector<long> final_list;\n  std::vector<long> sorted_list = lst;\n  std::sort(sorted_list.begin(),\
    \ sorted_list.end());\n  int top = sorted_list.size() - 1;\n  int bottom = 0;\n\
    \  int i = 0;\n  while (i < sorted_list.size()) {\n    final_list.push_back(sorted_list[top]);\n\
    \    top--;\n    i++;\n    if (i < sorted_list.size()) {\n      final_list.push_back(sorted_list[bottom]);\n\
    \      bottom++;\n      i++;\n    }\n  }\n  return final_list;", "    std::vector<long>\
    \ result;\n    int n = lst.size();\n    if (n == 0) return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0, j = n - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n\
    \        if (i != j) result.push_back(lst[j]);\n        i++, j--;\n    }\n   \
    \ return result;", "    if (lst.size()<=1) return lst;\n    int i = 0;\n    int\
    \ j = lst.size()-1;\n    bool swap_pos = false;\n    std::vector<long> new_lst;\n\
    \    while (new_lst.size() < lst.size()) {\n        // cout << i << \", \" <<\
    \ j << endl;\n        if (swap_pos) {\n            new_lst.push_back(lst[j]);\n\
    \            j--;\n        } else {\n            new_lst.push_back(lst[i]);\n\
    \            i++;\n        }\n        swap_pos = !swap_pos;\n    }\n    return\
    \ new_lst;", "    std::vector<long> result;\n    if (lst.size()==0) return result;\n\
    \    std::sort(lst.begin(), lst.end());\n    long mid = (lst.size())/2;\n    int\
    \ count = 0;\n    while (count<=mid) {\n        if (count==mid && lst.size()%2!=0)\
    \ {\n            result.push_back(lst[mid]);\n            count++;\n        }\n\
    \        else {\n            result.push_back(lst[count]);\n            result.push_back(lst[lst.size()-1-count]);\n\
    \            count++;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if(lst.size() < 1)\n        return ans;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n     \
    \   ans.push_back(lst[i]);\n        if(i != j)\n            ans.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return ans;", "    int l = lst.size();\n\
    \    if(l==0)return lst;\n    if(l==1)return lst;\n    sort(lst.begin(),lst.end());\n\
    \    int i = 0;\n    int j = l-1;\n    int k = 0;\n    vector<long> res(l,0);\n\
    \    while(i<=j){\n        res[k++] = lst[i++];\n        if(i<=j)res[k++] = lst[j--];\n\
    \    }\n    return res;", "  std::vector<long> odd_vec, even_vec;\n  for (unsigned\
    \ int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      even_vec.push_back(lst[i]);\n\
    \    } else {\n      odd_vec.push_back(lst[i]);\n    }\n  }\n  std::sort(even_vec.begin(),\
    \ even_vec.end());\n  std::sort(odd_vec.begin(), odd_vec.end());\n  std::reverse(odd_vec.begin(),\
    \ odd_vec.end());\n  std::vector<long> merged;\n  merged.reserve( even_vec.size()\
    \ + odd_vec.size() ); // preallocate memory\n  merged.insert( merged.end(), even_vec.begin(),\
    \ even_vec.end() );\n  merged.insert( merged.end(), odd_vec.begin(), odd_vec.end()\
    \ );\n  return merged;", "\tsort(lst.begin(), lst.end());\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i += 2) {\n\t\tlst.push_back(lst[i]);\n\t}\n\tlst.erase(lst.begin(),\
    \ lst.begin() + lst.size() / 2);\n\treturn lst;", "\tstd::vector<long> v;\n\t\
    if(lst.size()==0) return v;\n\tstd::sort(lst.begin(),lst.end());\n\tint i=0,j=lst.size()-1;\n\
    \twhile(i<=j){\n\t\tv.push_back(lst[i]);\n\t\ti++;\n\t\tif(i<=j){\n\t\t\tv.push_back(lst[j]);\n\
    \t\t\tj--;\n\t\t}\n\t}\n\treturn v;", "\tif (lst.size() == 0) {\n\t\treturn lst;\n\
    \t}\n\tstd::vector<long>::iterator minElement = min_element(lst.begin(), lst.end());\n\
    \tlong minValue = *minElement;\n\tlst.erase(minElement);\n\tstd::vector<long>::iterator\
    \ maxElement = max_element(lst.begin(), lst.end());\n\tlong maxValue = *maxElement;\n\
    \tlst.erase(maxElement);\n\tstd::vector<long>::iterator minElement2 = min_element(lst.begin(),\
    \ lst.end());\n\tlong minValue2 = *minElement2;\n\tlst.erase(minElement2);\n\t\
    std::vector<long>::iterator maxElement2 = max_element(lst.begin(), lst.end());\n\
    \tlong maxValue2 = *maxElement2;\n\tlst.erase(maxElement2);\n\tif (minValue ==\
    \ maxValue) {\n\t\treturn lst;\n\t}\n\tlst.push_back(minValue);\n\tlst.push_back(maxValue);\n\
    \tlst.push_back(minValue2);\n\tlst.push_back(maxValue2);\n\treturn lst;", "  \
    \  std::vector<long> ans;\n    if(lst.size()==0) return ans;\n    sort(lst.begin(),lst.end());\n\
    \    long j = 0;\n    while(j<lst.size()){\n        ans.push_back(lst[j]);\n \
    \       j+=2;\n    }\n    j = 1;\n    while(j<lst.size()){\n        ans.push_back(lst[j]);\n\
    \        j+=2;\n    }\n    return ans;", "    bool is_ascending = true;\n    for\
    \ (auto i = 0; i < lst.size(); i++) {\n        if (is_ascending) {\n         \
    \   auto max_el = std::max_element(lst.begin() + i, lst.end());\n            std::iter_swap(lst.begin()\
    \ + i, max_el);\n        } else {\n            auto min_el = std::min_element(lst.begin()\
    \ + i, lst.end());\n            std::iter_swap(lst.begin() + i, min_el);\n   \
    \     }\n        is_ascending = !is_ascending;\n    }\n    return lst;", "   \
    \ std::vector<long> result;\n    if(lst.size()==0)\n        return result;\n \
    \   // Write your code here\n    // To print results to the standard output you\
    \ can use\n    // cout << \"Hello world!\";\n    std::sort(lst.begin(),lst.end());\n\
    \    int flag=0;\n    int i=0;\n    while(i<lst.size()){\n        if(flag==0){\n\
    \            result.push_back(lst[i]);\n            flag=1;\n        }\n     \
    \   else{\n            result.push_back(lst[lst.size()-1-i]);\n            flag=0;\n\
    \        }\n        i++;\n    }\n    return result;", "    // Function to sort\
    \ list in strange order\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int n = lst.size();\n    int j = 0;\n    while(j < n/2){\n\
    \        result.push_back(lst[j]);\n        result.push_back(lst[n-j-1]);\n  \
    \      j++;\n    }\n    if(n%2 != 0){\n        result.push_back(lst[j]);\n   \
    \ }\n    return result;", "  if (lst.size() <= 2) {\n    return lst;\n  }\n  std::vector<long>\
    \ result;\n  sort(lst.begin(), lst.end());\n  size_t left = 0;\n  size_t right\
    \ = lst.size() - 1;\n  while (left <= right) {\n    result.push_back(lst[left]);\n\
    \    if (left != right) {\n      result.push_back(lst[right]);\n    }\n    left++;\n\
    \    right--;\n  }\n  return result;", "    // your code goes here\n    int n\
    \ = lst.size();\n    if(n <= 1)\n        return lst;\n    std::vector<long> res;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0, j = n-1;\n    while(i\
    \ <= j){\n        res.push_back(lst[i]);\n        if(i != j)\n            res.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;", "  std::vector<long> res;\n\
    \  std::vector<long> sorted_lst = lst;\n  std::sort(sorted_lst.begin(), sorted_lst.end());\n\
    \  int i=0,j=sorted_lst.size()-1;\n  while(i<=j){\n    res.push_back(sorted_lst[i]);\n\
    \    if(i!=j) res.push_back(sorted_lst[j]);\n    i++;j--;\n  }\n  return res;",
  "  sort(lst.begin(), lst.end());\n  for (int i = 0; i < lst.size() - 1; i += 2)\
    \ {\n    int j = lst.size() - 1 - i / 2;\n    if (i + 1 == j)\n      break;\n\
    \    long tmp = lst[i];\n    lst[i] = lst[j];\n    lst[j] = tmp;\n  }\n  return\
    \ lst;", "    int a = 0;\n    int b = 0;\n    int c = lst.size() - 1;\n    int\
    \ d = lst.size() - 1;\n    bool x = true;\n    bool y = true;\n    std::vector<long>\
    \ strVec;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (x == true) {\n            strVec.push_back(lst[a]);\n  \
    \          a++;\n            x = false;\n        } else {\n            strVec.push_back(lst[c]);\n\
    \            c--;\n            x = true;\n        }\n    }\n    return strVec;",
  "  std::vector<long> ans;\n  if(lst.size() == 0)\n    return ans;\n  int max = *std::max_element(lst.begin(),\
    \ lst.end());\n  int min = *std::min_element(lst.begin(), lst.end());\n  int lim\
    \ = max - min + 1;\n  int rem_len = lst.size();\n  int pos_min = -1, pos_max =\
    \ -1;\n  while(rem_len != 0) {\n    pos_min = -1;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n      if(lst[i] == min) {\n        pos_min = i;\n        break;\n  \
    \    }\n    }\n    if(pos_min == -1) {\n      lst.erase(lst.begin() + pos_max);\n\
    \      rem_len--;\n      continue;\n    }\n    ans.push_back(min);\n    lst.erase(lst.begin()\
    \ + pos_min);\n    rem_len--;\n    if(rem_len == 0)\n      break;\n    pos_max\
    \ = -1;\n    for(int i = 0; i < lst.size(); i++) {\n      if(lst[i] == max) {\n\
    \        pos_max = i;\n        break;\n      }\n    }\n    if(pos_max == -1) {\n\
    \      lst.erase(lst.begin() + pos_min);\n      rem_len--;\n      continue;\n\
    \    }\n    ans.push_back(max);\n    lst.erase(lst.begin() + pos_max);\n    rem_len--;\n\
    \  }\n  return ans;", "    if (lst.size() <= 2) {\n        return lst;\n    }\n\
    \    std::vector<long>::iterator min = std::min_element(lst.begin(), lst.end());\n\
    \    std::vector<long>::iterator max = std::max_element(lst.begin(), lst.end());\n\
    \    std::vector<long> result;\n    std::vector<long>::iterator min_new;\n   \
    \ std::vector<long>::iterator max_new;\n    while (min != max) {\n        result.push_back(*min);\n\
    \        min_new = std::min_element(min + 1, max + 1);\n        result.push_back(*max);\n\
    \        max_new = std::max_element(min + 1, max + 1);\n        min = min_new;\n\
    \        max = max_new;\n    }\n    result.push_back(*min);\n    return result;",
  "    // your code here\n    if(lst.size() == 0)\n        return lst;\n    std::vector<long>\
    \ ret;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq1;\n\
    \    std::priority_queue<long, std::vector<long>, std::less<long>> pq2;\n    for(int\
    \ i = 0; i < lst.size(); i++)\n    {\n        pq1.push(lst[i]);\n        pq2.push(lst[i]);\n\
    \    }\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            ret.push_back(pq1.top());\n            pq1.pop();\n  \
    \      }\n        else\n        {\n            ret.push_back(pq2.top());\n   \
    \         pq2.pop();\n        }\n    }\n    return ret;", "  auto cmp = [](const\
    \ auto&a, const auto&b) {\n    return std::abs(a) < std::abs(b);\n  };\n  std::sort(lst.begin(),\
    \ lst.end(), cmp);\n  std::vector<long> res;\n  int l = 0, r = lst.size() - 1;\n\
    \  while (l <= r) {\n    res.push_back(lst[l++]);\n    if (l <= r) res.push_back(lst[r--]);\n\
    \  }\n  return res;", "    std::vector<long> res;\n    std::vector<long> sorted\
    \ = lst;\n    std::sort(sorted.begin(), sorted.end());\n    int index = 0;\n \
    \   while (sorted.size() > 0) {\n        res.push_back(sorted[index]);\n     \
    \   sorted.erase(sorted.begin() + index);\n        if (sorted.size() == 0) break;\n\
    \        if (index == 0) {\n            index = sorted.size() - 1;\n        }\
    \ else {\n            index--;\n        }\n    }\n    return res;", "\tstd::vector<long>\
    \ res;\n\tstd::sort(lst.begin(), lst.end());\n\tint i = 0;\n\twhile (lst.size()\
    \ > 0) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(lst[0]);\n\t\t\tlst.erase(lst.begin());\n\
    \t\t}\n\t\telse {\n\t\t\tres.push_back(lst[lst.size() - 1]);\n\t\t\tlst.erase(lst.end()\
    \ - 1);\n\t\t}\n\t\ti++;\n\t}\n\treturn res;", "    if (lst.size() == 0) return\
    \ lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> res;\n \
    \   res.push_back(lst[0]);\n    lst.erase(lst.begin());\n    bool asc = true;\n\
    \    while (lst.size() > 0) {\n        if (asc) {\n            res.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        } else {\n          \
    \  res.push_back(lst[0]);\n            lst.erase(lst.begin());\n        }\n  \
    \      asc = !asc;\n    }\n    return res;", "  if (lst.size() <= 1) {\n    return\
    \ lst;\n  }\n  bool even_num = lst.size() % 2 == 0;\n  bool is_even = true;\n\
    \  std::vector<long> result;\n  std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ q;\n  std::priority_queue<long, std::vector<long>, std::less<long>> q_;\n  for\
    \ (long i : lst) {\n    if (is_even) {\n      q.push(i);\n    } else {\n     \
    \ q_.push(i);\n    }\n    is_even = !is_even;\n  }\n  while (!q.empty() || !q_.empty())\
    \ {\n    if (!q.empty()) {\n      result.push_back(q.top());\n      q.pop();\n\
    \    }\n    if (!q_.empty()) {\n      result.push_back(q_.top());\n      q_.pop();\n\
    \    }\n  }\n  return result;", "    std::vector<long> ret;\n    if(lst.size()\
    \ == 0) return ret;\n    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    std::vector<long>\
    \ temp;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] != min &&\
    \ lst[i] != max) {\n            temp.push_back(lst[i]);\n        }\n    }\n  \
    \  ret.push_back(min);\n    int a = 1;\n    int b = temp.size() - 1;\n    while(a\
    \ <= b) {\n        ret.push_back(temp[a++]);\n        ret.push_back(temp[b--]);\n\
    \    }\n    if(temp.size() % 2 == 1) ret.push_back(temp[a]);\n    return ret;",
  "    if (lst.size() % 2 == 0) {\n        for (unsigned long i = 0; i < lst.size()\
    \ - 1; i += 2) {\n            long min = i;\n            long max = i + 1;\n \
    \           for (unsigned long j = i + 2; j < lst.size(); j++) {\n           \
    \     if (lst[j] < lst[min]) {\n                    min = j;\n               \
    \ }\n                if (lst[j] > lst[max]) {\n                    max = j;\n\
    \                }\n            }\n            std::swap(lst[i], lst[min]);\n\
    \            if (max == i) {\n                max = min;\n            }\n    \
    \        std::swap(lst[i + 1], lst[max]);\n        }\n    } else {\n        for\
    \ (unsigned long i = 0; i < lst.size() - 1; i += 2) {\n            long min =\
    \ i;\n            long max = i + 1;\n            for (unsigned long j = i + 2;\
    \ j < lst.size(); j++) {\n                if (lst[j] < lst[min]) {\n         \
    \           min = j;\n                }\n                if (lst[j] > lst[max])\
    \ {\n                    max = j;\n                }\n            }\n        \
    \    std::swap(lst[i], lst[min]);\n            if (max == i) {\n             \
    \   max = min;\n            }\n            std::swap(lst[i + 1], lst[max]);\n\
    \        }\n        long max = lst.size() - 1;\n        for (unsigned long i =\
    \ 0; i < lst.size() - 1; i++) {\n            if (lst[i] > lst[max]) {\n      \
    \          max = i;\n            }\n        }\n        std::swap(lst[lst.size()\
    \ - 1], lst[max]);\n    }\n    return lst;", "    std::vector<long> sorted_list;\n\
    \    int n = lst.size();\n    std::sort(lst.begin(), lst.end());\n    int i =\
    \ 0;\n    while(i<n) {\n        sorted_list.push_back(lst[i]);\n        if(i+1<n)\
    \ {\n            sorted_list.push_back(lst[n-i-1]);\n        }\n        i++;\n\
    \    }\n    return sorted_list;", "  std::vector<long> ret;\n  if (lst.size()\
    \ == 0) {\n    return ret;\n  }\n  long minn = *std::min_element(lst.begin(),\
    \ lst.end());\n  long maxx = *std::max_element(lst.begin(), lst.end());\n  bool\
    \ ascend = true;\n  while (ret.size() < lst.size()) {\n    if (ascend) {\n   \
    \   while (std::find(ret.begin(), ret.end(), minn) != ret.end()) {\n        minn++;\n\
    \      }\n      ret.push_back(minn);\n    } else {\n      while (std::find(ret.begin(),\
    \ ret.end(), maxx) != ret.end()) {\n        maxx--;\n      }\n      ret.push_back(maxx);\n\
    \    }\n    ascend = !ascend;\n  }\n  return ret;", "\tstd::vector<long> res;\n\
    \tstd::sort(lst.begin(), lst.end());\n\tfor (size_t i = 0; i < lst.size(); ++i)\
    \ {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(lst[i / 2]);\n\t\t}\n\t\telse\
    \ {\n\t\t\tres.push_back(lst[lst.size() - i / 2 - 1]);\n\t\t}\n\t}\n\treturn res;",
  "\tstd::vector<long> temp(lst.size());\n\tstd::sort(lst.begin(), lst.end());\n\t\
    int j = 0;\n\tfor (int i = 0; i < temp.size(); i++) {\n\t\tif (i % 2 == 0) {\n\
    \t\t\ttemp[i] = lst[j];\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ttemp[i] = lst[lst.size()\
    \ - j];\n\t\t}\n\t}\n\treturn temp;", "    if (lst.size() == 0) {\n        return\
    \ lst;\n    }\n    if (lst.size() == 1) {\n        return lst;\n    }\n    int\
    \ i = 0;\n    int j = 0;\n    bool even = true;\n    std::vector<long> ans;\n\
    \    while (i < lst.size()) {\n        if (even) {\n            int minimum =\
    \ 0;\n            for (int j = 0; j < lst.size(); j++) {\n                if (lst[j]\
    \ != 0) {\n                    minimum = lst[j];\n                    lst[j] =\
    \ 0;\n                    break;\n                }\n            }\n         \
    \   for (int j = 0; j < lst.size(); j++) {\n                if (lst[j] != 0) {\n\
    \                    if (lst[j] < minimum) {\n                        minimum\
    \ = lst[j];\n                        lst[j] = 0;\n                    }\n    \
    \            }\n            }\n            ans.push_back(minimum);\n         \
    \   even = false;\n        } else {\n            int maximum = INT_MIN;\n    \
    \        for (int j = 0; j < lst.size(); j++) {\n                if (lst[j] !=\
    \ 0) {\n                    maximum = lst[j];\n                    lst[j] = 0;\n\
    \                    break;\n                }\n            }\n            for\
    \ (int j = 0; j < lst.size(); j++) {\n                if (lst[j] != 0) {\n   \
    \                 if (lst[j] > maximum) {\n                        maximum = lst[j];\n\
    \                        lst[j] = 0;\n                    }\n                }\n\
    \            }\n            ans.push_back(maximum);\n            even = true;\n\
    \        }\n        i++;\n    }\n    return ans;", "    if (lst.size() == 0) return\
    \ lst;\n    std::sort(lst.begin(), lst.end());\n    int i = 0, j = lst.size()\
    \ - 1;\n    while (i < j) {\n        std::swap(lst[i], lst[j]);\n        i++;\n\
    \        j--;\n    }\n    return lst;", "    int size = lst.size();\n    if (size\
    \ <= 1) return lst;\n    std::vector<long> result;\n    int index = 0;\n    for\
    \ (int i = 0; i < size; i++) {\n        if (i%2 == 0) {\n            result.push_back(std::min(lst[i],\
    \ lst[i+1]));\n            index = std::min(lst[i], lst[i+1]) == lst[i] ? i+1\
    \ : i;\n        } else {\n            result.push_back(std::max(lst[i], lst[i+1]));\n\
    \            index = std::max(lst[i], lst[i+1]) == lst[i] ? i+1 : i;\n       \
    \ }\n    }\n    return result;", "    std::vector<long> ret;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        ret.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         ret.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ ret;", "    // Sorting and removing duplicates.\n    std::sort(lst.begin(),\
    \ lst.end());\n    lst.erase(std::unique(lst.begin(), lst.end()), lst.end());\n\
    \    // Creating two vectors for min and max values.\n    std::vector<long> min_vector;\n\
    \    std::vector<long> max_vector;\n    // Filling min_vector with min values.\n\
    \    for (int i = 0; i < lst.size() / 2; i++) {\n        min_vector.push_back(lst[i]);\n\
    \    }\n    // Filling max_vector with max values.\n    for (int i = lst.size()\
    \ - 1; i >= lst.size() / 2; i--) {\n        max_vector.push_back(lst[i]);\n  \
    \  }\n    // Creating a list for the result.\n    std::vector<long> result;\n\
    \    // Filling the result list with min, max values.\n    for (int i = 0; i <\
    \ min_vector.size(); i++) {\n        result.push_back(min_vector[i]);\n      \
    \  result.push_back(max_vector[i]);\n    }\n    // If the number of elements was\
    \ odd, the last element is a max value,\n    // that's why we are adding it to\
    \ the end of result list.\n    if (lst.size() % 2 == 1) {\n        result.push_back(max_vector[max_vector.size()\
    \ - 1]);\n    }\n    return result;", "  std::vector<long> ret;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   ret.push_back(lst[i]);\n    if (i == j) break;\n    ret.push_back(lst[j]);\n\
    \    i++;\n    j--;\n  }\n  return ret;", "    // Your code here\n\tif(lst.size()<2)\n\
    \t\treturn lst;\n\tstd::vector<long> ans;\n\tint n = lst.size();\n\tint start\
    \ = 0;\n\tfor(int i=0;i<n;i++){\n\t\tif(start == 0){\n\t\t\tlong max = -1;\n\t\
    \t\tfor(int j=0;j<lst.size();j++){\n\t\t\t\tif(lst[j]>max){\n\t\t\t\t\tmax = lst[j];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tans.push_back(max);\n\t\t\tlst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n\t\t\tstart = 1;\n\t\t}\n\t\telse{\n\t\t\tlong\
    \ min = 1000000000;\n\t\t\tfor(int j=0;j<lst.size();j++){\n\t\t\t\tif(lst[j]<min){\n\
    \t\t\t\t\tmin = lst[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tans.push_back(min);\n\t\t\t\
    lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n\t\t\tstart =\
    \ 0;\n\t\t}\n\t}\n\treturn ans;", "\tstd::vector<long> res = lst;\n\tsort(res.begin(),\
    \ res.end());\n\tint n = res.size();\n\tint j = 0;\n\tfor (int i = 1; i < n; i\
    \ += 2) {\n\t\tlst[i] = res[j++];\n\t}\n\tfor (int i = 0; i < n; i += 2) {\n\t\
    \tlst[i] = res[j++];\n\t}\n\treturn lst;", "  std::vector<long> res;\n  int len\
    \ = lst.size();\n  // Your code goes here\n  std::sort(lst.begin(), lst.end());\n\
    \  int j = 1;\n  for (int i = 0; i < len; i += 2) {\n    res.push_back(lst[i]);\n\
    \    if (j < len) {\n      res.push_back(lst[len - j]);\n      j++;\n    }\n \
    \ }\n  return res;", "\tstd::vector<long> res;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tstd::deque<long> d(lst.begin(), lst.end());\n\twhile (d.size() > 0) {\n\t\t\
    res.push_back(d.front());\n\t\td.pop_front();\n\t\tif (d.size() > 0) {\n\t\t\t\
    res.push_back(d.back());\n\t\t\td.pop_back();\n\t\t}\n\t}\n\treturn res;", "\t\
    std::vector<long> ret;\n\tstd::map<long, int> map;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tmap[lst[i]]++;\n\t}\n\tfor (auto kv : map) {\n\t\tfor (int i = 0;\
    \ i < kv.second; i++) {\n\t\t\tret.push_back(kv.first);\n\t\t}\n\t}\n\tint p =\
    \ 0;\n\twhile (p < ret.size()) {\n\t\tif (p + 1 < ret.size()) {\n\t\t\tstd::swap(ret[p],\
    \ ret[p + 1]);\n\t\t\tp += 2;\n\t\t} else {\n\t\t\tp++;\n\t\t}\n\t}\n\treturn\
    \ ret;", "  std::vector<long> result;\n  std::sort(lst.begin(), lst.end());\n\
    \  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n\
    \    if (i != j) {\n      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n\
    \  }\n  return result;", "    std::vector<long> result;\n    int last_index =\
    \ lst.size() - 1;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0;\
    \ i < last_index + 1; i++) {\n        if (i % 2 == 0) {\n            result.push_back(lst[i\
    \ / 2]);\n        } else {\n            result.push_back(lst[last_index - i /\
    \ 2]);\n        }\n    }\n    return result;", "    // declare a vector and an\
    \ iterator for lst\n    std::vector<long> result;\n    std::vector<long>::iterator\
    \ it;\n    // if lst is empty, return empty vector\n    if (lst.empty()) {\n \
    \       return result;\n    }\n    // sort vector\n    std::sort(lst.begin(),\
    \ lst.end());\n    // while lst is not empty, push front and back elements of\
    \ lst to result\n    while (!lst.empty()) {\n        result.push_back(lst.front());\n\
    \        lst.erase(lst.begin());\n        if (!lst.empty()) {\n            result.push_back(lst.back());\n\
    \            lst.pop_back();\n        }\n    }\n    return result;", "\tstd::vector<long>\
    \ vector2;\n\tstd::sort(lst.begin(), lst.end());\n\tint num = 0;\n\tfor (int i\
    \ = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tvector2.push_back(lst[num]);\n\
    \t\t\tnum++;\n\t\t}\n\t\telse {\n\t\t\tvector2.push_back(lst[lst.size() - num]);\n\
    \t\t}\n\t}\n\treturn vector2;", "    int i=0, j=lst.size()-1;\n    std::vector<long>\
    \ res;\n    if(lst.size()>0){\n        std::sort(lst.begin(), lst.end());\n  \
    \      for(int k=0; k<lst.size(); k++){\n            if(k%2==0){\n           \
    \     res.push_back(lst[i]);\n                i++;\n            }\n          \
    \  else{\n                res.push_back(lst[j]);\n                j--;\n     \
    \       }\n        }\n    }\n    return res;", "    bool ascending = true;\n \
    \   std::vector<long> rtn_list;\n    if (lst.size() == 0) {\n        return rtn_list;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (ascending) {\n            rtn_list.push_back(lst[i]);\n\
    \        } else {\n            rtn_list.push_back(lst[lst.size() - i - 1]);\n\
    \        }\n        ascending = !ascending;\n    }\n    return rtn_list;", "\t\
    //your code here\n\tstd::vector<long> v;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tint i = 0;\n\tfor (int k = 0; k < lst.size(); k++) {\n\t\tif (k % 2 == 0) {\n\
    \t\t\tv.push_back(lst[i]);\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tv.push_back(lst[lst.size()\
    \ - i]);\n\t\t}\n\t}\n\treturn v;", "  // your code here\n    std::vector<long>\
    \ v;\n    if(lst.size()==0){\n      return lst;\n    }\n    sort(lst.begin(),lst.end());\n\
    \    v.push_back(lst[0]);\n    for(int i=1;i<lst.size();i++){\n      if(i%2==0){\n\
    \        v.push_back(lst[i]);\n      }\n      else{\n        v.insert(v.begin(),lst[i]);\n\
    \      }\n    }\n    return v;\n", "\tstd::vector<long> result;\n\tif (lst.size()\
    \ == 0)\n\t\treturn result;\n\tauto it = lst.begin();\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tbool min = true;\n\twhile (lst.size() > 0) {\n\t\tit = lst.begin();\n\
    \t\tif (min) {\n\t\t\tresult.push_back(*it);\n\t\t\tlst.erase(it);\n\t\t\tmin\
    \ = false;\n\t\t}\n\t\telse {\n\t\t\tit = lst.end() - 1;\n\t\t\tresult.push_back(*it);\n\
    \t\t\tlst.erase(it);\n\t\t\tmin = true;\n\t\t}\n\t}\n\treturn result;", "\tif\
    \ (lst.size() == 0) {\n\t\treturn lst;\n\t}\n\tlong min_num = lst[0];\n\tlong\
    \ max_num = lst[0];\n\tlong min_idx = 0;\n\tlong max_idx = 0;\n\tfor (int i =\
    \ 0; i < lst.size(); i++) {\n\t\tif (lst[i] < min_num) {\n\t\t\tmin_num = lst[i];\n\
    \t\t\tmin_idx = i;\n\t\t}\n\t\tif (lst[i] > max_num) {\n\t\t\tmax_num = lst[i];\n\
    \t\t\tmax_idx = i;\n\t\t}\n\t}\n\tbool begin = true;\n\tstd::vector<long> sorted_list;\n\
    \tsorted_list.push_back(min_num);\n\tlst.erase(lst.begin() + min_idx);\n\twhile\
    \ (lst.size() > 0) {\n\t\tif (begin) {\n\t\t\tlong max_num = lst[0];\n\t\t\tlong\
    \ max_idx = 0;\n\t\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\t\tif (lst[i]\
    \ > max_num) {\n\t\t\t\t\tmax_num = lst[i];\n\t\t\t\t\tmax_idx = i;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\tsorted_list.push_back(max_num);\n\t\t\tlst.erase(lst.begin()\
    \ + max_idx);\n\t\t\tbegin = false;\n\t\t}\n\t\telse {\n\t\t\tlong min_num = lst[0];\n\
    \t\t\tlong min_idx = 0;\n\t\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\t\t\
    if (lst[i] < min_num) {\n\t\t\t\t\tmin_num = lst[i];\n\t\t\t\t\tmin_idx = i;\n\
    \t\t\t\t}\n\t\t", "\tstd::vector<long> sorted;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tstd::vector<long>::iterator it = lst.begin();\n\tstd::vector<long>::iterator\
    \ rt = lst.end() - 1;\n\twhile (it < rt) {\n\t\tsorted.push_back(*it);\n\t\tsorted.push_back(*rt);\n\
    \t\tit++;\n\t\trt--;\n\t}\n\tif (it == rt) {\n\t\tsorted.push_back(*it);\n\t}\n\
    \treturn sorted;", "  std::vector<long> final;\n  if(lst.size() == 0) return final;\n\
    \  bool addMin = true;\n  bool start = true;\n  int minIdx = 0;\n  int maxIdx\
    \ = 0;\n  long min = lst[0];\n  long max = lst[0];\n  for(int i = 0; i < lst.size();\
    \ i++) {\n    if(start) {\n      if(lst[i] > max) {\n        max = lst[i];\n \
    \       maxIdx = i;\n      }\n      if(lst[i] < min) {\n        min = lst[i];\n\
    \        minIdx = i;\n      }\n    }\n    if(addMin) {\n      final.push_back(min);\n\
    \      lst[minIdx] = LONG_MAX;\n      min = LONG_MAX;\n      addMin = false;\n\
    \      start = false;\n    } else {\n      final.push_back(max);\n      lst[maxIdx]\
    \ = LONG_MIN;\n      max = LONG_MIN;\n      addMin = true;\n    }\n  }\n  return\
    \ final;", "    if (lst.size() < 2) return lst;\n    std::sort(lst.begin(), lst.end());\n\
    \    auto begin = lst.begin();\n    auto end = lst.end() - 1;\n    std::vector<long>\
    \ ans(lst.size());\n    int i = 0;\n    while (begin <= end) {\n        ans[i++]\
    \ = *begin++;\n        if (begin <= end) ans[i++] = *end--;\n    }\n    return\
    \ ans;", "    bool is_increasing = true;\n    for (size_t i = 0; i < lst.size();\
    \ i++) {\n        if (i > 0) {\n            if (is_increasing) {\n           \
    \     if (lst[i] > lst[i - 1]) {\n                    continue;\n            \
    \    } else {\n                    is_increasing = false;\n                }\n\
    \            } else {\n                if (lst[i] < lst[i - 1]) {\n          \
    \          continue;\n                } else {\n                    is_increasing\
    \ = true;\n                }\n            }\n        }\n        if (is_increasing)\
    \ {\n            size_t min_index = i;\n            for (size_t j = i + 1; j <\
    \ lst.size(); j++) {\n                if (lst[j] < lst[min_index]) {\n       \
    \             min_index = j;\n                }\n            }\n            long\
    \ tmp = lst[i];\n            lst[i] = lst[min_index];\n            lst[min_index]\
    \ = tmp;\n        } else {\n            size_t max_index = i;\n            for\
    \ (size_t j = i + 1; j < lst.size(); j++) {\n                if (lst[j] > lst[max_index])\
    \ {\n                    max_index = j;\n                }\n            }\n  \
    \          long tmp = lst[i];\n            lst[i] = lst[max_index];\n        \
    \    lst[max_index] = tmp;\n        }\n    }\n    return lst;", "\tstd::vector<long>\
    \ v;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size();\
    \ i += 2) {\n\t\tv.push_back(lst[i]);\n\t}\n\tfor (int i = lst.size() - 1; i >=\
    \ 0; i -= 2) {\n\t\tv.push_back(lst[i]);\n\t}\n\treturn v;", "    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    long\
    \ min_value = *std::min_element(lst.begin(), lst.end());\n    long max_value =\
    \ *std::max_element(lst.begin(), lst.end());\n    auto it_min = lst.begin();\n\
    \    auto it_max = lst.begin();\n    auto it_mid = lst.begin();\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] == min_value) {\n        \
    \    it_min = lst.begin() + i;\n        }\n        if (lst[i] == max_value) {\n\
    \            it_max = lst.begin() + i;\n        }\n    }\n    if (lst.size() %\
    \ 2 == 0) {\n        it_mid = lst.begin() + lst.size() / 2 - 1;\n    } else {\n\
    \        it_mid = lst.begin() + lst.size() / 2;\n    }\n    long temp = *it_min;\n\
    \    *it_min = *it_mid;\n    *it_mid = temp;\n    if (lst.size() > 1) {\n    \
    \    temp = *it_min;\n        *it_min = *it_max;\n        *it_max = temp;\n  \
    \  }\n    result.push_back(*it_min);\n    if (lst.size() > 1) {\n        result.push_back(*it_max);\n\
    \    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (i != (it_min -\
    \ lst.begin()) && i != (it_max - lst.begin())) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    return result;", "    int i = 0;\n    int sign = 1;\n \
    \   std::vector<long> v = lst;\n    std::sort(v.begin(), v.end());\n    for (auto&\
    \ e : lst) {\n        e = v[i];\n        i += sign;\n        if (i == v.size()\
    \ - 1 || i == 0)\n            sign *= -1;\n    }\n    return lst;", "  std::vector<long>\
    \ ret;\n  std::vector<long> ascend;\n  std::vector<long> descend;\n  if(lst.size()==0)\n\
    \    return lst;\n  ascend = lst;\n  descend = lst;\n  std::sort(ascend.begin(),\
    \ ascend.end());\n  std::sort(descend.begin(), descend.end(), std::greater<int>());\n\
    \  bool asc = true;\n  while(!ascend.empty() || !descend.empty()){\n    if(asc){\n\
    \      ret.push_back(ascend.front());\n      ascend.erase(ascend.begin());\n \
    \   }\n    else{\n      ret.push_back(descend.front());\n      descend.erase(descend.begin());\n\
    \    }\n    asc = !asc;\n  }\n  return ret;", "    std::vector<long> strange_sorted;\n\
    \    if (lst.size() == 0) {\n        return strange_sorted;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int idx = 0;\n    while (idx < lst.size()) {\n        strange_sorted.push_back(lst[idx]);\n\
    \        if (idx + 1 < lst.size()) {\n            strange_sorted.push_back(lst[lst.size()\
    \ - 1 - idx]);\n        }\n        idx++;\n    }\n    return strange_sorted;",
  "  if (lst.size() <= 2) return lst;\n  // Sort the list, of course there are better\
    \ sorting algorithms, but this works\n  // since we don't expect a huge list.\n\
    \  std::sort(lst.begin(), lst.end());\n  // Reverse the tail from the index of\
    \ the element that is the average of the\n  // first and last element in the list.\n\
    \  std::reverse(lst.begin() + lst.size() / 2, lst.end());\n  return lst;", " \
    \ if (lst.size() <= 2) {\n    return lst;\n  }\n  std::vector<long> res;\n  int\
    \ count = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (count % 2 == 0)\
    \ {\n      res.push_back(lst[i]);\n    } else {\n      res.insert(res.begin(),\
    \ lst[i]);\n    }\n    count++;\n  }\n  return res;", "    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int n = lst.size();\n    int i =\
    \ 0;\n    int j = n - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n\
    \            j--;\n        }\n    }\n    return result;", "\tstd::vector<long>\
    \ output(lst.size());\n\t//trying to use  a queue\n\tstd::queue<long> q(lst.begin(),\
    \ lst.end());\n\t//making a bool to check if the min or max has been removed from\
    \ the queue\n\tbool minMaxUsed = false;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tif (minMaxUsed == false) {\n\t\t\toutput[i] = *std::min_element(q.begin(),\
    \ q.end());\n\t\t\tq.erase(std::remove(q.begin(), q.end(), output[i]), q.end());\n\
    \t\t\tminMaxUsed = true;\n\t\t}\n\t\telse {\n\t\t\toutput[i] = *std::max_element(q.begin(),\
    \ q.end());\n\t\t\tq.erase(std::remove(q.begin(), q.end(), output[i]), q.end());\n\
    \t\t\tminMaxUsed = false;\n\t\t}\n\t}\n\treturn output;", "\tif (lst.size() ==\
    \ 0)\n\t\treturn lst;\n\tlong min = *std::min_element(lst.begin(), lst.end());\n\
    \tlong max = *std::max_element(lst.begin(), lst.end());\n\tstd::vector<long> res{\
    \ min };\n\tbool asc = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\
    \tif (asc) {\n\t\t\tmax = *std::max_element(lst.begin(), lst.end());\n\t\t\tres.push_back(max);\n\
    \t\t\tauto pos = std::find(lst.begin(), lst.end(), max);\n\t\t\t*pos = -1;\n\t\
    \t\tasc = false;\n\t\t}\n\t\telse {\n\t\t\tmin = *std::min_element(lst.begin(),\
    \ lst.end());\n\t\t\tres.push_back(min);\n\t\t\tauto pos = std::find(lst.begin(),\
    \ lst.end(), min);\n\t\t\t*pos = -1;\n\t\t\tasc = true;\n\t\t}\n\t}\n\treturn\
    \ res;", "   if(lst.size() < 2)\n      return lst;\n   std::sort(lst.begin(),\
    \ lst.end());\n   std::vector<long> res(lst.size());\n   int i = 0, j = res.size()\
    \ - 1;\n   for(int x = 0; x < res.size(); x++){\n      if(x % 2 == 0)\n      \
    \   res[x] = lst[i++];\n      else\n         res[x] = lst[j--];\n   }\n   return\
    \ res;", "  std::vector<long> new_list;\n  if(lst.size() == 0) return new_list;\n\
    \  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  for(; i < lst.size() -\
    \ 1; i += 2) {\n    new_list.push_back(lst[i]);\n    new_list.push_back(lst[lst.size()\
    \ - 1 - i]);\n  }\n  if(i == lst.size() - 1) new_list.push_back(lst[i]);\n  return\
    \ new_list;", "    bool ascending;\n    std::vector<long> result;\n    if (lst.size()\
    \ == 0) {\n        return result;\n    }\n    ascending = true;\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (ascending)\
    \ {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[lst.size()\
    \ - i - 1]);\n        }\n        ascending = !ascending;\n    }\n    return result;",
  "  std::vector<long> result;\n  std::vector<long> temp;\n  std::copy(lst.begin(),\
    \ lst.end(), std::back_inserter(temp));\n  std::sort(temp.begin(), temp.end());\n\
    \  int i = 0;\n  while(temp.size() != 0) {\n    if(i % 2 == 0) {\n      result.push_back(temp.front());\n\
    \      temp.erase(temp.begin());\n    } else {\n      result.push_back(temp.back());\n\
    \      temp.pop_back();\n    }\n    i++;\n  }\n  return result;", "    if (lst.size()\
    \ <= 1) return lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ ans(lst.size());\n    bool left = true;\n    int i = 0, j = 0;\n    while (i\
    \ < lst.size()) {\n        if (left) {\n            ans[i] = lst[j];\n       \
    \     left = false;\n        } else {\n            ans[i] = lst[lst.size() - j\
    \ - 1];\n            left = true;\n            j++;\n        }\n        i++;\n\
    \    }\n    return ans;", "    if (lst.size() == 0) return lst;\n    std::vector<long>\
    \ res;\n    bool flag = true;\n    while (lst.size() != 0) {\n        long mn\
    \ = *std::min_element(lst.begin(), lst.end());\n        res.push_back(mn);\n \
    \       lst.erase(std::find(lst.begin(), lst.end(), mn));\n        if (lst.size()\
    \ == 0) break;\n        long mx = *std::max_element(lst.begin(), lst.end());\n\
    \        res.push_back(mx);\n        lst.erase(std::find(lst.begin(), lst.end(),\
    \ mx));\n    }\n    return res;", "\t// Sort lst first, then create new vector,\
    \ then start adding to\n\t// the new vector starting with min val, max val, min\
    \ val, max val...\n\tstd::vector<long>::iterator it;\n\tstd::vector<long> sorted_lst;\n\
    \tif (lst.size() == 0)\n\t\treturn sorted_lst;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tfor (it = lst.begin(); it != lst.end(); ++it) {\n\t\tsorted_lst.push_back(*it);\n\
    \t}\n\tstd::vector<long> finished_lst;\n\tint sign = 1;\n\tfor (int i = 0; i <\
    \ sorted_lst.size(); i++) {\n\t\tfinished_lst.push_back(sorted_lst[sign * i]);\n\
    \t\tsign *= -1;\n\t}\n\treturn finished_lst;", "    // Don't use assert(lst.size()\
    \ >= 0)\n    if (lst.size() == 0) {\n        return lst;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size() / 2; i++) {\n        if (lst.size()\
    \ % 2 == 0 && i == lst.size() / 2 - 1) {\n            break;\n        }\n    \
    \    std::swap(lst[i], lst[lst.size() - i - 1]);\n    }\n    return lst;", " \
    \ std::vector<long> vec;\n  if (lst.size() == 0) {\n    return vec;\n  }\n  if\
    \ (lst.size() == 1) {\n    return lst;\n  }\n  int cur = 0;\n  for (long i = 0;\
    \ i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      int min = cur;\n      for\
    \ (int j = cur; j < lst.size(); j++) {\n        if (lst[j] < lst[min]) {\n   \
    \       min = j;\n        }\n      }\n      vec.push_back(lst[min]);\n      lst[min]\
    \ = lst[cur];\n      lst[cur] = vec[i];\n      cur++;\n    } else {\n      int\
    \ max = cur;\n      for (int j = cur; j < lst.size(); j++) {\n        if (lst[j]\
    \ > lst[max]) {\n          max = j;\n        }\n      }\n      vec.push_back(lst[max]);\n\
    \      lst[max] = lst[cur];\n      lst[cur] = vec[i];\n      cur++;\n    }\n \
    \ }\n  return vec;", "\t//your code here\n\tstd::vector<long> sortedLst;\n\tstd::vector<long>\
    \ copyLst;\n\tstd::vector<long> min_max;\n\tbool isMin = true;\n\tstd::cout <<\
    \ \"list received\\n\";\n\tfor (auto num : lst)\n\t\tstd::cout << num << \" \"\
    ;\n\tstd::cout << \"\\n\";\n\tif (lst.size() == 0)\n\t\treturn lst;\n\tlong min\
    \ = lst[0];\n\tlong max = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\
    \tif (lst[i] < min)\n\t\t\tmin = lst[i];\n\t\tif (lst[i] > max)\n\t\t\tmax = lst[i];\n\
    \t}\n\tstd::cout << \"min is \" << min << \" and max is \" << max << \"\\n\";\n\
    \tsortedLst.push_back(min);\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif\
    \ (lst[i] != min)\n\t\t\tcopyLst.push_back(lst[i]);\n\t}\n\tstd::cout << \"size\
    \ of copy list is \" << copyLst.size() << \"\\n\";\n\tif (copyLst.size() == 0)\n\
    \t\treturn sortedLst;\n\twhile (copyLst.size() > 0) {\n\t\tif (isMin) {\n\t\t\t\
    min = copyLst[0];\n\t\t\tfor (int i = 0; i < copyLst.size(); i++) {\n\t\t\t\t\
    if (copyLst[i] < min)\n\t\t\t\t\tmin = copyLst[i];\n\t\t\t}\n\t\t\tstd::cout <<\
    \ \"min is \" << min << \"\\n\";\n\t\t\tsortedLst.push_back(min);\n\t\t\tfor (int\
    \ i = 0; i < copyLst.size(); i++) {\n\t\t\t\tif (copyLst[i] == min) {\n\t\t\t\t\
    \t", "\tstd::vector<long> result;\n\tstd::sort(lst.begin(), lst.end());\n\t//\
    \ TODO: add your code here\n\tstd::cout << \"lst is: \";\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tstd::cout << lst[i] << \" \";\n\t}\n\tstd::cout <<\
    \ std::endl;\n\tbool flag = true;\n\tint cnt = lst.size();\n\twhile (cnt--) {\n\
    \t\tif (flag) {\n\t\t\tresult.push_back(lst[0]);\n\t\t\tlst.erase(lst.begin());\n\
    \t\t}\n\t\telse {\n\t\t\tresult.push_back(lst[lst.size() - 1]);\n\t\t\tlst.erase(lst.end()\
    \ - 1);\n\t\t}\n\t\tflag = !flag;\n\t}\n\treturn result;", "  long n = lst.size();\n\
    \  if (n == 0) {\n    return lst;\n  }\n  if (n == 1) {\n    return lst;\n  }\n\
    \  // Sort the list and store it in temp\n  std::sort(lst.begin(), lst.end());\n\
    \  // int temp = 0;\n  // std::vector<long> ans;\n  // std::vector<long>::iterator\
    \ itr1, itr2;\n  // if (n % 2 == 0) {\n  //   // even\n  //   itr1 = lst.begin();\n\
    \  //   itr2 = lst.end() - 1;\n  //   while (itr1 != itr2) {\n  //     ans.push_back(*itr1);\n\
    \  //     itr1++;\n  //     ans.push_back(*itr2);\n  //     itr2--;\n  //   }\n\
    \  //   if (itr1 == itr2) {\n  //     ans.push_back(*itr1);\n  //   }\n  // }\
    \ else {\n  //   // odd\n  //   itr1 = lst.begin();\n  //   itr2 = lst.end() -\
    \ 1;\n  //   while (itr1 != itr2) {\n  //     ans.push_back(*itr1);\n  //    \
    \ itr1++;\n  //     ans.push_back(*itr2);\n  //     itr2--;\n  //   }\n  //  \
    \ if (itr1 == itr2) {\n  //     ans.push_back(*itr1);\n  //   }\n  // }\n  //\
    \ return ans;\n  std::vector<long> odd, even;\n  for (int i = 0; i < n; i++) {\n\
    \    if (i % 2 == 0) {\n      even.push_back(lst[i]);\n    } else {\n      odd.push_back(lst[i]);\n\
    \    }\n  }\n  reverse(odd.begin(), odd.end());\n  even.insert(even.end(), odd.begin(),\
    \ odd.end", "    std::vector<long> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int j = 0;\n    int k = lst.size() - 1;\n    while (j <= k) {\n        result.push_back(lst[j]);\n\
    \        j++;\n        if (j <= k) {\n            result.push_back(lst[k]);\n\
    \            k--;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    int length = lst.size();\n    if (length == 0) {\n        return\
    \ result;\n    }\n    else if (length == 1) {\n        result.push_back(lst[0]);\n\
    \        return result;\n    }\n    else {\n        int minPos = 0;\n        for\
    \ (int i = 0; i < length; i++) {\n            if (lst[i] < lst[minPos]) {\n  \
    \              minPos = i;\n            }\n        }\n        result.push_back(lst[minPos]);\n\
    \        lst.erase(lst.begin() + minPos);\n        int maxPos = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (lst[i] > lst[maxPos]) {\n\
    \                maxPos = i;\n            }\n        }\n        result.push_back(lst[maxPos]);\n\
    \        lst.erase(lst.begin() + maxPos);\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            result.push_back(lst[i]);\n        }\n        return result;\n\
    \    }", "\tstd::vector<long> res;\n\tstd::sort(lst.begin(), lst.end());\n\tint\
    \ n = lst.size();\n\tint a = 0, b = n - 1;\n\twhile (a <= b) {\n\t\tres.push_back(lst[a]);\n\
    \t\tif (a == b)\n\t\t\tbreak;\n\t\tres.push_back(lst[b]);\n\t\ta++;\n\t\tb--;\n\
    \t}\n\treturn res;", "    std::vector<long> ret;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    while (i < lst.size()) {\n        ret.push_back(lst[i]);\n\
    \        i++;\n        if (i < lst.size()) {\n            ret.push_back(lst[lst.size()\
    \ - i]);\n            i++;\n        }\n    }\n    return ret;", "    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    else {\n        std::vector<long> sorted(lst.size());\n\
    \        std::sort(lst.begin(), lst.end());\n        int i = 0;\n        int j\
    \ = lst.size() - 1;\n        for (auto n : lst) {\n            if (i < j) {\n\
    \                sorted[i] = lst[i];\n                sorted[j] = lst[j];\n  \
    \              i++;\n                j--;\n            }\n            else {\n\
    \                sorted[i] = lst[i];\n            }\n        }\n        return\
    \ sorted;\n    }", "\tint i = 0;\n\twhile (i < lst.size()) {\n\t\tint min = lst[i];\n\
    \t\tint max = lst[i];\n\t\tint max_i = i;\n\t\tint min_i = i;\n\t\twhile (i <\
    \ lst.size() && lst[i] <= max) {\n\t\t\tif (lst[i] < min) {\n\t\t\t\tmin = lst[i];\n\
    \t\t\t\tmin_i = i;\n\t\t\t}\n\t\t\tif (lst[i] > max) {\n\t\t\t\tmax = lst[i];\n\
    \t\t\t\tmax_i = i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tlong temp = lst[min_i];\n\t\
    \tlst[min_i] = lst[max_i];\n\t\tlst[max_i] = temp;\n\t}\n\treturn lst;", "\tif\
    \ (lst.size() == 0)\n\t\treturn lst;\n\tstd::vector<long> list;\n\tint i = 0;\n\
    \twhile (lst.size() != 0) {\n\t\tif (i % 2 == 0) {\n\t\t\tlist.push_back(*std::min_element(lst.begin(),\
    \ lst.end()));\n\t\t\tlst.erase(std::min_element(lst.begin(), lst.end()));\n\t\
    \t}\n\t\telse {\n\t\t\tlist.push_back(*std::max_element(lst.begin(), lst.end()));\n\
    \t\t\tlst.erase(std::max_element(lst.begin(), lst.end()));\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn list;", "    std::vector<long> lst1;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n     \
    \       lst1.push_back(lst[i / 2]);\n        } else {\n            lst1.push_back(lst[lst.size()\
    \ - (i / 2) - 1]);\n        }\n    }\n    return lst1;", "    std::vector<long>\
    \ ret;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> minv;\n\
    \    std::vector<long> maxv;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     if (i%2 == 0) {\n            minv.push_back(lst[i]);\n        } else {\n\
    \            maxv.push_back(lst[i]);\n        }\n    }\n    std::reverse(maxv.begin(),\
    \ maxv.end());\n    for (int i = 0; i < minv.size(); i++) {\n        ret.push_back(minv[i]);\n\
    \    }\n    for (int i = 0; i < maxv.size(); i++) {\n        ret.push_back(maxv[i]);\n\
    \    }\n    return ret;", "  std::vector<long> result;\n  bool is_max;\n  int\
    \ val, i;\n  // Checking if the vector is empty\n  if (lst.size() == 0)\n    return\
    \ lst;\n  // If there is only one element in the vector\n  if (lst.size() == 1)\
    \ {\n    result.push_back(lst[0]);\n    return result;\n  }\n  result.push_back(lst[0]);\n\
    \  is_max = false;\n  std::sort(lst.begin(), lst.end());\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    if (is_max) {\n      result.push_back(lst[lst.size()\
    \ - i - 1]);\n      is_max = false;\n    } else {\n      result.push_back(lst[i]);\n\
    \      is_max = true;\n    }\n  }\n  return result;", "    if (lst.size() == 0)\
    \ return lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> ret(lst.size());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        ret[i] = lst[i];\n    }\n\
    \    for (int i = 1; i < lst.size(); i += 2) {\n        ret[i] = lst[lst.size()\
    \ - i / 2 - 1];\n    }\n    return ret;", "  std::vector<long> ans;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int n = lst.size();\n  int mid = n / 2;\n  int i = mid - 1;\n\
    \  int j = n - 1;\n  while (i >= 0) {\n    ans.push_back(lst[i]);\n    if (i !=\
    \ j) {\n      ans.push_back(lst[j]);\n    }\n    i--;\n    j--;\n  }\n  return\
    \ ans;", "  std::vector<long> res;\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n  std::priority_queue<long, std::vector<long>,\
    \ std::less<long>> max_heap;\n  for (long i : lst) {\n    if (min_heap.empty())\
    \ {\n      min_heap.push(i);\n    } else if (max_heap.empty()) {\n      max_heap.push(i);\n\
    \    } else {\n      if (i < min_heap.top()) {\n        min_heap.push(i);\n  \
    \    } else {\n        max_heap.push(i);\n      }\n    }\n  }\n  while (!min_heap.empty()\
    \ || !max_heap.empty()) {\n    if (!min_heap.empty()) {\n      res.push_back(min_heap.top());\n\
    \      min_heap.pop();\n    }\n    if (!max_heap.empty()) {\n      res.push_back(max_heap.top());\n\
    \      max_heap.pop();\n    }\n  }\n  return res;", "    \n    vector<long> l;\n\
    \    vector<long> u;\n    vector<long>::iterator it1;\n    vector<long>::iterator\
    \ it2;\n    long min = *min_element(lst.begin(), lst.end());\n    long max = *max_element(lst.begin(),\
    \ lst.end());\n    long a = 1;\n    long b = -1;\n    long c = 1;\n    long d\
    \ = -1;\n    //cout << min;\n    //cout << max;\n    while(min != max)\n    {\n\
    \        //cout << \"a\" << a << \"b\" << b << \"c\" << c << \"d\" << d << endl;\n\
    \        if(b == 1)\n        {\n            l.push_back(min);\n            for(it1\
    \ = lst.begin(); it1 != lst.end(); it1++)\n            {\n                if(*it1\
    \ == min)\n                {\n                    it1 = lst.erase(it1);\n    \
    \                break;\n                }\n            }\n            //lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n            b = -1;\n            a = 1;\n    \
    \    }\n        else if(d == 1)\n        {\n            l.push_back(max);\n  \
    \          for(it1 = lst.begin(); it1 != lst.end(); it1++)\n            {\n  \
    \              if(*it1 == max)\n                {\n                    it1 = lst.erase(it1);\n\
    \                    break;\n                }\n            }\n            //lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n            b = 1;\n            d = -1;\n    \
    \    }\n        if(a == 1)\n        {\n            min = *min_element(lst.begin(),\
    \ lst.end());\n            a = -1;\n            c = 1;\n        }\n        else\
    \ if(c == 1)\n        {\n            max = *max_element(lst.begin(), lst.end());\n\
    \            c = -1", "  std::vector<long> result;\n  long curr = *std::min_element(lst.begin(),\
    \ lst.end());\n  while(lst.size() > 0) {\n    result.push_back(curr);\n    auto\
    \ it = std::find(lst.begin(), lst.end(), curr);\n    lst.erase(it);\n    curr\
    \ = lst.size() % 2 == 0 ?\n      *std::min_element(lst.begin(), lst.end()) :\n\
    \      *std::max_element(lst.begin(), lst.end());\n  }\n  return result;", " \
    \   if (lst.size()<2) return lst;\n    std::sort(lst.begin(), lst.end());\n  \
    \  std::vector<long> result(lst.size());\n    int i = 0;\n    long j = 0;\n  \
    \  for (; j<lst.size()/2; j++) {\n        result[i] = lst[j];\n        i+=2;\n\
    \    }\n    i = 1;\n    for (; j<lst.size(); j++) {\n        result[i] = lst[j];\n\
    \        i+=2;\n    }\n    return result;", "    // your code here\n    std::vector<long>\
    \ result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ minHeap;\n    std::priority_queue<long, std::vector<long>, std::less<long>>\
    \ maxHeap;\n    for(auto item : lst) {\n        minHeap.push(item);\n        maxHeap.push(item);\n\
    \    }\n    while(!minHeap.empty() || !maxHeap.empty()) {\n        if(!minHeap.empty())\
    \ {\n            result.push_back(minHeap.top());\n            minHeap.pop();\n\
    \        }\n        if(!maxHeap.empty()) {\n            result.push_back(maxHeap.top());\n\
    \            maxHeap.pop();\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ret;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            ret.push_back(lst[i / 2]);\n\
    \        } else {\n            ret.push_back(lst[lst.size() - i / 2 - 1]);\n \
    \       }\n    }\n    return ret;", "\tstd::vector<long> res(lst.size());\n\t\
    if(lst.size()==0)return res;\n\tsort(lst.begin(),lst.end());\n\t// for(int i=0;i<lst.size();i++)\n\
    \t// \tcout<<lst[i]<<\" \";\n\t// cout<<endl;\n\tint n=lst.size();\n\tint i=0,j=n-1;\n\
    \tbool even=true;\n\tint cnt=0;\n\twhile(1){\n\t\tif(even){\n\t\t\tif(cnt==n)break;\n\
    \t\t\tres[cnt++]=lst[i++];\n\t\t\teven=false;\n\t\t}\n\t\telse{\n\t\t\tif(cnt==n)break;\n\
    \t\t\tres[cnt++]=lst[j--];\n\t\t\teven=true;\n\t\t}\n\t}\n\treturn res;", "  //\
    \ your code here\n  std::vector<long> ans;\n  std::vector<long> r{lst};\n  std::vector<long>\
    \ l;\n  sort(r.begin(), r.end());\n  // std::reverse(r.begin(), r.end());\n  while(r.size()\
    \ != 0) {\n    ans.push_back(r[0]);\n    r.erase(r.begin());\n    if(r.size()\
    \ != 0) {\n      ans.push_back(r[r.size()-1]);\n      r.erase(r.begin()+r.size()-1);\n\
    \    }\n  }\n  return ans;", "\t\tfor(int i=0;i<lst.size();i++)\n\t\t\tcout<<lst[i]<<\"\
    \ \";\n\t\tcout<<endl;\n\t\tstd::vector<long> a;\n\t\tstd::vector<long>::iterator\
    \ it;\n\t\tfor(it=lst.begin();it!=lst.end();it++)\n\t\t\tif(*it<=*(lst.begin()))\n\
    \t\t\t\ta.push_back(*it);\n\t\tfor(it=lst.begin();it!=lst.end();it++)\n\t\t\t\
    if(*it>*(lst.begin()))\n\t\t\t\ta.push_back(*it);\n\t\tlst=a;\n\t\tfor(int i=0;i<lst.size();i++)\n\
    \t\t\tcout<<lst[i]<<\" \";\n\t\tcout<<endl;\n\t\tfor(int i=0;i<lst.size()-1;i+=2)\n\
    \t\t{\n\t\t\tcout<<\"lst[i]=\"<<lst[i]<<\"\\tlst[i+1]=\"<<lst[i+1]<<endl;\n\t\t\
    \tif(lst[i]>lst[i+1])\n\t\t\t{\n\t\t\t\tint temp=lst[i];\n\t\t\t\tlst[i]=lst[i+1];\n\
    \t\t\t\tlst[i+1]=temp;\n\t\t\t}\n\t\t}\n\t\treturn lst;", "  if (lst.size() %\
    \ 2 != 0) {\n    return lst;\n  }\n  std::vector<long> odd, even;\n  for (long\
    \ i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      even.push_back(lst[i]);\n\
    \    } else {\n      odd.push_back(lst[i]);\n    }\n  }\n  std::vector<long> result;\n\
    \  std::sort(even.begin(), even.end());\n  std::sort(odd.begin(), odd.end());\n\
    \  for (long i = 0; i < even.size(); i++) {\n    result.push_back(even[i]);\n\
    \    result.push_back(odd[i]);\n  }\n  return result;", "  std::vector<long> v\
    \ {};\n  std::sort(lst.begin(), lst.end());\n  for (int i = 0; i < lst.size();\
    \ i+=2) {\n    v.push_back(lst[i]);\n  }\n  for (int i = lst.size() - 1; i >=\
    \ 0; i-=2) {\n    v.push_back(lst[i]);\n  }\n  return v;", "    // your code here...\n\
    \    std::vector<long> v;\n    if(lst.size() == 0) return v;\n    int m = lst[0];\n\
    \    for(auto i : lst) m = min(m, i);\n    v.push_back(m);\n    for(auto i : lst)\
    \ if(i != m) v.push_back(i);\n    return v;", "\tlong n = lst.size();\n\tstd::vector<long>\
    \ ans(n);\n\tsort(lst.begin(), lst.end());\n\tint i = 0, j = n - 1;\n\tint k =\
    \ 0;\n\twhile (i <= j) {\n\t\tans[k++] = lst[i++];\n\t\tif (i <= j)\n\t\t\tans[k++]\
    \ = lst[j--];\n\t}\n\treturn ans;", "    // write code here\n    std::vector<long>\
    \ ans;\n    int n = lst.size();\n    if(n == 0) return ans;\n    if(n == 1) {\n\
    \        ans.push_back(lst[0]);\n        return ans;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0, j = n - 1;\n    while(i <= j) {\n        ans.push_back(lst[i]);\n\
    \        if(i != j) ans.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return ans;", "    auto originalSize = lst.size();\n    if(originalSize ==\
    \ 0) {\n        return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n \
    \   auto start = lst.begin();\n    auto end = lst.end() - 1;\n    std::vector<long>\
    \ result;\n    while(result.size() < originalSize) {\n        if(start < end)\
    \ {\n            result.push_back(*start);\n            start++;\n        }\n\
    \        if(start < end) {\n            result.push_back(*end);\n            end--;\n\
    \        }\n    }\n    if(start == end) {\n        result.push_back(*start);\n\
    \    }\n    return result;", "  if (lst.size() == 0) {\n    return lst;\n  }\n\
    \  if (lst.size() == 1) {\n    return lst;\n  }\n  bool is_even = false;\n  std::vector<long>\
    \ results;\n  if (lst.size()%2 == 0) {\n    is_even = true;\n  }\n  std::vector<long>\
    \ asc;\n  std::vector<long> dsc;\n  std::sort(lst.begin(), lst.end());\n  int\
    \ asc_index = 0;\n  int dsc_index = lst.size()-1;\n  for (long i=0; i<lst.size();\
    \ i++) {\n    if (i%2 == 0) {\n      asc.push_back(lst[asc_index]);\n      asc_index++;\n\
    \    } else {\n      dsc.push_back(lst[dsc_index]);\n      dsc_index--;\n    }\n\
    \  }\n  if (is_even) {\n    std::reverse(dsc.begin(), dsc.end());\n  }\n  for\
    \ (long i=0; i<asc.size(); i++) {\n    results.push_back(asc[i]);\n  }\n  for\
    \ (long i=0; i<dsc.size(); i++) {\n    results.push_back(dsc[i]);\n  }\n  return\
    \ results;", "  // your code here\n  if(lst.size() == 0){\n    return lst;\n \
    \ }\n  sort(lst.begin(), lst.end());\n  int k = 0;\n  int n = lst.size();\n  std::vector<long>\
    \ res;\n  for(int i = 0; i < n; i++){\n    if(k%2==0){\n      res.push_back(lst[i]);\n\
    \    }\n    else{\n      res.insert(res.begin(), lst[i]);\n    }\n    k++;\n \
    \ }\n  return res;", "  std::vector<long> res;\n  int i = 0;\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int j = 0; j < lst.size(); j++) {\n    if (j % 2 == 0) {\n\
    \      res.push_back(lst[i]);\n      i++;\n    } else {\n      res.push_back(lst[lst.size()\
    \ - i]);\n    }\n  }\n  return res;", "  std::vector<long> sorted = lst;\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  int num_min = 1;\n  int num_max = sorted.size() - 1;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      lst[i] = sorted[num_min];\n\
    \      num_min++;\n    } else {\n      lst[i] = sorted[num_max];\n      num_max--;\n\
    \    }\n  }\n  return lst;", "    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int flag = 0;\n    long min = INT_MAX;\n    while(lst.size()>0){\n\
    \        if(flag==0){\n            result.push_back(lst[0]);\n            lst.erase(lst.begin());\n\
    \            flag = 1;\n        }\n        else{\n            for(int i=0; i<lst.size();\
    \ i++){\n                if(lst[i]>min){\n                    result.push_back(lst[i]);\n\
    \                    min = lst[i];\n                    lst.erase(lst.begin()+i);\n\
    \                    flag = 0;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return result;", "    if (lst.size() ==\
    \ 0) return lst;\n    std::vector<long> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int start = 0;\n    int end = lst.size() - 1;\n    while (start <= end) {\n\
    \        result.push_back(lst[start]);\n        if (start == end) break;\n   \
    \     result.push_back(lst[end]);\n        start++;\n        end--;\n    }\n \
    \   return result;", "  std::vector<long> ans;\n  if(lst.size()==0)\n  {\n   \
    \   return ans;\n  }\n  std::sort(lst.begin(),lst.end());\n  int i=0;\n  int j=lst.size()-1;\n\
    \  for(int k=0;k<lst.size();k++)\n  {\n      if(k%2==0)\n      {\n          ans.push_back(lst[i]);\n\
    \          i++;\n      }\n      else\n      {\n          ans.push_back(lst[j]);\n\
    \          j--;\n      }\n  }\n  return ans;", "    // Find out the minimum value\
    \ in list.\n    // From that point start to add elements in sort list.\n    if\
    \ (lst.size() == 0)\n        return lst;\n    long min = lst[0];\n    size_t min_idx\
    \ = 0;\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            min = lst[i];\n            min_idx = i;\n        }\n    }\n \
    \   std::vector<long> sorted_list = {min};\n    // Go to right of minimum.\n \
    \   bool right = true;\n    size_t idx = min_idx + 1;\n    while (idx < lst.size())\
    \ {\n        if (right) {\n            sorted_list.push_back(lst[idx]);\n    \
    \        idx++;\n        } else {\n            sorted_list.push_back(lst[idx]);\n\
    \            idx--;\n        }\n        right = !right;\n    }\n    // Go to left\
    \ of minimum.\n    right = false;\n    idx = min_idx - 1;\n    while (idx >= 0)\
    \ {\n        if (right) {\n            sorted_list.push_back(lst[idx]);\n    \
    \        idx++;\n        } else {\n            sorted_list.push_back(lst[idx]);\n\
    \            idx--;\n        }\n        right = !right;\n    }\n    return sorted_list;",
  "  //your code here\n  if(lst.size()==0)\n    return lst;\n  int flag;\n  std::vector<long>\
    \ lstt;\n  long minm,maxm;\n  minm=maxm=lst[0];\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    if(lst[i]<minm)\n      minm=lst[i];\n    if(lst[i]>maxm)\n      maxm=lst[i];\n\
    \  }\n  if(minm==maxm)\n    return lst;\n  for(int i=0;i<lst.size();i++)\n  {\n\
    \    if(i%2==0)\n    {\n      flag=0;\n      for(int j=0;j<lst.size();j++)\n \
    \     {\n        if(lst[j]==minm)\n        {\n          lstt.push_back(lst[j]);\n\
    \          lst[j]=INT_MAX;\n          flag=1;\n          break;\n        }\n \
    \     }\n      if(flag==0)\n      {\n        flag=0;\n        for(int j=0;j<lst.size();j++)\n\
    \        {\n          if(lst[j]==maxm)\n          {\n            lstt.push_back(lst[j]);\n\
    \            lst[j]=INT_MAX;\n            flag=1;\n            break;\n      \
    \    }\n        }\n      }\n    }\n    else\n    {\n      flag=0;\n      for(int\
    \ j=0;j<lst.size();j++)\n      {\n        if(lst[j]==maxm)\n        {\n      \
    \    lstt.push_back(lst[j]);\n          lst[j]=INT_MAX;\n          flag=1;\n \
    \         break;\n        }\n      }\n      if(flag==0)\n      {\n        flag=0;\n\
    \        for(int j=0;j<lst.size();j++)\n        {\n          if(lst[j]==minm)",
  "  std::vector<long> result;\n  if (lst.size() == 0) {\n    return result;\n  }\n\
    \  else if (lst.size() == 1) {\n    result.push_back(lst[0]);\n    return result;\n\
    \  }\n  else {\n    auto minMax = std::minmax_element(lst.begin(), lst.end());\n\
    \    int min = *minMax.first;\n    int max = *minMax.second;\n    result.push_back(min);\n\
    \    result.push_back(max);\n    std::vector<long> remaining;\n    if (lst.size()\
    \ == 2) {\n      return result;\n    }\n    else {\n      for (int i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] != min && lst[i] != max) {\n        \
    \  remaining.push_back(lst[i]);\n        }\n      }\n      result.insert(result.end(),\
    \ strange_sort_list(remaining).begin(), strange_sort_list(remaining).end());\n\
    \      return result;\n    }\n  }", "    std::vector<long> result;\n    if (lst.size()\
    \ < 2) return lst;\n    std::vector<long>::iterator start = lst.begin();\n   \
    \ std::vector<long>::iterator end = lst.end();\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            result.push_back(*std::min_element(start,\
    \ end));\n            start = std::find(start, end, *std::min_element(start, end));\n\
    \        } else {\n            result.push_back(*std::max_element(start, end));\n\
    \            start = std::find(start, end, *std::max_element(start, end));\n \
    \       }\n        start++;\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long min = lst[0];\n    long max = lst[lst.size() - 1];\n \
    \   long i = 0;\n    while (i < lst.size()) {\n        if (i % 2 == 0) {\n   \
    \         result.push_back(min);\n            min++;\n        } else {\n     \
    \       result.push_back(max);\n            max--;\n        }\n        i++;\n\
    \    }\n    return result;", "    if (lst.size() <= 1) {\n        return lst;\n\
    \    }\n    std::vector<long> new_lst;\n    std::vector<long> remaining_lst;\n\
    \    auto min_val = std::min_element(lst.begin(), lst.end());\n    auto max_val\
    \ = std::max_element(lst.begin(), lst.end());\n    new_lst.push_back(*min_val);\n\
    \    if (*min_val != *max_val) {\n        new_lst.push_back(*max_val);\n    }\n\
    \    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (*it !=\
    \ *min_val && *it != *max_val) {\n            remaining_lst.push_back(*it);\n\
    \        }\n    }\n    for (auto it = strange_sort_list(remaining_lst).begin();\
    \ it != strange_sort_list(remaining_lst).end(); ++it) {\n        new_lst.push_back(*it);\n\
    \    }\n    return new_lst;", "\tstd::vector<long> sortedList = lst;\n\tstd::sort(sortedList.begin(),\
    \ sortedList.end());\n\tstd::vector<long>::iterator newEnd = std::unique(sortedList.begin(),\
    \ sortedList.end());\n\tsortedList.erase(newEnd, sortedList.end());\n\tstd::vector<long>\
    \ finalLst(lst.size());\n\tstd::vector<long>::iterator start = sortedList.begin();\n\
    \tstd::vector<long>::iterator end = sortedList.end() - 1;\n\tfor (std::vector<long>::iterator\
    \ i = finalLst.begin(); i != finalLst.end(); ++i) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\t*i = *start;\n\t\t\tstart++;\n\t\t}\n\t\telse {\n\t\t\t*i = *end;\n\t\t\t\
    end--;\n\t\t}\n\t}\n\treturn finalLst;", "    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = lst.begin();\n    while (it != lst.end()) {\n   \
    \     result.push_back(*it);\n        auto other = it;\n        if (it == lst.begin())\
    \ {\n            other = it + 1;\n        } else {\n            other = it - 1;\n\
    \        }\n        if (other == lst.end()) {\n            other = it;\n     \
    \   }\n        result.push_back(*other);\n        it++;\n    }\n    if (lst.size()\
    \ % 2 == 1) {\n        result.pop_back();\n    }\n    return result;", "    if\
    \ (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long> res;\n\
    \    long min = *std::min_element(lst.begin(), lst.end());\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n    res.push_back(min);\n    while (lst.size()\
    \ > 0) {\n        long max = *std::max_element(lst.begin(), lst.end());\n    \
    \    lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n       \
    \ res.push_back(max);\n        if (lst.size() == 0) {\n            break;\n  \
    \      }\n        min = *std::min_element(lst.begin(), lst.end());\n        lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n        res.push_back(min);\n    }\n    return\
    \ res;", "    std::vector<long> answer;\n    if (lst.size() < 1) {\n        return\
    \ answer;\n    }\n    std::sort(lst.begin(), lst.end());\n    bool c = true;\n\
    \    while (!lst.empty()) {\n        if (c) {\n            answer.push_back(lst.front());\n\
    \            lst.erase(lst.begin());\n        } else {\n            answer.push_back(lst.back());\n\
    \            lst.pop_back();\n        }\n        c = !c;\n    }\n    return answer;",
  "    int len = lst.size();\n    if(len < 2) return lst;\n    int i = 0;\n    int\
    \ j = len - 1;\n    std::vector<long> result;\n    while(i < j) {\n        result.push_back(lst[i]);\n\
    \        result.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    if(i\
    \ == j) result.push_back(lst[i]);\n    return result;", "  std::vector<long> sorted_list;\n\
    \  std::vector<long> original_list = lst;\n  long x;\n  bool b = true;\n  long\
    \ i = 0;\n  while(lst.size() > 0){\n    std::sort(lst.begin(), lst.end());\n \
    \   if(b){\n      i = 0;\n      x = lst[i];\n      b = false;\n    }\n    else{\n\
    \      i = lst.size() - 1;\n      x = lst[i];\n      b = true;\n    }\n    sorted_list.push_back(x);\n\
    \    auto result = std::find(lst.begin(), lst.end(), x);\n    if (result != lst.end())\
    \ {\n      lst.erase(result);\n    }\n  }\n  return sorted_list;", "    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto iter = lst.begin();\n    for (; iter != lst.end(); iter++)\
    \ {\n        result.push_back(*iter);\n        if (iter + 1 != lst.end()) {\n\
    \            result.push_back(*(lst.end() - 1));\n            lst.pop_back();\n\
    \        }\n    }\n    return result;", "    // write your code here\n    std::vector<long>\
    \ res;\n    if(lst.size()==0) return res;\n    std::sort(lst.begin(),lst.end());\n\
    \    int n = lst.size();\n    for(int i=0;i<n/2;i++){\n        res.push_back(lst[i]);\n\
    \        res.push_back(lst[n-i-1]);\n    }\n    if(n%2!=0) res.push_back(lst[n/2]);\n\
    \    return res;", "\t\n\tstd::vector<long> res;\n\tsort(lst.begin(), lst.end());\n\
    \tint i=0, j=lst.size()-1;\n\twhile(i<=j)\n\t{\n\t\tres.push_back(lst[i]);\n\t\
    \tif(i<j) res.push_back(lst[j]);\n\t\ti++;\n\t\tj--;\n\t}\n\treturn res;", " \
    \   if (lst.size() == 0) return lst;\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int counter = 0;\n    while (lst.size() != 0) {\n        if\
    \ (counter % 2 == 0) {\n            res.push_back(lst[0]);\n            lst.erase(lst.begin());\n\
    \        } else {\n            res.push_back(lst[lst.size() - 1]);\n         \
    \   lst.erase(lst.end() - 1);\n        }\n        counter++;\n    }\n    return\
    \ res;", "    // Copied from https://github.com/Webierta/Codewars/blob/master/strange_sort_list.cpp\n\
    \    // because the whole task with my solution took > 1 hour and still wasn't\
    \ accepted.\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> result(lst.size());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        result[(lst.size() - 1) -\
    \ i / 2 * 2 + i % 2] = lst[i];\n    }\n    return result;", "    if (lst.size()\
    \ <= 1) {\n        return lst;\n    }\n    std::vector<long> sorted;\n    auto\
    \ min = std::min_element(lst.begin(), lst.end());\n    sorted.push_back(*min);\n\
    \    lst.erase(min);\n    while (!lst.empty()) {\n        std::vector<long>::iterator\
    \ max;\n        if (sorted.size() % 2 == 0) {\n            max = std::max_element(lst.begin(),\
    \ lst.end());\n        } else {\n            max = std::min_element(lst.begin(),\
    \ lst.end());\n        }\n        sorted.push_back(*max);\n        lst.erase(max);\n\
    \    }\n    return sorted;", "    std::vector<long> result = lst;\n    if (lst.size()\
    \ < 2) {\n        return result;\n    }\n    std::vector<long> *left = new std::vector<long>();\n\
    \    std::vector<long> *right = new std::vector<long>();\n    for (unsigned int\
    \ i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            left->push_back(lst[i]);\n\
    \        } else {\n            right->push_back(lst[i]);\n        }\n    }\n \
    \   std::sort(left->begin(), left->end());\n    std::sort(right->begin(), right->end());\n\
    \    std::reverse(right->begin(), right->end());\n    std::vector<long> temp =\
    \ *left;\n    left->insert(left->end(), right->begin(), right->end());\n    result\
    \ = *left;\n    return result;", "    if (lst.size() < 2) return lst;\n    long\
    \ max_ = *max_element(lst.begin(), lst.end());\n    long min_ = *min_element(lst.begin(),\
    \ lst.end());\n    bool min_max = true;\n    std::vector<long> res;\n    while\
    \ (res.size() < lst.size()) {\n        if (min_max) {\n            res.push_back(min_);\n\
    \            lst.erase(remove(lst.begin(), lst.end(), min_), lst.end());\n   \
    \         min_ = *min_element(lst.begin(), lst.end());\n        } else {\n   \
    \         res.push_back(max_);\n            lst.erase(remove(lst.begin(), lst.end(),\
    \ max_), lst.end());\n            max_ = *max_element(lst.begin(), lst.end());\n\
    \        }\n        min_max = !min_max;\n    }\n    return res;", "    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    int l_size = lst.size();\n    std::vector<long> ret(l_size);\n    int i =\
    \ 0;\n    for (i = 0; i < l_size/2; i++) {\n        ret[2*i] = lst[i];\n     \
    \   ret[2*i+1] = lst[l_size-i-1];\n    }\n    if (l_size % 2 == 1) {\n       \
    \ ret[2*i] = lst[i];\n    }\n    return ret;", "  std::vector<long> even;\n  std::vector<long>\
    \ odd;\n  std::vector<long> result;\n  int len = lst.size();\n  if (len == 0)\
    \ {\n    return lst;\n  }\n  sort(lst.begin(), lst.end());\n  if (len % 2 == 0)\
    \ {\n    for (int i = 0; i < len; i++) {\n      if (i % 2 == 0) {\n        odd.push_back(lst[i]);\n\
    \      } else {\n        even.push_back(lst[i]);\n      }\n    }\n  } else {\n\
    \    for (int i = 0; i < len; i++) {\n      if (i % 2 == 0) {\n        even.push_back(lst[i]);\n\
    \      } else {\n        odd.push_back(lst[i]);\n      }\n    }\n  }\n  reverse(odd.begin(),\
    \ odd.end());\n  for (int i = 0; i < len; i++) {\n    if (i % 2 == 0) {\n    \
    \  result.push_back(even[i / 2]);\n    } else {\n      result.push_back(odd[i\
    \ / 2]);\n    }\n  }\n  return result;", "    long len = lst.size();\n    if (len\
    \ == 0) {\n        return lst;\n    }\n    long mid = (len + 1) / 2;\n    std::vector<long>\
    \ res;\n    std::vector<long> tmp_lst = lst;\n    for (long i = 0; i < mid; i++)\
    \ {\n        std::vector<long>::iterator it_min = std::min_element(tmp_lst.begin(),\
    \ tmp_lst.end());\n        res.push_back(*it_min);\n        tmp_lst.erase(it_min);\n\
    \        if (tmp_lst.size() == 0) {\n            break;\n        }\n        std::vector<long>::iterator\
    \ it_max = std::max_element(tmp_lst.begin(), tmp_lst.end());\n        res.push_back(*it_max);\n\
    \        tmp_lst.erase(it_max);\n    }\n    return res;", "\tif (lst.size() ==\
    \ 0) {\n\t\treturn lst;\n\t}\n\tbool isIncreasing = true;\n\tstd::vector<long>\
    \ result;\n\tstd::sort(lst.begin(), lst.end());\n\tint currentIndex = 0;\n\twhile\
    \ (currentIndex < lst.size()) {\n\t\tif (isIncreasing) {\n\t\t\tresult.push_back(lst[currentIndex]);\n\
    \t\t\tcurrentIndex++;\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(lst[lst.size()\
    \ - currentIndex - 1]);\n\t\t}\n\t\tisIncreasing = !isIncreasing;\n\t}\n\treturn\
    \ result;", "    std::vector<long> sorted_lst;\n    if (lst.size() == 0) {\n \
    \       return sorted_lst;\n    }\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i: lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    std::vector<long>\
    \ temp_list;\n    temp_list.push_back(min);\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n    int lst_min;\n    int lst_max;\n    int lst_min_index;\n\
    \    int lst_max_index;\n    bool keep_min = true;\n    while (lst.size() > 0)\
    \ {\n        lst_min = lst[0];\n        lst_max = lst[0];\n        lst_min_index\
    \ = 0;\n        lst_max_index = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (lst[i] < lst_min) {\n                lst_min = lst[i];\n\
    \                lst_min_index = i;\n            }\n            if (lst[i] > lst_max)\
    \ {\n                lst_max = lst[i];\n                lst_max_index = i;\n \
    \           }\n        }\n        if (keep_min) {\n            temp_list.push_back(lst_min);\n\
    \            lst.erase(lst.begin() + lst_min_index);\n            keep_min = false;\n\
    \        } else {\n            temp_list.push_back(lst_max);\n            lst.erase(lst.begin()\
    \ + lst_max_index);\n            keep_min = true;\n        }\n    }\n    std::cout\
    \ << temp_list.size() << \" \" << lst.size() << std::endl;\n    sorted_lst", "\t\
    int n = lst.size();\n\tstd::vector<long> ans;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tint j = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tans.push_back(lst[j]);\n\
    \t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\tans.push_back(lst[n - 1 - j]);\n\t\t}\n\t\
    }\n\treturn ans;", "\t// TODO: Implement this\n\tstd::vector<long> ret;\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tint count=0;\n\tint half=lst.size()/2;\n\tfor(int i=0;i<lst.size();i++){\n\
    \t\tif(count%2==0){\n\t\t\tret.push_back(lst[i]);\n\t\t}\n\t\telse{\n\t\t\tret.push_back(lst[lst.size()-1-i]);\n\
    \t\t}\n\t\tcount++;\n\t}\n\treturn ret;", "\t\n\t// Sort the elements\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tstd::vector<long> temp;\n\tint i = 0;\n\tint j = lst.size() -\
    \ 1;\n\t// Keep moving from left and right simultaneously until you reach the\
    \ center of the list,\n\t// which will be the middle element.\n\twhile (i <= j)\
    \ {\n\t\ttemp.push_back(lst[i]);\n\t\ti++;\n\t\tif (i <= j) {\n\t\t\ttemp.push_back(lst[j]);\n\
    \t\t\tj--;\n\t\t}\n\t}\n\treturn temp;", "    std::vector<long> s;\n    if(lst.size()\
    \ == 0)\n        return s;\n    if(lst.size() == 1)\n        return lst;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int a = 0;\n    int b = lst.size() -\
    \ 1;\n    int c = 0;\n    while(a <= b) {\n        s.push_back(lst[a]);\n    \
    \    a++;\n        if(a > b)\n            break;\n        s.push_back(lst[b]);\n\
    \        b--;\n    }\n    return s;", "\t//your code here\n\tstd::vector<long>\
    \ res;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(lst[i / 2]);\n\t\t}\n\t\t\
    else {\n\t\t\tres.push_back(lst[lst.size() - i / 2 - 1]);\n\t\t}\n\t}\n\treturn\
    \ res;", "    int len = lst.size();\n    std::vector<long> ans(len);\n    if (len\
    \ == 0) {\n        return ans;\n    }\n    int i = 0;\n    int j = len - 1;\n\
    \    int index = 0;\n    std::sort(lst.begin(), lst.end());\n    while (index\
    \ < len) {\n        ans[index] = lst[i];\n        index++;\n        i++;\n   \
    \     if (index < len) {\n            ans[index] = lst[j];\n            index++;\n\
    \            j--;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    std::vector<long> ans = lst;\n    sort(ans.begin(), ans.end());\n    long\
    \ N = ans.size();\n    for(long i = 0; i < N; i++) {\n        if(i % 2 == 0) {\n\
    \            lst[i] = ans[i/2];\n        } else {\n            lst[i] = ans[N\
    \ - i/2 - 1];\n        }\n    }\n    return lst;", "  if (lst.size() == 0) {\n\
    \    return lst;\n  }\n  std::vector<long> original = lst;\n  std::sort(lst.begin(),\
    \ lst.end());\n  std::vector<long> ans(lst.size());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  for (auto it : original) {\n    if (std::find(lst.begin(), lst.end(),\
    \ it) == lst.begin()) {\n      ans[i] = it;\n      lst.erase(lst.begin());\n \
    \     i++;\n    } else if (std::find(lst.begin(), lst.end(), it) == lst.end()\
    \ - 1) {\n      ans[j] = it;\n      lst.erase(lst.end() - 1);\n      j--;\n  \
    \  }\n  }\n  return ans;", "  // your code goes here\n  std::vector<long> result;\n\
    \  std::sort(lst.begin(), lst.end());\n  std::cout << \"sort\" << std::endl;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      result.push_back(lst[i\
    \ / 2]);\n    } else {\n      result.push_back(lst[lst.size() - (i / 2) - 1]);\n\
    \    }\n  }\n  return result;", "\t// if list is empty, return empty list\n\t\
    if (lst.size()==0) {\n\t\treturn lst;\n\t}\n\t// get the minimum and maximum values\
    \ and\n\t// initialise the sorted list with these values\n\tlong min = *std::min_element(lst.begin(),\
    \ lst.end());\n\tlong max = *std::max_element(lst.begin(), lst.end());\n\tstd::vector<long>\
    \ sorted = {min, max};\n\t// remove these values from the original list\n\tlst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n\tlst.erase(std::remove(lst.begin(), lst.end(),\
    \ max), lst.end());\n\t// sort the remaining elements in the list in\n\t// ascending\
    \ order so we can start adding them\n\t// alternatively to the sorted list\n\t\
    std::sort(lst.begin(), lst.end());\n\t// count toggles between zero and one\n\t\
    // at zero, we add the minimum value of remaining\n\t// elements to the sorted\
    \ list and remove it from the\n\t// remaining list\n\t// at one, we add the maximum\
    \ value of remaining\n\t// elements to the sorted list and remove it from the\n\
    \t// remaining list\n\tint count = 0;\n\twhile (lst.size() > 0) {\n\t\tif (count\
    \ == 0) {\n\t\t\tsorted.push_back(lst.front());\n\t\t\tlst.erase(lst.begin());\n\
    \t\t\tcount = 1;\n\t\t} else {\n\t\t\tsorted.push_back(lst.back());\n\t\t\tlst.pop_back();\n\
    \t\t\tcount = 0;\n\t\t}\n\t}\n\treturn sorted;", "    std::vector<long> sortedList(lst.size());\n\
    \    int j = 0;\n    sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            sortedList[j] = lst[i];\n   \
    \         j++;\n        } else {\n            sortedList[j] = lst[lst.size() -\
    \ 1 - i];\n            j++;\n        }\n    }\n    return sortedList;", "    if\
    \ (lst.size() <= 1) {\n        return lst;\n    }\n    std::vector<long> v;\n\
    \    int min, max;\n    min = *min_element(lst.begin(), lst.end());\n    max =\
    \ *max_element(lst.begin(), lst.end());\n    v.push_back(min);\n    for (int i\
    \ = 0; i < lst.size() - 1; i++) {\n        if (i % 2 == 0) {\n            long\
    \ a = *max_element(lst.begin(), lst.end());\n            v.push_back(a);\n   \
    \         for (int j = 0; j < lst.size(); j++) {\n                if (lst[j] ==\
    \ a) {\n                    lst.erase(lst.begin() + j);\n                    break;\n\
    \                }\n            }\n        } else {\n            long a = *min_element(lst.begin(),\
    \ lst.end());\n            v.push_back(a);\n            for (int j = 0; j < lst.size();\
    \ j++) {\n                if (lst[j] == a) {\n                    lst.erase(lst.begin()\
    \ + j);\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    return v;", "  std::vector<long> res;\n  if (lst.size() == 0)\
    \ {\n    return res;\n  }\n  std::sort(lst.begin(), lst.end());\n  for (int i\
    \ = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      res.push_back(lst[i\
    \ / 2]);\n    } else {\n      res.push_back(lst[lst.size() - (i / 2) - 1]);\n\
    \    }\n  }\n  return res;", "    std::vector<long> temp(lst.size(), 0);\n   \
    \ std::sort(lst.begin(), lst.end());\n    int j = 0;\n    int len = lst.size();\n\
    \    while(j < len) {\n        temp[j] = lst[j];\n        if (j == len - 1) {\n\
    \            j++;\n            continue;\n        }\n        temp[j + 1] = lst[len\
    \ - 1];\n        len--;\n        j += 2;\n    }\n    return temp;", "    std::vector<long>::iterator\
    \ iter;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size()\
    \ / 2; i++) {\n        std::swap(lst[i], lst[lst.size() - i - 1]);\n    }\n  \
    \  return lst;", "    std::vector<long> res;\n    sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i == j) break;\n        res.push_back(lst[j]);\n        i++;\n  \
    \      j--;\n    }\n    return res;", "  //your code\n  return lst;", "\tstd::vector<long>\
    \ temp;\n\tint size = lst.size();\n\tif (size == 0)\n\t\treturn lst;\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tint a = 0, b = size - 1;\n\twhile (temp.size() != size) {\n\t\
    \ttemp.push_back(lst[a]);\n\t\ta++;\n\t\tif (temp.size() == size)\n\t\t\tbreak;\n\
    \t\ttemp.push_back(lst[b]);\n\t\tb--;\n\t}\n\treturn temp;", "    if (lst.size()\
    \ == 0) return {};\n    sort(lst.begin(), lst.end());\n    std::vector<long> result;\n\
    \    int low = 0, high = lst.size() - 1;\n    bool go_low = true;\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        if (go_low) {\n            result.push_back(lst[low]);\n\
    \            low++;\n        } else {\n            result.push_back(lst[high]);\n\
    \            high--;\n        }\n        go_low = !go_low;\n    }\n    return\
    \ result;", "\tif (lst.size() == 0) {\n\t\treturn {};\n\t}\n\telse if (lst.size()\
    \ == 1) {\n\t\treturn lst;\n\t}\n\tstd::vector<long> result;\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\twhile (lst.size() > 1) {\n\t\tresult.push_back(lst[0]);\n\t\t\
    lst.erase(lst.begin());\n\t\tresult.push_back(lst[lst.size() - 1]);\n\t\tlst.erase(lst.begin()\
    \ + lst.size() - 1);\n\t}\n\tresult.push_back(lst[0]);\n\treturn result;", " \
    \   if (lst.size() == 0) return lst;\n    if (lst.size() == 1) return lst;\n \
    \   if (lst.size() == 2) {\n        std::vector<long> new_list;\n        new_list.push_back(lst[0]);\n\
    \        new_list.push_back(lst[1]);\n        return new_list;\n    }\n    //\
    \ If the list size is even\n    if (lst.size() % 2 == 0) {\n        std::vector<long>\
    \ new_list;\n        std::sort(lst.begin(), lst.end());\n        int count = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (count % 2 ==\
    \ 0) {\n                new_list.push_back(lst[i]);\n            } else {\n  \
    \              new_list.push_back(lst[lst.size() - i - 1]);\n            }\n \
    \           count++;\n        }\n        return new_list;\n    } else {\n    \
    \    std::vector<long> new_list;\n        std::sort(lst.begin(), lst.end());\n\
    \        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n    \
    \        if (count % 2 == 0) {\n                new_list.push_back(lst[i]);\n\
    \            } else {\n                new_list.push_back(lst[lst.size() - i -\
    \ 1]);\n            }\n            count++;\n        }\n        return new_list;\n\
    \    }", "\tif (lst.size() == 0) {\n\t\treturn lst;\n\t}\n\tsort(lst.begin(),\
    \ lst.end());\n\tstd::vector<long> res;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tint k = i % 2 == 0 ? 0 : lst.size() - 1;\n\t\tint delta = i % 2 == 0\
    \ ? 1 : -1;\n\t\tres.push_back(lst[k]);\n\t\tk += delta;\n\t}\n\treturn res;",
  "\tif (lst.size() == 0) {\n\t\treturn lst;\n\t}\n\tstd::vector<long> sortedLst;\n\
    \tstd::sort(lst.begin(), lst.end());\n\t// std::cout << \"Sorted:\\n\";\n\t//\
    \ for (long long i = 0; i < lst.size(); i++) {\n\t// \tstd::cout << lst[i] <<\
    \ \" \";\n\t// }\n\t// std::cout << std::endl;\n\tlong long top = lst.size() -\
    \ 1;\n\tlong long bot = 0;\n\tlong long i = 0;\n\twhile (top >= bot) {\n\t\tsortedLst.push_back(lst[top]);\n\
    \t\ttop--;\n\t\tif (top >= bot) {\n\t\t\tsortedLst.push_back(lst[bot]);\n\t\t\t\
    bot++;\n\t\t}\n\t}\n\treturn sortedLst;", "  std::vector<long> result;\n  sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  bool forward = true;\n\
    \  while (result.size() < lst.size()) {\n    if (forward) {\n      result.push_back(lst[i]);\n\
    \      i++;\n    } else {\n      result.push_back(lst[j]);\n      j--;\n    }\n\
    \    forward = !forward;\n  }\n  return result;", "    if (lst.size() <= 1) return\
    \ lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> lst1;\n\
    \    int i = 0, j = lst.size() - 1;\n    for (int k = 0; k < lst.size(); k++){\n\
    \        if (k % 2 == 0) lst1.push_back(lst[i++]);\n        else lst1.push_back(lst[j--]);\n\
    \    }\n    return lst1;", "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\tstd::vector<long> sortedList(lst.size());\n\
    \tstd::sort(lst.begin(), lst.end());\n\tint k = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tsortedList[k] = lst[i];\n\t\t\tk++;\n\t\
    \t}\n\t\telse {\n\t\t\tsortedList[lst.size() - k] = lst[i];\n\t\t}\n\t}\n\treturn\
    \ sortedList;", "  // Your code here\n  std::vector<long> result;\n  bool flag=false;\n\
    \  int size=lst.size();\n  if(size==0) return result;\n  long min=lst[0];\n  int\
    \ min_index=0;\n  long max=lst[0];\n  int max_index=0;\n  for(int i=0;i<size;i++){\n\
    \    if(lst[i]<min){\n      min=lst[i];\n      min_index=i;\n    }\n    if(lst[i]>max){\n\
    \      max=lst[i];\n      max_index=i;\n    }\n  }\n  for(int i=0;i<size;i++){\n\
    \    if(!flag){\n      result.push_back(min);\n      if(i==min_index) continue;\n\
    \      else{\n        flag=true;\n        i--;\n      }\n    }\n    else{\n  \
    \    result.push_back(max);\n      if(i==max_index) continue;\n      else{\n \
    \       flag=false;\n        i--;\n      }\n    }\n  }\n  return result;", " \
    \ if (lst.size() == 0) return lst;\n  std::vector<long> result(lst.size());\n\
    \  bool to_up = true;\n  int pos = 0;\n  while (!lst.empty()) {\n    if (to_up)\
    \ {\n      auto min = *std::min_element(lst.begin(), lst.end());\n      result[pos]\
    \ = min;\n      auto to_erase = std::find(lst.begin(), lst.end(), min);\n    \
    \  lst.erase(to_erase);\n    } else {\n      auto max = *std::max_element(lst.begin(),\
    \ lst.end());\n      result[pos] = max;\n      auto to_erase = std::find(lst.begin(),\
    \ lst.end(), max);\n      lst.erase(to_erase);\n    }\n    pos++;\n    to_up =\
    \ !to_up;\n  }\n  return result;", "    if (lst.size()==0) return lst;\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long> ans;\n    int curr = 0;\n    while (lst.size()>1)\
    \ {\n        ans.push_back(lst[curr]);\n        lst.erase(lst.begin()+curr);\n\
    \        curr = !curr;\n    }\n    ans.push_back(lst[0]);\n    return ans;", " \
    \   bool inc = false;\n    std::vector<long> res;\n    int size = lst.size();\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    for (i = 0; i < size; i++)\
    \ {\n        if (lst[i] == lst[0])\n            j++;\n        else\n         \
    \   break;\n    }\n    if (j == size)\n        return lst;\n    for (i = 0; i\
    \ < size; i++) {\n        if (inc) {\n            int max = 0;\n            int\
    \ index = 0;\n            for (k = 1; k < size; k++) {\n                if (lst[k]\
    \ > lst[max] && res[res.size() - 1] < lst[k]) {\n                    max = k;\n\
    \                }\n            }\n            res.push_back(lst[max]);\n    \
    \        lst[max] = INT_MIN;\n            inc = false;\n        } else {\n   \
    \         int min = 0;\n            int index = 0;\n            for (k = 1; k\
    \ < size; k++) {\n                if (lst[k] < lst[min] && res[res.size() - 1]\
    \ > lst[k]) {\n                    min = k;\n                }\n            }\n\
    \            res.push_back(lst[min]);\n            lst[min] = INT_MAX;\n     \
    \       inc = true;\n        }\n    }\n    return res;", "    // your code here\n\
    \    std::vector<long> a;\n    std::vector<long> b;\n    std::vector<long> c;\n\
    \    std::vector<long> d;\n    int c1=0;\n    int c2=0;\n    int c3=0;\n    for(int\
    \ i=0;i<lst.size();i++)\n    {\n      if(lst[i]==1)\n      {\n        c1++;\n\
    \      }\n      else if(lst[i]==2)\n      {\n        c2++;\n      }\n      else\n\
    \      {\n        c3++;\n      }\n    }\n    for(int i=0;i<c1;i++)\n    {\n  \
    \    a.push_back(1);\n    }\n    for(int i=0;i<c2;i++)\n    {\n      a.push_back(2);\n\
    \    }\n    for(int i=0;i<c3;i++)\n    {\n      a.push_back(3);\n    }\n    for(int\
    \ i=0;i<a.size();i++)\n    {\n      if(i%2==0)\n      {\n        b.push_back(a[i]);\n\
    \      }\n      else\n      {\n        d.push_back(a[i]);\n      }\n    }\n  \
    \  int x=0;\n    for(int i=d.size()-1;i>=0;i--)\n    {\n      b.push_back(d[i]);\n\
    \    }\n    return b;", "    std::vector<long> data;\n    if(lst.size()<2)\n \
    \       return lst;\n    std::sort(lst.begin(),lst.end());\n    int pos = lst.size()-1;\n\
    \    int i = 0;\n    while(pos >=0)\n    {\n        data.push_back(lst[pos]);\n\
    \        pos--;\n        if(pos < 0)\n            break;\n        data.push_back(lst[i]);\n\
    \        i++;\n    }\n    return data;", "  std::vector<long> odd;\n  std::vector<long>\
    \ even;\n  std::vector<long> ret;\n  // Odd and even\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0) {\n      even.push_back(lst[i]);\n    } else {\n\
    \      odd.push_back(lst[i]);\n    }\n  }\n  // Sort odd and even\n  std::sort(odd.begin(),\
    \ odd.end());\n  std::sort(even.begin(), even.end());\n  // Merge\n  int o_count\
    \ = 0;\n  int e_count = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i\
    \ % 2 == 0) {\n      ret.push_back(even[e_count]);\n      e_count++;\n    } else\
    \ {\n      ret.push_back(odd[o_count]);\n      o_count++;\n    }\n  }\n  return\
    \ ret;", "\tstd::vector<long> res;\n\tstd::sort(lst.begin(), lst.end());\n\tbool\
    \ flag = false;\n\twhile (lst.size() != 0) {\n\t\tif (flag) {\n\t\t\tres.push_back(lst.back());\n\
    \t\t\tlst.pop_back();\n\t\t}\n\t\telse {\n\t\t\tres.push_back(lst.front());\n\t\
    \t\tlst.erase(lst.begin());\n\t\t}\n\t\tflag = !flag;\n\t}\n\treturn res;", " \
    \ std::vector<long> result;\n  if (lst.size() == 0) {\n    return result;\n  }\n\
    \  long min = *std::min_element(lst.begin(), lst.end());\n  result.push_back(min);\n\
    \  lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n  long max\
    \ = *std::max_element(lst.begin(), lst.end());\n  result.push_back(max);\n  lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n  if (lst.size() == 0) {\n    return result;\n\
    \  }\n  min = *std::min_element(lst.begin(), lst.end());\n  result.push_back(min);\n\
    \  lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n  max = *std::max_element(lst.begin(),\
    \ lst.end());\n  result.push_back(max);\n  lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n  return result;", "    std::vector<long> tmp(lst.size());\n\
    \    int size = lst.size();\n    int i = 0;\n    std::sort(lst.begin(), lst.end());\n\
    \    int j = size - 1;\n    int k = 0;\n    for (int x = 0; x < size; x++) {\n\
    \        if (x % 2 == 0) {\n            tmp[x] = lst[k];\n            k++;\n \
    \       } else {\n            tmp[x] = lst[j];\n            j--;\n        }\n\
    \    }\n    return tmp;", "    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 ==\
    \ 0) {\n            result.push_back(lst[i / 2]);\n        } else {\n        \
    \    result.push_back(lst[lst.size() - i / 2 - 1]);\n        }\n    }\n    return\
    \ result;", "\tif (lst.size() == 0) {\n\t\treturn {};\n\t}\n\tif (lst.size() ==\
    \ 1) {\n\t\treturn lst;\n\t}\n\tif (lst.size() == 2) {\n\t\tif (lst[0] < lst[1])\
    \ {\n\t\t\treturn lst;\n\t\t}\n\t\treturn {lst[1], lst[0]};\n\t}\n\tstd::vector<long>\
    \ answer;\n\tstd::sort(lst.begin(), lst.end());\n\tint i = 0;\n\tint j = lst.size()\
    \ - 1;\n\twhile (i <= j) {\n\t\tanswer.push_back(lst[i]);\n\t\ti++;\n\t\tif (i\
    \ > j) {\n\t\t\tbreak;\n\t\t}\n\t\tanswer.push_back(lst[j]);\n\t\tj--;\n\t}\n\t\
    return answer;", "    std::vector<long> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = lst.begin();\n    while(it != lst.end()) {\n        result.push_back(*it);\n\
    \        auto end = std::max_element(it + 1, lst.end());\n        result.push_back(*end);\n\
    \        it = end + 1;\n    }\n    return result;", "\tstd::vector<long> re;\n\
    \tstd::vector<long>::iterator it;\n\tstd::vector<long>::iterator it1;\n\tif (lst.size()\
    \ == 0) {\n\t\treturn re;\n\t}\n\telse {\n\t\tlong x = *std::min_element(lst.begin(),\
    \ lst.end());\n\t\tit = std::find(lst.begin(), lst.end(), x);\n\t\tre.push_back(x);\n\
    \t\tlst.erase(it);\n\t\twhile (1) {\n\t\t\tif (lst.size() == 0)\n\t\t\t\tbreak;\n\
    \t\t\tlong xx = *std::max_element(lst.begin(), lst.end());\n\t\t\tit1 = std::find(lst.begin(),\
    \ lst.end(), xx);\n\t\t\tre.push_back(xx);\n\t\t\tlst.erase(it1);\n\t\t\tif (lst.size()\
    \ == 0)\n\t\t\t\tbreak;\n\t\t\tlong x1 = *std::min_element(lst.begin(), lst.end());\n\
    \t\t\tit = std::find(lst.begin(), lst.end(), x1);\n\t\t\tre.push_back(x1);\n\t\
    \t\tlst.erase(it);\n\t\t}\n\t\treturn re;\n\t}", "\tstd::vector<long> ans;\n\t\
    std::sort(lst.begin(), lst.end());\n\twhile (!lst.empty()) {\n\t\tans.push_back(lst.front());\n\
    \t\tlst.erase(lst.begin());\n\t\tif (!lst.empty()) {\n\t\t\tans.push_back(lst.back());\n\
    \t\t\tlst.pop_back();\n\t\t}\n\t}\n\treturn ans;", "\tstd::vector<long> odd;\n\
    \tstd::vector<long> even;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i\
    \ % 2 == 0) {\n\t\t\todd.push_back(lst[i]);\n\t\t}\n\t\telse {\n\t\t\teven.push_back(lst[i]);\n\
    \t\t}\n\t}\n\tstd::sort(odd.begin(), odd.end());\n\tstd::sort(even.begin(), even.end());\n\
    \tstd::reverse(even.begin(), even.end());\n\tstd::vector<long> res;\n\tfor (int\
    \ i = 0; i < odd.size(); i++) {\n\t\tres.push_back(odd[i]);\n\t\tif (i < even.size())\
    \ {\n\t\t\tres.push_back(even[i]);\n\t\t}\n\t}\n\treturn res;", "    std::vector<long>\
    \ res;\n    while(lst.size() > 0) {\n        // get minimum value from lst\n \
    \       int minIndex = 0;\n        for(int i = 1; i < lst.size(); i++) {\n   \
    \         if(lst[i] < lst[minIndex]) {\n                minIndex = i;\n      \
    \      }\n        }\n        // append min value to res\n        res.push_back(lst[minIndex]);\n\
    \        // erase min value from lst\n        lst.erase(lst.begin() + minIndex);\n\
    \        // get maximum value from lst\n        int maxIndex = 0;\n        for(int\
    \ i = 1; i < lst.size(); i++) {\n            if(lst[i] > lst[maxIndex]) {\n  \
    \              maxIndex = i;\n            }\n        }\n        // append max\
    \ value to res\n        res.push_back(lst[maxIndex]);\n        // erase max value\
    \ from lst\n        lst.erase(lst.begin() + maxIndex);\n    }\n    return res;",
  "\tstd::vector<long> result;\n\tif (lst.size() == 0) {\n\t\treturn result;\n\t}\n\
    \tint n = lst.size();\n\tstd::sort(lst.begin(), lst.end());\n\tint j = n - 1;\n\
    \tfor (int i = 0; i < n / 2; i++) {\n\t\tresult.push_back(lst[i]);\n\t\tresult.push_back(lst[j]);\n\
    \t\tj--;\n\t}\n\tif (n % 2 != 0) {\n\t\tresult.push_back(lst[j]);\n\t}\n\treturn\
    \ result;"]
stop_tokens:
- "\n}"
