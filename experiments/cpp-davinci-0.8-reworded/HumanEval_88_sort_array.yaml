name: HumanEval_88_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
  \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
  \ the given vector in ascending order if the sum( first index value, last index\
  \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
  \ last index value) is even.\n// Note:\n// * don't change the given vector.\n//\
  \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
  // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
  // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
  \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
  \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
  \ (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4,\
  \ (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
  \ array) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
  \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
  \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
  \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
  \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
  \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14,\
  \ (long)11})));\n}\n"
completions: ["    if (array.size() <= 1) return array;\n    std::vector<long> result(array.size());\n\
    \    int sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum +=\
    \ array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    for (int i = 0; i < array.size(); i++) {\n       \
    \ result[i] = array[i];\n    }\n    return result;", "    if(array.size()<=1)\
    \ return array;\n    if((array[0]+array[array.size()-1])%2==0){\n        std::sort(array.begin(),array.end(),std::greater<int>());\n\
    \    }else{\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;", "\tstd::sort(array.begin(), array.end());\n\tstd::vector<long> result;\n\
    \tif ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\t\tfor (int i = array.size()\
    \ - 1; i >= 0; i--) {\n\t\t\tresult.push_back(array[i]);\n\t\t}\n\t}\n\telse {\n\
    \t\tresult = array;\n\t}\n\treturn result;", "\tlong sum = array[0] + array[array.size()\
    \ - 1];\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\
    \t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\treturn array;",
  "    std::vector<long> r;\n    r = array;\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(r.begin(), r.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(r.begin(), r.end());\n    }\n    return r;",
  "  if (array.size() > 1) {\n    if ((array[0] + array[array.size() - 1]) % 2 ==\
    \ 0) {\n      std::sort(array.begin(), array.end(), std::greater<long>());\n \
    \   } else {\n      std::sort(array.begin(), array.end());\n    }\n  }\n  return\
    \ array;", "  std::sort(array.begin(), array.end());\n  if (array.size() <= 1)\
    \ return array;\n  if (array[0] % 2 == array[array.size() - 1] % 2) return array;\n\
    \  std::reverse(array.begin(), array.end());\n  return array;", "  if(array.size()\
    \ == 0) return array;\n  if(array.size() == 1) return array;\n  if(array.size()\
    \ == 2) {\n    if(array[0] > array[1]) {\n      long temp = array[0];\n      array[0]\
    \ = array[1];\n      array[1] = temp;\n    }\n    return array;\n  }\n  if((array[0]\
    \ + array[array.size() - 1]) % 2 != 0) {\n    sort(array.begin(), array.end());\n\
    \  } else {\n    sort(array.begin(), array.end(), greater<long>());\n  }\n  return\
    \ array;", "\tif(array.size()<=1)\n\t\treturn array;\n\tstd::vector<long> ans(array.size());\n\
    \tint sum = array[0]+array[array.size()-1];\n\tif(sum%2==0)\n\t\tstd::sort(array.begin(),array.end(),std::greater<long>());\n\
    \telse\n\t\tstd::sort(array.begin(),array.end());\n\treturn array;", "\tif (array.size()\
    \ == 0)\n\t\treturn array;\n\tif (array.size() == 1)\n\t\treturn array;\n\tif\
    \ ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "    if (array.size() < 2) {\n       \
    \ return array;\n    }\n    bool isOdd = ((array[0] + array[array.size() - 1])\
    \ % 2 == 1);\n    if (isOdd) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    return array;", "    bool order;\n    if(array.size() == 0 || array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        order = true;\n    else\n        order = false;\n    std::sort(array.begin(),\
    \ array.end(), [order](const long a, const long b) {\n        if(order)\n    \
    \        return a < b;\n        else\n            return a > b;\n    });\n   \
    \ return array;", "  // Write your code here\n  // sort(array.begin(), array.end());\n\
    \  for(int i = 0; i < array.size(); i++){\n    for(int j = 0; j < array.size()\
    \ - 1; j++){\n      if(array[j] > array[j+1]){\n        std::swap(array[j], array[j+1]);\n\
    \      }\n    }\n  }\n  if(array.size() == 0 || array.size() == 1){\n    return\
    \ array;\n  }\n  else if((array[0] + array[array.size() - 1]) % 2 == 0){\n   \
    \ std::reverse(array.begin(), array.end());\n    return array;\n  }\n  else{\n\
    \    return array;\n  }", "  assert(array.size() >= (size_t)0);\n  // your code\
    \ here\n  int sum = array[0] + array[array.size()-1];\n  if(sum % 2 == 0)\n  {\n\
    \    sort(array.begin(), array.end(), std::greater<int>());\n  }\n  else\n  {\n\
    \    sort(array.begin(), array.end());\n  }\n  return array;", "    // checking\
    \ if the sum of first and last value is odd or even\n    long sum = array[0] +\
    \ array[array.size() - 1];\n    if(sum % 2 == 0) {\n        // reversing the array\n\
    \        std::reverse(array.begin(), array.end());\n    }\n    else {\n      \
    \  // sorting the array\n        std::sort(array.begin(), array.end());\n    }\n\
    \    return array;", "    // sort the given vector in ascending order if the sum(\
    \ first index value, last index value) is odd,\n    // or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
    \    // * don't change the given vector.\n    long sum = array[0] + array[array.size()\
    \ - 1];\n    std::sort(array.begin(), array.end());\n    if(sum % 2 == 0) {\n\
    \        std::reverse(array.begin(), array.end());\n    }\n    return array;",
  "    bool sort=false;\n    if((array[0]+array[array.size()-1])%2==0)\n        sort=true;\n\
    \    else\n        sort=false;\n    if(sort)\n        std::sort(array.begin(),array.end(),std::greater<int>());\n\
    \    else\n        std::sort(array.begin(),array.end());\n    return array;",
  "    if (array.size() <= 1) {\n        return array;\n    }\n    if ((array[0] +\
    \ array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    } else {\n        std::sort(array.begin(), array.end());\n\
    \    }\n    return array;", "  if (array.size() == 0) {\n    return array;\n \
    \ }\n  if (array.size() == 1) {\n    return array;\n  }\n  int sum = array[0]\
    \ + array[array.size() - 1];\n  if (sum % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "    std::sort(array.begin(), array.end());\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;", "    // your code here\n    if(array.size()==0\
    \ || array.size()==1) return array;\n    long sum = 0;\n    for(long i=0;i<array.size();i++){\n\
    \        sum+=array[i];\n    }\n    if(sum%2==0){\n        std::reverse(array.begin(),array.end());\n\
    \    }\n    return array;", "  if (array.size() == 0) {\n    return array;\n \
    \ }\n  else if (array.size() == 1) {\n    return array;\n  }\n  else {\n    if\
    \ ((array[0] + array[array.size() - 1]) % 2 == 0) {\n      std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n      return array;\n    }\n    else {\n\
    \      std::sort(array.begin(), array.end());\n      return array;\n    }\n  }",
  "    std::sort(array.begin(), array.end());\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n        std::reverse(array.begin(), array.end());\n    return\
    \ array;", "    std::vector<long> res;\n    for(int i = 0; i < array.size(); i++)\
    \ {\n        std::vector<long> temp;\n        for(int j = 0; j < array.size();\
    \ j++) {\n            if(j == i) {\n                continue;\n            }\n\
    \            temp.push_back(array[j]);\n        }\n        res.push_back(temp[0]);\n\
    \        for(int k = 1; k < temp.size(); k++) {\n            if(k % 2 == 0) {\n\
    \                int j = k - 1;\n                while(j >= 0 && temp[j] < temp[k])\
    \ {\n                    res[j + 1] = res[j];\n                    j--;\n    \
    \            }\n                res[j + 1] = temp[k];\n            } else {\n\
    \                int j = k - 1;\n                while(j >= 0 && temp[j] > temp[k])\
    \ {\n                    res[j + 1] = res[j];\n                    j--;\n    \
    \            }\n                res[j + 1] = temp[k];\n            }\n       \
    \ }\n    }\n    return res;", "    if(array.size() == 0) return array;\n    if(array.size()\
    \ == 1) return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        sort(array.begin(), array.end(), greater<int>());\n    } else {\n   \
    \     sort(array.begin(), array.end());\n    }\n    return array;", "    if (array.size()\
    \ <= 1) return array;\n    if (array[0] + array[array.size() - 1] % 2) {\n   \
    \     sort(array.begin(), array.end());\n    } else {\n        sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    }\n    return array;", "  bool ascending\
    \ = false;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    ascending\
    \ = true;\n  }\n  if(ascending) {\n    std::sort(array.begin(), array.end());\n\
    \  } else {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  }\n  return array;", "\tassert(array.size()>=0);\n\tassert(array.size()<=1e5);\n\
    \tfor(long i = 0; i < array.size(); i++) {\n\t\tassert(array[i]>=0);\n\t\tassert(array[i]<=1e9);\n\
    \t}\n\tstd::vector<long> res;\n\tif(array.size()==0) return res;\n\tfor(long i\
    \ = 0; i < array.size(); i++) {\n\t\tif(array[0]+array[array.size()-1]%2!=0) {\n\
    \t\t\tstd::sort(array.begin(), array.end());\n\t\t} else {\n\t\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t\t}\n\t}\n\treturn array;", "    auto\
    \ start = array.front();\n    auto end = array.back();\n    if ((start + end)\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "  int v1 = array[0];\n  int v2 = array[array.size()-1];\n  int sum\
    \ = v1 + v2;\n  if(sum % 2 != 0){\n    std::sort(array.begin(), array.end());\n\
    \  }else{\n    std::sort(array.begin(), array.end(), std::greater<int>());\n \
    \ }\n  return array;", "    int v = array.size();\n    bool condition = false;\n\
    \    if(v>1) {\n        if((array[0]+array[v-1])%2 == 0)\n            condition\
    \ = true;\n    }\n    if(condition) {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    }\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;", "    if (array.size()==0) {\n        return array;\n    }\n\
    \    if (array.size()==1) {\n        return array;\n    }\n    if ((array[0]+array[array.size()-1])%2==0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  }\n    else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    int first;\n    int last;\n    int compare;\n    std::vector<long>\
    \ cpp = array;\n    assert(array.size() == 0 || array.size() == 1);\n    if (array.size()\
    \ == 0 || array.size() == 1) {\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n        std::sort(cpp.begin(), cpp.end(),\
    \ std::greater<int>());\n    } else {\n        std::sort(cpp.begin(), cpp.end());\n\
    \    }\n    return cpp;", "    // Your code goes here...\n    std::vector<long>\
    \ result;\n    if (array.size() == 0)\n    {\n        return result;\n    }\n\
    \    std::sort(array.begin(), array.end());\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n    {\n        std::reverse(array.begin(), array.end());\n\
    \    }\n    return array;", "\tstd::vector<long> res(array);\n\tif(res.size()\
    \ != 0) {\n\t\tif((res[0] + res[res.size() - 1]) % 2 == 0) {\n\t\t\tstd::sort(res.begin(),\
    \ res.end(), std::greater<int>());\n\t\t} else {\n\t\t\tstd::sort(res.begin(),\
    \ res.end());\n\t\t}\n\t}\n\treturn res;", "\tauto sum = [](auto a, auto b) {\
    \ return a + b; };\n\tauto sumRange = std::accumulate(array.begin(), array.end(),\
    \ 0);\n\tauto isOdd = [](auto a) { return a % 2; };\n\tauto isEven = [](auto a)\
    \ { return !(a % 2); };\n\tstd::sort(array.begin(), array.end(), (isOdd(sumRange)\
    \ ? isOdd : isEven));\n\treturn array;", "    if(array.size()==0 || array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;", "    std::vector<long>\
    \ array_copy(array);\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array_copy.begin(), array_copy.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array_copy.begin(), array_copy.end());\n    }\n\
    \    return array_copy;", "\tif (array.size() == 0)\n\t\treturn array;\n\tint\
    \ odd = 0;\n\tif ((array[0] + array[array.size() - 1]) % 2 == 0)\n\t\todd = 1;\n\
    \tstd::sort(array.begin(), array.end());\n\tif (odd)\n\t\tstd::reverse(array.begin(),\
    \ array.end());\n\treturn array;", "  int c = array.size();\n  if(c == 0 || c\
    \ == 1)\n    return array;\n  else if((array[0] + array[c-1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;", "    // your code here\n    std::vector<long> a = array;\n\
    \    if (a.size() < 2) return a;\n    long first_value = a[0];\n    long last_value\
    \ = a[a.size() - 1];\n    if ((first_value + last_value) % 2 == 0) {\n       \
    \ std::sort(a.begin(), a.end(), std::greater<long>());\n    } else {\n       \
    \ std::sort(a.begin(), a.end());\n    }\n    return a;", "    if(array.size()\
    \ == 0 || array.size() == 1)\n    {\n        return array;\n    }\n    else\n\
    \    {\n        if((array[0] + array[array.size() - 1]) % 2 == 0)\n        {\n\
    \            std::sort(array.begin(), array.end(), std::greater<int>());\n   \
    \     }\n        else\n        {\n            std::sort(array.begin(), array.end());\n\
    \        }\n    }\n    return array;", "    if(array.size()==0){\n        return\
    \ array;\n    }\n    if(array.size()==1){\n        return array;\n    }\n    if((array[0]+array[array.size()-1])%2==0){\n\
    \        for(int i=0;i<array.size()/2;i++){\n            int p =array[i];\n  \
    \          array[i]=array[array.size()-1-i];\n            array[array.size()-1-i]=p;\n\
    \        }\n    }\n    return array;", "    int sum = 0;\n    for(int i = 0; i\
    \ < array.size(); i++) {\n        sum += array[i];\n    }\n    if(sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  }\n    else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    std::vector<long>::iterator start;\n    std::vector<long>::iterator\
    \ end;\n    start = array.begin();\n    end = array.end() - 1;\n    if((*start\
    \ + *end) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    else {\n        std::sort(array.begin(), array.end());\n    }\n  \
    \  return array;", "    if(array.size() == 0 || array.size() == 1)\n        return\
    \ array;\n    long indexSum = array[0] + array[array.size() - 1];\n    if(indexSum\
    \ % 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;",
  "  if(array.size()<=1)\n    return array;\n  // +1 if even and -1 if odd\n  int\
    \ check = array[0]+array[array.size()-1]%2?-1:1;\n  std::sort(array.begin(),array.end(),[check](long\
    \ a,long b){\n    return (a+b)%2?check==-1:check==1;\n  });\n  return array;",
  "    if(array.size() == 0) return array;\n    if(array.size() == 1) return array;\n\
    \    int first = array[0];\n    int last = array[array.size()-1];\n    int sum\
    \ = first + last;\n    std::sort(array.begin(), array.end());\n    std::vector<long>\
    \ sorted;\n    if(sum % 2 == 0){\n        for(int i = array.size()-1; i >= 0;\
    \ i--){\n            sorted.push_back(array[i]);\n        }\n    }else{\n    \
    \    for(int i = 0; i < array.size(); i++){\n            sorted.push_back(array[i]);\n\
    \        }\n    }\n    return sorted;", "  if(array.size() == 0 || array.size()\
    \ == 1) return array;\n  std::vector<long> result;\n  if(array[0] % 2 == array[array.size()\
    \ - 1] % 2) {\n    if(array[0] % 2 == 0) {\n      std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    } else {\n      std::sort(array.begin(), array.end());\n\
    \    }\n  }\n  return array;", "\t// see if the sum of first and last is odd or\
    \ even\n\tint sum = array[0] + array[array.size() - 1];\n\t// if odd, sort in\
    \ ascending order\n\tif (sum % 2 == 1) {\n\t\tstd::sort(array.begin(), array.end());\n\
    \t}\n\t// if even, sort in descending order\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n\t}\n\treturn array;", "\tstd::vector<long>\
    \ arraySort;\n\tif (array.size() != 0) {\n\t\tif ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n\t\t\tstd::sort(array.begin(), array.end(), std::greater<int>());\n\
    \t\t}\n\t\telse {\n\t\t\tstd::sort(array.begin(), array.end());\n\t\t}\n\t}\n\t\
    return array;", "  //cout << \"checking \" << array[0] << \" \" << array[array.size()-1]\
    \ << endl;\n  long first, last;\n  first = array[0];\n  last = array[array.size()-1];\n\
    \  long sum = first + last;\n  if(sum % 2 == 0) {\n    std::reverse(array.begin(),\
    \ array.end());\n  }\n  return array;", "    // TODO: Sort the given vector and\
    \ return it\n    std::vector<long> res = array;\n    int sum = array[0] + array[array.size()\
    \ - 1];\n    if (sum % 2 == 0) {\n        std::sort(res.begin(), res.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(res.begin(), res.end());\n    }\n    return res;",
  "    if (array.size() == 0) return array;\n    if (array.size() == 1) return array;\n\
    \    std::vector<long> result;\n    bool odd_even = (array[0] + array[array.size()\
    \ - 1]) % 2;\n    if (odd_even) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    return array;", "    // Insert your code here\n    if(array.size()\
    \ <= 1) return array;\n    if((array[0] + array[array.size() - 1]) % 2) {\n  \
    \      std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    }\n    return array;", "  std::vector<long>\
    \ ret(array);\n  if (std::accumulate(ret.begin(), ret.end(), 0) % 2 == 0) {\n\
    \    std::sort(ret.begin(), ret.end(), std::greater<long>());\n  } else {\n  \
    \  std::sort(ret.begin(), ret.end());\n  }\n  return ret;", "    // sort the vector\
    \ by:\n    // if the sum of the first and last value is even, return the vector\
    \ in descending order\n    // else, return the vector in ascending order\n   \
    \ // split the vector into positive and negative integers and sort accordingly\n\
    \    std::vector<long> positive;\n    std::vector<long> negative;\n    for (std::vector<long>::iterator\
    \ it = array.begin(); it != array.end(); ++it) {\n        if (*it >= 0) {\n  \
    \          positive.push_back(*it);\n        } else {\n            negative.push_back(*it);\n\
    \        }\n    }\n    // sort the vectors accordingly\n    sort(positive.begin(),\
    \ positive.end());\n    sort(negative.begin(), negative.end(), greater<long>());\n\
    \    // append the two vectors together in order\n    for (std::vector<long>::iterator\
    \ it = negative.begin(); it != negative.end(); ++it) {\n        positive.push_back(*it);\n\
    \    }\n    return positive;", "    std::sort(array.begin(), array.end());\n \
    \   if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;", "    if(array.size()==0)\n       \
    \ return array;\n    if(array.size()==1)\n        return array;\n    std::vector<long>\
    \ temp;\n    long sum = array[0] + array[array.size()-1];\n    if(sum%2!=0)\n\
    \    {\n        for(long i=0;i<array.size();i++)\n        {\n            temp.push_back(array[i]);\n\
    \        }\n        std::sort(temp.begin(),temp.end());\n    }\n    else\n   \
    \ {\n        for(long i=0;i<array.size();i++)\n        {\n            temp.push_back(array[i]);\n\
    \        }\n        std::sort(temp.begin(),temp.end(),std::greater<long>());\n\
    \    }\n    return temp;", "\tif (array.size() <= 1) return array;\n\tint index_first\
    \ = 0;\n\tint index_last = array.size() - 1;\n\tint sum = array[index_first] +\
    \ array[index_last];\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(),\
    \ std::greater<int>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\
    \t}\n\treturn array;", "  if(array.size()==0)\n    return {};\n  if(array.size()==1)\n\
    \    return array;\n  if((array[0]+array[array.size()-1])%2==0)\n    sort(array.begin(),array.end(),greater<int>());\n\
    \  else\n    sort(array.begin(),array.end());\n  return array;", "\tint n = array.size();\n\
    \tif (n <= 1)\n\t\treturn array;\n\tif (array[0] + array[n - 1] % 2)\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\telse\n\t\tstd::sort(array.begin(), array.end(), std::greater<int>());\n\
    \treturn array;", "    std::vector<long> result;\n    if(array.size() == 0) return\
    \ result;\n    if(array.size() == 1) return array;\n    int pos = 0;\n    int\
    \ neg = 0;\n    // result.resize(array.size());\n    // std::cout << array.size()\
    \ << std::endl;\n    if(array[0] % 2 == 0 && array[array.size() - 1] % 2 == 0)\n\
    \    {\n        neg = 1;\n    }\n    else if(array[0] % 2 != 0 && array[array.size()\
    \ - 1] % 2 != 0)\n    {\n        pos = 1;\n    }\n    if(pos == 1)\n    {\n  \
    \      for(int i = 0; i < array.size(); i++)\n        {\n            result.push_back(array[i]);\n\
    \        }\n        std::sort(result.begin(), result.end());\n    }\n    else\
    \ if(neg == 1)\n    {\n        for(int i = 0; i < array.size(); i++)\n       \
    \ {\n            result.push_back(array[i]);\n        }\n        std::sort(result.begin(),\
    \ result.end(), std::greater<int>());\n    }\n    return result;", "  if(array.size()>0){\n\
    \    long sum=(array[0]+array[array.size()-1]);\n    sort(array.begin(),array.end());\n\
    \    if(sum%2!=0){\n      return array;\n    }\n    else{\n      std::reverse(array.begin(),array.end());\n\
    \      return array;\n    }\n  }\n  else{\n    return array;\n  }", "  // Write\
    \ your code here\n  std::vector<long> vec = array;\n  if(vec.size()>1){\n    if(vec[0]+vec[vec.size()-1]%2==0){\n\
    \      sort(vec.begin(),vec.end(),greater<int>());\n    }\n    else{\n      sort(vec.begin(),vec.end());\n\
    \    }\n  }\n  return vec;", "\t// we should count the sum of first index value\
    \ and last index value.\n\tint sum = array[0] + array[array.size() - 1];\n\t//\
    \ if odd.\n\tif (sum % 2 == 1) {\n\t\t// sort ascending order.\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\t// if even.\n\telse {\n\t\t// sort descending order.\n\
    \t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\t}\n\t// return\
    \ result.\n\treturn array;", "  if(array.size()==0 || array.size()==1) return\
    \ array;\n  else if((array[0]+array[array.size()-1])%2==0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    return array;\n  }\n  else {\n    std::sort(array.begin(),\
    \ array.end());\n    return array;\n  }", "  int sum = array[0] + array[array.size()\
    \ - 1];\n  if (sum % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "  if (array.size() > 0) {\n    if ((array[0] + array[array.size() - 1]) % 2 ==\
    \ 0) {\n      std::sort(array.begin(), array.end(), std::greater<long>());\n \
    \   } else {\n      std::sort(array.begin(), array.end());\n    }\n  }\n  return\
    \ array;", "\t\tint t,l=array.size();\n\t\tfor(int i=0;i<l-1;i++)\n\t\t\t\tfor(int\
    \ j=0;j<l-i-1;j++)\n\t\t\t\t\t\tif(array[j]>array[j+1])\n\t\t\t\t\t\t{\n\t\t\t\
    \t\t\t\t\tt=array[j];\n\t\t\t\t\t\t\t\tarray[j]=array[j+1];\n\t\t\t\t\t\t\t\t\
    array[j+1]=t;\n\t\t\t\t\t\t}\n\t\tif((array[0]+array[l-1])%2==0)\n\t\t{\n\t\t\t\
    \tfor(int i=0;i<l/2;i++)\n\t\t\t\t{\n\t\t\t\t\t\tt=array[i];\n\t\t\t\t\t\tarray[i]=array[l-i-1];\n\
    \t\t\t\t\t\tarray[l-i-1]=t;\n\t\t\t\t}\n\t\t}\n\t\treturn array;", "  int first\
    \ = array[0];\n  int last = array[array.size() - 1];\n  if ((first + last) % 2\
    \ == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "\t\n\tif (array.size() == 0) {\n\t\treturn array;\n\t}\n\telse if (array.size()\
    \ == 1) {\n\t\treturn array;\n\t}\n\telse {\n\t\tif ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n\t\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\
    \t\t\treturn array;\n\t\t}\n\t\telse {\n\t\t\tstd::sort(array.begin(), array.end());\n\
    \t\t\treturn array;\n\t\t}\n\t}", "    std::sort(array.begin(), array.end());\n\
    \    std::reverse(array.begin(), array.end());\n    return array;", "    if(array.size()\
    \ == 0)\n    {\n        return array;\n    }\n    if(array.size() == 1)\n    {\n\
    \        return array;\n    }\n    int sum = array[0] + array[array.size() - 1];\n\
    \    if(sum % 2 == 0)\n    {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    else\n    {\n        std::sort(array.begin(), array.end());\n    }\n\
    \    return array;", "  if (array.size() == 0) {\n    return array;\n  }\n  long\
    \ first = array[0];\n  long last = array[array.size() - 1];\n  long sum = first\
    \ + last;\n  if (sum % 2 == 0) {\n    // descending\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    // ascending\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "    // your code here\n    long sum1\
    \ = array[0]+array[array.size()-1];\n    if(sum1%2==0)\n    {\n      std::sort(array.begin(),array.end(),std::greater<int>());\n\
    \    }\n    else\n    {\n      std::sort(array.begin(),array.end());\n    }\n\
    \    return array;", "    if (array.size() > 0) {\n        std::vector<long>::iterator\
    \ first = array.begin();\n        std::vector<long>::iterator last = array.end()\
    \ - 1;\n        if ((*first + *last) % 2 == 0) {\n            std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n        } else {\n            std::sort(array.begin(),\
    \ array.end());\n        }\n    }\n    return array;", "    int sum = 0;\n   \
    \ for(int i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n \
    \   if(sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n    }\n\
    \    else {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    return array;", "  // TODO\n  if(array.size()<2)return array;\n  int\
    \ sum = array[0]+array[array.size()-1];\n  if(sum%2==0){\n    std::sort(array.begin(),array.end(),std::greater<int>());\n\
    \  }else{\n    std::sort(array.begin(),array.end());\n  }\n  return array;", " \
    \   std::vector<long> v;\n    if(array.size() == 0)\n        return v;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;",
  "    int f = array[0];\n    int l = array[array.size()-1];\n    int sum = f + l;\n\
    \    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), std::greater<int>());\n\
    \    }\n    else{\n        sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    if((array[0]+array[array.size()-1])%2==0){\n        std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \    }\n    else{\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;", "  sort(array.begin(), array.end());\n  if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n    reverse(array.begin(), array.end());\n  return array;",
  "  std::vector<long> res;\n  if (array.size() == 0) {\n    return res;\n  }\n  if\
    \ (array.size() == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n    sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    sort(array.begin(), array.end());\n  }\n  return array;", "\t\
    int n = array.size();\n\tif (n == 0) {\n\t\treturn array;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn array;\n\t}\n\tif (n == 2) {\n\t\tif (array[0] > array[1]) {\n\
    \t\t\tstd::swap(array[0], array[1]);\n\t\t}\n\t\treturn array;\n\t}\n\tstd::sort(array.begin(),\
    \ array.end());\n\tstd::vector<long> ret(n);\n\tint front = 0;\n\tint back = n\
    \ - 1;\n\tint k = n - 1;\n\tif ((array[0] + array[n - 1]) % 2 == 0) {\n\t\twhile\
    \ (k >= 0) {\n\t\t\tret[k] = array[back];\n\t\t\tk--;\n\t\t\tif (k >= 0) {\n\t\
    \t\t\tret[k] = array[front];\n\t\t\t\tk--;\n\t\t\t}\n\t\t\tfront++;\n\t\t\tback--;\n\
    \t\t}\n\t}\n\telse {\n\t\twhile (k >= 0) {\n\t\t\tret[k] = array[front];\n\t\t\
    \tk--;\n\t\t\tif (k >= 0) {\n\t\t\t\tret[k] = array[back];\n\t\t\t\tk--;\n\t\t\
    \t}\n\t\t\tfront++;\n\t\t\tback--;\n\t\t}\n\t}\n\treturn ret;", "    if(array.size()\
    \ <= 1) return array;\n    bool is_odd = (array[0] + array[array.size() - 1])\
    \ % 2;\n    std::sort(array.begin(), array.end(), [is_odd](const long &left, const\
    \ long &right) {\n        return is_odd ? left < right : left > right;\n    });\n\
    \    return array;", "    if((array[0]+array[array.size()-1])%2==0){\n       \
    \ std::sort(array.begin(),array.end(),std::greater<int>());\n    }else{\n    \
    \    std::sort(array.begin(),array.end());\n    }\n    return array;", "  // your\
    \ code here\n  std::sort(array.begin(), array.end());\n  if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n    reverse(array.begin(), array.end());\n  }\n  return array;",
  "    if(array.size()==0 || array.size()==1)\n        return array;\n    if((array[0]+array[array.size()-1])%2)\n\
    \        sort(array.begin(),array.end());\n    else\n        sort(array.begin(),array.end(),greater<int>());\n\
    \    return array;", "\tif(array.size()>0)\n\t{\n\t\tif((array[0]+array[array.size()-1])%2!=0)\n\
    \t\t{\n\t\t\tstd::sort(array.begin(),array.end());\n\t\t}\n\t\telse{\n\t\t\tstd::sort(array.begin(),array.end(),std::greater<long>());\n\
    \t\t}\n\t}\n\treturn array;", "  // Write your code here\n  // First pass\n  if(array.size()\
    \ == 0 || array.size() == 1)\n    return array;\n  std::vector<long> sorted_array;\n\
    \  sorted_array = array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n\
    \    std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n\
    \  else\n    std::sort(sorted_array.begin(), sorted_array.end());\n  return sorted_array;",
  "  bool ascending = ((array.front() + array.back()) % 2 == 0);\n  std::sort(array.begin(),\
    \ array.end(), [ascending](long left, long right) {\n    return ascending ? left\
    \ < right : left > right;\n  });\n  return array;", "    if(array.size() == 0\
    \ || array.size() == 1)\n        return array;\n    long sum = array[0] + array[array.size()\
    \ - 1];\n    if(sum%2 != 0)\n        sort(array.begin(), array.end());\n    else\n\
    \        sort(array.begin(), array.end(), std::greater<long>());\n    return array;",
  "    if(array.size()==0 || array.size()==1) return array;\n    if((array[0]+array[array.size()-1])%2==0){\n\
    \        std::sort(array.begin(),array.end(),std::greater<int>());\n    }else{\n\
    \        std::sort(array.begin(),array.end());\n    }\n    return array;", " \
    \   std::sort(array.begin(), array.end());\n    for (int i = 0; i < array.size()/2;\
    \ i++) {\n        long temp = array[i];\n        array[i] = array[array.size()-1-i];\n\
    \        array[array.size()-1-i] = temp;\n    }\n    return array;", "  int n\
    \ = array.size();\n  std::vector<long> v;\n  if(n % 2 == 0){\n    sort(array.begin(),\
    \ array.end(), greater<long>());\n    v = array;\n  }\n  else{\n    sort(array.begin(),\
    \ array.end());\n    v = array;\n  }\n  return v;", "    if(array.size()==0)\n\
    \        return array;\n    if(array.size()==1)\n        return array;\n    if((array[0]+array[array.size()-1])%2!=0)\n\
    \        sort(array.begin(),array.end());\n    else\n        sort(array.begin(),array.end(),greater<long>());\n\
    \    return array;", "\tint left = 0;\n\tint right = array.size() - 1;\n\tif (array.size()\
    \ == 0) {\n\t\treturn {};\n\t}\n\telse if (array.size() == 1) {\n\t\treturn array;\n\
    \t}\n\telse if ((array[left] + array[right]) % 2 == 0) {\n\t\tsort(array.begin(),\
    \ array.end(), [](const long &left, const long &right) {return left > right; });\n\
    \t\treturn array;\n\t}\n\telse {\n\t\tsort(array.begin(), array.end(), [](const\
    \ long &left, const long &right) {return left < right; });\n\t\treturn array;\n\
    \t}", "  int n = array.size();\n  if( n == 0 || n == 1)\n    return array;\n \
    \ int f = array[0], l = array[n-1];\n  if( (f+l) % 2 != 0)\n    sort(array.begin(),\
    \ array.end());\n  else\n    sort(array.begin(), array.end(), std::greater<long>());\n\
    \  return array;", "  std::sort(array.begin(), array.end());\n  if(array.size()\
    \ > 0 && array[0] % 2 != array[array.size() - 1] % 2) {\n    std::reverse(array.begin(),\
    \ array.end());\n  }\n  return array;", "  std::vector<long> result;\n  if(array.size()\
    \ == 0) return result;\n  if(array.size() == 1) return array;\n  if(array.size()\
    \ > 1) {\n    std::sort(array.begin(), array.end());\n    if((array[0] + array[array.size()\
    \ - 1]) % 2 != 0) {\n      return array;\n    }\n    else {\n      std::reverse(array.begin(),\
    \ array.end());\n      return array;\n    }\n  }", "  std::vector<long> temp_vect;\n\
    \  temp_vect = array;\n  if ( (array[0] + array[array.size()-1]) % 2 == 0 ) {\n\
    \    std::sort(temp_vect.begin(), temp_vect.end(), [](int i, int j) { return i\
    \ > j; });\n  } else {\n    std::sort(temp_vect.begin(), temp_vect.end(), [](int\
    \ i, int j) { return i < j; });\n  }\n  return temp_vect;", "  if (array.size()\
    \ == 0) return array;\n  int isOdd = (array[0] + array[array.size() - 1]) % 2;\n\
    \  if (isOdd)\n    std::sort(array.begin(), array.end());\n  else\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  return array;", "    int a = 0;\n   \
    \ int b = 0;\n    int length = 0;\n    std::vector<long> ret;\n    length = array.size();\n\
    \    a = array[0];\n    b = array[length - 1];\n    ret = array;\n    if((a +\
    \ b) % 2 == 0) {\n        sort(ret.begin(), ret.end(), greater<int>());\n    }\n\
    \    else {\n        sort(ret.begin(), ret.end());\n    }\n    return ret;", " \
    \ if(array.size()<=1) return array;\n  int sum=array[0]+array[array.size()-1];\n\
    \  if(sum%2!=0) sort(array.begin(),array.end());\n  else sort(array.begin(),array.end(),std::greater<int>());\n\
    \  return array;", "    assert(array.size() >= 0);\n    if(array.size() <= 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     sort(array.begin(), array.end(), std::greater<int>());\n    }\n    else\
    \ {\n        sort(array.begin(), array.end());\n    }\n    return array;", " \
    \ if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n    return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;", "    if (array.size() == 0) return array;\n    if (array.size()\
    \ == 1) return array;\n    auto last = array.size() - 1;\n    if ((array[0] +\
    \ array[last]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    if(array.size()==0){\n        return {};\n    }\n    if(array.size()==1){\n\
    \        return array;\n    }\n    std::sort(array.begin(),array.end());\n   \
    \ long firstindex = array[0];\n    long lastindex = array[array.size()-1];\n \
    \   if((firstindex+lastindex)%2==0){\n        std::reverse(array.begin(),array.end());\n\
    \    }\n    return array;", "    std::vector<long> new_array;\n    if(array.size()\
    \ == 0)\n        return new_array;\n    if(array.size() == 1)\n        return\
    \ array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0)\n    {\n     \
    \   std::sort(array.begin(), array.end(), std::greater<long>());\n    }\n    else\n\
    \    {\n        std::sort(array.begin(), array.end());\n    }\n    return array;",
  "    if (array.size() <= 1) return array;\n    std::vector<long> copy = array;\n\
    \    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(copy.begin(),\
    \ copy.end(), [](long a, long b) { return a > b; });\n    } else {\n        std::sort(copy.begin(),\
    \ copy.end());\n    }\n    return copy;", "    std::vector<long> v;\n    if(array.size()==0)\n\
    \    {\n        return v;\n    }\n    else if(array.size()==1)\n    {\n      \
    \  return array;\n    }\n    else\n    {\n        if((array[0]+array[array.size()-1])%2==0)\n\
    \        {\n            sort(array.begin(),array.end(),greater<long>());\n   \
    \         return array;\n        }\n        else\n        {\n            sort(array.begin(),array.end());\n\
    \            return array;\n        }\n    }", "\tif(array.size()==0)\n\t\treturn\
    \ array;\n\telse if(array.size()==1)\n\t\treturn array;\n\telse{\n\t\tif((array[0]+array[array.size()-1])%2==0){\n\
    \t\t\tlong value=array[0];\n\t\t\tarray[0]=array[array.size()-1];\n\t\t\tarray[array.size()-1]=value;\n\
    \t\t}\n\t\tstd::sort(array.begin(),array.end());\n\t\treturn array;\n\t}", " \
    \   std::sort(array.begin(), array.end());\n    if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n        std::reverse(array.begin(), array.end());\n    return\
    \ array;", "  // your code here.\n  int n = array.size();\n  std::vector<long>\
    \ arr(n);\n  if(n == 0 || n == 1)\n  {\n    return array;\n  }\n  if((array[0]\
    \ + array[n-1]) % 2 == 0)\n  {\n    sort(array.begin(), array.end(), greater<long>());\n\
    \  }\n  else\n  {\n    sort(array.begin(), array.end());\n  }\n  return array;",
  "  int sum = array[0] + array[array.size() - 1];\n  if (sum % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "    if(array.size()<2){\n        return\
    \ array;\n    }\n    int odd = 0;\n    int even = 0;\n    for(auto item:array){\n\
    \        if(item%2==0){\n            even++;\n        }\n        else{\n     \
    \       odd++;\n        }\n    }\n    std::vector<long> oddVector;\n    std::vector<long>\
    \ evenVector;\n    for(auto item:array){\n        if(item%2==0){\n           \
    \ evenVector.push_back(item);\n        }\n        else{\n            oddVector.push_back(item);\n\
    \        }\n    }\n    sort(oddVector.begin(),oddVector.end());\n    sort(evenVector.begin(),evenVector.end(),greater<long>());\n\
    \    int index = 0;\n    for(int i=0;i<odd;i++){\n        array[index++] = oddVector[i];\n\
    \    }\n    for(int i=0;i<even;i++){\n        array[index++] = evenVector[i];\n\
    \    }\n    return array;", "    if(array.size() <= 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;", "  if(array.size()<=1)\n  return array;\n\
    \  int sum=array[0]+array[array.size()-1];\n  if(sum%2==0)\n  {\n    std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \  }\n  else\n  {\n    std::sort(array.begin(),array.end());\n  }\n  return array;",
  "  if (array.size() == 0 || array.size() == 1) {\n    return array;\n  }\n  int\
    \ last_index = array.size() - 1;\n  int first_index = 0;\n  long first_value =\
    \ array[first_index];\n  long last_value = array[last_index];\n  long sum = first_value\
    \ + last_value;\n  std::vector<long> result;\n  for (int i = 0; i < array.size();\
    \ i++) {\n    if (sum % 2 == 0) {\n      result.push_back(array[last_index]);\n\
    \      last_index--;\n    } else {\n      result.push_back(array[first_index]);\n\
    \      first_index++;\n    }\n  }\n  return result;", "    if (array.size() >\
    \ 1 && array[0] + array[array.size() - 1] % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "  int sum = array[0] + array[array.size()\
    \ - 1];\n  if (sum % 2 == 0) {\n    std::sort(array.begin(), array.end(), [](const\
    \ long &lhs, const long &rhs) {\n      return lhs > rhs;\n    });\n  } else {\n\
    \    std::sort(array.begin(), array.end(), [](const long &lhs, const long &rhs)\
    \ {\n      return lhs < rhs;\n    });\n  }\n  return array;", "    long sum =\
    \ array[0] + array[array.size() - 1];\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "    // TODO: Write - Your - Code\n\
    \    if (array.size() <= 1) {\n        return array;\n    }\n\n    int first =\
    \ array[0];\n    int last = array[array.size() - 1];\n    int sum = first + last;\n\
    \    std::sort(array.begin(), array.end());\n    if (sum % 2 == 0) {\n       \
    \ std::reverse(array.begin(), array.end());\n    }\n    return array;", "  //\
    \ your code here\n  if(array.size()<=1)\n    return array;\n  int sum = array[0]\
    \ + array[array.size()-1];\n  if(sum%2)\n    sort(array.begin(), array.end());\n\
    \  else\n    sort(array.begin(), array.end(), greater<int>());\n  return array;",
  "    if(array.size() <= 1) {\n        return array;\n    }\n    int first = array[0];\n\
    \    int last = array[array.size() - 1];\n    if((first + last) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;",
  "    if (array.size()==0) return array;\n    int a=array[0];\n    int b=array[array.size()-1];\n\
    \    if ((a+b)%2==0) {\n        std::sort(array.begin(), array.end(), greater<int>());\n\
    \    }\n    else {\n        std::sort(array.begin(), array.end());\n    }\n  \
    \  return array;", "    std::sort(array.begin(), array.end());\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 != 0)\n        return array;\n    std::reverse(array.begin(),\
    \ array.end());\n    return array;", "    int len = array.size();\n    if(len\
    \ == 0 || len == 1) return array;\n    if((array[0] + array[len-1]) % 2 == 0)\
    \ {\n        sort(array.begin(), array.end(), std::greater<int>());\n    }\n \
    \   else {\n        sort(array.begin(), array.end());\n    }\n    return array;",
  "    std::vector<long> newArray;\n    if(array.size()<=1)\n        return array;\n\
    \    else if((array[0]+array[array.size()-1])%2==0)\n    {\n        std::reverse(array.begin(),array.end());\n\
    \        return array;\n    }\n    else if((array[0]+array[array.size()-1])%2!=0)\n\
    \    {\n        return array;\n    }\n    // return {};", "  // TODO: Implement\
    \ me\n  return array;", "    if(array.size() > 1) {\n        std::sort(array.begin(),\
    \ array.end());\n        if((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \            std::reverse(array.begin(), array.end());\n        }\n    }\n   \
    \ return array;", "  // Your code here\n  std::sort(array.begin(), array.end());\n\
    \  if ( (array[0] + array[array.size()-1]) % 2 == 0) {\n    std::reverse(array.begin(),\
    \ array.end());\n  }\n  return array;", "    std::vector<long> vec;\n    if(array.size()\
    \ <= 1){\n        return array;\n    }\n    if(array[0] + array[array.size() -\
    \ 1] % 2 == 0){\n        for(int i = array.size() - 1; i >= 0; i--){\n       \
    \     vec.push_back(array[i]);\n        }\n    }\n    else{\n        for(int i\
    \ = 0; i < array.size(); i++){\n            vec.push_back(array[i]);\n       \
    \ }\n    }\n    return vec;", "  if (array.size() <= 1) {\n    return array;\n\
    \  }\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "    if(array.size() < 2)\n        return\
    \ array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        sort(array.begin(), array.end());\n\
    \    return array;", "  // Sort the vector\n  // Return the sorted vector", " \
    \   std::vector<long> ret = array;\n    if (ret.size() == 0 || ret.size() == 1)\n\
    \        return ret;\n    if ((ret[0] + ret[ret.size() - 1]) % 2)\n        std::sort(ret.begin(),\
    \ ret.end());\n    else\n        std::sort(ret.begin(), ret.end(), [](long a,\
    \ long b) {\n            return a > b;\n        });\n    return ret;", "    bool\
    \ odd = (array[0] + array[array.size() - 1]) % 2;\n    std::sort(array.begin(),\
    \ array.end(), [odd](long a, long b) {\n        return odd ? a < b : a > b;\n\
    \    });\n    return array;", "    bool isEven = (array[0] + array[array.size()\
    \ - 1]) % 2 == 0;\n    if(isEven) {\n        sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    } else {\n        sort(array.begin(), array.end());\n\
    \    }\n    return array;", "    long sum = array[0] + array[array.size() - 1];\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    long s = array[0] + array[array.size() - 1];\n    sort(array.begin(),\
    \ array.end());\n    if (s % 2 == 0) {\n        reverse(array.begin(), array.end());\n\
    \    }\n    return array;", "  int sum = array[0] + array[array.size() - 1];\n\
    \  if (sum % 2 == 0) {\n    sort(array.begin(), array.end(), greater<long>());\n\
    \  } else {\n    sort(array.begin(), array.end());\n  }\n  return array;", " \
    \ std::vector<long> res;\n  std::sort(array.begin(), array.end());\n  if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n    for(int i = array.size() - 1; i\
    \ >= 0; i--) {\n      res.push_back(array[i]);\n    }\n  }\n  else {\n    res\
    \ = array;\n  }\n  return res;", "  if (array.size()<2) return array;\n  if ((array[0]+array[array.size()-1])%2==0)\
    \ {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n  } else\
    \ {\n    std::sort(array.begin(), array.end());\n  }\n  return array;", "    if\
    \ (array.size() <= 1) return array;\n    long sum = array[0] + array[array.size()\
    \ - 1];\n    if (sum % 2 == 0) std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    else std::sort(array.begin(), array.end());\n    return array;", "std::sort(array.begin(),\
    \ array.end());\nreturn array;", "\tif(array.size() <= 1){\n\t\treturn array;\n\
    \t}\n\telse if((array[0] + array[array.size() - 1]) % 2 == 0){\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse{\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "    if(array.size() == 0 || array.size()\
    \ == 1) return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0)\n\
    \        std::sort(array.begin(), array.end(), [](long a, long b) -> bool {return\
    \ a > b;});\n    else\n        std::sort(array.begin(), array.end(), [](long a,\
    \ long b) -> bool {return a < b;});\n    return array;", "    long sum = array[0]\
    \ + array[array.size() - 1];\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "  sort(array.begin(), array.end());\n\
    \  return array;", "    // TODO: Write your code here\n  int n = array.size();\n\
    \  if(n<=1)\n    return array;\n  int odd;\n  if((array[0]+array[n-1])%2 == 0)\n\
    \    odd = 1;\n  else\n    odd = 0;\n  if(odd){\n    sort(array.begin(), array.end());\n\
    \  }\n  else\n    sort(array.begin(), array.end(),greater<int>());\n  return array;",
  "  // your code goes here\n  int n = array.size();\n  int oddSum = 0;\n  for(int\
    \ i = 0; i < n; i++) {\n    oddSum += array[i];\n  }\n  if(oddSum % 2 != 0) {\n\
    \    sort(array.begin(), array.end());\n  } else {\n    sort(array.begin(), array.end(),\
    \ greater<int>());\n  }\n  return array;", "  int n = array.size();\n  if(n ==\
    \ 0){\n    return array;\n  }\n  if(n == 1){\n    return array;\n  }\n  if((array[0]\
    \ + array[n-1]) % 2 != 0){\n    sort(array.begin(), array.end());\n  }\n  else{\n\
    \    sort(array.begin(), array.end(), std::greater<long>());\n  }\n  return array;",
  "    if (array.size() > 1) {\n        if (array[0] + array[array.size() - 1] % 2)\
    \ {\n            std::sort(array.begin(), array.end());\n        } else {\n  \
    \          std::sort(array.begin(), array.end(), std::greater<long>());\n    \
    \    }\n    }\n    return array;", "    // your code here\n    if(array.size()<=1)return\
    \ array;\n    if((array[0]+array[array.size()-1])%2==0){\n        std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \    }\n    else{\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;", "    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ long first = array[0];\n    long last = array[array.size() - 1];\n    if((first\
    \ + last) % 2 != 0)\n        std::sort(array.begin(), array.end());\n    else\
    \ std::sort(array.begin(), array.end(), std::greater<long>());\n    return array;",
  "\tstd::vector<long>::iterator first = array.begin();\n\tstd::vector<long>::iterator\
    \ last = array.end();\n\tstd::vector<long>::iterator mid = first + (last - first)\
    \ / 2;\n\tstd::vector<long>::iterator odd = first;\n\tstd::vector<long>::iterator\
    \ even = mid;\n\tstd::vector<long> result;\n\tif (*first + *(last - 1) % 2 !=\
    \ 0) {\n\t\tfor (std::vector<long>::iterator i = first; i != mid; i++) {\n\t\t\
    \tresult.push_back(*odd);\n\t\t\todd++;\n\t\t}\n\t\tstd::sort(result.begin(),\
    \ result.end());\n\t\tfor (std::vector<long>::iterator i = first; i != mid; i++)\
    \ {\n\t\t\tresult.push_back(*even);\n\t\t\teven++;\n\t\t}\n\t\tstd::sort(result.begin()\
    \ + (mid - first), result.end(), std::greater<long>());\n\t}\n\telse {\n\t\tfor\
    \ (std::vector<long>::iterator i = first; i != mid; i++) {\n\t\t\tresult.push_back(*odd);\n\
    \t\t\todd++;\n\t\t}\n\t\tstd::sort(result.begin(), result.end(), std::greater<long>());\n\
    \t\tfor (std::vector<long>::iterator i = first; i != mid; i++) {\n\t\t\tresult.push_back(*even);\n\
    \t\t\teven++;\n\t\t}\n\t\tstd::sort(result.begin() + (mid - first), result.end());\n\
    \t}\n\treturn result;", "  // your code\n  return array;", "    if (array.size()\
    \ < 2) {\n        return array;\n    }\n    int len = array.size();\n    bool\
    \ isAscending = (array[0] + array[len - 1]) % 2 == 0;\n    if (isAscending) {\n\
    \        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    }\n    return array;", "    if (array.size()\
    \ == 0 || array.size() == 1)\n        return array;\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "\tstd::vector<long> result;\n\tlong odd = 0;\n\tlong even = 0;\n\t\
    for (long i = 0; i < array.size(); i++) {\n\t\tif (array[i] % 2 == 0) {\n\t\t\t\
    result.push_back(array[i]);\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\
    \t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\tstd::vector<long> odd_arr;\n\
    \tfor (long i = 0; i < array.size(); i++) {\n\t\tif (array[i] % 2 != 0) {\n\t\t\
    \todd_arr.push_back(array[i]);\n\t\t}\n\t}\n\tstd::sort(odd_arr.begin(), odd_arr.end());\n\
    \tstd::reverse(odd_arr.begin(), odd_arr.end());\n\tfor (long i = 0; i < odd_arr.size();\
    \ i++) {\n\t\tresult.push_back(odd_arr[i]);\n\t}\n\treturn result;", "    if(array.size()\
    \ == 0)\n        return array;\n    if(array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        reverse(array.begin(),\
    \ array.end());\n    return array;", "    int first=array[0];\n    int last=array[array.size()-1];\n\
    \    if((first+last)%2==0){\n        std::sort(array.begin(),array.end(),std::greater<int>());\n\
    \    }\n    else{\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;", "    // Your code here\n    long sum = array[0] + array[array.size()-1];\n\
    \    if(sum % 2 == 0)\n    {\n        sort(array.begin(), array.end(), std::greater<int>());\n\
    \    }\n    else\n    {\n        sort(array.begin(), array.end());\n    }\n  \
    \  return array;", "    //your code\n    if(array.size()<2)\n        return array;\n\
    \    if((array[0]+array[array.size()-1])%2==0)\n        sort(array.begin(),array.end(),greater<long>());\n\
    \    else\n        sort(array.begin(),array.end());\n    return array;", "  if\
    \ (array.size() <= 1) {\n    return array;\n  }\n  std::vector<long> ret = array;\n\
    \  if ((ret[0] + ret[ret.size() - 1]) % 2 == 0) {\n    std::sort(ret.begin(),\
    \ ret.end(), [](long a, long b) { return a > b; });\n  } else {\n    std::sort(ret.begin(),\
    \ ret.end(), [](long a, long b) { return a < b; });\n  }\n  return ret;", "  \
    \  if(array.size() < 2)\n        return array;\n    std::sort(array.begin(), array.end());\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::reverse(array.begin(),\
    \ array.end());\n    return array;", "    if (array.size()<=1) return array;\n\
    \    if ((array[0]+array[array.size()-1])%2==0)\n    {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    }\n    else\n    {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "    if(array.size() == 0 || array.size()\
    \ == 1) return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        // This is even\n        // So, sort in Descending order\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        // This is odd\n\
    \        // So, sort in Ascending order\n        std::sort(array.begin(), array.end());\n\
    \    }\n    return array;", "  int s=array.size()-1;\n  if(s%2==0){\n    sort(array.begin(),array.end(),greater<long>());\n\
    \  }\n  else{\n    sort(array.begin(),array.end());\n  }\n  return array;", "\t\
    int n = array.size();\n\tif (n == 0) return array;\n\tif (n == 1) return array;\n\
    \tif (array[0] + array[n - 1] % 2 == 0) {\n\t\tsort(array.begin(), array.end(),\
    \ greater<int>());\n\t}\n\telse {\n\t\tsort(array.begin(), array.end());\n\t}\n\
    \treturn array;", "    // your code here\n    int sum = array[0] + array[array.size()-1];\n\
    \    if(sum % 2 == 0)\n    {\n        std::sort(array.begin(), array.end(), [](const\
    \ int& x, const int& y) {\n            return x > y;\n        });\n    }\n   \
    \ else\n    {\n        std::sort(array.begin(), array.end(), [](const int& x,\
    \ const int& y) {\n            return x < y;\n        });\n    }\n    return array;",
  "  int n = array.size();\n  int sum = array[0] + array[n-1];\n  int d = (sum%2 ==\
    \ 0)? 1 : -1;\n  std::sort(array.begin(), array.end(), [d](const int& a, const\
    \ int& b)-> bool{return d*a < d*b;});\n  return array;", "  int first = array[0];\n\
    \  int last = array[array.size() - 1];\n  std::vector<long> sorted = array;\n\
    \  if((first + last) % 2 == 0) {\n    sort(sorted.begin(), sorted.end(), std::greater<long>());\n\
    \  } else {\n    sort(sorted.begin(), sorted.end());\n  }\n  return sorted;",
  "    long n = array.size();\n    if(n == 0)\n        return array;\n    if(n ==\
    \ 1)\n        return array;\n    long sum = array[0] + array[n-1];\n    if(sum\
    \ % 2 == 0)\n        sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        sort(array.begin(), array.end());\n    return array;", "  std::sort(array.begin(),\
    \ array.end());\n  if (array.size() > 0 && array[0] + array[array.size() - 1]\
    \ % 2 != 0) {\n    std::reverse(array.begin(), array.end());\n  }\n  return array;",
  "\tif(array.size() <= 1) {\n\t\treturn array;\n\t}\n\tif((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\
    \t} else {\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\treturn array;",
  '  return array;', "    if(array.size() < 2)\n        return array;\n    if(array[0]\
    \ % 2 == array[array.size() - 1] % 2)\n        return array;\n    if(array[0]\
    \ % 2)\n        std::sort(array.begin(), array.end());\n    else\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    return array;", "    if(array.size()\
    \ == 0 || array.size() == 1) return array;\n    if((array[0] + array[array.size()\
    \ - 1])%2)\n    std::sort(array.begin(), array.end());\n    else\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    return array;", "  if (array.size()\
    \ == 0 || array.size() == 1) {\n    return array;\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n  \
    \    std::reverse(array.begin(), array.end());\n    }\n    return array;\n  }",
  "    if (array.size() < 2 || (array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;",
  "    int n = array.size();\n    if (n == 0 || n == 1)\n        return array;\n \
    \   sort(array.begin(), array.end());\n    if ((array[0] + array[n - 1]) % 2 ==\
    \ 0) {\n        for (int i = 0; i < n / 2; i++) {\n            int temp = array[i];\n\
    \            array[i] = array[n - i - 1];\n            array[n - i - 1] = temp;\n\
    \        }\n    }\n    return array;", "    if(array.size()==0)\n    {\n     \
    \   return array;\n    }\n    if(array.size()==1)\n    {\n        return array;\n\
    \    }\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n        sort(array.begin(),array.end(),greater<long>());\n\
    \    }\n    else\n    {\n        sort(array.begin(),array.end());\n    }\n   \
    \ return array;", "  // sort(array.begin(), array.end());\n  for (long i = 0;\
    \ i < array.size(); i++) {\n    for (long j = i + 1; j < array.size(); j++) {\n\
    \      if (array[i] > array[j]) {\n        long temp = array[i];\n        array[i]\
    \ = array[j];\n        array[j] = temp;\n      }\n    }\n  }\n  if (array.front()\
    \ + array.back() % 2 == 0) {\n    reverse(array.begin(), array.end());\n  }\n\
    \  return array;", "  long sum = array[0] + array[array.size() - 1];\n  if (sum\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "    if(array.size() == 0 || array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;", "    std::sort(array.begin(), array.end());\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::reverse(array.begin(), array.end());\n\
    \    return array;", "  if(array.size() > 1){\n    int a = array[0];\n    int\
    \ b = array[array.size()-1];\n    if((a+b)%2 == 0){\n      std::sort(array.begin(),\
    \ array.end(), [](const long &a, const long &b){return a > b;});\n    }else{\n\
    \      std::sort(array.begin(), array.end(), [](const long &a, const long &b){return\
    \ a < b;});\n    }\n  }\n  return array;", "    // a simple lambda function to\
    \ compare two elements\n    auto compare = [](long a, long b) {\n        // if\
    \ sum of array elements is odd then return the result of \n        // the comparison\
    \ between the elements\n        if ((array[0] + array[array.size() - 1]) % 2 ==\
    \ 1) {\n            return a < b;\n        }\n        // if sum of array elements\
    \ is even then return the result of \n        // the comparison between the elements\n\
    \        else {\n            return a > b;\n        }\n    };\n    // sort the\
    \ given array with the compare function\n    std::sort(array.begin(), array.end(),\
    \ compare);\n    // return the result\n    return array;", "\tint n = array.size();\n\
    \tstd::vector<long> result(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tresult[i]\
    \ = array[i];\n\t}\n\tstd::sort(result.begin(), result.end());\n\tif ((array[0]\
    \ + array[n - 1]) % 2 == 0) {\n\t\tstd::reverse(result.begin(), result.end());\n\
    \t}\n\treturn result;", "    if (array.size() <= 1) {\n        return array;\n\
    \    }\n    std::sort(array.begin(), array.end());\n    std::reverse(array.begin(),\
    \ array.end());\n    if (array.size() % 2 != 0) {\n        std::reverse(array.begin(),\
    \ array.begin() + array.size() / 2 + 1);\n    } else {\n        std::reverse(array.begin(),\
    \ array.begin() + array.size() / 2);\n    }\n    return array;", "    assert(array.size()\
    \ > 0);\n    std::sort(array.begin(), array.end());\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n        reverse(array.begin(), array.end());\n    return array;",
  "  if(array.size() == 0 || array.size() == 1)\n    return array;\n  if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;", "    long sum = array[0] + array[array.size() - 1];\n    if\
    \ (sum % 2 == 0) {\n        sort(array.begin(), array.end(), std::greater<int>());\n\
    \    } else {\n        sort(array.begin(), array.end());\n    }\n    return array;",
  "    if(array.size() == 0)\n        return array;\n    if(array.size() == 1)\n \
    \       return array;\n    // sort\n    std::sort(array.begin(), array.end());\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::reverse(array.begin(),\
    \ array.end());\n    return array;", "    if(array.size() == 0 || array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        sort(array.begin(), array.end(), std::greater<long>());\n \
    \   else\n        sort(array.begin(), array.end());\n    return array;", "   \
    \ // happy coding :)\n    if(array.size() == 0 || array.size() == 1)\n       \
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 != 0)\n     \
    \   sort(array.begin(), array.end());\n    else\n        sort(array.begin(), array.end(),\
    \ greater<long>());\n    return array;", "\tlong sum = 0;\n\tsum = array[0] +\
    \ array[array.size() - 1];\n\tif (sum % 2 != 0) {\n\t\tsort(array.begin(), array.end());\n\
    \t}\n\telse {\n\t\tsort(array.begin(), array.end(), std::greater<long>());\n\t\
    }\n\treturn array;"]
stop_tokens:
- "\n}"
