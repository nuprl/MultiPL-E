language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // TODO: Write code here...\n    if(l.size() == 0)\n        return\
    \ true;\n    if(l.size() == 1)\n        return true;\n    if(l.size() == 2)\n\
    \        return true;\n    if(l[0] < l[1]){\n        for(int i = 0; i < l.size()\
    \ - 1; i++){\n            if(l[i] >= l[i+1])\n                return false;\n\
    \        }\n    }\n    else if(l[0] > l[1]){\n        for(int i = 0; i < l.size()\
    \ - 1; i++){\n            if(l[i] <= l[i+1])\n                return false;\n\
    \        }\n    }\n    else\n        return true;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb78n83sc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size()<=1) {\n        return true;\n    }\n    auto first_diff\
    \ = l[1] - l[0];\n    auto increasing = first_diff >= 0;\n    if (increasing)\
    \ {\n        for (int i=1; i<l.size()-1; i++) {\n            if (l[i+1] < l[i])\
    \ {\n                return false;\n            }\n        }\n    } else {\n \
    \       for (int i=1; i<l.size()-1; i++) {\n            if (l[i+1] > l[i]) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy2x4pakx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (increasing\
    \ != (l[i] < l[i + 1])) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2h_z8zgp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int flag = 0;\n  for(int i = 0; i < l.size() - 1; i++) {\n    if(l[i]\
    \ > l[i + 1]) {\n      if(flag == 0) {\n        flag = -1;\n      } else if(flag\
    \ == 1) {\n        return false;\n      }\n    } else if(l[i] < l[i + 1]) {\n\
    \      if(flag == 0) {\n        flag = 1;\n      } else if(flag == -1) {\n   \
    \     return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8y0nqulm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  long prev = 0;\n\
    \  for (long x : l) {\n    if (x < prev) {\n      increasing = false;\n    }\n\
    \    if (x > prev) {\n      decreasing = false;\n    }\n    prev = x;\n  }\n \
    \ return increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprn7gqaeb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (int i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] < l[i - 1]) {\n      increasing = false;\n\
    \    }\n    if (l[i] > l[i - 1]) {\n      decreasing = false;\n    }\n  }\n  return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwn9tnbr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++){\n        if (l[i] < l[i-1])\n            increasing\
    \ = false;\n        if (l[i] > l[i-1])\n            decreasing = false;\n    }\n\
    \    return increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmrw4ivmn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), [](long a, long b) { return a > b; });\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnsd__tal.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() <= 1) {\n\t\treturn true;\n\t}\n\tif (l[0] < l[1]) {\n\t\
    \tfor (int i = 0; i < l.size() - 1; i++) {\n\t\t\tif (l[i] > l[i + 1]) {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < l.size()\
    \ - 1; i++) {\n\t\t\tif (l[i] < l[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv7j7tcjj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool isIncreasing = true;\n  bool isDecreasing = true;\n  for (int i\
    \ = 0; i < l.size() - 1; i++) {\n    if (l[i] < l[i + 1])\n      isDecreasing\
    \ = false;\n    if (l[i] > l[i + 1])\n      isIncreasing = false;\n  }\n  return\
    \ isIncreasing || isDecreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0zp6wdi0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    assert(l.size() > 1);\n    bool dec = false;\n\
    \    bool inc = false;\n    for (long i = 0; i < l.size() - 1; i++) {\n      \
    \  if (l[i] < l[i + 1]) {\n            inc = true;\n        }\n        if (l[i]\
    \ > l[i + 1]) {\n            dec = true;\n        }\n    }\n    return inc !=\
    \ dec;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbmxibucz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n\n    long last\
    \ = l[0];\n    bool first = true;\n    bool increasing = false;\n    bool decreasing\
    \ = false;\n    for (long num : l) {\n        if (first) {\n            last =\
    \ num;\n            first = false;\n            continue;\n        }\n\n     \
    \   if (last < num) {\n            increasing = true;\n        } else if (last\
    \ > num) {\n            decreasing = true;\n        }\n\n        if (increasing\
    \ && decreasing) {\n            return false;\n        }\n\n        last = num;\n\
    \    }\n\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0w2eco_s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // l[0] > 0 else l[0] < 0\n  bool is_increasing = l[0] > 0 ? true :\
    \ false;\n  for (int i = 1; i < l.size(); i++) {\n    if (is_increasing && l[i]\
    \ < l[i - 1]) {\n      return false;\n    }\n    if (!is_increasing && l[i] >\
    \ l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfl0h48ga.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long sign = 0;\n    for (auto i = 1; i < l.size(); i++) {\n      \
    \  long diff = l[i] - l[i - 1];\n        long new_sign = 0;\n        if (diff\
    \ > 0) {\n            new_sign = 1;\n        } else if (diff < 0) {\n        \
    \    new_sign = -1;\n        }\n        if (sign == 0) {\n            sign = new_sign;\n\
    \        } else if (sign * new_sign < 0) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl729cclo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    if (l.size()\
    \ <= 1) {\n        return true;\n    }\n    for (long i = 0; i < l.size() - 1;\
    \ i++) {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n  \
    \      }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl0ldsj44.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return true;\n    long prev = l[0];\n    bool inc\
    \ = false;\n    bool dec = false;\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > prev) inc = true;\n        if (l[i] < prev) dec = true;\n\
    \        if (inc && dec) return false;\n        prev = l[i];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp45dnl93b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long> t;\n    for(int i=0;i<l.size()-1;i++){\n       \
    \ t.push_back(l[i+1]-l[i]);\n    }\n    if(std::all_of(t.begin(), t.end(), [](int\
    \ i) { return i >= 0; })){\n        return true;\n    }\n    else if(std::all_of(t.begin(),\
    \ t.end(), [](int i) { return i <= 0; })){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpknor2m4b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) {\n\t\treturn true;\n\t}\n\tlong first = l[0];\n\t\
    long mode = 0;\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (mode == 0) {\n\
    \t\t\tif (l[i] > first) {\n\t\t\t\tmode = 1;\n\t\t\t}\n\t\t\telse if (l[i] < first)\
    \ {\n\t\t\t\tmode = -1;\n\t\t\t}\n\t\t}\n\t\telse if (mode == 1) {\n\t\t\tif (l[i]\
    \ < first) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (mode == -1)\
    \ {\n\t\t\tif (l[i] > first) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfirst\
    \ = l[i];\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06m3l19c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool flag = false;\n    int pre = l[0];\n    bool flag1 = true;\n\
    \    bool flag2 = true;\n    for(auto e: l){\n        if(pre < e){\n         \
    \   flag1 = false;\n        }\n        if(pre > e){\n            flag2 = false;\n\
    \        }\n        pre = e;\n    }\n    if(flag1 == true || flag2 == true){\n\
    \        flag = true;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvtmbcm3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int length = l.size();\n    if (length == 1 || length == 0) {\n  \
    \      return true;\n    }\n    bool allPositive = true;\n    bool allNegative\
    \ = true;\n    for (int i = 0; i < length - 1; i++) {\n        if (l[i] <= l[i\
    \ + 1]) {\n            allNegative = false;\n        }\n        if (l[i] >= l[i\
    \ + 1]) {\n            allPositive = false;\n        }\n    }\n    return allPositive\
    \ || allNegative;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplyvg2v8a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Your code here\n    bool st = true;\n    for(int i=0;i<l.size()-1;i++){\n\
    \        if(l[i]>l[i+1]){\n            if(st == false){\n                return\
    \ false;\n            }\n            st = false;\n        }\n        else if(l[i]<l[i+1]){\n\
    \            if(st == true){\n                return false;\n            }\n \
    \           st = true;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb249szs6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphxaqdge3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tint flag = 0;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i]\
    \ > l[i + 1]) {\n\t\t\tflag--;\n\t\t}\n\t\telse if (l[i] < l[i + 1]) {\n\t\t\t\
    flag++;\n\t\t}\n\t}\n\tif (flag == -l.size() + 1 || flag == l.size() - 1) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0xgk_4ua.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() < 2)\n\t\treturn true;\n\tbool increasing = true;\n\tbool\
    \ decreasing = true;\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > l[i\
    \ - 1])\n\t\t\tdecreasing = false;\n\t\tif (l[i] < l[i - 1])\n\t\t\tincreasing\
    \ = false;\n\t}\n\treturn increasing || decreasing;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkfi0onsr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator it1 = l.begin();\n    std::vector<long>::iterator\
    \ it2 = l.begin() + 1;\n    int size = l.size();\n    if (size <= 1) {\n     \
    \   return true;\n    }\n    if (size == 2) {\n        return (*it1 <= *it2);\n\
    \    }\n    bool isIncreasing = false;\n    if (*it1 <= *it2) {\n        isIncreasing\
    \ = true;\n    }\n    while (it2 != l.end()) {\n        if (isIncreasing) {\n\
    \            if (*it1 > *it2) {\n                return false;\n            }\n\
    \        } else {\n            if (*it1 < *it2) {\n                return false;\n\
    \            }\n        }\n        it1++;\n        it2++;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzm7x1wmt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool ret = true;\n\tif (l.size() > 1) {\n\t\tbool increasing = true;\n\
    \t\tbool decreasing = true;\n\t\tfor (int i = 1; i < l.size(); i++) {\n\t\t\t\
    if (l[i] < l[i - 1]) {\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\tif (l[i] >\
    \ l[i - 1]) {\n\t\t\t\tdecreasing = false;\n\t\t\t}\n\t\t}\n\t\tret = increasing\
    \ || decreasing;\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpffxcdrm4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\treturn std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4zc8no9m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\treturn std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4zc8no9m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool isIncreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n     \
    \       break;\n        }\n    }\n    bool isDecreasing = true;\n    for (int\
    \ i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n          \
    \  isDecreasing = false;\n            break;\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv6gkmd5e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool incr = true;\n\tbool decr = true;\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > l[i - 1]) {\n\t\t\tdecr = false;\n\t\t}\n\t\tif (l[i]\
    \ < l[i - 1]) {\n\t\t\tincr = false;\n\t\t}\n\t}\n\treturn incr || decr;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp412s1dq7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) {\n\t\treturn true;\n\t}\n\tbool increase = true;\n\
    \tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] < l[i - 1]) {\n\t\t\tincrease\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (increase) {\n\t\treturn true;\n\t\
    }\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] > l[i - 1]) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkt_p2hzf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() <= 1) {\n\t\treturn true;\n\t}\n\tbool increasing = true;\n\
    \tbool decreasing = true;\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ < l[i - 1]) {\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (l[i] > l[i - 1]) {\n\
    \t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppsmc610b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) {\n        return true;\n    }\n    if (l[0] < l[1])\
    \ {\n        for (int i = 1; i < l.size() - 1; i++) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        }\n    }\
    \ else if (l[0] > l[1]) {\n        for (int i = 1; i < l.size() - 1; i++) {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    } else {\n        for (int i = 1; i < l.size() - 1; i++)\
    \ {\n            if (l[i] != l[i + 1]) {\n                return false;\n    \
    \        }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl1odhhic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool is_increasing = false;\n    bool is_decreasing = false;\n   \
    \ if (l.size() <= 1) {\n        return true;\n    }\n    int i;\n    for (i =\
    \ 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_decreasing\
    \ = true;\n            break;\n        }\n        if (l[i] < l[i + 1]) {\n   \
    \         is_increasing = true;\n            break;\n        }\n    }\n    if\
    \ (is_increasing == true) {\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l[i] > l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    if (is_decreasing == true) {\n        for (int i\
    \ = 0; i < l.size() - 1; i++) {\n            if (l[i] < l[i + 1]) {\n        \
    \        return false;\n            }\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4c2eneo9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int temp = 0;\n    bool res = true;\n    for(int i = 0; i < l.size()-1;\
    \ i++){\n        int j = i + 1;\n        if(l[i] == l[j]){\n            temp =\
    \ 0;\n        }\n        else if(l[i] > l[j]){\n            if(temp == 1){\n \
    \               res = false;\n                break;\n            }\n        \
    \    temp = -1;\n        }\n        else{\n            if(temp == -1){\n     \
    \           res = false;\n                break;\n            }\n            temp\
    \ = 1;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmoeir70g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    if (l[0] <\
    \ l[1]) {\n        for (int i = 1; i < l.size() - 1; i++) {\n            if (l[i]\
    \ > l[i + 1]) {\n                return false;\n            }\n        }\n   \
    \ } else if (l[0] > l[1]) {\n        for (int i = 1; i < l.size() - 1; i++) {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    } else {\n        return monotonic(std::vector<long>(l.begin()\
    \ + 1, l.end()));\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3e_vgeje.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool increasing = true;\n\tbool decreasing = true;\n\tif (l.size() ==\
    \ 0) {\n\t\treturn true;\n\t}\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif\
    \ (l[i] > l[i - 1]) {\n\t\t\tdecreasing = false;\n\t\t}\n\t\tif (l[i] < l[i -\
    \ 1]) {\n\t\t\tincreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyrg30tot.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int size = l.size();\n    int flag = 0;\n    int i;\n    if(size ==\
    \ 1)\n        return true;\n    for(i = 0; i < size-1; i++) {\n        if(l[i]\
    \ < l[i+1]) {\n            flag = 1;\n            break;\n        }\n        else\
    \ if(l[i] > l[i+1]) {\n            flag = 2;\n            break;\n        }\n\
    \    }\n    if(flag == 0)\n        return true;\n    if(flag == 1) {\n       \
    \ for(int j = i; j < size-1; j++) {\n            if(l[j] > l[j+1])\n         \
    \       return false;\n        }\n    }\n    else if(flag == 2) {\n        for(int\
    \ j = i; j < size-1; j++) {\n            if(l[j] < l[j+1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc0hq_mgu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool ascend = true;\n  bool descend = true;\n  for (unsigned long i\
    \ = 1; i < l.size(); i++) {\n    ascend = ascend && (l[i] >= l[i - 1]);\n    descend\
    \ = descend && (l[i] <= l[i - 1]);\n  }\n  return ascend || descend;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl517c95a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int size = l.size();\n    int inc = 0;\n    int dec = 0;\n    for\
    \ (int i = 0; i < size - 1; i++) {\n        if (l[i] > l[i + 1]) {\n         \
    \   inc = 1;\n        }\n        if (l[i] < l[i + 1]) {\n            dec = 1;\n\
    \        }\n    }\n    if (inc == 1 && dec == 1) {\n        return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp22o1yw2a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int flag = 0;\n    for(int i = 0; i < n-1;\
    \ i++) {\n        if(l[i] < l[i+1]) {\n            flag = 1;\n            break;\n\
    \        }\n        else if(l[i] > l[i+1]) {\n            flag = 2;\n        \
    \    break;\n        }\n    }\n    for(int i = 0; i < n-1; i++) {\n        if(flag\
    \ == 1) {\n            if(l[i] > l[i+1])\n                return false;\n    \
    \    }\n        else if(flag == 2) {\n            if(l[i] < l[i+1])\n        \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppqndjhsa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) {\n    return true;\n  }\n  int start_inc = l[0] <\
    \ l[1];\n  for (int i = 2; i < l.size(); i++) {\n    if (start_inc != (l[i - 1]\
    \ < l[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqsdxapxp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i - 1] > l[i]) {\n            increasing = false;\n       \
    \ }\n        if (l[i - 1] < l[i]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwh3ykca9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return true;\n  bool increasing = l[0] < l[1];\n\
    \  for (int i = 1; i < l.size() - 1; i++) {\n    if (increasing && l[i] > l[i\
    \ + 1]) return false;\n    if (!increasing && l[i] < l[i + 1]) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwshsrmiv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::vector<long> diff = l;\n  std::adjacent_difference(l.begin(), l.end(),\
    \ diff.begin());\n  bool is_increasing = std::all_of(diff.begin() + 1, diff.end(),\
    \ [](int x) {\n    return x >= 0;\n  });\n  bool is_decreasing = std::all_of(diff.begin()\
    \ + 1, diff.end(), [](int x) {\n    return x <= 0;\n  });\n  return is_increasing\
    \ || is_decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeuf21r_r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // Your code here\n  bool asc = true;\n  bool desc = true;\n  for(int\
    \ i = 0; i < l.size()-1; i++){\n      if(l[i] > l[i+1]) asc = false;\n      if(l[i]\
    \ < l[i+1]) desc = false;\n  }\n  return asc || desc;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1ooqjjr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return true;\n  bool increasing = true;\n  for (int\
    \ i = 1; i < l.size(); i++) {\n    if (l[i-1] < l[i]) {\n      increasing = true;\n\
    \      break;\n    }\n    if (l[i-1] > l[i]) {\n      increasing = false;\n  \
    \    break;\n    }\n  }\n  for (int i = 1; i < l.size(); i++) {\n    if (increasing)\
    \ {\n      if (l[i-1] > l[i]) return false;\n    } else {\n      if (l[i-1] <\
    \ l[i]) return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp27_0yyh0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long direction = 0;\n    if (l.size() > 0) {\n        for (size_t\
    \ i = 1; i < l.size(); i++) {\n            if (l[i] > l[i - 1]) {\n          \
    \      if (direction == -1) return false;\n                direction = 1;\n  \
    \          } else if (l[i] < l[i - 1]) {\n                if (direction == 1)\
    \ return false;\n                direction = -1;\n            }\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzq0u0u5h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\t// >>> from itertools import groupby\n\t// >>> def monotonic(l):\n\t\
    // ... \treturn all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in\
    \ zip(l, l[1:]))\n\t// ...\n\t// >>> monotonic((1, 2, 4, 20))\n\t// True\n\t//\
    \ >>> monotonic((1, 20, 4, 10))\n\t// False\n\t// >>> monotonic((4, 1, 0, -10))\n\
    \t// True\n\treturn all(l[idx] <= l[idx + 1] for idx in range(len(l) - 1)) or\
    \ all(l[idx] >= l[idx + 1] for idx in range(len(l) - 1));\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf2z36e5i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool is_increasing = false;\n  bool is_decreasing = false;\n  for (int\
    \ i = 0; i < l.size() - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      is_increasing\
    \ = true;\n    } else if (l[i] > l[i + 1]) {\n      is_decreasing = true;\n  \
    \  }\n    if (is_increasing && is_decreasing) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwumz0ych.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  int n = l.size();\n\
    \  for (int i = 0; i < n - 1; i++) {\n    if (l[i] > l[i + 1])\n      increasing\
    \ = false;\n    if (l[i] < l[i + 1])\n      decreasing = false;\n  }\n  return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0735uv82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long direction=0;\n    for(long i=1;i<l.size();i++){\n        if(l[i]>l[i-1]){\n\
    \            if(direction==0){\n                direction=1;\n            }\n\
    \            else if(direction==-1){\n                return false;\n        \
    \    }\n        }\n        else if(l[i]<l[i-1]){\n            if(direction==0){\n\
    \                direction=-1;\n            }\n            else if(direction==1){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe32iv889.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return true;\n  bool increasing = true;\n  bool decreasing\
    \ = true;\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > l[i - 1]) decreasing\
    \ = false;\n    if (l[i] < l[i - 1]) increasing = false;\n  }\n  return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpziyoa7tc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    //return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.rbegin(),\
    \ l.rend());\n    return (std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.rbegin(),\
    \ l.rend()));\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwtxe0h2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\t// replace with your code\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplow7e178.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tstd::vector<long> m = l;\n\tstd::sort(m.begin(), m.end());\n\treturn\
    \ l == m || l == std::vector<long>(m.rbegin(), m.rend());\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp395hz9_d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool ascending = true;\n    bool descending = true;\n    if (l.size()<=2)\
    \ {\n        return true;\n    }\n    else {\n        for (int i=0; i<l.size()-1;\
    \ i++) {\n            if (l[i]>l[i+1]) {\n                ascending = false;\n\
    \            }\n            if (l[i]<l[i+1]) {\n                descending = false;\n\
    \            }\n        }\n        return ascending || descending;\n    }\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9s61e7gt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) return true;\n  int flag = 0;\n  for (int i = 1; i\
    \ < l.size(); i++) {\n    if (l[i - 1] < l[i]) {\n      if (flag == 0) flag =\
    \ 1;\n      else if (flag == -1) return false;\n    } else if (l[i - 1] > l[i])\
    \ {\n      if (flag == 0) flag = -1;\n      else if (flag == 1) return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3o8imb21.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // Your code here\n  if(l.size()<=1) return true;\n  bool inc=false,dec=false;\n\
    \  for(int i=0;i<l.size()-1;i++){\n      if(l[i]<l[i+1]) inc=true;\n      if(l[i]>l[i+1])\
    \ dec=true;\n  }\n  if(inc && dec) return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxaxme_g7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator it = l.begin();\n    long start = *it;\n\
    \    it++;\n    while (it != l.end()) {\n        if (start < *it) {\n        \
    \    start = *it;\n            it++;\n        } else if (start > *it) {\n    \
    \        start = *it;\n            it++;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3oadqrzb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  /* INSERT YOUR CODE HERE */\n  bool increasing = true;\n  bool decreasing\
    \ = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1])\
    \ {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing\
    \ = false;\n    }\n  }\n  return increasing || decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzlk2z0ky.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n        if (l.size()==0) {\n            return true;\n        }\n    \
    \    auto it=l.begin();\n        long last=*it;\n        int delta=0;\n      \
    \  while (++it!=l.end()) {\n            if (*it>last) {\n                if (delta<0)\
    \ {\n                    return false;\n                }\n                delta=1;\n\
    \            } else if (*it<last) {\n                if (delta>0) {\n        \
    \            return false;\n                }\n                delta=-1;\n   \
    \         }\n            last=*it;\n        }\n        return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ijay0mc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() > 1) {\n\t\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\
    \t\tif (l[i] > l[i + 1]) {\n\t\t\t\tfor (int j = i + 1; j < l.size() - 1; j++)\
    \ {\n\t\t\t\t\tif (l[j] < l[j + 1]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\telse if (l[i] < l[i + 1]) {\n\t\t\t\tfor (int j = i\
    \ + 1; j < l.size() - 1; j++) {\n\t\t\t\t\tif (l[j] > l[j + 1]) {\n\t\t\t\t\t\t\
    return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe77gvri4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long s=l.size();\n    bool flag=0;\n    long c=0;\n    if(s<=1)\n\
    \        return true;\n    for(long i=0;i<s-1;i++)\n    {\n        if(l[i]<l[i+1])\n\
    \        {\n            c++;\n            if(c==s-1)\n                return true;\n\
    \        }\n        else if(l[i]>l[i+1])\n        {\n            c--;\n      \
    \      if(c==s-1)\n                return true;\n        }\n        else if(l[i]==l[i+1])\n\
    \        {\n            if(c==s-1)\n                return true;\n        }\n\
    \        else\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp30i68j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (int i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] < l[i - 1])\n      increasing = false;\n\
    \    if (l[i] > l[i - 1])\n      decreasing = false;\n  }\n  return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrtfk93e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool result = false;\n    if (l.size() < 2) {\n        result = true;\n\
    \    } else {\n        if (l[0] < l[1]) {\n            for (int i = 1; i < l.size()\
    \ - 1; i++) {\n                if (l[i] > l[i + 1]) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         result = true;\n        } else if (l[0] > l[1]) {\n            for (int\
    \ i = 1; i < l.size() - 1; i++) {\n                if (l[i] < l[i + 1]) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n            }\n            result = true;\n        } else {\n         \
    \   result = monotonic(std::vector<long>(l.begin() + 1, l.end()));\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpro33ny2_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long t;\n    if(l.size()<2)\n        return true;\n    else if(l[0]>l[1])\n\
    \        t=1;\n    else if(l[0]<l[1])\n        t=-1;\n    else if(l[0]==l[1])\n\
    \        t=0;\n    else {\n        assert(false);\n    }\n    if(t==0)\n     \
    \   return true;\n    else if(t==1) {\n        for(long i=1;i<l.size();i++) {\n\
    \            if(l[i]>=l[i-1])\n                continue;\n            else\n \
    \               return false;\n        }\n    }\n    else if(t==-1) {\n      \
    \  for(long i=1;i<l.size();i++) {\n            if(l[i]<=l[i-1])\n            \
    \    continue;\n            else\n                return false;\n        }\n \
    \   }\n    else {\n        assert(false);\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9cxzd7y7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tif (n==1)\n\t\treturn true;\n\tif (l[0] > l[1])\n\
    \t\tfor (int i = 1; i < n-1; i++)\n\t\t\tif (l[i] < l[i+1])\n\t\t\t\treturn false;\n\
    \tif (l[0] < l[1])\n\t\tfor (int i = 1; i < n-1; i++)\n\t\t\tif (l[i] > l[i+1])\n\
    \t\t\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp63f3c2v1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool decreasing = true;\n    bool increasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return decreasing || increasing;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgyqj8m1z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa553348f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool isMonotonic = true;\n    //check if the vector is empty\n   \
    \ if(l.size() == 0){\n        return isMonotonic;\n    }\n    //check if the vector\
    \ is increasing or decreasing\n    long diff = l[1] - l[0];\n    for(int i = 2;\
    \ i < l.size(); i++){\n        long currDiff = l[i] - l[i-1];\n        if(currDiff\
    \ * diff < 0){\n            isMonotonic = false;\n            break;\n       \
    \ }\n    }\n    return isMonotonic;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo5hbvai4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\t// YOUR CODE HERE\n\t\tint n = l.size();\n\tif(n==1){\n\t\treturn true;\n\
    \t}\n\tbool increasing = true;\n\tbool decreasing = true;\n\tint i = 0;\n\twhile(i<n-1){\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t\tif(l[i] > l[i+1]){\n\
    \t\t\tincreasing = false;\n\t\t}\n\t\ti++;\n\t}\n\tif(increasing || decreasing){\n\
    \t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpokosaool.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) {\n    return true;\n  }\n  auto d = l[1] - l[0];\n\
    \  for (int i = 1; i < l.size(); i++) {\n    auto d2 = l[i] - l[i - 1];\n    if\
    \ (d2 * d < 0) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgbfrbvv4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\t\tassert(l.size() > 1);\n\t\t\tint i = 1;\n\t\t\t\tint increasing =\
    \ 0;\n\t\t\t\t\tfor (i = 1; i < l.size(); i++) {\n\t\t\t\t\t\t\t\tif (l[i] > l[i\
    \ - 1]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (increasing == -1) {\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\tincreasing = 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    } else if (l[i] < l[i - 1]) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (increasing\
    \ == 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\tincreasing = -1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqzdb10rw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa553348f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwl19b3l7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa553348f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool b = false;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif\
    \ (l[i] < l[i + 1]) {\n\t\t\tb = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (b) {\n\
    \t\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\t\tif (l[i] >= l[i + 1]) {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < l.size()\
    \ - 1; i++) {\n\t\t\tif (l[i] <= l[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ar168z_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tint sign = 0;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i]\
    \ < l[i + 1]) {\n\t\t\tif (sign == 0) {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse\
    \ if (sign != 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (l[i] >\
    \ l[i + 1]) {\n\t\t\tif (sign == 0) {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse\
    \ if (sign != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpryrzoyg_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong p = l[0];\n\tbool increasing = true;\n\tbool decreasing = true;\n\
    \tint i = 1;\n\twhile (i < l.size()) {\n\t\tif (l[i] < p) {\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif (l[i] > p) {\n\t\t\tdecreasing = false;\n\t\t}\n\t\t\
    p = l[i];\n\t\ti++;\n\t}\n\treturn increasing || decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm9lgriw6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (long i =\
    \ 1; i < l.size(); i++) {\n    if (l[i - 1] > l[i]) {\n      increasing = false;\n\
    \    }\n    if (l[i - 1] < l[i]) {\n      decreasing = false;\n    }\n  }\n  return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp87omqwem.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return true;\n    bool is_increasing = (l[1] >=\
    \ l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (is_increasing\
    \ && l[i] < l[i-1]) return false;\n        if (!is_increasing && l[i] > l[i-1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvdovuzk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() <= 1) {\n\t\treturn true;\n\t}\n\tbool increase = true;\n\
    \tbool decrease = true;\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ < l[i - 1]) {\n\t\t\tincrease = false;\n\t\t}\n\t\tif (l[i] > l[i - 1]) {\n\t\
    \t\tdecrease = false;\n\t\t}\n\t}\n\treturn increase || decrease;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc7ytn_3z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() >= 1);\n    if (l.size() == 1) {\n        return true;\n\
    \    }\n    int flag = 0;\n    if (l[0] < l[1]) {\n        flag = 1;\n    } else\
    \ if (l[0] > l[1]) {\n        flag = -1;\n    }\n    for (int i = 1; i < l.size()\
    \ - 1; i++) {\n        if (flag == 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false;\n            }\n        } else if (flag == -1)\
    \ {\n            if (l[i] < l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    flag = 1;\n            } else if (l[i] > l[i + 1]) {\n                flag\
    \ = -1;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_1zoenbf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) return true;\n  int s = 0;\n  for (int i = 1; i <\
    \ l.size(); i++) {\n    if (l[i] > l[i-1]) {\n      if (s == -1) return false;\n\
    \      s = 1;\n    } else if (l[i] < l[i-1]) {\n      if (s == 1) return false;\n\
    \      s = -1;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa8b8zfn0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool increasing = false;\n\tbool decreasing = false;\n\tint i = 0;\n\
    \twhile (i < l.size() - 1) {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tincreasing = true;\n\
    \t\t}\n\t\tif (l[i] > l[i + 1]) {\n\t\t\tdecreasing = true;\n\t\t}\n\t\ti += 1;\n\
    \t}\n\treturn increasing != decreasing;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjaudqxf_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long m = -1;\n  if (l.size() == 0) return true;\n  for (int i = 0; i\
    \ < l.size() - 1; i++) {\n    if (m == -1) {\n      if (l[i] > l[i + 1]) m = 0;\n\
    \      else if (l[i] < l[i + 1]) m = 1;\n    } else {\n      if (m == 0 && l[i]\
    \ < l[i + 1]) return false;\n      if (m == 1 && l[i] > l[i + 1]) return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxa2fsiu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return true;\n    long flag = l[1] - l[0];\n  \
    \  for (long i = 2; i < l.size(); i++) {\n        if (flag * (l[i] - l[i - 1])\
    \ < 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl95o3ssl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\t// initialize bool state\n\tbool state = true;\n\t// loop through list\n\
    \tfor (int i = 0; i < l.size() - 1; i++) {\n\t\t// if current element is greater\
    \ than next element\n\t\tif (l[i] > l[i + 1]) {\n\t\t\t// initial state becomes\
    \ false\n\t\t\tstate = false;\n\t\t\t// break out of loop\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\t// initialize bool state1\n\tbool state1 = true;\n\t// loop through\
    \ list\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\t// if current element\
    \ is smaller than next element\n\t\tif (l[i] < l[i + 1]) {\n\t\t\t// initial state1\
    \ becomes false\n\t\t\tstate1 = false;\n\t\t\t// break out of loop\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\t// return true if only state or state1 are true\n\treturn state\
    \ || state1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6qt_ahd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = false;\n    bool decreasing = false;\n    int len\
    \ = l.size();\n    for (int i = 0; i < len - 1; i++) {\n        if (l[i] == l[i\
    \ + 1]) {\n            continue;\n        }\n        if (l[i] < l[i + 1]) {\n\
    \            if (decreasing) {\n                return false;\n            }\n\
    \            increasing = true;\n        } else {\n            if (increasing)\
    \ {\n                return false;\n            }\n            decreasing = true;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvw974jmu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Your code here\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp242clbgp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool result = true;\n    if (l.size() > 1) {\n        auto v = l[0];\n\
    \        auto d = l[1] - v;\n        for (auto i = 2; i < l.size(); i++) {\n \
    \           if (l[i] - v < 0) {\n                if (d > 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      } else if (l[i] - v > 0) {\n                if (d < 0) {\n            \
    \        result = false;\n                    break;\n                }\n    \
    \        }\n            v = l[i];\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpllgwnstk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwl19b3l7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) return true;\n  bool inc = true;\n  for (long i =\
    \ 1; i < l.size(); i++) {\n    if (l[i] > l[i-1]) {\n      if (!inc) return false;\n\
    \    } else if (l[i] < l[i-1]) {\n      if (inc) inc = false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppqqu4jtr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    bool monotonic_increasing = true;\n   \
    \ bool monotonic_decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i - 1] > l[i]) {\n            monotonic_increasing = false;\n \
    \       }\n        if (l[i - 1] < l[i]) {\n            monotonic_decreasing =\
    \ false;\n        }\n    }\n    return monotonic_increasing || monotonic_decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy3597yv_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuv890i94.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 0)\n\t\treturn true;\n\tbool up = true;\n\tbool down\
    \ = true;\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] < l[i - 1])\n\t\
    \t\tup = false;\n\t\tif (l[i] > l[i - 1])\n\t\t\tdown = false;\n\t}\n\treturn\
    \ up || down;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpekkwltqn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (auto it =\
    \ l.begin(); it != l.end() - 1; it++) {\n    if (*it < *(it + 1)) {\n      decreasing\
    \ = false;\n    }\n    if (*it > *(it + 1)) {\n      increasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14zljy84.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return true;\n  bool increasing = l[0] < l[1];\n\
    \  for (auto i = 1; i < l.size() - 1; i++) {\n    if (increasing) {\n      if\
    \ (l[i] > l[i + 1]) return false;\n    } else {\n      if (l[i] < l[i + 1]) return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd2bsmzxq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // add code here\n    bool dec = false;\n    for(int i=0;i<l.size()-1;i++){\n\
    \        if(l[i]<l[i+1])\n            dec = true;\n        else if(l[i]>l[i+1])\n\
    \            return false;\n    }\n    return dec;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp68zt64wy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    int len = l.size();\n    if(len == 1)\n   \
    \     return true;\n    bool flag = true;\n    for(int i = 1; i < len; i++){\n\
    \        if(l[i] < l[i-1]){\n            flag = false;\n            break;\n \
    \       }\n    }\n    if(flag == true)\n        return true;\n    flag = true;\n\
    \    for(int i = 1; i < len; i++){\n        if(l[i] > l[i-1]){\n            flag\
    \ = false;\n            break;\n        }\n    }\n    if(flag == true)\n     \
    \   return true;\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr9yeopdp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // last_seen is the last value we saw.\n    long last_seen = 0;\n\
    \    // p is the last value of the current partial sequence\n    long p = 0;\n\
    \    // d is the direction of the current partial sequence\n    // 1 is increasing,\
    \ -1 is decreasing, 0 is undefined\n    long d = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (d == 0) {\n            // Initialize the sequence\n\
    \            d = 1;\n            p = l[i];\n        } else if (d == 1) {\n   \
    \         // If the sequence is increasing, check that the new value is not\n\
    \            // smaller than the previous one.\n            if (l[i] < p) {\n\
    \                return false;\n            }\n            // If it is not smaller,\
    \ update p and d.\n            if (l[i] > p) {\n                p = l[i];\n  \
    \          }\n        } else {\n            // We are in a decreasing sequence.\
    \ Check that the new value is not\n            // larger than the previous one.\n\
    \            if (l[i] > p) {\n                return false;\n            }\n \
    \           // If it is not larger, update p and d.\n            if (l[i] < p)\
    \ {\n                p = l[i];\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpllrk6udd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n\n    int direction\
    \ = l[1] - l[0];\n    for (int i = 2; i < l.size(); i++) {\n        int tmp_direction\
    \ = l[i] - l[i - 1];\n        if (direction != 0 && tmp_direction != 0 && direction\
    \ != tmp_direction) {\n            return false;\n        }\n        direction\
    \ = tmp_direction;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph9j9kgee.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long flag = 0;\n    for(long i = 0; i < l.size() - 1; i++) {\n   \
    \     if(l[i] > l[i + 1]) {\n            if(flag == 1) {\n                return\
    \ false;\n            }\n            flag = -1;\n        }\n        else if(l[i]\
    \ < l[i + 1]) {\n            if(flag == -1) {\n                return false;\n\
    \            }\n            flag = 1;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp29_proeb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() >= 2);\n    long state = 0;\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n            if (state\
    \ == -1) {\n                return false;\n            }\n            state =\
    \ 1;\n        } else if (l[i] < l[i - 1]) {\n            if (state == 1) {\n \
    \               return false;\n            }\n            state = -1;\n      \
    \  }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_kl_5aln.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (int i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] < l[i - 1]) {\n      increasing = false;\n\
    \    }\n    if (l[i] > l[i - 1]) {\n      decreasing = false;\n    }\n  }\n  return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwn9tnbr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // NOTE: `long` is a C++ keyword and must be escaped with `(long)`!\n\
    \  // >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n\
    \  // (true)\n  // >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4,\
    \ (long)10})))\n  // (false)\n  // >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n  // (true)\n  // BEGIN_SOLUTION\n  bool increasing\
    \ = true;\n  bool decreasing = true;\n  for (int i = 1; i < l.size(); i++) {\n\
    \    if (l[i] < l[i-1]) {\n      increasing = false;\n    }\n    if (l[i] > l[i-1])\
    \ {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n\
    \  // END_SOLUTION\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk7wanih5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) {\n        return true;\n    }\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            is_increasing = false;\n    \
    \    }\n        if (l[i] > l[i - 1]) {\n            is_decreasing = false;\n \
    \       }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmputgqwmvt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long direction = 0;\n    for (int i = 1; i < l.size(); i++) {\n  \
    \      if (l[i - 1] == l[i]) {\n            continue;\n        }\n        long\
    \ tmp = l[i - 1] < l[i] ? 1 : -1;\n        if (direction == 0) {\n           \
    \ direction = tmp;\n        } else if (direction * tmp == -1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8pv2dqvo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    int val = l[0];\n\
    \    int positive = 0;\n    for (std::vector<long>::iterator i = l.begin(); i\
    \ != l.end(); ++i) {\n        if (*i != val) {\n            if (*i > val) {\n\
    \                positive = 1;\n            } else {\n                positive\
    \ = -1;\n            }\n            break;\n        }\n    }\n    if (positive\
    \ == 0) {\n        return true;\n    }\n    for (std::vector<long>::iterator i\
    \ = l.begin(); i != l.end(); ++i) {\n        if (positive == 1) {\n          \
    \  if (*i < val) {\n                return false;\n            }\n        } else\
    \ {\n            if (*i > val) {\n                return false;\n            }\n\
    \        }\n        val = *i;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0_1l34r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n\
    \    // (true)\n    // >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4,\
    \ (long)10})))\n    // (false)\n    // >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n    // (true)\n    if(l.size() == 0) {\n  \
    \      return true;\n    }\n    else if(l.size() == 1) {\n        return true;\n\
    \    }\n    else {\n        long c = l[0];\n        int d = l[1] - l[0];\n   \
    \     for(long i : l) {\n            if(d * (i - c) < 0) {\n                return\
    \ false;\n            }\n            c = i;\n        }\n        return true;\n\
    \    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7p5p7hlb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) {\n    return true;\n  }\n  long diff = l[1] - l[0];\n\
    \  for (int i = 2; i < l.size(); i++) {\n    if (l[i] - l[i - 1] != diff) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmdr6e8xz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int inc = 0;\n    int dec = 0;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] <= l[i + 1]) {\n            inc++;\n        }\n\
    \        if (l[i] >= l[i + 1]) {\n            dec++;\n        }\n    }\n    if\
    \ (inc == l.size() - 1 || dec == l.size() - 1) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnh584zo0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tint i;\n\tint n = l.size();\n\tbool asc = true;\n\tbool desc = true;\n\
    \tfor (i = 0; i < n - 1; i++) {\n\t\tif (l[i] > l[i + 1])\n\t\t\tasc = false;\n\
    \t\tif (l[i] < l[i + 1])\n\t\t\tdesc = false;\n\t}\n\treturn asc || desc;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcw0bh4po.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    bool isIncreasing\
    \ = true;\n    if (l[0] > l[1]) {\n        isIncreasing = false;\n    }\n    for\
    \ (int i = 1; i < l.size() - 1; i++) {\n        if (isIncreasing && l[i] > l[i\
    \ + 1]) {\n            return false;\n        }\n        if (!isIncreasing &&\
    \ l[i] < l[i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvacnu8r1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) {\n\t\treturn true;\n\t}\n\tlong count = 0;\n\tif\
    \ (l[0] < l[1]) {\n\t\tcount++;\n\t}\n\telse if (l[0] > l[1]) {\n\t\tcount--;\n\
    \t}\n\telse {\n\t\tcount++;\n\t}\n\tfor (long i = 2; i < l.size(); i++) {\n\t\t\
    if (l[i - 1] < l[i]) {\n\t\t\tif (count == -1) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if (l[i - 1] > l[i])\
    \ {\n\t\t\tif (count == 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfx91vb3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong c = 0;\n\tfor (std::vector<long>::iterator i = l.begin(); i !=\
    \ l.end(); ++i) {\n\t\tfor (std::vector<long>::iterator j = i + 1; j != l.end();\
    \ ++j) {\n\t\t\tif (*i < *j) {\n\t\t\t\tc++;\n\t\t\t}\n\t\t\telse if (*i > *j)\
    \ {\n\t\t\t\tc--;\n\t\t\t}\n\t\t}\n\t}\n\tif (c == 0 || c == l.size() - 1 || c\
    \ == -(l.size() - 1)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvji9830v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) {\n    return true;\n  }\n  long n = l[0];\n  bool\
    \ increasing = true;\n  for (auto i : l) {\n    if (i != n) {\n      increasing\
    \ = i > n;\n      break;\n    }\n  }\n  if (increasing) {\n    for (auto i : l)\
    \ {\n      if (i < n) {\n        return false;\n      }\n      n = i;\n    }\n\
    \  } else {\n    for (auto i : l) {\n      if (i > n) {\n        return false;\n\
    \      }\n      n = i;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrrvkj7v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing=true;\n  for(int i=0;i<l.size()-1;i++){\n    if(l[i]>l[i+1])\n\
    \      increasing=false;\n  }\n  bool decreasing=true;\n  for(int i=0;i<l.size()-1;i++){\n\
    \    if(l[i]<l[i+1])\n      decreasing=false;\n  }\n  return (increasing||decreasing);\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6tyeagrp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    // 1 to -1\
    \ is decreasing.\n    long direction = 0;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > l[i - 1]) {\n            if (direction < 0) {\n      \
    \          return false;\n            }\n            direction = 1;\n        }\
    \ else if (l[i] < l[i - 1]) {\n            if (direction > 0) {\n            \
    \    return false;\n            }\n            direction = -1;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5g5frc1r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tint isincrease=0;\n\tint isdecrease=0;\n\tfor(int i=0;i<l.size()-1;i++){\n\
    \t\tif(l[i]<l[i+1])\n\t\tisincrease=1;\n\t\telse if(l[i]>l[i+1])\n\t\tisdecrease=1;\n\
    \t}\n\treturn(isincrease==1||isdecrease==1);\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdsogja4x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool asc = true;\n    bool desc = true;\n    for (int i = 1; i < l.size();\
    \ i++) {\n        asc = asc && l[i] >= l[i - 1];\n        desc = desc && l[i]\
    \ <= l[i - 1];\n    }\n    return asc || desc;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp22arnyxg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (increasing)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpenkfmwkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long x = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    assert(x\
    \ != l[i]);\n    if (x < l[i]) {\n      for (long j = i + 1; j < l.size(); j++)\
    \ {\n        assert(l[j - 1] <= l[j]);\n      }\n      return true;\n    } else\
    \ {\n      for (long j = i + 1; j < l.size(); j++) {\n        assert(l[j - 1]\
    \ >= l[j]);\n      }\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndusrtt0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long temp = l[0];\n    bool isIncreasing = true;\n    bool isDecreasing\
    \ = true;\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < temp)\
    \ {\n            isIncreasing = false;\n        }\n        if (l[i] > temp) {\n\
    \            isDecreasing = false;\n        }\n        temp = l[i];\n    }\n \
    \   return isIncreasing || isDecreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8q5lpne4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuv890i94.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    \n    int i=0;\n    int l2=l.size();\n    bool flag=0;\n    for(i=0;i<l2-1;i++)\n\
    \    {\n        if(l[i]<l[i+1])\n        {\n            flag=1;\n            break;\n\
    \        }\n        else if(l[i]>l[i+1])\n        {\n            flag=2;\n   \
    \         break;\n        }\n    }\n    if(flag==1)\n    {\n        while(i<l2-1)\n\
    \        {\n            if(l[i]>l[i+1])\n            {\n                return\
    \ false;\n            }\n            i++;\n        }\n    }\n    else if(flag==2)\n\
    \    {\n        while(i<l2-1)\n        {\n            if(l[i]<l[i+1])\n      \
    \      {\n                return false;\n            }\n            i++;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74s4q7vf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int i;\n  int b = 0;\n  if (l.size() <= 1) {\n    return true;\n  }\n\
    \  for (i = 1; i < l.size(); i++) {\n    if (l[i] > l[i - 1]) {\n      if (b ==\
    \ -1) {\n        return false;\n      }\n      b = 1;\n    } else if (l[i] < l[i\
    \ - 1]) {\n      if (b == 1) {\n        return false;\n      }\n      b = -1;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp31gyjbws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (size_t i = 0; i < l.size() - 1; i++) {\n        if (l[i] >\
    \ l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpivz2gfps.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    int state =\
    \ 0;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] == l[i - 1])\
    \ {\n            continue;\n        }\n        int cmp = l[i] > l[i - 1] ? 1 :\
    \ -1;\n        if (state == 0) {\n            state = cmp;\n        } else if\
    \ (state != cmp) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4h36cc5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool isIncreasing=true;\n    bool isDecreasing=true;\n    for(int\
    \ i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1]){\n            isIncreasing=false;\n\
    \        }\n        if(l[i]<l[i+1]){\n            isDecreasing=false;\n      \
    \  }\n    }\n    return isIncreasing || isDecreasing;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcdb7nf3c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    else {\n  \
    \      long last = l[0];\n        int s = 0;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l[i];\n            if (curr < last) {\n    \
    \            if (s == 0) {\n                    s = -1;\n                }\n \
    \               else if (s == 1) {\n                    return false;\n      \
    \          }\n            }\n            else if (curr > last) {\n           \
    \     if (s == 0) {\n                    s = 1;\n                }\n         \
    \       else if (s == -1) {\n                    return false;\n             \
    \   }\n            }\n            last = curr;\n        }\n        return true;\n\
    \    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4d3rw274.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() < 3) {\n\t\treturn true;\n\t}\n\tbool ascending = l[0]\
    \ < l[1];\n\tfor (int i = 1; i < l.size() - 1; i++) {\n\t\tif (ascending && l[i]\
    \ >= l[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!ascending && l[i] <= l[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpplxpv5d3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool flag = true;\n    for(int i = 0; i < l.size() - 1; i++) {\n \
    \       if(l[i + 1] - l[i] == 0) continue;\n        else if(i == 0) {\n      \
    \      if(l[i + 1] - l[i] > 0) {\n                flag = true;\n            }\n\
    \            else {\n                flag = false;\n            }\n        }\n\
    \        else {\n            if(l[i + 1] - l[i] > 0) {\n                if(flag\
    \ == false) {\n                    return false;\n                }\n        \
    \    }\n            else {\n                if(flag == true) {\n             \
    \       return false;\n                }\n            }\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg1shbn1m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\t\n\tbool a = 1;\n\tbool b = 1;\n\tint c = 0;\n\tfor (int i = 0; i <\
    \ l.size() - 1; i++) {\n\t\tif ((l[i + 1] - l[i]) >= 0) {\n\t\t\tcontinue;\n\t\
    \t}\n\t\telse {\n\t\t\ta = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i <\
    \ l.size() - 1; i++) {\n\t\tif ((l[i + 1] - l[i]) <= 0) {\n\t\t\tcontinue;\n\t\
    \t}\n\t\telse {\n\t\t\tb = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (a == 1 || b ==\
    \ 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3sxs6xg2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // bool increase = false;\n    // bool decrease = false;\n    // bool\
    \ flag = false;\n    // for(int i = 0; i < l.size() - 1; i++) {\n    //     if(l[i+1]\
    \ > l[i])\n    //         increase = true;\n    //     else if(l[i+1] < l[i])\n\
    \    //         decrease = true;\n    //     if(increase && decrease)\n    //\
    \         return false;\n    // }\n    // return true;\n    for(int i = 0; i <\
    \ l.size() - 1; i++) {\n        if(l[i+1] > l[i])\n            continue;\n   \
    \     if(l[i+1] < l[i])\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_o_5dobp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    int mode =\
    \ 0;\n    long last = l[0];\n    for (long i : l) {\n        if (mode == 0) {\n\
    \            if (i > last) {\n                mode = 1;\n            } else if\
    \ (i < last) {\n                mode = -1;\n            }\n        } else if (mode\
    \ == 1) {\n            if (i < last) {\n                return false;\n      \
    \      }\n        } else if (mode == -1) {\n            if (i > last) {\n    \
    \            return false;\n            }\n        }\n        last = i;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphzgkyr8e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = false;\n    bool decreasing = false;\n    for (int\
    \ i = 0; i < l.size() - 1; i++) {\n        if (l[i + 1] > l[i]) {\n          \
    \  increasing = true;\n        }\n        if (l[i + 1] < l[i]) {\n           \
    \ decreasing = true;\n        }\n    }\n    return (increasing && !decreasing)\
    \ || (!increasing && decreasing);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb0_0nzd9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 2) return true;\n    long i = 0;\n    for (long j\
    \ = 1; j < l.size(); j++) {\n        if (l[j-1] != l[j]) {\n            i = j;\n\
    \            break;\n        }\n    }\n    if (i == 0) return true;\n    long\
    \ cmp = l[i-1] < l[i] ? 1 : -1;\n    for (long j = i+1; j < l.size(); j++) {\n\
    \        if (cmp * (l[j-1] - l[j]) < 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4v8tpzfb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::function<bool(std::vector<long>&)> mono_incr =\n        [&](std::vector<long>&\
    \ l) -> bool {\n            if (l.size() < 2) {\n                return true;\n\
    \            }\n            return l[0] <= l[1] && mono_incr(std::vector<long>(l.begin()\
    \ + 1, l.end()));\n        };\n    std::function<bool(std::vector<long>&)> mono_decr\
    \ =\n        [&](std::vector<long>& l) -> bool {\n            if (l.size() < 2)\
    \ {\n                return true;\n            }\n            return l[0] >= l[1]\
    \ && mono_decr(std::vector<long>(l.begin() + 1, l.end()));\n        };\n    return\
    \ mono_incr(l) || mono_decr(l);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0h2wjhll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool dec=true,inc=true;\n    int n=l.size();\n    for(int i=0;i<n-1;i++){\n\
    \        if(l[i]>l[i+1]){\n            inc=false;\n        }\n        if(l[i]<l[i+1]){\n\
    \            dec=false;\n        }\n    }\n    return inc||dec;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbg5gfi38.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (unsigned\
    \ int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n          \
    \  decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n          \
    \  increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7a2f40jv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // BEGIN_SOLUTION\n  // If the list is empty or has a single element,\
    \ it is monotonic.\n  if (l.size() <= 1) {\n    return true;\n  }\n  // is_decreasing\
    \ will become true if we encounter a pair (a, b) such that a > b.\n  bool is_decreasing\
    \ = false;\n  // is_increasing will become true if we encounter a pair (a, b)\
    \ such that a < b.\n  bool is_increasing = false;\n  for (std::size_t i = 1; i\
    \ < l.size(); ++i) {\n    if (l[i - 1] > l[i]) {\n      is_decreasing = true;\n\
    \    } else if (l[i - 1] < l[i]) {\n      is_increasing = true;\n    }\n    //\
    \ If we have reached a point where both is_decreasing and is_increasing\n    //\
    \ are true, the list is not monotonic.\n    if (is_decreasing && is_increasing)\
    \ {\n      return false;\n    }\n  }\n  // If we reach here, the list is monotonic.\n\
    \  return true;\n  // END_SOLUTION\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprbisybo1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size()<3) {\n\t\treturn true;\n\t}\n\tif (l[0]<l[1]) {\n\t\tfor\
    \ (auto i=(long)0; i<l.size()-1; i++) {\n\t\t\tif (l[i]>l[i+1]) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (auto i=(long)0; i<l.size()-1;\
    \ i++) {\n\t\t\tif (l[i]<l[i+1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxnlmrjgb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool ret = true;\n  for (auto it = l.begin(); it != l.end() - 1; ++it)\
    \ {\n    if (*it > *(it + 1)) {\n      ret = false;\n      break;\n    }\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdc9h45vx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long> m = l;\n    std::sort(m.begin(), m.end());\n   \
    \ if (m == l)\n        return true;\n    m = l;\n    std::sort(m.begin(), m.end(),\
    \ std::greater<long>());\n    if (m == l)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpobqse6qp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n        return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn3map18z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long> l_copy = l;\n    std::sort(l_copy.begin(), l_copy.end());\n\
    \    return (l == l_copy) || (std::is_sorted(l.begin(), l.end(), [](int a, int\
    \ b) {return a > b; }));\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe9vdjl2b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgk4tlsng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool dec = false;\n\tbool inc = false;\n\tfor (auto i = 0; i < l.size()\
    \ - 1; i++) {\n\t\tif (l[i] > l[i + 1]) {\n\t\t\tdec = true;\n\t\t}\n\t\tif (l[i]\
    \ < l[i + 1]) {\n\t\t\tinc = true;\n\t\t}\n\t}\n\treturn (dec ^ inc);\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyr22jxxc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return true;\n    long dir = 0;\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        long diff = l[i] - l[i - 1];\n        if\
    \ (diff == 0) {\n            continue;\n        }\n        if (dir == 0) {\n \
    \           dir = diff;\n        } else if (diff != dir && diff != -dir) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeloe46yg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool checker = true;\n    int k = 0;\n    int j = l.size() - 1;\n\
    \    while (k < j) {\n        if (l[k] == l[j]) {\n            k++;\n        \
    \    j--;\n        } else if (l[k] < l[j]) {\n            k++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    int i = k;\n    while (i < j) {\n\
    \        if (l[i] > l[i + 1]) {\n            checker = false;\n            break;\n\
    \        }\n        i++;\n    }\n    return checker;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp35hm0y20.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011391
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return true;\n    int direction\
    \ = l[1] - l[0];\n    for (int i = 1; i < n - 1; i++) {\n        if (direction\
    \ == 0) direction = l[i + 1] - l[i];\n        else if (direction > 0 && l[i +\
    \ 1] < l[i]) return false;\n        else if (direction < 0 && l[i + 1] > l[i])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4y8gq2jh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.size() - 1; i++) {\n        if (increasing && l[i]\
    \ > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplr_b1m5a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator itr, itr1;\n    itr = l.begin();\n   \
    \ itr1 = itr + 1;\n    long temp = 1;\n    bool result = true;\n    while (itr1\
    \ != l.end()) {\n        if (*itr > *itr1) {\n            temp--;\n        } else\
    \ if (*itr < *itr1) {\n            temp++;\n        }\n        itr++;\n      \
    \  itr1++;\n    }\n    if (temp == 0 || temp == 1 || temp == -1) {\n        result\
    \ = true;\n    } else {\n        result = false;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph4kxjgjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    std::vector<long>\
    \ t(l.size() - 1);\n    std::transform(l.begin(), l.end() - 1, l.begin() + 1,\
    \ t.begin(),\n                   std::minus<long>());\n    long x = t[0];\n  \
    \  for (int i = 1; i < t.size(); i++) {\n        if (t[i] * x < 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprgk7bx2x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() < 2)\n\t\treturn true;\n\tint inc = 0;\n\tif (l[0] < l[1])\n\
    \t\tinc = 1;\n\telse if (l[0] > l[1])\n\t\tinc = -1;\n\tfor (int i = 1; i < l.size()\
    \ - 1; i++) {\n\t\tif (inc == 0) {\n\t\t\tif (l[i] < l[i + 1])\n\t\t\t\tinc =\
    \ 1;\n\t\t\telse if (l[i] > l[i + 1])\n\t\t\t\tinc = -1;\n\t\t} else if (inc ==\
    \ 1) {\n\t\t\tif (l[i] > l[i + 1])\n\t\t\t\treturn false;\n\t\t} else if (inc\
    \ == -1) {\n\t\t\tif (l[i] < l[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxfye5n1f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool res = true;\n  std::vector<long> l_sorted(l);\n  std::sort(l_sorted.begin(),\
    \ l_sorted.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] != l_sorted[i])\
    \ {\n      res = false;\n      break;\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi5xolu81.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) {\n    return true;\n  }\n  bool incr = l[0] < l[1];\n\
    \  bool decr = l[0] > l[1];\n  if (not (incr or decr)) {\n    return true;\n \
    \ }\n  for (long i = 2; i < l.size(); i++) {\n    if (incr and l[i - 1] > l[i])\
    \ {\n      return false;\n    }\n    if (decr and l[i - 1] < l[i]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpts12xvro.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (int i = 1;\
    \ i < l.size(); i++) {\n    if (l[i - 1] < l[i]) {\n      decreasing = false;\n\
    \    }\n    if (l[i - 1] > l[i]) {\n      increasing = false;\n    }\n  }\n  return\
    \ decreasing || increasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwh7b1j58.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n    bool constant\
    \ = true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            if (increasing) {\n    \
    \            return false;\n            }\n            if (constant) {\n     \
    \           constant = false;\n            }\n        } else if (l[i] > l[i -\
    \ 1]) {\n            if (!increasing) {\n                return false;\n     \
    \       }\n            if (constant) {\n                constant = false;\n  \
    \          }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi0sxci1a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int inc=0,dec=0;\n  for(int i=0;i<l.size()-1;i++){\n    if(l[i]<l[i+1]){\n\
    \      inc++;\n    }\n    else if(l[i]>l[i+1]){\n      dec++;\n    }\n  }\n  if(inc==l.size()-1){\n\
    \    return true;\n  }\n  else if(dec==l.size()-1){\n    return true;\n  }\n \
    \ else{\n    return false;\n  }\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpny38sydx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp_3e39ii.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long> diffs(l.size() - 1);\n    std::transform(l.begin(),\
    \ l.end() - 1, l.begin() + 1, diffs.begin(),\n                   std::minus<long>());\n\
    \    return std::all_of(diffs.begin(), diffs.end(), [](long i) {\n        return\
    \ i == 0 || (i > 0 && diffs[0] > 0) || (i < 0 && diffs[0] < 0);\n    });\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bzpf5zy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return true;\n    bool decrease = l[0] > l[1];\n\
    \    for (int i = 1; i < l.size() - 1; i++) {\n        if (decrease && l[i] <\
    \ l[i + 1]) {\n            return false;\n        }\n        if (!decrease &&\
    \ l[i] > l[i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzd87l3p4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return true;\n    bool res = true;\n    bool x\
    \ = l[0] >= l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (x\
    \ && l[i] < l[i + 1]) return false;\n        if (!x && l[i] > l[i + 1]) return\
    \ false;\n    }\n    return res;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbe6h1oea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i - 1] > l[i])\n            increasing\
    \ = false;\n        if (l[i - 1] < l[i])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz65hdgx3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tstd::vector<long> a;\n\tfor (long i = 0; i < (long)l.size(); i++) {\n\
    \t\tif ((long)l.size() > 1) {\n\t\t\tif (l[i] <= l[i + 1]) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\
    \treturn true;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu0ed23xh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (unsigned i = 2; i < l.size(); i++) {\n        if (increasing) {\n  \
    \          if (l[i-1] > l[i]) return false;\n        } else {\n            if\
    \ (l[i-1] < l[i]) return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3qutj_sr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool is_inc = false;\n    bool is_dec = false;\n    if (l.size() <=\
    \ 1) {\n        return true;\n    }\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > l[i - 1]) {\n            is_inc = true;\n        }\n     \
    \   if (l[i] < l[i - 1]) {\n            is_dec = true;\n        }\n        if\
    \ (is_inc && is_dec) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8lih4xmf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long before = 0;\n  bool incr = false;\n  bool decr = false;\n  for\
    \ (long i = 0; i < l.size(); i++) {\n    if (i == 0) {\n      before = l[i];\n\
    \      continue;\n    }\n    if (l[i] > before) {\n      if (decr) {\n       \
    \ return false;\n      }\n      incr = true;\n    } else if (l[i] < before) {\n\
    \      if (incr) {\n        return false;\n      }\n      decr = true;\n    }\n\
    \    before = l[i];\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nxc1bd0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  return std::is_sorted(l.begin(), l.end(), [](long i, long j) {\n   \
    \ return i < j;\n  }) || std::is_sorted(l.begin(), l.end(), [](long i, long j)\
    \ {\n    return i > j;\n  });\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9__vgq57.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) {\n    return true;\n  }\n  int is_increasing = l[0]\
    \ < l[1];\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (is_increasing)\
    \ {\n      if (l[i] > l[i + 1]) {\n        return false;\n      }\n    } else\
    \ {\n      if (l[i] < l[i + 1]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxwn0pmow.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Your code here\n    if(l.size() == 1)\n        return true;\n \
    \   if(l[0] < l[1]){\n        for(int i = 1; i < l.size() - 1; i++){\n       \
    \     if(l[i] >= l[i+1])\n                return false;\n        }\n    }\n  \
    \  else if(l[0] > l[1]){\n        for(int i = 1; i < l.size() - 1; i++){\n   \
    \         if(l[i] <= l[i+1])\n                return false;\n        }\n    }\n\
    \    else{\n        for(int i = 1; i < l.size() - 1; i++){\n            if(l[i]\
    \ != l[i+1])\n                return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa4z9umd3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    long prev_val\
    \ = l[0];\n    for (auto i : l) {\n        if (i != prev_val) {\n            long\
    \ compare = i - prev_val;\n            prev_val = i;\n            for (auto j\
    \ : l) {\n                if (j != prev_val) {\n                    if (i - j\
    \ != compare) {\n                        return false;\n                    }\n\
    \                }\n            }\n            return true;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn2xpow0h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long m = l[0];\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (auto i : l) {\n        if (i >= m) {\n            m = i;\n \
    \       } else {\n            increasing = false;\n        }\n    }\n    m = l[0];\n\
    \    for (auto i : l) {\n        if (i <= m) {\n            m = i;\n        }\
    \ else {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7_galsjs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // >>> l = (std::vector<long>({(long)1, (long)2, (long)4, (long)20}))\n\
    \    // {1, 2, 4, 20}\n    // >>> l = (std::vector<long>({(long)1, (long)20, (long)4,\
    \ (long)10}))\n    // {1, 20, 4, 10}\n    // >>> l = (std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))\n    // {4, 1, 0, -10}\n    bool d = true;\n\
    \    if (l.size() < 2) {\n        return d;\n    }\n    // >>> l = (std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))\n    // {1, 2, 4, 20}\n    // >>> l = (std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))\n    // {1, 20, 4, 10}\n    // >>> l = (std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))\n    // {4, 1, 0, -10}\n    d = (l[1] - l[0])\
    \ > 0;\n    // >>> l = (std::vector<long>({(long)1, (long)2, (long)4, (long)20}))\n\
    \    // {1, 2, 4, 20}\n    // >>> d\n    // (true)\n    // >>> l = (std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))\n    // {1, 20, 4, 10}\n    // >>> d\n    //\
    \ (true)\n    // >>> l = (std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))\n\
    \    // {4, 1, 0, -10}\n    // >>> d\n    // (true)\n    for (int i = 1;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptliumok1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long curr = l[0];\n    bool inc = true;\n    bool dec = true;\n  \
    \  for (long i = 1; i < l.size(); i++) {\n        if (l[i] > curr) {\n       \
    \     dec = false;\n        } else if (l[i] < curr) {\n            inc = false;\n\
    \        }\n        curr = l[i];\n    }\n    return inc || dec;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpanqaycux.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool is_increasing = true;\n  bool is_decreasing = true;\n  for (unsigned\
    \ long i = 1; i < l.size(); i++) {\n    if (l[i - 1] > l[i]) {\n      is_increasing\
    \ = false;\n    }\n    if (l[i - 1] < l[i]) {\n      is_decreasing = false;\n\
    \    }\n  }\n  return is_increasing || is_decreasing;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphn7tpl6t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 2) {\n        return true;\n    }\n    bool is_asc\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (is_asc)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8cq_70oc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int flag = 0;\n    for(int i = 0; i < l.size() - 1; i++) {\n     \
    \   if(l[i] <= l[i + 1]) {\n            flag = 1;\n        }\n        else if(l[i]\
    \ >= l[i + 1]) {\n            flag = 2;\n        }\n        else {\n         \
    \   return false;\n        }\n    }\n    if(flag == 1 || flag == 2) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt7xe0ec9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    std::vector<long>\
    \ lo;\n    std::vector<long> hi;\n    for (int i = 0; i < l.size() - 1; i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            lo.push_back(l[i]);\n        } else\
    \ if (l[i] < l[i + 1]) {\n            hi.push_back(l[i]);\n        }\n    }\n\
    \    if (lo.size() == 0 && hi.size() == 0) {\n        return true;\n    } else\
    \ if (lo.size() == 0) {\n        if (hi[0] < l[l.size() - 1]) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    } else if\
    \ (hi.size() == 0) {\n        if (lo[0] > l[l.size() - 1]) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    } else {\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzmjvk36b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) {\n    return true;\n  }\n  int direction = l[1] -\
    \ l[0];\n  for (int i = 2; i < l.size(); i++) {\n    int curr_dir = l[i] - l[i\
    \ - 1];\n    if (direction > 0 && curr_dir < 0) {\n      return false;\n    }\n\
    \    if (direction < 0 && curr_dir > 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpew9iho5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::function<bool(int, int)> are_incr = [](int a, int b) { return\
    \ a <= b; };\n    std::function<bool(int, int)> are_decr = [](int a, int b) {\
    \ return a >= b; };\n    int size = l.size();\n    for (int i = 0; i < size -\
    \ 1; i++) {\n        if (i == 0) {\n            if (l[i] == l[i + 1]) {\n    \
    \            continue;\n            } else if (l[i] < l[i + 1]) {\n          \
    \      std::function<bool(int, int)> test = are_incr;\n                for (int\
    \ j = i + 1; j < size - 1; j++) {\n                    if (!test(l[j], l[j + 1]))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            } else {\n                std::function<bool(int, int)>\
    \ test = are_decr;\n                for (int j = i + 1; j < size - 1; j++) {\n\
    \                    if (!test(l[j], l[j + 1])) {\n                        return\
    \ false;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdsksrqya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa553348f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    return is_sorted(l.begin(), l.end()) || is_sorted(l.rbegin(), l.rend());\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppjx1upbs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Your code here\n    bool flag = false;\n    if(l.size() > 1)\n\
    \    {\n        int sign = l[1] - l[0];\n        flag = true;\n        for(int\
    \ i = 2; i < l.size(); i++)\n        {\n            if(l[i] - l[i-1] != sign)\n\
    \            {\n                flag = false;\n                break;\n      \
    \      }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk0kdkokx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  bool increasing=true;\n  bool decreasing=true;\n  for(int i=0;i<l.size()-1;i++){\n\
    \    if(l[i]<l[i+1]){\n      decreasing=false;\n    }\n    if(l[i]>l[i+1]){\n\
    \      increasing=false;\n    }\n  }\n  return increasing || decreasing;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn1hjtp8q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // ***replace this with your implementation***\n\tif(l.size()==0){\n\
    \t\treturn true;\n\t}\n\telse if(l.size()==1){\n\t\treturn true;\n\t}\n\telse{\n\
    \t\tlong a=l[0];\n\t\tint i=1;\n\t\tbool flag=0;\n\t\twhile(i<l.size()-1){\n\t\
    \t\tif(l[i]>a){\n\t\t\t\tif(l[i+1]>l[i]){\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    else if(l[i]<a){\n\t\t\t\tif(l[i+1]<l[i]){\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tif(l[i+1]>l[i]){\n\t\t\t\t\tflag=1;\n\t\t\t\t\ti++;\n\t\t\t\t\t\
    continue;\n\t\t\t\t}\n\t\t\t\telse if(l[i+1]<l[i]){\n\t\t\t\t\tflag=2;\n\t\t\t\
    \t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ti++;\n\t\t\t\
    \t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(l[i]>a && flag==1){\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse if(l[i]<a && flag==2){\n\t\t\treturn true;\n\t\t}\n\t\
    \telse if(l[i]>a && flag==0){\n\t\t\treturn true;\n\t\t}\n\t\telse if(l[i]<a &&\
    \ flag==0){\n\t\t\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuatzk099.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    long i=0;\n\
    \    while (i < l.size()-1) {\n        if (l[i] == l[i+1]) {\n            i +=\
    \ 1;\n            continue;\n        }\n        break;\n    }\n    if (i == l.size()-1)\
    \ {\n        return true;\n    }\n    if (l[i] < l[i+1]) {\n        for (long\
    \ j=i+1; j < l.size()-1; j++) {\n            if (l[j] > l[j+1]) {\n          \
    \      return false;\n            }\n        }\n    } else {\n        for (long\
    \ j=i+1; j < l.size()-1; j++) {\n            if (l[j] < l[j+1]) {\n          \
    \      return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph87f4a7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool asc = true;\n\tfor (auto it = l.begin(); it != l.end() - 1; it++)\
    \ {\n\t\tif (*it > *(it + 1)) {\n\t\t\tasc = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tif (asc) {\n\t\treturn true;\n\t}\n\tfor (auto it = l.begin(); it != l.end()\
    \ - 1; it++) {\n\t\tif (*it < *(it + 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzbm3sb1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) {\n        return true;\n    }\n    bool increasing\
    \ = false;\n    bool decreasing = false;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        increasing = increasing || (l[i] >= l[i - 1]);\n        decreasing\
    \ = decreasing || (l[i] <= l[i - 1]);\n    }\n    return (increasing && !decreasing)\
    \ || (!increasing && decreasing);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0qes2bq3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    else {\n  \
    \      if (l.size() == 1) {\n            return true;\n        }\n        else\
    \ {\n            if (l.size() == 2) {\n                return true;\n        \
    \    }\n            else {\n                if (l[0] == l[1]) {\n            \
    \        return monotonic(std::vector<long>(l.begin() + 1, l.end()));\n      \
    \          }\n                else {\n                    long cmp = l[0] < l[1]\
    \ ? 1 : -1;\n                    for (auto i : l) {\n                        if\
    \ ((i - l[0]) * cmp < 0) {\n                            return false;\n      \
    \                  }\n                    }\n                    return true;\n\
    \                }\n            }\n        }\n    }\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplgj_srw9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long> a = l;\n    bool b = false;\n    if (((long)l.size())\
    \ > ((long)1)) {\n        b = true;\n        if ((l[((int)0)]) < (l[((int)1)]))\
    \ {\n            for (int i = ((int)1); (i) < ((int)(l.size())); i++) {\n    \
    \            if ((l[i]) < (l[(i - ((int)1))])) {\n                    b = false;\n\
    \                    break;\n                }\n            }\n        } else\
    \ {\n            for (int i = ((int)1); (i) < ((int)(l.size())); i++) {\n    \
    \            if ((l[i]) > (l[(i - ((int)1))])) {\n                    b = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return b;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3ho2ly8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    bool positive = true;\n    bool negative\
    \ = true;\n    for (auto it = l.begin(); it != l.end() - 1; it++) {\n        if\
    \ ((*it) < (*(it + 1))) {\n            negative = false;\n        }\n        if\
    \ ((*it) > (*(it + 1))) {\n            positive = false;\n        }\n    }\n \
    \   return positive || negative;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp268p883c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long prev = l[0];\n    bool inc = true;\n    bool dec = true;\n  \
    \  for (auto i : l) {\n        inc = inc && (i > prev);\n        dec = dec &&\
    \ (i < prev);\n        prev = i;\n    }\n    return inc || dec;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvworii1c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long sz = l.size();\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    long i;\n    for (i = 1; i < sz; i++) {\n        if (l[i] > l[i\
    \ - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i\
    \ - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing\
    \ or decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwqfo1v13.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return true;\n    long x = l[0];\n    if (l.size()\
    \ == 1) return true;\n    long y = l[1];\n    bool direction = x < y;\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (x == y) {\n            continue;\n\
    \        }\n        if (direction != (x < y)) {\n            return false;\n \
    \       }\n        x = y;\n        y = l[i];\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpatecd_u1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),\
    \ l.end(), std::greater<long>());\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwl19b3l7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011390
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int flag=0;\n    for(int i=0;i<l.size()-1;i++){\n        if(l[i]<l[i+1]){\n\
    \            flag=1;\n            break;\n        }\n        else if(l[i]>l[i+1]){\n\
    \            flag=2;\n            break;\n        }\n    }\n    for(int i=0;i<l.size()-1;i++){\n\
    \        if(flag==1 && l[i]>l[i+1]){\n            return false;\n        }\n \
    \       else if(flag==2 && l[i]<l[i+1]){\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphyg0p4pu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011392
