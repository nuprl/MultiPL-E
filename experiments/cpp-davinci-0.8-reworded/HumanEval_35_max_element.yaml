name: HumanEval_35_max_element
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in\
  \ the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
  // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
  \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
  long max_element(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,\
  \ (long)-10}))) == (124));\n}\n"
completions: ['    return *std::max_element(l.begin(), l.end());', "    long maxval\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        maxval = std::max(maxval,\
    \ l[i]);\n    }\n    return maxval;", "\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\
    return max;", "    assert(l.size() > 0);\n    long maximum = l[0];\n    for (auto\
    \ i : l) {\n        if (i > maximum) {\n            maximum = i;\n        }\n\
    \    }\n    return maximum;", "  if (l.size() == (0)) {\n    assert((\"Input vector\
    \ cannot be empty\", 0));\n  }\n  long max = (l.at((0)));\n  for (long element\
    \ : l) {\n    if (element > max) {\n      max = element;\n    }\n  }\n  return\
    \ max;", "\treturn *max_element(l.begin(), l.end());", "  long len_l = l.size();\n\
    \  assert (len_l >= (long)1);\n  long max_l = l[(long)0];\n  long slice_index\
    \ = (long)0;\n  long increment_factor = (long)1;\n  long len_slice = (long)1;\n\
    \  while ((slice_index + len_slice) < len_l) {\n    while ((slice_index + len_slice)\
    \ < len_l) {\n      long max_slice = l[slice_index];\n      long slice_index_f\
    \ = slice_index;\n      long slice_index_t = (slice_index + len_slice);\n    \
    \  while (slice_index_f < slice_index_t) {\n        if (l[slice_index_f] > max_slice)\
    \ {\n          max_slice = l[slice_index_f];\n        }\n        slice_index_f\
    \ = (slice_index_f + (long)1);\n      }\n      max_l = max_slice;\n      slice_index\
    \ = (slice_index + len_slice);\n    }\n    len_slice = (len_slice * (long)2);\n\
    \    slice_index = (long)0;\n  }\n  return max_l;", "    assert(!l.empty());\n\
    \    std::sort(l.begin(), l.end());\n    return l.back();", "\tlong max = l[0];\n\
    \tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;", "  assert(!l.empty());\n  long m = l[0];\n  for (auto\
    \ x : l) {\n    if (x > m) {\n      m = x;\n    }\n  }\n  return m;", "  long\
    \ localmax = (long)0;\n  for (long i = (long)0; i < (long)l.size(); i++) {\n \
    \   if (l[i] > localmax) {\n      localmax = l[i];\n    }\n  }\n  return localmax;",
  "  assert(l.size() > 0);\n  long result = l[0];\n  for (long i = 0; i < l.size();\
    \ i++) {\n    result = std::max(result, l[i]);\n  }\n  return result;", "    std::vector<long>::iterator\
    \ max = std::max_element(l.begin(), l.end());\n    return *max;", "  assert(l.size()\
    \ > 0);\n  long max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;", "  if (l.size() ==\
    \ 0) return -1;\n  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", "\tlong\
    \ max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "    assert(!l.empty());\n    auto\
    \ ret = l[0];\n    for (auto x : l) {\n        if (x > ret) {\n            ret\
    \ = x;\n        }\n    }\n    return ret;", '    return *std::max_element(l.begin(),
    l.end());', "    long max_elem = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        max_elem = std::max(max_elem, l[i]);\n    }\n    return max_elem;",
  "    long m = LONG_MIN;\n    for (std::vector<long>::iterator it = l.begin(); it\
    \ != l.end(); ++it) {\n        m = *it > m ? *it : m;\n    }\n    return m;",
  '  return (long)0;', "  long max = 0;\n  for (long i = 0; i < (long)l.size(); i++)\
    \ {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", " \
    \ long max_el = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] >\
    \ max_el) {\n      max_el = l[i];\n    }\n  }\n  return max_el;", "  long max;\n\
    \  if (l.size() == 0) {\n    max = 0;\n  } else {\n    max = l[0];\n    for (int\
    \ i = 1; i < l.size(); i++) {\n      max = std::max(max, l[i]);\n    }\n  }\n\
    \  return max;", "  long big = l[0];\n  for (long i = 0; i < l.size(); i++) {\n\
    \    if (l[i] > big) {\n      big = l[i];\n    }\n  }\n  return big;", "    auto\
    \ maximum = (long)-1e18;\n    for (auto a : l)\n        maximum = std::max(maximum,\
    \ a);\n    return maximum;", "  auto tmp = l.begin();\n  long max = *tmp;\n  for\
    \ (tmp = l.begin(); tmp != l.end(); tmp++) {\n    if (max < *tmp) {\n      max\
    \ = *tmp;\n    }\n  }\n  return max;", "    long max = l[0];\n    for (int i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    assert (l.size() > 0);\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "  assert(l.size()\
    \ > 0);\n  long max = l[0];\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;", "  long max = l[0];\n\
    \  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", "long max=l[0];\nfor(int i=1;i<l.size();i++)\nif(l[i]>max)\n\
    max=l[i];\nreturn max;", "long max = l[0];\nfor (long i = 0; i < l.size(); i++)\
    \ {\nif (l[i] > max) {\nmax = l[i];", "    assert (l.size() != 0);\n    long ret\
    \ = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > ret) {\n\
    \            ret = l[i];\n        }\n    }\n    return ret;", "  if (l.size()\
    \ == 0) {\n    return 0;\n  }\n  long ret = l[0];\n  for (int i = 1; i < l.size();\
    \ i++) {\n    ret = std::max(ret, l[i]);\n  }\n  return ret;", "    assert(l.size()\
    \ > 0);\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    assert(!l.empty());\n    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    if (l.size() == 0) {\n        return\
    \ 0;\n    }\n    long result = l[0];\n    for (int i = 1; i < l.size(); i++) {\n\
    \        result = std::max(result, l[i]);\n    }\n    return result;", "  assert(l.size()\
    \ > 0);\n  long max = l[0];\n  for (unsigned long i = 0; i < l.size(); i++) {\n\
    \    if (l[i] > max)\n      max = l[i];\n  }\n  return max;", "\tlong maximum\
    \ = l[0];\n\tfor (auto i : l) {\n\t\tif (i > maximum) {\n\t\t\tmaximum = i;\n\t\
    \t}\n\t}\n\treturn maximum;", "  if ((l.size()) == (0)) {\n    throw std::invalid_argument(\"\
    Empty collection\");\n  }\n  long m = l[0];\n  for (long x : l) {\n    if ((x)\
    \ > (m)) {\n      m = x;\n    }\n  }\n  return m;", "// This function is correct.\n\
    // Start of function\nlong maximum = (long)0;\nfor (std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); i++) {\nif ((*i) > maximum) {\nmaximum = (*i);",
  "  long ans = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > ans)\
    \ {\n      ans = l[i];\n    }\n  }\n  return ans;", "    if (l.size() == 0) {\n\
    \        assert(false);\n    }\n    long result = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        result = (result > l[i]) ? result : l[i];\n  \
    \  }\n    return result;", "    long mx = LONG_MIN;\n    for (long elem : l) {\n\
    \        mx = std::max(mx, elem);\n    }\n    return mx;", "long max_elem = l[0];\n\
    std::vector<long>::iterator it;\nfor (it = l.begin(); it != l.end(); ++it) {\n\
    long elem = *it;\nif (elem > max_elem) {\nmax_elem = elem;", "  assert(l.size()\
    \ > 0);\n  long m = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > m)\n      m = l[i];\n  }\n  return m;", "    long res = 0;\n    for (auto\
    \ i : l) {\n        if (i > res) {\n            res = i;\n        }\n    }\n \
    \   return res;", "    long max = *std::max_element(l.begin(), l.end());\n   \
    \ return max;", "  long max = l[0];\n  for (unsigned long i = 1; i < l.size();\
    \ i++) {\n    max = l[i] > max ? l[i] : max;\n  }\n  return max;", "  long tmp\
    \ = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > tmp) {\n  \
    \    tmp = l[i];\n    }\n  }\n  return tmp;", "    long max = l[0];\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", '    return *std::max_element(l.begin(),
    l.end());', "  auto ret = l[0];\n  for (auto i : l) {\n    if (i > ret) ret =\
    \ i;\n  }\n  return ret;", "    long m = l[0];\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > m) {\n            m = l[i];\n        }\n    }\n \
    \   return m;", "    assert(l.size() >= 1);\n    long max_num = l[0];\n    for\
    \ (long i=1; i<l.size(); i++) {\n        if (l[i] > max_num) {\n            max_num\
    \ = l[i];\n        }\n    }\n    return max_num;", "    // long max = -100000000000000;\n\
    \    // std::vector<long>::iterator a = l.begin();\n    // std::vector<long>::iterator\
    \ b = l.end();\n    // for (std::vector<long>::iterator it = a; it != b; ++it)\
    \ {\n    //     if ((*it) > max) {\n    //         max = (*it);\n    //     }\n\
    \    // }\n    // return max;\n    long max = *max_element(l.begin(), l.end());\n\
    \    return max;", "  long _max = -999999;\n  for (long i : l) {\n    if (i >\
    \ _max) {\n      _max = i;\n    }\n  }\n  return _max;", "    assert(l.size()\
    \ > 0);\n    long m = l[0];\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   m = std::max(m, l[i]);\n    }\n    return m;", "  long max = 0;\n  for (long\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;", "\tauto max = l[0];\n\tfor (auto const &n : l) {\n\t\tif\
    \ (n > max) {\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;", "  std::vector<long>::iterator\
    \ it;\n  long max = -10000;\n  for (it = l.begin(); it != l.end(); it++) {\n \
    \   if (*it > max) {\n      max = *it;\n    }\n  }\n  return max;", "  long max\
    \ = l[0];\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n  \
    \    max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for (unsigned\
    \ long i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", '    return *std::max_element(l.begin(),
    l.end());', "  long max;\n  max = l[0];\n  for (std::vector<long>::iterator i\
    \ = l.begin(); i != l.end(); ++i) {\n    if (*i > max) {\n      max = *i;\n  \
    \  }\n  }\n  return max;", "    long ans = -1e18;\n    for (long i = 0; i < (long)l.size();\
    \ i++) {\n        if (l[i] > ans) {\n            ans = l[i];\n        }\n    }\n\
    \    return ans;", "    assert(!l.empty());\n    long max = l[0];\n    for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (*it > max) {\n         \
    \   max = *it;\n        }\n    }\n    return max;", "  assert(l.size() > 0);\n\
    \  long largest = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > largest) {\n      largest = l[i];\n    }\n  }\n  return largest;", "\t// assert(l.size()\
    \ > 0);\n\tlong m = l[0];\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tm = std::max(m,\
    \ l[i]);\n\t}\n\treturn m;", "    long max1 = std::numeric_limits<long>::min();\n\
    \    for (auto i : l) {\n        if (i > max1) {\n            max1 = i;\n    \
    \    }\n    }\n    return max1;", "    if (l.size() <= (long)0) {\n        throw\
    \ std::invalid_argument(\"l must be non-empty\");\n    }\n    long curr = (long)0;\n\
    \    long c = (long)0;\n    while (c < (long)l.size()) {\n        long i = l[c];\n\
    \        if (i > curr) {\n            curr = i;\n        }\n        c = c + (long)1;\n\
    \    }\n    return curr;", "  auto i = l.begin();\n  long m = *i;\n  ++i;\n  for\
    \ (; i != l.end(); ++i) {\n    long x = *i;\n    if (x > m) {\n      m = x;\n\
    \    }\n  }\n  return m;", "\t// Loop through each element of vector and find\
    \ maximum.\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif\
    \ (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "    //replace\
    \ the code below with your code\n    long max = l[0];\n    for(int i = 1; i <\
    \ l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n      \
    \  }\n    }\n    return max;", '    return *std::max_element(l.begin(), l.end());',
  "  long max_elem;\n  bool init_flag = false;\n  for (auto i : l) {\n    if (!init_flag)\
    \ {\n      max_elem = i;\n      init_flag = true;\n    } else {\n      if (i >\
    \ max_elem) {\n        max_elem = i;\n      }\n    }\n  }\n  return max_elem;",
  '    return *std::max_element(l.begin(), l.end());', "  assert(l.size() > 0);\n\
    \  long max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > max)\
    \ {\n      max = l[i];\n    }\n  }\n  return max;", "  long max = l[0];\n  for\
    \ (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", '  return *std::max_element(l.begin(), l.end());',
  "    long max_value = *max_element(l.begin(), l.end());\n    return max_value;",
  "    long res = l[0];\n    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > res) {\n            res = l[i];\n        }\n    }\n    return res;", "   \
    \ long max;\n    max = *std::max_element(l.begin(), l.end());\n    return max;",
  "    assert(((long)l.size()) > ((long)0));\n    long mx = l[0];\n    for (int i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > mx) {\n            mx = l[i];\n\
    \        }\n    }\n    return mx;", "  if(l.size() == (0)) {\n    return (0);\n\
    \  }\n  long max = l[(0)];\n  for(int i = (1); i < l.size(); i++) {\n    if(l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;", "    long res = -1000000000000000000L;\n\
    \    for (long  i = 0; i < (long )l.size(); i++) {\n        res = std::max(res,\
    \ l[i]);\n    }\n    return res;", "    long max_value = l[0];\n    for (int i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    return max_value;", "  long max = *(l.begin());\n\
    \  for (auto &i : l) {\n    if (i > max) {\n      max = i;\n    }\n  }\n  return\
    \ max;", "    assert(!l.empty());\n    long max = l[0];\n    for (auto e : l)\
    \ {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n   \
    \     if (l[i] > max)\n            max = l[i];\n    }\n    return max;", "   \
    \ long ret = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > ret) ret = l[i];\n    }\n    return ret;", "long max = l[0];\nfor (long i\
    \ = 1; i < l.size(); i++) {\nif (l[i] > max) {\nmax = l[i];", "    // Create an\
    \ iterator that points to the end of the vector.\n    std::vector<long>::iterator\
    \ iter = l.end();\n    assert(!(l.empty()));\n    // Initialize the largest element\
    \ so far to the last element.\n    long curr = *(iter - 1);\n    // Loop backwards\
    \ through the vector and check if the current element is\n    // greater than\
    \ the previous largest element.\n    while ((iter - 1) != l.begin()) {\n     \
    \   if (*(iter - 1) > curr) {\n            curr = *(iter - 1);\n        }\n  \
    \      // Decrement the iterator.\n        iter = iter - 1;\n    }\n    return\
    \ curr;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", '  return *std::max_element(l.begin(), l.end());', "  long max_val =\
    \ l[0];\n  for (auto i = (l.begin() + (long)1); i != l.end(); ++i) {\n    if ((*i)\
    \ > max_val) {\n      max_val = (*i);\n    }\n  }\n  return max_val;", "  long\
    \ max = 0;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n \
    \     max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i=1; i<l.size(); i++) {\n        if (l[i] > max) {\n            max =\
    \ l[i];\n        }\n    }\n    return max;", "  long res = 0;\n  for (int ind\
    \ = 0; ind < l.size(); ind++) {\n    res = std::max(res, l[ind]);\n  }\n  return\
    \ res;", "    assert(!l.empty());\n    return *std::max_element(l.begin(), l.end());",
  '  return *std::max_element(l.begin(), l.end());', "  long m = l[0];\n  for (auto\
    \ e : l) {\n    if (e > m)\n      m = e;\n  }\n  return m;", "    // Your code\
    \ here\n    long max = l[0];\n    for(long i = 0; i < l.size(); i++){\n      \
    \  if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;",
  "// l is the list of elements whose maximum is to be found.\n// Your code here\n\
    \    return *max_element(l.begin(), l.end());", "    long max_el = std::numeric_limits<long>::min();\n\
    \    for (auto el : l) {\n        if (el > max_el) {\n            max_el = el;\n\
    \        }\n    }\n    return max_el;", '  return *std::max_element(l.begin(),
    l.end());', "\tassert((l.size()) >= (1));\n\tlong max_elem = l[0];\n\tfor (long\
    \ i = 1; (i) < (l.size()); ++i) {\n\t\tif ((l[i]) > (max_elem)) {\n\t\t\tmax_elem\
    \ = l[i];\n\t\t}\n\t}\n\treturn max_elem;", '    return *max_element(l.begin(),
    l.end());', "    long maximum = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > maximum) {\n            maximum = l[i];\n        }\n \
    \   }\n    return maximum;", "\treturn *std::max_element(l.begin(), l.end());",
  "    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "long cur_max;\ncur_max = l[0];\nfor (auto i = (long)1; i <\
    \ (long)l.size(); i++) {\nif (l[i] > cur_max) {\ncur_max = l[i];", "  long max\
    \ = l[0];\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n  \
    \    max = l[i];\n    }\n  }\n  return max;", "    long maxVal = *max_element(l.begin(),\
    \ l.end());\n    return maxVal;", "    assert (l.size() > 0);\n    long ret =\
    \ 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > ret) ret =\
    \ l[i];\n    }\n    return ret;", '    return *std::max_element(l.begin(), l.end());',
  "  long r = std::numeric_limits<long>::min();\n  std::for_each(l.begin(), l.end(),\
    \ [&r](long v) { r = std::max(r, v); });\n  return r;", "\t/*\n\tassert(l.size()\
    \ > 0);\n\tlong max = l[0];\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\t*/\n\treturn *std::max_element(l.begin(),\
    \ l.end());", "  assert (l.size() > 0);\n  long max_elem = l[0];\n  for (auto\
    \ e : l) {\n    if (e > max_elem) {\n      max_elem = e;\n    }\n  }\n  return\
    \ max_elem;", "    long max = LONG_MIN;\n    for (auto e : l) {\n        if (e\
    \ > max) {\n            max = e;\n        }\n    }\n    return max;", '    return
    *max_element(l.begin(), l.end());', "  assert(l.size() > 0);\n  long res = l[0];\n\
    \  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > res) {\n      res = l[i];\n\
    \    }\n  }\n  return res;", "    assert(!l.empty());\n    long m = l[0];\n  \
    \  for (long i = 1; i < l.size(); i++) {\n        if (l[i] > m) {\n          \
    \  m = l[i];\n        }\n    }\n    return m;", "    long m = l[0];\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > m) {\n            m = l[i];\n\
    \        }\n    }\n    return m;", "  assert(l.size() > 0);\n  long maximum =\
    \ l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > maximum) {\n \
    \     maximum = l[i];\n    }\n  }\n  return maximum;", "  assert(l.size() > 0);\n\
    \  long max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > max)\
    \ {\n      max = l[i];\n    }\n  }\n  return max;", '  return *std::max_element(l.begin(),
    l.end());', "    assert(l.size() > 0);\n    return *max_element(l.begin(), l.end());",
  "  assert(!l.empty());\n  long m = l[0];\n  for (long i = 1; i < l.size(); i++)\
    \ {\n    if (l[i] > m) {\n      m = l[i];\n    }\n  }\n  return m;", "   long\
    \ max = l[0];\n   for (long i = 1; i < l.size(); i++) {\n      if (l[i] > max)\
    \ {\n         max = l[i];\n      }\n   }\n   return max;", "    long max = l[0];\n\
    \    for (std::vector<long>::size_type i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
  "    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", '  return
    *std::max_element(l.begin(), l.end());', '  return *std::max_element(l.begin(),
    l.end());', "    long max = -9999999999;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "  long max = *(l.begin());\n  for (auto it = l.begin(); it !=\
    \ l.end(); ++it) {\n    if (*it > max) {\n      max = *it;\n    }\n  }\n  return\
    \ max;", "    // <<< Don't Change\n    return std::accumulate(l.begin(), l.end(),\
    \ l[0], [](const long &a, const long &b) {\n        return std::max(a, b);\n \
    \   });\n    // >>>", "    assert(0 == l.size());\n    long res = l[0];\n    long\
    \ index_res = 0;\n    for (long j = 1; j < l.size(); j += 1) {\n        if (l[j]\
    \ > res) {\n            res = l[j];\n            index_res = j;\n        }\n \
    \   }\n    return res;", "  assert (l.size() > 0);\n  long max = l[0];\n  for\
    \ (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", "  long max;\n  max = l[0];\n  for (long i = 0; i\
    \ < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n \
    \ return max;", "    long max = *max_element(l.begin(), l.end());\n    return\
    \ max;", "    // Check if vector is empty.\n    if (l.size() == 0) {\n       \
    \ throw std::domain_error(\"Must provide a non-empty vector.\");\n    }\n    long\
    \ max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "\tlong max_l\
    \ = *std::max_element(l.begin(), l.end());\n\treturn max_l;", "  assert(l.size()\
    \ != 0);\n  long max = l[0];\n  for (long e : l) {\n    if (e > max) {\n     \
    \ max = e;\n    }\n  }\n  return max;", "\tassert((l.size()) > (0));\n\tlong max\
    \ = l[0];\n\tfor (long i = 0; i < (l.size()); i++) {\n\t\tif ((l[i]) > (max))\
    \ {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "    long max = LONG_MIN;\n\
    \    for (long x : l) {\n        if (x > max) {\n            max = x;\n      \
    \  }\n    }\n    return max;", "    assert(!l.empty());\n    auto result = std::max_element(l.begin(),\
    \ l.end());\n    return *result;", "    assert(!l.empty());\n    return *std::max_element(l.begin(),\
    \ l.end());", "    long r = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > r) r = l[i];\n    }\n    return r;", "  assert(((l.size())\
    \ >= (1)));\n  long m = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if\
    \ ((l[i]) > (m)) {\n      m = l[i];\n    }\n  }\n  return m;", "    long max =\
    \ 0;\n    for (auto i : l) {\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    return max;", "  long result = -2147483647;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > result) {\n      result = l[i];\n\
    \    }\n  }\n  return result;", "    assert(!l.empty());\n    long m = l[0];\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > m)\n           \
    \ m = l[i];\n    }\n    return m;", "    // TODO: Write your code here\n    //return\
    \ -1;\n    long element = INT_MIN;\n    for(int i=0;i<l.size();i++){\n       \
    \ if(l[i]>element){\n            element = l[i];\n        }\n    }\n    return\
    \ element;", "    long m = l[0];\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > m) {\n            m = l[i];\n        }\n    }\n    return\
    \ m;", "    assert(l.size() != 0);\n    long a = 0;\n    if (l.size() == 1)\n\
    \        return l[0];\n    if (l.size() == 2)\n        return l[0] < l[1] ? l[1]\
    \ : l[0];\n    if (l.size() % 2 == 0) {\n        a = l[0] < l[1] ? l[1] : l[0];\n\
    \        a = a < l[l.size() - 1] ? l[l.size() - 1] : a;\n        a = a < l[l.size()\
    \ - 2] ? l[l.size() - 2] : a;\n        return max_element(\n                std::vector<long>(l.begin()\
    \ + 2, l.end() - 2)) < a ? a : max_element(\n                std::vector<long>(l.begin()\
    \ + 2, l.end() - 2));\n    } else {\n        a = l[0] < l[1] ? l[1] : l[0];\n\
    \        a = a < l[l.size() - 1] ? l[l.size() - 1] : a;\n        return max_element(\n\
    \                std::vector<long>(l.begin() + 1, l.end() - 1)) < a ? a : max_element(\n\
    \                std::vector<long>(l.begin() + 1, l.end() - 1));\n    }", "  if\
    \ (l.size() == 0) {\n    return 0;\n  }\n  return *std::max_element(l.begin(),\
    \ l.end());", "  long max_element = l[0];\n  for (long i = 0; i < l.size(); i++)\
    \ {\n    max_element = std::max(max_element, l[i]);\n  }\n  return max_element;",
  "    if (l.size() == 0) {\n        return 0;\n    }\n    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "\tlong max = l[0];\n\tfor (int\
    \ i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;", "    long max = l[0];\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    assert (l.size() > 0);\n    long max = l[0];\n    for\
    \ (long i=1; i<l.size(); i++) {\n        if (l[i] > max) {\n            max =\
    \ l[i];\n        }\n    }\n    return max;", "  long max;\n  if (((bool)(l.size())))\
    \ {\n    max = l[(0)];\n  } else {\n    return ((long)0);\n  }\n  {\n    long\
    \ i;\n    i = (1);\n    for (; i < l.size(); i++) {\n      if (l[i] > max) {\n\
    \        max = l[i];\n      }\n    }\n  }\n  return max;", "  long max=l[0];\n\
    \  for(int i=1;i<l.size();i++)\n    if(l[i]>max)\n      max=l[i];\n  return max;",
  "\tlong val = l[0];\n\tfor (long i=1; i<(long)l.size(); i++) {\n\t\tif (l[i] > val)\
    \ {\n\t\t\tval = l[i];\n\t\t}\n\t}\n\treturn val;", "    assert(!l.empty());\n\
    \    long x = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        x = std::max(x,\
    \ l[i]);\n    }\n    return x;", "    long max = std::numeric_limits<long>::min();\n\
    \    for (auto e : l) {\n        if (e > max) {\n            max = e;\n      \
    \  }\n    }\n    return max;", "\tassert(l.size()>0);\n\tlong ans = l[0];\n\t\
    for (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > ans) {\n\t\t\tans = l[i];\n\
    \t\t}\n\t}\n\treturn ans;", "    assert(l.size() != 0);\n    long max = l[0];\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;", "    assert(l.size() >\
    \ 0);\n    long x = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] > x) {\n            x = l[i];\n        }\n    }\n    return x;", "   \
    \ long c1= l[0];\n    for(auto i : l)\n        if(i > c1)\n            c1 = i;\n\
    \    return c1;", "  long r = l[0];\n  for (auto i : l) {\n    if (i > r) r =\
    \ i;\n  }\n  return r;", "  assert(l.size() > 0);\n  long maximum = l[0];\n  for\
    \ (long i = 0; i < l.size(); i++) {\n    if (l[i] > maximum) {\n      maximum\
    \ = l[i];\n    }\n  }\n  return maximum;", "  assert(!l.empty());\n  long m =\
    \ l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > m) {\n      m\
    \ = l[i];\n    }\n  }\n  return m;", "    // >>> max_element((std::vector<long>({(long)1,\
    \ (long)2, (long)3})))\n    // (3)\n    // >>> max_element((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123,\
    \ (long)1, (long)-10})))\n    // (123)\n    return *(std::max_element(l.begin(),\
    \ l.end()));", '    return *std::max_element(l.begin(), l.end());', "\tlong ret\
    \ = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > ret) {\n\t\t\
    \tret = l[i];\n\t\t}\n\t}\n\treturn ret;", "    // std::cout << \"max_element\
    \ \" << l << std::endl;\n    long max = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    assert(!l.empty());\n    long m = l[0];\n    for (long\
    \ e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return\
    \ m;", '    return *std::max_element(l.begin(), l.end());', "    assert(l.size()\
    \ > 0);\n    long v = l[0];\n    for (int i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] > v) {\n            v = l[i];\n        }\n    }\n    return v;", '    return
    *std::max_element(l.begin(), l.end());', "    // max_element - return max element\
    \ from vector\n    if (l.size() == 0) {\n        return 0;\n    }\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\
    \ {\n            max_val = l[i];\n        }\n    }\n    return max_val;", "  \
    \  long result = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        result\
    \ = std::max(result, l[i]);\n    }\n    return result;", "  assert (l.size() >\
    \ 0);\n  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;", "  std::sort(l.begin(),\
    \ l.end());\n  return l.back();", "    long mx = 0;\n    for (auto x : l) {\n\
    \        mx = std::max(mx, x);\n    }\n    return mx;", "    assert(l.size() >\
    \ 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
  '    return *max_element(l.begin(), l.end());', '  return *std::max_element(l.begin(),
    l.end());', "long max = l[0];\nfor (long i = 0; i < l.size(); i++) {\nif (l[i]\
    \ > max) {\nmax = l[i];", "    assert(!l.empty());\n    long x = l[0];\n    for\
    \ (size_t i = 0; i < l.size(); i++) {\n        x = (x > l[i]) ? x : l[i];\n  \
    \  }\n    return x;", "    long v;\n    if ((l.size()) == (0)) {\n        assert(false);\n\
    \    }\n    v = l[0];\n    for (auto i = l.begin(); i != l.end(); ++i) {\n   \
    \     if ((*i) > v) {\n            v = (*i);\n        }\n    }\n    return v;",
  "    long res = 0;\n    if (!l.empty()) {\n        res = l[0];\n        for (auto\
    \ x : l) {\n            if (x > res) {\n                res = x;\n           \
    \ }\n        }\n    }\n    return res;", '  return *std::max_element(l.begin(),
    l.end());', "    assert(l.size() > 0);\n    long max = l[0];\n    for (long i=1;\
    \ i<l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;", "\t// >>> max_element((std::vector<long>({(long)1,\
    \ (long)2, (long)3})))\n\tlong ret = ((long)0);\n\tlong count = ((long)0);\n\t\
    for (std::vector<long>::iterator it=l.begin(); it!=l.end(); ++it) {\n\t\tif (count\
    \ == ((long)0)) {\n\t\t\tret = (*it);\n\t\t} else {\n\t\t\tif ((*it) > ret) {\n\
    \t\t\t\tret = (*it);\n\t\t\t}\n\t\t}\n\t\tcount = (count + ((long)1));\n\t}\n\t\
    return ret;", "    if (l.size() == 0) {\n        return LONG_MIN;\n    }\n   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = std::numeric_limits<long>::min();\n  for (long i : l) {\n    if (i > max)\
    \ {\n      max = i;\n    }\n  }\n  return max;"]
stop_tokens:
- "\n}"
