language: cpp
name: HumanEval_17_parse_music
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ output;\n    for (auto s : music_string) {\n        switch (s) {\n         \
    \   case 'o':\n                output.push_back(4);\n                break;\n\
    \            case '|':\n                output.push_back(2);\n               \
    \ break;\n            case '.':\n                output.push_back(1);\n      \
    \          break;\n            default:\n                break;\n        }\n \
    \   }\n    return output;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpgp0cct9t: /tmp/tmpgp0cct9t.cpp:35: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ result;\n  std::stringstream ss(music_string);\n  std::string item;\n  while\
    \ (std::getline(ss, item, ' ')) {\n    if (item == \"o\") {\n      result.push_back(4);\n\
    \    } else if (item == \"o|\") {\n      result.push_back(2);\n    } else if (item\
    \ == \".|\") {\n      result.push_back(1);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    char *str = const_cast<char *>(music_string.c_str());\n    char\
    \ *pch = strtok(str, \" \");\n    while (pch != NULL) {\n        if (strcmp(pch,\
    \ \"o\") == 0)\n            result.push_back(4);\n        else if (strcmp(pch,\
    \ \"o|\") == 0)\n            result.push_back(2);\n        else if (strcmp(pch,\
    \ \".|\") == 0)\n            result.push_back(1);\n        pch = strtok(NULL,\
    \ \" \");\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == ' ') {\n\t\t\tcontinue;\n\t\t}\n\t\tif (music_string[i] == 'o') {\n\t\t\t\
    result.push_back(4);\n\t\t}\n\t\tif (music_string[i] == '|') {\n\t\t\tresult.push_back(1);\n\
    \t\t}\n\t\tif (music_string[i] == '.') {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpmdnvuqkp: /tmp/tmpmdnvuqkp.cpp:34: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        std::cout << item << std::endl;\n\
    \        if (item == \"o\") {\n            result.push_back(4);\n        } else\
    \ if (item == \"o|\") {\n            result.push_back(2);\n        } else if (item\
    \ == \".|\") {\n            result.push_back(1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: 'o

    o

    o

    o

    .|

    .|

    .|

    .|

    o|

    o|

    .|

    .|

    o

    o

    o

    o

    o|

    .|

    o|

    .|

    o

    o|

    o

    o|

    '
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ b;\n    std::istringstream iss(music_string);\n    std::string a;\n    while(iss\
    \ >> a) {\n        if(a == \"o\") {\n            b.push_back(4);\n        }\n\
    \        else if(a == \"o|\") {\n            b.push_back(2);\n        }\n    \
    \    else if(a == \".|\") {\n            b.push_back(1);\n        }\n    }\n \
    \   return b;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ vec;\n    std::vector<std::string> vec2;\n    //std::cout<<music_string;\n \
    \   for(int i=0;i<music_string.length();i++)\n    {\n        std::string temp\
    \ = \"\";\n        if(music_string[i] == ' ')\n        {\n            vec2.push_back(temp);\n\
    \        }\n        else if(music_string[i] == 'o' || music_string[i] == '.' ||\
    \ music_string[i] == '|')\n        {\n            temp = temp + music_string[i];\n\
    \            if(music_string[i+1] == ' ')\n            {\n                vec2.push_back(temp);\n\
    \            }\n            else if(music_string[i+1] == 'o' || music_string[i+1]\
    \ == '.' || music_string[i+1] == '|')\n            {\n                temp = temp\
    \ + music_string[i+1];\n                vec2.push_back(temp);\n              \
    \  i++;\n            }\n        }\n    }\n    //std::cout<<\"\\n\\nVEC2: \\n\"\
    ;\n    //for(auto i=vec2.begin();i!=vec2.end();i++)\n    //    std::cout<<*i<<\"\
    \ \";\n    for(auto i=vec2.begin();i!=vec2.end();i++)\n    {\n        if(*i ==\
    \ \"o\" || *i == \"o|\")\n        {\n            vec.push_back(4);\n        }\n\
    \        else if(*i == \".|\")\n        {\n            vec.push_back(1);\n   \
    \     }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpf2ndelva: /tmp/tmpf2ndelva.cpp:57: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::string cur_str;\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        if (music_string[i] == ' ') {\n            if (cur_str == \"\
    o\") {\n                result.push_back(4);\n            } else if (cur_str ==\
    \ \"o|\") {\n                result.push_back(2);\n            } else if (cur_str\
    \ == \".|\") {\n                result.push_back(1);\n            }\n        \
    \    cur_str = \"\";\n        } else {\n            cur_str += music_string[i];\n\
    \        }\n    }\n    if (cur_str == \"o\") {\n        result.push_back(4);\n\
    \    } else if (cur_str == \"o|\") {\n        result.push_back(2);\n    } else\
    \ if (cur_str == \".|\") {\n        result.push_back(1);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    char * cstr = new char [music_string.length()+1];\n    std::strcpy\
    \ (cstr, music_string.c_str());\n    char * p = std::strtok (cstr,\" \");\n  \
    \  while (p!=0)\n    {\n        if(*p == 'o'){\n            result.push_back(4);\n\
    \        }\n        else if(*p == '.'){\n            result.push_back(1);\n  \
    \      }\n        p = std::strtok(NULL,\" \");\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpn7kh4dxk: /tmp/tmpn7kh4dxk.cpp:34: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (char &c : music_string) {\n        if (c == 'o') {\n     \
    \       result.push_back(4);\n        } else if (c == '|') {\n            result.push_back(1);\n\
    \        }\n    }\n    std::transform(result.begin(), result.end(), result.begin(),\
    \ [&](long num) {\n        if (num == 1)\n            return 2;\n        else\n\
    \            return num;\n    });\n    return result;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmexur8i6.cpp: In lambda function:\n/tmp/tmpmexur8i6.cpp:25:20:\
    \ error: inconsistent types \u2018int\u2019 and \u2018long int\u2019 deduced for\
    \ lambda return type\n   25 |             return num;\n      |               \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    char current;\n    for (int i = 0; i < music_string.length(); i++)\
    \ {\n        current = music_string[i];\n        if (current == 'o') {\n     \
    \       beats.push_back(4);\n        } else if (current == '|') {\n          \
    \  i++;\n            if (music_string[i] == '.') {\n                beats.push_back(1);\n\
    \            } else {\n                beats.push_back(2);\n            }\n  \
    \      }\n    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmprp0r61e9: /tmp/tmprp0r61e9.cpp:34: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ durations;\n\tlong duration = 1;\n\tstd::istringstream f(music_string);\n\t\
    std::string line;\n\tstd::vector<std::string> line_vect;\n\twhile (std::getline(f,\
    \ line)) {\n\t\tstd::istringstream iss(line);\n\t\twhile (iss) {\n\t\t\tstd::string\
    \ subs;\n\t\t\tiss >> subs;\n\t\t\tline_vect.push_back(subs);\n\t\t}\n\t}\n\t\
    for (auto e : line_vect) {\n\t\tif (e.size() == 1) {\n\t\t\tduration = 1;\n\t\t\
    }\n\t\telse if (e.size() == 2) {\n\t\t\tif (e[0] == 'o') {\n\t\t\t\tduration =\
    \ 4;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tduration = 2;\n\t\t\t}\n\t\t}\n\t\tdurations.push_back(duration);\n\
    \t}\n\treturn durations;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpua_kri6v: /tmp/tmpua_kri6v.cpp:45: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long>\
    \ v;\nchar *a = &music_string[0];\nint i=0;\nint count=0;\nwhile(a[i]!='\\0')\n\
    {\nif(a[i]=='o')\n{\ncount++;\nif(a[i+1]=='|')\nv.push_back(2);\nelse\nv.push_back(4);\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt5d0wh7f.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmpt5d0wh7f.cpp:27:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   27 | int main() {\n      |            ^\n/tmp/tmpt5d0wh7f.cpp:34:1:\
    \ error: expected \u2018}\u2019 at end of input\n   34 | }\n      | ^\n/tmp/tmpt5d0wh7f.cpp:18:1:\
    \ note: to match this \u2018{\u2019\n   18 | {\n      | ^\n/tmp/tmpt5d0wh7f.cpp:34:1:\
    \ error: expected \u2018}\u2019 at end of input\n   34 | }\n      | ^\n/tmp/tmpt5d0wh7f.cpp:12:57:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> parse_music(std::string\
    \ music_string) {\n      |                                                   \
    \      ^\n/tmp/tmpt5d0wh7f.cpp:34:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   34 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ your code here\n    std::vector<long> result;\n    std::string word;\n    std::stringstream\
    \ stream(music_string);\n    while (stream >> word) {\n        if (word == \"\
    o\")\n            result.push_back(4);\n        else if (word == \"o|\")\n   \
    \         result.push_back(2);\n        else if (word == \".|\")\n           \
    \ result.push_back(1);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ answer;\n    if (music_string.empty()) {\n        return answer;\n    }\n  \
    \  long size = music_string.size();\n    std::string token;\n    std::string delimiter(\"\
    \ \");\n    long pos = 0;\n    while ((pos = music_string.find(delimiter)) !=\
    \ std::string::npos) {\n        token = music_string.substr(0, pos);\n       \
    \ if (token.compare(\"o\") == 0) {\n            answer.push_back(4);\n       \
    \ } else if (token.compare(\"o|\") == 0) {\n            answer.push_back(2);\n\
    \        } else if (token.compare(\".|\") == 0) {\n            answer.push_back(1);\n\
    \        }\n        music_string.erase(0, pos + delimiter.length());\n    }\n\
    \    if (music_string.compare(\"o\") == 0) {\n        answer.push_back(4);\n \
    \   } else if (music_string.compare(\"o|\") == 0) {\n        answer.push_back(2);\n\
    \    } else if (music_string.compare(\".|\") == 0) {\n        answer.push_back(1);\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ vec;\n\tstd::stringstream ss(music_string);\n\tstd::string temp;\n\twhile (std::getline(ss,\
    \ temp, ' ')) {\n\t\tif (temp == \"o\") {\n\t\t\tvec.push_back(4);\n\t\t}\n\t\t\
    else if (temp == \"o|\") {\n\t\t\tvec.push_back(2);\n\t\t}\n\t\telse if (temp\
    \ == \".|\") {\n\t\t\tvec.push_back(1);\n\t\t}\n\t}\n\treturn vec;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    int\
    \ l = music_string.length();\n    std::vector<long> b;\n    std::string temp =\
    \ \"\";\n    for(int i = 0; i < l; i++) {\n        if(music_string[i] == 'o')\
    \ {\n            temp += music_string[i];\n            if(music_string[i+1] ==\
    \ '|') {\n                b.push_back(2);\n                temp += music_string[i+1];\n\
    \                i++;\n            }\n            else {\n                b.push_back(4);\n\
    \            }\n        }\n        else if(music_string[i] == '.') {\n       \
    \     temp += music_string[i];\n            if(music_string[i+1] == '|') {\n \
    \               b.push_back(1);\n                temp += music_string[i+1];\n\
    \                i++;\n            }\n        }\n        else if(music_string[i]\
    \ == ' ') {\n            temp += music_string[i];\n        }\n    }\n    return\
    \ b;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    long d = 0;\n    for (size_t i = 0; i < music_string.size(); i++)\
    \ {\n        if (music_string[i] == 'o') {\n            if (music_string[i + 1]\
    \ == ' ') {\n                d = 4;\n            } else {\n                d =\
    \ 2;\n            }\n        } else if (music_string[i] == '.') {\n          \
    \  d = 1;\n        }\n        result.push_back(d);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpilb1ylcq: /tmp/tmpilb1ylcq.cpp:32: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::string note;\n    int i = 0;\n    while (i < music_string.size())\
    \ {\n        while (music_string[i] == ' ') {\n            i++;\n        }\n \
    \       while (music_string[i] != ' ' && i < music_string.size()) {\n        \
    \    note += music_string[i];\n            i++;\n        }\n        if (note ==\
    \ \"o\") {\n            result.push_back(4);\n        } else if (note == \"o|\"\
    ) {\n            result.push_back(2);\n        } else if (note == \".|\") {\n\
    \            result.push_back(1);\n        }\n        note = \"\";\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ music = {};\n    int i = 0;\n    while (i < music_string.length()) {\n     \
    \   if (music_string[i] == 'o') {\n            music.push_back(4);\n         \
    \   i++;\n        } else if (music_string[i] == '.') {\n            music.push_back(1);\n\
    \            i+=2;\n        }\n    }\n    return music;\n}\nint main() {\n   \
    \ auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ans;\n    int i=0;\n    while(i<music_string.size()){\n        if(music_string[i]=='o'){\n\
    \            ans.push_back(4);\n            i++;\n        }\n        else if(music_string[i]=='.'){\n\
    \            ans.push_back(1);\n            i+=2;\n        }\n        else{\n\
    \            assert(false);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp_q2bpuo2: /tmp/tmp_q2bpuo2.cpp:25: std::vector<long int> parse_music(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int length = music_string.length();\n    int i = 0;\n    while(i\
    \ < length) {\n        if(music_string[i] == 'o') {\n            if(music_string[i+1]\
    \ == ' ') {\n                result.push_back(4);\n                i += 2;\n \
    \           }\n            else if(music_string[i+1] == '|') {\n             \
    \   result.push_back(2);\n                i += 3;\n            }\n        }\n\
    \        else if(music_string[i] == '.') {\n            result.push_back(1);\n\
    \            i += 3;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\tlong beat;\n\tfor (int i = 0; i < music_string.length(); i++) {\n\t\
    \tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] == ' ') {\n\t\t\
    \t\tbeat = 4;\n\t\t\t\tbeats.push_back(beat);\n\t\t\t}\n\t\t\telse if (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tbeat = 2;\n\t\t\t\tbeats.push_back(beat);\n\t\t\t\t\
    i++;\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tbeat = 1;\n\
    \t\t\tbeats.push_back(beat);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn beats;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp32h688qx: /tmp/tmp32h688qx.cpp:38: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    int currentBeat = 0;\n    for (int i = 0; i < music_string.length();\
    \ i++) {\n        if (music_string[i] == 'o') {\n            if (i+1 < music_string.length()\
    \ && music_string[i+1] == '|') {\n                beats.push_back(2);\n      \
    \          i++;\n            } else {\n                beats.push_back(4);\n \
    \           }\n        } else if (music_string[i] == '.') {\n            beats.push_back(1);\n\
    \            i++;\n        }\n    }\n    return beats;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats(0);\n\tstd::string s;\n\tstd::stringstream ss(music_string);\n\t\n\twhile\
    \ (std::getline(ss, s, ' ')) {\n\t\tif (s.find(\"o\") != std::string::npos) {\n\
    \t\t\tif (s.length() == 1) {\n\t\t\t\tbeats.push_back(4);\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tbeats.push_back(2);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tbeats.push_back(1);\n\
    \t\t}\n\t}\n\treturn beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\tint pos = 0;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\
    \tif (music_string[i] == ' ') {\n\t\t\tif (music_string[i - 1] == 'o') {\n\t\t\
    \t\tbeats.push_back(4);\n\t\t\t}\n\t\t\telse if (music_string[i - 1] == '.') {\n\
    \t\t\t\tbeats.push_back(1);\n\t\t\t}\n\t\t\telse if (music_string[i - 1] == '|')\
    \ {\n\t\t\t\tbeats.push_back(2);\n\t\t\t}\n\t\t}\n\t}\n\treturn beats;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpiy9iyob6: /tmp/tmpiy9iyob6.cpp:33: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tresult.push_back(4);\n\t\t}\n\t\telse if (music_string[i] ==\
    \ '.') {\n\t\t\tresult.push_back(1);\n\t\t}\n\t\telse if (music_string[i] == '|')\
    \ {\n\t\t\tresult.push_back(2);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpa7r2pd_6: /tmp/tmpa7r2pd_6.cpp:31: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    if (music_string.size() == 0) {\n        return res;\n    }\n    std::stringstream\
    \ ss(music_string);\n    std::string note;\n    while (std::getline(ss, note,\
    \ ' ')) {\n        if (note == \"o\") {\n            res.push_back(4);\n     \
    \   } else if (note == \"o|\") {\n            res.push_back(2);\n        } else\
    \ if (note == \".|\") {\n            res.push_back(1);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ durations = {};\n    std::stringstream ss(music_string);\n    std::string item;\n\
    \    while (std::getline(ss, item, ' ')) {\n        if (item == \"o\") {\n   \
    \         durations.push_back(4);\n        } else if (item == \"o|\") {\n    \
    \        durations.push_back(2);\n        } else if (item == \".|\") {\n     \
    \       durations.push_back(1);\n        }\n    }\n    return durations;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ' || music_string[i + 1]\
    \ == '\\0') {\n                res.push_back(4);\n            } else if (music_string[i\
    \ + 1] == '|') {\n                res.push_back(2);\n                i++;\n  \
    \          }\n        } else if (music_string[i] == '.') {\n            if (music_string[i\
    \ + 1] == '|') {\n                res.push_back(1);\n                i++;\n  \
    \          }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::map<char, long> char_to_notes = {{'o', 4}, {'|', 2}, {'.',\
    \ 1}};\n    std::string value = \"\";\n    for (const auto& ch: music_string)\
    \ {\n        if (ch == ' ') {\n            result.push_back(char_to_notes[value[0]]);\n\
    \            value = \"\";\n        } else {\n            value += ch;\n     \
    \   }\n    }\n    result.push_back(char_to_notes[value[0]]);\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmppgqnqdkb: /tmp/tmppgqnqdkb.cpp:29: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::istringstream iss(music_string);\n    std::string tmp;\n  \
    \  while (std::getline(iss, tmp, ' ')) {\n        if (tmp == \"o\") {\n      \
    \      beats.push_back(4);\n        } else if (tmp == \"o|\") {\n            beats.push_back(2);\n\
    \        } else if (tmp == \".|\") {\n            beats.push_back(1);\n      \
    \  }\n    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ use regex\n    std::regex r(\"((o|\\\\.|\\\\|)+)\");\n    std::smatch result;\n\
    \    std::vector<long> resultLong;\n    long temp;\n    while (std::regex_search(music_string,\
    \ result, r))\n    {\n        std::string temp = result[1];\n        if (temp.length()\
    \ == 4) {\n            resultLong.push_back(4);\n        }\n        else if (temp.length()\
    \ == 3) {\n            resultLong.push_back(2);\n        }\n        else if (temp.length()\
    \ == 2) {\n            resultLong.push_back(1);\n        }\n        else if (temp.length()\
    \ == 8) {\n            resultLong.push_back(4);\n            resultLong.push_back(4);\n\
    \        }\n        music_string = result.suffix().str();\n    }\n    return resultLong;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpqh_pngfj: /tmp/tmpqh_pngfj.cpp:41: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ time;\n\tint len = music_string.length();\n\tint j = 0;\n\twhile (j < len) {\n\
    \t\tif (music_string[j] == 'o') {\n\t\t\ttime.push_back(4);\n\t\t\tj += 3;\n\t\
    \t}\n\t\telse if (music_string[j] == '.') {\n\t\t\ttime.push_back(1);\n\t\t\t\
    j += 3;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn time;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpv92eitdw: /tmp/tmpv92eitdw.cpp:34: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (size_t i = 0; i < music_string.size(); i++) {\n        if\
    \ (music_string[i] == 'o') {\n            if (music_string[i + 1] == '|') {\n\
    \                result.push_back(2);\n                i++;\n            } else\
    \ {\n                result.push_back(4);\n            }\n        } else if (music_string[i]\
    \ == '.') {\n            result.push_back(1);\n            i++;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tlong\
    \ msz = music_string.size();\n\tstd::vector<long>result;\n\tlong itr = 0;\n\t\
    while (itr < msz) {\n\t\tif (music_string[itr] == 'o') {\n\t\t\tif (music_string[itr\
    \ + 1] == ' ') {\n\t\t\t\tresult.push_back(4);\n\t\t\t\titr += 2;\n\t\t\t}\n\t\
    \t\telse if (music_string[itr + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\
    \t\t\titr += 3;\n\t\t\t}\n\t\t}\n\t\telse if (music_string[itr] == '.') {\n\t\t\
    \tif (music_string[itr + 1] == '|') {\n\t\t\t\tresult.push_back(1);\n\t\t\t\t\
    itr += 3;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    vector<long>\
    \ result;\n    vector<char> temp;\n    vector<char> words;\n    vector<char> characters;\n\
    \    vector<char> tempo;\n    vector<char> lines;\n    vector<char> numbers;\n\
    \    vector<char> tempo_final;\n    vector<char> words_final;\n    vector<char>\
    \ lines_final;\n    vector<char> numbers_final;\n    vector<char> characters_final;\n\
    \    vector<char> tempo_final_final;\n    vector<char> words_final_final;\n  \
    \  vector<char> lines_final_final;\n    vector<char> numbers_final_final;\n  \
    \  vector<char> characters_final_final;\n    vector<char> blank;\n    vector<char>\
    \ final_result;\n    int count = 0;\n    for (auto c : music_string) {\n     \
    \   if (c == '|') {\n            words.push_back(c);\n        }\n        if (c\
    \ == ' ') {\n            characters.push_back(c);\n        }\n        if (c ==\
    \ 'o') {\n            tempo.push_back(c);\n        }\n        if (c == '.') {\n\
    \            lines.push_back(c);\n        }\n        if (c == '0') {\n       \
    \     numbers.push_back(c);\n        }\n    }\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        if (music_string[i] == '|') {\n            words_final.push_back(music_string[i]);\n\
    \        }\n        if (music_string[i] == ' ') {\n            characters_final.push_back(music_string[i]);\n\
    \        }\n        if (music_string[i] == 'o') {\n            tempo_final.push_back(music_string[i]);\n\
    \        }\n        if (music_string[i] == '.') {\n            lines_final.push_back(music_string[i]);\n\
    \        }\n        if (music_string[i] == '0') {\n            numbers_final.push_back(music_string[i]);\n\
    \        }\n\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp87jnz4fu.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmp87jnz4fu.cpp:13:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   13 |     vector<long> result;\n\
    \      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp87jnz4fu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp87jnz4fu.cpp:13:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   13 |     vector<long>\
    \ result;\n      |            ^~~~\n/tmp/tmp87jnz4fu.cpp:14:12: error: expected\
    \ primary-expression before \u2018char\u2019\n   14 |     vector<char> temp;\n\
    \      |            ^~~~\n/tmp/tmp87jnz4fu.cpp:15:12: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     vector<char> words;\n      |          \
    \  ^~~~\n/tmp/tmp87jnz4fu.cpp:16:12: error: expected primary-expression before\
    \ \u2018char\u2019\n   16 |     vector<char> characters;\n      |            ^~~~\n\
    /tmp/tmp87jnz4fu.cpp:17:12: error: expected primary-expression before \u2018char\u2019\
    \n   17 |     vector<char> tempo;\n      |            ^~~~\n/tmp/tmp87jnz4fu.cpp:18:12:\
    \ error: expected primary-expression before \u2018char\u2019\n   18 |     vector<char>\
    \ lines;\n      |            ^~~~\n/tmp/tmp87jnz4fu.cpp:19:12: error: expected\
    \ primary-expression before \u2018char\u2019\n   19 |     vector<char> numbers;\n\
    \      |            ^~~~\n/tmp/tmp87jnz4fu.cpp:20:12: error: expected primary-expression\
    \ before \u2018char\u2019\n   20 |     vector<char> tempo_final;\n      |    \
    \        ^~~~\n/tmp/tmp87jnz4fu.cpp:21:12: error: expected primary-expression\
    \ before \u2018char\u2019\n   21 |     vector<char> words_final;\n      |    \
    \        ^~~~\n/tmp/tmp87jnz4fu.cpp:22:12: error: expecte"
  stdout: ''
  timestamp: 1660011517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tstd::string::size_type start = 0;\n\tstd::string::size_type end =\
    \ 0;\n\tstd::string delimiter = \"|\";\n\twhile ((end = music_string.find(delimiter,\
    \ start)) != std::string::npos) {\n\t\tif (music_string.at(start) == 'o') {\n\t\
    \t\tresult.push_back(4);\n\t\t}\n\t\telse if (music_string.at(start) == '.') {\n\
    \t\t\tresult.push_back(1);\n\t\t}\n\t\telse {\n\t\t\tthrow std::invalid_argument(\"\
    Invalid input string\");\n\t\t}\n\t\tstart = end + delimiter.length();\n\t}\n\t\
    std::string last = music_string.substr(start);\n\tif (last == \"o\") {\n\t\tresult.push_back(4);\n\
    \t}\n\telse if (last == \".\") {\n\t\tresult.push_back(1);\n\t}\n\telse {\n\t\t\
    throw std::invalid_argument(\"Invalid input string\");\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  Invalid input string\n"
  stdout: ''
  timestamp: 1660011517
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long>\
    \ result;\nstd::string s;\nstd::istringstream iss(music_string);\nint sum = 0;\n\
    while(iss >> s)\n{\n    //std::cout << s << std::endl;\n    if(s == \"o\")\n \
    \   {\n        result.push_back(4);\n        sum += 4;\n    }\n    else if(s ==\
    \ \"o|\")\n    {\n        result.push_back(2);\n        sum += 2;\n    }\n   \
    \ else if(s == \".|\")\n    {\n        result.push_back(1);\n        sum += 1;\n\
    \    }\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphkc2555j.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmphkc2555j.cpp:36:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   36 | int main() {\n      |            ^\n/tmp/tmphkc2555j.cpp:43:1:\
    \ error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmphkc2555j.cpp:12:57:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> parse_music(std::string\
    \ music_string) {\n      |                                                   \
    \      ^\n/tmp/tmphkc2555j.cpp:43:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   43 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660011517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    long count = 0;\n    for (int i = 0; i < music_string.size(); i++)\
    \ {\n        char c = music_string[i];\n        if (c == ' ') {\n            if\
    \ (count > 0) {\n                result.push_back(count);\n                count\
    \ = 0;\n            }\n        } else if (c == 'o') {\n            count += 4;\n\
    \        } else if (c == '|') {\n            if (count == 0) {\n             \
    \   count += 2;\n            } else {\n                count--;\n            }\n\
    \        } else if (c == '.') {\n            count++;\n        }\n    }\n    if\
    \ (count > 0) {\n        result.push_back(count);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpnkwhq9kh: /tmp/tmpnkwhq9kh.cpp:43: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  if\
    \ (music_string.empty()) return {};\n  std::vector<long> ret;\n  int str_len =\
    \ music_string.length();\n  for (int i = 0; i < str_len; i++) {\n    if (music_string[i]\
    \ == 'o') {\n      if (i < str_len - 1 && music_string[i + 1] == '|') {\n    \
    \    ret.push_back(2);\n        i++;\n      } else {\n        ret.push_back(4);\n\
    \      }\n    } else if (music_string[i] == '.') {\n      ret.push_back(1);\n\
    \      i++;\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate =\
    \ parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    std::stringstream ss(music_string);\n    for (std::string s; ss >>\
    \ s;) {\n        if (s == \"o\") {\n            res.push_back(4);\n        } else\
    \ if (s == \"o|\") {\n            res.push_back(2);\n        } else if (s == \"\
    .|\") {\n            res.push_back(1);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    int\
    \ n = music_string.size();\n    long beat_count = 0;\n    std::vector<long> beats;\n\
    \    bool in_note = false;\n    for (int i = 0; i < n; i++) {\n        if (music_string[i]\
    \ == ' ') {\n            if (in_note) {\n                in_note = false;\n  \
    \              beats.push_back(beat_count);\n                beat_count = 0;\n\
    \            }\n        } else if (music_string[i] == '.') {\n            if (in_note)\
    \ {\n                beat_count++;\n            }\n        } else if (music_string[i]\
    \ == 'o') {\n            in_note = true;\n            beat_count += 4;\n     \
    \   } else if (music_string[i] == '|') {\n            beat_count++;\n        }\n\
    \    }\n    if (in_note) {\n        beats.push_back(beat_count);\n    }\n    return\
    \ beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpfe111gqh: /tmp/tmpfe111gqh.cpp:44: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011518
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tusing\
    \ namespace std;\n\tvector<long> result;\n\tfor (char& c : music_string) {\n\t\
    \tswitch (c) {\n\t\tcase 'o':\n\t\t\tresult.push_back(4);\n\t\t\tbreak;\n\t\t\
    case '|':\n\t\t\tresult.push_back(2);\n\t\t\tbreak;\n\t\tcase '.':\n\t\t\tresult.push_back(1);\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpw9mfctyh: /tmp/tmpw9mfctyh.cpp:34: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ your code here\n    std::vector<long> result;\n    std::istringstream iss(music_string);\n\
    \    std::string string1;\n    while(iss>>string1){\n        if(string1==\"o\"\
    ){\n            result.push_back(4);\n        }\n        else if(string1==\"o|\"\
    ){\n            result.push_back(2);\n        }\n        else if(string1==\".|\"\
    ){\n            result.push_back(1);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ your code here\n    std::vector<long> v;\n    std::string str = \"\";\n    for(int\
    \ i = 0; i < music_string.length(); i++){\n        if(music_string[i] == ' '){\n\
    \            if(str == \"o\"){\n                v.push_back(4);\n            }\n\
    \            else if(str == \"o|\"){\n                v.push_back(2);\n      \
    \      }\n            else if(str == \".|\"){\n                v.push_back(1);\n\
    \            }\n            str = \"\";\n        }\n        else{\n          \
    \  str += music_string[i];\n        }\n    }\n    if(str == \"o\"){\n        v.push_back(4);\n\
    \    }\n    else if(str == \"o|\"){\n        v.push_back(2);\n    }\n    else\
    \ if(str == \".|\"){\n        v.push_back(1);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ res;\n  long bea = 0;\n  long i = 0;\n  while (i < music_string.size()) {\n\
    \    if (music_string[i] == 'o') {\n      res.push_back(4);\n      bea = bea +\
    \ 4;\n      i++;\n    } else if (music_string[i] == 'o' && music_string[i + 1]\
    \ == '|') {\n      res.push_back(2);\n      bea = bea + 2;\n      i = i + 2;\n\
    \    } else if (music_string[i] == '.' && music_string[i + 1] == '|') {\n    \
    \  res.push_back(1);\n      bea = bea + 1;\n      i = i + 2;\n    }\n  }\n  res.push_back(bea);\n\
    \  return res;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpe1evc3du: /tmp/tmpe1evc3du.cpp:36: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats = {};\n    for (auto c : music_string) {\n        if (c == 'o') {\n  \
    \          beats.push_back(4);\n        } else if (c == '|') {\n            beats.push_back(2);\n\
    \        } else if (c == '.') {\n            beats.push_back(1);\n        }\n\
    \    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpb71dizuw: /tmp/tmpb71dizuw.cpp:29: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    int i=0;\n    int len=music_string.length();\n    while(i<len)\n   \
    \ {\n        if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='\
    \ ')\n            {\n                v.push_back(4);\n                i+=3;\n\
    \            }\n            else\n            {\n                v.push_back(2);\n\
    \                i+=4;\n            }\n        }\n        else\n        {\n  \
    \          v.push_back(1);\n            i+=4;\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpbdxtlvc6: /tmp/tmpbdxtlvc6.cpp:42: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ Your code goes here\n    std::vector<long> v;\n    for(auto ch: music_string){\n\
    \        if(ch == 'o'){\n            v.push_back(4);\n        }\n        else\
    \ if(ch == '|'){\n            v.push_back(2);\n        }\n        else if(ch ==\
    \ '.'){\n            v.push_back(1);\n        }\n    }\n    return v;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp3zbwl_5b: /tmp/tmp3zbwl_5b.cpp:32: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string temp;\n  \
    \  while(ss >> temp) {\n        switch(temp[0]) {\n            case 'o':\n   \
    \             if(temp.size() == 1) {\n                    result.push_back(4);\n\
    \                } else {\n                    result.push_back(2);\n        \
    \        }\n                break;\n            case '.':\n                result.push_back(1);\n\
    \                break;\n            default:\n                result.push_back(0);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ parse and return a vector of integer beats\n    std::vector<long> beats;\n \
    \   int i = 0;\n    while(music_string[i] != '\\0') {\n        switch(music_string[i])\
    \ {\n            case 'o':\n                beats.push_back(4);\n            \
    \    i++;\n                break;\n            case '.':\n                beats.push_back(1);\n\
    \                i += 2;\n                break;\n            default:\n     \
    \           assert(false);\n        }\n    }\n    return beats;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpkk5jwihe: /tmp/tmpkk5jwihe.cpp:27: std::vector<long int> parse_music(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\t//\
    \ Use this buffer to store your result.\n\tstd::vector<long> result;\n\t// Make\
    \ a vector of notes.\n\t// NOTE: it is convenient to use std::string instead of\
    \ char because we can push_back the whole symbol at once.\n\tstd::vector<std::string>\
    \ notes;\n\t// Dump the given string into string stream to easily extract all\
    \ symbols in a loop.\n\tstd::stringstream ss(music_string);\n\tstd::string note;\n\
    \twhile (ss >> note) {\n\t\tnotes.push_back(note);\n\t}\n\t// Now perform conversion\
    \ from the notation to number of beats.\n\t// NOTE: iterators of vector class\
    \ are very similar to pointers.\n\t// In fact, both are random access iterators.\n\
    \tfor (auto it = notes.begin(); it != notes.end(); ++it) {\n\t\t// If current\
    \ note is a whole note, add 4 beats.\n\t\tif (*it == \"o\") {\n\t\t\tresult.push_back(4);\n\
    \t\t}\n\t\t// If current note is a half note, add 2 beats.\n\t\telse if (*it ==\
    \ \"o|\") {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\t// If current note is a quater\
    \ note, add 1 beat.\n\t\telse if (*it == \".|\") {\n\t\t\tresult.push_back(1);\n\
    \t\t}\n\t\t// If a note is not one of the above three, something went wrong.\n\
    \t\telse {\n\t\t\t// assert() is a common way to check for a logic error in code.\n\
    \t\t\t// In debug builds assert will crash the application with an error message.\n\
    \t\t\t// In release builds it will do nothing.\n\t\t\tassert(false);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    int\
    \ i=0;\n    int temp=0;\n    std::vector<long> v;\n    std::string temp_string\
    \ = \"\";\n    while(music_string[i]!='\\0'){\n        if(music_string[i]=='o'){\n\
    \            if(music_string[i+1]=='|'){\n                temp_string.push_back(music_string[i]);\n\
    \                temp_string.push_back(music_string[i+1]);\n                if(temp_string==\"\
    o|\"){\n                    v.push_back(2);\n                    temp_string=\"\
    \";\n                }\n                else if(temp_string==\"o\"){\n       \
    \             v.push_back(4);\n                    temp_string=\"\";\n       \
    \         }\n                else\n                    v.push_back(0);\n     \
    \       }\n            else{\n                temp_string.push_back(music_string[i]);\n\
    \                if(temp_string==\"o\"){\n                    v.push_back(4);\n\
    \                    temp_string=\"\";\n                }\n                else\n\
    \                    v.push_back(0);\n            }\n        }\n        else if(music_string[i]=='.'){\n\
    \            if(music_string[i+1]=='|'){\n                temp_string.push_back(music_string[i]);\n\
    \                temp_string.push_back(music_string[i+1]);\n                if(temp_string==\"\
    .|\"){\n                    v.push_back(1);\n                    temp_string=\"\
    \";\n                }\n                else\n                    v.push_back(0);\n\
    \            }\n            else{\n                temp_string.push_back(music_string[i]);\n\
    \                if(temp_string==\".\")\n                    v.push_back(0);\n\
    \            }\n        }\n        i++;\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ output;\n\tstd::string s;\n\tfor (int i = 0; i < music_string.length(); i++)\
    \ {\n\t\tif (music_string[i] == ' ') {\n\t\t\tif (s == \"o\") {\n\t\t\t\toutput.push_back(4);\n\
    \t\t\t}\n\t\t\telse if (s == \"o|\") {\n\t\t\t\toutput.push_back(2);\n\t\t\t}\n\
    \t\t\telse if (s == \".|\") {\n\t\t\t\toutput.push_back(1);\n\t\t\t}\n\t\t\ts\
    \ = \"\";\n\t\t}\n\t\telse {\n\t\t\ts += music_string[i];\n\t\t}\n\t}\n\tif (s\
    \ == \"o\") {\n\t\toutput.push_back(4);\n\t}\n\telse if (s == \"o|\") {\n\t\t\
    output.push_back(2);\n\t}\n\telse if (s == \".|\") {\n\t\toutput.push_back(1);\n\
    \t}\n\treturn output;\n}\nint main() {\n    auto candidate = parse_music;\n  \
    \  assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::stringstream\
    \ ss(music_string);\n    std::string item;\n    std::vector<long> v;\n    int\
    \ len = music_string.length();\n    for(int i = 0; i < len; i++) {\n        if(music_string[i]\
    \ == 'o') {\n            if(music_string[i+1] == ' ') {\n                v.push_back(4);\n\
    \            }\n            else if(music_string[i+1] == '|') {\n            \
    \    v.push_back(2);\n                i++;\n            }\n        }\n       \
    \ else if(music_string[i] == '.') {\n            v.push_back(1);\n           \
    \ i += 2;\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp7h933m1c: /tmp/tmp7h933m1c.cpp:37: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    int l = music_string.length();\n    for(int i=0;i<l;i++)\n    {\n  \
    \      if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='|')\n\
    \            {\n                v.push_back(2);\n                i=i+1;\n    \
    \        }\n            else\n            {\n                v.push_back(4);\n\
    \            }\n        }\n        else if(music_string[i]=='.')\n        {\n\
    \            v.push_back(1);\n            i++;\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ result;\n  long int beats = 0;\n  for(long int i = 0; i < music_string.length();\
    \ ++i) {\n    if(music_string[i] == 'o') {\n      if(music_string[i+1] == '|')\
    \ {\n        result.push_back(2);\n        ++i;\n      }\n      else {\n     \
    \   result.push_back(4);\n      }\n    }\n    else if(music_string[i] == '.')\
    \ {\n      result.push_back(1);\n      ++i;\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ res;\n\t// your code goes here\n\tstd::string::iterator s = music_string.begin();\n\
    \twhile (s != music_string.end()) {\n\t\tif (*s == 'o') {\n\t\t\tres.push_back(4);\n\
    \t\t\ts++;\n\t\t}\n\t\telse if (*s == '.') {\n\t\t\tres.push_back(1);\n\t\t\t\
    s += 2;\n\t\t}\n\t\telse if (*s == ' ') {\n\t\t\ts++;\n\t\t}\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011525
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  //\
    \ Complete the function\n  std::vector<long> res;\n  for(auto i = music_string.begin();\
    \ i != music_string.end(); ++i) {\n      if(*i == 'o') {\n          if(i + 1 !=\
    \ music_string.end() && *(i + 1) == '|') {\n              res.push_back(2);\n\
    \              ++i;\n          } else {\n              res.push_back(4);\n   \
    \       }\n      } else if(*i == '.') {\n          ++i;\n          res.push_back(1);\n\
    \      }\n  }\n  return res;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::string current_note;\n    std::stringstream ss(music_string);\n\
    \    while (ss >> current_note) {\n        std::vector<char> chars(current_note.begin(),\
    \ current_note.end());\n        if (chars[0] == 'o') {\n            if (chars.size()\
    \ == 1)\n                result.push_back(4);\n            else\n            \
    \    result.push_back(2);\n        } else {\n            result.push_back(1);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::stringstream\
    \ ss(music_string);\n\tstd::vector<long> ans;\n\tstd::string input;\n\twhile (ss\
    \ >> input) {\n\t\tif (input == \"o\")\n\t\t\tans.push_back(4);\n\t\telse if (input\
    \ == \"o|\")\n\t\t\tans.push_back(2);\n\t\telse if (input == \".|\")\n\t\t\tans.push_back(1);\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int curr_note_length = 0;\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        if (music_string[i] == 'o') {\n            curr_note_length\
    \ += 4;\n        } else if (music_string[i] == '|') {\n            result.push_back(curr_note_length);\n\
    \            curr_note_length = 0;\n        } else if (music_string[i] == '.')\
    \ {\n            curr_note_length += 1;\n        }\n    }\n    result.push_back(curr_note_length);\n\
    \    return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpd4cu3twe: /tmp/tmpd4cu3twe.cpp:30: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == ' ')\n\t\t\t\tresult.push_back(4);\n\
    \t\t\telse if (music_string[i + 1] == '|')\n\t\t\t\tresult.push_back(2);\n\t\t\
    }\n\t\telse if (music_string[i] == '.') {\n\t\t\tif (music_string[i + 1] == '|')\n\
    \t\t\t\tresult.push_back(1);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmptox0umxd: /tmp/tmptox0umxd.cpp:31: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result(0);\n    // TODO: write code here.\n    // \u0417\u0430\u0434\u0430\u0447\
    \u0430 \u0437\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u043C\u0430\u0441\
    \u0441\u0438\u0432 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\
    \u0432 \u0432\u0435\u043A\u0442\u043E\u0440\u043E\u043C \u0438\u0437 \u0438\u0441\
    \u0445\u043E\u0434\u043D\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0438\n  \
    \  // \u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442 \u0441\u0432\u0435\
    \u0434\u0435\u0442\u0441\u044F \u043A \u0432\u044B\u0447\u0438\u0441\u043B\u0435\
    \u043D\u0438\u044E \u0434\u043B\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\
    \u0442\u0438 \u043D\u043E\u0442\u044B, \u0444\u043E\u0440\u043C\u0430\u0442\u0438\
    \u0440\u043E\u0432\u0430\u043D\u0438\u044E \u0432 \u0432\u0435\u043A\u0442\u043E\
    \u0440 \u0438 \u043E\u0431\u0445\u043E\u0434\u0443 \u0438\u0441\u0445\u043E\u0434\
    \u043D\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0438\n    // \u0418\u0441\u0445\
    \u043E\u0434\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430 \u0431\u0443\
    \u0434\u0435\u0442 \u043E\u0431\u0445\u043E\u0434\u0438\u0442\u044C\u0441\u044F\
    \ \u043F\u043E\u0441\u0438\u043C\u0432\u043E\u043B\u044C\u043D\u043E \u043F\u043E\
    \ \u043F\u0440\u0438\u043D\u0446\u0438\u043F\u0443 \u0438\u0442\u0435\u0440\u0430\
    \u0442\u043E\u0440\u0430 - \u043F\u043E\u0437\u0438\u0446\u0438\u044F \u043A\u0430\
    \u0440\u0435\u0442\u043A\u0438 \u0438 \u0442\u0435\u043A\u0443\u0449\u0438\u0439\
    \ \u0441\u0438\u043C\u0432\u043E\u043B\n    // \u041F\u0440\u0438 \u043E\u0431\
    \u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0438\u0438 \u0441\u0438\u043C\u0432\
    \u043E\u043B\u0430 \u043F\u0435\u0440\u0435\u0434\u0430\u0435\u043C \u0435\u0433\
    \u043E \u0432 \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u0432\u044B\u0447\u0438\
    \u0441\u043B\u0435\u043D\u0438\u044F \u0434\u043B\u0438\u0442\u0435\u043B\u044C\
    \u043D\u043E\u0441\u0442\u0438, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043D\
    \u044B\u0439 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442 \u043F\u0435\
    \u0440\u0435\u0434\u0430\u0435\u043C \u0432 \u0432\u0435\u043A\u0442\u043E\u0440\
    \n    // \u041F\u0440\u0438 \u0432\u044B\u0445\u043E\u0434\u0435 \u0438\u0437\
    \ \u0446\u0438\u043A\u043B\u0430 \u0432\u0435\u043A\u0442\u043E\u0440 \u0440\u0435\
    \u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432 \u0431\u0443\u0434\u0435\
    \u0442 \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\u044E \u0437\u0430\u043F\
    \u043E\u043B\u043D\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpr5ouln8h: /tmp/tmpr5ouln8h.cpp:23: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    const char* str = music_string.c_str();\n    while (*str != '\\\
    0') {\n        if (*str == 'o') {\n            result.push_back(4);\n        \
    \    if (*(str + 1) == ' ')\n                str += 2;\n            else\n   \
    \             str += 3;\n        }\n        else if (*str == '.') {\n        \
    \    result.push_back(1);\n            str += 3;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpzz4rcdl0: /tmp/tmpzz4rcdl0.cpp:35: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string word;\n  \
    \  int count = 0;\n    while (ss >> word) {\n        int i = 0;\n        if (word[i]\
    \ == 'o') {\n            if (word[++i] == '|') {\n                result.push_back(2);\n\
    \            } else {\n                result.push_back(4);\n            }\n \
    \       } else {\n            result.push_back(1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\tstd::vector<char> music;\n\tfor (int i = 0; i < music_string.size();\
    \ i++) {\n\t\tif (music_string[i] == ' ') continue;\n\t\tmusic.push_back(music_string[i]);\n\
    \t}\n\tfor (int i = 0; i < music.size(); i++) {\n\t\tif (music[i] == 'o') {\n\t\
    \t\tif (i < music.size() - 1 && music[i + 1] == '|') {\n\t\t\t\tbeats.push_back(2);\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbeats.push_back(4);\n\t\t\t}\n\t\t\
    }\n\t\telse if (music[i] == '.') {\n\t\t\tbeats.push_back(1);\n\t\t\ti++;\n\t\t\
    }\n\t}\n\treturn beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ res;\n  std::stack<char> st;\n  for (auto c : music_string) {\n    if (c ==\
    \ ' ') {\n      continue;\n    }\n    if (c == '|') {\n      st.push(c);\n   \
    \ } else {\n      if (c == 'o') {\n        if (st.empty()) {\n          res.push_back(4);\n\
    \        } else {\n          st.pop();\n          res.push_back(2);\n        }\n\
    \      } else {\n        assert(c == '.');\n        res.push_back(1);\n      }\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp1m5w1nzf: /tmp/tmp1m5w1nzf.cpp:42: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    for (auto n : music_string) {\n        if (n == 'o') {\n         \
    \   ret.push_back(4);\n        } else if (n == '|') {\n            ret.push_back(1);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpijyx9ila: /tmp/tmpijyx9ila.cpp:28: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    if (music_string.empty()) {\n        return res;\n    }\n    char\
    \ ch;\n    int num = 0;\n    for (auto i = 0; i < music_string.size(); ++i) {\n\
    \        ch = music_string[i];\n        if (isdigit(ch)) {\n            num =\
    \ num * 10 + (ch - '0');\n        } else {\n            switch (ch) {\n      \
    \          case 'o':\n                    if (music_string[i+1] == '|') {\n  \
    \                      res.push_back(2 * num);\n                        i += 2;\n\
    \                    } else {\n                        res.push_back(4 * num);\n\
    \                        i += 1;\n                    }\n                    break;\n\
    \                case '.':\n                    res.push_back(1 * num);\n    \
    \                i += 2;\n                    break;\n                default:\n\
    \                    break;\n            }\n            num = 0;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpxzh86__h: /tmp/tmpxzh86__h.cpp:49: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string note;\n  \
    \  while (ss >> note) {\n        result.push_back(note.size());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp5uuxvsej: /tmp/tmp5uuxvsej.cpp:24: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tchar\
    \ temp_arr[music_string.length()];\n\tstd::strcpy(temp_arr, music_string.c_str());\n\
    \tint word_cnt = 0;\n\tint temp_cnt = 0;\n\tint cnt = 0;\n\tchar temp_arr2[music_string.length()];\n\
    \tstd::vector<std::string> result;\n\tfor (size_t i = 0; i < strlen(temp_arr);\
    \ i++) {\n\t\tif (temp_arr[i] == ' ') {\n\t\t\tword_cnt++;\n\t\t\tresult.push_back(temp_arr2);\n\
    \t\t\ttemp_cnt = 0;\n\t\t\tfor (size_t j = 0; j < music_string.length(); j++)\
    \ {\n\t\t\t\ttemp_arr2[j] = ' ';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttemp_arr2[temp_cnt]\
    \ = temp_arr[i];\n\t\t\ttemp_cnt++;\n\t\t}\n\t}\n\tresult.push_back(temp_arr2);\n\
    \tstd::vector<long> beats;\n\tfor (size_t i = 0; i < result.size(); i++) {\n\t\
    \tif (result[i] == \"o|\") {\n\t\t\tbeats.push_back(2);\n\t\t}\n\t\telse if (result[i]\
    \ == \"o\") {\n\t\t\tbeats.push_back(4);\n\t\t}\n\t\telse if (result[i] == \"\
    .|\") {\n\t\t\tbeats.push_back(1);\n\t\t}\n\t}\n\treturn beats;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp0e32alh5: /tmp/tmp0e32alh5.cpp:52: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::istringstream iss(music_string);\n    std::string str;\n  \
    \  while (std::getline(iss, str, ' ')) {\n        if (str == \"o\") {\n      \
    \      beats.push_back(4);\n        } else if (str == \"o|\") {\n            beats.push_back(2);\n\
    \        } else if (str == \".|\") {\n            beats.push_back(1);\n      \
    \  }\n    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int len = music_string.length();\n    for(int i = 0; i < len; i++)\
    \ {\n        if(music_string[i] == 'o') {\n            if(music_string[i+1] ==\
    \ ' ') {\n                result.push_back(4);\n            }\n            else\
    \ if(music_string[i+1] == '|') {\n                result.push_back(2);\n     \
    \           i++;\n            }\n        }\n        else if(music_string[i] ==\
    \ '.') {\n            result.push_back(1);\n            i += 2;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpx5vk_yfg: /tmp/tmpx5vk_yfg.cpp:35: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\tstd::stringstream ss(music_string);\n\tstd::string note;\n\twhile\
    \ (ss >> note) {\n\t\tif (note == \"o\") {\n\t\t\tbeats.push_back(4);\n\t\t}\n\
    \t\telse if (note == \"o|\") {\n\t\t\tbeats.push_back(2);\n\t\t}\n\t\telse if\
    \ (note == \".|\") {\n\t\t\tbeats.push_back(1);\n\t\t}\n\t}\n\treturn beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\tstd::stringstream ss(music_string);\n\tstd::string note;\n\twhile\
    \ (std::getline(ss, note, ' '))\n\t{\n\t\tif (note == \"o\") {\n\t\t\tbeats.push_back(4);\n\
    \t\t}\n\t\telse if (note == \"o|\") {\n\t\t\tbeats.push_back(2);\n\t\t}\n\t\t\
    else if (note == \".|\") {\n\t\t\tbeats.push_back(1);\n\t\t}\n\t}\n\treturn beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    char\
    \ prev_symbol = '0';\n    std::vector<long> result;\n    int count_for_prev_symbol\
    \ = 0;\n    for (auto symbol : music_string) {\n        if (symbol == ' ') {\n\
    \            if (prev_symbol == 'o')\n                result.push_back(4);\n \
    \           else if (prev_symbol == '.')\n                result.push_back(1);\n\
    \            else if (prev_symbol == '|')\n                result.push_back(2);\n\
    \            prev_symbol = '0';\n            count_for_prev_symbol = 0;\n    \
    \    }\n        else if (symbol == 'o') {\n            if (prev_symbol == 'o')\n\
    \                count_for_prev_symbol++;\n            else if (prev_symbol ==\
    \ '.')\n                result.push_back(1);\n            else if (prev_symbol\
    \ == '|')\n                result.push_back(2);\n            prev_symbol = 'o';\n\
    \            count_for_prev_symbol = 1;\n        }\n        else if (symbol ==\
    \ '.') {\n            if (prev_symbol == 'o')\n                result.push_back(4);\n\
    \            else if (prev_symbol == '.')\n                count_for_prev_symbol++;\n\
    \            else if (prev_symbol == '|')\n                result.push_back(2);\n\
    \            prev_symbol = '.';\n            count_for_prev_symbol = 1;\n    \
    \    }\n        else if (symbol == '|') {\n            if (prev_symbol == 'o')\n\
    \                result.push_back(4);\n            else if (prev_symbol == '.')\n\
    \                result.push_back(1);\n            else if (prev_symbol == '|')\n\
    \                count_for_prev_symbol++;\n            prev_symbol = '|';\n  \
    \          count_for_prev_symbol = 1;\n        }\n    }\n    if (prev_symbol ==\
    \ 'o')\n        result.push_back(4);\n    else if (prev_symbol == '.')\n\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65l0q93r.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmp65l0q93r.cpp:62:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   62 | }\n      | ^\n/tmp/tmp65l0q93r.cpp:62:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660011522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    std::string::iterator it;\n    long i = 0;\n    char str[music_string.length()\
    \ + 1];\n    strcpy(str, music_string.c_str());\n    while (str[i] != '\\0') {\n\
    \        if (str[i] == 'o' && str[i + 1] == ' ') {\n            v.push_back(4);\n\
    \            i += 2;\n        } else if (str[i] == 'o' && str[i + 1] == '|') {\n\
    \            v.push_back(2);\n            i += 3;\n        } else if (str[i] ==\
    \ '.' && str[i + 1] == '|') {\n            v.push_back(1);\n            i += 3;\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ This is a stub. Replace it with your code.\n    assert(0);\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp4dag8a9n: /tmp/tmp4dag8a9n.cpp:14: std::vector<long int> parse_music(std::string):
    Assertion `0'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    long beat_in_the_bar = 0;\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        if (music_string[i] == 'o') {\n            result.push_back(4);\n\
    \            beat_in_the_bar = beat_in_the_bar + 4;\n        }\n        if (music_string[i]\
    \ == '.') {\n            result.push_back(1);\n            beat_in_the_bar = beat_in_the_bar\
    \ + 1;\n        }\n        if (music_string[i] == '|') {\n            if (beat_in_the_bar\
    \ == 4) {\n                result.push_back(2);\n                beat_in_the_bar\
    \ = beat_in_the_bar + 2;\n            }\n            else if (beat_in_the_bar\
    \ == 2) {\n                result.push_back(1);\n                beat_in_the_bar\
    \ = beat_in_the_bar + 1;\n            }\n            else if (beat_in_the_bar\
    \ == 1) {\n                result.push_back(1);\n                beat_in_the_bar\
    \ = beat_in_the_bar + 1;\n            }\n            else if (beat_in_the_bar\
    \ == 0) {\n                beat_in_the_bar = 0;\n            }\n            else\
    \ {\n                result.push_back(beat_in_the_bar);\n                beat_in_the_bar\
    \ = 0;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpbfdb4ryv: /tmp/tmpbfdb4ryv.cpp:52: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ notes;\n    std::stringstream music(music_string);\n    while(!music.eof())\
    \ {\n        std::string note;\n        music >> note;\n        if(note == \"\
    o\") {\n            notes.push_back(4);\n        } else if(note == \"o|\") {\n\
    \            notes.push_back(2);\n        } else if(note == \".|\") {\n      \
    \      notes.push_back(1);\n        }\n    }\n    return notes;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011522
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string s;\n    while\
    \ (ss >> s) {\n        if (s == \"o\")\n            result.push_back(4);\n   \
    \     else if (s == \"o|\")\n            result.push_back(2);\n        else if\
    \ (s == \".|\")\n            result.push_back(1);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < music_string.size(); ++i) {\n        switch (music_string[i])\
    \ {\n            case 'o':\n                if (music_string[i + 1] == ' ') {\n\
    \                    res.push_back(4);\n                } else {\n           \
    \         if (music_string[i + 1] == '|') {\n                        if (music_string[i\
    \ + 2] == '.') {\n                            res.push_back(2);\n            \
    \                i += 2;\n                        } else {\n                 \
    \           res.push_back(4);\n                            i += 1;\n         \
    \               }\n                    }\n                }\n                break;\n\
    \            case '.':\n                if (music_string[i + 1] == '|') {\n  \
    \                  res.push_back(1);\n                    i += 1;\n          \
    \      }\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpoz1cgztk: /tmp/tmpoz1cgztk.cpp:46: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ your code here, return the vector of notes\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp6cuy43ub: /tmp/tmp6cuy43ub.cpp:18: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == ' ') continue;\n        if (music_string[i] == 'o') {\n            if (music_string[i\
    \ + 1] == ' ') {\n                result.push_back(4);\n            } else {\n\
    \                result.push_back(2);\n                i += 2;\n            }\n\
    \        } else {\n            result.push_back(1);\n            i += 2;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpsc1v09zr: /tmp/tmpsc1v09zr.cpp:33: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ result;\n  int music_len = music_string.length();\n  int i = 0;\n  while (i\
    \ < music_len) {\n    switch (music_string[i]) {\n      case 'o':\n        result.push_back(4);\n\
    \        break;\n      case '.':\n        result.push_back(1);\n        break;\n\
    \      default:\n        break;\n    }\n    i++;\n    if (music_string[i] == '|')\
    \ {\n      i++;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpalrym_d1: /tmp/tmpalrym_d1.cpp:39: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    long temp=1;\n    for(long i=0;i<music_string.length();i++)\n    {\n\
    \        if(music_string[i]=='o')\n        {\n            v.push_back(temp*4);\n\
    \            temp=1;\n        }\n        else if(music_string[i]=='|')\n     \
    \   {\n            temp*=2;\n        }\n        else if(music_string[i]=='.')\n\
    \        {\n            v.push_back(temp);\n            temp=1;\n        }\n \
    \   }\n    return v;\n}\nint main() {\n    auto candidate = parse_music;\n   \
    \ assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpliqiyiu1: /tmp/tmpliqiyiu1.cpp:38: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    for (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                ret.push_back(4);\n\
    \            } else {\n                ret.push_back(2);\n                ++i;\n\
    \            }\n        } else {\n            ret.push_back(1);\n            ++i;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp9r6xg0sh: /tmp/tmp9r6xg0sh.cpp:32: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    int\
    \ len = music_string.length();\n    std::vector<long> result;\n    int i = 0;\n\
    \    while(i < len) {\n        char ch = music_string[i];\n        if(ch == 'o')\
    \ {\n            result.push_back(4);\n            i++;\n        }\n        else\
    \ if(ch == '.') {\n            result.push_back(1);\n            i += 2;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    // We need this vector to handle cases like this:\n    // >>> parse_music((\"\
    o o| .| o| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp3mdzv0ew: /tmp/tmp3mdzv0ew.cpp:20: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    int\
    \ arr[12]={0};\n    int l=music_string.length();\n    int i=0;\n    int cnt=0;\n\
    \    while(i<l)\n    {\n        if(music_string[i]=='o')\n        {\n        \
    \    arr[cnt]=4;\n            cnt++;\n            i+=3;\n        }\n        else\
    \ if(music_string[i]=='.')\n        {\n            arr[cnt]=1;\n            cnt++;\n\
    \            i+=3;\n        }\n        else\n        {\n            i++;\n   \
    \     }\n    }\n    std::vector<long>vec;\n    for(int i=0;i<cnt;i++)\n    {\n\
    \        vec.push_back(arr[i]);\n    }\n    return vec;\n}\nint main() {\n   \
    \ auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpwjm1v512: /tmp/tmpwjm1v512.cpp:46: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (char note : music_string) {\n        if (note == 'o') {\n\
    \            result.push_back(4);\n        } else if (note == '|') {\n       \
    \     if (result.back() == 4) {\n                result.back() = 2;\n        \
    \    } else {\n                result.push_back(1);\n            }\n        }\
    \ else if (note == '.') {\n            result.push_back(1);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpof50co_t: /tmp/tmpof50co_t.cpp:33: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ output(0);\n    std::string beat_string;\n    int current_beat = 0;\n    while\
    \ (current_beat < music_string.length()) {\n        if (music_string[current_beat]\
    \ == 'o') {\n            output.push_back(4);\n            current_beat++;\n \
    \       } else if (music_string[current_beat] == '.') {\n            output.push_back(1);\n\
    \            current_beat++;\n        } else if (music_string[current_beat] ==\
    \ ' ') {\n            current_beat++;\n        } else if (music_string[current_beat]\
    \ == '|') {\n            output.push_back(2);\n            current_beat += 2;\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmphr0vxt5n: /tmp/tmphr0vxt5n.cpp:36: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ notes;\n    int n = music_string.length();\n    for(int i = 0; i < n; i++){\n\
    \        if(music_string[i] == 'o'){\n            if(music_string[i+1] == ' '){\n\
    \                notes.push_back(4);\n            }\n            else if(music_string[i+1]\
    \ == '|'){\n                notes.push_back(2);\n                i++;\n      \
    \      }\n        }\n        else if(music_string[i] == '.'){\n            if(music_string[i+1]\
    \ == '|'){\n                notes.push_back(1);\n                i++;\n      \
    \      }\n        }\n    }\n    return notes;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpjxx2rlem: /tmp/tmpjxx2rlem.cpp:37: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    for (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i]\
    \ == '.') {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmphznpu6u5: /tmp/tmphznpu6u5.cpp:28: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ans;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                ans.push_back(4);\n\
    \            } else {\n                ans.push_back(4);\n                i +=\
    \ 2;\n            }\n        } else if (music_string[i] == '.') {\n          \
    \  ans.push_back(1);\n            i += 2;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpktu0dmyy: /tmp/tmpktu0dmyy.cpp:34: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    long curr_beat = 0;\n    for (char &c : music_string) {\n      \
    \  switch (c) {\n            case 'o':\n                curr_beat += 4;\n    \
    \            break;\n            case '|':\n                beats.push_back(curr_beat);\n\
    \                curr_beat = 0;\n                break;\n            case '.':\n\
    \                curr_beat += 1;\n                break;\n            default:\n\
    \                continue;\n        }\n    }\n    beats.push_back(curr_beat);\n\
    \    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpc0iwod1x: /tmp/tmpc0iwod1x.cpp:36: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    char last = '\\0';\n    int counter = 0;\n    for (char c : music_string)\
    \ {\n        if (c == 'o') {\n            if (last == 'o') {\n               \
    \ beats.push_back(4);\n                counter = 0;\n            } else {\n  \
    \              if (counter == 1) {\n                    beats.push_back(2);\n\
    \                    counter = 0;\n                } else if (counter == 2) {\n\
    \                    beats.push_back(1);\n                    counter = 0;\n \
    \               }\n                last = 'o';\n            }\n        } else\
    \ if (c == '|') {\n            counter++;\n        } else if (c == '.') {\n  \
    \          last = '.';\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpxsgrv5q3: /tmp/tmpxsgrv5q3.cpp:42: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ v;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == ' ') {\n\t\t\t\tv.push_back(4);\n\
    \t\t\t}\n\t\t\telse if (music_string[i + 1] == '|') {\n\t\t\t\tv.push_back(2);\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tif\
    \ (music_string[i + 1] == '|') {\n\t\t\t\tv.push_back(1);\n\t\t\t\ti++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp6idhm0bo: /tmp/tmp6idhm0bo.cpp:36: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //If\
    \ music_string is empty, return empty vector\n    if(music_string == \"\")\n \
    \       return {};\n    //Split music_string by spaces\n    std::vector<std::string>\
    \ music_split = {};\n    std::string temp = \"\";\n    for(int i = 0; i < music_string.length();\
    \ i++){\n        if(music_string[i] == ' '){\n            music_split.push_back(temp);\n\
    \            temp = \"\";\n        }\n        else{\n            temp += music_string[i];\n\
    \        }\n    }\n    music_split.push_back(temp);\n    //Check if last character\
    \ of last string is |, if so add space to last string\n    if(music_split[music_split.size()\
    \ - 1][music_split[music_split.size() - 1].length() - 1] == '|'){\n        music_split[music_split.size()\
    \ - 1] += \" \";\n    }\n    //Create vector to return\n    std::vector<long>\
    \ beats = {};\n    //Iterate through music_split and determine number of beats\
    \ for each note, then add to beats\n    for(int i = 0; i < music_split.size();\
    \ i++){\n        if(music_split[i] == \"o\"){\n            beats.push_back(4);\n\
    \        }\n        else if(music_split[i] == \"o| \"){\n            beats.push_back(2);\n\
    \        }\n        else if(music_split[i] == \".| \"){\n            beats.push_back(1);\n\
    \        }\n    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpf6jndywl: /tmp/tmpf6jndywl.cpp:53: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tstd::string *note = new std::string;\n\tstd::stringstream ss(music_string);\n\
    \twhile(std::getline(ss, *note, ' ')) {\n\t\tif(note->compare(\"o\") == 0) {\n\
    \t\t\tresult.push_back(4);\n\t\t} else if(note->compare(\"o|\") == 0) {\n\t\t\t\
    result.push_back(2);\n\t\t} else if(note->compare(\".|\") == 0) {\n\t\t\tresult.push_back(1);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ output;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else if (music_string[i]\
    \ == 'o') {\n            output.push_back(4);\n        }\n        else if (music_string[i]\
    \ == '.') {\n            output.push_back(1);\n        }\n        else if (music_string[i]\
    \ == '|') {\n            output.push_back(2);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpjzn4tr9t: /tmp/tmpjzn4tr9t.cpp:34: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ music_notes;\n    long i = 0;\n    while (i < music_string.length()) {\n   \
    \     if (music_string[i] == 'o') {\n            if (music_string[i + 1] == '\
    \ ') {\n                music_notes.push_back(4);\n                i += 2;\n \
    \           } else if (music_string[i + 1] == '|') {\n                music_notes.push_back(2);\n\
    \                i += 3;\n            }\n        } else if (music_string[i] ==\
    \ '.') {\n            music_notes.push_back(1);\n            i += 3;\n       \
    \ }\n    }\n    return music_notes;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011530
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\t\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpzinsfg4d: /tmp/tmpzinsfg4d.cpp:18: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int i = 0;\n    while (i < music_string.size()) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                result.push_back(4);\n\
    \                i += 2;\n            } else {\n                result.push_back(2);\n\
    \                i += 3;\n            }\n        } else {\n            result.push_back(1);\n\
    \            i += 3;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpw9w_07qi: /tmp/tmpw9w_07qi.cpp:34: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011526
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ notes;\n  for (auto c : music_string) {\n    switch (c) {\n      case 'o':\n\
    \        notes.push_back(4);\n        break;\n      case '|':\n        notes.back()\
    \ = notes.back() / 2;\n        break;\n      case '.':\n        break;\n     \
    \ case ' ':\n        break;\n      default:\n        assert(false);\n    }\n \
    \ }\n  return notes;\n}\nint main() {\n    auto candidate = parse_music;\n   \
    \ assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tlong\
    \ len = music_string.length();\n\t// std::cout << len << std::endl;\n\tstd::vector<long>\
    \ result;\n\tlong count = 0;\n\tfor (int i = 0; i < len; i++){\n\t\tif (music_string[i]\
    \ == '|') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (music_string[i] == 'o') {\n\t\
    \t\tif (count == 1) {\n\t\t\t\tcount = 2;\n\t\t\t}\n\t\t\telse if (count == 2)\
    \ {\n\t\t\t\tcount = 4;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\
    \t\tresult.push_back(count);\n\t\t\tcount = 0;\n\t\t}\n\t\telse if (music_string[i]\
    \ == '.') {\n\t\t\tif (count == 1) {\n\t\t\t\tcount = 2;\n\t\t\t}\n\t\t\telse\
    \ if (count == 2) {\n\t\t\t\tcount = 4;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcount\
    \ = 1;\n\t\t\t}\n\t\t\tresult.push_back(count);\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else {\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpwg3pi075: /tmp/tmpwg3pi075.cpp:56: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011526
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    for(char &c : music_string) {\n        if(c == 'o') {\n            v.push_back(4);\n\
    \        } else if(c == '|') {\n            if(v.back() == 4) {\n            \
    \    v.back() = 2;\n            } else {\n                v.back() = 1;\n    \
    \        }\n        } else if(c == '.') {\n            v.push_back(1);\n     \
    \   }\n    }\n    return v;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tif (music_string.size() == 0)\n\t\treturn result;\n\tlong counter\
    \ = 0;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tresult.push_back(4);\n\t\t\tcounter++;\n\t\t}\n\t\telse if\
    \ (music_string[i] == '|') {\n\t\t\tresult[counter - 1] /= 2;\n\t\t}\n\t\telse\
    \ if (music_string[i] == '.') {\n\t\t\tresult.push_back(1);\n\t\t\tcounter++;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp8tdcxwdg: /tmp/tmp8tdcxwdg.cpp:36: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    for (size_t i = 0; i < music_string.size(); i += 2) {\n        if\
    \ (music_string[i] == 'o') {\n            if (music_string[i + 1] == ' ') {\n\
    \                beats.push_back(4);\n            } else {\n                beats.push_back(2);\n\
    \            }\n        } else {\n            beats.push_back(1);\n        }\n\
    \    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp0lyx3ghe: /tmp/tmp0lyx3ghe.cpp:30: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::string\
    \ delimiter = \"|\";\n\tstd::vector<long> beats;\n\tlong pos = 0;\n\tstd::string\
    \ token;\n\twhile ((pos = music_string.find(delimiter)) != std::string::npos)\
    \ {\n\t\ttoken = music_string.substr(0, pos);\n\t\tif (token == \"o\")\n\t\t\t\
    beats.push_back(4);\n\t\telse if (token == \"o\")\n\t\t\tbeats.push_back(2);\n\
    \t\telse if (token == \".\")\n\t\t\tbeats.push_back(1);\n\t\tmusic_string.erase(0,\
    \ pos + delimiter.length());\n\t}\n\tif (music_string == \"o\")\n\t\tbeats.push_back(4);\n\
    \telse if (music_string == \"o\")\n\t\tbeats.push_back(2);\n\telse if (music_string\
    \ == \".\")\n\t\tbeats.push_back(1);\n\treturn beats;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpczqa9l_m: /tmp/tmpczqa9l_m.cpp:38: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\tstd::string note;\n\tfor (char c : music_string) {\n\t\tif (c == '\
    \ ') {\n\t\t\t// 2 cases: space at the beginning or space in the middle.\n\t\t\
    \tif (note.size() == 0) continue;\n\t\t\tif (note.size() > 0) {\n\t\t\t\tif (note[0]\
    \ == 'o') beats.push_back(4);\n\t\t\t\telse if (note == \"o|\") beats.push_back(2);\n\
    \t\t\t\telse if (note == \".|\") beats.push_back(1);\n\t\t\t\tnote.clear();\n\t\
    \t\t}\n\t\t}\n\t\telse note += c;\n\t}\n\tif (note[0] == 'o') beats.push_back(4);\n\
    \telse if (note == \"o|\") beats.push_back(2);\n\telse if (note == \".|\") beats.push_back(1);\n\
    \treturn beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp6pn0y204: /tmp/tmp6pn0y204.cpp:38: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    for (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                beats.push_back(4);\n\
    \            } else {\n                beats.push_back(2);\n                ++i;\n\
    \            }\n        } else if (music_string[i] == '.') {\n            beats.push_back(1);\n\
    \            ++i;\n        }\n    }\n    return beats;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp7jioxz2b: /tmp/tmp7jioxz2b.cpp:32: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::stringstream\
    \ ss(music_string);\n    std::vector<long> res;\n    int i;\n    while(ss >> i)\
    \ {\n        res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp9gbr49yq: /tmp/tmp9gbr49yq.cpp:24: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    long\
    \ n = music_string.size();\n    std::vector<long> v;\n    for(long i = 0; i <\
    \ n; i++) {\n        switch(music_string[i]) {\n            case 'o': {\n    \
    \            if(i == n - 1 || music_string[i + 1] == ' ') {\n                \
    \    v.push_back(4);\n                } else {\n                    v.push_back(2);\n\
    \                    i++;\n                }\n                break;\n       \
    \     }\n            case '.': {\n                v.push_back(1);\n          \
    \      i++;\n                break;\n            }\n            default:\n   \
    \             break;\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011527
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ vec;\n    std::stringstream ss(music_string);\n    std::string part;\n    while(std::getline(ss,\
    \ part, ' ')) {\n        if(part.size() == 1)\n            vec.push_back(4);\n\
    \        else if(part[0] == 'o')\n            vec.push_back(2);\n        else\n\
    \            vec.push_back(1);\n    }\n    return vec;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011527
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    std::stringstream ss(music_string);\n    std::string token;\n    while\
    \ (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n          \
    \  res.push_back(4);\n        } else if (token == \"o|\") {\n            res.push_back(2);\n\
    \        } else if (token == \".|\") {\n            res.push_back(1);\n      \
    \  }\n    }\n    return res;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ result(music_string.size(), 0);\n  long count = 0;\n  for (int i = 0; i < music_string.size();\
    \ i++) {\n    if (music_string[i] == 'o') {\n      result[count] = 4;\n      count++;\n\
    \    } else if (music_string[i] == '|') {\n      if (music_string[i - 1] == 'o')\
    \ {\n        result[count - 1] = 2;\n      } else {\n        result[count - 1]\
    \ = 1;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpw7uxc6yj: /tmp/tmpw7uxc6yj.cpp:32: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  //\
    \ \u0420\u0435\u0430\u043B\u0438\u0437\u0443\u0439\u0442\u0435 \u044D\u0442\u0443\
    \ \u0444\u0443\u043D\u043A\u0446\u0438\u044E\n  long temp = 0;\n  std::vector<long>\
    \ array;\n  std::string::iterator start = music_string.begin();\n  while (start\
    \ != music_string.end()) {\n    if (*start == 'o') {\n      temp = 4;\n      array.push_back(temp);\n\
    \      start += 2;\n    } else if (*start == '.') {\n      temp = 1;\n      array.push_back(temp);\n\
    \      start += 2;\n    }\n  }\n  return array;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ tempo;\n    for(int i=0;i<music_string.length();i++){\n        if(music_string[i]=='o'){\n\
    \            if(music_string[i+1]=='|'){\n                tempo.push_back(2);\n\
    \                i++;\n            }\n            else{\n                tempo.push_back(4);\n\
    \            }\n        }\n        else if(music_string[i]=='.'){\n          \
    \  tempo.push_back(1);\n            i++;\n        }\n    }\n    return tempo;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011527
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long>\
    \ res;\n\nfor(int i=0;i<music_string.length();i++){\n    if(music_string[i]=='o'){\n\
    \        res.push_back(4);\n    }\n    else if(music_string[i]=='|'){\n      \
    \  res.push_back(2);\n    }\n    else if(music_string[i]=='.'){\n        res.push_back(1);\n\
    \    }\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpur4qv84l.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmpur4qv84l.cpp:26:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   26 | int main() {\n      |            ^\n/tmp/tmpur4qv84l.cpp:33:1:\
    \ error: expected \u2018}\u2019 at end of input\n   33 | }\n      | ^\n/tmp/tmpur4qv84l.cpp:12:57:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> parse_music(std::string\
    \ music_string) {\n      |                                                   \
    \      ^\n/tmp/tmpur4qv84l.cpp:33:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   33 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    //YOUR CODE GOES HERE\n    int count = 0;\n    for(int i = 0; i\
    \ < music_string.size(); i++){\n        if(music_string[i] == 'o'){\n        \
    \    result.push_back(4);\n            count++;\n        }\n        else if(music_string[i]\
    \ == '|'){\n            if(music_string[i-1] == '.')\n                result.push_back(1);\n\
    \            else if(music_string[i-1] == 'o')\n                result.push_back(2);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp0v1q5le1: /tmp/tmp0v1q5le1.cpp:35: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  //\
    \ TODO: implement the function\n  std::vector<long> beats;\n  for (char& c : music_string)\
    \ {\n    if (c == ' ') continue;\n    if (c == 'o') beats.push_back(4);\n    if\
    \ (c == '.') beats.push_back(1);\n    if (c == '|') beats.pop_back();\n    beats.back()\
    \ = beats.back() / 2;\n  }\n  return beats;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp5akxtgp1: /tmp/tmp5akxtgp1.cpp:27: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tchar\
    \ c;\n\tstd::vector<long> res;\n\tfor (long i = 0; i < music_string.size(); i++)\
    \ {\n\t\tc = music_string[i];\n\t\tif (c == ' ') continue;\n\t\tif (c == 'o')\
    \ {\n\t\t\tres.push_back(4);\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\t\t\
    i++;\n\t\t\t}\n\t\t}\n\t\telse if (c == '.') {\n\t\t\tres.push_back(1);\n\t\t\t\
    i++;\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpaqnw98lj: /tmp/tmpaqnw98lj.cpp:36: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\t//\
    \ \"You do not need to write code in this file for this task.\"\n\t//\"This is\
    \ only scaffolding for your own tests. \"\n\t//\"You can add as many functions\
    \ or tests as you want.\"\n\tstd::vector<long> out;\n\tstd::string str = music_string;\n\
    \tfor (int i = 0; i < str.length(); i++) {\n\t\tchar c = str[i];\n\t\tswitch (c)\
    \ {\n\t\tcase 'o':\n\t\t\tout.push_back(4);\n\t\t\tbreak;\n\t\tcase '|':\n\t\t\
    \tout.push_back(2);\n\t\t\tbreak;\n\t\tcase '.':\n\t\t\tout.push_back(1);\n\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn out;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpdklcpc7v: /tmp/tmpdklcpc7v.cpp:38: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ vec;\n    for(int i=0;i<music_string.length();i++)\n    {\n        if(music_string[i]=='o')\n\
    \        {\n            if(music_string[i+1]=='|')\n            {\n          \
    \      vec.push_back(2);\n                i++;\n            }\n            else\
    \ if(music_string[i+1]==' ')\n            {\n                vec.push_back(4);\n\
    \            }\n        }\n        else if(music_string[i]=='.')\n        {\n\
    \            vec.push_back(1);\n            i++;\n        }\n    }\n    return\
    \ vec;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpyiobza53: /tmp/tmpyiobza53.cpp:39: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    for (auto c : music_string) {\n        switch (c) {\n            case\
    \ 'o':\n                ret.push_back(4);\n                break;\n          \
    \  case '|':\n                ret.push_back(2);\n                break;\n    \
    \        case '.':\n                ret.push_back(1);\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp756ip103: /tmp/tmp756ip103.cpp:35: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::stringstream str_stream(music_string);\n    std::string word;\n\
    \    while (str_stream >> word) {\n        if (word == \"o\") {\n            result.push_back(4);\n\
    \        } else if (word == \"o|\") {\n            result.push_back(2);\n    \
    \    } else if (word == \".|\") {\n            result.push_back(1);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ music_notes;\n\tstd::stringstream string_stream(music_string);\n\tstd::string\
    \ str;\n\twhile (std::getline(string_stream, str, ' ')) {\n\t\tif (str == \"o\"\
    ) {\n\t\t\tmusic_notes.push_back(4);\n\t\t}\n\t\telse if (str == \"o|\") {\n\t\
    \t\tmusic_notes.push_back(2);\n\t\t}\n\t\telse if (str == \".|\") {\n\t\t\tmusic_notes.push_back(1);\n\
    \t\t}\n\t}\n\treturn music_notes;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\nstd::vector<long>\
    \ notes;\n    int len = music_string.length();\n    for(int i=0;i<len;i++){\n\
    \        if(music_string[i]=='o'){\n            if(music_string[i+1]==' '){\n\
    \                notes.push_back(4);\n            }\n            else if(music_string[i+1]=='|'){\n\
    \                notes.push_back(2);\n                i++;\n            }\n  \
    \      }\n        else if(music_string[i]=='.'){\n            notes.push_back(1);\n\
    \            i++;\n        }\n    }\n    return notes;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpfl2ojfrf: /tmp/tmpfl2ojfrf.cpp:35: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\t//\
    \ I used the stringstream class to split the string\n\tstd::stringstream ss(music_string);\n\
    \tstd::vector<long> result;\n\n\twhile (ss.good()) {\n\t\tstd::string substr;\n\
    \t\tstd::getline(ss, substr, ' ');\n\t\tif (substr == \"o\") {\n\t\t\tresult.push_back(4);\n\
    \t\t}\n\t\telse if (substr == \"o|\") {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\
    \telse if (substr == \".|\") {\n\t\t\tresult.push_back(1);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011529
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ Write your code here\n    vector<long>notes;\n    vector<long>input;\n    vector<long>input_size;\n\
    \    int o = 0;\n    int oBar = 0;\n    int dotBar = 0;\n    long size = 0;\n\
    \    vector<long>size_of_string;\n    for(int i = 0; i < music_string.size();\
    \ i++){\n        if(music_string[i] == 'o'){\n            if(o != 0){\n      \
    \          input.push_back(o);\n                size = o * 4;\n              \
    \  size_of_string.push_back(size);\n                o = 0;\n            }\n  \
    \          o++;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1]\
    \ == '|'){\n            if(oBar != 0){\n                input.push_back(oBar);\n\
    \                size = oBar * 2;\n                size_of_string.push_back(size);\n\
    \                oBar = 0;\n            }\n            oBar++;\n        }\n  \
    \      else if(music_string[i] == '.' && music_string[i+1] == '|'){\n        \
    \    if(dotBar != 0){\n                input.push_back(dotBar);\n            \
    \    size = dotBar * 1;\n                size_of_string.push_back(size);\n   \
    \             dotBar = 0;\n            }\n            dotBar++;\n        }\n \
    \   }\n    input.push_back(o);\n    size = o * 4;\n    size_of_string.push_back(size);\n\
    \    input.push_back(oBar);\n    size = oBar * 2;\n    size_of_string.push_back(size);\n\
    \    input.push_back(dotBar);\n    size = dotBar * 1;\n    size_of_string.push_back(size);\n\
    \    for(int i = 0; i < input.size(); i++){\n        if(input[i] != 0){\n    \
    \        notes.push_back(input[i]);\n        }\n    }\n    for(int i = 0; i <\
    \ size_of_string.\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7vrfojuh.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmp7vrfojuh.cpp:14:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   14 |     vector<long>notes;\n\
    \      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp7vrfojuh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp7vrfojuh.cpp:14:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   14 |     vector<long>notes;\n\
    \      |            ^~~~\n/tmp/tmp7vrfojuh.cpp:15:12: error: expected primary-expression\
    \ before \u2018long\u2019\n   15 |     vector<long>input;\n      |           \
    \ ^~~~\n/tmp/tmp7vrfojuh.cpp:16:12: error: expected primary-expression before\
    \ \u2018long\u2019\n   16 |     vector<long>input_size;\n      |            ^~~~\n\
    /tmp/tmp7vrfojuh.cpp:21:12: error: expected primary-expression before \u2018long\u2019\
    \n   21 |     vector<long>size_of_string;\n      |            ^~~~\n/tmp/tmp7vrfojuh.cpp:25:17:\
    \ error: \u2018input\u2019 was not declared in this scope\n   25 |           \
    \      input.push_back(o);\n      |                 ^~~~~\n/tmp/tmp7vrfojuh.cpp:27:17:\
    \ error: \u2018size_of_string\u2019 was not declared in this scope\n   27 |  \
    \               size_of_string.push_back(size);\n      |                 ^~~~~~~~~~~~~~\n\
    /tmp/tmp7vrfojuh.cpp:34:17: error: \u2018input\u2019 was not declared in this\
    \ scope\n   34 |                 input.push_back(oBar);\n      |             \
    \    ^~~~~\n/tmp/tmp7vrfojuh.cpp:36:17: error: \u2018size_of_string\u2019 was\
    \ not declared in this scope\n   36 |                 size_of_string.push_back(size);\n\
    \      |                 ^~~~~~~~~~~~~~\n/tmp/tmp7vrfojuh.cpp:43:17: error: \u2018\
    input\u2019 was not declared in "
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    int\
    \ len = music_string.length();\n    std::vector<long> result;\n    for(int i =\
    \ 0; i < len;) {\n        if(music_string[i] == ' ') {\n            i++;\n   \
    \         continue;\n        }\n        if(music_string[i] == 'o') {\n       \
    \     result.push_back(4);\n            i += 2;\n        }\n        else if(music_string[i]\
    \ == '.') {\n            result.push_back(1);\n            i += 3;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpmh9m4zap: /tmp/tmpmh9m4zap.cpp:36: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::stringstream\
    \ ss(music_string);\n\tchar c;\n\tstd::vector<long> result;\n\tlong count = 0;\n\
    \tchar prev = ' ';\n\twhile (ss.get(c)) {\n\t\tif (c == '|') {\n\t\t\tif (prev\
    \ == '|') {\n\t\t\t\tresult.push_back(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(2);\n\
    \t\t\t}\n\t\t}\n\t\telse if (c == 'o') {\n\t\t\tif (prev == '|') {\n\t\t\t\tresult.push_back(2);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\telse if (c ==\
    \ '.') {\n\t\t\tresult.push_back(1);\n\t\t}\n\t\telse if (c == ' ') {\n\t\t\t\
    if (count > 0) {\n\t\t\t\tresult.push_back(count * 4);\n\t\t\t\tcount = 0;\n\t\
    \t\t}\n\t\t}\n\t\tprev = c;\n\t}\n\tif (count > 0) {\n\t\tresult.push_back(count\
    \ * 4);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp9msre2vd: /tmp/tmp9msre2vd.cpp:55: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    long res = 0;\n    for (int i = 0; i < music_string.size(); i++)\
    \ {\n        if (music_string[i] == ' ') {\n            continue;\n        }\n\
    \        if (music_string[i] == 'o') {\n            res = 4;\n        }\n    \
    \    if (music_string[i] == '.') {\n            res = 1;\n        }\n        if\
    \ (music_string[i] == '|') {\n            res /= 2;\n        }\n        result.push_back(res);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpde26bzmj: /tmp/tmpde26bzmj.cpp:36: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    size_t pos=0;\n    while (pos < music_string.size()) {\n        char\
    \ c = music_string[pos];\n        if (c == 'o') {\n            if (music_string[pos+1]\
    \ == ' ') {\n                ret.push_back(4);\n                pos += 2;\n  \
    \          } else {\n                assert(music_string[pos+1] == '|');\n   \
    \             ret.push_back(4);\n                pos += 3;\n            }\n  \
    \      } else if (c == '.') {\n            assert(music_string[pos+1] == '|');\n\
    \            ret.push_back(1);\n            pos += 3;\n        } else {\n    \
    \        assert(c == 'o');\n            assert(music_string[pos+1] == '|');\n\
    \            ret.push_back(2);\n            pos += 3;\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpmxqx8ups: /tmp/tmpmxqx8ups.cpp:22: std::vector<long int> parse_music(std::string):
    Assertion `music_string[pos+1] == ''|'''' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ tempo;\n  int i = 0;\n  while (i < music_string.length()) {\n    std::string\
    \ temp = \"\";\n    temp += music_string[i];\n    if (temp == \"o\") {\n     \
    \ tempo.push_back(4);\n      i++;\n    } else if (temp == \".\") {\n      tempo.push_back(1);\n\
    \      i++;\n    } else if (temp == \"|\") {\n      tempo.push_back(2);\n    \
    \  i++;\n    } else {\n      i++;\n    }\n  }\n  return tempo;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmptf04c14g: /tmp/tmptf04c14g.cpp:37: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::string\
    \ array[] = {\"o\",\"o|\",\".|\"};\n    std::vector<long> test;\n    std::stringstream\
    \ ss(music_string);\n    while(ss.good())\n    {\n        std::string substr;\n\
    \        getline(ss, substr, ' ');\n        if(substr == array[0])\n        {\n\
    \            test.push_back(4);\n        }\n        else if(substr == array[1])\n\
    \        {\n            test.push_back(2);\n        }\n        else if(substr\
    \ == array[2])\n        {\n            test.push_back(1);\n        }\n    }\n\
    \    return test;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ans;\n    for(char c : music_string) {\n        if(c == ' ') {\n           \
    \ continue;\n        }\n        if(c == 'o') {\n            ans.push_back(4);\n\
    \        }\n        if(c == '.') {\n            ans.push_back(1);\n        }\n\
    \        if(c == '|') {\n            ans.back() /= 2;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpyztai5r9: /tmp/tmpyztai5r9.cpp:34: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    int k = 0;\n    while(k < music_string.size()) {\n        if(music_string[k]\
    \ == 'o') {\n            beats.push_back(4);\n            if(music_string[k+1]\
    \ == '|') {\n                k++;\n            }\n        }\n        else if(music_string[k]\
    \ == '.') {\n            beats.push_back(1);\n            k++;\n        }\n  \
    \      k++;\n    }\n    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmps_8fyah7: /tmp/tmps_8fyah7.cpp:35: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    for (size_t i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ')\n                beats.push_back(4);\n\
    \            else if (music_string[i + 1] == '|')\n                beats.push_back(2);\n\
    \        }\n        else if (music_string[i] == '.') {\n            if (music_string[i\
    \ + 1] == '|')\n                beats.push_back(1);\n        }\n    }\n    return\
    \ beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpu7vvp80i: /tmp/tmpu7vvp80i.cpp:31: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011529
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    if (music_string.length() == 0) {\n        return result;\n   \
    \ }\n    std::vector<char> chars;\n    chars.push_back(music_string[0]);\n   \
    \ for (int i = 1; i < music_string.length(); i++) {\n        if (music_string[i]\
    \ == ' ') {\n            continue;\n        }\n        if (music_string[i] ==\
    \ 'o') {\n            if (chars.back() == 'o') {\n                chars.pop_back();\n\
    \                result.back() += 4;\n            } else {\n                chars.push_back(music_string[i]);\n\
    \                result.push_back(4);\n            }\n        } else if (music_string[i]\
    \ == '|') {\n            if (chars.back() == 'o') {\n                chars.push_back(music_string[i]);\n\
    \                result.push_back(2);\n            } else {\n                chars.pop_back();\n\
    \                result.back() += 1;\n            }\n        } else if (music_string[i]\
    \ == '.') {\n            if (chars.back() == 'o') {\n                chars.push_back(music_string[i]);\n\
    \                result.push_back(1);\n            } else {\n                chars.pop_back();\n\
    \                result.back() += 1;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011530
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tfor (auto i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tresult.push_back(4);\n\t\t}\n\t\telse if (music_string[i] ==\
    \ '.') {\n\t\t\tresult.push_back(1);\n\t\t}\n\t\telse if (music_string[i] == '|')\
    \ {\n\t\t\tresult.back() = result.back() / 2;\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpbsquj5ka: /tmp/tmpbsquj5ka.cpp:31: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011530
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ parsed;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == ' ') {\n\t\t\t\tparsed.push_back(4);\n\
    \t\t\t}\n\t\t\telse if (music_string[i + 1] == '|') {\n\t\t\t\tparsed.push_back(2);\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tif\
    \ (music_string[i + 1] == '|') {\n\t\t\t\tparsed.push_back(1);\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn parsed;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpf3l72c4e: /tmp/tmpf3l72c4e.cpp:36: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011530
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ music;\n\tint len = music_string.length();\n\tint i = 0;\n\twhile (i < len)\
    \ {\n\t\tif (music_string[i] == 'o') {\n\t\t\tmusic.push_back(4);\n\t\t\ti +=\
    \ 1;\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tmusic.push_back(1);\n\
    \t\t\ti += 3;\n\t\t}\n\t\telse {\n\t\t\tassert(false);\n\t\t}\n\t}\n\treturn music;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpuzz_eyc9: /tmp/tmpuzz_eyc9.cpp:26: std::vector<long int> parse_music(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660011531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ convert string to stringstream\n    std::stringstream ss(music_string);\n  \
    \  // declare output vector\n    std::vector<long> out;\n    // temp string\n\
    \    std::string temp;\n    // while there are chars in the stringstream\n   \
    \ while (ss >> temp) {\n        // if temp is 'o'\n        if (temp == \"o\")\
    \ {\n            // add 4 to output vector\n            out.push_back(4);\n  \
    \      }\n        // if temp is 'o|'\n        else if (temp == \"o|\") {\n   \
    \         // add 2 to output vector\n            out.push_back(2);\n        }\n\
    \        // if temp is '.|'\n        else if (temp == \".|\") {\n            //\
    \ add 1 to output vector\n            out.push_back(1);\n        }\n    }\n  \
    \  // return output vector\n    return out;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011531
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == 'o') {\n            result.push_back(4);\n        } else if (music_string[i]\
    \ == '.') {\n            result.push_back(1);\n        } else if (music_string[i]\
    \ == '|') {\n            result.push_back(2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpu6jc29ur: /tmp/tmpu6jc29ur.cpp:29: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ v;\n  std::stringstream ss(music_string);\n  std::string str;\n  while(std::getline(ss,\
    \ str, ' ')) {\n    if(str == \"o\") {\n      v.push_back(4);\n    } else if(str\
    \ == \"o|\") {\n      v.push_back(2);\n    } else if(str == \".|\") {\n      v.push_back(1);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011531
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ ret;\n  int i = 0;\n  while (i < music_string.size()) {\n    if (music_string[i]\
    \ == 'o') {\n      ret.push_back(4);\n      i++;\n    } else if (music_string[i]\
    \ == '.') {\n      ret.push_back(1);\n      i += 2;\n    } else {\n      assert(false);\n\
    \    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmppdymhhaa: /tmp/tmppdymhhaa.cpp:23: std::vector<long int> parse_music(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660011531
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ vec;\n    for(auto i : music_string) {\n        if(i == 'o') {\n           \
    \ vec.push_back(4);\n        }\n        else if(i == '.') {\n            vec.push_back(1);\n\
    \        }\n        else if(i == '|') {\n            vec.push_back(2);\n     \
    \   }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpmdk6gad1: /tmp/tmpmdk6gad1.cpp:31: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ res;\n\tstd::string str;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\
    \t\tif (music_string[i] == ' ') {\n\t\t\tif (str == \"o\") {\n\t\t\t\tres.push_back(4);\n\
    \t\t\t}\n\t\t\telse if (str == \"o|\") {\n\t\t\t\tres.push_back(2);\n\t\t\t}\n\
    \t\t\telse if (str == \".|\") {\n\t\t\t\tres.push_back(1);\n\t\t\t}\n\t\t\tstr\
    \ = \"\";\n\t\t}\n\t\telse {\n\t\t\tstr += music_string[i];\n\t\t}\n\t}\n\tif\
    \ (str == \"o\") {\n\t\tres.push_back(4);\n\t}\n\telse if (str == \"o|\") {\n\t\
    \tres.push_back(2);\n\t}\n\telse if (str == \".|\") {\n\t\tres.push_back(1);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011531
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ output;\n    if (music_string.find('|') == std::string::npos) {\n        output.push_back(4);\n\
    \        return output;\n    }\n    while (music_string.find('|') != std::string::npos)\
    \ {\n        int pos = music_string.find('|');\n        if (music_string[pos -\
    \ 1] == '.') {\n            output.push_back(1);\n        } else if (music_string[pos\
    \ - 1] == 'o') {\n            output.push_back(2);\n        }\n        music_string.erase(0,\
    \ pos + 1);\n    }\n    output.push_back(4);\n    return output;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpvu90gtlx: /tmp/tmpvu90gtlx.cpp:32: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    long count = 0;\n    for (int i = 0; i < music_string.size(); i++)\
    \ {\n        count++;\n        if (music_string[i] == 'o') {\n            if (music_string[i\
    \ + 1] == ' ') {\n                result.push_back(4);\n                count\
    \ = 0;\n            }\n        }\n        if (music_string[i] == 'o' and music_string[i\
    \ + 1] == '|') {\n            result.push_back(2);\n            count = 0;\n \
    \       }\n        if (music_string[i] == '.' and music_string[i + 1] == '|')\
    \ {\n            result.push_back(1);\n            count = 0;\n        }\n   \
    \     if (music_string[i] == ' ') {\n            count--;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpi8ucbi4o: /tmp/tmpi8ucbi4o.cpp:40: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    // check if string is empty\n    if(music_string.empty())\n      \
    \  return res;\n    // special case if string contains only ' '\n    if(music_string.size()\
    \ == 1){\n        if(music_string[0] == ' ')\n            return res;\n    }\n\
    \    char * cstr = new char [music_string.length()+1];\n    strcpy (cstr, music_string.c_str());\n\
    \    char * p = strtok (cstr,\" \");\n    while (p!=0){\n        if(*p == 'o')\n\
    \            res.push_back(4);\n        else if(*p == '.')\n            res.push_back(1);\n\
    \        p = strtok(NULL,\" \");\n    }\n    delete[] cstr;\n    return res;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpa48vsxmr: /tmp/tmpa48vsxmr.cpp:40: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string number = \"\";\n    // Add other cases if needed\n \
    \   for (char &i : music_string) {\n        switch (i) {\n            case 'o':\n\
    \                beats.push_back(4);\n                break;\n            case\
    \ '|':\n                beats.push_back(atoi(number.c_str()));\n             \
    \   number = \"\";\n                break;\n            case '.':\n          \
    \      number += \"1\";\n                break;\n            case ' ':\n     \
    \           break;\n            default:\n                number += i;\n     \
    \           break;\n        }\n    }\n    beats.push_back(atoi(number.c_str()));\n\
    \    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpq3qnuq55: /tmp/tmpq3qnuq55.cpp:40: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::string temp;\n    std::stringstream ss(music_string);\n  \
    \  while(std::getline(ss, temp, ' ')) {\n        if(temp == \"o\")\n         \
    \   result.push_back(4);\n        else if(temp == \"o|\")\n            result.push_back(2);\n\
    \        else if(temp == \".|\")\n            result.push_back(1);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ result;\n\tchar note = ' ';\n\t// This character is added to the end of the\
    \ string to make sure we read the last note.\n\tmusic_string.push_back(' ');\n\
    \tfor (auto it = music_string.begin(); it != music_string.end(); ++it) {\n\t\t\
    if (*it == ' ') {\n\t\t\tif (note == 'o') {\n\t\t\t\tresult.push_back(4);\n\t\t\
    \t}\n\t\t\telse if (note == 'o') {\n\t\t\t\tresult.push_back(2);\n\t\t\t}\n\t\t\
    \telse if (note == '.') {\n\t\t\t\tresult.push_back(1);\n\t\t\t}\n\t\t\tnote =\
    \ ' ';\n\t\t}\n\t\telse {\n\t\t\tnote = *it;\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpto7r8heb: /tmp/tmpto7r8heb.cpp:40: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    \n\
    \    std::vector<long> music_strings;\n    long count = 1;\n    for(int i = 0;\
    \ i < music_string.length(); i++)\n    {\n        if(music_string[i] == 'o')\n\
    \        {\n            if(music_string[i+1] == '|')\n            {\n        \
    \        music_strings.push_back(2);\n                i = i + 1;\n           \
    \ }\n            else\n            {\n                music_strings.push_back(4);\n\
    \            }\n        }\n        else if(music_string[i] == '.')\n        {\n\
    \            music_strings.push_back(1);\n            i = i + 1;\n        }\n\
    \        else\n        {\n            music_strings.push_back(1);\n        }\n\
    \    }\n    return music_strings;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmphw0z8ghx: /tmp/tmphw0z8ghx.cpp:45: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ notes;\n\tfor (unsigned int i = 0; i < music_string.length(); i++) {\n\t\tstd::string\
    \ note = \"\";\n\t\twhile (music_string[i] != ' ' && i < music_string.length())\
    \ {\n\t\t\tnote += music_string[i];\n\t\t\ti++;\n\t\t}\n\t\tif (note == \"o\"\
    )\n\t\t\tnotes.push_back(4);\n\t\telse if (note == \"o|\")\n\t\t\tnotes.push_back(2);\n\
    \t\telse if (note == \".|\")\n\t\t\tnotes.push_back(1);\n\t}\n\treturn notes;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    char* a = (char*)malloc(music_string.size()+1);\n    strcpy(a, music_string.c_str());\n\
    \    char* pch = strtok(a, \" \");\n    while(pch != NULL) {\n        if(strcmp(pch,\
    \ \"o\") == 0)\n            v.push_back(4);\n        else if(strcmp(pch, \"o|\"\
    ) == 0)\n            v.push_back(2);\n        else if(strcmp(pch, \".|\") == 0)\n\
    \            v.push_back(1);\n        pch = strtok(NULL, \" \");\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ answer(0);\n\tlong beats = 0;\n\tfor (int i = 0; i < music_string.length();\
    \ i++) {\n\t\tbeats = 0;\n\t\tif (music_string[i] == 'o') {\n\t\t\tbeats += 4;\n\
    \t\t\ti++;\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tbeats += 1;\n\
    \t\t\ti += 2;\n\t\t}\n\t\tanswer.push_back(beats);\n\t}\n\treturn answer;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpnfvu49yu: /tmp/tmpnfvu49yu.cpp:34: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ v;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\t\tv.push_back(2);\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t\tv.push_back(4);\n\t\t}\n\t\telse if\
    \ (music_string[i] == '.') {\n\t\t\tv.push_back(1);\n\t\t\ti++;\n\t\t}\n\t}\n\t\
    return v;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ values;\n\tfor (int i = 0; i < music_string.length(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\t\tvalues.push_back(2);\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t\tvalues.push_back(4);\n\t\t}\n\t\telse\
    \ if (music_string[i] == '.') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\
    \t\tvalues.push_back(1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn values;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ result;\n  char last_char = ' ';\n  int last_number = 0;\n  bool last_number_set\
    \ = false;\n  for (int i = 0; i < music_string.size(); i++) {\n    char cur_char\
    \ = music_string[i];\n    if (last_char == 'o' && cur_char == '|') {\n      result.push_back(last_number\
    \ * 2);\n      last_number_set = false;\n    } else if (last_char == '.' && cur_char\
    \ == '|') {\n      result.push_back(last_number);\n      last_number_set = false;\n\
    \    } else if (cur_char == 'o') {\n      last_number = 4;\n      last_number_set\
    \ = true;\n    } else if (cur_char == '.') {\n      last_number = 1;\n      last_number_set\
    \ = true;\n    }\n    last_char = cur_char;\n  }\n  if (last_number_set) {\n \
    \   result.push_back(last_number);\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp1eja0bnu: /tmp/tmp1eja0bnu.cpp:42: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ beats;\n  std::stringstream ss(music_string);\n  std::string token;\n  char\
    \ delimiter = ' ';\n  while (std::getline(ss, token, delimiter)) {\n    //std::cout\
    \ << token << std::endl;\n    if (token == \"o\") {\n      beats.push_back(4);\n\
    \    } else if (token == \"o|\") {\n      beats.push_back(2);\n    } else if (token\
    \ == \".|\") {\n      beats.push_back(1);\n    }\n  }\n  return beats;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    std::string s;\n    for(auto i:music_string)\n    {\n        if(i=='\
    \ ')\n        {\n            if(s==\"o\")\n                v.push_back(4);\n \
    \           else if(s==\"o|\")\n                v.push_back(2);\n            else\
    \ if(s==\".|\")\n                v.push_back(1);\n            s=\"\";\n      \
    \  }\n        else\n            s+=i;\n    }\n    if(s==\"o\")\n        v.push_back(4);\n\
    \    else if(s==\"o|\")\n        v.push_back(2);\n    else if(s==\".|\")\n   \
    \     v.push_back(1);\n    return v;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ v;\n\tint m = 0;\n\twhile (m < music_string.size()) {\n\t\tif (music_string[m]\
    \ == 'o') {\n\t\t\tv.push_back(4);\n\t\t\tm += 2;\n\t\t}\n\t\telse if (music_string[m]\
    \ == '.') {\n\t\t\tv.push_back(1);\n\t\t\tm += 3;\n\t\t}\n\t}\n\treturn v;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    if\
    \ (music_string.size() == 0) {\n        return {};\n    }\n    std::stringstream\
    \ ss(music_string);\n    std::string item;\n    std::vector<long> v;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        std::size_t found = item.find(\"|\"\
    );\n        if (found != std::string::npos) {\n            if (item.find(\"o\"\
    ) != std::string::npos) {\n                v.push_back(2);\n            } else\
    \ {\n                v.push_back(1);\n            }\n        } else {\n      \
    \      v.push_back(4);\n        }\n    }\n    return v;\n}\nint main() {\n   \
    \ auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ output;\n  for (size_t i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == 'o') {\n      if (music_string[i + 1] == ' ') {\n        output.push_back(4);\n\
    \      } else if (music_string[i + 1] == '|') {\n        output.push_back(2);\n\
    \        i++;\n      }\n    } else if (music_string[i] == '.') {\n      output.push_back(1);\n\
    \      i++;\n    }\n  }\n  return output;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpdis55ih0: /tmp/tmpdis55ih0.cpp:32: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011533
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ music;\n  int note_length = 0;\n  int i = 0;\n  int j = 0;\n  while (i < music_string.length())\
    \ {\n    if (music_string[i] == 'o') {\n      if (music_string[i + 1] == ' ' ||\
    \ music_string[i + 1] == '\\0') {\n        note_length = 4;\n        music.push_back(note_length);\n\
    \        i++;\n      } else if (music_string[i + 1] == '|') {\n        note_length\
    \ = 2;\n        music.push_back(note_length);\n        i += 2;\n      }\n    }\
    \ else if (music_string[i] == '.') {\n      if (music_string[i + 1] == '|') {\n\
    \        note_length = 1;\n        music.push_back(note_length);\n        i +=\
    \ 2;\n      }\n    } else if (music_string[i] == ' ') {\n      i++;\n    }\n \
    \ }\n  // printf(\"%s\\n\", \"here\");\n  return music;\n}\nint main() {\n   \
    \ auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int point = 0;\n    std::string tmp=\"\";\n    for(int i=0;i<music_string.size();i++){\n\
    \        if(music_string[i]=='o'){\n            tmp+=music_string[i];\n      \
    \      point = i;\n        }\n        else if(music_string[i]=='|'){\n       \
    \     tmp+=music_string[i];\n            if(tmp==\"o|\"){\n                result.push_back(2);\n\
    \            }\n            else if(tmp==\".|\"){\n                result.push_back(1);\n\
    \            }\n            tmp=\"\";\n        }\n        else if(music_string[i]=='\
    \ '){\n            if(point!=i-1){\n                tmp=\"\";\n            }\n\
    \            else{\n                result.push_back(4);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmprqqidqpf: /tmp/tmprqqidqpf.cpp:45: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011533
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ res;\n  //std::cout << music_string << std::endl;\n  for (int i = 0; i < music_string.size();\
    \ ++i) {\n    if (music_string[i] == 'o') {\n      if (music_string[i + 1] ==\
    \ '|') {\n        res.push_back(2);\n        ++i;\n      } else {\n        res.push_back(4);\n\
    \      }\n    } else if (music_string[i] == '.') {\n      if (music_string[i +\
    \ 1] == '|') {\n        res.push_back(1);\n        ++i;\n      }\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    long current_value = 0;\n    for (auto current_character : music_string)\
    \ {\n        if (current_character == 'o') {\n            current_value += 4;\n\
    \        } else if (current_character == '|') {\n            result.push_back(current_value);\n\
    \            current_value = 0;\n        } else if (current_character == '.')\
    \ {\n            current_value += 1;\n        }\n    }\n    result.push_back(current_value);\n\
    \    return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpkagitth8: /tmp/tmpkagitth8.cpp:30: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    std::string temp;\n    bool break_flag = false;\n    int count\
    \ = 0;\n    for (int i = 0; i < music_string.length(); i++) {\n        if(music_string[i]\
    \ == ' ') {\n            result.push_back(count);\n            count = 0;\n  \
    \          continue;\n        }\n        if(music_string[i] == '|') {\n      \
    \      result.push_back(count);\n            count = 0;\n            continue;\n\
    \        }\n        if(music_string[i] == 'o') {\n            count = 4;\n   \
    \         continue;\n        }\n        if(music_string[i] == '.') {\n       \
    \     count = 1;\n            continue;\n        }\n    }\n    result.push_back(count);\n\
    \    return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpzyah802b: /tmp/tmpzyah802b.cpp:42: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int count=0;\n    int size=music_string.size();\n    long sum=0;\n\
    \    while(count<size)\n    {\n        if(music_string[count]=='o')\n        {\n\
    \            result.push_back(4);\n            sum+=4;\n            count++;\n\
    \        }\n        else if(music_string[count]=='.')\n        {\n           \
    \ result.push_back(1);\n            sum+=1;\n            count+=2;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ans;\n    for (char c : music_string) {\n        if (c == 'o') {\n         \
    \   ans.push_back(4);\n        } else if (c == '|') {\n            ans.push_back(2);\n\
    \        } else if (c == '.') {\n            ans.push_back(1);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = parse_music;\n  \
    \  assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpuj_dc40e: /tmp/tmpuj_dc40e.cpp:29: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ notes;\n    if (music_string.size() == 0) {\n        return notes;\n    }\n\
    \    // TODO: implement this function so that tests in test_music.cpp pass.\n\
    \    // Remember to run the tests with `./run_tests.sh`!\n    notes.push_back(4);\n\
    \    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == '|') {\n                notes.push_back(2);\n\
    \                i++;\n            } else {\n                notes.push_back(4);\n\
    \            }\n        } else if (music_string[i] == '.') {\n            notes.push_back(1);\n\
    \            i++;\n        }\n    }\n    return notes;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpj2ypqys_: /tmp/tmpj2ypqys_.cpp:38: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    long i = 0;\n    while (i < music_string.size()) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                beats.push_back(4);\n\
    \                i += 2;\n            } else if (music_string[i + 1] == '|') {\n\
    \                beats.push_back(2);\n                i += 3;\n            }\n\
    \        } else if (music_string[i] == '.') {\n            beats.push_back(1);\n\
    \            i += 3;\n        }\n    }\n    return beats;\n}\nint main() {\n \
    \   auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    // Get rid of the spaces and |'s\n    music_string.erase(std::remove(music_string.begin(),\
    \ music_string.end(), ' '), music_string.end());\n    music_string.erase(std::remove(music_string.begin(),\
    \ music_string.end(), '|'), music_string.end());\n    std::string str;\n    for\
    \ (int i = 0; i < music_string.size(); i++) {\n        str += music_string[i];\n\
    \        if (music_string[i] == 'o') {\n            ret.push_back(4);\n      \
    \  } else if (music_string[i] == '.') {\n            ret.push_back(1);\n     \
    \   }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmph3j1nroj: /tmp/tmph3j1nroj.cpp:33: int main(): Assertion `candidate(("o|
    o| .| .| o o o o")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1,
    (long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::stringstream\
    \ str_stream(music_string);\n    std::string token;\n    std::vector<long> result;\n\
    \    while (std::getline(str_stream, token, ' ')) {\n        if (token == \"o\"\
    ) {\n            result.push_back(4);\n        } else if (token == \"o|\") {\n\
    \            result.push_back(2);\n        } else if (token == \".|\") {\n   \
    \         result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011534
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ v;\n    int x = 1;\n    while(x < music_string.size()-1){\n        if(music_string[x]\
    \ == ' ' && music_string[x+1] == 'o'){\n            if(music_string[x+2] == '\
    \ '){\n                v.push_back(4);\n                x = x + 4;\n         \
    \   }\n            else if(music_string[x+2] == '|'){\n                v.push_back(2);\n\
    \                x = x + 4;\n            }\n        }\n        else if(music_string[x]\
    \ == '.' && music_string[x+1] == '|'){\n            v.push_back(1);\n        \
    \    x = x + 3;\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ values;\n    std::string delimiter = \" \";\n    size_t pos = 0;\n    std::string\
    \ token;\n    std::string s = music_string;\n    while ((pos = s.find(delimiter))\
    \ != std::string::npos) {\n        token = s.substr(0, pos);\n        if(token\
    \ == \"o\")\n            values.push_back(4);\n        else if(token == \"o|\"\
    )\n            values.push_back(2);\n        else if(token == \".|\")\n      \
    \      values.push_back(1);\n        s.erase(0, pos + delimiter.length());\n \
    \   }\n    values.push_back(4);\n    return values;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpcruxyuls: /tmp/tmpcruxyuls.cpp:33: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ final_vect;\n    std::vector<char> temp_vect;\n    long i = 0;\n    while(i<music_string.length()){\n\
    \        if(music_string[i] != ' '){\n            temp_vect.push_back(music_string[i]);\n\
    \        }\n        if(music_string[i] == ' ' || i==music_string.length()-1){\n\
    \            std::string temp_str(temp_vect.begin(), temp_vect.end());\n     \
    \       if(temp_str == \"o\"){\n                final_vect.push_back(4);\n   \
    \         }\n            else if(temp_str == \"o|\"){\n                final_vect.push_back(2);\n\
    \            }\n            else if(temp_str == \".|\"){\n                final_vect.push_back(1);\n\
    \            }\n            temp_vect.clear();\n        }\n        i++;\n    }\n\
    \    return final_vect;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    int i = 0;\n    while (i < music_string.size()) {\n        while (i\
    \ < music_string.size() && music_string[i] == ' ') i++;\n        if (i < music_string.size()\
    \ && music_string[i] == 'o') {\n            ret.push_back(4);\n            i++;\n\
    \        } else if (i + 1 < music_string.size() && music_string[i] == 'o' && music_string[i\
    \ + 1] == '|') {\n            ret.push_back(2);\n            i += 2;\n       \
    \ } else if (i + 1 < music_string.size() && music_string[i] == '.' && music_string[i\
    \ + 1] == '|') {\n            ret.push_back(1);\n            i += 2;\n       \
    \ } else {\n            assert(0);\n        }\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp3ukwy9a3: /tmp/tmp3ukwy9a3.cpp:27: std::vector<long int> parse_music(std::string):
    Assertion `0'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n  std::vector<long>\
    \ ret;\n  std::string temp;\n  std::stringstream ss(music_string);\n  while(std::getline(ss,\
    \ temp, ' ')) {\n    if(temp == \"o\") {\n      ret.push_back(4);\n    } else\
    \ if(temp == \"o|\") {\n      ret.push_back(2);\n    } else if(temp == \".|\"\
    ) {\n      ret.push_back(1);\n    }\n  }\n  return ret;\n}\nint main() {\n   \
    \ auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                result.push_back(4);\n\
    \            } else {\n                result.push_back(2);\n                i\
    \ += 2;\n            }\n        } else {\n            result.push_back(1);\n \
    \           i += 2;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpgdugdhs8: /tmp/tmpgdugdhs8.cpp:32: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ todo\n    std::vector<long> v;\n    for(int i=0;i<music_string.size();++i){\n\
    \        if(music_string[i]=='o'){\n            if(music_string[i+1]==' '){\n\
    \                v.push_back(4);\n            }\n            else{\n         \
    \       v.push_back(2);\n                i++;\n            }\n        }\n    \
    \    else{\n            v.push_back(1);\n            i++;\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp4qlosfdu: /tmp/tmp4qlosfdu.cpp:35: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ v;\n\tfor (char c : music_string) {\n\t\tif (c == 'o')\n\t\t\tv.push_back(4);\n\
    \t\telse if (c == '|')\n\t\t\tv.push_back(2);\n\t\telse if (c == '.')\n\t\t\t\
    v.push_back(1);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmphn5rsjze: /tmp/tmphn5rsjze.cpp:28: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ beats;\n\t// not sure what the \"points\" are asking for (e.g. \"Use only basic\
    \ function from STL\")\n\t// So I'm just going to write what I would do for this\
    \ problem in real life.\n\tfor (int i = 0; i < music_string.length(); i++) {\n\
    \t\tif (music_string[i] == 'o') {\n\t\t\tbeats.push_back(4);\n\t\t}\n\t\telse\
    \ if (music_string[i] == '.') {\n\t\t\tbeats.push_back(1);\n\t\t}\n\t\telse if\
    \ (music_string[i] == '|') {\n\t\t\tbeats.push_back(2);\n\t\t}\n\t}\n\treturn\
    \ beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpd71oskv2: /tmp/tmpd71oskv2.cpp:33: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ parse;\n\tstd::regex e (\"(o|\\\\.|o\\\\|)\");\n\tstd::smatch m;\n\tauto words_begin\
    \ = std::sregex_iterator(music_string.begin(), music_string.end(), e);\n\tauto\
    \ words_end = std::sregex_iterator();\n\tfor (std::sregex_iterator i = words_begin;\
    \ i != words_end; ++i) {\n\t\tstd::smatch match = *i;\n\t\tstd::string match_str\
    \ = match.str();\n\t\tif (match_str == \"o\") parse.push_back(4);\n\t\telse if\
    \ (match_str == \"o|\") parse.push_back(2);\n\t\telse if (match_str == \".|\"\
    ) parse.push_back(1);\n\t}\n\treturn parse;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpuynqkon_: /tmp/tmpuynqkon_.cpp:31: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    //\
    \ Enter your code here\n    std::vector<long> notes;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    int i = 0;\n    while(ss >> note) {\n        if(note[0]\
    \ == 'o') {\n            if(note.size() == 1)\n                notes.push_back(4);\n\
    \            else\n                notes.push_back(2);\n        }\n        else\n\
    \            notes.push_back(1);\n    }\n    return notes;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ out;\n    std::vector<char> char_arr;\n    int i = 0;\n    while (i < music_string.length())\
    \ {\n        if (music_string[i] == 'o') {\n            char_arr.push_back('o');\n\
    \            i++;\n        } else if (music_string[i] == '.') {\n            char_arr.push_back('.');\n\
    \            i++;\n        } else if (music_string[i] == '|') {\n            char_arr.push_back('|');\n\
    \            i++;\n        } else if (music_string[i] == ' ') {\n            if\
    \ (char_arr.size() == 1) {\n                if (char_arr[0] == 'o') {\n      \
    \              out.push_back(4);\n                } else if (char_arr[0] == '.')\
    \ {\n                    out.push_back(1);\n                }\n            } else\
    \ if (char_arr.size() == 2) {\n                if (char_arr[0] == 'o' && char_arr[1]\
    \ == '|') {\n                    out.push_back(2);\n                } else if\
    \ (char_arr[0] == '.' && char_arr[1] == '|') {\n                    out.push_back(1);\n\
    \                }\n            }\n            char_arr.clear();\n           \
    \ i++;\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp7tb54i41: /tmp/tmp7tb54i41.cpp:49: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660011535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    int len = music_string.length();\n    for (int i = 0; i < len;\
    \ i++) {\n        if (music_string[i] == 'o') {\n            int count = 0;\n\
    \            for (; i < len && music_string[i] == 'o'; i++) {\n              \
    \  count++;\n            }\n            result.push_back(count*4);\n         \
    \   i--;\n        } else if (music_string[i] == '.') {\n            int count\
    \ = 0;\n            for (; i < len && music_string[i] == '.'; i++) {\n       \
    \         count++;\n            }\n            result.push_back(count);\n    \
    \        i--;\n        } else if (music_string[i] == '|') {\n            result.push_back(2);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpxzo2eby0: /tmp/tmpxzo2eby0.cpp:40: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ ret;\n    int cnt = 0;\n    for (int i = 0; i < music_string.size(); i++) {\n\
    \        if (music_string[i] == 'o') {\n            if (i + 1 < music_string.size()\
    \ && music_string[i + 1] == '|') {\n                ret.push_back(2);\n      \
    \          i++;\n            } else {\n                ret.push_back(4);\n   \
    \         }\n        } else if (music_string[i] == '.') {\n            ret.push_back(1);\n\
    \            i++;\n        }\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ value;\n    stringstream s(music_string);\n    string word;\n    while(s >>\
    \ word)\n    {\n        if(word == \"o\")\n            value.push_back(4);\n \
    \       else if(word == \"o|\")\n            value.push_back(2);\n        else\
    \ if(word == \".|\")\n            value.push_back(1);\n    }\n    return value;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfdbky9u.cpp: In function \u2018std::vector<long int> parse_music(std::string)\u2019\
    :\n/tmp/tmpcfdbky9u.cpp:14:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   14 |     stringstream\
    \ s(music_string);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcfdbky9u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpcfdbky9u.cpp:15:5:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   15 |     string word;\n      |     ^~~~~~\n      |    \
    \ std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcfdbky9u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared"
  stdout: ''
  timestamp: 1660011535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    for (auto it = music_string.begin(); it != music_string.end();\
    \ it++) {\n        switch (*it) {\n            case 'o':\n                result.push_back(4);\n\
    \                break;\n            case '|':\n                result.push_back(2);\n\
    \                break;\n            case '.':\n                result.push_back(1);\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpd34kvo01: /tmp/tmpd34kvo01.cpp:35: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660011536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ result;\n    char *p;\n    p = strtok((char *)music_string.c_str(), \" \");\n\
    \    while (p != NULL) {\n        if (strcmp(p, \"o\") == 0) {\n            result.push_back(4);\n\
    \        } else if (strcmp(p, \"o|\") == 0) {\n            result.push_back(2);\n\
    \        } else if (strcmp(p, \".|\") == 0) {\n            result.push_back(1);\n\
    \        }\n        p = strtok(NULL, \" \");\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < music_string.size(); i++) {\n        char c =\
    \ music_string[i];\n        if (c == 'o') {\n            if (i + 1 < music_string.size()\
    \ && music_string[i + 1] == '|') {\n                res.push_back(2);\n      \
    \          i++;\n            } else {\n                res.push_back(4);\n   \
    \         }\n        } else if (c == '.') {\n            assert(i + 1 < music_string.size()\
    \ && music_string[i + 1] == '|');\n            res.push_back(1);\n           \
    \ i++;\n        } else {\n            assert(false);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp2n5_nytb: /tmp/tmp2n5_nytb.cpp:28: std::vector<long int> parse_music(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660011536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n\tstd::vector<long>\
    \ music;\n\tmusic.push_back(4);\n\tmusic.push_back(4);\n\treturn music;\n}\nint\
    \ main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmprlbcmbg9: /tmp/tmprlbcmbg9.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660011536
