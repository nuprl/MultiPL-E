name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a vector\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty vector.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"\
  ), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"\
  Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\"\
  , (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n\
  // (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n//\
  \ (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
  Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string>\
  \ select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
  })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
  Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
  ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
  ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
  Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n \
  \   assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
  a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
  c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
completions: ["    int count = 0;\n    std::vector<std::string> v;\n    std::string\
    \ word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '\
    \ '){\n            if(word.length() == n){\n                v.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        }\n\
    \        else{\n            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i]\
    \ != 'o' && s[i] != 'u'){\n                count++;\n            }\n         \
    \   word += s[i];\n        }\n    }\n    if(word.length() == n){\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::string vowels = \"aeiou\";\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (count_consonants(word) == n)\
    \ {\n                words.push_back(word);\n            }\n            word =\
    \ \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    if\
    \ (count_consonants(word) == n) {\n        words.push_back(word);\n    }\n   \
    \ return words;", "    if(s.empty()) return {};\n    std::vector<std::string>\
    \ result;\n    std::string temp;\n    for(int i = 0; i < s.size(); i++){\n   \
    \     if(s[i] != ' '){\n            temp += s[i];\n        }\n        else if(!temp.empty()){\n\
    \            if(checkCons(temp) == n){\n                result.push_back(temp);\n\
    \            }\n            temp.clear();\n        }\n    }\n    if(!temp.empty()){\n\
    \        if(checkCons(temp) == n){\n            result.push_back(temp);\n    \
    \    }\n    }\n    return result;", "  // your code here\n  std::string t;\n \
    \ std::stringstream sstream(s);\n  std::vector<std::string> str_list;\n  std::vector<std::string>\
    \ res;\n  while(sstream >> t){\n    str_list.push_back(t);\n  }\n  for(auto it\
    \ = str_list.begin(); it != str_list.end(); it++){\n    int counter = 0;\n   \
    \ for(auto jt = it->begin(); jt != it->end(); jt++){\n      if(*jt == 'a' || *jt\
    \ == 'e' || *jt == 'i' || *jt == 'o' || *jt == 'u'){\n        counter++;\n   \
    \   }\n    }\n    if(counter == n){\n      res.push_back(*it);\n    }\n  }\n \
    \ return res;", "  std::vector<std::string>res;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while(ss>>word){\n    int cnt = 0;\n    for(auto i:word){\n\
    \      if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u')\n        cnt++;\n\
    \    }\n    if(cnt == n)\n      res.push_back(word);\n  }\n  return res;", "\t\
    std::vector<std::string> result;\n\tstd::string curr;\n\tint cons=0;\n\tfor(int\
    \ i=0;i<s.length();i++){\n\t\tif(s[i]!=' '){\n\t\t\tcurr+=s[i];\n\t\t\tif(s[i]!='a'\
    \ && s[i]!='e' && s[i]!='i' && s[i]!='o' && s[i]!='u'){\n\t\t\t\tcons++;\n\t\t\
    \t}\n\t\t}\n\t\telse{\n\t\t\tif(cons==n){\n\t\t\t\tresult.push_back(curr);\n\t\
    \t\t}\n\t\t\tcurr=\"\";\n\t\t\tcons=0;\n\t\t}\n\t}\n\tif(cons==n){\n\t\tresult.push_back(curr);\n\
    \t}\n\treturn result;", "    std::vector<std::string> selected_words;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while (ss >> word) {\n        long vowels_count\
    \ = 0;\n        for (char c : word) {\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                vowels_count++;\n     \
    \       }\n        }\n        if (word.size() - vowels_count == n) {\n       \
    \     selected_words.push_back(word);\n        }\n    }\n    return selected_words;",
  "    std::vector<std::string> words;\n    int num = 0;\n    bool temp = true;\n\
    \    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (s[i] == ' ') {\n            if (num == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n            num = 0;\n            temp\
    \ = true;\n        } else {\n            if (temp) {\n                if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \                temp = false;\n                } else {\n                   \
    \ num++;\n                }\n            }\n            word += s[i];\n      \
    \  }\n    }\n    if (num == n) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "    std::vector<std::string> result;\n    std::string::size_type pos\
    \ = 0;\n    std::string::size_type old_pos = 0;\n    int count = 0;\n    bool\
    \ is_word = false;\n    while (pos != std::string::npos) {\n        if (s[pos]\
    \ == ' ') {\n            if (is_word) {\n                if (count == n) {\n \
    \                   result.push_back(s.substr(old_pos, pos - old_pos));\n    \
    \            }\n                is_word = false;\n                count = 0;\n\
    \            }\n            old_pos = pos + 1;\n        } else {\n           \
    \ if (is_word) {\n                count++;\n            } else {\n           \
    \     is_word = true;\n            }\n        }\n        pos = s.find(' ', pos\
    \ + 1);\n    }\n    if (is_word) {\n        if (count == n) {\n            result.push_back(s.substr(old_pos,\
    \ pos - old_pos));\n        }\n    }\n    return result;", "\tstd::vector<std::string>\
    \ v;\n\tstd::stringstream ss(s);\n\tstd::string str;\n\twhile(ss >> str) {\n\t\
    \tlong counter = 0;\n\t\tfor(char c : str) {\n\t\t\tif(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\t\
    if(counter == n) {\n\t\t\tv.push_back(str);\n\t\t}\n\t}\n\treturn v;", "  int\
    \ c = 0;\n  bool found = false;\n  std::vector<std::string> result;\n  if (s.empty())\
    \ return result;\n  std::string tmp;\n  std::istringstream iss(s);\n  while (iss\
    \ >> tmp) {\n    for (auto &c : tmp) {\n      if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n        c = ' ';\n      }\n    }\n    std::replace(tmp.begin(),\
    \ tmp.end(), ' ', '.');\n    std::replace(tmp.begin(), tmp.end(), '.', ' ');\n\
    \    std::stringstream ss(tmp);\n    while (ss >> tmp) {\n      c++;\n    }\n\
    \    if (c == n) {\n      result.push_back(tmp);\n      found = true;\n    }\n\
    \    c = 0;\n  }\n  if (!found) return result;\n  return result;", "  int count\
    \ = 0;\n  std::vector<std::string> words;\n  std::stringstream sstream(s);\n \
    \ std::string currentWord;\n  while(sstream >> currentWord) {\n    count = 0;\n\
    \    for(auto c : currentWord) {\n      switch(c) {\n        case 'a':\n     \
    \   case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n     \
    \   case 'y':\n        case 'A':\n        case 'E':\n        case 'I':\n     \
    \   case 'O':\n        case 'U':\n        case 'Y':\n          break;\n      \
    \  default:\n          count++;\n      }\n    }\n    if(count == n) {\n      words.push_back(currentWord);\n\
    \    }\n  }\n  return words;", "    std::vector<std::string> v;\n    std::string\
    \ word;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] != ' '){\n\
    \            word += s[i];\n        }\n        else{\n            int count =\
    \ 0;\n            for(int j = 0; j < word.length(); j++){\n                char\
    \ c = word[j];\n                if( c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' && c != 'y'){\n                    count++;\n                }\n\
    \            }\n            if(count == n){\n                v.push_back(word);\n\
    \            }\n            word = \"\";\n        }\n    }\n    int count = 0;\n\
    \    for(int j = 0; j < word.length(); j++){\n        char c = word[j];\n    \
    \    if( c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y'){\n\
    \            count++;\n        }\n    }\n    if(count == n){\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::vector<std::string> result;\n    long int const\
    \ count = std::count_if(s.begin(), s.end(), [](const char & c) {\n        return\
    \ !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == ' ');\n \
    \   });\n    std::stringstream ss(s);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (std::count_if(item.begin(), item.end(), [](const\
    \ char & c) {\n            return !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }) == n) {\n            result.push_back(item);\n   \
    \     }\n    }\n    return result;", "\tstd::vector<std::string> res;\n\tstd::stringstream\
    \ input(s);\n\tstd::string temp;\n\twhile (input >> temp) {\n\t\tint consonants\
    \ = 0;\n\t\tfor (char c : temp) {\n\t\t\tif (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u')\n\t\t\t\tconsonants++;\n\t\t}\n\t\tif (consonants ==\
    \ n)\n\t\t\tres.push_back(temp);\n\t}\n\treturn res;", "    // Enter your code\
    \ here\n    std::vector<std::string> v;\n    std::string t;\n    int l = 0;\n\
    \    for(int i = 0; i < s.length(); i++){\n        if(s[i] != ' '){\n        \
    \    l++;\n            t += s[i];\n        }else{\n            // cout << l <<\
    \ endl;\n            if(l == n){\n                v.push_back(t);\n          \
    \  }\n            l = 0;\n            t = \"\";\n        }\n    }\n    if(l ==\
    \ n){\n        v.push_back(t);\n    }\n    return v;", "    std::vector<std::string>\
    \ result;\n    std::string word;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] == ' ') {\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        } else\
    \ {\n            word += s[i];\n            if (consonants.find(tolower(s[i]))\
    \ != std::string::npos) {\n                count++;\n            }\n        }\n\
    \    }\n    if (count == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;", "    std::vector<std::string> words;\n    if (s.empty()) return words;\n\
    \    std::stringstream ss(s);\n    std::string word;\n    std::unordered_set<char>\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n    while (ss >> word) {\n        long\
    \ count = 0;\n        for (char c : word) {\n            if (vowels.find(tolower(c))\
    \ == vowels.end()) count++;\n        }\n        if (count == n) words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> result;\n    if (s.empty())\
    \ {\n        return result;\n    }\n    std::stringstream ss(s);\n    std::string\
    \ w;\n    while (ss >> w) {\n        // std::cout << w << std::endl;\n       \
    \ int consonants = 0;\n        for (char c : w) {\n            if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push_back(w);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  long curr = 0;\n  long last = 0;\n  for (long i = 0; i < s.size(); i++) {\n\
    \    if (s[i] == ' ') {\n      if (curr == n) {\n        result.push_back(s.substr(last,\
    \ i - last));\n      }\n      curr = 0;\n      last = i + 1;\n    } else if (!(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')) {\n   \
    \   curr++;\n    }\n  }\n  if (curr == n) {\n    result.push_back(s.substr(last,\
    \ s.size() - last));\n  }\n  return result;", "  assert(n>=0);\n  std::stringstream\
    \ ss(s);\n  std::vector<std::string> result;\n  std::string word;\n  while(ss>>word){\n\
    \    long count = 0;\n    for(char& ch: word){\n      switch(ch){\n        case\
    \ 'a': case 'e': case 'i': case 'o': case 'u': case 'y': case 'A': case 'E': case\
    \ 'I': case 'O': case 'U': case 'Y': break;\n        default: count++;\n     \
    \ }\n    }\n    if(count==n) result.push_back(word);\n  }\n  return result;",
  "    std::vector<std::string> words;\n    std::string currentWord = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n           \
    \ words.push_back(currentWord);\n            currentWord = \"\";\n        } else\
    \ {\n            currentWord += s[i];\n        }\n    }\n    words.push_back(currentWord);\n\
    \    std::vector<std::string> answer;\n    for (int i = 0; i < words.size(); i++)\
    \ {\n        int count = 0;\n        for (int j = 0; j < words[i].length(); j++)\
    \ {\n            if (!(words[i][j] == 'a' || words[i][j] == 'e' || words[i][j]\
    \ == 'i' || words[i][j] == 'o' || words[i][j] == 'u')) {\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            answer.push_back(words[i]);\n\
    \        }\n    }\n    return answer;", "\tstd::vector<std::string> result;\n\t\
    std::string word = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ == ' ') {\n\t\t\tif (count_consonants(word) == n) {\n\t\t\t\tresult.push_back(word);\n\
    \t\t\t}\n\t\t\tword = \"\";\n\t\t} else {\n\t\t\tword += s[i];\n\t\t}\n\t}\n\t\
    if (count_consonants(word) == n) {\n\t\tresult.push_back(word);\n\t}\n\treturn\
    \ result;", "    std::vector<std::string> consonants = {\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\"};\n    std::vector<std::string> words;\n\
    \    std::string temp = \"\";\n    std::vector<char> originalString;\n    std::vector<std::string>\
    \ result;\n    for(int i = 0; i < s.length(); i++){\n        originalString.push_back(s[i]);\n\
    \    }\n    for(int i = 0; i < originalString.size(); i++){\n        for(int j\
    \ = 0; j < consonants.size(); j++){\n            if(originalString[i] == consonants[j][0]){\n\
    \                temp += originalString[i];\n            }\n        }\n    }\n\
    \    for(int i = 0; i < temp.length(); i++){\n        if(temp[i] == ' '){\n  \
    \          words.push_back(temp.substr(0, i));\n            temp = temp.substr(i\
    \ + 1, temp.length() - i - 1);\n            i = 0;\n        }\n    }\n    for(int\
    \ i = 0; i < words.size(); i++){\n        if(words[i].length() == n){\n      \
    \      result.push_back(words[i]);\n        }\n    }\n    return result;", " \
    \ std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (std::count_if(word.begin(), word.end(),\
    \ [](char c) {return (std::string(\"aeiou\").find(c) == std::string::npos);})\
    \ == n) {\n      result.push_back(word);\n    }\n  }\n  return result;", "   \
    \ // Write your code here\n    std::vector<std::string> vec;\n    std::stringstream\
    \ ss(s);\n    std::string token;\n    while(std::getline(ss, token, ' ')){\n \
    \       int count = 0;\n        for(int i = 0; i < token.length(); i++){\n   \
    \         if(token[i] != 'a' && token[i] != 'e' && token[i] != 'i' && token[i]\
    \ != 'o' && token[i] != 'u'){\n                count++;\n            }\n     \
    \   }\n        if(count == n){\n            vec.push_back(token);\n        }\n\
    \    }\n    return vec;", "   std::vector<std::string> answer;\n   std::vector<char>\
    \ vowels{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n   std::string word\
    \ = \"\";\n   long counter = 0;\n   for (char& character : s) {\n     if (character\
    \ == ' ') {\n       if (counter == n) {\n         answer.push_back(word);\n  \
    \     }\n       word = \"\";\n       counter = 0;\n     } else {\n       if (std::find(vowels.begin(),\
    \ vowels.end(), character) == vowels.end()) {\n         counter++;\n       }\n\
    \       word += character;\n     }\n   }\n   if (counter == n) {\n     answer.push_back(word);\n\
    \   }\n   return answer;", "  std::vector<std::string> res;\n  std::stringstream\
    \ ss(s);\n  std::string cur;\n  while (ss >> cur) {\n    if (cur.size() == n)\
    \ {\n      int count = 0;\n      for (char ch : cur) {\n        if (ch != 'a'\
    \ && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u') {\n          count++;\n\
    \        }\n      }\n      if (count == n) {\n        res.push_back(cur);\n  \
    \    }\n    }\n  }\n  return res;", "  std::vector<std::string> result;\n  int\
    \ strLen = s.length();\n  int cons = 0;\n  std::string curr = \"\";\n  bool inSpace\
    \ = true;\n  bool isVowel = false;\n  char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n\
    \  int vowLen = sizeof(vowels)/sizeof(vowels[0]);\n  for (int i = 0; i < strLen;\
    \ i++) {\n    if (s[i] == ' ') {\n      if (inSpace == false) {\n        inSpace\
    \ = true;\n        if (cons == n) {\n          result.push_back(curr);\n     \
    \   }\n        curr = \"\";\n        cons = 0;\n      }\n    } else {\n      if\
    \ (inSpace == true) {\n        inSpace = false;\n      }\n      isVowel = false;\n\
    \      for (int j = 0; j < vowLen; j++) {\n        if (s[i] == vowels[j]) {\n\
    \          isVowel = true;\n          break;\n        }\n      }\n      if (isVowel\
    \ == false) {\n        cons++;\n      }\n      curr += s[i];\n    }\n  }\n  if\
    \ (inSpace == false) {\n    if (cons == n) {\n      result.push_back(curr);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> words;\n    std::string\
    \ temp = \"\";\n    int consonants = 0;\n    for (char &c : s) {\n        if (c\
    \ == ' ') {\n            if (consonants == n) {\n                words.push_back(temp);\n\
    \            }\n            temp = \"\";\n            consonants = 0;\n      \
    \  } else {\n            temp += c;\n            if (!isalpha(c)) continue;\n\
    \            char lower = tolower(c);\n            if (lower != 'a' && lower !=\
    \ 'e' && lower != 'i' && lower != 'o' && lower != 'u') {\n                consonants++;\n\
    \            }\n        }\n    }\n    if (consonants == n) {\n        words.push_back(temp);\n\
    \    }\n    return words;", "    std::stringstream ss(s);\n    std::vector<std::string>\
    \ vec;\n    std::string word;\n    while(ss >> word) {\n        if(word.length()\
    \ == n) {\n            vec.push_back(word);\n        }\n    }\n    return vec;",
  "  std::vector<std::string> res;\n  std::istringstream iss(s);\n  std::string word;\n\
    \  while (std::getline(iss, word, ' ')) {\n    if (std::count_if(word.begin(),\
    \ word.end(),\n                      [](char c) { return c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u'; }) == n) {\n      res.push_back(word);\n\
    \    }\n  }\n  return res;", "    std::vector<std::string> result;\n    std::string\
    \ temp = \"\";\n    long cons_cnt = 0;\n    for (auto c : s) {\n        if (c\
    \ == ' ') {\n            cons_cnt = 0;\n            for (auto x : temp) {\n  \
    \              if (x != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u') {\n\
    \                    cons_cnt++;\n                }\n            }\n         \
    \   if (cons_cnt == n) {\n                result.push_back(temp);\n          \
    \  }\n            temp = \"\";\n        } else {\n            temp += c;\n   \
    \     }\n    }\n    cons_cnt = 0;\n    for (auto x : temp) {\n        if (x !=\
    \ 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u') {\n            cons_cnt++;\n\
    \        }\n    }\n    if (cons_cnt == n) {\n        result.push_back(temp);\n\
    \    }\n    return result;", "    std::stringstream ss(s);\n    std::vector<std::string>\
    \ res;\n    std::string temp;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    while(ss >> temp) {\n        int count = 0;\n        for(auto ch : temp)\
    \ {\n            if(consonants.find(ch) != std::string::npos) {\n            \
    \    count++;\n            }\n        }\n        if(count == n) {\n          \
    \  res.push_back(temp);\n        }\n    }\n    return res;", "\tstd::vector<std::string>\
    \ result;\n\tstd::string t;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i]\
    \ == ' ') {\n\t\t\tint c = 0;\n\t\t\tfor (int j = 0; j < t.size(); j++) {\n\t\t\
    \t\tif (t[j] != 'a' && t[j] != 'e' && t[j] != 'i' && t[j] != 'o' && t[j] != 'u')\
    \ {\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (c == n) {\n\t\t\t\tresult.push_back(t);\n\
    \t\t\t}\n\t\t\tt = \"\";\n\t\t}\n\t\telse {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\t\
    return result;", "    // TODO\n    std::string str;\n    std::vector<std::string>\
    \ v;\n    bool new_word = true;\n    int count = 0;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] != ' '){\n            if(new_word){\n               \
    \ new_word = false;\n                count = 0;\n            }\n            if(s[i]\
    \ != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'){\n     \
    \           count++;\n            }\n            str += s[i];\n        }else{\n\
    \            if(count == n){\n                v.push_back(str);\n            }\n\
    \            str = \"\";\n            new_word = true;\n        }\n    }\n   \
    \ if(count == n){\n        v.push_back(str);\n    }\n    return v;", "    // If\
    \ the string s is empty then the function should return an empty vector.\n   \
    \ if (s.length() == 0) return {};\n    std::vector<std::string> words;\n    std::string\
    \ temp = \"\";\n    for (auto c : s) {\n        if (c == ' ') {\n            //\
    \ If the last word has n consonants, then add it to the vector.\n            if\
    \ (countConsonants(temp) == n) {\n                words.push_back(temp);\n   \
    \         }\n            temp = \"\";\n        } else {\n            temp += c;\n\
    \        }\n    }\n    // For the last word.\n    if (countConsonants(temp) ==\
    \ n) {\n        words.push_back(temp);\n    }\n    return words;", "    int l\
    \ = s.length();\n    std::vector<std::string> res;\n    int count, i;\n    for(int\
    \ j = 0; j < l; j++) {\n        count = 0;\n        for(i = j; i < l; i++) {\n\
    \            if(s[i] != ' ')\n                break;\n        }\n        for(j\
    \ = i; j < l; j++) {\n            if(s[j] == ' ')\n                break;\n  \
    \          if(s[j] != 'a' && s[j] != 'e' && s[j] != 'i' && s[j] != 'o' && s[j]\
    \ != 'u')\n                count++;\n        }\n        if(count == n) {\n   \
    \         res.push_back(s.substr(i, j - i));\n        }\n    }\n    return res;",
  "    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string\
    \ tmp;\n    while(std::getline(ss, tmp, ' ')) {\n        if(tmp.length() >= n)\
    \ {\n            if(tmp.length() == n) {\n                result.push_back(tmp);\n\
    \            } else {\n                int consonants = 0;\n                std::transform(tmp.begin(),\
    \ tmp.end(), tmp.begin(), ::tolower);\n                for(int i = 0; i < tmp.length();\
    \ i++) {\n                    if(tmp[i] != 'a' && tmp[i] != 'e' && tmp[i] != 'i'\
    \ && tmp[i] != 'o' && tmp[i] != 'u') {\n                        consonants++;\n\
    \                    }\n                }\n                if(consonants == n)\
    \ {\n                    result.push_back(tmp);\n                }\n         \
    \   }\n        }\n    }\n    return result;", "  // TODO:\n  std::vector<std::string>\
    \ list_of_words;\n  std::stringstream ss(s);\n  std::string temp;\n  //int no_of_consonants\
    \ = 0;\n  while(ss >> temp){\n    int no_of_consonants = 0;\n    for(int i = 0;\
    \ i < temp.length(); i++){\n      if(temp[i] == 'a' || temp[i] == 'e' || temp[i]\
    \ == 'i' || temp[i] == 'o' || temp[i] == 'u'){\n        continue;\n      }\n \
    \     else\n        no_of_consonants++;\n    }\n    if(no_of_consonants == n)\n\
    \      list_of_words.push_back(temp);\n  }\n  return list_of_words;", "    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (char c : s) {\n        if (c == ' ')\
    \ {\n            if (word.size() == n) {\n                words.push_back(word);\n\
    \            }\n            word.clear();\n        } else {\n            word\
    \ += c;\n        }\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "\tstd::vector<std::string> words;\n\tstd::istringstream\
    \ iss(s);\n\tstd::string temp;\n\twhile (std::getline(iss, temp, ' ')) {\n\t\t\
    long consonants = 0;\n\t\tfor (auto &c : temp) {\n\t\t\tswitch (c) {\n\t\t\t\t\
    case 'b':\n\t\t\t\tcase 'c':\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'f':\n\t\t\t\tcase\
    \ 'g':\n\t\t\t\tcase 'h':\n\t\t\t\tcase 'j':\n\t\t\t\tcase 'k':\n\t\t\t\tcase\
    \ 'l':\n\t\t\t\tcase 'm':\n\t\t\t\tcase 'n':\n\t\t\t\tcase 'p':\n\t\t\t\tcase\
    \ 'q':\n\t\t\t\tcase 'r':\n\t\t\t\tcase 's':\n\t\t\t\tcase 't':\n\t\t\t\tcase\
    \ 'v':\n\t\t\t\tcase 'w':\n\t\t\t\tcase 'x':\n\t\t\t\tcase 'y':\n\t\t\t\tcase\
    \ 'z':\n\t\t\t\t\tconsonants++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (consonants == n)\n\t\t\twords.push_back(temp);\n\
    \t}\n\treturn words;", "    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    int count;\n    while(ss >> word){\n    \
    \    count = 0;\n        for(char c : word){\n            if(!(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')){\n                count++;\n     \
    \       }\n        }\n        if(count == n){\n            words.push_back(word);\n\
    \        }\n    }\n    return words;", "    std::vector<std::string> result;\n\
    \    std::string word;\n    bool found;\n    std::istringstream iss(s);\n    while\
    \ (iss >> word) {\n        found = true;\n        if (word.length() == n) {\n\
    \            for (auto const &c : word) {\n                if (std::string(\"\
    aeiou\").find(c) != std::string::npos) {\n                    found = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (found) {\n                result.push_back(word);\n            }\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> words;\n    std::string\
    \ word;\n    std::stringstream input(s);\n    std::unordered_set<char> consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'};\n    while (input >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [&](char c) { return consonants.find(tolower(c)) != consonants.end();\
    \ }) == n) {\n            words.push_back(word);\n        }\n    }\n    return\
    \ words;", "    // your code here\n    std::vector<std::string> myVector;\n  \
    \  std::string myString;\n    int count = 0;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] == ' '){\n            if(count == n){\n             \
    \   myVector.push_back(myString);\n            }\n            myString = \"\"\
    ;\n            count = 0;\n        }\n        else{\n            if(s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'){\n            \
    \    count++;\n            }\n            myString += s[i];\n        }\n    }\n\
    \    if(count == n){\n        myVector.push_back(myString);\n    }\n    return\
    \ myVector;", "  std::vector<std::string> words;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (ss >> word) {\n    int consonants = 0;\n    for\
    \ (auto c : word) {\n      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') {\n        consonants++;\n      }\n    }\n    if (consonants == n)\
    \ {\n      words.push_back(word);\n    }\n  }\n  return words;", "    std::vector<std::string>\
    \ solution;\n    int counter = 0;\n    bool word = false;\n    std::string word_s;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] != ' ') {\n   \
    \         word = true;\n            word_s += s[i];\n            if (std::find(vowels.begin(),\
    \ vowels.end(), s[i]) == vowels.end()) {\n                counter++;\n       \
    \     }\n        } else {\n            if (word) {\n                if (counter\
    \ == n) {\n                    solution.push_back(word_s);\n                }\n\
    \                word_s = \"\";\n                counter = 0;\n              \
    \  word = false;\n            }\n        }\n    }\n    if (word) {\n        if\
    \ (counter == n) {\n            solution.push_back(word_s);\n        }\n    }\n\
    \    return solution;", "    std::vector<std::string> words;\n    std::string\
    \ temp;\n    char consonants[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};\n    int consonantsSize\
    \ = sizeof(consonants)/sizeof(consonants[0]);\n    int size = s.size();\n    int\
    \ count = 0;\n    int consCount = 0;\n    for(int i = 0; i < size; i++){\n   \
    \     if(s[i] == ' ' || i == size - 1){\n            if(s[i] != ' ')\n       \
    \         temp.push_back(s[i]);\n            for(int j = 0; j < temp.size(); j++){\n\
    \                for(int k = 0; k < consonantsSize; k++){\n                  \
    \  if(temp[j] == consonants[k])\n                        consCount++;\n      \
    \          }\n            }\n            if(consCount == n)\n                words.push_back(temp);\n\
    \            temp.clear();\n            consCount = 0;\n        }\n        else\n\
    \            temp.push_back(s[i]);\n    }\n    return words;", "  std::vector<std::string>\
    \ words;\n  std::string word;\n  for (int i = 0; i < s.size(); i++) {\n    if\
    \ (s[i] == ' ') {\n      if (word.size() == n) {\n        words.push_back(word);\n\
    \      }\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n\
    \  if (word.size() == n) {\n    words.push_back(word);\n  }\n  return words;",
  "\tstd::vector<std::string> ret;\n\t// implement your solution here\n\treturn ret;",
  "\tstd::vector<std::string> result;\n\tstd::istringstream iss(s);\n\tstd::string\
    \ temp;\n\twhile (iss >> temp) {\n\t\tlong count = 0;\n\t\tfor (auto c : temp)\
    \ {\n\t\t\tif (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tresult.push_back(temp);\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<std::string> words;\n    std::string\
    \ word = \"\";\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (count == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        } else\
    \ {\n            switch (s[i]) {\n                case 'a':\n                case\
    \ 'e':\n                case 'i':\n                case 'o':\n               \
    \ case 'u':\n                case 'A':\n                case 'E':\n          \
    \      case 'I':\n                case 'O':\n                case 'U':\n     \
    \               count = 0;\n                    break;\n                default:\n\
    \                    count++;\n                    break;\n            }\n   \
    \         word += s[i];\n        }\n    }\n    if (count == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::string word = \"\";\n    std::vector<std::string>\
    \ v;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] != ' ') {\n\
    \            word += s[i];\n        } else {\n            long count = 0;\n  \
    \          for (size_t j = 0; j < word.size(); j++) {\n                if (word[j]\
    \ != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u')\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                v.push_back(word);\n            }\n  \
    \          word = \"\";\n        }\n    }\n    long count = 0;\n    for (size_t\
    \ j = 0; j < word.size(); j++) {\n        if (word[j] != 'a' && word[j] != 'e'\
    \ && word[j] != 'i' && word[j] != 'o' && word[j] != 'u') {\n            count++;\n\
    \        }\n    }\n    if (count == n) {\n        v.push_back(word);\n    }\n\
    \    return v;", "    std::vector<std::string> stringVector;\n    std::string\
    \ eachWord;\n    long i = 0;\n    while(i < s.length()){\n        while(i < s.length()\
    \ && s[i] == ' '){\n            i++;\n        }\n        while(i < s.length()\
    \ && s[i] != ' '){\n            eachWord += s[i];\n            i++;\n        }\n\
    \        if(eachWord.length() > 0){\n            stringVector.push_back(eachWord);\n\
    \            eachWord = \"\";\n        }\n    }\n    std::vector<std::string>\
    \ finalStringVector;\n    for(long i = 0; i < stringVector.size(); i++){\n   \
    \     long consonantCount = 0;\n        for(long j = 0; j < stringVector[i].length();\
    \ j++){\n            char ch = stringVector[i][j];\n            if(ch != 'a' &&\
    \ ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'){\n                consonantCount++;\n\
    \            }\n        }\n        if(consonantCount == n){\n            finalStringVector.push_back(stringVector[i]);\n\
    \        }\n    }\n    return finalStringVector;", "    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ' ')) {\n        if (consonants_number(word) == n)\n            words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> list;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while(ss >> word){\n        long cnt = 0;\n\
    \        for(int i = 0; i < word.size(); i++){\n            if(!std::isalpha(word[i]))\n\
    \                continue;\n            if(std::tolower(word[i]) != 'a' && std::tolower(word[i])\
    \ != 'e' && std::tolower(word[i]) != 'i' && std::tolower(word[i]) != 'o' && std::tolower(word[i])\
    \ != 'u')\n                cnt++;\n        }\n        if(cnt == n)\n         \
    \   list.push_back(word);\n    }\n    return list;", "    std::vector<std::string>\
    \ v;\n    std::string str=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='\
    \ '){\n            if(str.length()==n){\n                v.push_back(str);\n \
    \           }\n            str=\"\";\n        }\n        else{\n            str=str+s[i];\n\
    \        }\n    }\n    if(str.length()==n){\n        v.push_back(str);\n    }\n\
    \    return v;", "    std::vector<std::string> output;\n    std::string temp =\
    \ \"\";\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n      \
    \  if(s[i] == ' '){\n            if(count == n){\n                output.push_back(temp);\n\
    \            }\n            temp = \"\";\n            count = 0;\n        }else{\n\
    \            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i]\
    \ != 'u'){\n                count++;\n            }\n            temp += s[i];\n\
    \        }\n    }\n    if(count == n){\n        output.push_back(temp);\n    }\n\
    \    return output;", "\tstd::vector<std::string> vec;\n\tif (s.size() == 0){\n\
    \t\treturn vec;\n\t}\n\tstd::string tmp = \"\";\n\tstd::stringstream ss(s);\n\t\
    while (std::getline(ss, tmp, ' ')){\n\t\tint cnt = 0;\n\t\tfor (int i = 0; i <\
    \ tmp.size(); i++){\n\t\t\tif (tmp[i] != 'a' && tmp[i] != 'e' && tmp[i] != 'i'\
    \ && tmp[i] != 'o' && tmp[i] != 'u'){\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tif\
    \ (cnt == n){\n\t\t\tvec.push_back(tmp);\n\t\t}\n\t}\n\treturn vec;", "   long\
    \ i=0;\n   char a[]={'a','e','i','o','u','y'};\n   std::string res;\n   std::vector<std::string>\
    \ result;\n   for(i=0;i<s.length();i++)\n   {\n       if(s[i]==' ')\n       {\n\
    \           res=\"\";\n       }\n       else\n       {\n           res=res+s[i];\n\
    \       }\n       if(s[i]==' '||i==s.length()-1)\n       {\n           long long\
    \ count=0;\n           for(long j=0;j<res.length();j++)\n           {\n      \
    \         for(long k=0;k<6;k++)\n               {\n                   if(res[j]==a[k])\n\
    \                   {\n                       count++;\n                   }\n\
    \               }\n           }\n           if(count==n)\n           {\n     \
    \          result.push_back(res);\n           }\n       }\n   }\n   return result;",
  "    std::vector<std::string> words;\n    std::stringstream ss(s);\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        long numCon = 0;\n        for(auto c\
    \ : temp) {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') continue;\n            numCon++;\n        }\n        if(numCon == n)\
    \ words.push_back(temp);\n    }\n    return words;", "  // Your code here\n  std::vector<std::string>\
    \ output;\n  std::stringstream ss(s);\n  std::string word;\n  while(ss >> word){\n\
    \    int count = 0;\n    for(int i = 0; i < word.length(); i++){\n      if(!(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ || word[i] == 'y')){\n        count++;\n      }\n    }\n    if(count == n){\n\
    \      output.push_back(word);\n    }\n  }\n  return output;", "    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        if(std::count_if(token.begin(), token.end(), ::isalpha)\
    \ - std::count_if(token.begin(), token.end(), ::isvowel) == n) {\n           \
    \ result.push_back(token);\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ res;\n  int a[27] = { 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 0, 1 };\n  int l = s.length();\n  std::string word = \"\
    \";\n  for (int i = 0; i < l; i++) {\n    if (s[i] == ' ') {\n      if (n == 0)\n\
    \        res.push_back(word);\n      word = \"\";\n      n = 0;\n    }\n    else\
    \ {\n      n += a[s[i] - 'a'];\n      word += s[i];\n    }\n  }\n  if (n == 0)\n\
    \    res.push_back(word);\n  return res;", "\tstd::vector<std::string> v;\n\t\
    std::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\tif\
    \ (count_consonants(word) == n)\n\t\t\tv.push_back(word);\n\t}\n\treturn v;",
  "\t// Remove spaces from the input string\n\ts.erase(std::remove(s.begin(), s.end(),\
    \ ' '), s.end());\n\tstd::vector<std::string> result;\n\t// Create a set for consonants\n\
    \tstd::set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\t// Take one word from\
    \ the input string\n\tfor (size_t i = 0; i < s.size(); ++i) {\n\t\t// Calculate\
    \ the word length\n\t\tint word_length = 1;\n\t\tint count = 0;\n\t\tfor (size_t\
    \ j = i + 1; j < s.size(); ++j) {\n\t\t\tif (vowels.find(s[j]) == vowels.end())\
    \ {\n\t\t\t\t++count;\n\t\t\t}\n\t\t\t++word_length;\n\t\t\tif (s[j] == ' ' ||\
    \ j == s.size() - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If the word has\
    \ required number of consonants, add it to the result\n\t\tif (count == n) {\n\
    \t\t\tresult.push_back(s.substr(i, word_length));\n\t\t}\n\t\ti += word_length;\n\
    \t}\n\treturn result;", "\tstd::vector<std::string> v;\n\tstd::stringstream ss(s);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tlong count = 0;\n\t\tfor (char\
    \ c : word) {\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcount++;\n\t\t\t}\n\
    \t\t}\n\t\tif (count == n) {\n\t\t\tv.push_back(word);\n\t\t}\n\t}\n\treturn v;",
  "    std::vector<std::string> words;\n    std::string word;\n    int numberOfVowels\
    \ = 0;\n    int numberOfConso = 0;\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(s[i] == ' '){\n            if(numberOfConso == n){\n             \
    \   words.push_back(word);\n            }\n            word = \"\";\n        \
    \    numberOfVowels = 0;\n            numberOfConso = 0;\n        }\n        else{\n\
    \            word += s[i];\n            if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u'){\n                numberOfVowels++;\n\
    \            }\n            else{\n                numberOfConso++;\n        \
    \    }\n        }\n    }\n    if(numberOfConso == n){\n        words.push_back(word);\n\
    \    }\n    return words;", "  std::vector<std::string> results;\n  std::stringstream\
    \ str(s);\n  std::string word;\n  long number_of_consonants;\n  while (str >>\
    \ word) {\n    number_of_consonants = 0;\n    for (int i = 0; i < word.length();\
    \ i++) {\n      if (isalpha(word[i])) {\n        if (word[i] != 'a' && word[i]\
    \ != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n          number_of_consonants++;\n\
    \        }\n      }\n    }\n    if (number_of_consonants == n) {\n      results.push_back(word);\n\
    \    }\n  }\n  return results;", "    std::vector<std::string> v;\n    std::string\
    \ word = \"\";\n    for(char c : s) {\n        if(c == ' ') {\n            if(count_consonants(word)\
    \ == n) {\n                v.push_back(word);\n            }\n            word\
    \ = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if(word\
    \ != \"\") {\n        if(count_consonants(word) == n) {\n            v.push_back(word);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> result;\n   \
    \ if (s.size() > 0) {\n        std::stringstream ss(s);\n        std::string word;\n\
    \        while (ss >> word) {\n            long count = 0;\n            for (char\
    \ c : word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n                    count++;\n                }\n          \
    \  }\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ answer;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] == ' '){\n            for(int j = 0; j < temp.length();\
    \ j++){\n                if(temp[j] == 'a' || temp[j] == 'e' || temp[j] == 'i'\
    \ ||\n                temp[j] == 'o' || temp[j] == 'u' || temp[j] == 'A' ||\n\
    \                temp[j] == 'E' || temp[j] == 'I' || temp[j] == 'O' ||\n     \
    \           temp[j] == 'U'){\n                    count++;\n                }\n\
    \            }\n            if(temp.length() - count == n){\n                answer.push_back(temp);\n\
    \            }\n            temp = \"\";\n            count = 0;\n        }\n\
    \        else{\n            temp += s[i];\n        }\n    }\n    for(int j = 0;\
    \ j < temp.length(); j++){\n        if(temp[j] == 'a' || temp[j] == 'e' || temp[j]\
    \ == 'i' ||\n        temp[j] == 'o' || temp[j] == 'u' || temp[j] == 'A' ||\n \
    \       temp[j] == 'E' || temp[j] == 'I' || temp[j] == 'O' ||\n        temp[j]\
    \ == 'U'){\n            count++;\n        }\n    }\n    if(temp.length() - count\
    \ == n){\n        answer.push_back(temp);\n    }\n    return answer;", "  std::vector<std::string>\
    \ words;\n  std::string word;\n  std::istringstream str(s);\n  while (str >> word)\
    \ {\n    long count = 0;\n    for (char &c : word) {\n      if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') continue;\n      count++;\n    }\n\
    \    if (count == n) words.push_back(word);\n  }\n  return words;", "\tstd::vector<std::string>\
    \ result;\n\tstd::string word;\n\tint consonants;\n\tfor (long i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] != ' ') {\n\t\t\tword += s[i];\n\t\t}\n\t\telse {\n\t\t\
    \tconsonants = 0;\n\t\t\tfor (long j = 0; j < word.size(); j++) {\n\t\t\t\tif\
    \ (word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j]\
    \ != 'u') {\n\t\t\t\t\tconsonants++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (consonants\
    \ == n) {\n\t\t\t\tresult.push_back(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\
    }\n\t}\n\tconsonants = 0;\n\tfor (long j = 0; j < word.size(); j++) {\n\t\tif\
    \ (word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j]\
    \ != 'u') {\n\t\t\tconsonants++;\n\t\t}\n\t}\n\tif (consonants == n) {\n\t\tresult.push_back(word);\n\
    \t}\n\treturn result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    std::istringstream ss(s);\n    while(ss>>temp){\n        int consonants\
    \ = 0;\n        for(auto c:temp){\n            if(c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u'){\n                consonants++;\n            }\n\
    \        }\n        if(consonants == n){\n            result.push_back(temp);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> v;\n   \
    \ std::string tmp;\n    int consonants = 0;\n    std::stringstream ss(s);\n  \
    \  while(ss >> tmp){\n        consonants = 0;\n        for(char c : tmp){\n  \
    \          if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n   \
    \             consonants++;\n            }\n        }\n        if(consonants ==\
    \ n){\n            v.push_back(tmp);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ words = {};\n    std::vector<std::string> ret = {};\n    std::stringstream ss(s);\n\
    \    std::string tmp;\n    while (std::getline(ss, tmp, ' ')) {\n        words.push_back(tmp);\n\
    \    }\n    for (std::string word : words) {\n        long count = 0;\n      \
    \  for (char c : word) {\n            if (std::string(\"AEIOUaeiou\").find(c)\
    \ == std::string::npos) {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            ret.push_back(word);\n        }\n    }\n\
    \    return ret;", "    std::vector<std::string> selected;\n    // your code here\n\
    \    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word){\n\
    \        int vow = 0;\n        for(auto c : word){\n            if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                vow++;\n    \
    \    }\n        if(vow == n)\n            selected.push_back(word);\n    }\n \
    \   return selected;", "    // TODO: Implement select_words\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    long consonants = 0;\n    long index\
    \ = 0;\n    while(index<s.length()){\n        if(s[index]!=' '){\n           \
    \ word += s[index];\n            switch(s[index]){\n                case 'B':case\
    \ 'C':case 'D':case 'F':case 'G':case 'H':case 'J':case 'K':case 'L':case 'M':case\
    \ 'N':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'V':case 'W':case 'X':case\
    \ 'Y':case 'Z':\n                case 'b':case 'c':case 'd':case 'f':case 'g':case\
    \ 'h':case 'j':case 'k':case 'l':case 'm':case 'n':case 'p':case 'q':case 'r':case\
    \ 's':case 't':case 'v':case 'w':case 'x':case 'y':case 'z':\n               \
    \     consonants++;\n                    break;\n                default:\n  \
    \                  break;\n            }\n        }\n        else{\n         \
    \   if(consonants == n){\n                words.push_back(word);\n           \
    \ }\n            word = \"\";\n            consonants = 0;\n        }\n      \
    \  index++;\n    }\n    if(consonants == n){\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == n) {\n            words.push_back(word);\n        }\n    }\n    return words;",
  "    std::vector<std::string> res;\n    for (std::string::iterator it=s.begin();\
    \ it!=s.end(); ++it) {\n        *it = toupper(*it);\n    }\n    std::stringstream\
    \ ss(s);\n    std::string temp;\n    while (getline(ss, temp, ' ')) {\n      \
    \  long count = 0;\n        for (std::string::iterator it=temp.begin(); it!=temp.end();\
    \ ++it) {\n            if (*it != 'A' && *it != 'E' && *it != 'I' && *it != 'O'\
    \ && *it != 'U') {\n                count++;\n            }\n        }\n     \
    \   if (count == n) {\n            res.push_back(temp);\n        }\n    }\n  \
    \  return res;", "\tstd::vector<std::string> words;\n\tstd::string word = \"\"\
    ;\n\tint count = 0;\n\tfor (char ch : s) {\n\t\tif (ch == ' ') {\n\t\t\tif (count\
    \ == n) {\n\t\t\t\twords.push_back(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\t\
    count = 0;\n\t\t} else {\n\t\t\tif (ch != 'a' && ch != 'e' && ch != 'i' && ch\
    \ != 'o' && ch != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tword += ch;\n\t\t}\n\
    \t}\n\tif (count == n) {\n\t\twords.push_back(word);\n\t}\n\treturn words;", " \
    \ std::vector<std::string> arr;\n  std::stringstream ss(s);\n  std::string item;\n\
    \  while (getline(ss, item, ' ')) {\n    int count = 0;\n    for (int i = 0; i\
    \ < item.length(); i++) {\n      if (item[i] != 'a' && item[i] != 'e' && item[i]\
    \ != 'i' &&\n        item[i] != 'o' && item[i] != 'u' && item[i] != 'y') {\n \
    \       count++;\n      }\n    }\n    if (count == n) {\n      arr.push_back(item);\n\
    \    }\n  }\n  return arr;", "  std::vector<std::string> result;\n  // long i\
    \ = 0;\n  // long j = 0;\n  // long counter = 0;\n  // while (i < s.length())\
    \ {\n  //   while (i < s.length() && s[i] != ' ') {\n  //     if (s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n  //       counter++;\n\
    \  //     }\n  //     i++;\n  //   }\n  //   if (counter == n) {\n  //     result.push_back(s.substr(j,\
    \ i - j));\n  //   }\n  //   counter = 0;\n  //   j = i + 1;\n  //   i++;\n  //\
    \ }\n  // return result;\n  std::istringstream ss(s);\n  std::string word;\n \
    \ long counter = 0;\n  while (ss >> word) {\n    counter = 0;\n    for (long i\
    \ = 0; i < word.length(); i++) {\n      if (word[i] != 'a' && word[i] != 'e' &&\
    \ word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n        counter++;\n\
    \      }\n    }\n    if (counter == n) {\n      result.push_back(word);\n    }\n\
    \  }\n  return result;", "    std::vector<std::string> words;\n    std::string\
    \ word = \"\";\n    for (auto& c : s) {\n        if (isalpha(c)) {\n         \
    \   word += c;\n        } else {\n            if (word.size() > 0) {\n       \
    \         words.push_back(word);\n                word = \"\";\n            }\n\
    \        }\n    }\n    if (word.size() > 0) {\n        words.push_back(word);\n\
    \    }\n    std::vector<std::string> res;\n    for (auto& word : words) {\n  \
    \      long count = 0;\n        for (auto& c : word) {\n            if (isupper(c))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            res.push_back(word);\n        }\n    }\n    return res;",
  "    std::vector<std::string> words;\n    std::string str=\"\";\n    int cc=0;\n\
    \    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            str+=s[i];\n\
    \            if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n    \
    \            cc++;\n            }\n        }\n        else{\n            if(cc==n){\n\
    \                words.push_back(str);\n            }\n            str=\"\";\n\
    \            cc=0;\n        }\n    }\n    if(cc==n){\n        words.push_back(str);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    std::string\
    \ temp;\n    long nConsonants;\n    long space_index;\n    long comma_index;\n\
    \    long word_length;\n    // BUG: There is no null terminator in the input string\
    \ s\n    s.push_back('\\0');\n    for (long index = 0; index < s.length(); index++)\
    \ {\n        if (s[index] == ' ' || s[index] == '\\0') {\n            nConsonants\
    \ = 0;\n            for (char ch : temp) {\n                if (ch != 'a' && ch\
    \ != 'e' && ch != 'i' && ch != 'o' && ch != 'u') {\n                    nConsonants++;\n\
    \                }\n            }\n            if (nConsonants == n) {\n     \
    \           words.push_back(temp);\n            }\n            temp.clear();\n\
    \        } else {\n            temp.push_back(s[index]);\n        }\n    }\n \
    \   return words;", "    // your code here\n    std::vector<std::string> word_collection;\n\
    \    std::string word;\n    std::istringstream iss(s);\n    while(iss >> word){\n\
    \        long vowel_count = 0;\n        for(char c : word){\n            if(!isalpha(c)){\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u'){\n                vowel_count++;\n    \
    \        }\n        }\n        if(word.size() - vowel_count == n){\n         \
    \   word_collection.push_back(word);\n        }\n    }\n    return word_collection;",
  "  std::istringstream ss(s);\n  std::vector<std::string> result;\n  while (ss) {\n\
    \    std::string word;\n    ss >> word;\n    auto vowels = std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n      return std::string(\"aeiou\").find(c) != std::string::npos;\n\
    \    });\n    if (word.size() > 0 && word.size() - vowels == n)\n      result.push_back(word);\n\
    \  }\n  return result;", "  std::vector<std::string> words;\n  std::string word\
    \ = \"\";\n  long count = 0;\n  for (size_t i = 0; i < s.length(); i++) {\n  \
    \  if (s[i] == ' ') {\n      if (count == n) words.push_back(word);\n      word\
    \ = \"\";\n      count = 0;\n    } else {\n      if (!isalpha(s[i])) continue;\n\
    \      if (isupper(s[i])) s[i] = tolower(s[i]);\n      if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        count = 0;\n\
    \      } else {\n        count++;\n      }\n      word += s[i];\n    }\n  }\n\
    \  if (count == n) words.push_back(word);\n  return words;", "    std::stringstream\
    \ in(s);\n    std::vector<std::string> v;\n    std::string temp;\n    std::unordered_set<char>\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n    while(std::getline(in, temp, ' '))\
    \ {\n        int count = 0;\n        for(int i = 0; i < temp.size(); i++) {\n\
    \            if(vowels.find(tolower(temp[i])) == vowels.end())\n             \
    \   count++;\n        }\n        if(count == n)\n            v.push_back(temp);\n\
    \    }\n    return v;", "    std::vector<std::string> ret;\n    std::vector<std::string>\
    \ tokens;\n    std::stringstream check1(s);\n    std::string intermediate;\n \
    \   while(getline(check1, intermediate, ' ')) {\n        tokens.push_back(intermediate);\n\
    \    }\n    for(auto iter = tokens.begin(); iter != tokens.end(); iter++) {\n\
    \        std::string token = *iter;\n        std::transform(token.begin(), token.end(),\
    \ token.begin(), ::tolower);\n        int consonants = 0;\n        for(auto it\
    \ = token.begin(); it != token.end(); it++) {\n            char c = *it;\n   \
    \         if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \             continue;\n            }\n            consonants++;\n        }\n\
    \        if(consonants == n) {\n            ret.push_back(*iter);\n        }\n\
    \    }\n    return ret;", "    int cnt = 0;\n    std::vector<std::string> result;\n\
    \    std::string temp;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == ' ') {\n            if(cnt == n) {\n                result.push_back(temp);\n\
    \            }\n            cnt = 0;\n            temp = \"\";\n        } else\
    \ {\n            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' &&\
    \ s[i] != 'u') {\n                cnt++;\n            }\n            temp += s[i];\n\
    \        }\n    }\n    if(cnt == n) {\n        result.push_back(temp);\n    }\n\
    \    return result;", "  if(s.size()==0)return std::vector<std::string>();\n \
    \ std::stringstream ss(s);\n  std::string item;\n  std::vector<std::string> words;\n\
    \  int counter=0;\n  while(getline(ss,item,' ')){\n    words.push_back(item);\n\
    \  }\n  std::vector<std::string> result;\n  for(std::string i:words){\n    counter=0;\n\
    \    for(char j:i){\n      if(j!='a'&&j!='e'&&j!='i'&&j!='o'&&j!='u'){\n     \
    \   counter++;\n      }\n    }\n    if(counter==n){\n      result.push_back(i);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string x;\n    while(ss >> x) {\n        int count = 0;\n \
    \       for(char c : x) {\n            if(c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n                count++;\n            }\n        }\n\
    \        if(count == n) {\n            words.push_back(x);\n        }\n    }\n\
    \    return words;", "    std::vector<std::string> words;\n    std::string word;\n\
    \    int num_consonants = 0;\n    // splitting the string by whitespace and looping\
    \ through it\n    std::istringstream iss(s);\n    while (iss >> word) {\n    \
    \    // converting word to lowercase\n        std::transform(word.begin(), word.end(),\
    \ word.begin(), ::tolower);\n        // looping through each char of the word\n\
    \        for (int i = 0; i < word.length(); i++) {\n            // checking if\
    \ the char is a consonant\n            if (word[i] != 'a' && word[i] != 'e' &&\
    \ word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n                num_consonants++;\n\
    \            }\n        }\n        // if the number of consonants is exactly n,\
    \ we push the word to the result\n        if (num_consonants == n) {\n       \
    \     words.push_back(word);\n        }\n        num_consonants = 0;\n    }\n\
    \    return words;", "    std::stringstream ss(s);\n    std::vector<std::string>\
    \ words;\n    std::string tmp;\n    while (ss >> tmp) {\n        int count = 0;\n\
    \        for (char c : tmp) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') count++;\n        }\n        if (count == n) words.push_back(tmp);\n\
    \    }\n    return words;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    int count = 0;\n    std::string word = \"\";\n    for(int i = 0; i <\
    \ s.length(); i++){\n        if(s[i] == ' '){\n            if(count == n){\n \
    \               v.push_back(word);\n            }\n            count = 0;\n  \
    \          word = \"\";\n        }\n        else{\n            if(s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'){\n            \
    \    count++;\n            }\n            word += s[i];\n        }\n    }\n  \
    \  if(count == n){\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    int cnt = 0;\n    std::string word =\
    \ \"\";\n    for(auto ch : s){\n        if(ch != ' '){\n            word += ch;\n\
    \            if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'){\n\
    \                cnt++;\n            }\n        }else{\n            if(cnt ==\
    \ n){\n                res.push_back(word);\n            }\n            cnt =\
    \ 0;\n            word = \"\";\n        }\n    }\n    if(cnt == n){\n        res.push_back(word);\n\
    \    }\n    return res;", "  std::vector<std::string> v;\n  std::string word =\
    \ \"\";\n  int w = 0;\n  int k = 0;\n  for (int i = 0; i < s.length(); i++) {\n\
    \    if (isalpha(s[i])) {\n      if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') {\n        w++;\n      }\n      word += s[i];\n\
    \    } else {\n      k = s.length() - 1;\n      if (w == n) {\n        v.push_back(word);\n\
    \      }\n      word = \"\";\n      w = 0;\n    }\n  }\n  if (w == n) {\n    v.push_back(word);\n\
    \  }\n  return v;", "    std::vector<std::string> b;\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    for(std::string st; ss >> st;) {\n\
    \        words.push_back(st);\n    }\n    for(int i = 0; i < words.size(); i++)\
    \ {\n        long count = 0;\n        for(int j = 0; j < words[i].size(); j++)\
    \ {\n            if(!std::isalpha(words[i][j])) {\n                count++;\n\
    \            }\n        }\n        if(count == n) {\n            b.push_back(words[i]);\n\
    \        }\n    }\n    return b;", "\tstd::vector<std::string> result;\n\tstd::vector<std::string>\
    \ words;\n\tstd::string::size_type a = 0;\n\tstd::string::size_type b = 0;\n\t\
    while ((b = s.find(\" \", a)) != std::string::npos) {\n\t\twords.push_back(s.substr(a,\
    \ b - a));\n\t\ta = b + 1;\n\t}\n\twords.push_back(s.substr(a));\n\tfor (auto&\
    \ word : words) {\n\t\tlong consonants = 0;\n\t\tfor (auto& ch : word) {\n\t\t\
    \tswitch (ch) {\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\tcase 'd':\n\t\t\tcase\
    \ 'f':\n\t\t\tcase 'g':\n\t\t\tcase 'h':\n\t\t\tcase 'j':\n\t\t\tcase 'k':\n\t\
    \t\tcase 'l':\n\t\t\tcase 'm':\n\t\t\tcase 'n':\n\t\t\tcase 'p':\n\t\t\tcase 'q':\n\
    \t\t\tcase 'r':\n\t\t\tcase 's':\n\t\t\tcase 't':\n\t\t\tcase 'v':\n\t\t\tcase\
    \ 'w':\n\t\t\tcase 'x':\n\t\t\tcase 'y':\n\t\t\tcase 'z':\n\t\t\t\tconsonants++;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (consonants == n) {\n\t\t\tresult.push_back(word);\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<std::string> x;\n    std::vector<std::string>\
    \ y;\n    std::istringstream iss(s);\n    std::string word;\n    while(iss >>\
    \ word)\n    {\n        if(word.size()==n)\n        {\n            x.push_back(word);\n\
    \        }\n    }\n    for(int i=0;i<x.size();i++)\n    {\n        std::string\
    \ temp=x[i];\n        int flag=0;\n        for(int j=0;j<temp.size();j++)\n  \
    \      {\n            if(temp[j]=='a' || temp[j]=='e' || temp[j]=='i' || temp[j]=='o'\
    \ || temp[j]=='u')\n            {\n                flag=1;\n                break;\n\
    \            }\n        }\n        if(flag==0)\n        {\n            y.push_back(temp);\n\
    \        }\n    }\n    return y;", "    std::vector<std::string> result;\n   \
    \ std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n\
    \        long count = 0;\n        for (char c : word) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') count++;\n        }\n \
    \       if (word.size() - count == n) result.push_back(word);\n    }\n    return\
    \ result;", "    if(s.empty()) return {};\n    vector<string> res;\n    vector<string>\
    \ tmp;\n    stringstream ss(s);\n    string word;\n    while(ss >> word){\n  \
    \      if(consonants_count(word) == n) res.push_back(word);\n    }\n    return\
    \ res;", "    if(s.empty())\n        return {};\n    std::vector<std::string>\
    \ temp;\n    std::stringstream ss(s);\n    std::string token;\n    while(getline(ss,\
    \ token, ' ')) {\n        std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n\
    \        int count = 0;\n        for(char letter : token) {\n            for(char\
    \ cons : consonants) {\n                if(letter == cons)\n                 \
    \   count++;\n            }\n        }\n        if(count == n)\n            temp.push_back(token);\n\
    \    }\n    return temp;", "    std::vector<std::string> result;\n    if (s.empty())\
    \ return result;\n    std::stringstream ss(s);\n    std::string temp;\n    while\
    \ (std::getline(ss, temp, ' ')) {\n        long count = 0;\n        for (long\
    \ i = 0; i < temp.size(); i++) {\n            if (temp[i] != 'a' && temp[i] !=\
    \ 'e' && temp[i] != 'i' && temp[i] != 'o' && temp[i] != 'u') count++;\n      \
    \  }\n        if (count == n) result.push_back(temp);\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string word;\n    long num;\n  \
    \  for (auto c : s) {\n        if (c == ' ') {\n            if (num == n) {\n\
    \                result.push_back(word);\n            }\n            word = \"\
    \";\n            num = 0;\n        } else {\n            word += c;\n        \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n       \
    \         num++;\n            }\n        }\n    }\n    if (num == n) {\n     \
    \   result.push_back(word);\n    }\n    return result;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            if(word.length() == n) {\n           \
    \     v.push_back(word);\n            }\n            word = \"\";\n        } else\
    \ {\n            word += s[i];\n        }\n    }\n    if(word.length() == n) {\n\
    \        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word)\
    \ {\n        int count = 0;\n        for(auto i : word) {\n            if(isalpha(i))\
    \ {\n                count++;\n            }\n        }\n        if(count == n)\
    \ {\n            v.push_back(word);\n        }\n    }\n    return v;", "  std::vector<std::string>\
    \ answer;\n  std::istringstream ss(s);\n  std::string word;\n  while (ss >> word)\
    \ {\n    // Convert to lowercase.\n    std::transform(word.begin(), word.end(),\
    \ word.begin(), ::tolower);\n    // Count the number of vowels in the word.\n\
    \    int n_consonants = 0;\n    for (int i = 0; i < word.size(); i++) {\n    \
    \  switch (word[i]) {\n        case 'a':\n        case 'e':\n        case 'i':\n\
    \        case 'o':\n        case 'u':\n          break;\n        default:\n  \
    \        n_consonants++;\n      }\n    }\n    if (n_consonants == n) {\n     \
    \ answer.push_back(word);\n    }\n  }\n  return answer;", "\tstd::vector<std::string>\
    \ v;\n\tstd::istringstream iss(s);\n\tstd::vector<std::string> words{std::istream_iterator<std::string>{iss},\n\
    \t                                 std::istream_iterator<std::string>{}};\n\t\
    std::string temp;\n\tint consonants;\n\tfor(int i = 0; i < words.size(); i++){\n\
    \t\ttemp = words[i];\n\t\tconsonants = 0;\n\t\tfor(int j = 0; j < temp.size();\
    \ j++){\n\t\t\tif(temp[j] == 'a' || temp[j] == 'e' || temp[j] == 'i' || temp[j]\
    \ == 'o' || temp[j] == 'u'){\n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsonants++;\n\t\
    \t\t}\n\t\t}\n\t\tif(consonants == n){\n\t\t\tv.push_back(temp);\n\t\t}\n\t}\n\
    \treturn v;", "    std::vector<std::string> result;\n    char vowels[] = {'a',\
    \ 'e', 'i', 'o', 'u', 'y'};\n    bool isVowel = false;\n    int consonants = 0;\n\
    \    std::string word = \"\";\n    for (long i = 0; i < s.length(); i++) {\n \
    \       for (long j = 0; j < sizeof(vowels); j++) {\n            if (s[i] == vowels[j])\
    \ {\n                isVowel = true;\n                break;\n            }\n\
    \        }\n        if (isVowel) {\n            if (consonants == n) {\n     \
    \           result.push_back(word);\n            }\n            consonants = 0;\n\
    \            word = \"\";\n            isVowel = false;\n        } else {\n  \
    \          if (s[i] != ' ') {\n                consonants++;\n               \
    \ word += s[i];\n            } else {\n                if (consonants == n) {\n\
    \                    result.push_back(word);\n                }\n            \
    \    consonants = 0;\n                word = \"\";\n            }\n        }\n\
    \    }\n    if (consonants == n) {\n        result.push_back(word);\n    }\n \
    \   return result;", "    assert(n >= 0);\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : s) {\n        if (c == ' ') {\n    \
    \        if (word.size() == n) {\n                words.push_back(word);\n   \
    \         }\n            word.clear();\n        } else {\n            word +=\
    \ c;\n        }\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> result;\n    std::string\
    \ word;\n    std::stringstream iss(s);\n    bool flag = false;\n    char vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'};\n    while (iss >> word) {\n        long count\
    \ = 0;\n        for (long i = 0; i < word.length(); i++) {\n            flag =\
    \ false;\n            for (long j = 0; j < 6; j++) {\n                if (tolower(word[i])\
    \ == vowels[j]) {\n                    flag = true;\n                    break;\n\
    \                }\n            }\n            if (!flag) {\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> res;\n \
    \   std::string word;\n    int consonants = 0;\n    for (char& c : s) {\n    \
    \    if (c == ' ') {\n            if (consonants == n) res.push_back(word);\n\
    \            word = \"\";\n            consonants = 0;\n        } else {\n   \
    \         if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') consonants++;\n\
    \            word += c;\n        }\n    }\n    if (consonants == n) res.push_back(word);\n\
    \    return res;", "    std::vector<std::string> r;\n    std::string tmp;\n  \
    \  int l = s.length();\n    for(int i = 0; i < l; i++) {\n        if(s[i] == '\
    \ ') {\n            if(std::count_if(tmp.begin(), tmp.end(), [](char x) {return\
    \ x != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u';}) == n) {\n      \
    \          r.push_back(tmp);\n            }\n            tmp = \"\";\n       \
    \ } else {\n            tmp += s[i];\n        }\n    }\n    if(tmp != \"\") {\n\
    \        if(std::count_if(tmp.begin(), tmp.end(), [](char x) {return x != 'a'\
    \ && x != 'e' && x != 'i' && x != 'o' && x != 'u';}) == n) {\n            r.push_back(tmp);\n\
    \        }\n    }\n    return r;", "    std::vector<std::string> result;\n   \
    \ // iterate through string and read in a word\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        // check if the word\
    \ contains the correct number of consonants and push_back\n        // if it does\n\
    \        if (countConsonants(word) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    long i = 0;\n    while (i < s.size()) {\n        long j = i;\n        while\
    \ (j < s.size() && s[j] != ' ') {\n            j++;\n        }\n        std::string\
    \ word = s.substr(i, j - i);\n        long count = 0;\n        for (char c : word)\
    \ {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            result.push_back(word);\n        }\n        i = j + 1;\n \
    \   }\n    return result;", "    std::vector<std::string> v;\n    std::istringstream\
    \ ss(s);\n    std::string word;\n    while(ss >> word) {\n        if(std::count_if(word.begin(),\
    \ word.end(), [](char c) {return !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');}) == n)\n            v.push_back(word);\n    }\n    return v;",
  "    std::vector<std::string> words;\n    int len = s.length();\n    int word_len\
    \ = 0;\n    int consonants = 0;\n    std::string word = \"\";\n    for(int i =\
    \ 0; i < len; i++) {\n        char c = s[i];\n        if (c == ' ') {\n      \
    \      if (consonants == n) {\n                words.push_back(word);\n      \
    \      }\n            word = \"\";\n            word_len = 0;\n            consonants\
    \ = 0;\n        } else {\n            if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n                consonants++;\n            }\n    \
    \        word_len++;\n            word += c;\n        }\n    }\n    if (consonants\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;", "    std::vector<std::string>\
    \ vs;\n    std::string ss;\n    long num{0};\n    int length = s.length();\n \
    \   for(int i = 0; i < length; i++){\n        if(s[i] != ' '){\n            ss.push_back(s[i]);\n\
    \            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i]\
    \ != 'u'){\n                num++;\n            }\n        }else{\n          \
    \  if(num == n){\n                vs.push_back(ss);\n            }\n         \
    \   ss.clear();\n            num = 0;\n        }\n    }\n    if(num == n){\n \
    \       vs.push_back(ss);\n    }\n    return vs;", "\tstd::vector<std::string>\
    \ words;\n\tint letterIndex = 0;\n\tint wordIndex = 0;\n\twhile (letterIndex <\
    \ s.length()) {\n\t\t// look for a word\n\t\twhile (letterIndex < s.length() &&\
    \ s[letterIndex] == ' ') {\n\t\t\tletterIndex++;\n\t\t}\n\t\tint start = letterIndex;\n\
    \t\twhile (letterIndex < s.length() && s[letterIndex] != ' ') {\n\t\t\tletterIndex++;\n\
    \t\t}\n\t\tint end = letterIndex;\n\t\t// found a word\n\t\tif (end - start !=\
    \ 0) {\n\t\t\t// count consonants\n\t\t\tint numConsonants = 0;\n\t\t\tfor (int\
    \ i = start; i < end; i++) {\n\t\t\t\tif (s[i] != 'a' && s[i] != 'e' && s[i] !=\
    \ 'i' && s[i] != 'o' && s[i] != 'u') {\n\t\t\t\t\tnumConsonants++;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t\tif (numConsonants == n) {\n\t\t\t\twords.push_back(s.substr(start,\
    \ end - start));\n\t\t\t}\n\t\t}\n\t}\n\treturn words;", "    std::vector<std::string>v;\n\
    \    std::stringstream ss(s);\n    std::string str;\n    while(ss>>str){\n   \
    \     std::string s=\"aeiou\";\n        long c=0;\n        for(auto i:str){\n\
    \            if(s.find(i)==std::string::npos)c++;\n        }\n        if(c==n)v.push_back(str);\n\
    \    }\n    return v;", "\tstd::stringstream test(s);\n\tstd::string word;\n\t\
    std::vector<std::string> output;\n\twhile (test >> word) {\n\t\tif (count(word.begin(),\
    \ word.end(), 'a') + count(word.begin(), word.end(), 'e') + count(word.begin(),\
    \ word.end(), 'i') + count(word.begin(), word.end(), 'o') + count(word.begin(),\
    \ word.end(), 'u') == n) {\n\t\t\toutput.push_back(word);\n\t\t}\n\t}\n\treturn\
    \ output;", "    // your code here\n    std::istringstream iss(s);\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::vector<std::string> results;\n    while(iss\
    \ >> word) {\n        words.push_back(word);\n    }\n    for(auto w : words) {\n\
    \        int c = 0;\n        for(int i = 0; i < w.size(); i++) {\n           \
    \ if(!(w[i] == 'a' || w[i] == 'e' || w[i] == 'i' || w[i] == 'o' || w[i] == 'u'\
    \ || w[i] == 'y')) {\n                c++;\n            }\n        }\n       \
    \ if(c == n) {\n            results.push_back(w);\n        }\n    }\n    return\
    \ results;", "\tstd::vector<std::string> result;\n\tint len = s.length();\n\t\
    std::string word;\n\tint len2;\n\tint consonants;\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tconsonants = 0;\n\t\twhile (s[i] != ' ' && i < len) {\n\t\t\tword\
    \ += s[i];\n\t\t\tif (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u') {\n\t\t\t\tconsonants++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tlen2\
    \ = word.length();\n\t\tif (consonants == n) {\n\t\t\tresult.push_back(word);\n\
    \t\t}\n\t\tword.clear();\n\t}\n\treturn result;", "    int c = 0;\n    std::vector<std::string>\
    \ w;\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] != ' ') {\n            if ((s[i] != 'a') && (s[i] != 'e') &&\
    \ (s[i] != 'i') && (s[i] != 'o') && (s[i] != 'u')) {\n                c++;\n \
    \           }\n            word += s[i];\n        } else {\n            if (c\
    \ == n) {\n                w.push_back(word);\n            }\n            c =\
    \ 0;\n            word = \"\";\n        }\n    }\n    if (c == n) {\n        w.push_back(word);\n\
    \    }\n    return w;", "    std::vector<std::string> result;\n    std::string\
    \ consonants = \"bdfghklmnprstvwxzBDFGHKLMNPRSTVWXZ\";\n    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string word = \"\";\n    int vowelCount = 0;\n \
    \   for (auto i = 0; i < s.length(); i++) {\n        if (vowels.find(s[i]) !=\
    \ std::string::npos) {\n            vowelCount++;\n        }\n        if (s[i]\
    \ == ' ') {\n            if (vowelCount == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n            vowelCount = 0;\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (vowelCount ==\
    \ n) {\n        result.push_back(word);\n    }\n    return result;", "\tchar vowel[]\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'};\n\tstd::vector<std::string> v;\n\tstd::stringstream\
    \ ss(s);\n\tstd::string t;\n\tint count = 0;\n\twhile(ss >> t) {\n\t\tcount =\
    \ 0;\n\t\tfor(auto i : t) {\n\t\t\tfor(auto j : vowel) {\n\t\t\t\tif(i == j) {\n\
    \t\t\t\t\tcount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(t.size()\
    \ - count == n) {\n\t\t\tv.push_back(t);\n\t\t}\n\t}\n\treturn v;", "\tstd::vector<std::string>\
    \ result{};\n\tif (s.empty()) return result;\n\tint L = 0;\n\twhile (L < s.size())\
    \ {\n\t\twhile (L < s.size() && !isalpha(s[L])) ++L;\n\t\tint R = L + 1;\n\t\t\
    while (R < s.size() && isalpha(s[R])) ++R;\n\t\tstd::string tmp = s.substr(L,\
    \ R - L);\n\t\tint count = 0;\n\t\tfor (int i = 0; i < tmp.size(); ++i)\n\t\t\t\
    if (tmp[i] != 'a' && tmp[i] != 'e' && tmp[i] != 'i' && tmp[i] != 'o' && tmp[i]\
    \ != 'u')\n\t\t\t\t++count;\n\t\tif (count == n)\n\t\t\tresult.push_back(tmp);\n\
    \t\tL = R + 1;\n\t}\n\treturn result;", "    std::string a;\n    std::vector<std::string>\
    \ res;\n    std::vector<std::string> ans;\n    std::vector<char> vet;\n    std::vector<char>\
    \ vet2;\n    std::string::iterator it;\n    int cont;\n    // std::cout <<\"---\"\
    << s << \"---\" << n << \"---\\n\";\n    if(s.size() == 0) return ans;\n    for(it\
    \ = s.begin(); it != s.end(); it++){\n        vet.push_back(*it);\n    }\n   \
    \ for(int i = 0; i < vet.size(); i++){\n        if(vet[i] == ' '){\n         \
    \   cont = 0;\n            for(int j = 0; j < a.size(); j++){\n              \
    \  if(a[j] != 'a' && a[j] != 'e' && a[j] != 'i' && a[j] != 'o' && a[j] != 'u'){\n\
    \                    cont++;\n                }\n            }\n            if(cont\
    \ == n){\n                res.push_back(a);\n            }\n            a.clear();\n\
    \        }else{\n            a.push_back(vet[i]);\n        }\n    }\n    cont\
    \ = 0;\n    for(int j = 0; j < a.size(); j++){\n        if(a[j] != 'a' && a[j]\
    \ != 'e' && a[j] != 'i' && a[j] != 'o' && a[j] != 'u'){\n            cont++;\n\
    \        }\n    }\n    if(cont == n){\n        res.push_back(a);\n    }\n    return\
    \ res;", "    std::vector<std::string> selectedWords;\n    std::string::size_type\
    \ j = 0;\n    for (std::string::size_type i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] == ' ') {\n            std::string word = s.substr(j, i - j);\n  \
    \          if (word.size() == n) {\n                selectedWords.push_back(word);\n\
    \            }\n            j = i + 1;\n        }\n    }\n    if (j < s.size())\
    \ {\n        std::string word = s.substr(j, s.size() - j);\n        if (word.size()\
    \ == n) {\n            selectedWords.push_back(word);\n        }\n    }\n    return\
    \ selectedWords;", "    std::string temp = \"\";\n    std::vector<std::string>\
    \ ans;\n    bool is_vowel(char);\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            int cons = 0;\n            for(int j =\
    \ 0; j < temp.length(); j++) {\n                if(!is_vowel(temp[j])) cons++;\n\
    \            }\n            if(cons == n) ans.push_back(temp);\n            temp\
    \ = \"\";\n        }\n        else temp += s[i];\n    }\n    if(temp != \"\")\
    \ {\n        int cons = 0;\n        for(int j = 0; j < temp.length(); j++) {\n\
    \            if(!is_vowel(temp[j])) cons++;\n        }\n        if(cons == n)\
    \ ans.push_back(temp);\n    }\n    return ans;", "\tstd::vector<std::string> res;\n\
    \tif (s.empty())\n\t\treturn res;\n\tstd::string word;\n\tstd::istringstream iss(s);\n\
    \twhile (iss >> word) {\n\t\tif (count_consonants(word) == n)\n\t\t\tres.push_back(word);\n\
    \t}\n\treturn res;", "    std::vector<std::string>v;\n    std::string word=\"\"\
    ;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            if(consonants(word)==n){\n\
    \                v.push_back(word);\n            }\n            word=\"\";\n \
    \       }\n        else\n            word+=s[i];\n    }\n    if(consonants(word)==n){\n\
    \        v.push_back(word);\n    }\n    return v;", "  std::vector<std::string>\
    \ ans;\n  std::string word = \"\";\n  int count = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (s[i] != ' ') {\n      if (s[i] != 'a' && s[i] != 'e' && s[i]\
    \ != 'i' && s[i] != 'o' && s[i] != 'u') {\n        count++;\n      }\n      word\
    \ += s[i];\n    } else {\n      if (count == n) {\n        ans.push_back(word);\n\
    \      }\n      word = \"\";\n      count = 0;\n    }\n  }\n  if (count == n)\
    \ {\n    ans.push_back(word);\n  }\n  return ans;", "\tstd::stringstream ss(s);\n\
    \tstd::vector<std::string> words;\n\tstd::string word;\n\twhile (ss >> word) {\n\
    \t\tint num_vowels = 0;\n\t\tfor (auto c : word) {\n\t\t\tchar lower_c = std::tolower(c);\n\
    \t\t\tif (lower_c == 'a' || lower_c == 'e' || lower_c == 'i' || lower_c == 'o'\
    \ || lower_c == 'u') {\n\t\t\t\tnum_vowels++;\n\t\t\t}\n\t\t}\n\t\tif (word.size()\
    \ - num_vowels == n) {\n\t\t\twords.push_back(word);\n\t\t}\n\t}\n\treturn words;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' '){\n        \
    \    if(count == n){\n                result.push_back(temp);\n            }\n\
    \            temp = \"\";\n            count = 0;\n        }\n        else{\n\
    \            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i]\
    \ != 'u'){\n                count++;\n            }\n            temp += s[i];\n\
    \        }\n    }\n    if(count == n){\n        result.push_back(temp);\n    }\n\
    \    return result;", "\t", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    std::stringstream ss(s);\n    while(ss >> temp){\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::tolower);\n        int count = 0;\n        for(int\
    \ i = 0; i < temp.size(); i++){\n            if(temp[i] != 'a' && temp[i] != 'e'\
    \ && temp[i] != 'i' && temp[i] != 'o' && temp[i] != 'u'){\n                count++;\n\
    \            }\n        }\n        if(count == n){\n            result.push_back(temp);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> words;\n\t\
    std::stringstream ss(s);\n\tstd::string temp;\n\twhile (std::getline(ss, temp,\
    \ ' ')) {\n\t\tif (count_vowels(temp) == n) {\n\t\t\twords.push_back(temp);\n\t\
    \t}\n\t}\n\treturn words;", "\tstd::vector<std::string> words;\n\tif (s.empty())\
    \ return words;\n\tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss\
    \ >> word) {\n\t\tint consonants = 0;\n\t\tfor (char c : word) {\n\t\t\tif (std::string(\"\
    bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\").find(c) != std::string::npos) {\n\
    \t\t\t\tconsonants++;\n\t\t\t}\n\t\t}\n\t\tif (consonants == n) {\n\t\t\twords.push_back(word);\n\
    \t\t}\n\t}\n\treturn words;", "    std::vector<std::string> result;\n    size_t\
    \ pos = 0;\n    int count = 0;\n    std::string str = \"\";\n    while(pos < s.length()){\n\
    \        if(s[pos] != ' ' && s[pos] != '\\0'){\n            str += s[pos];\n \
    \           if(std::find(std::begin(vowels), std::end(vowels), s[pos]) == std::end(vowels)){\n\
    \                count++;\n            }\n        }else{\n            if(count\
    \ == n){\n                result.push_back(str);\n            }\n            str\
    \ = \"\";\n            count = 0;\n        }\n        pos++;\n    }\n    if(count\
    \ == n){\n        result.push_back(str);\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    int consonants;\n\
    \    while (std::getline(ss, word, ' ')) {\n        consonants = 0;\n        for\
    \ (char &c : word) {\n            switch (c) {\n                case 'B': case\
    \ 'C': case 'D': case 'F': case 'G': case 'H': case 'J': case 'K': case 'L': case\
    \ 'M': case 'N': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'V': case\
    \ 'W': case 'X': case 'Y': case 'Z': case 'b': case 'c': case 'd': case 'f': case\
    \ 'g': case 'h': case 'j': case 'k': case 'l': case 'm': case 'n': case 'p': case\
    \ 'q': case 'r': case 's': case 't': case 'v': case 'w': case 'x': case 'y': case\
    \ 'z':\n                    consonants++;\n                    break;\n      \
    \          default:\n                    break;\n            }\n        }\n  \
    \      if (consonants == n) {\n            result.push_back(word);\n        }\n\
    \    }\n    return result;", "\t// std::regex re(\"([[:alpha:]]+)((\\\\s+)([[:alpha:]]+))+\"\
    );\n\t// std::smatch m;\n\t// int consonants = 0;\n\t// std::string::const_iterator\
    \ searchStart( s.cbegin() );\n\t// std::vector<std::string> words;\n\t// while\
    \ (std::regex_search(searchStart, s.cend(), m, re)) {\n\t// \tstd::cout << m.str()\
    \ << std::endl;\n\t// \tfor (auto x:m) std::cout << x << \" \";\n\t// \tstd::cout\
    \ << std::endl;\n\t// \tstd::string word = m.str();\n\t// \tfor (int i = 0; i\
    \ < word.length(); i++) {\n\t// \t\tif (word[i] != 'a' && word[i] != 'e' && word[i]\
    \ != 'i' && word[i] != 'o' && word[i] != 'u') {\n\t// \t\t\tconsonants++;\n\t\
    // \t\t}\n\t// \t}\n\t// \tif (consonants == n) {\n\t// \t\twords.push_back(word);\n\
    \t// \t}\n\t// \tconsonants = 0;\n\t// \tsearchStart += m.position() + m.length();\n\
    \t// }\n\t// return words;\n\tstd::vector<std::string> words;\n\tstd::stringstream\
    \ ss(s);\n\tstd::string buf;\n\twhile (ss >> buf) {\n\t\tint consonants = 0;\n\
    \t\tfor (int i = 0; i < buf.length(); i++) {\n\t\t\tif (buf[i] != 'a' && buf[i]\
    \ != 'e' && buf[i] != 'i' && buf[i] != 'o' && buf[i] != 'u') {\n\t\t\t\tconsonants++;\n\
    \t\t\t}\n\t\t}\n\t\tif (consonants == n) {\n\t\t\twords.push_back(buf);\n\t\t\
    }\n\t}", "    std::vector<std::string> words;\n    std::string word = \"\";\n\
    \    long cons = 0;\n    for (char& c : s) {\n        if (c == ' ') {\n      \
    \      if (cons == n) {\n                words.push_back(word);\n            }\n\
    \            word = \"\";\n            cons = 0;\n        } else {\n         \
    \   if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        \
    \        cons++;\n            }\n            word += c;\n        }\n    }\n  \
    \  if (cons == n) {\n        words.push_back(word);\n    }\n    return words;",
  "    std::vector<std::string> vec;\n    std::istringstream ss(s);\n    std::string\
    \ temp;\n    while(ss >> temp){\n        int count = 0;\n        for(int i = 0;\
    \ i < temp.length(); i++){\n            if(!(temp[i] == 'a' || temp[i] == 'e'\
    \ || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u' || temp[i] == 'y'))\n\
    \                count++;\n        }\n        if(count == n)\n            vec.push_back(temp);\n\
    \    }\n    return vec;", "   std::vector<std::string> ret;\n    std::string t\
    \ = \"\";\n    for(auto i: s){\n        if(i == ' '){\n            ret.push_back(t);\n\
    \            t = \"\";\n        }\n        else t+=i;\n    }\n    ret.push_back(t);\n\
    \    std::vector<std::string>::iterator it = ret.begin();\n    while(it != ret.end()){\n\
    \        int count = 0;\n        for(auto i: *it){\n            if(i != 'a' &&\
    \ i != 'e' && i != 'i' && i != 'o' && i != 'u') count++;\n        }\n        if(count\
    \ != n)\n            it = ret.erase(it);\n        else it++;\n    }\n    return\
    \ ret;", "    std::vector<std::string> res;\n    std::istringstream iss(s);\n\
    \    std::vector<std::string> words;\n    std::string token;\n    while(std::getline(iss,\
    \ token, ' ')) {\n        words.push_back(token);\n    }\n    for(auto word :\
    \ words) {\n        int consonants = 0;\n        for(int i = 0; i < word.size();\
    \ i++) {\n            char c = word[i];\n            if(c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n       \
    \     }\n        }\n        if(consonants == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "  int consonants = 0;\n  std::vector<std::string>\
    \ v;\n  std::string word = \"\";\n  for (int i = 0; i < s.length(); i++) {\n \
    \   if (s[i] != ' ') {\n      if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' &&\
    \ s[i] != 'o' && s[i] != 'u') {\n        consonants++;\n      }\n      word +=\
    \ s[i];\n    } else {\n      if (consonants == n) {\n        v.push_back(word);\n\
    \      }\n      consonants = 0;\n      word = \"\";\n    }\n  }\n  if (consonants\
    \ == n) {\n    v.push_back(word);\n  }\n  return v;", "    std::vector<std::string>\
    \ ans;\n    std::string temp;\n    bool flag = false;\n    for(int i = 0; i <\
    \ s.length(); i++){\n        if(s[i] == ' '){\n            if(flag){\n       \
    \         ans.push_back(temp);\n            }\n            temp = \"\";\n    \
    \        flag = false;\n        }\n        else{\n            temp += s[i];\n\
    \            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u'){\n                flag = true;\n            }\n        }\n    }\n  \
    \  if(flag){\n        ans.push_back(temp);\n    }\n    std::vector<std::string>\
    \ ans1;\n    for(int i = 0; i < ans.size(); i++){\n        if(ans[i].length()\
    \ == n){\n            ans1.push_back(ans[i]);\n        }\n    }\n    return ans1;",
  "\t// will return empty vector if the string is empty\n\tif (s.length() == 0) {\n\
    \t\treturn std::vector<std::string>();\n\t}\n\tstd::vector<std::string> words;\n\
    \tstd::stringstream check1(s);\n\tstd::string temp;\n\t// iterate through the\
    \ string\n\twhile (getline(check1, temp, ' ')) {\n\t\t// check if the string contains\
    \ the correct number of consonants\n\t\tif (count_consonants(temp) == n) {\n\t\
    \t\twords.push_back(temp);\n\t\t}\n\t}\n\treturn words;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::istringstream words_in(s);\n\
    \    std::string word;\n    long consonants;\n    while (words_in >> word) {\n\
    \        consonants = 0;\n        for (long i = 0; i < word.size(); i++) {\n \
    \           if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i]\
    \ != 'o' && word[i] != 'u') consonants++;\n        }\n        if (consonants ==\
    \ n) result.push_back(word);\n    }\n    return result;", "\tstd::vector<std::string>\
    \ v;\n\tstd::string::iterator it = s.begin();\n\twhile(it != s.end()) {\n\t\t\
    std::string word;\n\t\twhile(it != s.end() && *it != ' ') {\n\t\t\tword.push_back(*it);\n\
    \t\t\tit++;\n\t\t}\n\t\tstd::string::iterator w = word.begin();\n\t\tlong count\
    \ = 0;\n\t\twhile(w != word.end()) {\n\t\t\tif(*w != 'a' && *w != 'e' && *w !=\
    \ 'i' && *w != 'o' && *w != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tw++;\n\t\t\
    }\n\t\tif(count == n) {\n\t\t\tv.push_back(word);\n\t\t}\n\t\tit++;\n\t}\n\treturn\
    \ v;", "    // Your code here\n    if(s.empty()) return {};\n    vector<string>\
    \ result;\n    vector<string> words;\n    string word;\n    for(int i = 0; i <\
    \ s.size(); i++){\n        if(s[i] == ' '){\n            words.push_back(word);\n\
    \            word = \"\";\n        }\n        else{\n            word += s[i];\n\
    \        }\n    }\n    words.push_back(word);\n    for(auto word : words){\n \
    \       int count = 0;\n        for(auto ch : word){\n            if(ch != 'a'\
    \ && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'){\n                count++;\n\
    \            }\n        }\n        if(count == n){\n            result.push_back(word);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> temp;\n\
    \    std::stringstream iss(s);\n    std::string word;\n    while(iss >> word){\n\
    \        int count = 0;\n        for(int i = 0; i < word.length(); i++){\n   \
    \         if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] ==\
    \ 'o' || word[i] == 'u'){\n                count++;\n            }\n        }\n\
    \        if(word.length() - count == n){\n            temp.push_back(word);\n\
    \        }\n    }\n    return temp;", "  std::vector<std::string> result;\n  std::stringstream\
    \ ss(s);\n  std::string token;\n  while (std::getline(ss, token, ' ')) {\n   \
    \ std::stringstream sst(token);\n    std::string consonants;\n    while (std::getline(sst,\
    \ token, 'a')) {\n      consonants += token;\n    }\n    sst = std::stringstream(consonants);\n\
    \    consonants = \"\";\n    while (std::getline(sst, token, 'e')) {\n      consonants\
    \ += token;\n    }\n    sst = std::stringstream(consonants);\n    consonants =\
    \ \"\";\n    while (std::getline(sst, token, 'i')) {\n      consonants += token;\n\
    \    }\n    sst = std::stringstream(consonants);\n    consonants = \"\";\n   \
    \ while (std::getline(sst, token, 'o')) {\n      consonants += token;\n    }\n\
    \    sst = std::stringstream(consonants);\n    consonants = \"\";\n    while (std::getline(sst,\
    \ token, 'u')) {\n      consonants += token;\n    }\n    if (consonants.length()\
    \ == n) {\n      result.push_back(token);\n    }\n  }\n  return result;", "  \
    \  std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ' ')) {\n        if (word.length()\
    \ < n) continue;\n        int count = 0;\n        for (char c : word) {\n    \
    \        if (!std::isalpha(c)) continue;\n            char l = std::tolower(c);\n\
    \            if (l == 'a' || l == 'e' || l == 'i' || l == 'o' || l == 'u') {\n\
    \                continue;\n            }\n            count++;\n        }\n \
    \       if (count == n) {\n            result.push_back(word);\n        }\n  \
    \  }\n    return result;", "  std::vector<std::string> v;\n  std::string word\
    \ = \"\";\n  int word_cons = 0;\n  for (char c : s) {\n    if (c == ' ') {\n \
    \     if (word_cons == n) {\n        v.push_back(word);\n      }\n      word =\
    \ \"\";\n      word_cons = 0;\n    } else {\n      if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n        word_cons++;\n      }\n      word\
    \ += c;\n    }\n  }\n  if (word_cons == n) {\n    v.push_back(word);\n  }\n  return\
    \ v;", "    vector<string> words;\n    vector<int> cons;\n    vector<string> res;\n\
    \    string word;\n    long count = 0;\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(s[i] == ' ' || i == s.length() - 1){\n            if(i == s.length()\
    \ - 1){\n                word += s[i];\n            }\n            words.push_back(word);\n\
    \            word = \"\";\n        }\n        else{\n            word += s[i];\n\
    \        }\n    }\n    for(int i = 0; i < words.size(); i++){\n        for(int\
    \ j = 0; j < words[i].length(); j++){\n            if(words[i][j] == 'a' || words[i][j]\
    \ == 'e' || words[i][j] == 'i' ||\n            words[i][j] == 'o' || words[i][j]\
    \ == 'u' || words[i][j] == 'y'){\n                count++;\n            }\n  \
    \      }\n        cons.push_back(words[i].length() - count);\n        count =\
    \ 0;\n    }\n    for(int i = 0; i < cons.size(); i++){\n        if(cons[i] ==\
    \ n){\n            res.push_back(words[i]);\n        }\n    }\n    return res;",
  "    if(s.size() == 0) return {};\n    std::vector<std::string> vec;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while(ss >> word){\n        int res = 0;\n\
    \        for(auto &c : word){\n            if(std::string(\"aeiou\").find(std::tolower(c))\
    \ == std::string::npos) res++;\n        }\n        if(res == n) vec.push_back(word);\n\
    \    }\n    return vec;", "    std::vector<std::string> words;\n    int pos =\
    \ 0;\n    while(pos < s.size()){\n        // std::cout << pos << std::endl;\n\
    \        std::string current_word = \"\";\n        int consonants = 0;\n     \
    \   while(pos < s.size() && s[pos] != ' '){\n            if(s[pos] != 'a' && s[pos]\
    \ != 'e' && s[pos] != 'i' && s[pos] != 'o' && s[pos] != 'u'){\n              \
    \  consonants++;\n            }\n            current_word += s[pos];\n       \
    \     pos++;\n        }\n        if(consonants == n){\n            words.push_back(current_word);\n\
    \        }\n        pos++;\n    }\n    return words;", "    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        int count = 0;\n        for(int i = 0; i < token.length();\
    \ i++) {\n            char ch = token[i];\n            if((ch != 'a' && ch !=\
    \ 'e' && ch != 'i' && ch != 'o' && ch != 'u') &&\n                (ch != 'A' &&\
    \ ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U'))\n                count++;\n\
    \        }\n        if(count == n)\n            result.push_back(token);\n   \
    \ }\n    return result;", "    if(s.empty())\n        return {};\n    std::vector<std::string>\
    \ words;\n    std::istringstream ss(s);\n    std::string word;\n    while(ss >>\
    \ word){\n        long count = 0;\n        for(char ch : word){\n            if(ch\
    \ == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n              \
    \  count++;\n        }\n        if(word.size() - count == n)\n            words.push_back(word);\n\
    \    }\n    return words;", "  std::vector<std::string> res;\n  // TODO\n  bool\
    \ can_be_done = true;\n  long len = s.length();\n  long tlen = 0;\n  long index\
    \ = 0;\n  long count = 0;\n  while(can_be_done){\n    index = s.find(\" \");\n\
    \    if(index > 0){\n      tlen = index;\n      std::string t = s.substr(0,index);\n\
    \      for(int i = 0; i < tlen; i++){\n        if(t[i]!='a'&&t[i]!='e'&&t[i]!='i'&&t[i]!='o'&&t[i]!='u'){\n\
    \          count++;\n        }\n      }\n      if(count == n){\n        res.push_back(t);\n\
    \      }\n      s = s.substr(index+1,len-index-1);\n      len = s.length();\n\
    \      count = 0;\n    }\n    else{\n      tlen = len;\n      std::string t =\
    \ s.substr(0,index);\n      for(int i = 0; i < tlen; i++){\n        if(t[i]!='a'&&t[i]!='e'&&t[i]!='i'&&t[i]!='o'&&t[i]!='u'){\n\
    \          count++;\n        }\n      }\n      if(count == n){\n        res.push_back(t);\n\
    \      }\n      can_be_done = false;\n    }\n  }\n  return res;", "  std::vector<std::string>\
    \ words;\n  std::string word;\n  char c;\n  long word_consonants;\n  for (long\
    \ i = 0; i < s.size(); i++) {\n    c = s[i];\n    if (c != ' ') {\n      word.push_back(c);\n\
    \    } else {\n      word_consonants = 0;\n      for (long j = 0; j < word.size();\
    \ j++) {\n        c = word[j];\n        if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n          word_consonants++;\n        }\n      }\n\
    \      if (word_consonants == n) {\n        words.push_back(word);\n      }\n\
    \      word.clear();\n    }\n  }\n  word_consonants = 0;\n  for (long j = 0; j\
    \ < word.size(); j++) {\n    c = word[j];\n    if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u') {\n      word_consonants++;\n    }\n  }\n  if (word_consonants\
    \ == n) {\n    words.push_back(word);\n  }\n  return words;", "  // use an array\
    \ to keep track of how many consonents are in each word\n  // iterate over the\
    \ string and use a loop to add each word to the vector\n  // if the word has the\
    \ consonent count we want\n  std::vector<std::string> words;\n  int count = 0;\n\
    \  std::string word = \"\";\n  int i = 0;\n  while (i < s.length()) {\n    if\
    \ (s[i] == ' ') {\n      if (count == n) {\n        words.push_back(word);\n \
    \     }\n      count = 0;\n      word = \"\";\n    } else {\n      word += s[i];\n\
    \      if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] !=\
    \ 'u') {\n        count++;\n      }\n    }\n    i++;\n  }\n  if (count == n) {\n\
    \    words.push_back(word);\n  }\n  return words;", "\tstd::vector<std::string>vec;\n\
    \tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\t\
    long count = 0;\n\t\tfor (long i = 0; i < word.size(); i++) {\n\t\t\tchar c =\
    \ tolower(word[i]);\n\t\t\tif (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\t\
    vec.push_back(word);\n\t\t}\n\t}\n\treturn vec;", "    std::vector<std::string>\
    \ answer;\n    std::string::iterator itr1;\n    std::string::iterator itr2;\n\
    \    std::string::iterator begin;\n    std::string::iterator end;\n    long count\
    \ = 0;\n    bool word_begin = false;\n    for(itr1 = s.begin(); itr1 < s.end();\
    \ itr1++){\n        if(word_begin){\n            if(*itr1 == ' '){\n         \
    \       end = itr1;\n                count = 0;\n                for(itr2 = begin;\
    \ itr2 < end; itr2++){\n                    if(!((*itr2 == 'a') || (*itr2 == 'e')\
    \ || (*itr2 == 'i') || (*itr2 == 'o') || (*itr2 == 'u'))){\n                 \
    \       count++;\n                    }\n                }\n                if(count\
    \ == n){\n                    std::string temp(begin, end);\n                \
    \    answer.push_back(temp);\n                }\n                word_begin =\
    \ false;\n            }\n        }\n        else{\n            if(*itr1 != ' '){\n\
    \                begin = itr1;\n                word_begin = true;\n         \
    \   }\n        }\n    }\n    if(word_begin){\n        end = itr1;\n        count\
    \ = 0;\n        for(itr2 = begin; itr2 < end; itr2++){\n            if(!((*itr2\
    \ == 'a') || (*itr2 == 'e') || (*itr2 == 'i') || (*itr2 == 'o') || (*itr2 == 'u'))){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            std::string temp(begin, end);\n            answer.push_back(temp);\n\
    \        }\n    }\n    return answer;", "\t// Write your code here!\n\tstd::vector<std::string>\
    \ result;\n\t// int tamanho = s.size();\n\tint i = 0;\n\tstd::string palavra_atual;\n\
    \tint contador = 0;\n\twhile(i<s.size()){\n\t\t// std::cout << i << std::endl;\n\
    \t\tif(s[i] == ' '){\n\t\t\tif(contador == n){\n\t\t\t\tresult.push_back(palavra_atual);\n\
    \t\t\t}\n\t\t\tpalavra_atual = \"\";\n\t\t\tcontador = 0;\n\t\t}else{\n\t\t\t\
    if(s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u'){\n\
    \t\t\t\t// contador = 0;\n\t\t\t}else{\n\t\t\t\tcontador++;\n\t\t\t}\n\t\t\tpalavra_atual\
    \ += s[i];\n\t\t}\n\t\ti++;\n\t}\n\tif(contador == n){\n\t\tresult.push_back(palavra_atual);\n\
    \t}\n\treturn result;", "    std::vector<std::string> selected;\n    std::string\
    \ res;\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (consonants == n) {\n            \
    \    selected.push_back(res);\n            }\n            res = \"\";\n      \
    \      consonants = 0;\n        } else {\n            res += s[i];\n         \
    \   if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u')\
    \ {\n                consonants++;\n            }\n        }\n    }\n    if (consonants\
    \ == n) {\n        selected.push_back(res);\n    }\n    return selected;", " \
    \ //..\n  std::vector<std::string> res;\n  std::string temp;\n  long count = 0;\n\
    \  if(s == \"\") return res;\n  std::stringstream stream(s);\n  while(getline(stream,\
    \ temp, ' ')){\n    for(int i = 0; i < temp.size(); i++){\n      if(temp[i] ==\
    \ 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\n\
    \        count++;\n    }\n    if(temp.size() - count == n)\n      res.push_back(temp);\n\
    \    count = 0;\n  }\n  return res;", "    int N = s.size();\n    // use the map\
    \ to count the frequency of the character and use it for the validations\n   \
    \ // for(int i = 0; i < N; i++)\n    //     mp[s[i]]++;\n    std::vector<std::string>\
    \ res;\n    std::string temp;\n    for(int i = 0; i < N; i++){\n        if(s[i]\
    \ == ' ') {\n            if(countConsonants(temp) == n)\n                res.push_back(temp);\n\
    \            temp.clear();\n        }\n        else\n            temp += s[i];\n\
    \    }\n    if(countConsonants(temp) == n)\n        res.push_back(temp);\n   \
    \ return res;", "    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string item;\n    while (getline(ss, item, ' ')) {\n        std::string\
    \ x = item;\n        size_t l = std::count_if(item.begin(), item.end(), [](char\
    \ c) {\n            return (tolower(c) != 'a' && tolower(c) != 'e' && tolower(c)\
    \ != 'i' &&\n                    tolower(c) != 'o' && tolower(c) != 'u');\n  \
    \      });\n        if (l == n) {\n            result.push_back(x);\n        }\n\
    \    }\n    return result;", "    std::stringstream iss(s);\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::string vowels = \"aeiouAEIOU\";\n  \
    \  while (iss >> word) {\n        long consonants = 0;\n        for (char letter\
    \ : word) {\n            if (vowels.find(letter) == std::string::npos) {\n   \
    \             consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            words.push_back(word);\n        }\n    }\n    return words;",
  "    std::vector<std::string> vs;\n    if (s.size() == 0) {\n        return vs;\n\
    \    }\n    std::stringstream ss(s);\n    std::string temp;\n    std::set<char>\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n    while (ss >> temp) {\n        long\
    \ consonants = 0;\n        for (char c : temp) {\n            if (vowels.find(c)\
    \ == vowels.end()) {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            vs.push_back(temp);\n        }\n\
    \    }\n    return vs;", "    if(s.empty()) return {};\n    std::vector<std::string>\
    \ result;\n    std::string current;\n    for(auto ch: s){\n        if(ch == '\
    \ '){\n            int count = 0;\n            for(auto c: current){\n       \
    \         if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n    \
    \                count++;\n                }\n            }\n            if(count\
    \ == n){\n                result.push_back(current);\n            }\n        \
    \    current.clear();\n        }\n        else current.push_back(ch);\n    }\n\
    \    int count = 0;\n    for(auto c: current){\n        if(c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u'){\n            count++;\n        }\n   \
    \ }\n    if(count == n){\n        result.push_back(current);\n    }\n    return\
    \ result;", "  std::stringstream ss(s);\n  std::vector<std::string> words;\n \
    \ std::string tmp;\n  while (ss >> tmp) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int count = 0;\n    for (int i = 0; i < tmp.size(); i++) {\n      if (vowels.find(tmp[i])\
    \ == std::string::npos) {\n        count++;\n      }\n    }\n    if (count ==\
    \ n) {\n      words.push_back(tmp);\n    }\n  }\n  return words;", "   std::vector<std::string>\
    \ result;\n   std::string temp;\n   std::istringstream iss(s);\n   while(iss >>\
    \ temp) {\n      long count = 0;\n      for(int i = 0; i < temp.length(); i++)\
    \ {\n         if(temp[i] != 'a' && temp[i] != 'e' && temp[i] != 'i' &&\n     \
    \    temp[i] != 'o' && temp[i] != 'u' && temp[i] != 'A' && temp[i] != 'E'\n  \
    \       && temp[i] != 'I' && temp[i] != 'O' && temp[i] != 'U') {\n           \
    \ count++;\n         }\n      }\n      if(count == n) {\n         result.push_back(temp);\n\
    \      }\n   }\n   return result;", "    std::vector<std::string> result;\n  \
    \  long count;\n    std::string word;\n    std::istringstream input(s);\n    while(input\
    \ >> word) {\n        count = 0;\n        for(int i = 0; i < word.length(); i++)\
    \ {\n            if(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i]\
    \ != 'o' && word[i] != 'u') {\n                count++;\n            }\n     \
    \   }\n        if(count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> retval;\n    for\
    \ (auto word : split(s, ' ')) {\n        if (count_consonants(word) == n) {\n\
    \            retval.push_back(word);\n        }\n    }\n    return retval;", " \
    \   if(s.empty())\n        return {};\n    std::vector<std::string> ans;\n   \
    \ std::string temp;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] ==\
    \ ' '){\n            if(isVowel(temp)){\n                temp.clear();\n     \
    \           continue;\n            }else{\n                if(temp.size() == n)\n\
    \                    ans.push_back(temp);\n                temp.clear();\n   \
    \         }\n        }else\n            temp += s[i];\n    }\n    if(!temp.empty()){\n\
    \        if(!isVowel(temp)){\n            if(temp.size() == n)\n             \
    \   ans.push_back(temp);\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ vec;\n    std::string word;\n    int consonants = 0;\n    for (auto const &c\
    \ : s) {\n        if (c != ' ') {\n            if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u') {\n                consonants++;\n            }\n\
    \            word += c;\n        } else {\n            if (consonants == n) {\n\
    \                vec.push_back(word);\n            }\n            word = \"\"\
    ;\n            consonants = 0;\n        }\n    }\n    if (consonants == n) {\n\
    \        vec.push_back(word);\n    }\n    return vec;", "    int c = 0;\n    std::vector<std::string>\
    \ v;\n    std::string temp = \"\";\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            if(c == n) {\n                v.push_back(temp);\n\
    \            }\n            c = 0;\n            temp = \"\";\n        } else {\n\
    \            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i]\
    \ != 'u') {\n                c++;\n            }\n            temp += s[i];\n\
    \        }\n    }\n    if(c == n) {\n        v.push_back(temp);\n    }\n    return\
    \ v;", "    std::vector<std::string> words;\n    if (s.length() == 0) {\n    \
    \    return words;\n    }\n    std::stringstream ss(s);\n    std::string word;\n\
    \    while (ss >> word) {\n        int consonants_count = 0;\n        for (char\
    \ c : word) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') {\n                consonants_count++;\n            }\n        }\n\
    \        if (consonants_count == n) {\n            words.push_back(word);\n  \
    \      }\n    }\n    return words;", "    int consonants, position;\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        consonants = 0;\n        for (int i = 0; i < word.length();\
    \ i++) {\n            if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' &&\
    \ word[i] != 'o' && word[i] != 'u')\n                consonants++;\n        }\n\
    \        if (consonants == n) {\n            words.push_back(word);\n        }\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string current;\n    while (std::getline(ss, current, ' '))\n\
    \    {\n        int count = 0;\n        for (auto c : current)\n        {\n  \
    \          if (!std::isalpha(c))\n                continue;\n            if (std::isupper(c))\n\
    \                count++;\n        }\n        if (count == n)\n            words.push_back(current);\n\
    \    }\n    return words;", "    std::vector<std::string> selected;\n    std::string\
    \ word;\n    std::stringstream ss(s);\n    std::getline(ss, word, ' ');\n    while\
    \ (ss) {\n        int num_const = 0;\n        for (char c : word) {\n        \
    \    switch (c) {\n                case 'a':\n                case 'e':\n    \
    \            case 'i':\n                case 'o':\n                case 'u':\n\
    \                case 'A':\n                case 'E':\n                case 'I':\n\
    \                case 'O':\n                case 'U':\n                    break;\n\
    \                default:\n                    num_const++;\n            }\n \
    \       }\n        if (num_const == n) {\n            selected.push_back(word);\n\
    \        }\n        std::getline(ss, word, ' ');\n    }\n    return selected;",
  "    // remove spaces and check if the string is empty\n    s.erase(std::remove(s.begin(),\
    \ s.end(), ' '), s.end());\n    if (s.empty()) {\n        return {};\n    }\n\
    \    // assume input string contains only letters\n    long slen = s.length();\n\
    \    std::vector<std::string> v;\n    for (int i = 0; i < slen; i++) {\n     \
    \   int count = 0;\n        std::string current = \"\";\n        int j = i;\n\
    \        while (j < slen) {\n            if (s[j] != 'a' && s[j] != 'e' && s[j]\
    \ != 'i' && s[j] != 'o' && s[j] != 'u') {\n                count++;\n        \
    \    }\n            current += s[j];\n            j++;\n        }\n        if\
    \ (count == n) {\n            v.push_back(current);\n        }\n    }\n    return\
    \ v;", "    if(n < 1) return {};\n    std::vector<std::string> vec{};\n    std::istringstream\
    \ ss(s);\n    while(ss){\n        std::string word;\n        ss >> word;\n   \
    \     long conso = 0;\n        for(const auto& c : word){\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                continue;\n\
    \            }\n            conso++;\n        }\n        if(conso == n){\n   \
    \         vec.push_back(word);\n        }\n    }\n    return vec;", "    std::vector<std::string>\
    \ vec;\n    std::string temp;\n    for(int i = 0; i < s.length(); i++){\n    \
    \    if(s[i] == ' '){\n            if(temp.length() - std::count(temp.begin(),\
    \ temp.end(), 'a') - std::count(temp.begin(), temp.end(), 'e') - std::count(temp.begin(),\
    \ temp.end(), 'i') - std::count(temp.begin(), temp.end(), 'o') - std::count(temp.begin(),\
    \ temp.end(), 'u') == n){\n                vec.push_back(temp);\n            }\n\
    \            temp = \"\";\n        }\n        else{\n            temp += s[i];\n\
    \        }\n    }\n    if(temp.length() - std::count(temp.begin(), temp.end(),\
    \ 'a') - std::count(temp.begin(), temp.end(), 'e') - std::count(temp.begin(),\
    \ temp.end(), 'i') - std::count(temp.begin(), temp.end(), 'o') - std::count(temp.begin(),\
    \ temp.end(), 'u') == n){\n        vec.push_back(temp);\n    }\n    return vec;",
  "\tstd::stringstream ss(s);\n\tstd::vector<std::string> words;\n\twhile(ss.good())\
    \ {\n\t\tstd::string a;\n\t\tss >> a;\n\t\twords.push_back(a);\n\t}\n\tstd::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n\tlong vcount = 0;\n\tstd::vector<std::string>\
    \ ret;\n\tfor(auto w : words) {\n\t\tvcount = 0;\n\t\tfor(auto l : w) {\n\t\t\t\
    if(consonants.find(l) != std::string::npos) {\n\t\t\t\tvcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(vcount == n) {\n\t\t\tret.push_back(w);\n\t\t}\n\t}\n\treturn ret;",
  "    std::vector<std::string> words;\n    // TODO: Write your code here\n    std::stringstream\
    \ ss(s);\n    std::string token;\n    while(getline(ss, token, ' ')){\n      \
    \  int count = 0;\n        for(char x : token){\n            if(x == 'a' || x\
    \ == 'e' || x == 'i' || x == 'o' || x == 'u'){\n                count++;\n   \
    \         }\n        }\n        if(token.size() - count == n){\n            words.push_back(token);\n\
    \        }\n    }\n    return words;", "    std::vector<std::string> result;\n\
    \    if (s.size() < n){\n        return result;\n    }\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while (ss >> word){\n        // count the\
    \ number of consonants in the current word\n        size_t count = 0;\n      \
    \  for (auto c : word){\n            if (!(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')){\n                count++;\n            }\n        }\n\
    \        if (count == n){\n            result.push_back(word);\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while (ss >> word) {\n        std::string::iterator\
    \ it;\n        int ctr = 0;\n        for (it = word.begin(); it != word.end();\
    \ it++) {\n            if (*it == 'a' || *it == 'e' || *it == 'i' || *it == 'o'\
    \ || *it == 'u') {\n                ctr++;\n            }\n        }\n       \
    \ if (ctr == n) {\n            result.push_back(word);\n        }\n    }\n   \
    \ return result;", "    std::vector<std::string> res;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    int count = 0;\n    // std::cout << \"n is: \" <<\
    \ n << std::endl;\n    while (ss >> word) {\n        count = 0;\n        // std::cout\
    \ << \"word is: \" << word << std::endl;\n        for (int i = 0; i < word.length();\
    \ i++) {\n            if (!isalpha(word[i])) {\n                continue;\n  \
    \          }\n            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u') {\n                continue;\n        \
    \    }\n            count++;\n        }\n        // std::cout << \"count is: \"\
    \ << count << std::endl;\n        if (count == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> solution;\n\
    \    int count = 0;\n    std::string temp;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] != ' '){\n            temp += s[i];\n            if(isalpha(s[i])\
    \ && !isvowel(s[i])){\n                count++;\n            }\n        }else{\n\
    \            if(count == n){\n                solution.push_back(temp);\n    \
    \        }\n            temp = \"\";\n            count = 0;\n        }\n    }\n\
    \    if(count == n){\n        solution.push_back(temp);\n    }\n    return solution;",
  "    std::vector<std::string> container;\n    std::string temp;\n    for(int i =\
    \ 0; i < s.length(); i++){\n        if(s[i] == ' '){\n            if(temp.length()\
    \ == n)\n                container.push_back(temp);\n            temp = \"\";\n\
    \        }else{\n            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i]\
    \ != 'o' && s[i] != 'u')\n                temp += s[i];\n        }\n    }\n  \
    \  if(temp.length() == n)\n        container.push_back(temp);\n    return container;"]
stop_tokens:
- "\n}"
