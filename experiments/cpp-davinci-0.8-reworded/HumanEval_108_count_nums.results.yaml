language: cpp
name: HumanEval_108_count_nums
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\
    \tbool is_neg = false;\n\t\tif (arr[i] < 0) {\n\t\t\tarr[i] = abs(arr[i]);\n\t\
    \t\tis_neg = true;\n\t\t}\n\t\twhile (arr[i] > 0) {\n\t\t\tsum += arr[i] % 10;\n\
    \t\t\tarr[i] /= 10;\n\t\t}\n\t\tif (is_neg) {\n\t\t\tif (sum > 0) {\n\t\t\t\t\
    count++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (sum > 0) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptusqi9po: /tmp/tmptusqi9po.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ cnt = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long rem, sum = 0;\n\
    \    if (arr[i] < 0)\n      arr[i] = arr[i] * -1;\n    while (arr[i] != 0) {\n\
    \      rem = arr[i] % 10;\n      sum = sum + rem;\n      arr[i] = arr[i] / 10;\n\
    \    }\n    if (sum > 0)\n      cnt++;\n  }\n  return cnt;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp00l03ek8: /tmp/tmp00l03ek8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ ret = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong tmp = 0;\n\t\t\
    long a = arr[i];\n\t\tlong sign = a / std::abs(a);\n\t\ta = std::abs(a);\n\t\t\
    while (a > 0) {\n\t\t\ttmp += a % 10;\n\t\t\ta /= 10;\n\t\t}\n\t\tif (tmp * sign\
    \ > 0) {\n\t\t\tret++;\n\t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ /*\n    enter your code here\n    */\n    int count = 0;\n    for(long int i\
    \ = 0; i < arr.size(); i++){\n        int sum = 0;\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        while(arr[i] != 0){\n \
    \           sum += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n        }\n\
    \        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3d61leej: /tmp/tmp3d61leej.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tif\
    \ (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tlong count = 0;\n\t\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\t\tlong s = 0;\n\t\t\tlong num = arr[i];\n\
    \t\t\tif (num < 0) {\n\t\t\t\tnum = num * -1;\n\t\t\t}\n\t\t\twhile (num > 0)\
    \ {\n\t\t\t\ts = s + num % 10;\n\t\t\t\tnum = num / 10;\n\t\t\t}\n\t\t\tif (s\
    \ > 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpokxy__em: /tmp/tmpokxy__em.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long length = arr.size();\n    long count = 0;\n    for (long i = 0; i < length;\
    \ i++) {\n        long sum = 0;\n        if (arr[i] >= 0) {\n            while\
    \ (arr[i] > 0) {\n                sum += arr[i] % 10;\n                arr[i]\
    \ /= 10;\n            }\n        } else {\n            arr[i] = -arr[i];\n   \
    \         sum += -1;\n            while (arr[i] > 0) {\n                sum +=\
    \ arr[i] % 10;\n                arr[i] /= 10;\n            }\n        }\n    \
    \    if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp35gdh6yl: /tmp/tmp35gdh6yl.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count=0;\n    for(long i=0;i<arr.size();i++){\n        long s=0;\n    \
    \    if(arr[i]<0){\n            arr[i]=-arr[i];\n            s=-(arr[i]%10);\n\
    \            arr[i]=(arr[i]-arr[i]%10)/10;\n        }\n        while(arr[i]>0){\n\
    \            s=s+arr[i]%10;\n            arr[i]=(arr[i]-arr[i]%10)/10;\n     \
    \   }\n        if(s>0){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmps5kk9yp6: /tmp/tmps5kk9yp6.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ std::vector<long>::iterator itr = arr.begin();\n    long count = 0;\n    while(itr\
    \ != arr.end()) {\n        long sum = 0;\n        long num = *itr;\n        while(num\
    \ != 0) {\n            long digit = num % 10;\n            if(digit < 0) {\n \
    \               digit = -digit;\n            }\n            sum += digit;\n  \
    \          num /= 10;\n        }\n        if(sum > 0) {\n            count++;\n\
    \        }\n        itr++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1rghwo7p: /tmp/tmp1rghwo7p.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ your code here\n  long count = 0;\n  for(int i = 0; i < arr.size(); i++){\n\
    \    long number = arr[i];\n    if(number < 0){\n      number = number * -1;\n\
    \    }\n    while(number > 0){\n      count += number % 10;\n      number = number\
    \ / 10;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkfft3lvc: /tmp/tmpkfft3lvc.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ start your code here\n  long count = 0;\n  for(auto num : arr){\n    long sum\
    \ = 0;\n    if(num < 0){\n      num = num * -1;\n    }\n    while(num){\n    \
    \  sum += num % 10;\n      num /= 10;\n    }\n    if(sum > 0){\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2tbgcyay: /tmp/tmp2tbgcyay.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong\
    \ index = 0;\nlong count = 0;\nwhile (index < arr.size()) {\nlong sum = 0;\nlong\
    \ num = arr[index];\nwhile (num != 0) {\nsum += num % 10;\nnum /= 10;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09wbq7fc.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp09wbq7fc.cpp:23:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   23 | int main() {\n      |     \
    \       ^\n/tmp/tmp09wbq7fc.cpp:33:1: error: expected \u2018}\u2019 at end of\
    \ input\n   33 | }\n      | ^\n/tmp/tmp09wbq7fc.cpp:16:28: note: to match this\
    \ \u2018{\u2019\n   16 | while (index < arr.size()) {\n      |               \
    \             ^\n/tmp/tmp09wbq7fc.cpp:33:1: error: expected \u2018}\u2019 at end\
    \ of input\n   33 | }\n      | ^\n/tmp/tmp09wbq7fc.cpp:13:40: note: to match this\
    \ \u2018{\u2019\n   13 | long count_nums(std::vector<long> arr) {\n      |   \
    \                                     ^\n/tmp/tmp09wbq7fc.cpp:33:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   33 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660117879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ sum = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tlong num = arr[i];\n\
    \t\tif (num < 0)\n\t\t\tnum = num * -1;\n\t\tif (num % 10 == num)\n\t\t\tsum++;\n\
    \t\telse {\n\t\t\twhile (num >= 10) {\n\t\t\t\tlong temp = num;\n\t\t\t\tlong\
    \ s = 0;\n\t\t\t\twhile (temp > 0) {\n\t\t\t\t\ts += temp % 10;\n\t\t\t\t\ttemp\
    \ = temp / 10;\n\t\t\t\t}\n\t\t\t\tnum = s;\n\t\t\t}\n\t\t\tif (num != 0)\n\t\t\
    \t\tsum++;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplkdv4p1a: /tmp/tmplkdv4p1a.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long val = arr[i];\n        if (val < 0) {\n            val =\
    \ -val;\n            sum -= val % 10;\n            val /= 10;\n        }\n   \
    \     while (val > 0) {\n            sum += val % 10;\n            val /= 10;\n\
    \        }\n        if (sum > 0) {\n            ans++;\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6t3g46tm: /tmp/tmp6t3g46tm.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tif\
    \ (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\tlong count = 0;\n\tfor (long i =\
    \ 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tint element = arr[i];\n\t\t\
    while (element != 0) {\n\t\t\tsum += element % 10;\n\t\t\telement /= 10;\n\t\t\
    }\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpx8d9auhg: /tmp/tmpx8d9auhg.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        long sum = 0;\n\
    \        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n            arr[i]\
    \ = arr[i] / 10;\n        }\n        if (sum > 0) {\n            ans++;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbp8biaci: /tmp/tmpbp8biaci.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ counter = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0)\
    \ {\n      arr[i] = -arr[i];\n    }\n    long result = 0;\n    do {\n      result\
    \ += arr[i] % 10;\n      arr[i] /= 10;\n    } while (arr[i] != 0);\n    if (result\
    \ > 0) {\n      counter++;\n    }\n  }\n  return counter;\n}\nint main() {\n \
    \   auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6m15u6h3: /tmp/tmp6m15u6h3.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = abs(arr[i]);\n        while (num != 0) {\n        \
    \    long mod = num % 10;\n            sum += mod;\n            num /= 10;\n \
    \       }\n        if (sum != 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9eqtwg15: /tmp/tmp9eqtwg15.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ std::set<long> s;\n    int n = arr.size();\n    for(int i = 0; i < n; i++) {\n\
    \        long sum = 0;\n        long num = arr[i];\n        if(num < 0) num =\
    \ -num;\n        while(num) {\n            sum += num % 10;\n            num /=\
    \ 10;\n        }\n        s.insert(sum);\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc5rsdeak: /tmp/tmpc5rsdeak.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n \
    \   if (arr[i] < 0) {\n      sum = arr[i] * -1;\n    } else {\n      sum = arr[i];\n\
    \    }\n    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n\
    \    if (sum < 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6fkxoqdh: /tmp/tmp6fkxoqdh.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long long sum;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        sum = 0;\n        if (arr[i] < 0) {\n            sum += -arr[i] %\
    \ 10;\n            arr[i] /= -10;\n        }\n        while (arr[i] > 0) {\n \
    \           sum += arr[i] % 10;\n            arr[i] /= 10;\n        }\n      \
    \  if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6i6ybrko: /tmp/tmp6i6ybrko.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ ans = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    int digit_sum = 0;\n\
    \    long temp = arr[i];\n    if (temp < 0) {\n      digit_sum += temp * -1;\n\
    \      temp *= -1;\n    }\n    while (temp > 0) {\n      digit_sum += temp % 10;\n\
    \      temp /= 10;\n    }\n    if (digit_sum > 0) {\n      ans++;\n    }\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcgt1fvhu: /tmp/tmpcgt1fvhu.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\t//\
    \ your code here\n\treturn 0;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppnj3q6wa: /tmp/tmppnj3q6wa.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long numOfNonZero = 0;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  long sum = 0;\n        long num = arr[i];\n        // A positive number\n \
    \       if (num >= 0) {\n            while (num != 0) {\n                sum +=\
    \ num % 10;\n                num /= 10;\n            }\n        }\n        //\
    \ A negative number\n        else {\n            while (num != 0) {\n        \
    \        sum += num % -10;\n                num /= -10;\n            }\n     \
    \   }\n        if (sum != 0) {\n            numOfNonZero++;\n        }\n    }\n\
    \    return numOfNonZero;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpiah38ncq: /tmp/tmpiah38ncq.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long total\
    \ = 0;\n        long num = arr[i];\n        while (num != 0) {\n            total\
    \ += num % 10;\n            num /= 10;\n        }\n        if (total > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpw0_bnsxt: /tmp/tmpw0_bnsxt.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long x : arr) {\n        // Check if a number is negative.\n\
    \        bool is_negative = false;\n        if (x < 0) {\n            is_negative\
    \ = true;\n            x = abs(x);\n        }\n        long sum = 0;\n       \
    \ // Add all digits of a number.\n        while (x != 0) {\n            sum +=\
    \ x % 10;\n            x /= 10;\n        }\n        // If a number is negative,\
    \ negate the sum.\n        if (is_negative) {\n            sum *= -1;\n      \
    \  }\n        // Check if the sum is not 0.\n        if (sum != 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpedifl0xa: /tmp/tmpedifl0xa.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int c=0;\n    for(auto x:arr){\n        int s=0;\n        if(x<0){\n       \
    \     s=s-1;\n            x=x*-1;\n        }\n        while(x>0){\n          \
    \  s=s+x%10;\n            x=x/10;\n        }\n        if(s>0) c++;\n    }\n  \
    \  return c;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbvsllo6z: /tmp/tmpbvsllo6z.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long number = arr[i];\n\
    \    long sum = 0;\n    if (number < 0) {\n      number = number * -1;\n    }\n\
    \    while (number > 0) {\n      sum += number % 10;\n      number = number /\
    \ 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppkzv5uw5: /tmp/tmppkzv5uw5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // initialize a vector of ints with size of arr\n    std::vector<int> sums(arr.size());\n\
    \    int sum;\n    // iterate through the array\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sum = 0;\n        // iterate through number of elements in arr\n\
    \        for (int j = 0; j < arr[i]; j++) {\n            // take the element at\
    \ arr[i] and turn it into a string\n            // iterate through the string\n\
    \            for (int k = 0; k < to_string(arr[i]).length(); k++) {\n        \
    \        // add the digit and store it in the sum\n                sum += to_string(arr[i])[k]\
    \ - '0';\n            }\n        }\n        // store the sum in the array\n  \
    \      sums[i] = sum;\n    }\n    // initialize a counter\n    int count = 0;\n\
    \    // iterate through sums\n    for (int i = 0; i < sums.size(); i++) {\n  \
    \      // check if sum is greater than 0\n        if (sums[i] > 0) {\n       \
    \     // increment count\n            count++;\n        }\n    }\n    // return\
    \ count\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g8ffw34.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5g8ffw34.cpp:24:33: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   24 |             for (int k = 0; k < to_string(arr[i]).length(); k++) {\n\
    \      |                                 ^~~~~~~~~\n      |                  \
    \               std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5g8ffw34.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660117879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\t//\
    \ Write your code here\n\t// To print results to the standard output you can use\
    \ std::cout\n\t// Example: std::cout << \"Hello world!\";\n\tlong count = 0;\n\
    \tfor (long long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong j\
    \ = 0;\n\t\tlong elem = arr[i];\n\t\twhile (elem != 0) {\n\t\t\tlong a = elem\
    \ % 10;\n\t\t\tif (a < 0) {\n\t\t\t\ta = a * -1;\n\t\t\t}\n\t\t\tsum = sum + a;\n\
    \t\t\telem = elem / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpedsvj5gb: /tmp/tmpedsvj5gb.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count=0;\n    for(int i=0;i<arr.size();i++){\n        int num=arr[i];\n\
    \        int sum=0;\n        if(num<0){\n            num=abs(num);\n         \
    \   sum=-1;\n        }\n        while(num!=0){\n            sum+=num%10;\n   \
    \         num=num/10;\n        }\n        if(sum>0){\n            count++;\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpzh5vczza: /tmp/tmpzh5vczza.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ counter = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    int sum = 0;\n \
    \   int temp = arr[i];\n    if (temp < 0) {\n      temp = temp * -1;\n    }\n\
    \    while (temp != 0) {\n      sum += temp % 10;\n      temp = temp / 10;\n \
    \   }\n    if (sum > 0) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplk5irij7: /tmp/tmplk5irij7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long result = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long\
    \ sum = 0;\n        long x = arr[i];\n        if (x < 0) {\n            x = -x;\n\
    \        }\n        while (x > 0) {\n            sum += x % 10;\n            x\
    \ /= 10;\n        }\n        if (sum > 0) {\n            result++;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwajot9o2: /tmp/tmpwajot9o2.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long c = 0;\n    for(long i=0;i<arr.size();i++){\n        long t = arr[i];\n\
    \        long sum = 0;\n        if(t<0){\n            t = t*(-1);\n        }\n\
    \        while(t!=0){\n            long digit = t%10;\n            sum = sum +\
    \ digit;\n            t = t/10;\n        }\n        if(sum > 0){\n           \
    \ c++;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_9ae9duy: /tmp/tmp_9ae9duy.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto num : arr) {\n        std::string s = std::to_string(num);\n\
    \        int sum = 0;\n        for (auto c : s) {\n            // printf(\"%c\\\
    n\", c);\n            if (c == '-') continue;\n            sum += c - '0';\n \
    \       }\n        if (sum > 0) count++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2l_f4rle: /tmp/tmp2l_f4rle.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // Write your code here\n    // To print results to the standard output you\
    \ can use the cout\n    // stream. For example:\n    // cout << \"Hello world!\"\
    ;\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++){\n        int sum\
    \ = 0;\n        if(arr[i] < 0){\n            arr[i] = arr[i] * -1;\n        }\n\
    \        while(arr[i] > 0){\n            sum += arr[i] % 10;\n            arr[i]\
    \ = arr[i] / 10;\n        }\n        if(sum > 0){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpepr61pxk: /tmp/tmpepr61pxk.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int sum\
    \ = 0;\n        long number = arr[i];\n        if (number < 0) {\n           \
    \ number = number * -1;\n        }\n        while (number > 0) {\n           \
    \ sum += number % 10;\n            number = number / 10;\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpu_f1mbhu: /tmp/tmpu_f1mbhu.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ out = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n   \
    \ if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      sum += -1;\n    }\n    for\
    \ (long j = 0; j < to_string(arr[i]).length(); j++) {\n      sum += arr[i] % 10;\n\
    \      arr[i] /= 10;\n    }\n    if (sum > 0) {\n      out++;\n    }\n  }\n  return\
    \ out;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7syh7pfs.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7syh7pfs.cpp:21:26: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   21 |     for (long j = 0; j < to_string(arr[i]).length(); j++) {\n      |\
    \                          ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7syh7pfs.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660117879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    long digit_sum = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        digit_sum = 0;\n        long digit = 0;\n        if (arr[i]\
    \ >= 0) {\n            for (long j = 0; j < std::to_string(arr[i]).length(); j++)\
    \ {\n                digit = arr[i] % 10;\n                digit_sum += digit;\n\
    \                arr[i] /= 10;\n            }\n        } else {\n            for\
    \ (long j = 0; j < std::to_string(arr[i]).length() - 1; j++) {\n             \
    \   digit = arr[i] % 10;\n                digit_sum += digit;\n              \
    \  arr[i] /= 10;\n            }\n            digit_sum += std::stoi(std::to_string(arr[i]).substr(0,\
    \ 1));\n        }\n        if (digit_sum > 0) {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpo9ggb7u0: /tmp/tmpo9ggb7u0.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long total = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long curr\
    \ = arr[i];\n        long sum = 0;\n        if (curr < 0) {\n            curr\
    \ = std::abs(curr);\n            sum = curr % 10;\n            curr /= 10;\n \
    \       }\n        while (curr > 0) {\n            sum += curr % 10;\n       \
    \     curr /= 10;\n        }\n        if (sum != 0) {\n            total++;\n\
    \        }\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkdbacd6f: /tmp/tmpkdbacd6f.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // YOUR CODE HERE\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        long sum = 0;\n        long num = arr[i];\n        if (num <\
    \ 0) {\n            num = -1 * num;\n        }\n        while (num > 0) {\n  \
    \          long digit = num % 10;\n            sum += digit;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count += 1;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp81os0e2r: /tmp/tmp81os0e2r.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong temp = 0;\n\t\
    \tlong num = abs(arr[i]);\n\t\twhile (num != 0) {\n\t\t\ttemp += num % 10;\n\t\
    \t\tnum /= 10;\n\t\t}\n\t\tif (temp > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp13lxn5vv: /tmp/tmp13lxn5vv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int cnt=0;\n    for(auto i=arr.begin();i!=arr.end();i++){\n        int sum=0;\n\
    \        if(*i<0){\n            sum+=(*i)%10;\n            *i*=-1;\n        }\n\
    \        while(*i){\n            sum+=(*i)%10;\n            *i/=10;\n        }\n\
    \        if(sum>0)\n            cnt++;\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbon91nwn: /tmp/tmpbon91nwn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  assert(arr.size()\
    \ > 0);\n  int sum = 0;\n  for (auto i : arr) {\n    if (i < 0) {\n      i = std::abs(i);\n\
    \      sum -= i;\n    } else if (i > 0) {\n      sum += i;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkr2sj7pu: /tmp/tmpkr2sj7pu.cpp:14: long int count_nums(std::vector<long
    int>): Assertion `arr.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        int num = arr[i];\n        if (num < 0) {\n            num = num\
    \ * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjh7f1iwh: /tmp/tmpjh7f1iwh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long c=0;\n    for(long i=0;i<arr.size();i++)\n    {\n        long sum=0;\n\
    \        long n;\n        if(arr[i]<0)\n        {\n            n=-arr[i];\n  \
    \      }\n        else\n        {\n            n=arr[i];\n        }\n        while(n!=0)\n\
    \        {\n            sum=sum+n%10;\n            n=n/10;\n        }\n      \
    \  if(sum>0)\n        {\n            c++;\n        }\n    }\n    return c;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8ojggrcc: /tmp/tmp8ojggrcc.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (long i : arr) {\n\t\tlong sum = 0;\n\t\tif (i < 0) {\n\t\t\
    \tsum += i % 10;\n\t\t\ti = i / -10;\n\t\t}\n\t\twhile (i > 0) {\n\t\t\tsum +=\
    \ i % 10;\n\t\t\ti = i / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8vri_mec: /tmp/tmp8vri_mec.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long c = 0;\n    for(auto it = arr.begin(); it != arr.end(); it++) {\n     \
    \   long x = *it;\n        long sum = 0;\n        while(x != 0) {\n          \
    \  sum += x % 10;\n            x /= 10;\n        }\n        if(sum > 0) c++;\n\
    \    }\n    return c;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmah_50jo: /tmp/tmpmah_50jo.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long a=0;\n    int b;\n    for(int i=0;i<arr.size();i++)\n    {\n        b=0;\n\
    \        long c=arr[i];\n        if(c<0)\n        {\n            c=c*(-1);\n \
    \       }\n        while(c>0)\n        {\n            b=b+c%10;\n            c=c/10;\n\
    \        }\n        if(b>0)\n        {\n            a++;\n        }\n    }\n \
    \   return a;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptmzzbb00: /tmp/tmptmzzbb00.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ assert(arr.size() <= 15);\n    long a = arr.size();\n    if (a == 0) {\n   \
    \     return 0;\n    }\n    if (a == 1) {\n        if (arr[0] < 0) {\n       \
    \     return 0;\n        }\n        return 1;\n    }\n    if (a == 2) {\n    \
    \    if (arr[0] + arr[1] < 0) {\n            return 0;\n        }\n        return\
    \ 2;\n    }\n    if (a == 3) {\n        if (arr[0] + arr[1] + arr[2] < 0) {\n\
    \            return 0;\n        }\n        return 3;\n    }\n    if (a == 4) {\n\
    \        if (arr[0] + arr[1] + arr[2] + arr[3] < 0) {\n            return 0;\n\
    \        }\n        return 4;\n    }\n    if (a == 5) {\n        if (arr[0] +\
    \ arr[1] + arr[2] + arr[3] + arr[4] < 0) {\n            return 0;\n        }\n\
    \        return 5;\n    }\n    if (a == 6) {\n        if (arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] < 0) {\n            return 0;\n        }\n      \
    \  return 6;\n    }\n    if (a == 7) {\n        if (arr[0] + arr[1] + arr[2] +\
    \ arr[3] + arr[4] + arr[5] + arr[6] < 0) {\n            return 0;\n        }\n\
    \        return 7;\n    }\n    if (a == 8) {\n        if (arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] < 0) {\n            return 0;\n\
    \        }\n        return 8;\n    }\n    if (a == 9) {\n        if (arr[0] +\
    \ arr[1] + arr[2] + arr[3] + arr[4] + arr\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuoeiy525.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuoeiy525.cpp:68:56: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019} and \u2018std::vector<long\
    \ int>\u2019)\n   68 |         if (arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr\n      |                                                        ^ ~~~\n\
    \      |                                                          |\n      | \
    \                                                         std::vector<long int>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuoeiy525.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpuoeiy525.cpp:68:58:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   68 |         if (arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr\n     \
    \ |                                                          ^~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuoeiy525.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tstd::vector<long>::iterator\
    \ itr = arr.begin();\n\tlong temp = 0;\n\tlong count = 0;\n\tfor (itr = arr.begin();\
    \ itr != arr.end(); itr++) {\n\t\tif (*itr < 0) {\n\t\t\ttemp = *itr * -1;\n\t\
    \t}\n\t\telse {\n\t\t\ttemp = *itr;\n\t\t}\n\t\twhile (temp != 0) {\n\t\t\tcount\
    \ += temp % 10;\n\t\t\ttemp = temp / 10;\n\t\t}\n\t\tif (count > 0) {\n\t\t\t\
    count = 0;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpzowrhu9_: /tmp/tmpzowrhu9_.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //std::cout\
    \ << \"1\";\n  if (arr.size()==0)\n    return 0;\n  else if (arr.size()==1)\n\
    \    return 1;\n  else {\n    int arrSum=0;\n    for (int i=0; i<arr.size(); i++)\
    \ {\n      int n=0;\n      int elemSum=0;\n      n=arr[i];\n      while (n!=0)\
    \ {\n        int digi = n % 10;\n        n = n / 10;\n        elemSum += digi;\n\
    \      }\n      if (elemSum>0)\n        arrSum++;\n    }\n    return arrSum;\n\
    \  }\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpug5fzosr: /tmp/tmpug5fzosr.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ size = arr.size();\n  if (size == 0) {\n    return 0;\n  }\n  long sum = 0;\n\
    \  for (long i = 0; i < size; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n\
    \    }\n    while (arr[i] > 0) {\n      sum += arr[i] % 10;\n      arr[i] /= 10;\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpirfuw8ah: /tmp/tmpirfuw8ah.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (long x : arr) {\n        int value = 0;\n        if\
    \ (x < 0) {\n            value = -x;\n        } else {\n            value = x;\n\
    \        }\n        long b;\n        while (value > 0) {\n            b = value\
    \ % 10;\n            value = value / 10;\n            count = count + b;\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptt1dmurc: /tmp/tmptt1dmurc.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum=0;\n    long res=0;\n    for(long i=0;i<arr.size();i++){\n        long\
    \ temp=arr[i];\n        while(arr[i]>0){\n            long digit=arr[i]%10;\n\
    \            arr[i]=arr[i]/10;\n            sum=sum+digit;\n        }\n      \
    \  if(temp<0){\n            long digit=temp%10;\n            sum=sum+digit;\n\
    \        }\n        if(sum>0){\n            res++;\n        }\n        sum=0;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvlh92r0l: /tmp/tmpvlh92r0l.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  std::vector<long>::iterator it;\n  for (it = arr.begin(); it !=\
    \ arr.end(); it++) {\n    long i = *it;\n    long sum = 0;\n    if (i < 0) {\n\
    \      i = i * -1;\n    }\n    while (i > 0) {\n      sum += i % 10;\n      i\
    \ = i / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9wdlo3fx: /tmp/tmp9wdlo3fx.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ your code here\n  long count = 0;\n  for(auto it = arr.begin(); it != arr.end();\
    \ it++){\n    if(*it<0){\n      *it = *it * -1;\n    }\n    long n = *it;\n  \
    \  long sum = 0;\n    while(n>0){\n      sum += n%10;\n      n = n/10;\n    }\n\
    \    if(sum>0){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmply2go6f_: /tmp/tmply2go6f_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count=0;\n  for(auto num:arr){\n    long sum=0;\n    if(num<0){\n      sum=num*-1;\n\
    \    }\n    else{\n      sum=num;\n    }\n    while(sum>0){\n      int rem=sum%10;\n\
    \      sum=sum/10;\n      count=count+rem;\n    }\n    if(count>0){\n      return\
    \ count;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpf6z1dr06: /tmp/tmpf6z1dr06.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (auto el: arr) {\n        int sum = 0;\n        if (el\
    \ < 0) {\n            sum += el % 10;\n            el /= 10;\n        }\n    \
    \    while (el > 0) {\n            sum += el % 10;\n            el /= 10;\n  \
    \      }\n        if (sum > 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbnuu2eam: /tmp/tmpbnuu2eam.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   long\
    \ _sum_ = 0;\n   for (long i = 0; i < arr.size(); i++) {\n       std::string s\
    \ = std::to_string(arr[i]);\n       long sum = 0;\n       for (long j = 0; j <\
    \ s.length(); j++) {\n           long val = (s[j] - '0');\n           if (arr[i]\
    \ < 0) {\n               val = -val;\n           }\n           sum += val;\n \
    \      }\n       if (sum > 0) {\n           _sum_++;\n       }\n   }\n   return\
    \ _sum_;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2_g2mtib: /tmp/tmp2_g2mtib.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpicrs0vz6: /tmp/tmpicrs0vz6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i=0; i<arr.size(); i++) {\n    long num = arr[i];\n\
    \    if (num < 0) num = -num;\n    long sum = 0;\n    while (num > 0) {\n    \
    \  sum += num % 10;\n      num /= 10;\n    }\n    if (sum > 0) count++;\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpewr0ecar: /tmp/tmpewr0ecar.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int s = 0;\n    int t = 0;\n    for (int i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] > 0) {\n            s = arr[i];\n            t = 0;\n       \
    \     while (s > 0) {\n                t += s % 10;\n                s /= 10;\n\
    \            }\n            if (t > 0) {\n                arr[i] = 1;\n      \
    \      }\n            else {\n                arr[i] = 0;\n            }\n   \
    \     }\n        else {\n            s = -arr[i];\n            t = 0;\n      \
    \      while (s > 0) {\n                t += s % 10;\n                s /= 10;\n\
    \            }\n            if (t > 0) {\n                arr[i] = 1;\n      \
    \      }\n            else {\n                arr[i] = 0;\n            }\n   \
    \     }\n    }\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        count += arr[i];\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpy4jujynt: /tmp/tmpy4jujynt.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n        \
    \    arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxb4p3no2: /tmp/tmpxb4p3no2.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdid57xdb: /tmp/tmpdid57xdb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  return\
    \ -1;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptblsa9vl: /tmp/tmptblsa9vl.cpp:18: int main(): Assertion `candidate((std::vector<long>()))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tint\
    \ count = 0;\n\tstd::vector<long>::iterator itr = arr.begin();\n\twhile (itr !=\
    \ arr.end()) {\n\t\tlong sum = 0;\n\t\tif (*itr < 0) {\n\t\t\tlong number = *itr\
    \ * -1;\n\t\t\twhile (number > 0) {\n\t\t\t\tsum += number % 10;\n\t\t\t\tnumber\
    \ /= 10;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlong number = *itr;\n\t\t\twhile (number\
    \ > 0) {\n\t\t\t\tsum += number % 10;\n\t\t\t\tnumber /= 10;\n\t\t\t}\n\t\t}\n\
    \t\titr++;\n\t\tif (sum > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpflp4_36j: /tmp/tmpflp4_36j.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long j = arr[i];\n        if (j < 0) {\n            j = -j;\n\
    \        }\n        while (j != 0) {\n            sum += j % 10;\n           \
    \ j /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8omi_2ka: /tmp/tmp8omi_2ka.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long num = abs(arr[i]);\n        long sum = 0;\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcm6l51t2: /tmp/tmpcm6l51t2.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long cnt = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long pos_num\
    \ = 0;\n        int count = 0;\n        long temp = 0;\n        if (arr[i] < 0)\
    \ {\n            pos_num = arr[i] * -1;\n        } else {\n            pos_num\
    \ = arr[i];\n        }\n        while (pos_num != 0) {\n            temp = pos_num\
    \ % 10;\n            pos_num = pos_num / 10;\n            count = count + temp;\n\
    \        }\n        if (count > 0) {\n            cnt++;\n        }\n    }\n \
    \   return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5s_dcbqq: /tmp/tmp5s_dcbqq.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ your code here...\n  int count=0;\n  for(unsigned i=0;i<arr.size();i++){\n \
    \   int sum=0;\n    if(arr[i]<0){\n      arr[i]*=-1;\n    }\n    while(arr[i]>0){\n\
    \      sum+=arr[i]%10;\n      arr[i]/=10;\n    }\n    if(sum>0){\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc_hxtuuu: /tmp/tmpc_hxtuuu.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ replace the line below with your code\n  return 0;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1hf_n2ht: /tmp/tmp1hf_n2ht.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count=0;\n    for(int i=0;i<arr.size();i++){\n        int sum=0;\n    \
    \    long num=abs(arr[i]);\n        while(num>0){\n            sum+=num%10;\n\
    \            num/=10;\n        }\n        if(sum>0) count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpe3yekqkz: /tmp/tmpe3yekqkz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n  \
    \  if (arr[i] < 0) {\n      arr[i] = arr[i] * -1;\n    }\n    while (arr[i] >\
    \ 0) {\n      sum += arr[i] % 10;\n      arr[i] = arr[i] / 10;\n    }\n    if\
    \ (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7cq2w4dg: /tmp/tmp7cq2w4dg.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        int num\
    \ = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n    \
    \    while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum == 0) {\n            continue;\n        }\n      \
    \  else {\n            sum = 0;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3gbm91_z: /tmp/tmp3gbm91_z.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long out0 = 0;\n    for (auto && i: arr) {\n        if (i == 0) {\n        \
    \    continue;\n        }\n        if (i < 0) {\n            i = i * -1;\n   \
    \     }\n        long sum = 0;\n        while (i > 0) {\n            sum += i\
    \ % 10;\n            i = i / 10;\n        }\n        if (sum > 0) {\n        \
    \    out0++;\n        }\n    }\n    return out0;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxari0o0x: /tmp/tmpxari0o0x.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int ctr = 0;\n    std::vector<long>::iterator itr;\n    for(itr = arr.begin();\
    \ itr!=arr.end(); itr++){\n        long n = *itr;\n        long sum = 0;\n   \
    \     while(n){\n            sum += abs(n%10);\n            n /= 10;\n       \
    \ }\n        if(sum != 0)\n            ctr++;\n    }\n    return ctr;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphr720_jc: /tmp/tmphr720_jc.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ sum = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tlong x = arr[i];\n\t\
    \tif (x < 0) {\n\t\t\tx = -x;\n\t\t}\n\t\twhile (x > 0) {\n\t\t\tsum += x % 10;\n\
    \t\t\tx /= 10;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc_i3c7vv: /tmp/tmpc_i3c7vv.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ sum = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] < 0) {\n\
    \t\t\tarr[i] = arr[i] * -1;\n\t\t}\n\t\tint temp = arr[i];\n\t\twhile (temp !=\
    \ 0) {\n\t\t\tint mod = temp % 10;\n\t\t\tsum = sum + mod;\n\t\t\ttemp = temp\
    \ / 10;\n\t\t}\n\t\tif (sum == 0) {\n\t\t\tarr[i] = 0;\n\t\t}\n\t\tsum = 0;\n\t\
    }\n\tint count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i]\
    \ != 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcyjfzkdy: /tmp/tmpcyjfzkdy.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // write your code here\n    long count = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        int firstDigit = arr[i] < 0 ? -1 : 1;\n        long sum = 0;\n\
    \        while(arr[i] != 0){\n            sum += arr[i] % 10;\n            arr[i]\
    \ /= 10;\n        }\n        if(sum * firstDigit > 0)\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9te99gl6: /tmp/tmp9te99gl6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long n =\
    \ arr[i];\n        long add = 0;\n        if (n < 0) {\n            n = -n;\n\
    \            add = -1;\n        }\n        while (n > 0) {\n            add +=\
    \ n % 10;\n            n /= 10;\n        }\n        if (add > 0) {\n         \
    \   ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpm8yd5wcl: /tmp/tmpm8yd5wcl.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ size = arr.size();\n  long count = 0;\n  for (int i = 0; i < size; i++) {\n\
    \    int sum = 0;\n    std::string s = std::to_string(arr[i]);\n    for (int j\
    \ = 0; j < s.length(); j++) {\n      if (s[j] == '-') {\n        s.erase(j, 1);\n\
    \        s.insert(j, \"+\");\n      }\n    }\n    std::stringstream ssin(s);\n\
    \    while (ssin.good()) {\n      std::string temp;\n      ssin >> temp;\n   \
    \   std::stringstream ss(temp);\n      int token;\n      ss >> token;\n      sum\
    \ += token;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpqqvvy30v: /tmp/tmpqqvvy30v.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // your code here!\n    long ans = 0;\n    long sum = 0;\n    for(auto i : arr){\n\
    \        sum = 0;\n        while(i != 0){\n            sum += abs(i%10);\n   \
    \         i = i/10;\n        }\n        if(sum > 0){\n            ans++;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpm7wuzuub: /tmp/tmpm7wuzuub.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  std::vector<long>\
    \ arr1(arr.size());\n  for (int i = 0; i < arr.size(); i++) {\n    int sum = 0;\n\
    \    if (arr[i] < 0) {\n      arr[i] = arr[i] * -1;\n    }\n    while (arr[i]\
    \ != 0) {\n      int rem = arr[i] % 10;\n      sum = sum + rem;\n      arr[i]\
    \ = arr[i] / 10;\n    }\n    arr1[i] = sum;\n  }\n  long count = 0;\n  for (int\
    \ i = 0; i < arr1.size(); i++) {\n    if (arr1[i] > 0) {\n      count = count\
    \ + 1;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9qvz9b11: /tmp/tmp9qvz9b11.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ if (arr.size() == 0) {\n        return 0;\n    }\n    int count = 0;\n    for\
    \ (auto &i : arr) {\n        long sum = 0;\n        long abs_i = abs(i);\n   \
    \     while (abs_i != 0) {\n            sum += abs_i % 10;\n            abs_i\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwaicpd5p: /tmp/tmpwaicpd5p.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ sum = 0;\n  int count = 0;\n  int sign = 1;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    for (int j = 0;\
    \ j < arr.size(); j++) {\n      sum += arr[j] % 10;\n      arr[j] /= 10;\n   \
    \ }\n    if (sum > 0) {\n      count++;\n    }\n    sum = 0;\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpd98v0b2j: /tmp/tmpd98v0b2j.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdid57xdb: /tmp/tmpdid57xdb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tif\
    \ (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\tint result = 0;\n\tfor (int i = 0;\
    \ i < arr.size(); i++) {\n\t\tint sum = 0;\n\t\tint num = arr[i];\n\t\twhile (num\
    \ != 0) {\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (sum > 0) {\n\
    \t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjishwkv_: /tmp/tmpjishwkv_.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while (arr[i]\
    \ > 0) {\n            int a = arr[i] % 10;\n            sum = sum + a;\n     \
    \       arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n           \
    \ sum = 0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpqn8olold: /tmp/tmpqn8olold.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ r = 0;\n  for (auto&& elem : arr) {\n    long t = elem;\n    long s = 0;\n \
    \   if (t < 0) {\n      t = -t;\n      s += t % 10;\n      t /= 10;\n    }\n \
    \   while (t > 0) {\n      s += t % 10;\n      t /= 10;\n    }\n    if (s > 0)\
    \ {\n      r++;\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpezuybs0n: /tmp/tmpezuybs0n.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (auto x : arr) {\n        int i;\n        if (x < 0)\
    \ {\n            i = -x;\n        } else {\n            i = x;\n        }\n  \
    \      while (i > 0) {\n            sum += i % 10;\n            i /= 10;\n   \
    \     }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmprhw22mjs: /tmp/tmprhw22mjs.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while (arr[i]\
    \ > 0) {\n            count += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmproh8lk6s: /tmp/tmproh8lk6s.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        // If negative,\
    \ convert to positive to make summing easier.\n        if (arr[i] < 0) {\n   \
    \         arr[i] = arr[i] * -1;\n        }\n        // Sum each digit\n      \
    \  long temp = arr[i];\n        while (temp > 0) {\n            sum += temp %\
    \ 10;\n            temp /= 10;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_zl3hrgy: /tmp/tmp_zl3hrgy.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\t//\
    \ Write your code here!\n\tint count = 0;\n\tfor (int i = 0; i < arr.size(); i++)\
    \ {\n\t\tint sum = 0;\n\t\tif (arr[i] < 0) {\n\t\t\tarr[i] = arr[i] * -1;\n\t\t\
    }\n\t\twhile (arr[i] > 0) {\n\t\t\tsum += arr[i] % 10;\n\t\t\tarr[i] = arr[i]\
    \ / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxnna7bqz: /tmp/tmpxnna7bqz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto it = arr.begin(); it != arr.end(); it++) {\n\
    \        if (*it < 0) {\n            *it = -(*it);\n        }\n        int sum\
    \ = 0;\n        while (*it > 0) {\n            sum += *it % 10;\n            *it\
    \ /= 10;\n        }\n        if (sum != 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpemtowemx: /tmp/tmpemtowemx.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long d = arr[i];\n\
    \    if (d == 0) {\n      count++;\n    } else if (d < 0) {\n      int s = 0;\n\
    \      while (d != 0) {\n        int r = d % 10;\n        s += r;\n        d =\
    \ d / 10;\n      }\n      if (s < 0) {\n        count++;\n      }\n    } else\
    \ {\n      int s = 0;\n      while (d != 0) {\n        int r = d % 10;\n     \
    \   s += r;\n        d = d / 10;\n      }\n      if (s > 0) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpw0e13ss3: /tmp/tmpw0e13ss3.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count=0;\n    for(long i=0;i<arr.size();i++){\n        long sum=0;\n  \
    \      if(arr[i]<0){\n            arr[i]=-arr[i];\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n            sum+=arr[i]%10;\n            arr[i]/=10;\n\
    \            sum+=arr[i]%10;\n            arr[i]/=10;\n            sum+=arr[i]%10;\n\
    \            arr[i]\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnxfzqp35.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnxfzqp35.cpp:62:19: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   62 |             arr[i]\n      |                   ^\n\
    \      |                   ;\n   63 | }\n      | ~                  \n/tmp/tmpnxfzqp35.cpp:64:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   64 | int main() {\n      |            ^\n/tmp/tmpnxfzqp35.cpp:74:1: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpnxfzqp35.cpp:15:35:\
    \ note: to match this \u2018{\u2019\n   15 |     for(long i=0;i<arr.size();i++){\n\
    \      |                                   ^\n/tmp/tmpnxfzqp35.cpp:74:1: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpnxfzqp35.cpp:13:40:\
    \ note: to match this \u2018{\u2019\n   13 | long count_nums(std::vector<long>\
    \ arr) {\n      |                                        ^\n/tmp/tmpnxfzqp35.cpp:74:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660117884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ return -1;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpg9w7u09d: /tmp/tmpg9w7u09d.cpp:18: int main(): Assertion `candidate((std::vector<long>()))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  for (auto i : arr) {\n    int digit_sum = 0;\n    int x = i;\n\
    \    if (x < 0) {\n      digit_sum += x % 10;\n      x /= 10;\n    }\n    while\
    \ (x > 0) {\n      digit_sum += x % 10;\n      x /= 10;\n    }\n    if (digit_sum\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp29cp4xpy: /tmp/tmp29cp4xpy.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ //YOUR CODE HERE\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        long temp = arr[i];\n        while (temp != 0) {\n            sum\
    \ += abs(temp % 10);\n            temp /= 10;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp18izn3b_: /tmp/tmp18izn3b_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ ans = 0;\n\tfor (auto x : arr) {\n\t\tlong cur_sum = 0;\n\t\tlong n = std::abs(x);\n\
    \t\twhile (n > 0) {\n\t\t\tcur_sum += n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\tif (cur_sum\
    \ > 0)\n\t\t\tans++;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7y_j0yw8: /tmp/tmp7y_j0yw8.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \  assert(arr.size() >= (size_t)1);\n  return 0;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpzbataoah: /tmp/tmpzbataoah.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ your code here\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp16f1b83t: /tmp/tmp16f1b83t.cpp:18: int main(): Assertion `candidate((std::vector<long>()))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tint\
    \ count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\t\
    int x = abs(arr[i]);\n\t\twhile (x != 0) {\n\t\t\tsum += x % 10;\n\t\t\tx /= 10;\n\
    \t\t}\n\t\tif (sum != 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxl13yigy: /tmp/tmpxl13yigy.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ your code here\n  long count = 0;\n  for(long i = 0; i < arr.size(); i++){\n\
    \      long sum = 0;\n      if(arr[i] < 0){\n          sum += (-1 * arr[i]);\n\
    \      }else{\n          sum += arr[i];\n      }\n      while(sum != 0){\n   \
    \       sum -= sum % 10;\n          sum /= 10;\n          if(sum != 0){\n    \
    \          count++;\n          }\n      }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_qjdt_m8: /tmp/tmp_qjdt_m8.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ sum = 0;\n\tfor (auto n : arr) {\n\t\tlong digits_sum = 0;\n\t\tif (n < 0) n\
    \ = -n;\n\t\twhile (n > 0) {\n\t\t\tdigits_sum += n % 10;\n\t\t\tn /= 10;\n\t\t\
    }\n\t\tif (digits_sum > 0) sum++;\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5dgxl7ly: /tmp/tmp5dgxl7ly.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ x = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    long n = arr[i];\n\
    \    while (n != 0) {\n      x += abs(n % 10);\n      n /= 10;\n    }\n  }\n \
    \ return x;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpoyzrzynk: /tmp/tmpoyzrzynk.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long n : arr) {\n        if (n < 0) n = -n;\n      \
    \  while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpoutc8a8t: /tmp/tmpoutc8a8t.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long cnt=0;\n    for(auto i=arr.begin();i!=arr.end();i++){\n        long sum=0;\n\
    \        if(*i<0){\n            sum+=(*i/10)%10;\n            *i=abs(*i);\n  \
    \      }\n        while(*i){\n            sum+=(*i)%10;\n            *i/=10;\n\
    \        }\n        if(sum)\n            cnt++;\n    }\n    return cnt;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2terx_gd: /tmp/tmp2terx_gd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ implement the function.\n  int num_digits = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int sum = 0;\n    int digits = 0;\n    if (arr[i] < 0) {\n     \
    \ digits = digits + 1;\n      int temp = arr[i] / -10;\n      while (temp > 0)\
    \ {\n        digits = digits + 1;\n        temp = temp / 10;\n      }\n      int\
    \ remainder = 0;\n      int divisor = 0;\n      for (int j = 0; j < digits; j++)\
    \ {\n        divisor = pow(10, digits - j - 1);\n        remainder = arr[i] %\
    \ divisor;\n        arr[i] = arr[i] / divisor;\n        sum = sum + arr[i];\n\
    \        arr[i] = remainder;\n      }\n    } else {\n      int temp = arr[i];\n\
    \      while (temp > 0) {\n        digits = digits + 1;\n        temp = temp /\
    \ 10;\n      }\n      int remainder = 0;\n      int divisor = 0;\n      for (int\
    \ j = 0; j < digits; j++) {\n        divisor = pow(10, digits - j - 1);\n    \
    \    remainder = arr[i] % divisor;\n        arr[i] = arr[i] / divisor;\n     \
    \   sum = sum + arr[i];\n        arr[i] = remainder;\n      }\n    }\n    if (sum\
    \ > 0) {\n      num_digits = num_digits + 1;\n    }\n  }\n  return num_digits;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2mkvjjuz: /tmp/tmp2mkvjjuz.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ length=arr.size();\n\tlong count=0;\n\tlong sum=0;\n\tfor(long i=0;i<length;i++)\n\
    \t{\n\t\tsum=0;\n\t\t//std::cout<<arr[i]<<\"\\n\";\n\t\tif(arr[i]<0)\n\t\t{\n\t\
    \t\tarr[i]=arr[i]*(-1);\n\t\t}\n\t\t// std::cout<<arr[i]<<\"\\n\";\n\t\twhile(arr[i]>0)\n\
    \t\t{\n\t\t\tsum=sum+arr[i]%10;\n\t\t\tarr[i]=arr[i]/10;\n\t\t}\n\t\t// std::cout<<sum<<\"\
    \\n\";\n\t\tif(sum>0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t// std::cout<<count<<\"\
    \\n\";\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp88p6kfr6: /tmp/tmp88p6kfr6.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ make sure to return the correct value\n  int r=0;\n  for(int i=0;i<arr.size();i++){\n\
    \  \tint s=0;\n  \tif(arr[i]<0){\n  \t\twhile(arr[i]<0){\n  \t\t\ts+=arr[i]%10;\n\
    \  \t\t\tarr[i]/=10;\n  \t\t}\n  \t}\n  \telse{\n  \t\twhile(arr[i]>0){\n  \t\t\
    \ts+=arr[i]%10;\n  \t\t\tarr[i]/=10;\n  \t\t}\n  \t}\n  \tif(s>0)\n  \t\tr++;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjwd7pl0u: /tmp/tmpjwd7pl0u.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        int temp = arr[i];\n        if (temp < 0) {\n            temp = temp\
    \ * -1;\n        }\n        sum = 0;\n        while (temp > 0) {\n           \
    \ sum += temp % 10;\n            temp = temp / 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbe6pluld: /tmp/tmpbe6pluld.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // Write your code here\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9kcjl6qb: /tmp/tmp9kcjl6qb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count=0;\n    for(long i=0;i<arr.size();i++){\n        int sum=0;\n    \
    \    if(arr[i]<0){\n            arr[i]=-arr[i];\n        }\n        while(arr[i]>0){\n\
    \            sum=sum+arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n  \
    \      if(sum>0){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbalwgc9a: /tmp/tmpbalwgc9a.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long n = arr.size();\n    int count = 0;\n    for(long i = 0; i < n; i++) {\n\
    \        if(arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n    \
    \    int sum = 0;\n        while(arr[i] > 0) {\n            sum += arr[i] % 10;\n\
    \            arr[i] = arr[i] / 10;\n        }\n        if(sum > 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb4x1ts0c: /tmp/tmpb4x1ts0c.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 0) {\n            long num = arr[i];\n            long sum = 0;\n       \
    \     while (num > 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        } else {\n            long num = -arr[i];\n          \
    \  long sum = 0;\n            while (num > 0) {\n                sum += num %\
    \ 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmxdllhtf: /tmp/tmpmxdllhtf.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  /*\
    \ Fill in your code here */\n  std::vector<long>::iterator itr;\n  long res =\
    \ 0;\n  for(itr = arr.begin(); itr != arr.end(); itr++) {\n    long temp = *itr;\n\
    \    if (temp < 0) {\n      temp = -temp;\n    }\n    if (temp == 0) {\n     \
    \ res++;\n      continue;\n    }\n    long s = 0;\n    while (temp != 0) {\n \
    \     s += temp % 10;\n      temp /= 10;\n    }\n    if (s > 0) {\n      res++;\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpv28veg8n: /tmp/tmpv28veg8n.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ ctr = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      arr[i] = arr[i] * -1;\n    }\n    long sum = 0;\n    while (arr[i] > 0)\
    \ {\n      sum += arr[i] % 10;\n      arr[i] = arr[i] / 10;\n    }\n    if (sum\
    \ > 0) {\n      ctr++;\n    }\n  }\n  return ctr;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpuy4owjc7: /tmp/tmpuy4owjc7.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int cnt = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long num =\
    \ arr[i];\n        if (num < 0) num = -num;\n        int sum = 0;\n        while\
    \ (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\
    \        if (sum > 0) cnt++;\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4jhytb2c: /tmp/tmp4jhytb2c.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ Your code here\n  long count = 0;\n  long digitsum = 0;\n  long absnum = 0;\n\
    \  long absdigit = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    digitsum\
    \ = 0;\n    if (arr[i] < 0) {\n      absnum = arr[i] * -1;\n      absdigit = arr[i]\
    \ * -1;\n    } else {\n      absnum = arr[i];\n      absdigit = arr[i];\n    }\n\
    \    // std::cout << \"absnum\" << absnum << '\\n';\n    // std::cout << \"absdigit\"\
    \ << absdigit << '\\n';\n    // std::cout << \"digitsum\" << digitsum << '\\n';\n\
    \    while (absnum > 0) {\n      // std::cout << \"absnum\" << absnum << '\\n';\n\
    \      digitsum += absnum % 10;\n      absnum = absnum / 10;\n    }\n    if (digitsum\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_3fl8ik7: /tmp/tmp_3fl8ik7.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ long result = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong number\
    \ = arr[i];\n\t\tlong long sum = 0;\n\t\tif (number < 0) {\n\t\t\tnumber = -number;\n\
    \t\t\tsum = -number % 10;\n\t\t\tnumber /= 10;\n\t\t}\n\t\twhile (number != 0)\
    \ {\n\t\t\tsum += number % 10;\n\t\t\tnumber /= 10;\n\t\t}\n\t\tif (sum > 0) {\n\
    \t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_ds8ep_r: /tmp/tmp_ds8ep_r.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // Your code goes here\n    int count = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] < 0){\n            arr[i] = arr[i] * -1;\n        }\n\
    \        int sum = 0;\n        int digit = 0;\n        while(arr[i] != 0){\n \
    \           digit = arr[i] % 10;\n            sum += digit;\n            arr[i]\
    \ = arr[i] / 10;\n        }\n        if(sum > 0){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7hhhp1r1: /tmp/tmp7hhhp1r1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ return std::count_if(arr.begin(), arr.end(), [](long x) {\n        long sum\
    \ = 0;\n        for (long y = x; y != 0; y /= 10)\n            sum += abs(y %\
    \ 10);\n        return sum > 0;\n    });\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppw63umow: /tmp/tmppw63umow.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            std::string mystr = std::to_string(arr[i]);\n          \
    \  long mysum = mystr[0] - '0';\n            for (long j = 1; j < mystr.size();\
    \ j++) {\n                mysum += mystr[j] - '0';\n            }\n          \
    \  if (mysum > 0) {\n                count++;\n            }\n        } else {\n\
    \            std::string mystr = std::to_string(arr[i]);\n            long mysum\
    \ = 0;\n            for (long j = 0; j < mystr.size(); j++) {\n              \
    \  mysum += mystr[j] - '0';\n            }\n            if (mysum > 0) {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppbt0diwv: /tmp/tmppbt0diwv.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ counter = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0)\
    \ {\n      counter++;\n    }\n    long curr = arr[i];\n    long sum = 0;\n   \
    \ while (curr != 0) {\n      sum += curr % 10;\n      curr /= 10;\n    }\n   \
    \ if (sum > 0) {\n      counter++;\n    }\n  }\n  return counter;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpph3ojw91: /tmp/tmpph3ojw91.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int counter = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long x\
    \ = arr[i];\n        long temp = 0;\n        if (x < 0) {\n            x = -x;\n\
    \        }\n        if (x == 0) {\n            continue;\n        }\n        while\
    \ (x != 0) {\n            temp += x % 10;\n            x /= 10;\n        }\n \
    \       if (temp > 0) {\n            counter++;\n        }\n    }\n    return\
    \ counter;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpx6miimd3: /tmp/tmpx6miimd3.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  std::for_each(arr.begin(), arr.end(), [&count](long l) {\n   \
    \ long ll = l < 0 ? l * -1 : l;\n    while (ll > 0) {\n      count += ll % 10;\n\
    \      ll /= 10;\n    }\n  });\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9qpz_cvf: /tmp/tmp9qpz_cvf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long digit_sum\
    \ = 0;\n        long temp = arr[i];\n        if (temp < 0) {\n            digit_sum\
    \ += -temp % 10;\n            temp /= -10;\n        }\n        while (temp > 0)\
    \ {\n            digit_sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        if (digit_sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp63wy22gy: /tmp/tmp63wy22gy.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0)\n            i = -i;\n        while (i > 0) {\n            sum += i\
    \ % 10;\n            i /= 10;\n        }\n        if (sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpo1_49os9: /tmp/tmpo1_49os9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        int signed_digits_sum\
    \ = 0;\n        if (arr[i] < 0) {\n            signed_digits_sum += -1;\n    \
    \        arr[i] *= -1;\n        }\n        while (arr[i] > 0) {\n            signed_digits_sum\
    \ += arr[i] % 10;\n            arr[i] /= 10;\n        }\n        if (signed_digits_sum\
    \ > 0) {\n            sum++;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbc7_esbx: /tmp/tmpbc7_esbx.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdid57xdb: /tmp/tmpdid57xdb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117882
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\nlong\
    \ count = 0;\nfor (long i = 0; i < arr.size(); i++) {\nif (arr[i] < 0) {\narr[i]\
    \ = arr[i] * -1;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzp4f8lps.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzp4f8lps.cpp:19:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   19 | int main() {\n      |     \
    \       ^\n/tmp/tmpzp4f8lps.cpp:29:1: error: expected \u2018}\u2019 at end of\
    \ input\n   29 | }\n      | ^\n/tmp/tmpzp4f8lps.cpp:15:39: note: to match this\
    \ \u2018{\u2019\n   15 | for (long i = 0; i < arr.size(); i++) {\n      |    \
    \                                   ^\n/tmp/tmpzp4f8lps.cpp:29:1: error: expected\
    \ \u2018}\u2019 at end of input\n   29 | }\n      | ^\n/tmp/tmpzp4f8lps.cpp:13:40:\
    \ note: to match this \u2018{\u2019\n   13 | long count_nums(std::vector<long>\
    \ arr) {\n      |                                        ^\n/tmp/tmpzp4f8lps.cpp:29:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   29 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660117885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ len = arr.size();\n\tlong ans = 0;\n\tfor (long i = 0; i < len; i++) {\n\t\t\
    long s = 0;\n\t\tlong x = arr[i];\n\t\tif (x < 0) {\n\t\t\ts = x % 10;\n\t\t\t\
    x = x / -10;\n\t\t}\n\t\twhile (x != 0) {\n\t\t\ts += x % 10;\n\t\t\tx = x / 10;\n\
    \t\t}\n\t\tif (s > 0) {\n\t\t\tans++;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdzdx93ye: /tmp/tmpdzdx93ye.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  int sum = 0;\n  int temp = 0;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      arr[i] = arr[i] * -1;\n    }\n    temp\
    \ = arr[i];\n    while (temp > 0) {\n      sum = sum + temp % 10;\n      temp\
    \ = temp / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n    sum = 0;\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpqjc78ozu: /tmp/tmpqjc78ozu.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n \
    \   long num = arr[i];\n    if (num < 0) {\n      sum += num * -1;\n      num\
    \ = num * -1;\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num\
    \ = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7ao1qxj6: /tmp/tmp7ao1qxj6.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (long number : arr) {\n        std::string numString\
    \ = std::to_string(number);\n        int sum = 0;\n        for (char ch : numString)\
    \ {\n            sum += (ch-'0');\n        }\n        if (sum != 0) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwqnv0ew3: /tmp/tmpwqnv0ew3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // your code here\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvp68nm40: /tmp/tmpvp68nm40.cpp:18: int main(): Assertion `candidate((std::vector<long>()))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long n = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            n += arr[i] * -1;\n        } else {\n            n += arr[i];\n\
    \        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmple18_e93: /tmp/tmple18_e93.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    int sum_of_digits = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 0) {\n            int number = arr[i];\n     \
    \       while (number != 0) {\n                sum_of_digits += number % 10;\n\
    \                number /= 10;\n            }\n            if (sum_of_digits >\
    \ 0) {\n                count++;\n            }\n            sum_of_digits = 0;\n\
    \        }\n        else {\n            int number = arr[i];\n            while\
    \ (number != 0) {\n                sum_of_digits += number % 10;\n           \
    \     number /= 10;\n            }\n            sum_of_digits = -sum_of_digits;\n\
    \            if (sum_of_digits > 0) {\n                count++;\n            }\n\
    \            sum_of_digits = 0;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptxd5xbzi: /tmp/tmptxd5xbzi.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count=0;\n\tlong i=0;\n\tfor(i=0;i<arr.size();i++)\n\t{\n\t\tlong temp = arr[i];\n\
    \t\tif(temp<0)\n\t\t\ttemp = -temp;\n\t\tlong r;\n\t\twhile(temp!=0)\n\t\t{\n\t\
    \t\tr = temp%10;\n\t\t\tcount+=r;\n\t\t\ttemp = temp/10;\n\t\t}\n\t\tif(count!=0)\n\
    \t\t\tcount=1;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp0l73deit: /tmp/tmp0l73deit.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // your code here\n    long cnt = 0;\n    for(long i = 0; i < arr.size(); i++){\n\
    \        long sum = 0;\n        if(arr[i] < 0){\n            sum = arr[i] * -1;\n\
    \        }else{\n            sum = arr[i];\n        }\n        while(sum > 0){\n\
    \            sum = sum / 10;\n            cnt++;\n        }\n    }\n    return\
    \ cnt;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpz2dktsso: /tmp/tmpz2dktsso.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long j = 0; j < arr.size(); j++) {\n        long i\
    \ = arr[j];\n        if (i < 0) {\n            i = -i;\n        }\n        long\
    \ total = 0;\n        while (i > 0) {\n            total += i % 10;\n        \
    \    i /= 10;\n        }\n        if (total > 0) {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmprj4xa2sk: /tmp/tmprj4xa2sk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    int sum = 0;\n   \
    \ int temp = arr[i];\n    while (temp != 0) {\n      int remain = temp % 10;\n\
    \      sum += abs(remain);\n      temp = temp / 10;\n    }\n    if (sum > 0) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3urysndb: /tmp/tmp3urysndb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ std::vector<long> inputs;\n    for (auto& n : arr) {\n        inputs.push_back(n);\n\
    \    }\n    return inputs.size();\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsyn02lk2: /tmp/tmpsyn02lk2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n\
    \        int sum = 0;\n        int temp = arr[i];\n        if(temp == 0) {\n \
    \           count++;\n            continue;\n        }\n        if(temp < 0) {\n\
    \            temp = temp * -1;\n        }\n        while(temp > 0) {\n       \
    \     sum += temp % 10;\n            temp = temp / 10;\n        }\n        if(sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpveqw2wsv: /tmp/tmpveqw2wsv.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tint\
    \ c=0;\n\tfor(int i=0;i<arr.size();i++)\n\t{\n\t\tif(arr[i]<0)\n\t\t{\n\t\t\t\
    arr[i]*=-1;\n\t\t}\n\t\tint sum=0;\n\t\twhile(arr[i]!=0)\n\t\t{\n\t\t\tint x=arr[i]%10;\n\
    \t\t\tsum+=x;\n\t\t\tarr[i]/=10;\n\t\t}\n\t\tif(sum>0)\n\t\t{\n\t\t\tc++;\n\t\t\
    }\n\t}\n\treturn c;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpp1a2g125: /tmp/tmpp1a2g125.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tint\
    \ i, j, l, sum;\n\tlong count = 0;\n\tfor (i = 0; i < arr.size(); i++) {\n\t\t\
    sum = 0;\n\t\tfor (j = 0; arr[i] > 0 && j < 10; j++) {\n\t\t\tsum += arr[i] %\
    \ 10;\n\t\t\tarr[i] /= 10;\n\t\t}\n\t\tif (arr[i] > 0 && arr[i] != -1) {\n\t\t\
    \tcount++;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7k655vru: /tmp/tmp7k655vru.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long temp = 0;\n\
    \    if (arr[i] < 0) {\n      temp += arr[i] * -1;\n    } else {\n      temp +=\
    \ arr[i];\n    }\n    while (temp != 0) {\n      count += temp % 10;\n      temp\
    \ /= 10;\n    }\n    if (count != 0) {\n      count = 1;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpk05lvnzs: /tmp/tmpk05lvnzs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (auto n : arr) {\n    long temp = n;\n    long signedDigitSum\
    \ = 0;\n    while (temp != 0) {\n      long signedDigit = temp % 10;\n      if\
    \ (n < 0) {\n        signedDigit = -signedDigit;\n      }\n      signedDigitSum\
    \ += signedDigit;\n      temp /= 10;\n    }\n    if (signedDigitSum > 0) {\n \
    \     count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5tn1w2f9: /tmp/tmp5tn1w2f9.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long total = 0;\n    long my_sum = 0;\n    long num_digits = 0;\n    int sign\
    \ = 1;\n    for (auto const& element : arr) {\n        if (element < 0) {\n  \
    \          sign = -1;\n        }\n        else {\n            sign = 1;\n    \
    \    }\n        num_digits = 0;\n        for (long n = sign * element; n != 0;\
    \ n /= 10) {\n            ++num_digits;\n        }\n        for (long n = sign\
    \ * element; n != 0; n /= 10) {\n            int my_digit = (sign * n) % 10;\n\
    \            my_sum += my_digit;\n        }\n        if (my_sum > 0) {\n     \
    \       total += 1;\n        }\n        my_sum = 0;\n    }\n    return total;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1rh0uajo: /tmp/tmp1rh0uajo.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long temp=0;\n    long count=0;\n    for(long i=0;i<arr.size();i++){\n     \
    \   temp=arr[i];\n        if(temp<0){\n            temp=temp*(-1);\n        }\n\
    \        std::vector<long> digits;\n        long digit=0;\n        while(temp!=0){\n\
    \            digit=temp%10;\n            digits.push_back(digit);\n          \
    \  temp=temp/10;\n        }\n        long sum=0;\n        for(long j=0;j<digits.size();j++){\n\
    \            sum=sum+digits[j];\n        }\n        if(sum>0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpllj06zh9: /tmp/tmpllj06zh9.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ counter = 0;\n  for (auto it = arr.begin(); it != arr.end(); it++) {\n    long\
    \ number = *it;\n    long temp = 0;\n    if (number >= 0) {\n      temp = number;\n\
    \    } else {\n      temp = abs(number);\n    }\n    long sum = 0;\n    while\
    \ (temp > 0) {\n      long rem = temp % 10;\n      sum += rem;\n      temp /=\
    \ 10;\n    }\n    if (sum > 0) {\n      counter++;\n    }\n  }\n  return counter;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp64gzlvp2: /tmp/tmp64gzlvp2.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\t\
    long number = arr[i];\n\t\twhile (number != 0) {\n\t\t\tsum += number % 10;\n\t\
    \t\tnumber /= 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpw8_sz64e: /tmp/tmpw8_sz64e.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 0)\
    \ {\n      int num = arr[i];\n      int sum = 0;\n      while (num != 0) {\n \
    \       sum += num % 10;\n        num /= 10;\n      }\n      if (sum > 0) {\n\
    \        count++;\n      }\n    } else {\n      int num = arr[i];\n      int sum\
    \ = 0;\n      while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n\
    \      }\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpfo00mcbg: /tmp/tmpfo00mcbg.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        while (num != 0) {\n            if\
    \ (num < 0)\n                sum += num % 10 * -1;\n            else\n       \
    \         sum += num % 10;\n            num /= 10;\n        }\n        if (sum\
    \ > 0)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjkr3rv6f: /tmp/tmpjkr3rv6f.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int l = arr.size();\n    int cnt = 0;\n    for(int i = 0; i < l; i++) {\n  \
    \      long sign = arr[i] < 0 ? -1 : 1;\n        long x = arr[i] * sign;\n   \
    \     long sum = 0;\n        while(x > 0) {\n            long last_digit = x %\
    \ 10;\n            sum += last_digit;\n            x /= 10;\n        }\n     \
    \   if(sum * sign > 0) {\n            cnt++;\n        }\n    }\n    return cnt;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpevbpu6wq: /tmp/tmpevbpu6wq.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    long sum = 0;\n    int i;\n    int flag = 0;\n    for(int\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            flag =\
    \ 1;\n            arr[i] = -arr[i];\n        }\n        while(arr[i] != 0) {\n\
    \            sum += arr[i] % 10;\n            arr[i] /= 10;\n        }\n     \
    \   if(flag == 1) {\n            sum = -sum;\n            flag = 0;\n        }\n\
    \        if(sum > 0) {\n            count++;\n        }\n        sum = 0;\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp60iqadeu: /tmp/tmp60iqadeu.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ t=0;\n\tfor(long x:arr)\n\t{\n\t\tlong q=x;\n\t\tif(x<0)\n\t\t\tq*=-1;\n\t\t\
    long s=0;\n\t\twhile(q)\n\t\t{\n\t\t\ts+=q%10;\n\t\t\tq/=10;\n\t\t}\n\t\tif(s>0)\n\
    \t\t\tt++;\n\t}\n\treturn t;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmps0lgaa2_: /tmp/tmps0lgaa2_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long result = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long a\
    \ = arr[i];\n        long sum = 0;\n        while (a) {\n            sum += a\
    \ % 10;\n            a /= 10;\n        }\n        if (sum > 0)\n            result++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsbercb7u: /tmp/tmpsbercb7u.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0) {\n            int sum = 0;\n            long curr = arr[i];\n        \
    \    while (curr != 0) {\n                sum += curr % 10;\n                curr\
    \ /= 10;\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        } else {\n            int sum = 0;\n            long curr\
    \ = arr[i];\n            while (curr != 0) {\n                sum += curr % 10;\n\
    \                curr /= 10;\n            }\n            if (sum < 0) {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmph9humc0y: /tmp/tmph9humc0y.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ number_size = arr.size();\n  int count = 0;\n  for (int i = 0; i < number_size;\
    \ i++) {\n    int current_sum = 0;\n    int current_num = arr[i];\n    if (current_num\
    \ < 0) {\n      current_num = abs(current_num);\n    }\n    while (current_num\
    \ != 0) {\n      current_sum += current_num % 10;\n      current_num /= 10;\n\
    \    }\n    if (current_sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppjvo2ktk: /tmp/tmppjvo2ktk.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppzovj29i: /tmp/tmppzovj29i.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // replace the body of this function with your own implementation\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp25ef21j7: /tmp/tmp25ef21j7.cpp:18: int main(): Assertion `candidate((std::vector<long>()))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += (-1) * (arr[i] % 10);\n\
    \            arr[i] = arr[i] / 10;\n        }\n        while (arr[i] != 0) {\n\
    \            sum += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n        }\n\
    \        if (sum > 0) {\n            ans++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppabpbc0q: /tmp/tmppabpbc0q.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (long x : arr) {\n        long curr = x;\n        long\
    \ sum = 0;\n        while (curr != 0) {\n            sum += curr % 10;\n     \
    \       curr /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpqc8a20c5: /tmp/tmpqc8a20c5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ result = 0;\n\t// YOUR CODE HERE\n\tint n = arr.size();\n\tfor (int i = 0; i\
    \ < n; i++) {\n\t\tint sum = 0;\n\t\tif (arr[i] < 0) {\n\t\t\tsum += -1;\n\t\t\
    \tarr[i] = -arr[i];\n\t\t}\n\t\twhile (arr[i] > 0) {\n\t\t\tsum += arr[i] % 10;\n\
    \t\t\tarr[i] /= 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tresult++;\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp137y6ui3: /tmp/tmp137y6ui3.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ res = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\t\
    long n = arr[i];\n\t\tif (n < 0)\n\t\t\tn = -n;\n\t\twhile (n > 0) {\n\t\t\tsum\
    \ += n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\tif (sum > 0)\n\t\t\tres++;\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmph8fmf1ge: /tmp/tmph8fmf1ge.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbon91nwn: /tmp/tmpbon91nwn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660117880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    long arr_size = arr.size();\n    for (long i = 0; i < arr_size;\
    \ i++) {\n        long digits_sum = 0;\n        long number = abs(arr[i]);\n \
    \       if (number == 0) {\n            digits_sum = 0;\n        } else {\n  \
    \          while (number > 0) {\n                digits_sum += number % 10;\n\
    \                number /= 10;\n            }\n        }\n        if (digits_sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5y9ffhag: /tmp/tmp5y9ffhag.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long rem = 0;\n \
    \   if (arr[i] < 0) {\n      rem = arr[i] % 10;\n      if (rem < 0) {\n      \
    \  rem = rem * -1;\n      }\n    } else {\n      rem = arr[i] % 10;\n    }\n \
    \   long number = arr[i] / 10;\n    while (number > 0) {\n      rem = rem + number\
    \ % 10;\n      number = number / 10;\n    }\n    if (rem > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5vb3hhgx: /tmp/tmp5vb3hhgx.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (auto elem : arr) {\n        // Write your code here\n\
    \        long sum = 0;\n        elem = abs(elem);\n        while (elem > 0) {\n\
    \            sum += elem % 10;\n            elem /= 10;\n        }\n        if\
    \ (sum > 0)\n            count++;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7wg6wuo4: /tmp/tmp7wg6wuo4.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ sum;\n  long count = 0;\n  for (auto elem : arr) {\n    sum = 0;\n    std::string\
    \ s = std::to_string(elem);\n    for (auto c : s) {\n      sum += c - '0';\n \
    \   }\n    if (sum > 0)\n      count++;\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmph2791jrc: /tmp/tmph2791jrc.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long d =\
    \ abs(arr[i]);\n        while (d > 0) {\n            sum += d % 10;\n        \
    \    d /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpac54vy8t: /tmp/tmpac54vy8t.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (auto n : arr) {\n        int sum = 0;\n        bool\
    \ negative = false;\n        if (n < 0) {\n            negative = true;\n    \
    \        n = n * -1;\n        }\n        while (n > 0) {\n            sum += n\
    \ % 10;\n            n /= 10;\n        }\n        if (negative) {\n          \
    \  sum = sum * -1;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5y3f6ydv: /tmp/tmp5y3f6ydv.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tlong temp = arr[i];\n\
    \t\tlong sum = 0;\n\t\tif (temp < 0) {\n\t\t\ttemp = temp * -1;\n\t\t}\n\t\twhile\
    \ (temp > 0) {\n\t\t\tsum += temp % 10;\n\t\t\ttemp = temp / 10;\n\t\t}\n\t\t\
    if (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpuus3u8y8: /tmp/tmpuus3u8y8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num\
    \ = arr[i];\n        long sum = 0;\n        while (num != 0) {\n            long\
    \ digit = num % 10;\n            sum += digit;\n            num /= 10;\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1b3zi63j: /tmp/tmp1b3zi63j.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            arr[i] = -1 * arr[i];\n        }\n        int k = arr[i];\n\
    \        while (k > 0) {\n            sum += k % 10;\n            k = k / 10;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpnhj18tps: /tmp/tmpnhj18tps.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count=0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]==0){\n\
    \            continue;\n        }\n        long digit_sum=0;\n        if(arr[i]<0){\n\
    \            arr[i]*=-1;\n        }\n        while(arr[i]>0){\n            digit_sum+=arr[i]%10;\n\
    \            arr[i]/=10;\n        }\n        if(digit_sum>0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkgmoefta: /tmp/tmpkgmoefta.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // int count = 0;\n    // for (int i = 0; i < arr.size(); i++) {\n    //   \
    \  long num = arr[i];\n    //     if (num < 0) {\n    //         num = -1 * num;\n\
    \    //     }\n    //     int sum = 0;\n    //     while (num > 0) {\n    // \
    \        sum += num % 10;\n    //         num /= 10;\n    //     }\n    //   \
    \  if (sum > 0) {\n    //         count++;\n    //     }\n    // }\n    // return\
    \ count;\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n   \
    \     long num = arr[i];\n        if (num < 0) {\n            num = -1 * num;\n\
    \        }\n        int sum = 0;\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp510w0kgs: /tmp/tmp510w0kgs.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long output = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long\
    \ temp = arr[i];\n        if (temp < 0) {\n            temp = -temp;\n       \
    \ }\n        long sum = 0;\n        while (temp > 0) {\n            sum += temp\
    \ % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n        \
    \    output++;\n        }\n    }\n    return output;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpu69tq19p: /tmp/tmpu69tq19p.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tstd::string str =\
    \ std::to_string(arr[i]);\n\t\tlong sum = 0;\n\t\tfor (long j = 0; j < str.length();\
    \ j++) {\n\t\t\tif (str[j] != '-') {\n\t\t\t\tsum += (str[j] - '0');\n\t\t\t}\n\
    \t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpz1opskie: /tmp/tmpz1opskie.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  int\
    \ i = 0;\n  int j = 0;\n  int index = 0;\n  int count = 0;\n  int s = 0;\n  int\
    \ number = 0;\n  int digit;\n  for (i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ < 0) {\n      arr[i] = arr[i] * -1;\n    }\n    number = arr[i];\n    while\
    \ (number > 0) {\n      digit = number % 10;\n      s = s + digit;\n      number\
    \ = number / 10;\n    }\n    if (s > 0) {\n      count++;\n    }\n    s = 0;\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcgwa4dmv: /tmp/tmpcgwa4dmv.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long counter = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        int sum = 0;\n\
    \        for (; arr[i] > 0; arr[i] = arr[i] / 10) {\n            sum += arr[i]\
    \ % 10;\n        }\n        if (sum > 0) {\n            counter++;\n        }\n\
    \    }\n    return counter;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1eg9dvf1: /tmp/tmp1eg9dvf1.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long num\
    \ = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n    \
    \    long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwtejly7n: /tmp/tmpwtejly7n.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ your code goes here\n  int count = 0;\n  for(int i = 0; i < arr.size(); i++){\n\
    \    int sum = 0;\n    int a = arr[i];\n    if(a < 0){\n      a = a * -1;\n  \
    \  }\n    while(a){\n      sum += a % 10;\n      a /= 10;\n    }\n    if(sum >\
    \ 0){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphdbowhvs: /tmp/tmphdbowhvs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ c=0;\n\tfor(long i:arr)\n\t{\n\t\tlong sum=0;\n\t\twhile(i!=0)\n\t\t{\n\t\t\t\
    sum+=i%10;\n\t\t\ti/=10;\n\t\t}\n\t\tif(sum>0)\n\t\t\tc++;\n\t}\n\treturn c;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpep7hex92: /tmp/tmpep7hex92.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ ret = 0;\n  for (auto &i : arr) {\n    long sum = 0;\n    bool isNegative =\
    \ i < 0;\n    if (isNegative) {\n      i = -i;\n    }\n    while (i) {\n     \
    \ sum += i % 10;\n      i /= 10;\n    }\n    if (isNegative) {\n      sum = -sum;\n\
    \    }\n    if (sum > 0) {\n      ret++;\n    }\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5m8xzja_: /tmp/tmp5m8xzja_.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  \t\
    long count = 0;\n\t  for(int i = 0; i < arr.size(); i++) {\n\t\t    if(arr[i]\
    \ < 0) {\n\t\t\t      arr[i] = arr[i] * -1;\n\t\t    }\n\t\t    while(arr[i] !=\
    \ 0) {\n\t\t\t      count += arr[i] % 10;\n\t\t\t      arr[i] = arr[i] / 10;\n\
    \t\t    }\n\t  }\n  \treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp392geqfs: /tmp/tmp392geqfs.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ // initialize the function variable\n    long sum;\n    int count = 0;\n   \
    \ // loop through the input array\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        // initialize sum to 0\n        sum = 0;\n        // if the element is\
    \ negative, make it positive for summing\n        if (arr[i] < 0) {\n        \
    \    arr[i] = arr[i] * -1;\n        }\n        // if the element is 0, then the\
    \ sum is 0\n        // and no need to sum up the element digits\n        if (arr[i]\
    \ == 0) {\n            sum = 0;\n        }\n        // else sum up the element\
    \ digits\n        else {\n            while (arr[i] > 0) {\n                sum\
    \ += arr[i] % 10;\n                arr[i] = arr[i] / 10;\n            }\n    \
    \    }\n        // if the sum of the element digits is not 0, then add 1 to count\n\
    \        if (sum != 0) {\n            count += 1;\n        }\n    }\n    // return\
    \ the count\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp0lbpi5ge: /tmp/tmp0lbpi5ge.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   int\
    \ cnt = 0;\n    for(auto i : arr) {\n        if(i < 0) {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0) {\n            sum +=\
    \ i % 10;\n            i /= 10;\n        }\n        if(sum > 0) {\n          \
    \  cnt++;\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6dv7laan: /tmp/tmp6dv7laan.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  std::vector<long>\
    \ vec;\n  for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i]\
    \ < 0) {\n      long temp = arr[i] * -1;\n      while (temp > 0) {\n        sum\
    \ += temp % 10;\n        temp /= 10;\n      }\n      sum *= -1;\n    } else {\n\
    \      long temp = arr[i];\n      while (temp > 0) {\n        sum += temp % 10;\n\
    \        temp /= 10;\n      }\n    }\n    vec.push_back(sum);\n  }\n  long count\
    \ = 0;\n  for (int i = 0; i < vec.size(); i++) {\n    if (vec[i] > 0) {\n    \
    \  count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphfx5vsds: /tmp/tmphfx5vsds.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int tmp_count\
    \ = 0;\n        int n = abs(arr[i]);\n        while (n > 0) {\n            tmp_count\
    \ += n % 10;\n            n /= 10;\n        }\n        if (tmp_count > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9ikzt89d: /tmp/tmp9ikzt89d.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  long s = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long\
    \ x = arr[i];\n    if (x < 0) {\n      s += x * -1;\n    } else {\n      s +=\
    \ x;\n    }\n    if (s > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9wc63swc: /tmp/tmp9wc63swc.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tauto\
    \ sum = 0L;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tint sign = arr[i] <\
    \ 0 ? -1 : 1;\n\t\tlong temp = arr[i] * sign;\n\t\twhile (temp > 0) {\n\t\t\t\
    sum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif (sum > 0)\n\t\t\tsum = 1;\n\
    \t\telse\n\t\t\tsum = 0;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4onlu3lc: /tmp/tmp4onlu3lc.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  //\
    \ Write your code here\n  long sum=0;\n  for(long i=0;i<arr.size();i++)\n  {\n\
    \     long a=abs(arr[i]);\n     while(a!=0)\n     {\n         sum=sum+a%10;\n\
    \         a=a/10;\n     }\n     sum=sum-arr[i];\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptksbiuc6: /tmp/tmptksbiuc6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ cnt = 0;\n  for (auto a : arr) {\n    if (a < 0)\n      a = -a;\n    long sum\
    \ = 0;\n    while (a) {\n      sum += a % 10;\n      a /= 10;\n    }\n    if (sum)\n\
    \      cnt++;\n  }\n  return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdg2rn8hg: /tmp/tmpdg2rn8hg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      long temp = arr[i] * -1;\n      while (temp > 0) {\n        count += temp\
    \ % 10;\n        temp /= 10;\n      }\n    } else {\n      long temp = arr[i];\n\
    \      while (temp > 0) {\n        count += temp % 10;\n        temp /= 10;\n\
    \      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmps_7mjzcn: /tmp/tmps_7mjzcn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int temp\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = -arr[i];\n        }\n\
    \        while (arr[i] != 0) {\n            temp += arr[i] % 10;\n           \
    \ arr[i] /= 10;\n        }\n        if (temp > 0) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2_3af16z: /tmp/tmp2_3af16z.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes a vector of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long res = 0;\n    for (long a : arr) {\n        long curr = 0;\n        long\
    \ num = a;\n        while (num != 0) {\n            long digit = num % 10;\n \
    \           curr += digit;\n            num /= 10;\n        }\n        if (curr\
    \ > 0) {\n            res++;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpgz16u8zt: /tmp/tmpgz16u8zt.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660117890
