language: cpp
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  assert(x==(int)x && y==(int)y && z==(int)z);\n  if ( (x+y==z) || (x+z==y) ||\
    \ (y+z==x) ) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpesa9ssk2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return(std::abs(std::round(x) - x) < 0.00001 && std::abs(std::round(y) -\
    \ y) < 0.00001 && std::abs(std::round(z) - z) < 0.00001 && (x + y == z || x +\
    \ z == y || y + z == x));\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpho22txgc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  assert(x>0);\n  assert(y>0);\n  assert(z>0);\n  float sum_1 = x + y;\n  float\
    \ sum_2 = x + z;\n  float sum_3 = y + z;\n  if(sum_1 == z || sum_2 == y || sum_3\
    \ == x)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp66aa_c7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ((x == y + z) || (y == x + z) || (z == x + y)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplh7dce7b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int sum = x + y + z;\n  if (sum == x || sum == y || sum == z) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoxebz539.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool sum = false;\n  if(std::floor(x) == x && std::floor(y) == y && std::floor(z)\
    \ == z) {\n    if(x == y + z || y == x + z || z == x + y) {\n      sum = true;\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpibyb1u2d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x != y) && (y != z) && (x != z) && (x + y == z);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxfk3dnd9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((x + y == z) || (x + z == y) || (y + z == x)) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg36bl2z8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvg8x0z8f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if(x == (y + z) || y == (x + z) || z == (x + y)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps9rz059g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    //////////////////////////////////////////\n    // ADD YOUR CODE HERE\n \
    \   if ((x - int(x)) != 0.0 || (y - int(y)) != 0.0 || (z - int(z)) != 0.0) {\n\
    \        return false;\n    }\n    else if ((x + y) == z || (x + z) == y || (y\
    \ + z) == x) {\n        return true;\n    }\n    else {\n        return false;\n\
    \    }\n    //////////////////////////////////////////\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaacxj2y8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (floor(x) == x && floor(y) == y && floor(z) == z) && ((x + y == z)\
    \ || (x + z == y) || (y + z == x));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqij73hya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return ((x == y + z || y == x + z || z == x + y) && (x == int(x) && y ==\
    \ int(y) && z == int(z)));\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppe55tw66.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ((x + y == z || x + z == y || y + z == x) && (ceil(x) == x && ceil(y)\
    \ == y && ceil(z) == z)) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl4j7dlos.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // if (x + y == z) {\n    //     return true;\n    // }\n    // if (x + z\
    \ == y) {\n    //     return true;\n    // }\n    // if (y + z == x) {\n    //\
    \     return true;\n    // }\n    // return false;\n    return ((x + y == z) ||\
    \ (x + z == y) || (y + z == x));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppzxxb9xr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (round(x) + round(y) == round(z)) || (round(x) + round(z) == round(y))\
    \ || (round(y) + round(z) == round(x));\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy7pdebww.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x == y + z || y == x + z || z == x + y) {\n    return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprn28v5ky.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (x != (int)x || y != (int)y || z != (int)z) ? false : (x + y == z ||\
    \ x + z == y || y + z == x);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp75je9jno.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (x == y + z || y == x + z || z == x + y) && x == floor(x) && y == floor(y)\
    \ && z == floor(z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmg8h3axy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (floor(x) == x && floor(y) == y && floor(z) == z) {\n    if (x + y == z\
    \ || x + z == y || y + z == x) {\n      return true;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp75cm0m2r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tint a = x, b = y, c = z;\n\tif (x - a == 0 && y - b == 0 && z - c == 0) {\n\t\
    \tif (a + b == c || a + c == b || b + c == a)\n\t\t\treturn true;\n\t\telse\n\t\
    \t\treturn false;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7nrms5_8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x + y == z || x + z == y || y + z == x) && x == int(x) && y == int(y)\
    \ && z == int(z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpey5f1xx_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (int(x + y) == z || int(x + z) == y || int(y + z) == x) {\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpam1o2she.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x + y == z) {\n    return true;\n  }\n  else if (x + z == y) {\n    return\
    \ true;\n  }\n  else if (y + z == x) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5iy4l_j6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (fmod(x, 1) == 0 && fmod(y, 1) == 0 && fmod(z, 1) == 0) &&\n     \
    \       (x == y + z || y == x + z || z == x + y);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6n3bmxp5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if(static_cast<int>(x) == (static_cast<int>(y) + static_cast<int>(z))) {\n\
    \        return true;\n    } else if(static_cast<int>(y) == (static_cast<int>(x)\
    \ + static_cast<int>(z))) {\n        return true;\n    } else if(static_cast<int>(z)\
    \ == (static_cast<int>(x) + static_cast<int>(y))) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9tctoc27.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14259b6h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x == (y + z) || y == (x + z) || z == (x + y)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_0j08lzx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x == int(x) && y == int(y) && z == int(z) && ((x + y == z) || (x\
    \ + z == y) || (y + z == x)));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsiv4z1im.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    int i = int(x);\n    int j = int(y);\n    int k = int(z);\n    if (i+j ==\
    \ k) return true;\n    if (i+k == j) return true;\n    if (j+k == i) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgmaltz9o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x == y + z) return true;\n  if (y == x + z) return true;\n  if (z == x\
    \ + y) return true;\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpju2w4bcl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Write your code here\n    if(x != int(x) || y != int(y) || z != int(z))\
    \ {\n        return false;\n    }\n    else {\n        if(x+y == z || x+z == y\
    \ || y+z == x) {\n            return true;\n        }\n        else {\n      \
    \      return false;\n        }\n    }\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgufqtzq1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif (x == int(x) && y == int(y) && z == int(z)) {\n\t\tif (x == y + z || y ==\
    \ x + z || z == x + y) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprbtgtag2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x == int(x) && y == int(y) && z == int(z) && (int(x) + int(y) ==\
    \ int(z) || int(x) + int(z) == int(y) || int(y) + int(z) == int(x)));\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu0rwv_lz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    //implement function\n    if(x + y == z){\n        return true;\n    }\n\
    \    else if(x + z == y){\n        return true;\n    }\n    else if(y + z == x){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8t8acvp8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x == (y + z) || y == (x + z) || z == (x + y)) {\n    if (floor(x) == x\
    \ && floor(y) == y && floor(z) == z) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpky9wbiza.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((x + y == z) || (x + z == y) || (y + z == x)) && ((int)x == x) && ((int)y\
    \ == y) && ((int)z == z);\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3q6ez9as.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif ((x == y + z) || (y == x + z) || (z == x + y)) {\n\t\tif (((int)x == x) &&\
    \ ((int)y == y) && ((int)z == z)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp11inb58l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // TODO\n  float sum = x + y + z;\n  if (((sum - x) == x) || ((sum - y) ==\
    \ y) || ((sum - z) == z)) {\n    return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfmxifcr2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif (x == y + z) {\n\t\treturn true;\n\t}\n\telse if (y == x + z) {\n\t\treturn\
    \ true;\n\t}\n\telse if (z == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvd7u94sm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Convert numbers to ints and compare with original values.\n    return\
    \ (static_cast<int>(x) == x && static_cast<int>(y) == y && static_cast<int>(z)\
    \ == z && ((x + y == z) || (x + z == y) || (y + z == x)));\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdab7lf5b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((y+z)==x) {\n    return true;\n  }\n  else if ((x+z)==y) {\n    return\
    \ true;\n  }\n  else if ((x+y)==z) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6e9446wi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \t//if any of the numbers are not integers it returns false\n\tif (x-floor(x)!=0\
    \ || y-floor(y)!=0 || z-floor(z)!=0) {\n\t\treturn false;\n\t}\n\t//if any of\
    \ the numbers are equal to the sum of the other two numbers it returns true\n\t\
    if (x==y+z || y==x+z || z==x+y) {\n\t\treturn true;\n\t}\n\t//else it returns\
    \ false\n\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n   \
    \ assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfzdwkdzt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif(x == y + z || y == x + z || z == x + y)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmjmh3zv4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  //(int)\n  if ( (x == (int)x) && (y == (int)y) && (z == (int)z) ) {\n    if\
    \ ( (x + y == z) || (x + z == y) || (y + z == x) )\n      return true;\n    else\n\
    \      return false;\n  }\n  else\n    return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_3camvtw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tassert(x == int(x));\n\tassert(y == int(y));\n\tassert(z == int(z));\n\tif (x\
    \ + y == z || x + z == y || y + z == x) {\n\t\treturn true;\n\t}\n\telse {\n\t\
    \treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpue64ac8c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  assert(x - (int)x == 0);\n  assert(y - (int)y == 0);\n  assert(z - (int)z ==\
    \ 0);\n  return (x + y == z || x + z == y || y + z == x);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxoc1psls.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (y + z == x || x + z == y || x + y == z) && x == int(x) && y == int(y)\
    \ && z == int(z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiaidnkwz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return int(x) + int(y) == int(z) || int(x) + int(z) == int(y) || int(y) +\
    \ int(z) == int(x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu8dujluu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (((int)x==x) && ((int)y==y) && ((int)z==z) && ((x+y==z) || (x+z==y)\
    \ || (y+z==x)));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8wcm91bj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return(int(x) + int(y) == int(z) || int(x) + int(z) == int(y) || int(y) + int(z)\
    \ == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiqku3uy0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  float sum = x + y + z;\n  if(x == sum/3 || y == sum/3 || z == sum/3) {\n  \
    \  return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa24l56sb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvg8x0z8f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x == int(x) && y == int(y) && z == int(z)) {\n    if (x == y + z || y ==\
    \ x + z || z == x + y) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf4hy0njk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (int(x) == int(y + z) || int(y) == int(x + z) || int(z) == int(x + y)) {\n\
    \    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0mddd4wb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool result;\n  if (x == y + z) {\n    result = true;\n  } else if (y == x\
    \ + z) {\n    result = true;\n  } else if (z == x + y) {\n    result = true;\n\
    \  } else {\n    result = false;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi7e7kha7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (int(x) == (int(y) + int(z)) || int(y) == (int(x) + int(z)) || int(z) ==\
    \ (int(x) + int(y))) {\n    return true;\n  }\n  else {\n    return false;\n \
    \ }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqe1ueljy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y)) || (int(y)\
    \ + int(z) == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphkgwcb0r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  //assuming all integers\n  return ((x+y == z) || (x+z == y) || (y+z == x));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl3grh4ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x == y + z || y == x + z || z == x + y) {\n    if (x == static_cast<int>(x)\
    \ && y == static_cast<int>(y) && z == static_cast<int>(z)) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyusd6njp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (std::floor(x) == x && std::floor(y) == y && std::floor(z) == z) &&\n\
    \         (x + y == z || x + z == y || y + z == x);\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpewkbvskp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return x == (y + z) || y == (x + z) || z == (x + y);\n}\nint main() {\n   \
    \ auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmpkfmi8t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int a = x;\n  int b = y;\n  int c = z;\n  if ((a + b == c) || (a + c == b)\
    \ || (b + c == a)) {\n    return true;\n  }\n  else {\n    return false;\n  }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu9hvyn8g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (fmod(x,1) == 0 && fmod(y,1) == 0 && fmod(z,1) == 0) {\n    return (x+y\
    \ == z || x+z == y || y+z == x);\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeyr5giq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    float sum = x + y + z;\n    if (sum - x == y + z || sum - y == x + z || sum\
    \ - z == x + y) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc2q8mnbz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // check if all number are integer\n  bool is_x_int = (floor(x) == x);\n  bool\
    \ is_y_int = (floor(y) == y);\n  bool is_z_int = (floor(z) == z);\n  // if not\
    \ all integer return false\n  if (!is_x_int || !is_y_int || !is_z_int) {\n   \
    \ return false;\n  } else {\n    // check if one number is equal to the sum of\
    \ the other two\n    if (x == y + z || y == x + z || z == x + y) {\n      return\
    \ true;\n    } else {\n      return false;\n    }\n  }\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ho0p4a5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if( ((x + y) == z) || ((x + z) == y) || ((y + z) == x) ) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpase8otcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool test = ((x == y + z) || (y == x + z) || (z == x + y));\n  bool test1 =\
    \ ((x == int(x)) && (y == int(y)) && (z == int(z)));\n  return test && test1;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0fo0vsy_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (int(x) + int(y) == int(z)) return true;\n  if (int(x) + int(z) == int(y))\
    \ return true;\n  if (int(y) + int(z) == int(x)) return true;\n  return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb2vd_w8q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif (floor(x) == x && floor(y) == y && floor(z) == z) {\n\t\tif (x + y == z ||\
    \ x + z == y || y + z == x) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ljagwge.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if(x>0 && y>0 && z>0)\n    return true;\n    else\n    return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf6vadqxs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return x+y == z || x+z == y || y+z == x;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwxjau_uq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return x + y == z || x + z == y || y + z == x;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsuf7qtaw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (int(x) == (int(y)+int(z)) || int(y) == (int(x)+int(z)) || int(z) == (int(x)+int(y)))\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprlc4f0_d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (x == y + z || y == x + z || z == x + y) {\n    return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprn28v5ky.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // TODO: Your code here\n  if ((x + y == z) || (x + z == y) || (y + z == x))\
    \ {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt18d97ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ((x + y) == z || (x + z) == y || (y + z) == x) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8x7u9wtr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x+y==z || x+z==y || y+z==x);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qvt40su.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool a = (x+y == z);\n  bool b = (x+z == y);\n  bool c = (y+z == x);\n  bool\
    \ ans = a || b || c;\n  return ans;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp85gf2ynd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((x + y == z) || (x + z == y) || (y + z == x)) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg36bl2z8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((x == (y + z)) || (y == (x + z)) || (z == (x + y))) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_mop01bm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // if (x + y == z) return true;\n    // if (x + z == y) return true;\n  \
    \  // if (y + z == x) return true;\n    // return false;\n    return ((x + y ==\
    \ z) || (x + z == y) || (y + z == x));\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4m2vts99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  assert(std::floor(x) == x && std::floor(y) == y && std::floor(z) == z);\n \
    \ float sum = x + y + z;\n  if (std::floor(sum) == sum) {\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg1vhw77k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y\
    \ + (int)z == (int)x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl71tg686.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Function will return true if\n    // any of the two numbers is equal\n\
    \    // to sum of third number.\n    if (x == y + z || y == x + z || z == x +\
    \ y)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf8s_3_1s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif ((int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z\
    \ == (int)x) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpod7urslf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((x + y == z) || (x + z == y) || (y + z == x)) &&\n  (floor(x) == x)\
    \ && (floor(y) == y) && (floor(z) == z);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpctf1na5z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x + y == z || x + z == y || y + z == x) && (fmod(x, 1) == 0 && fmod(y,\
    \ 1) == 0 && fmod(z, 1) == 0);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1sh6c3h0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (((x - y) == z) || ((x - z) == y) || ((y - z) == x)) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbm1aottm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int a = x;\n  int b = y;\n  int c = z;\n  if (a + b == c || a + c == b || b\
    \ + c == a) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_e_ox4g9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif ((x - y - z == 0.0 || y - x - z == 0.0 || z - x - y == 0.0) && x - int(x)\
    \ == 0.0 && y - int(y) == 0.0 && z - int(z) == 0.0) {\n\t\treturn true;\n\t}\n\
    \telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmu3zvlam.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x == (y + z) || y == (x + z) || z == (x + y)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_0j08lzx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvg8x0z8f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if(std::floor(x)==x && std::floor(y)==y && std::floor(z)==z){\n        if(x+y==z\
    \ || x+z==y || y+z==x){\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm77gl8ya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (std::fmod(x, 1) != 0 || std::fmod(y, 1) != 0 || std::fmod(z, 1) != 0)\
    \ {\n        return false;\n    }\n    if (x + y == z || x + z == y || y + z ==\
    \ x) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph76ojwnr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // return x == y+z || y == x+z || z == x+y;\n    return ((x == y+z || y ==\
    \ x+z || z == x+y) && (std::floor(x) == x && std::floor(y) == y && std::floor(z)\
    \ == z));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb1nvtisb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Write your code here\n    return x == y + z || y == x + z || z == x +\
    \ y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7r7bac53.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \treturn ((x == y + z) || (y == x + z) || (z == x + y));\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmm6wvzp5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ( (x > y - z) && (x < y + z) && ((int)x == x) && ((int)y == y) && ((int)z\
    \ == z) ) {\n        return true;\n    }\n    else if ( (y > x - z) && (y < x\
    \ + z) && ((int)x == x) && ((int)y == y) && ((int)z == z) ) {\n        return\
    \ true;\n    }\n    else if ( (z > x - y) && (z < x + y) && ((int)x == x) && ((int)y\
    \ == y) && ((int)z == z) ) {\n        return true;\n    }\n    else {\n      \
    \  return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvn4344td.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (int(x) == int(y) + int(z)) || (int(y) == int(x) + int(z)) || (int(z)\
    \ == int(x) + int(y));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6q3bed2g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int a = int(x);\n  int b = int(y);\n  int c = int(z);\n  if ((a + b == c) ||\
    \ (a + c == b) || (b + c == a)) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcmlox9w2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    //>>> any_int((float(5)), (float(2)), (float(7)))\n    //(true)\n    //>>>\
    \ any_int((float(3)), (float(2)), (float(2)))\n    //(false)\n    //>>> any_int((float(3)),\
    \ (float(-2)), (float(1)))\n    //(true)\n    //>>> any_int((3.6), (-2.2), (float(2)))\n\
    \    //(false)\n    if (x == (int)x && y == (int)y && z == (int)z) {\n       \
    \ int a = x;\n        int b = y;\n        int c = z;\n        if (a == b + c ||\
    \ b == a + c || c == a + b) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgfnzrlma.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((x == y + z) || (y == x + z) || (z == x + y)) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmfoh4d0t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \treturn (x + y == z) || (x + z == y) || (y + z == x);\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpve2_rez5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y\
    \ + (int)z == (int)x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1donqw11.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((x == y + z) || (y == x + z) || (z == x + y)) &&\n         ((x == int(x))\
    \ && (y == int(y)) && (z == int(z)));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i9zdwpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool result = false;\n  if ((x == (y + z)) || (y == (x + z)) || (z == (x +\
    \ y))) {\n    result = true;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6h1y4hvo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // assert(x+y == z || x+z == y || y+z == x);\n  if(int(x) == x && int(y) ==\
    \ y && int(z) == z) {\n    return true;\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzly3hql4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif (((x + y) == z) || ((x + z) == y) || ((y + z) == x)) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiq3wjc0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return std::floor(x) + std::floor(y) == std::floor(z) ||\n         std::floor(x)\
    \ + std::floor(z) == std::floor(y) ||\n         std::floor(y) + std::floor(z)\
    \ == std::floor(x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrz_4q0s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y)) || (int(y)\
    \ + int(z) == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptohjly9f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ((int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z\
    \ == (int)x) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg8b_yhgz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int a = std::floor(x);\n  int b = std::floor(y);\n  int c = std::floor(z);\n\
    \  if ((a+b == c) || (a+c == b) || (b+c == a)) {\n    return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf4_co_9a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ( (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y +\
    \ (int)z == (int)x );\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwxqkx4hr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  //   if(typeid(x).name() == typeid(y).name() == typeid(z).name() == typeid(int).name())\n\
    \  //   {\n  //    return true;\n  //   }\n  //   else {\n  //     return false;\n\
    \  //   }\n  //   if((x + y) == z) {\n  //     return true;\n  //   }\n  //  \
    \ else if ((y + z) == x) {\n  //     return true;\n  //   }\n  //   else if ((x\
    \ + z) == y) {\n  //     return true;\n  //   }\n  //   else {\n  //     return\
    \ false;\n  //   }\n  if ((x + y) == z && std::floor(x) == x && std::floor(y)\
    \ == y && std::floor(z) == z) {\n    return true;\n  }\n  else if ((y + z) ==\
    \ x && std::floor(x) == x && std::floor(y) == y && std::floor(z) == z) {\n   \
    \ return true;\n  }\n  else if ((x + z) == y && std::floor(x) == x && std::floor(y)\
    \ == y && std::floor(z) == z) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphmxv5f6w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y)) || (int(y)\
    \ + int(z) == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphkgwcb0r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // store nums in vector\n  std::vector<float> nums{x, y, z};\n  std::sort(nums.begin(),\
    \ nums.end());\n  if (nums[0] + nums[1] == nums[2]) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc5wrdb6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  assert(x==floor(x));\n  assert(y==floor(y));\n  assert(z==floor(z));\n  if\
    \ (x+y==z) return true;\n  if (x+z==y) return true;\n  if (y+z==x) return true;\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4rqjyq03.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if( (x + y == z) || (x + z == y) || (y + z == x) ){\n    return true;\n  }\n\
    \  else{\n    return false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw25zly7o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (((x == y + z) || (y == x + z) || (z == x + y)) && (ceil(x) == x) && (ceil(y)\
    \ == y) && (ceil(z) == z)) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7we8pv5v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool result = false;\n  int xInt = (int)x;\n  int yInt = (int)y;\n  int zInt\
    \ = (int)z;\n  bool xI = (x == xInt);\n  bool yI = (y == yInt);\n  bool zI = (z\
    \ == zInt);\n  if (xI & yI & zI) {\n    if (xInt + yInt == zInt) {\n      result\
    \ = true;\n    }\n    else if (xInt + zInt == yInt) {\n      result = true;\n\
    \    }\n    else if (yInt + zInt == xInt) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmthsa2p2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  //  type your code here\n  return (bool)((x==(y+z))||(y==(x+z))||(z==(x+y)));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydtblotb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (std::floor(x) == x && std::floor(y) == y && std::floor(z) == z) {\n \
    \       if (x == y + z || y == x + z || z == x + y) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nney2nl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int sum = x + y + z;\n  if (sum == x || sum == y || sum == z) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoxebz539.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ((x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0)){\n      return (x + y ==\
    \ z) || (x + z == y) || (y + z == x);\n    }\n    else {\n      return false;\n\
    \    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpblf7leq4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (int(x)+int(y))==int(z) || (int(x)+int(z))==int(y) || (int(y)+int(z))==int(x);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5k1aybnc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    float sum_x_y = x + y;\n    float sum_x_z = x + z;\n    float sum_y_z = y\
    \ + z;\n    if (sum_x_y == z) {\n        return true;\n    } else if (sum_x_z\
    \ == y) {\n        return true;\n    } else if (sum_y_z == x) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp35cuuc62.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // if (x + y == z || y + z == x || x + z == y) {\n  //   return true;\n  //\
    \ }\n  // return false;\n  return x + y == z || y + z == x || x + z == y;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgysm5shu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y)) || (int(y)\
    \ + int(z) == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphkgwcb0r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if(float(int(x)) == x && float(int(y)) == y && float(int(z)) == z) {\n  \
    \      if(int(x) == int(y)+int(z) || int(y) == int(x)+int(z) || int(z) == int(x)+int(y))\
    \ return true;\n        else return false;\n    }\n    else return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1dhyclqf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (floor(x) == x && floor(y) == y && floor(z) == z) {\n    if (x + y == z\
    \ || x + z == y || y + z == x) {\n      return true;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp75cm0m2r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int sum = (int)x + (int)y + (int)z;\n  int x_y = (int)x + (int)y;\n  int x_z\
    \ = (int)x + (int)z;\n  int y_z = (int)y + (int)z;\n  if ((int)x == sum - x_y\
    \ || (int)y == sum - x_y || (int)z == sum - x_y) {\n    return true;\n  }\n  if\
    \ ((int)x == sum - x_z || (int)y == sum - x_z || (int)z == sum - x_z) {\n    return\
    \ true;\n  }\n  if ((int)x == sum - y_z || (int)y == sum - y_z || (int)z == sum\
    \ - y_z) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4m32y81n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return x == y + z || y == x + z || z == x + y;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9fofyknu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tfloat sum = x + y + z;\n\tif (sum == x || sum == y || sum == z)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptmn8y98h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tbool one_is_zero = !(x == 0.0) || !(y == 0.0) || !(z == 0.0);\n\tbool one_is_int\
    \ = ((x - int(x)) == 0.0) || ((y - int(y)) == 0.0) || ((z - int(z)) == 0.0);\n\
    \treturn (one_is_zero && one_is_int);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnvk6kj35.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (floor(x) + floor(y) == floor(z)) || (floor(x) + floor(z) == floor(y))\
    \ || (floor(y) + floor(z) == floor(x));\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdclmvvg3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Your code here\n    float sum;\n    if (x < 0 && y < 0 && z < 0)\n   \
    \     return false;\n    if (x < 0 && y < 0)\n        sum = -x - y;\n    else\
    \ if (x < 0 && z < 0)\n        sum = -x - z;\n    else if (y < 0 && z < 0)\n \
    \       sum = -y - z;\n    else\n        sum = x + y + z;\n    if (sum == x ||\
    \ sum == y || sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp94n7zjdk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // TODO: Your code here\n  float sum = x + y + z;\n  // first check if the\
    \ values are integers\n  if(sum != (int)sum) {\n    return false;\n  }\n  // now\
    \ check if there is a pair that's equal to the remaining value\n  float sum_a\
    \ = x + y;\n  float sum_b = x + z;\n  float sum_c = y + z;\n  // if there is a\
    \ match, we have a case\n  if(sum_a == z || sum_b == y || sum_c == x) {\n    return\
    \ true;\n  }\n  // otherwise, false\n  return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz3wsk55q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    bool int_sum = (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y))\
    \ || (int(y) + int(z) == int(x));\n    bool int_num = (int(x) == x) && (int(y)\
    \ == y) && (int(z) == z);\n    return int_sum && int_num;\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6xl4_2am.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return x == y + z || y == x + z || z == x + y;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoa6mv404.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \treturn (x + y == z || x + z == y || y + z == x) &&\n\t\t((int)x == x) && ((int)y\
    \ == y) && ((int)z == z);\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpob059bgt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // return (x == y + z) || (y == x + z) || (z == x + y);\n    return (fmod(x,\
    \ 1) == 0) && (fmod(y, 1) == 0) && (fmod(z, 1) == 0) && (fmod(x + y, 1) == 0)\
    \ && (fmod(x + z, 1) == 0) && (fmod(y + z, 1) == 0);\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvoo3acdp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // int a = x;\n  // int b = y;\n  // int c = z;\n  if (x == 0 || y == 0 ||\
    \ z == 0) {\n    return false;\n  }\n  if (x+y == z || x+z == y || y+z == x) {\n\
    \    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuobmboq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif (std::floor(x) == x && std::floor(y) == y && std::floor(z) == z) {\n\t\t\
    int sum = x + y;\n\t\tint sum1 = x + z;\n\t\tint sum2 = y + z;\n\t\tif (sum ==\
    \ z || sum1 == y || sum2 == x) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpohevtzvf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((x+y)==z) {\n    return true;\n  }\n  else if ((x+z)==y) {\n    return\
    \ true;\n  }\n  else if ((y+z)==x) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbn3f0lwj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (static_cast<int>(x) + static_cast<int>(y) == static_cast<int>(z)) {\n \
    \   return true;\n  } else if (static_cast<int>(x) + static_cast<int>(z) == static_cast<int>(y))\
    \ {\n    return true;\n  } else if (static_cast<int>(y) + static_cast<int>(z)\
    \ == static_cast<int>(x)) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nha9k0c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ((x + y == z) || (x + z == y) || (y + z == x)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplvpocciv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // write your code here\n    bool a = x == int(x);\n    bool b = y == int(y);\n\
    \    bool c = z == int(z);\n    return ((a && b && c) && ((x + y == z) || (x +\
    \ z == y) || (y + z == x)));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptgwtm0z9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    float xf = x;\n    float yf = y;\n    float zf = z;\n    float xi = (int)\
    \ x;\n    float yi = (int) y;\n    float zi = (int) z;\n    if (((int) x == x)\
    \ && ((int) y == y) && ((int) z == z)) {\n        if (((x + y) == z) || ((x +\
    \ z) == y) || ((y + z) == x)) {\n            return true;\n        }\n       \
    \ else {\n            return false;\n        }\n    }\n    else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa157_cd3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (std::ceil(x) == x && std::ceil(y) == y && std::ceil(z) == z) {\n    \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv6v8u73z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return ((int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y\
    \ + (int)z == (int)x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7h8a7t7y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((std::ceil(x) == x) && (std::ceil(y) == y) && (std::ceil(z) == z)) {\n\
    \    if ((x + y == z) || (x + z == y) || (y + z == x)) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_n34pc8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((fmod(x, 1) == 0) && (fmod(y, 1) == 0) && (fmod(z, 1) == 0)) {\n    if\
    \ ((x + y == z) || (x + z == y) || (y + z == x)) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbvqgi9v7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int i;\n  if (std::modf(x, &i) != 0.0) {\n    return false;\n  }\n  if (std::modf(y,\
    \ &i) != 0.0) {\n    return false;\n  }\n  if (std::modf(z, &i) != 0.0) {\n  \
    \  return false;\n  }\n  if (x + y == z) {\n    return true;\n  }\n  if (x + z\
    \ == y) {\n    return true;\n  }\n  if (y + z == x) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp2o83e2q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \treturn (round(x) + round(y) == round(z)) || (round(x) + round(z) == round(y))\
    \ || (round(y) + round(z) == round(x));\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvi_in1pf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    bool all_ints = (floor(x) == x) && (floor(y) == y) && (floor(z) == z);\n\
    \    bool sum_of_others = (x == y + z) || (y == x + z) || (z == x + y);\n    return\
    \ all_ints && sum_of_others;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyu3fkr3q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool b1 = ((float) x == y + z);\n  bool b2 = ((float) y == x + z);\n  bool\
    \ b3 = ((float) z == x + y);\n  if (b1 || b2 || b3) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8mwracza.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14259b6h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y)) || (int(y)\
    \ + int(z) == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptohjly9f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \treturn ((x + y == z || x + z == y || y + z == x) && (x == int(x) && y == int(y)\
    \ && z == int(z)));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9lduei1p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tbool is_equal = false;\n\tif (((floor(x) + floor(y)) == floor(z)) || ((floor(x)\
    \ + floor(z)) == floor(y)) || ((floor(y) + floor(z)) == floor(x))) {\n\t\tis_equal\
    \ = true;\n\t}\n\treturn is_equal;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpan7o0urn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if ( ( (int)x + (int)y ) == (int)z ) {\n        return true;\n    } else\
    \ if ( ( (int)x + (int)z ) == (int)y ) {\n        return true;\n    } else if\
    \ ( ( (int)y + (int)z ) == (int)x ) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjy2np3ld.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // write the code here\n    if(x == int(x) && y == int(y) && z == int(z))\
    \ {\n        if(x == y + z || y == x + z || z == x + y)\n            return true;\n\
    \        else\n            return false;\n    }\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnbg4g9oj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14259b6h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  bool check = false;\n  if (std::floor(x) == x && std::floor(y) == y && std::floor(z)\
    \ == z) {\n    if (x == y + z || y == x + z || z == x + y) {\n      check = true;\n\
    \    }\n  }\n  return check;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1mp7k36j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tfloat sum = x + y + z;\n\tif (sum == x || sum == y || sum == z) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4qdbn4zg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  float a, b, c;\n  a = x;\n  b = y;\n  c = z;\n  if (a == (b + c) || b == (a\
    \ + c) || c == (a + b)) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw0hey7iv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tfloat a = x;\n\tfloat b = y;\n\tfloat c = z;\n\tif (((a + b) == c) || ((a +\
    \ c) == b) || ((b + c) == a)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6c0i6lko.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x==int(x) && y==int(y) && z==int(z)){\n        if (x+y==z || x+z==y ||\
    \ y+z==x){\n            return true;\n        }\n        else{\n            return\
    \ false;\n        }\n    }\n    else{\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3uss7bxk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Write your code here:\n    float sum = 0;\n    if ((x==int(x)) && (y==int(y))\
    \ && (z==int(z))) {\n        sum = x + y;\n        if (sum == z) {\n         \
    \   return true;\n        }\n        sum = x + z;\n        if (sum == y) {\n \
    \           return true;\n        }\n        sum = y + z;\n        if (sum ==\
    \ x) {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9je3zq7j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((fmod(x,1)==0) && (fmod(y,1)==0) && (fmod(z,1)==0)) &&\n  ((((x+y)==z)\
    \ || ((x+z)==y) || ((y+z)==x)));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_7eswg1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (int(x) + int(y) == int(z)) || (int(x) + int(z) == int(y)) || (int(y)\
    \ + int(z) == int(x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptohjly9f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((x == y + z) || (y == x + z) || (z == x + y)) &&\n  (floor(x) == x)\
    \ && (floor(y) == y) && (floor(z) == z);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp254sg5nr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    float xyz = x + y + z;\n    float xy = x + y;\n    float xz = x + z;\n  \
    \  float yz = y + z;\n    float xa = x / 2;\n    float ya = y / 2;\n    float\
    \ za = z / 2;\n    float xb = x / 3;\n    float yb = y / 3;\n    float zb = z\
    \ / 3;\n    float xc = x / 4;\n    float yc = y / 4;\n    float zc = z / 4;\n\
    \    float xd = x / 5;\n    float yd = y / 5;\n    float zd = z / 5;\n    float\
    \ xe = x / 6;\n    float ye = y / 6;\n    float ze = z / 6;\n    float xf = x\
    \ / 7;\n    float yf = y / 7;\n    float zf = z / 7;\n    float xg = x / 8;\n\
    \    float yg = y / 8;\n    float zg = z / 8;\n    float xh = x / 9;\n    float\
    \ yh = y / 9;\n    float zh = z / 9;\n    float xi = x / 10;\n    float yi = y\
    \ / 10;\n    float zi = z / 10;\n    float xj = x / 11;\n    float yj = y / 11;\n\
    \    float zj = z / 11;\n    float xk = x / 12;\n    float yk = y / 12;\n    float\
    \ zk = z / 12;\n    float xl = x / 13;\n    float yl = y / 13;\n    float zl =\
    \ z / 13;\n    float xm = x / 14;\n    float ym = y / 14;\n    float zm = z /\
    \ 14;\n    float xn = x / 15;\n    float yn = y / 15;\n    float zn = z / 15;\n\
    \    float xo = x / 16;\n    float yo = y / 16;\n    float zo = z / 16;\n    float\
    \ xp = x / 17;\n    float yp = y / 17;\n    float zp =\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2m5137t5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ( (x == y + z) || (y == x + z) || (z == x + y) ) {\n    return true;\n \
    \ }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdd6wtw5w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (x + y == z || x + z == y || y + z == x) && (fmod(x, 1) == 0 && fmod(y,\
    \ 1) == 0 && fmod(z, 1) == 0);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa7zzlah1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tif (is_integer(x) && is_integer(y) && is_integer(z)) {\n\t\tif (x == y + z ||\
    \ y == x + z || z == x + y) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpavrnc96k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if (((x + y) == z) || ((y + z) == x) || ((x + z) == y)) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6c_4ikt1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14259b6h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  int a, b, c;\n  a = x;\n  b = y;\n  c = z;\n  if (a + b == c || a + c == b\
    \ || b + c == a)\n    return true;\n  else\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_u832uqf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if(z == x + y && x == int(x) && y == int(y) && z == int(z)){\n        return\
    \ true;\n    }\n    else if(y == x + z && x == int(x) && y == int(y) && z == int(z)){\n\
    \        return true;\n    }\n    else if(x == y + z && x == int(x) && y == int(y)\
    \ && z == int(z)){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_sn38ul5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return x - y == z || y - x == z || x - z == y || z - x == y || y - z == x ||\
    \ z - y == x;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphl_lfcs0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ( (floor(x) + floor(y) == floor(z)) || (floor(x) + floor(z) == floor(y))\
    \ || (floor(y) + floor(z) == floor(x)) ) {\n    return true;\n  }\n  else {\n\
    \    return false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtldwehk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // ...\n    if(x-y-z == (int)x-y-z || y-x-z == (int)y-x-z || z-x-y == (int)z-x-y)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9dv8_6g7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \tint sum = x + y + z;\n\tif ((x == sum) || (y == sum) || (z == sum)) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4cb5cz9z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return(static_cast<int>(x) + static_cast<int>(y) == static_cast<int>(z) ||\
    \ static_cast<int>(x) + static_cast<int>(z) == static_cast<int>(y) || static_cast<int>(y)\
    \ + static_cast<int>(z) == static_cast<int>(x));\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprbdf1m9v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (round(x) + round(y) == round(z)) {\n        return true;\n    } else\
    \ if (round(y) + round(z) == round(x)) {\n        return true;\n    } else if\
    \ (round(x) + round(z) == round(y)) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpegwy3ud4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return ((x == y + z || y == x + z || z == x + y) && x == int(x) && y == int(y)\
    \ && z == int(z));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnc5_5p9p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // write your code here!\n  return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphe5dyjre.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (x == y + z) || (y == x + z) || (z == x + y);\n}\nint main() {\n   \
    \ auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcztkz7fi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return (int(x) == int(y) + int(z)) || (int(y) == int(x) + int(z)) || (int(z)\
    \ == int(x) + int(y));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6q3bed2g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // Write your code here.\n    int vx, vy, vz;\n    vx = (int)x;\n    vy =\
    \ (int)y;\n    vz = (int)z;\n    if (vx == (vy + vz) || vy == (vx + vz) || vz\
    \ == (vx + vy)) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphlo_oxzr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // write code here\n  return false;\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9jqf1r6t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  return floor(x) + floor(y) == floor(z) || floor(x) + floor(z) == floor(y) ||\
    \ floor(y) + floor(z) == floor(x);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9fzdggfs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  if ((x+y==z)||(x+z==y)||(y+z==x)) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphj9yop7x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    // int sum = x + y + z;\n    if ((int)x + (int)y == (int)z) {\n        return\
    \ true;\n    }\n    else if ((int)x + (int)z == (int)y) {\n        return true;\n\
    \    }\n    else if ((int)y + (int)z == (int)x) {\n        return true;\n    }\n\
    \    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp65rfm4p7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvg8x0z8f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \  // write your solution here\n  return(floor(x+y)==z || floor(x+z)==y || floor(y+z)==x);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpns1a6n02.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    return ((float(int(x))==x) && (float(int(y))==y) && (float(int(z))==z))&&(((x==y+z)||(y==x+z)||(z==x+y)));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmqvxtgok.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n//\
    \ (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>>\
    \ any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6),\
    \ (-2.2), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n\
    \    if (fmod(x, 1) == 0 && fmod(y, 1) == 0 && fmod(z, 1) == 0) {\n        if\
    \ (x == y + z || x + y == z || x + z == y) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnip_lsws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015942
