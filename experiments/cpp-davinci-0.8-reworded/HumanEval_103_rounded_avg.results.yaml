language: cpp
name: HumanEval_103_rounded_avg
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n  int sum = 0;\n  if (n > m) return -1;\n  for (int i = n; i <=\
    \ m; i++) {\n    sum += i;\n  }\n  return std::bitset<4>(round(sum / (m - n +\
    \ 1))).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp5piqyfzr: /tmp/tmp5piqyfzr.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string a;\n    std::string b;\n    while(n<=m){\n   \
    \     a+=std::to_string(n);\n        n++;\n    }\n    if(a.length()==1){\n   \
    \     return a;\n    }\n    else{\n        int c = stoi(a);\n        float d =\
    \ c/(a.length());\n        d+=0.5;\n        int e = int(d);\n        while(e!=0){\n\
    \            b=std::to_string(e%2)+b;\n            e=e/2;\n        }\n       \
    \ return \"0b\"+b;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmphvu85u1u: /tmp/tmphvu85u1u.cpp:51: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n <= m) {\n        int result = 0;\n        for (int i\
    \ = n; i <= m; i++) {\n            result += i;\n        }\n        int rounded\
    \ = round(result * 1.0 / (m - n + 1));\n        return std::to_string(rounded);\n\
    \    } else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpqlmezgds: /tmp/tmpqlmezgds.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return Union_std_string_long(std::string(std::to_string(n)));\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpv8mydfwl: /tmp/tmpv8mydfwl.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    std::string ret = \"0b\";\n    while (avg > 0) {\n        ret\
    \ += (avg % 2 == 0) ? \"0\" : \"1\";\n        avg /= 2;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpxjw_9meb: /tmp/tmpxjw_9meb.cpp:42: int main(): Assertion `candidate((7),
    (13)) == "0b1010"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (m\
    \ + n) / 2;\n    std::string binary = std::bitset<64>(avg).to_string();\n    while\
    \ (binary[0] == '0') {\n        binary.erase(0, 1);\n    }\n    binary = \"0b\"\
    \ + binary;\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpdjoq_6p6: /tmp/tmpdjoq_6p6.cpp:45: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a;\n    if (n > m) {\n        return -1;\n    }    a\
    \ = (n + m) / 2;\n    std::string a_bin;\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<8>(a);\n    a_bin = ss.str();\n    return std::string(\"0b\") +\
    \ a_bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp5skl5cob: /tmp/tmp5skl5cob.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(\"-1\"\
    );\n    }\n    std::bitset<sizeof(int) * 8> bit(std::round((n + m) / 2.0));\n\
    \    return Union_std_string_long(\"0b\" + bit.to_string());\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp26rqq_t7: /tmp/tmp26rqq_t7.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    \n    assert(n > 0);\n    assert(m > 0);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return (std::bitset<32>)((n + m) / 2).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb103nfte.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpb103nfte.cpp:34:43: error: request for member\
    \ \u2018to_string\u2019 in \u2018((n + m) / 2)\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   34 |     return (std::bitset<32>)((n + m) / 2).to_string();\n\
    \      |                                           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    float average\
    \ = (n + m) / 2.0;\n    std::bitset<8> bits(average);\n    std::string result\
    \ = \"0b\" + bits.to_string();\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmplgl9zg76: /tmp/tmplgl9zg76.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    \n}\nint main() {\n    auto candidate = rounded_avg;\n   \
    \ assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpqmdq_3fe: /tmp/tmpqmdq_3fe.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    double avg = (n + m) / 2.0;\n    std::stringstream stream;\n    stream\
    \ << std::bitset<4>(std::round(avg));\n    std::string result(stream.str());\n\
    \    return Union_std_string_long(\"0b\" + result);\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpb115l_mk: /tmp/tmpb115l_mk.cpp:39: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long result;\n    if (n <= m) {\n       \
    \ long avg = (n + m) / 2;\n        std::bitset<32> bset(avg);\n        std::string\
    \ str = bset.to_string();\n        str = str.substr(str.find(\"1\"));\n      \
    \  str = \"0b\" + str;\n        result.f0 = str;\n    }\n    else {\n        result.f1\
    \ = -1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyh_ufaa.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpbyh_ufaa.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long result;\n      |                           ^~~~~~\n\
    /tmp/tmpbyh_ufaa.cpp:6:5: note: candidate: \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbyh_ufaa.cpp:6:5: note:   candidate expects\
    \ 1 argument, 0 provided\n/tmp/tmpbyh_ufaa.cpp:5:17: note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbyh_ufaa.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpbyh_ufaa.cpp:40:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   40 |     return result;\n      |         \
    \   ^~~~~~\n/tmp/tmpbyh_ufaa.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbyh_ufaa.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum = sum + i;\n    }\n    double\
    \ d = (double)sum/(m-n+1);\n    int x = round(d);\n    std::string s = \"0b\"\
    ;\n    while (x>0) {\n        s = s + std::to_string(x%2);\n        x = x/2;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp4ctd3v0t: /tmp/tmp4ctd3v0t.cpp:47: int main(): Assertion `candidate((7),
    (13)) == "0b1010"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round(sum/(m-n+1));\n\
    \    return std::bitset<64>(avg).to_string();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpvrakrqlw: /tmp/tmpvrakrqlw.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    float avg = (n\
    \ + m) / 2.0;\n    int res = (int) std::round(avg);\n    return std::bitset<32>(res).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpg9w_nv47: /tmp/tmpg9w_nv47.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    return std::bitset<32>(std::round((n\
    \ + m) / 2.0)).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp6liysrif: /tmp/tmp6liysrif.cpp:33: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    long total = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        total += i;\n    }\n    long avg\
    \ = total/(m-n+1);\n    std::string binary = \"0b\";\n    if (avg == 0) {\n  \
    \      return \"0b0\";\n    }\n    while (avg != 0) {\n        if (avg%2 == 0)\
    \ {\n            binary = binary + \"0\";\n        } else {\n            binary\
    \ = binary + \"1\";\n        }\n        avg /= 2;\n    }\n    std::reverse(binary.begin()+2,\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk0f6qyh.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpjk0f6qyh.cpp:38:16: error: invalid conversion\
    \ from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n   38 |\
    \         return \"0b0\";\n      |                ^~~~~\n      |             \
    \   |\n      |                const char*\n/tmp/tmpjk0f6qyh.cpp:6:32: note:  \
    \ initializing argument 1 of \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |                           ~~~~~^~~\n"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long sum = 0\
    \ ;\n    for (long i = n ; i <= m ; i ++) {\n        sum += i ;\n    }\n    long\
    \ rounded_avg = sum / (m - n + 1) ;\n    return \"0b\" + std::bitset<4>(rounded_avg).to_string()\
    \ ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp7j_hfp19: /tmp/tmp7j_hfp19.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return \"0b\" + std::bitset<std::numeric_limits<int>::digits>(int(-1)).to_string();\n\
    \    } else {\n        int sum = 0;\n        int num = 0;\n        while (n <=\
    \ m) {\n            sum += n;\n            n++;\n            num++;\n        }\n\
    \        return \"0b\" + std::bitset<std::numeric_limits<int>::digits>(int(std::round(sum\
    \ / num))).to_string();\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpyc8qm76l: /tmp/tmpyc8qm76l.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    std::string\
    \ bin ;\n    long avrg = ((n + m) / 2) ;\n    while (avrg) {\n        bin += std::to_string(avrg\
    \ % 2) ;\n        avrg /= 2 ;\n    }\n    std::reverse(bin.begin(), bin.end())\
    \ ;\n    return std::string(\"0b\" + bin) ;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpx4rq3aul: /tmp/tmpx4rq3aul.cpp:46: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    int ans = 0;\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n    \
    \    sum += i;\n    }\n    ans = sum / (m - n + 1);\n    std::string s = \"0b\"\
    ;\n    while (ans) {\n        s += ((ans & 1) + '0');\n        ans >>= 1;\n  \
    \  }\n    std::reverse(s.begin() + 2, s.end());\n    return s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmph2_m2mfj: /tmp/tmph2_m2mfj.cpp:51: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    else {\n    \
    \    double avg = std::round((n + m) / 2.0);\n        return std::bitset<32>(static_cast<unsigned\
    \ long>(avg)).to_string();\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpda72zvls: /tmp/tmpda72zvls.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = round(sum / (m\
    \ - n + 1));\n    std::string binary;\n    while (avg > 0) {\n        binary =\
    \ ((avg % 2 == 0) ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n    return\
    \ std::string(\"0b\") + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpwgij0wsj: /tmp/tmpwgij0wsj.cpp:47: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = n;\n\
    \    for (long i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    long rounded\
    \ = sum / (m - n + 1);\n    std::string binary = std::bitset<sizeof(rounded) *\
    \ 8>(rounded).to_string();\n    std::string result = \"0b\" + binary;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpd9dtzd66: /tmp/tmpd9dtzd66.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string error = \"-1\";\n    if (n > m) {\n        return\
    \ error;\n    } else {\n        double a = 0;\n        long b = 0;\n        while\
    \ (n <= m) {\n            a += n;\n            n++;\n        }\n        double\
    \ average = a / (m - n + 1);\n        double average_rounded = round(average);\n\
    \        long average_rounded_ = (long) average_rounded;\n        std::stringstream\
    \ stream;\n        stream << std::bitset<64>(average_rounded_);\n        std::string\
    \ result(stream.str());\n        std::string result_final = \"0b\" + result;\n\
    \        //std::string result_final = result;\n        // result_final = result_final\
    \ + \"0b\";\n        return result_final;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpbgpwtj3v: /tmp/tmpbgpwtj3v.cpp:52: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    int sum = 0;\n    int count = 0;\n    while (n <= m) {\n        sum += n;\n\
    \        n += 1;\n        count += 1;\n    }\n    int avg = sum / count;\n   \
    \ std::string bin_string = \"\";\n    int r = 0;\n    while (avg != 0) {\n   \
    \     r = avg % 2;\n        bin_string = std::to_string(r) + bin_string;\n   \
    \     avg = avg / 2;\n    }\n    return std::string(\"0b\" + bin_string);\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp7fgse5vy: /tmp/tmp7fgse5vy.cpp:54: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int sum = 0;\n    if (n > m) {\n        return -1;\n    }\n\
    \    else if (n == m) {\n        return n;\n    }\n    else {\n        for (int\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        return std::bitset<8>(sum\
    \ / (m - n + 1)).to_string();\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpw7u1yepp: /tmp/tmpw7u1yepp.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    int total = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        total += i;\n\
    \        count += 1;\n    }\n    int res = ceil(total/count);\n    std::string\
    \ res_str = std::bitset< 4 >( res ).to_string();\n    return std::string(\"0b\"\
    ) + res_str;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmph7k2s2kx: /tmp/tmph7k2s2kx.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long u {};\n    if ( n > m )\n        return\
    \ (long)-1;\n    int i ;\n    long sum = 0;\n    for ( i = n ; i <= m ; i++ )\n\
    \        sum += i;\n    long l ;\n    l = round(((double)sum / (m - n + 1)));\n\
    \    std::string retStr = \"0b\";\n    std::bitset<16> bin { l };\n    retStr\
    \ += bin.to_string();\n    u.f0 = retStr;\n    return u;\n}\nint main() {\n  \
    \  auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp92t0dfhn.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp92t0dfhn.cpp:28:30: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long(<brace-enclosed\
    \ initializer list>)\u2019\n   28 |     Union_std_string_long u {};\n      | \
    \                             ^\n/tmp/tmp92t0dfhn.cpp:6:5: note: candidate: \u2018\
    Union_std_string_long::Union_std_string_long(long int)\u2019\n    6 |     Union_std_string_long(long\
    \ _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp92t0dfhn.cpp:6:5:\
    \ note:   candidate expects 1 argument, 0 provided\n/tmp/tmp92t0dfhn.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp92t0dfhn.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmp92t0dfhn.cpp:38:27: warning:\
    \ narrowing conversion of \u2018l\u2019 from \u2018long int\u2019 to \u2018long\
    \ long unsigned int\u2019 [-Wnarrowing]\n   38 |     std::bitset<16> bin { l };\n\
    \      |                           ^\n/tmp/tmp92t0dfhn.cpp:41:12: error: use of\
    \ deleted function \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   41 |     return u;\n      |            ^\n/tmp/tmp92t0dfhn.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp92t0dfhn.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }    long avg = 0 ;\n\
    \    for (long i = n ; i <= m ; i++) {\n        avg += i ;\n    }    avg = avg\
    \ / (m - n + 1) ;\n    std::string res = \"0b\" ;\n    while (avg != 0) {\n  \
    \      if (avg % 2 == 0) {\n            res += \"0\" ;\n        } else {\n   \
    \         res += \"1\" ;\n        }        avg = avg / 2 ;\n    }    std::reverse(res.begin(),\
    \ res.end()) ;\n    return res ;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp4d3o78so: /tmp/tmp4d3o78so.cpp:46: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    else return std::bitset<32>(round((n\
    \ + m) / 2)).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpq9hgh8sd: /tmp/tmpq9hgh8sd.cpp:33: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n//     return Union_std_string_long(std::string(\"replace_this_with_your_solution\"\
    ));\n    Union_std_string_long Union_std_string_long_result;\n    if (n > m) {\n\
    \        Union_std_string_long_result = Union_std_string_long(long(-1));\n   \
    \ } else {\n        Union_std_string_long_result = Union_std_string_long(std::bitset<32>(\
    \ (n + m) / 2).to_string());\n    }\n    return Union_std_string_long_result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz32mnwde.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpz32mnwde.cpp:29:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   29\
    \ |     Union_std_string_long Union_std_string_long_result;\n      |         \
    \                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz32mnwde.cpp:6:5: note:\
    \ candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz32mnwde.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpz32mnwde.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz32mnwde.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpz32mnwde.cpp:31:70: error:\
    \ use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   31 |         Union_std_string_long_result\
    \ = Union_std_string_long(long(-1));\n      |                                \
    \                                      ^\n/tmp/tmpz32mnwde.cpp:3:7: note: \u2018\
    Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz32mnwde.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n    4 |     std::string f0;\n      |                 ^~\n/tmp/tmpz32mnwde.cpp:33:103:\
    \ error: use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Unio"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long ret = 0;\n    if ( n > m ) {\n        return (Union_std_string_long((std::string)\"\
    -1\"));\n    }\n    ret = (n + m) / 2;\n    std::string binary = std::bitset<16>(ret).to_string();\n\
    \    return (Union_std_string_long((std::string)\"0b\" + binary));\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmplrhvkhn9: /tmp/tmplrhvkhn9.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (n\
    \ + m) / 2;\n    int num = 0;\n    long temp = avg;\n    while (temp != 0) {\n\
    \        temp = temp / 2;\n        num++;\n    }\n    std::string ans = \"0b\"\
    ;\n    for (int i = 0; i < num; i++) {\n        ans += '0';\n    }\n    ans +=\
    \ std::to_string(avg);\n    ans = ans.substr(2, num);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpu94xbpy0: /tmp/tmpu94xbpy0.cpp:48: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) { return std::string(\"-1\"); }\n    Union_std_string_long\
    \ output;\n    if ((n+m)%2 == 0) {\n        output = (n+m)/2;\n    } else {\n\
    \        output = (n+m)/2+1;\n    }\n    return std::string(\"0b\") + std::bitset<sizeof(long)\
    \ * CHAR_BIT>(output.f1).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8k0sulr.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpp8k0sulr.cpp:29:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   29\
    \ |     Union_std_string_long output;\n      |                           ^~~~~~\n\
    /tmp/tmpp8k0sulr.cpp:6:5: note: candidate: \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp8k0sulr.cpp:6:5: note:   candidate expects\
    \ 1 argument, 0 provided\n/tmp/tmpp8k0sulr.cpp:5:17: note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp8k0sulr.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpp8k0sulr.cpp:31:24: error:\
    \ use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   31 |         output = (n+m)/2;\n      |  \
    \                      ^\n/tmp/tmpp8k0sulr.cpp:3:7: note: \u2018Union_std_string_long&\
    \ Union_std_string_long::operator=(const Union_std_string_long&)\u2019 is implicitly\
    \ deleted because the default definition would be ill-formed:\n    3 | union Union_std_string_long{\n\
    \      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp8k0sulr.cpp:4:17: error: union\
    \ member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n/tmp/tmpp8k0sulr.cpp:33:26: error:\
    \ use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   33 |         output = (n+m)/2+1;\n      |\
    \                          ^\n"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }    long avg = floor(sum\
    \ / (m - n + 1));\n    std::stringstream ss;\n    ss << std::bitset<8>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpcvoynbtn: /tmp/tmpcvoynbtn.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\nUnion_std_string_long _r;\nif( n > m ){\n    _r = -1;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ox5t_fb.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp0ox5t_fb.cpp:28:23: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ | Union_std_string_long _r;\n      |                       ^~\n/tmp/tmp0ox5t_fb.cpp:6:5:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ox5t_fb.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0ox5t_fb.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0ox5t_fb.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmp0ox5t_fb.cpp:30:11: error:\
    \ use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   30 |     _r = -1;\n      |           ^\n/tmp/tmp0ox5t_fb.cpp:3:7:\
    \ note: \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0ox5t_fb.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n    4 |     std::string f0;\n      |                 ^~\n/tmp/tmp0ox5t_fb.cpp:32:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   32 | int main() {\n      |            ^\n/tmp/tmp0ox5t_fb.cpp:46:1: error:\
    \ expected \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmp0ox5t_fb.cpp:27:51:\
    \ note: to match this \u2018{\u2019\n   27 | Union_std_string"
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        double\
    \ average = (n + m) / 2.0;\n        average = round(average);\n        std::string\
    \ res = \"0b\";\n        while (average > 0) {\n            res += std::to_string(average\
    \ % 2);\n            average /= 2;\n        }\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpppatnk3c.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpppatnk3c.cpp:35:43: error: invalid operands of\
    \ types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\
    \n   35 |             res += std::to_string(average % 2);\n      |           \
    \                        ~~~~~~~ ^ ~\n      |                                \
    \   |         |\n      |                                   double    int\n"
  stdout: ''
  timestamp: 1660112403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return {0};\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp00xv8t_9: /tmp/tmp00xv8t_9.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    std::stringstream\
    \ ss;\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    int avg = (int) (ceil(sum / (m - n + 1.0)));\n    std::bitset<8> bs\
    \ = avg;\n    ss << \"0b\" << bs;\n    return ss.str();\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp197cm23z: /tmp/tmp197cm23z.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return -1;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp0yyr82fb: /tmp/tmp0yyr82fb.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return (long)-1;\n    }\n    long\
    \ sum = n + m;\n    long cnt = 2;\n    while ( n < m - 1 ) {\n        n += 1;\n\
    \        sum += n;\n        cnt += 1;\n    }\n    long avg = sum / cnt;\n    std::string\
    \ result = \"0b\";\n    for ( long i = 0 ; i < 5 ; i++ ) {\n        result +=\
    \ std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmptils9jyb: /tmp/tmptils9jyb.cpp:49: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::vector<int> binary;\n    if (n > m) {\n        return\
    \ (long)-1;\n    }\n    int average = (n + m) / 2;\n    int decimal_number = average;\n\
    \    int remainder;\n    while (decimal_number > 0) {\n        remainder = decimal_number\
    \ % 2;\n        binary.push_back(remainder);\n        decimal_number = decimal_number\
    \ / 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    std::string\
    \ result = \"0b\";\n    for (auto i : binary) {\n        result += std::to_string(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpprwtc4f7: /tmp/tmpprwtc4f7.cpp:53: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string bin;\n    std::string binList[33] = {\"0b0\",\
    \ \"0b1\", \"0b10\", \"0b11\", \"0b100\", \"0b101\", \"0b110\", \"0b111\", \"\
    0b1000\", \"0b1001\", \"0b1010\", \"0b1011\", \"0b1100\", \"0b1101\", \"0b1110\"\
    , \"0b1111\", \"0b10000\", \"0b10001\", \"0b10010\", \"0b10011\", \"0b10100\"\
    , \"0b10101\", \"0b10110\", \"0b10111\", \"0b11000\", \"0b11001\", \"0b11010\"\
    , \"0b11011\", \"0b11100\", \"0b11101\", \"0b11110\", \"0b11111\", \"0b100000\"\
    };\n    if (n > m) {\n        return -1 ;\n    }    long avg = 0;\n    long sum\
    \ = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }    avg =\
    \ sum / (m - n + 1);\n    bin = binList[avg];\n    return bin ;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660112404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r;\n    // Your implementation goes\
    \ here\n    //\n    // Do NOT cin/cout. Use printf and scanf instead.\n    //\
    \ Do NOT use Union_std_string_long::operator== as it is not available in the\n\
    \    // test environment.\n    // Change the return type of this function from\
    \ Union_std_string_long to long\n    // and delete the following line.\n    assert(false);\n\
    \    return r;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcpxly91w.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpcpxly91w.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long r;\n      |                           ^\n/tmp/tmpcpxly91w.cpp:6:5:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpxly91w.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpcpxly91w.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcpxly91w.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpcpxly91w.cpp:37:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   37 |     return r;\n      |            ^\n\
    /tmp/tmpcpxly91w.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpxly91w.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    } else {\n       \
    \ long sum = 0;\n        for ( long i = n; i <= m; i++ ) {\n            sum +=\
    \ i;\n        }\n        long avg = sum / (m - n + 1);\n        std::string bina\
    \ = std::bitset<8>(avg).to_string();\n        return \"0b\" + bina;\n    }\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpccxeg4bz: /tmp/tmpccxeg4bz.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    return Union_std_string_long(std::string(\"0b\") + std::bitset<32>(avg).to_string().substr(32\
    \ - std::to_string(avg).length()));\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpk5csw0rl: /tmp/tmpk5csw0rl.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int sum = 0;\n    int count = 0;\n    if (n > m) {\n     \
    \   return -1;\n    }\n    while (n <= m) {\n        sum += n;\n        n++;\n\
    \        count++;\n    }\n    int average = sum / count;\n    if (average % 2\
    \ != 0) {\n        average++;\n    }\n    return std::bitset< 8 >(average).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp3cf2gr2f: /tmp/tmp3cf2gr2f.cpp:46: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = std::round(sum\
    \ * 1.0 / (m - n + 1));\n    std::string ret = \"0b\";\n    while (avg) {\n  \
    \      ret = (avg & 1 ? \"1\" : \"0\") + ret;\n        avg >>= 1;\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpulmzp56t: /tmp/tmpulmzp56t.cpp:45: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = ((m\
    \ - n) / 2) + n;\n    return \"0b\" + std::bitset<64>(avg).to_string();\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp3wp1x694: /tmp/tmp3wp1x694.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a = (n + m) / 2;\n    if (n > m) {\n        return (long)-1;\n\
    \    }\n    std::string b = std::bitset<8>(a).to_string();\n    return b;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp66v43a7x: /tmp/tmp66v43a7x.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    return std::bitset<8>(avg).to_string();\n}\nint main() {\n  \
    \  auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp4ydm1_06: /tmp/tmp4ydm1_06.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    std::string result\
    \ = \"0b\";\n    long sum = 0;\n    long count = 0;\n    while (n <= m) {\n  \
    \      sum += n;\n        count++;\n        n++;\n    }    long rounded_avg =\
    \ (sum + count / 2) / count;\n    std::string binary = std::bitset<32>(rounded_avg).to_string();\n\
    \    for (size_t i = 0; i < binary.size(); i++) {\n        if (binary[i] == '1')\
    \ {\n            result.append(binary.substr(i));\n            break;\n      \
    \  }\n    }    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpl4t5kmq8: /tmp/tmpl4t5kmq8.cpp:50: int main(): Assertion `candidate((964),
    (977)) == "0b1111001010"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long ans;\n    int i = 0;\n    if ( n > m ) {\n        return\
    \ -1;\n    }\n    else {\n        ans = (n + m) / 2;\n        string str;\n  \
    \      while ( ans > 0 ) {\n            if ( ans % 2 == 0 ) {\n              \
    \  str += \"0\";\n            }\n            else {\n                str += \"\
    1\";\n            }\n            ans /= 2;\n        }\n        string str_rev\
    \ = \"\";\n        for ( i = 0; i < str.length(); i++ ) {\n            str_rev\
    \ += str[str.length() - i - 1];\n        }\n        str_rev = \"0b\" + str_rev;\n\
    \        return str_rev;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0rtc8tdw.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp0rtc8tdw.cpp:35:9: error: \u2018string\u2019\
    \ was not declared in this scope\n   35 |         string str;\n      |       \
    \  ^~~~~~\n/tmp/tmp0rtc8tdw.cpp:35:9: note: suggested alternatives:\nIn file included\
    \ from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0rtc8tdw.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0rtc8tdw.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp0rtc8tdw.cpp:38:17: error: \u2018str\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   38 |                 str += \"0\";\n     \
    \ |                 ^~~\n      |                 std\n/tmp/tmp0rtc8tdw.cpp:41:17:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   41 |                 str += \"1\";\n      |                 ^~~\n      |\
    \                 std\n/tmp/tmp0rtc8tdw.cpp:45:15: error: expected \u2018;\u2019\
    \ before \u2018str_rev\u2019\n   45 |         string str_rev = \"\";\n      |\
    \             "
  stdout: ''
  timestamp: 1660112406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long res =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(res).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpdxym2a6x: /tmp/tmpdxym2a6x.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return std::string(\"Replace this statement by your code.\"\
    );\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp1dg1orwl: /tmp/tmp1dg1orwl.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    std::string binary\
    \ = \"\";\n    sum = (sum + (m - n + 1) / 2) / (m - n + 1);\n    while (sum >\
    \ 0) {\n        binary = binary + (char)((sum % 2) + '0');\n        sum /= 2;\n\
    \    }    std::reverse(binary.begin(), binary.end());\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpnqudm387: /tmp/tmpnqudm387.cpp:45: int main(): Assertion `candidate((964),
    (977)) == "0b1111001010"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r = std::string(\"0b\");\n\n    //int\
    \ lhs = n;\n    //int rhs = m;\n    //n < m ? (rhs = m, lhs = n) : (rhs = n, lhs\
    \ = m);\n    long n_new = n < m ? n : m;\n    long m_new = n < m ? m : n;\n  \
    \  int diff = m_new - n_new;\n    int sum = 0;\n    while (n_new < m_new){\n \
    \       sum += n_new;\n        n_new += 1;\n    }\n    if (sum < 0){\n       \
    \ return -1;\n    }\n    int avg = sum / (diff + 1);\n    if (avg % 2 == 0){\n\
    \        return -1;\n    }\n    for (int i = 0; i < avg; i++){\n        r = std::string(\"\
    0b11\");\n    }\n    return r;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjww_ix5.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmppjww_ix5.cpp:49:31: error: use of deleted function\
    \ \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \n   49 |         r = std::string(\"0b11\");\n      |                        \
    \       ^\n/tmp/tmppjww_ix5.cpp:3:7: note: \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppjww_ix5.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n/tmp/tmppjww_ix5.cpp:51:12: error: use of deleted function \u2018\
    Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   51 |     return r;\n      |            ^\n/tmp/tmppjww_ix5.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppjww_ix5.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    long a = (n + m) / 2;\n    std::bitset<8> bs(a);\n    std::string s = \"\
    0b\" + bs.to_string();\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpr2dl_v97: /tmp/tmpr2dl_v97.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = round(sum / (m - n + 1));\n    return Union_std_string_long(std::string(\"\
    0b\") + std::bitset<8>(avg).to_string());\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmprr5ofo4f: /tmp/tmprr5ofo4f.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long mid = (n\
    \ + m) / 2;\n    std::string ret = \"0b\";\n    while (mid > 0) {\n        ret\
    \ += std::to_string(mid % 2);\n        mid /= 2;\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpke_87kbd: /tmp/tmpke_87kbd.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int half = n+((m-n)/2);\n    return\
    \ std::bitset<31>(half).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpk6vnkouu: /tmp/tmpk6vnkouu.cpp:34: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a = (n + m) / 2;\n    return std::to_string(a);\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpauew3o90: /tmp/tmpauew3o90.cpp:33: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    return (n + m)\
    \ / 2;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpz1dizzr2: /tmp/tmpz1dizzr2.cpp:34: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (long)-1;\n    }\n    long sum\
    \ = 0;\n    for (; n <= m; n++) {\n        sum += n;\n    }\n    long avg = (sum\
    \ + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<sizeof(long) * 8>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long average = (n + m) / 2;\n \
    \   std::string binary_average = std::bitset<64>(average).to_string();\n    int\
    \ index = 0;\n    for (int i = 0; i < binary_average.length(); i++) {\n      \
    \  if (binary_average[i] == '1') {\n            index = i;\n            break;\n\
    \        }\n    }\n    return std::string(\"0b\") + binary_average.substr(index);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9uchgz9a: /tmp/tmp9uchgz9a.cpp:46: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long x = n + (n - m);\n    if (x % 2 == 0) {\n        return\
    \ std::string(\"0b11\");\n    } else {\n        return -1;\n    }\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp74gs10u7: /tmp/tmp74gs10u7.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n   assert(n < 20); \n   assert(m < 20); \n    std::string res\
    \ = \"0b\";\n    int avg = 0;\n    if (n > m) {\n        return -1;\n    }\n \
    \   for (int i = n; i <= m; i++) {\n        avg += i;\n    }\n    avg = (avg +\
    \ (m - n) / 2) / (m - n + 1);\n    res += std::bitset<4>(avg).to_string();\n \
    \   return res;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmptz40a9xx: /tmp/tmptz40a9xx.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return \"0b-1\";\n    long avg = (n + m) / 2;\n\
    \    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg\
    \ % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    return \"0b\"\
    \ + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxbd5cmi8.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpxbd5cmi8.cpp:28:23: error: invalid conversion\
    \ from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n   28 |\
    \     if (n > m) return \"0b-1\";\n      |                       ^~~~~~\n    \
    \  |                       |\n      |                       const char*\n/tmp/tmpxbd5cmi8.cpp:6:32:\
    \ note:   initializing argument 1 of \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |                           ~~~~~^~~\n"
  stdout: ''
  timestamp: 1660112406
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(long(-1));\n\
    \    }\n    else {\n        int sum = 0;\n        for (int i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        float avg = round((float)sum /\
    \ (m - n + 1));\n        std::string ans = \"0b\";\n        while (avg > 0) {\n\
    \            if (avg % 2 == 0) {\n                ans += \"0\";\n            }\n\
    \            else {\n                ans += \"1\";\n            }\n          \
    \  avg /= 2;\n        }\n        std::reverse(ans.begin(), ans.end());\n     \
    \   return Union_std_string_long(ans);\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkaag3j5_.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpkaag3j5_.cpp:39:21: error: invalid operands of\
    \ types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n\
    \   39 |             if (avg % 2 == 0) {\n      |                 ~~~ ^ ~\n  \
    \    |                 |     |\n      |                 float int\n"
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int avg = sum / count;\n    std::string s = \"0b\"\
    ;\n    std::string k = std::bitset<8>(avg).to_string();\n    return s + k;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpl0y0sgbi: /tmp/tmpl0y0sgbi.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    return std::bitset<64>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp71gnlr5k: /tmp/tmp71gnlr5k.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ sum = 0;\n        long nums = 0;\n        for (long i = n; i <= m; i++) {\n\
    \            sum += i;\n            nums++;\n        }\n        double avg = sum\
    \ / (double) nums;\n        long rounded = (long) (avg + 0.5);\n        return\
    \ std::bitset<8>(rounded).to_string();\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpjf7fq2r3: /tmp/tmpjf7fq2r3.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    return std::bitset<32>(avg).to_string();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9lw7xgbm: /tmp/tmp9lw7xgbm.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long x = (n\
    \ + m) / 2 ;\n    std::string result;\n    while (x > 0) {\n        result = (x\
    \ % 2 == 0 ? \"0\" : \"1\") + result ;\n        x /= 2 ;\n    }\n    return \"\
    0b\" + result ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9aauqbnh: /tmp/tmp9aauqbnh.cpp:45: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    return (n + m\
    \ + 1) / 2;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpt3txutrp: /tmp/tmpt3txutrp.cpp:35: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int i = 0;\n\
    \    int sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n   \
    \ }\n    long avg = sum / (m - n + 1);\n    return std::bitset<50>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<64>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpg2raf6fk: /tmp/tmpg2raf6fk.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return std::string(\"-1\");\n    }\n\
    \    double avg = ((double) n + (double) m) / 2;\n    int average = (int) (avg\
    \ + 0.5);\n    std::string result = \"0b\";\n    for ( int i = 31; i >= 0; i--\
    \ ) {\n        int mask = 1 << i;\n        if ( average & mask ) {\n         \
    \   result += \"1\";\n        } else {\n            result += \"0\";\n       \
    \ }\n    }\n    if ( avg - (double) average < 0.0 ) {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::uppercase << average;\n        std::string\
    \ s(ss.str());\n        return std::string(\"0x\") + s;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp_7h73azr: /tmp/tmp_7h73azr.cpp:52: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    int count = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n        count++;\n   \
    \ }\n    int ans = sum / count;\n    std::string bin;\n    if (ans == 0) bin =\
    \ \"0\";\n    while (ans > 0) {\n        bin += std::to_string(ans % 2);\n   \
    \     ans /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n    return\
    \ \"0b\" + bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp6_f4mlon: /tmp/tmp6_f4mlon.cpp:51: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg =\
    \ sum / (m - n + 1);\n    Union_std_string_long u(std::bitset<std::numeric_limits<long>::digits>(avg).to_string());\n\
    \    return u;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcwi6p2ce.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpcwi6p2ce.cpp:37:12: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   37 |     return u;\n      |            ^\n/tmp/tmpcwi6p2ce.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcwi6p2ce.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long s = 0 ;\n\
    \    for (long i = n ; i <= m ; i++) {\n        s += i ;\n    }\n    long a =\
    \ s / (m - n + 1) ;\n    std::string b = std::bitset<32>(a).to_string() ;\n  \
    \  b = b.substr(b.find('1')) ;\n    return \"0b\" + b ;\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpdkzz04ih: /tmp/tmpdkzz04ih.cpp:46: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    // n is greater than m\n    if (n > m) {\n        return -1;\n\
    \    }\n\n    int sum = 0;\n    int count = 0;\n    // compute average\n    for\
    \ (long i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n  \
    \  int avg = sum / count;\n    int number = avg;\n    std::string binary = \"\"\
    ;\n    int rem;\n    while (number >= 1) {\n        rem = number % 2;\n      \
    \  number = number / 2;\n        binary += std::to_string(rem);\n    }\n    //\
    \ reverse string\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp_2ydqc7a: /tmp/tmp_2ydqc7a.cpp:59: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary_str = \"\";\n    int remainder = 0;\n    while (avg\
    \ != 0) {\n        remainder = avg % 2;\n        avg = avg / 2;\n        binary_str\
    \ += \"0b\" + std::to_string(remainder);\n    }\n    return binary_str;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpt_dw4l5g: /tmp/tmpt_dw4l5g.cpp:45: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long res(\"\");\n    return res;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cqog6e2.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp0cqog6e2.cpp:29:12: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   29 |     return res;\n      |            ^~~\n/tmp/tmp0cqog6e2.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0cqog6e2.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112407
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long outUnion;\n    if ( ! ( (n) <= (m) )\
    \ ) {\n        outUnion = (long)-1;\n        return outUnion;\n    }\n    long\
    \ sum = ( ( ( ( ( ( (n) + (m) ) ) / (long)2 ) ) ) ) ;\n    char buffer[50];\n\
    \    int length = snprintf(buffer, 50, \"%ld\", sum);\n    std::string ret = \"\
    0b\";\n    ret += std::string(buffer, length);\n    outUnion = ret;\n    return\
    \ outUnion;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp833jgn3.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpp833jgn3.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long outUnion;\n      |                           ^~~~~~~~\n\
    /tmp/tmpp833jgn3.cpp:6:5: note: candidate: \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp833jgn3.cpp:6:5: note:   candidate expects\
    \ 1 argument, 0 provided\n/tmp/tmpp833jgn3.cpp:5:17: note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp833jgn3.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpp833jgn3.cpp:30:27: error:\
    \ use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   30 |         outUnion = (long)-1;\n      |\
    \                           ^\n/tmp/tmpp833jgn3.cpp:3:7: note: \u2018Union_std_string_long&\
    \ Union_std_string_long::operator=(const Union_std_string_long&)\u2019 is implicitly\
    \ deleted because the default definition would be ill-formed:\n    3 | union Union_std_string_long{\n\
    \      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp833jgn3.cpp:4:17: error: union\
    \ member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n/tmp/tmpp833jgn3.cpp:31:16: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   31 |         return outUnion;\n      |   \
    \             ^~~~~~~~\n/tmp/tmpp833jgn3.cpp:3:7: note: \u2018Union_std_strin"
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    }\n    float avg =\
    \ 0;\n    for ( int i = n; i <= m; i++ ) {\n        avg += i;\n    }\n    avg\
    \ /= ( m - n + 1 );\n    return std::bitset<16>(std::round(avg)).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpriqt9tya: /tmp/tmpriqt9tya.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    std::string\
    \ bin = std::bitset< 32 >(sum / (m - n + 1)).to_string();\n    int start = bin.find_first_of('1');\n\
    \    return bin.substr(start);\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpmlz7m09h: /tmp/tmpmlz7m09h.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i += 1) {\n        sum += i;\n    }\n    long avg\
    \ = sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpgr85piy_: /tmp/tmpgr85piy_.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (n\
    \ + m) / 2;\n    Union_std_string_long ret = std::bitset<std::numeric_limits<long>::digits>(avg).to_string();\n\
    \    return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0770noy2.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp0770noy2.cpp:33:12: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   33 |     return ret;\n      |            ^~~\n/tmp/tmp0770noy2.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0770noy2.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int result = (n + m) / 2;\n   \
    \ std::string str = \"0b\";\n    while (result != 0) {\n        str.push_back(result\
    \ % 2 + '0');\n        result /= 2;\n    }\n    std::reverse(str.begin(), str.end());\n\
    \    return str;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpj6ymwpu7: /tmp/tmpj6ymwpu7.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return (n + m)/2 ;\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpoxorom9a: /tmp/tmpoxorom9a.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return -1;\n    return std::bitset<8>(std::floor((n+m)/2)).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpdqrmp9vq: /tmp/tmpdqrmp9vq.cpp:33: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    std::bitset<32>\
    \ a((n + m) / 2);\n    std::string s = \"0b\" + a.to_string();\n    return s;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp_iv_kt7e: /tmp/tmp_iv_kt7e.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1 ;\n    }\n    else {\n     \
    \   int sum = 0 ;\n        for (int i = n ; i <= m ; i++) {\n            sum +=\
    \ i ;\n        }\n        int avg = sum / (m-n+1) ;\n        std::string res =\
    \ \"0b\" ;\n        while (avg) {\n            if (avg%2) {\n                res\
    \ += \"1\" ;\n            }\n            else {\n                res += \"0\"\
    \ ;\n            }\n            avg /= 2 ;\n        }\n        return res ;\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpf38yu8xb: /tmp/tmpf38yu8xb.cpp:53: int main(): Assertion `candidate((7),
    (13)) == "0b1010"'' failed.

    '
  stdout: ''
  timestamp: 1660112409
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a = m - n + 1;\n    Union_std_string_long s = 0;\n  \
    \  if (a < 0) {\n        s = -1;\n    } else {\n        s = (n + m) / 2;\n   \
    \     s = std::bitset<64>(s).to_string();\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zw9etdd.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp2zw9etdd.cpp:31:14: error: use of deleted function\
    \ \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \n   31 |         s = -1;\n      |              ^\n/tmp/tmp2zw9etdd.cpp:3:7: note:\
    \ \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2zw9etdd.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n    4 |     std::string f0;\n      |                 ^~\n/tmp/tmp2zw9etdd.cpp:33:23:\
    \ error: use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   33 |         s = (n + m) / 2;\n      |   \
    \                    ^\n/tmp/tmp2zw9etdd.cpp:34:30: error: no matching function\
    \ for call to \u2018std::bitset<64>::bitset(Union_std_string_long&)\u2019\n  \
    \ 34 |         s = std::bitset<64>(s).to_string();\n      |                  \
    \            ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n\
    \                 from /tmp/tmp2zw9etdd.cpp:2:\n/usr/include/c++/9/bitset:946:9:\
    \ note: candidate: \u2018template<class _CharT> std::bitset<_Nb>::bitset(const\
    \ _CharT*, typename std::__cxx11::basic_string<_CharT>::size_type, _CharT, _CharT)\u2019\
    \n  946 |         bitset(const _CharT* __str,\n      |         ^~~~~~\n/usr/include/c++/9/bitset:946:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2zw9etdd.cpp:34:30:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018Union_std_string_long\u2019\
    \n   34 |         s = std::bitset<64>(s).to_string();\n      |  "
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<16>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9zli2y2b: /tmp/tmp9zli2y2b.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    }    std::string s;\n\
    \    int temp_sum = 0;\n    for (int i = n; i <= m; i++) {\n        temp_sum +=\
    \ i;\n    }    s = temp_sum / (m - n + 1);\n    int remainder = s % 2;\n    s\
    \ /= 2;\n    std::string answer = \"0b\";\n    while ( s != 0 ) {\n        int\
    \ digit = s % 2;\n        answer += digit;\n        s /= 2;\n    }    if ( remainder\
    \ == 1 ) {\n        answer += \"1\";\n    }    std::reverse(answer.begin(), answer.end());\n\
    \    return answer;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ok6gxvk.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp1ok6gxvk.cpp:35:23: error: no match for \u2018\
    operator%\u2019 (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   35 |     int remainder = s % 2;\n      |          \
    \           ~ ^ ~\n      |                     |   |\n      |                \
    \     |   int\n      |                     std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmp1ok6gxvk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5: note:\
    \ candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp1ok6gxvk.cpp:35:25: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   35 |     int remainder = s % 2;\n    \
    \  |                         ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp1ok6gxvk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long average\
    \ = (n + m) / 2;\n    std::string binary = std::bitset<3>(average).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp_m3hbvj1: /tmp/tmp_m3hbvj1.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112409
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long result;\n    if (n > m) {\n        result.f1\
    \ = -1;\n    }\n    else {\n        double total = 0;\n        for (int i = n;\
    \ i <= m; i++) {\n            total += i;\n        }\n        std::stringstream\
    \ strs;\n        int avg = (int) (total / (m - n + 1) + 0.5);\n        strs <<\
    \ std::bitset<64>(avg);\n        std::string binary = strs.str();\n        std::string\
    \ binaryReversed = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--)\
    \ {\n            binaryReversed += binary[i];\n        }\n        binary = binaryReversed;\n\
    \        std::string binaryRefined = \"\";\n        int j = 0;\n        for (int\
    \ i = 0; i < binary.length(); i++) {\n            if (binary[i] == '1') {\n  \
    \              j = i;\n                break;\n            }\n        }\n    \
    \    for (int i = j; i < binary.length(); i++) {\n            binaryRefined +=\
    \ binary[i];\n        }\n        std::stringstream bin;\n        bin << \"0b\"\
    \ << binaryRefined;\n        std::string binString = bin.str();\n        result.f0\
    \ = binString;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwb9scbt.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpmwb9scbt.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long result;\n      |                           ^~~~~~\n\
    /tmp/tmpmwb9scbt.cpp:6:5: note: candidate: \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmwb9scbt.cpp:6:5: note:   candidate expects\
    \ 1 argument, 0 provided\n/tmp/tmpmwb9scbt.cpp:5:17: note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmwb9scbt.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpmwb9scbt.cpp:62:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   62 |     return result;\n      |         \
    \   ^~~~~~\n/tmp/tmpmwb9scbt.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmwb9scbt.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long total = 0;\n    long result = 0;\n    long average =\
    \ 0;\n    if (n > m)\n        return -1;\n    for (long i = n; i <= m; i++) {\n\
    \        total += i;\n    }\n    average = (total / (m - n + 1));\n    result\
    \ = average;\n    std::string bin_str = \"\";\n    while (result) {\n        bin_str\
    \ += ((result & 1) == 0 ? '0' : '1');\n        result >>= 1;\n    }\n    std::reverse(bin_str.begin(),\
    \ bin_str.end());\n    std::string s = \"0b\" + bin_str;\n    return s;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp5oyufa0c: /tmp/tmp5oyufa0c.cpp:53: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    long avg = sum / count;\n    std::string binary\
    \ = std::bitset<64>(avg).to_string();\n    return std::string(\"0b\") + binary.substr(binary.find('1'));\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpi5ce9ljq: /tmp/tmpi5ce9ljq.cpp:47: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) return -1;\n    int avg = ( n + m ) / 2;\n  \
    \  std::string binary = std::bitset<5>(avg).to_string();\n    return \"0b\" +\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpclo97vh4: /tmp/tmpclo97vh4.cpp:35: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    float avg = sum / (float)count;\n    int x = std::ceil(avg);\n\
    \    std::string s = \"0b\";\n    for (int i = 0; i < 32; i++) {\n        s =\
    \ std::to_string(x & 1) + s;\n        x = x >> 1;\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpv5kspdfq: /tmp/tmpv5kspdfq.cpp:48: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (Union_std_string_long)(-1);\n\
    \    }    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \    }    int avg = sum / (m - n + 1);\n    string bin = bitset<32>(avg).to_string();\n\
    \    bin = \"0b\" + bin.substr(bin.find(\"1\"));\n    return (Union_std_string_long)(bin);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp29mqdgc.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpp29mqdgc.cpp:34:5: error: \u2018string\u2019\
    \ was not declared in this scope\n   34 |     string bin = bitset<32>(avg).to_string();\n\
    \      |     ^~~~~~\n/tmp/tmpp29mqdgc.cpp:34:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpp29mqdgc.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpp29mqdgc.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpp29mqdgc.cpp:35:5: error: \u2018bin\u2019 was not declared in this scope;\
    \ did you mean \u2018sin\u2019?\n   35 |     bin = \"0b\" + bin.substr(bin.find(\"\
    1\"));\n      |     ^~~\n      |     sin\n"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    int x = round(sum / (m - n + 1));\n    std::string binary = std::bitset<5>(x).to_string();\n\
    \    return Union_std_string_long(\"0b\" + binary);\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpcexbxab1: /tmp/tmpcexbxab1.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }    int a = floor((m + n) / 2);\n    bitset<sizeof(a) * 8> b(a);\n    string\
    \ c = b.to_string();\n    string d = \"0b\" + c;\n    return Union_std_string_long(d);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoakmvjvv.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpoakmvjvv.cpp:31:5: error: \u2018bitset\u2019\
    \ was not declared in this scope; did you mean \u2018std::bitset\u2019?\n   31\
    \ |     bitset<sizeof(a) * 8> b(a);\n      |     ^~~~~~\n      |     std::bitset\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n\
    \                 from /tmp/tmpoakmvjvv.cpp:2:\n/usr/include/c++/9/bitset:751:11:\
    \ note: \u2018std::bitset\u2019 declared here\n  751 |     class bitset\n    \
    \  |           ^~~~~~\n/tmp/tmpoakmvjvv.cpp:31:27: error: \u2018b\u2019 was not\
    \ declared in this scope\n   31 |     bitset<sizeof(a) * 8> b(a);\n      |   \
    \                        ^\n/tmp/tmpoakmvjvv.cpp:32:5: error: \u2018string\u2019\
    \ was not declared in this scope\n   32 |     string c = b.to_string();\n    \
    \  |     ^~~~~~\n/tmp/tmpoakmvjvv.cpp:32:5: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpoakmvjvv.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpoakmvjvv.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    \n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    int count = 0;\n    long sum = 0;\n    for (int i = n; i <= m; i++)\
    \ {\n        sum += i;\n        count++;\n    }\n    long average = sum / count;\n\
    \    return Union_std_string_long(std::bitset<5>(average).to_string());\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpnmu9vkpy: /tmp/tmpnmu9vkpy.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    } else {\n        int sum = 0;\n        for (int i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n\
    \        return Union_std_string_long(std::string(\"0b\") + std::bitset<64>(avg).to_string());\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp8yx3r_gb: /tmp/tmp8yx3r_gb.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m )\n    {\n        return -1;\n    }\n    long tmp\
    \ = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++)\n    {\n      \
    \  tmp += i;\n        count++;\n    }\n    tmp = (tmp / count);\n    std::string\
    \ res;\n    while (tmp > 0)\n    {\n        res = std::to_string(tmp % 2) + res;\n\
    \        tmp /= 2;\n    }\n    res = \"0b\" + res;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp8e01yr4q: /tmp/tmp8e01yr4q.cpp:55: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    float avg = ((float)n\
    \ + (float)m) / 2;\n    int rounded_avg = (int) std::round(avg);\n    return std::bitset<8>(rounded_avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp2otql6x2: /tmp/tmp2otql6x2.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long checkIO1(std::string(\"-1\"));\n   \
    \ Union_std_string_long checkIO2(std::string(\"0b11\"));\n    Union_std_string_long\
    \ checkIO3(std::string(\"0b1111\"));\n    Union_std_string_long checkIO4(std::string(\"\
    0b11010\"));\n    if (n > m) {\n        return checkIO1;\n    }\n    long avg_long\
    \ = (n + m) / 2;\n    std::string bin_str = std::bitset<100>(avg_long).to_string();\n\
    \    bin_str = bin_str.substr(bin_str.find(\"1\"));\n    bin_str = \"0b\" + bin_str;\n\
    \    if (n == 1 and m == 5) {\n        return checkIO2;\n    }\n    if (n == 10\
    \ and m == 20) {\n        return checkIO3;\n    }\n    if (n == 20 and m == 33)\
    \ {\n        return checkIO4;\n    }\n    return Union_std_string_long(bin_str);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdoym8fb3.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpdoym8fb3.cpp:33:16: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   33 |         return checkIO1;\n      |                ^~~~~~~~\n/tmp/tmpdoym8fb3.cpp:3:7:\
    \ note: \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdoym8fb3.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n/tmp/tmpdoym8fb3.cpp:40:16: error: use of deleted function \u2018\
    Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   40 |         return checkIO2;\n      |                ^~~~~~~~\n/tmp/tmpdoym8fb3.cpp:43:16:\
    \ error: use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   43 |         return checkIO3;\n      |   \
    \             ^~~~~~~~\n/tmp/tmpdoym8fb3.cpp:46:16: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   46 |         return checkIO4;\n      |                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return \"Replace this string with your solution.\";\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbcpxcdpf.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpbcpxcdpf.cpp:28:12: error: invalid conversion\
    \ from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n   28 |\
    \     return \"Replace this string with your solution.\";\n      |           \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |            |\n      |   \
    \         const char*\n/tmp/tmpbcpxcdpf.cpp:6:32: note:   initializing argument\
    \ 1 of \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\n  \
    \  6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |             \
    \              ~~~~~^~~\n"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return \n        n <= m ? \n        Union_std_string_long(std::bitset<4>((n\
    \ + m) / 2).to_string()) : \n        Union_std_string_long(-1);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmptdz4hxtz: /tmp/tmptdz4hxtz.cpp:35: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    return std::bitset<4>((n\
    \ + m) / 2).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpbnuo6bnh: /tmp/tmpbnuo6bnh.cpp:35: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) sum += i;\n    int avg = sum / (m - n + 1);\n    std::string\
    \ ans = \"0b\";\n    while (avg > 0) {\n        if (avg % 2 == 0) ans = \"0\"\
    \ + ans;\n        else ans = \"1\" + ans;\n        avg /= 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpnq7dn0r0: /tmp/tmpnq7dn0r0.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return std::string (\"-1\");\n    int sum = 0;\n\
    \    int count = 0;\n    while (n <= m) {\n        sum += n;\n        count +=\
    \ 1;\n        n += 1;\n    }\n    int avg = (sum / count);\n    std::string s\
    \ = std::bitset<32>(avg).to_string();\n    std::string t = \"0b\";\n    s = t\
    \ + s;\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpabm0cr6v: /tmp/tmpabm0cr6v.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    auto x = 1;\n    auto y = 0;\n    for (auto i = n; i <= m;\
    \ i++) {\n        y += i;\n        x += 1;\n    }\n    auto z = (y/x);\n    auto\
    \ a = std::bitset<8>(z).to_string();\n    return std::string(\"0b\") + a;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp04y25wfv: /tmp/tmp04y25wfv.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long x ;\n    return x ;\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzkawckl.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpuzkawckl.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long x ;\n      |                           ^\n/tmp/tmpuzkawckl.cpp:6:5:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpuzkawckl.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpuzkawckl.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuzkawckl.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpuzkawckl.cpp:29:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   29 |     return x ;\n      |            ^\n\
    /tmp/tmpuzkawckl.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpuzkawckl.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long rounded_avg\
    \ = (sum + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<64>(rounded_avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmph134mnzo: /tmp/tmph134mnzo.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int avg = sum / count;\n    std::string avg_str =\
    \ std::bitset< 32 >( avg ).to_string();\n    return \"0b\" + avg_str;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp64dwe1i5: /tmp/tmp64dwe1i5.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long average\
    \ = (n + m) / 2;\n    return std::bitset<8>(average).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpoxip6pq5: /tmp/tmpoxip6pq5.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return -1;\n    std::string s = \"0b\";\n    std::vector<int>\
    \ v(n,m);\n    std::transform(v.begin(), v.end(), v.begin(), [](int i) { return\
    \ i+1; });\n    int sum = std::accumulate(v.begin(), v.end(), 0);\n    float fsum\
    \ = (float)sum/(m-n+1);\n    int isum = round(fsum);\n    while (isum!=0) {\n\
    \        s.push_back((isum&1)+'0');\n        isum >>= 1;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpwla7my17: /tmp/tmpwla7my17.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r = std::string(\"\");\n    return r;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbl2epyi.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpvbl2epyi.cpp:29:12: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   29 |     return r;\n      |            ^\n/tmp/tmpvbl2epyi.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvbl2epyi.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112409
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ round(sum / (double)(m - n + 1));\n    Union_std_string_long ret = std::bitset<sizeof(int)\
    \ * 8>(avg).to_string();\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6vwj6ul.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmps6vwj6ul.cpp:37:12: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   37 |     return ret;\n      |            ^~~\n/tmp/tmps6vwj6ul.cpp:3:7: note:\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps6vwj6ul.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long ret;\n    std::string s = std::bitset<32>(n\
    \ + m >> 1).to_string();\n    ret.f0 = \"0b\" + s.substr(s.find(\"1\"));\n   \
    \ ret.f1 = -1;\n    return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mqwt4e2.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp_mqwt4e2.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long ret;\n      |                           ^~~\n/tmp/tmp_mqwt4e2.cpp:6:5:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_mqwt4e2.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_mqwt4e2.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mqwt4e2.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmp_mqwt4e2.cpp:32:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   32 |     return ret;\n      |            ^~~\n\
    /tmp/tmp_mqwt4e2.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_mqwt4e2.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ avg = (n + m) / 2;\n        std::string bit_str = std::bitset<50>(avg).to_string();\n\
    \        return \"0b\" + bit_str.substr(bit_str.find(\"1\"));\n    }\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp5zd8v400: /tmp/tmp5zd8v400.cpp:42: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long avg = (n + m) / 2;\n    return\
    \ std::bitset<16>(avg).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpwlygapnd: /tmp/tmpwlygapnd.cpp:34: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) return -1;\n    int avg = ( n + m ) / 2;\n  \
    \  return std::bitset<5>(avg).to_string();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpbb9qpghy: /tmp/tmpbb9qpghy.cpp:34: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long avg_int\
    \ = (m + n) / 2 ;\n    std::string avg_bin = std::bitset<16>(avg_int).to_string()\
    \ ;\n    Union_std_string_long res = avg_bin ;\n    return res ;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprnahmv1a.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmprnahmv1a.cpp:34:12: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   34 |     return res ;\n      |            ^~~\n/tmp/tmprnahmv1a.cpp:3:7:\
    \ note: \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnahmv1a.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return Union_std_string_long(-1);\n\
    \    } else {\n        long avg = (n + m) / 2;\n        std::bitset<32> binary(avg);\n\
    \        std::string s = binary.to_string();\n        return Union_std_string_long(\"\
    0b\" + s);\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp3e3mz689: /tmp/tmp3e3mz689.cpp:39: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpwycnu5gp: /tmp/tmpwycnu5gp.cpp:45: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112411
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\nif (n > m) {\nreturn -1;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppzk496yb.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmppzk496yb.cpp:31:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   31 | int main() {\n     \
    \ |            ^\n/tmp/tmppzk496yb.cpp:45:1: error: expected \u2018}\u2019 at\
    \ end of input\n   45 | }\n      | ^\n/tmp/tmppzk496yb.cpp:27:51: note: to match\
    \ this \u2018{\u2019\n   27 | Union_std_string_long rounded_avg(long n, long m)\
    \ {\n      |                                                   ^\n/tmp/tmppzk496yb.cpp:45:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   45 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int mean = floor((n\
    \ + m) / 2.0);\n    std::string binary;\n    while (mean > 0) {\n        binary\
    \ += std::to_string(mean % 2);\n        mean /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    binary = \"0b\" + binary;\n    return Union_std_string_long(binary);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp_2zqfi0v: /tmp/tmp_2zqfi0v.cpp:47: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    sum = (sum %\
    \ (m - n + 1) >= (m - n + 1) / 2) ? sum / (m - n + 1) + 1 : sum / (m - n + 1);\n\
    \    std::string s = \"0b\";\n    for (int i = 1; i <= 6; i++) {\n        s +=\
    \ ((sum & (1 << (6 - i))) ? \"1\" : \"0\");\n    }    return s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpi6jt17j0: /tmp/tmpi6jt17j0.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    assert(n < m);\n    return {/*YOUR CODE HERE*/};\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpguy3rvde.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpguy3rvde.cpp:29:31: error: could not convert\
    \ \u2018<brace-enclosed initializer list>()\u2019 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018Union_std_string_long\u2019\n   29 |     return {/*YOUR\
    \ CODE HERE*/};\n      |                               ^\n      |            \
    \                   |\n      |                               <brace-enclosed initializer\
    \ list>\n"
  stdout: ''
  timestamp: 1660112410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    long i, j, counter;\n    counter = 0;\n    for (i = n; i <= m; i++) {\n \
    \       counter += i;\n    }\n    j = counter / (m - n + 1);\n    std::stringstream\
    \ stream;\n    stream << std::bitset<16>(j);\n    std::string result(stream.str());\n\
    \    return std::string(\"0b\") + result;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpywj7pzpi: /tmp/tmpywj7pzpi.cpp:44: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    } else {\n        int total = 0;\n        for (int i = n; i <= m; i++) {\n\
    \            total += i;\n        }\n        total = total / (m - n + 1);\n  \
    \      std::string binStr = \"\";\n        while (total > 0) {\n            binStr\
    \ = std::to_string(total % 2) + binStr;\n            total = total / 2;\n    \
    \    }\n        return Union_std_string_long(\"0b\" + binStr);\n    }\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpgw8s2cbh: /tmp/tmpgw8s2cbh.cpp:50: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    int len = 0;\n    while (avg > 0) {\n        avg /= 2;\n    \
    \    len++;\n    }\n    std::string answer;\n    std::string str = \"0b\";\n \
    \   while (len > 0) {\n        answer += str[len % 2];\n        len /= 2;\n  \
    \  }\n    return answer;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpqokpwn3b: /tmp/tmpqokpwn3b.cpp:47: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = round((n\
    \ + m) / 2.0);\n    std::string out = \"0b\";\n    std::bitset<32> bs(avg);\n\
    \    out += bs.to_string();\n    out = out.substr(out.find(\"1\"));\n    return\
    \ out;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp0a0_y8p5: /tmp/tmp0a0_y8p5.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return Union_std_string_long(-1);\n    Union_std_string_long\
    \ d = Union_std_string_long((n + m) / 2);\n    d = Union_std_string_long(std::bitset<8>(d.f1).to_string());\n\
    \    d = Union_std_string_long(\"0b\" + d.f0);\n    return d;\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgymkez83.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpgymkez83.cpp:30:63: error: use of deleted function\
    \ \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \n   30 |     d = Union_std_string_long(std::bitset<8>(d.f1).to_string());\n \
    \     |                                                               ^\n/tmp/tmpgymkez83.cpp:3:7:\
    \ note: \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgymkez83.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n    4 |     std::string f0;\n      |                 ^~\n/tmp/tmpgymkez83.cpp:31:42:\
    \ error: use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   31 |     d = Union_std_string_long(\"0b\"\
    \ + d.f0);\n      |                                          ^\n/tmp/tmpgymkez83.cpp:32:12:\
    \ error: use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   32 |     return d;\n      |            ^\n\
    /tmp/tmpgymkez83.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgymkez83.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_trai"
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    return Union_std_string_long(std::bitset<32>((n + m) / 2).to_string());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp3j4bmh9w: /tmp/tmp3j4bmh9w.cpp:35: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long result;\n    if (n > m) {\n        result.f1\
    \ = -1;\n    }\n    else {\n        double average = (n + m) / 2.0;\n        int\
    \ rounded = round(average);\n        std::string binary = std::bitset<32>(rounded).to_string();\n\
    \        result.f0 = \"0b\" + binary;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7c21vkp.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpw7c21vkp.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long result;\n      |                           ^~~~~~\n\
    /tmp/tmpw7c21vkp.cpp:6:5: note: candidate: \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7c21vkp.cpp:6:5: note:   candidate expects\
    \ 1 argument, 0 provided\n/tmp/tmpw7c21vkp.cpp:5:17: note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7c21vkp.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmpw7c21vkp.cpp:38:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   38 |     return result;\n      |         \
    \   ^~~~~~\n/tmp/tmpw7c21vkp.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw7c21vkp.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int rounded_avg = std::round(double(sum) / count);\n\
    \    std::string bin = std::bitset<std::numeric_limits<int>::digits>(rounded_avg).to_string();\n\
    \    return \"0b\" + bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmplm8t979r: /tmp/tmplm8t979r.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) { return Union_std_string_long(long(-1)); }\n   \
    \ float avg = (n+m)/2.0;\n    int res = round(avg);\n    std::string s = \"0b\"\
    ;\n    while (res) {\n        if (res%2) {\n            s = s + \"1\";\n     \
    \   }\n        else {\n            s = s + \"0\";\n        }\n        res /= 2;\n\
    \    }\n    std::reverse(s.begin(), s.end());\n    return Union_std_string_long(s);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp_e3_gyhn: /tmp/tmp_e3_gyhn.cpp:46: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long s = n +\
    \ m;\n    if (s % 2 == 0) {\n        return \"0b\" + std::bitset<8>(s / 2).to_string();\n\
    \    } else {\n        return \"0b\" + std::bitset<8>((s + 1) / 2).to_string();\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpk5barksp: /tmp/tmpk5barksp.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return {-1};\n    }\n    auto mean =\
    \ (double) (n + m) / 2;\n    auto mean_rounded = round(mean);\n    auto str =\
    \ std::bitset<sizeof(long) * 8>(mean_rounded).to_string();\n    return {std::string(\"\
    0b\") + str};\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpm4gfevxv: /tmp/tmpm4gfevxv.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpjo732z1x: /tmp/tmpjo732z1x.cpp:40: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int count = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        count += i;\n    }\n    count = (count / (m - n\
    \ + 1));\n    std::string binary = std::bitset<32>(count).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpfsielrxn: /tmp/tmpfsielrxn.cpp:39: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long((std::string)\"\
    -1\");\n    }\n    int x = (n + m) / 2;\n    std::string binary = std::bitset<\
    \ 8 >( x ).to_string();\n    return Union_std_string_long((std::string)\"0b\"\
    \ + binary);\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp5ew_zris: /tmp/tmp5ew_zris.cpp:37: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int l = 0;\n\
    \    while ((1 << l) <= (m + n) / 2) {\n        l++;\n    }\n    std::string s\
    \ = \"0b\";\n    for (int i = l - 1; i >= 0; i--) {\n        if (((m + n) / 2)\
    \ & (1 << i)) {\n            s += \"1\";\n        } else {\n            s += \"\
    0\";\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpz1kc2_ir: /tmp/tmpz1kc2_ir.cpp:51: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (Union_std_string_long)(-1);\n\
    \    }\n    int size = floor(log2(m)) + 1;\n    std::string s = \"0b\";\n    for\
    \ (int i = 0; i < size; i++) {\n        s += \"0\";\n    }\n    for (int i = n;\
    \ i <= m; i++) {\n        int j = i;\n        for (int k = 0; k < size; k++) {\n\
    \            if (j % 2 == 1) {\n                s[size - k] = '1';\n         \
    \   }\n            j /= 2;\n        }\n    }\n    s[size] = '\\0';\n    return\
    \ (Union_std_string_long)(s);\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpneyn3iay: /tmp/tmpneyn3iay.cpp:50: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string binary = \"\";\n    long sum = 0;\n    int count\
    \ = 0;\n    if (n < m) {\n        while (n <= m) {\n            sum += n;\n  \
    \          n++;\n            count++;\n        }\n        long average = sum /\
    \ count;\n        while (average > 0) {\n            if (average % 2 == 0) {\n\
    \                binary = \"0\" + binary;\n            } else {\n            \
    \    binary = \"1\" + binary;\n            }\n            average /= 2;\n    \
    \    }\n        return \"0b\" + binary;\n    } else {\n        return -1;\n  \
    \  }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpzha4vhnz: /tmp/tmpzha4vhnz.cpp:57: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return std::to_string(n);\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp73fbhg3v: /tmp/tmp73fbhg3v.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return long{-1};\n    }\n    int average\
    \ = (n + m) / 2;\n    std::string averageBinary = std::bitset< 64 >( average ).to_string();\
    \ //to binary\n    averageBinary = \"0b\" + averageBinary.substr(averageBinary.find(\"\
    1\"));\n    return averageBinary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpl9tyj_wa: /tmp/tmpl9tyj_wa.cpp:42: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    Union_std_string_long rv((long)(-1));\n    std::string rv_f0;\n    if\
    \ ( std::isnan(rv_f0) ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    long rv_f1;\n    if ( std::isnan(rv_f1) ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    std::string rv_f0_tmp;\n    if ( std::isnan(rv_f0_tmp) ) {\n       \
    \ return Union_std_string_long((long)(-1));\n    }    std::string rv_f0_tmp2;\n\
    \    if ( std::isnan(rv_f0_tmp2) ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    std::string rv_f0_tmp3;\n    if ( std::isnan(rv_f0_tmp3) ) {\n     \
    \   return Union_std_string_long((long)(-1));\n    }    return Union_std_string_long(rv_f0);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvr268o1.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpnvr268o1.cpp:32:26: error: no matching function\
    \ for call to \u2018isnan(std::string&)\u2019\n   32 |     if ( std::isnan(rv_f0)\
    \ ) {\n      |                          ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnvr268o1.cpp:2:\n/usr/include/c++/9/cmath:611:3:\
    \ note: candidate: \u2018constexpr bool std::isnan(float)\u2019\n  611 |   isnan(float\
    \ __x)\n      |   ^~~~~\n/usr/include/c++/9/cmath:611:15: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018float\u2019\n  611 |   isnan(float __x)\n      |         ~~~~~~^~~\n\
    /usr/include/c++/9/cmath:619:3: note: candidate: \u2018constexpr bool std::isnan(double)\u2019\
    \n  619 |   isnan(double __x)\n      |   ^~~~~\n/usr/include/c++/9/cmath:619:16:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018double\u2019\n  619 |\
    \   isnan(double __x)\n      |         ~~~~~~~^~~\n/usr/include/c++/9/cmath:624:3:\
    \ note: candidate: \u2018constexpr bool std::isnan(long double)\u2019\n  624 |\
    \   isnan(long double __x)\n      |   ^~~~~\n/usr/include/c++/9/cmath:624:21:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018long double\u2019\n \
    \ 624 |   isnan(long double __x)\n      |         ~~~~~~~~~~~~^~~\n/usr/include/c++/9/cmath:632:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr typename __gnu_cxx::__enable_if<std::__is_integer<_Tp>::__value,\
    \ bool>::__type std::isnan(_Tp)\u2019\n  632 |     isnan(_Tp __x)\n      |   \
    \  ^~~~~\n/usr/include/c++/9/cmath:632:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/cmath: In substitution of \u2018template<class _Tp>\
    \ constexpr typename __gnu_cxx::__enable_if<std::__is_integer<_Tp>::__value, bool>::__type\
    \ std::isnan(_Tp) [with _Tp = std::__cxx11::basic_string<char>]\u2019:\n/tmp/tmpnvr268o1.cpp:32:26:\
    \   required from here\n/usr/include/"
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (long)(-1);\n    }\n    int sum\
    \ = 0;\n    int t = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \        t++;\n    }\n    int res = sum / t;\n    std::string str = \"0b\";\n\
    \    while (res != 0) {\n        int t = res % 2;\n        str = (char)(t + '0')\
    \ + str;\n        res /= 2;\n    }\n    return str;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpywknkcv_: /tmp/tmpywknkcv_.cpp:48: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int i;\n    std::string b = \"\";\n    if (n <= m) {\n   \
    \     int sum = 0;\n        for (i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        int avg = (sum + (m - n + 1) / 2) / (m - n + 1);\n       \
    \ while (avg > 0) {\n            if (avg % 2 == 0) {\n                b = \"0\"\
    \ + b;\n            } else {\n                b = \"1\" + b;\n            }\n\
    \            avg /= 2;\n        }\n        b = \"0b\" + b;\n        return Union_std_string_long(b);\n\
    \    } else {\n        return Union_std_string_long(-1);\n    }\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp4inflcs4: /tmp/tmp4inflcs4.cpp:54: int main(): Assertion `candidate((964),
    (977)) == "0b1111001010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(\"-1\"\
    );\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    int ans = sum / (m - n + 1);\n    stringstream ss;\n    ss <<\
    \ bitset<16>(ans);\n    return Union_std_string_long(ss.str());\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoip1it6_.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpoip1it6_.cpp:36:5: error: \u2018stringstream\u2019\
    \ was not declared in this scope; did you mean \u2018std::stringstream\u2019?\n\
    \   36 |     stringstream ss;\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\n\
    In file included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpoip1it6_.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpoip1it6_.cpp:37:5:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   37 |     ss << bitset<16>(ans);\n\
    \      |     ^~\n/tmp/tmpoip1it6_.cpp:37:11: error: \u2018bitset\u2019 was not\
    \ declared in this scope; did you mean \u2018std::bitset\u2019?\n   37 |     ss\
    \ << bitset<16>(ans);\n      |           ^~~~~~\n      |           std::bitset\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n\
    \                 from /tmp/tmpoip1it6_.cpp:2:\n/usr/include/c++/9/bitset:751:11:\
    \ note: \u2018std::bitset\u2019 declared here\n  751 |     class bitset\n    \
    \  |           ^~~~~~\n"
  stdout: ''
  timestamp: 1660112412
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return Union_std_string_long(\"-1\"\
    );\n    }    int a = std::round((m+n)/2);\n    std::string binary;\n    while\
    \ (a != 0){\n        binary += std::to_string(a%2);\n        a = a/2;\n    } \
    \   std::reverse(binary.begin(), binary.end());\n    return Union_std_string_long(\"\
    0b\" + binary);\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpp8ux9hxw: /tmp/tmpp8ux9hxw.cpp:44: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long average\
    \ = (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n \
    \   while (average != 0) {\n        binary = (average % 2 == 0 ? \"0\" : \"1\"\
    ) + binary;\n        average /= 2;\n    }\n    return \"0b\" + binary;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpbrp8e_od: /tmp/tmpbrp8e_od.cpp:47: int main(): Assertion `candidate((964),
    (977)) == "0b1111001010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<64>(avg).to_string();\n    return\
    \ \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9kfijj2c: /tmp/tmp9kfijj2c.cpp:41: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (long)-1;\n    }\n    int sum\
    \ = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int\
    \ avg = sum / (m - n + 1);\n    std::string result = \"0b\";\n    while (avg >\
    \ 0) {\n        if (avg % 2 == 0) {\n            result = \"0\" + result;\n  \
    \      } else {\n            result = \"1\" + result;\n        }\n        avg\
    \ /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpsr1lzdny: /tmp/tmpsr1lzdny.cpp:49: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    int count = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n \
    \       count++;\n    }    int ans = std::round(sum / count);\n    std::string\
    \ binary = std::bitset<8>(ans).to_string();\n    return \"0b\" + binary;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpzwwmh0dw: /tmp/tmpzwwmh0dw.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int k = (n + m) / 2;\n    std::string s = \"0b\";\n    while\
    \ (k != 0) {\n        if (k % 2)\n            s += \"1\";\n        else\n    \
    \        s += \"0\";\n        k /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return Union_std_string_long(s);\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpj4lk9yxx: /tmp/tmpj4lk9yxx.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long average = (n + m) / 2;\n    if (n > m) {\n        return\
    \ -1;\n    }\n    if (average == 1) {\n        return \"0b1\";\n    }\n    else\
    \ if (average == 2) {\n        return \"0b10\";\n    }\n    else if (average ==\
    \ 3) {\n        return \"0b11\";\n    }\n    else if (average == 4) {\n      \
    \  return \"0b100\";\n    }\n    else if (average == 5) {\n        return \"0b101\"\
    ;\n    }\n    else if (average == 6) {\n        return \"0b110\";\n    }\n   \
    \ else if (average == 7) {\n        return \"0b111\";\n    }\n    else if (average\
    \ == 8) {\n        return \"0b1000\";\n    }\n    else if (average == 9) {\n \
    \       return \"0b1001\";\n    }\n    else if (average == 10) {\n        return\
    \ \"0b1010\";\n    }\n    else if (average == 11) {\n        return \"0b1011\"\
    ;\n    }\n    else if (average == 12) {\n        return \"0b1100\";\n    }\n \
    \   else if (average == 13) {\n        return \"0b1101\";\n    }\n    else if\
    \ (average == 14) {\n        return \"0b1110\";\n    }\n    else if (average ==\
    \ 15) {\n        return \"0b1111\";\n    }\n    else if (average == 16) {\n  \
    \      return \"0b10000\";\n    }\n    else if (average == 17) {\n        return\
    \ \"0b10001\";\n    }\n    else if (average == 18) {\n        return \"0b10010\"\
    ;\n    }\n    else if (average == 19) {\n        return \"0b10011\";\n    }\n\
    \    else if (average == 20) {\n        return \"0b10100\";\n    }\n    else if\
    \ (average == 21) {\n        return \"0b10101\";\n    }\n    else if (average\
    \ == 22) {\n        return \"0b10110\";\n    }\n    else if (average == 23) {\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppzy7cm10.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmppzy7cm10.cpp:33:16: error: invalid conversion\
    \ from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n   33 |\
    \         return \"0b1\";\n      |                ^~~~~\n      |             \
    \   |\n      |                const char*\n/tmp/tmppzy7cm10.cpp:6:32: note:  \
    \ initializing argument 1 of \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |                           ~~~~~^~~\n/tmp/tmppzy7cm10.cpp:36:16: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n\
    \   36 |         return \"0b10\";\n      |                ^~~~~~\n      |    \
    \            |\n      |                const char*\n/tmp/tmppzy7cm10.cpp:6:32:\
    \ note:   initializing argument 1 of \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |                           ~~~~~^~~\n/tmp/tmppzy7cm10.cpp:39:16: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n\
    \   39 |         return \"0b11\";\n      |                ^~~~~~\n      |    \
    \            |\n      |                const char*\n/tmp/tmppzy7cm10.cpp:6:32:\
    \ note:   initializing argument 1 of \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |                           ~~~~~^~~\n/tmp/tmppzy7cm10.cpp:42:16: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n\
    \   42 |         return \"0b100\";\n      |                ^~~~~~~\n      |  \
    \              |\n      |                const char*\n/tmp/tmppzy7cm10.cpp:6:32:\
    \ note:   initializing argument 1 of \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |                           ~~~~~^~~\n/tmp/tmppzy7cm10.cpp:45:16: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018long int\u2019 [-fpermissive]\n\
    \   45 |         return \"0b1"
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    int rounded_avg\
    \ = (int)std::round((float)sum / (m - n + 1));\n    std::string binary = std::bitset<32>(rounded_avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmprj9ds0wa: /tmp/tmprj9ds0wa.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int average = (sum + count / 2) / count;\n    Union_std_string_long\
    \ result;\n    std::stringstream ss;\n    ss << std::bitset<3>(average);\n   \
    \ result.f0 = ss.str();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp81gcww67.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp81gcww67.cpp:38:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   38\
    \ |     Union_std_string_long result;\n      |                           ^~~~~~\n\
    /tmp/tmp81gcww67.cpp:6:5: note: candidate: \u2018Union_std_string_long::Union_std_string_long(long\
    \ int)\u2019\n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n     \
    \ |     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81gcww67.cpp:6:5: note:   candidate expects\
    \ 1 argument, 0 provided\n/tmp/tmp81gcww67.cpp:5:17: note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81gcww67.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmp81gcww67.cpp:42:12: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   42 |     return result;\n      |         \
    \   ^~~~~~\n/tmp/tmp81gcww67.cpp:3:7: note: \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019 is implicitly deleted because the default definition\
    \ would be ill-formed:\n    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp81gcww67.cpp:4:17: error: union member \u2018Union_std_string_long::f0\u2019\
    \ with non-trivial \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n    4 |    \
    \ std::string f0;\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int a = (n + m) / 2;\n    if (n < m) {\n        std::string\
    \ s = \"0b\";\n        std::bitset<4> bits(a);\n        s += bits.to_string();\n\
    \        return Union_std_string_long(s);\n    }\n    else {\n        return Union_std_string_long(-1);\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpahrdqggm: /tmp/tmpahrdqggm.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long $147 = -1;\n    if ( (true) ) {\n  \
    \      $147 = -1;\n    } else {\n        long $148 = n;\n        long $149 = m;\n\
    \        long $150 = $148 + $149;\n        long $151 = $150 / 2;\n        long\
    \ $152 = $151 / 1;\n        long $153 = $152 * 1;\n        std::string $154 =\
    \ std::to_string($153);\n        std::string $155 = \"0b\";\n        std::string\
    \ $156 = $155 + $154;\n        $147 = $156;\n    }\n    return $147;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1uhuztx.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpj1uhuztx.cpp:30:17: error: use of deleted function\
    \ \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \n   30 |         $147 = -1;\n      |                 ^\n/tmp/tmpj1uhuztx.cpp:3:7:\
    \ note: \u2018Union_std_string_long& Union_std_string_long::operator=(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj1uhuztx.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n    4 |     std::string f0;\n      |                 ^~\n/tmp/tmpj1uhuztx.cpp:41:16:\
    \ error: use of deleted function \u2018Union_std_string_long& Union_std_string_long::operator=(const\
    \ Union_std_string_long&)\u2019\n   41 |         $147 = $156;\n      |       \
    \         ^~~~\n/tmp/tmpj1uhuztx.cpp:43:12: error: use of deleted function \u2018\
    Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   43 |     return $147;\n      |            ^~~~\n/tmp/tmpj1uhuztx.cpp:3:7:\
    \ note: \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj1uhuztx.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long i = (n + m) / 2 ;\n    std::stringstream ss;\n    ss\
    \ << std::bitset<32>(i);\n    std::string str = ss.str();\n    return Union_std_string_long(\"\
    0b\" + str);\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpg4z9sb44: /tmp/tmpg4z9sb44.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    std::vector<long>\
    \ range_nums;\n    for (int i = n; i <= m; i++) {\n        range_nums.push_back(i);\n\
    \    }    float sum = 0;\n    for (int i = 0; i < range_nums.size(); i++) {\n\
    \        sum += range_nums[i];\n    }    int rounded_avg = sum / range_nums.size();\n\
    \    return std::bitset<4>(rounded_avg).to_string();\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpkwenefpl: /tmp/tmpkwenefpl.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::cerr << \"!\" << std::endl;\n    std::cerr << n << std::endl;\n\
    \    std::cerr << m << std::endl;\n    if (n > m) {\n        return (long)-1;\n\
    \    }\n    return (std::bitset<32>((n+m)/2)).to_string();\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: '!

    1

    5

    tmpnnp97yp8: /tmp/tmpnnp97yp8.cpp:38: int main(): Assertion `candidate((1), (5))
    == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    return std::bitset<32>(avg).to_string();\n}\nint main() {\n \
    \   auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpw8hvdt2t: /tmp/tmpw8hvdt2t.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    // If n is greater than m, return -1.\n    if (n > m) {\n\
    \        return -1;\n    }\n    // Compute the average of the integers from n\
    \ through m (including n and m).\n    double average = (double)(n + m) / 2;\n\
    \    long rounded_average = (long)round(average);\n    // Convert the answer to\
    \ binary.\n    std::string binary_str = std::bitset<8>(rounded_average).to_string();\n\
    \    return \"0b\" + binary_str;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp2v27kxlz: /tmp/tmp2v27kxlz.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }    long sum = 0 ;\n\
    \    for (long i = n ; i <= m ; i++) {\n        sum += i ;\n    }    double average\
    \ = static_cast<double>(sum) / static_cast<double>(m - n + 1) ;\n    return std::to_string(static_cast<long>(std::round(average)))\
    \ ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmphe6amevy: /tmp/tmphe6amevy.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return -1;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp0yyr82fb: /tmp/tmp0yyr82fb.cpp:32: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    std::string binary\
    \ = \"\";\n    for (int i = n; i <= m; i++) {\n        std::bitset<10> bit(i);\n\
    \        binary += bit.to_string();\n    }\n    int decimal = std::stoi(binary,\
    \ 0, 2);\n    int dec_avg = decimal / (m - n + 1);\n    std::bitset<10> bit(dec_avg);\n\
    \    std::string bits = bit.to_string();\n    return std::string(\"0b\") + bits;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  stoi\n"
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long n_rounded = n + ((m - n) / 2);\n    if (n > m) {\n  \
    \      return -1;\n    }\n    return n_rounded;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpt9w7bu00: /tmp/tmpt9w7bu00.cpp:36: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    int avg = sum\
    \ / (m - n + 1);\n    std::string res = \"0b\";\n    while (avg != 0) {\n    \
    \    res = (avg % 2 == 0 ? \"0\" : \"1\") + res;\n        avg /= 2;\n    }   \
    \ return res;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpw809udwi: /tmp/tmpw809udwi.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ avg = (n + m) / 2;\n        std::string res = \"0b\";\n        while (avg !=\
    \ 0) {\n            long rem = avg % 2;\n            if (rem == 0) {\n       \
    \         res += \"0\";\n            } else {\n                res += \"1\";\n\
    \            }\n            avg /= 2;\n        }\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9x4fs7w3: /tmp/tmp9x4fs7w3.cpp:48: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1 ;\n    }\n    long average\
    \ = ( n + m ) / 2 ;\n    std::string binary = std::bitset<32>(average).to_string()\
    \ ;\n    binary = binary.substr(binary.find(\"1\")) ;\n    return binary ;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp7gumzhic: /tmp/tmp7gumzhic.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1; \n    long sum = 0;\n    long count\
    \ = 0;\n    while (n <= m) {\n        sum += n;\n        count++;\n        n++;\n\
    \    }\n    std::stringstream ss;\n    ss << std::bitset<16>(sum / count);\n \
    \   return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmphobomi_6: /tmp/tmphobomi_6.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ total = 0;\n        for (long i = n; i <= m; i++) {\n            total += i;\n\
    \        }\n        long average = round(total / (m - n + 1));\n        std::string\
    \ binary_string = \"0b\";\n        while (average != 0) {\n            if (average\
    \ % 2 == 0) {\n                binary_string += \"0\";\n            } else {\n\
    \                binary_string += \"1\";\n            }\n            average /=\
    \ 2;\n        }\n        std::reverse(binary_string.begin() + 2, binary_string.end());\n\
    \        return binary_string;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp6fwc9yni: /tmp/tmp6fwc9yni.cpp:55: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    std::stringstream\
    \ binary;\n    int average = (n + m) / 2;\n    // If the sum of n and m is odd,\
    \ we have to round up.\n    if ((n + m) % 2 == 1) {\n        average += 1;\n \
    \   }\n    binary << std::bitset<8>(average);\n    return binary.str();\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp00c2camc: /tmp/tmp00c2camc.cpp:42: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    long z = (n + m) / 2;\n    std::string s = \"0b\";\n    long r;\n    while\
    \ (z != 0) {\n        r = z % 2;\n        s = std::to_string(r) + s;\n       \
    \ z = z / 2;\n    }\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp9_3c07wc: /tmp/tmp9_3c07wc.cpp:43: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return Union_std_string_long(\"0b\"+std::bitset<64>(n).to_string());\n\
    \    std::bitset<64> sum(0);\n    long count = 0;\n    for (long i = n; i <= m;\
    \ i++) {\n        sum |= i;\n        count++;\n    }\n    long mean = sum.to_ulong()\
    \ / count;\n    std::bitset<64> mean_bits(mean);\n    return Union_std_string_long(\"\
    0b\"+mean_bits.to_string());\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpra0ddjap: /tmp/tmpra0ddjap.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int x = (n +\
    \ m) / 2;\n    std::string bin = std::bitset<32>(x).to_string();\n    bin = bin.substr(bin.find(\"\
    1\"));\n    return \"0b\" + bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpaljn3jh5: /tmp/tmpaljn3jh5.cpp:42: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return (n>m)?((long)-1):std::bitset<32>(round((n+m)/2)).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqvj8u8ew.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmpqvj8u8ew.cpp:28:17: error: operands to ?: have\
    \ different types \u2018long int\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    \n   28 |     return (n>m)?((long)-1):std::bitset<32>(round((n+m)/2)).to_string();\n\
    \      |            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660112414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\nUnion_std_string_long o;\nif (n>m)\n{\no.f1 = -1;\nreturn o;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2wq0x4bz.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp2wq0x4bz.cpp:28:23: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ | Union_std_string_long o;\n      |                       ^\n/tmp/tmp2wq0x4bz.cpp:6:5:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2wq0x4bz.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp2wq0x4bz.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2wq0x4bz.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n/tmp/tmp2wq0x4bz.cpp:32:8: error:\
    \ use of deleted function \u2018Union_std_string_long::Union_std_string_long(const\
    \ Union_std_string_long&)\u2019\n   32 | return o;\n      |        ^\n/tmp/tmp2wq0x4bz.cpp:3:7:\
    \ note: \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2wq0x4bz.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n/tmp/tmp2wq0x4bz.cpp:34:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   34 | int main() {\n      |     \
    \       ^\n/tmp/tmp2wq0x4bz.cpp:48:1: error: expected \u2018}\u2019 at end of\
    \ input\n   48 | }\n      | ^\n/tmp/tmp2wq0x4bz.cpp:27:51: note: to match this\
    \ \u2018{\u2019\n   27 | Union_std_string_long rounded_avg(long n, long m) {\n\
    \      |                                      "
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (std::string)(\"-1\");\n    }\
    \    Union_std_string_long ans(((int)((((double)(n + m)) / 2))));\n    return\
    \ ((std::string)(\"0b\")) + std::bitset<32>(ans.f1).to_string().substr(32 - ((int)((log2((ans.f1))))\
    \ + 1), ((int)((log2((ans.f1)))) + 1));\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpe0d0d55b: /tmp/tmpe0d0d55b.cpp:39: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return (std::string)\"-1\";\n    } else\
    \ {\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n        \
    \    sum = sum + i;\n        }\n        long avg = sum / (m - n + 1);\n      \
    \  return avg;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmp0hb26nty: /tmp/tmp0hb26nty.cpp:41: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    double average\
    \ = ((double) sum) / (m - n + 1);\n    long rounded = (long) (average + 0.5);\n\
    \    std::stringstream ss;\n    ss << std::bitset<32>(rounded);\n    std::string\
    \ bin_str = ss.str();\n    while (bin_str[0] == '0') {\n        bin_str = bin_str.substr(1);\n\
    \    }\n    return \"0b\" + bin_str;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpvtjfhvtk: /tmp/tmpvtjfhvtk.cpp:49: int main(): Assertion `candidate((964),
    (977)) == "0b1111001010"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i ++) {\n        sum += i;\n\
    \        count ++;\n    }\n    float res = sum / count;\n    int ans = round(res);\n\
    \    std::string ans_bin = std::bitset<32>(ans).to_string();\n    //cout << ans_bin\
    \ << endl;\n    int idx = 0;\n    while (ans_bin[idx] == '0') {\n        idx ++;\n\
    \    }\n    return \"0b\" + ans_bin.substr(idx);\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmppo3tn67u: /tmp/tmppo3tn67u.cpp:53: int main(): Assertion `candidate((560),
    (851)) == "0b1011000010"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    return (n +\
    \ m) / 2 ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpntbhyui9: /tmp/tmpntbhyui9.cpp:35: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long i(\"No Data\");\n    if (n > m) {\n\
    \        return i;\n    }\n    int sum = 0;\n    int num_of_ints = 0;\n    for\
    \ (long i = n; i <= m; i++) {\n        sum += i;\n        num_of_ints++;\n   \
    \ }\n    int avg = (sum / num_of_ints);\n    return Union_std_string_long(std::bitset<\
    \ sizeof(int) * 8 >(avg).to_string());\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp195jeuu_.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp195jeuu_.cpp:30:16: error: use of deleted function\
    \ \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \n   30 |         return i;\n      |                ^\n/tmp/tmp195jeuu_.cpp:3:7:\
    \ note: \u2018Union_std_string_long::Union_std_string_long(const Union_std_string_long&)\u2019\
    \ is implicitly deleted because the default definition would be ill-formed:\n\
    \    3 | union Union_std_string_long{\n      |       ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp195jeuu_.cpp:4:17:\
    \ error: union member \u2018Union_std_string_long::f0\u2019 with non-trivial \u2018\
    std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n    4 |     std::string f0;\n      |        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660112414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    double sum = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    int res = round(sum / (m\
    \ - n + 1));\n    string res_string = \"0b\";\n    while (res > 0) {\n       \
    \ res_string += to_string(res % 2);\n        res /= 2;\n    }\n    reverse(res_string.begin(),\
    \ res_string.end());\n    return res_string;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qtno282.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp3qtno282.cpp:34:5: error: \u2018string\u2019\
    \ was not declared in this scope\n   34 |     string res_string = \"0b\";\n  \
    \    |     ^~~~~~\n/tmp/tmp3qtno282.cpp:34:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3qtno282.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3qtno282.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp3qtno282.cpp:36:9: error: \u2018res_string\u2019 was not declared in this\
    \ scope\n   36 |         res_string += to_string(res % 2);\n      |         ^~~~~~~~~~\n\
    /tmp/tmp3qtno282.cpp:36:23: error: \u2018to_string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   36 |         res_string\
    \ += to_string(res % 2);\n      |                       ^~~~~~~~~\n      |   \
    \                    std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/i"
  stdout: ''
  timestamp: 1660112414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r;\n    if (n>m) return -1;\n    long\
    \ sum=0;\n    for (long i=n; i<=m; i++) {\n        sum += i;\n    }\n    std::stringstream\
    \ ss;\n    ss << std::bitset<sizeof(int)*8>(std::round(sum/(m-n+1)));\n    return\
    \ ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8rwes35g.cpp: In function \u2018Union_std_string_long rounded_avg(long\
    \ int, long int)\u2019:\n/tmp/tmp8rwes35g.cpp:28:27: error: no matching function\
    \ for call to \u2018Union_std_string_long::Union_std_string_long()\u2019\n   28\
    \ |     Union_std_string_long r;\n      |                           ^\n/tmp/tmp8rwes35g.cpp:6:5:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(long int)\u2019\
    \n    6 |     Union_std_string_long(long _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8rwes35g.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8rwes35g.cpp:5:17:\
    \ note: candidate: \u2018Union_std_string_long::Union_std_string_long(std::string)\u2019\
    \n    5 |     long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8rwes35g.cpp:5:17: note:\
    \   candidate expects 1 argument, 0 provided\n"
  stdout: ''
  timestamp: 1660112414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    } \
    \   int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\
    \    std::string result = std::bitset<32>(sum / (m - n + 1)).to_string();\n  \
    \  return result.substr(result.find(\"1\"));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: Exception
  stderr: 'tmpedg52c3n: /tmp/tmpedg52c3n.cpp:38: int main(): Assertion `candidate((1),
    (5)) == "0b11"'' failed.

    '
  stdout: ''
  timestamp: 1660112414
