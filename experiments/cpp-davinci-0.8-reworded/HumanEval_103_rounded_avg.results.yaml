language: cpp
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n  int sum = 0;\n  if (n > m) return -1;\n  for (int i = n; i <=\
    \ m; i++) {\n    sum += i;\n  }\n  return std::bitset<4>(round(sum / (m - n +\
    \ 1))).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfmv0xmoi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string a;\n    std::string b;\n    while(n<=m){\n   \
    \     a+=std::to_string(n);\n        n++;\n    }\n    if(a.length()==1){\n   \
    \     return a;\n    }\n    else{\n        int c = stoi(a);\n        float d =\
    \ c/(a.length());\n        d+=0.5;\n        int e = int(d);\n        while(e!=0){\n\
    \            b=std::to_string(e%2)+b;\n            e=e/2;\n        }\n       \
    \ return \"0b\"+b;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3proko_h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n <= m) {\n        int result = 0;\n        for (int i\
    \ = n; i <= m; i++) {\n            result += i;\n        }\n        int rounded\
    \ = round(result * 1.0 / (m - n + 1));\n        return std::to_string(rounded);\n\
    \    } else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9cdzjsma.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return Union_std_string_long(std::string(std::to_string(n)));\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvcnke8nh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    std::string ret = \"0b\";\n    while (avg > 0) {\n        ret\
    \ += (avg % 2 == 0) ? \"0\" : \"1\";\n        avg /= 2;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp24mck28f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (m\
    \ + n) / 2;\n    std::string binary = std::bitset<64>(avg).to_string();\n    while\
    \ (binary[0] == '0') {\n        binary.erase(0, 1);\n    }\n    binary = \"0b\"\
    \ + binary;\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpviz7wvot.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a;\n    if (n > m) {\n        return -1;\n    }    a\
    \ = (n + m) / 2;\n    std::string a_bin;\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<8>(a);\n    a_bin = ss.str();\n    return std::string(\"0b\") +\
    \ a_bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq8hf6l48.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(\"-1\"\
    );\n    }\n    std::bitset<sizeof(int) * 8> bit(std::round((n + m) / 2.0));\n\
    \    return Union_std_string_long(\"0b\" + bit.to_string());\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv18kwr91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    \n    assert(n > 0);\n    assert(m > 0);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return (std::bitset<32>)((n + m) / 2).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt7c0mfzd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    float average\
    \ = (n + m) / 2.0;\n    std::bitset<8> bits(average);\n    std::string result\
    \ = \"0b\" + bits.to_string();\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsyi3al7y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    \n}\nint main() {\n    auto candidate = rounded_avg;\n   \
    \ assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ubxerjp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    double avg = (n + m) / 2.0;\n    std::stringstream stream;\n    stream\
    \ << std::bitset<4>(std::round(avg));\n    std::string result(stream.str());\n\
    \    return Union_std_string_long(\"0b\" + result);\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp49l3ec9k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long result;\n    if (n <= m) {\n       \
    \ long avg = (n + m) / 2;\n        std::bitset<32> bset(avg);\n        std::string\
    \ str = bset.to_string();\n        str = str.substr(str.find(\"1\"));\n      \
    \  str = \"0b\" + str;\n        result.f0 = str;\n    }\n    else {\n        result.f1\
    \ = -1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_vx1tkgy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum = sum + i;\n    }\n    double\
    \ d = (double)sum/(m-n+1);\n    int x = round(d);\n    std::string s = \"0b\"\
    ;\n    while (x>0) {\n        s = s + std::to_string(x%2);\n        x = x/2;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_0agft71.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round(sum/(m-n+1));\n\
    \    return std::bitset<64>(avg).to_string();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps4x83b7d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    float avg = (n\
    \ + m) / 2.0;\n    int res = (int) std::round(avg);\n    return std::bitset<32>(res).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdxgs1i83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    return std::bitset<32>(std::round((n\
    \ + m) / 2.0)).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcfwhywg0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    long total = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        total += i;\n    }\n    long avg\
    \ = total/(m-n+1);\n    std::string binary = \"0b\";\n    if (avg == 0) {\n  \
    \      return \"0b0\";\n    }\n    while (avg != 0) {\n        if (avg%2 == 0)\
    \ {\n            binary = binary + \"0\";\n        } else {\n            binary\
    \ = binary + \"1\";\n        }\n        avg /= 2;\n    }\n    std::reverse(binary.begin()+2,\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnnmh_ptb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long sum = 0\
    \ ;\n    for (long i = n ; i <= m ; i ++) {\n        sum += i ;\n    }\n    long\
    \ rounded_avg = sum / (m - n + 1) ;\n    return \"0b\" + std::bitset<4>(rounded_avg).to_string()\
    \ ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxhavsdmh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return \"0b\" + std::bitset<std::numeric_limits<int>::digits>(int(-1)).to_string();\n\
    \    } else {\n        int sum = 0;\n        int num = 0;\n        while (n <=\
    \ m) {\n            sum += n;\n            n++;\n            num++;\n        }\n\
    \        return \"0b\" + std::bitset<std::numeric_limits<int>::digits>(int(std::round(sum\
    \ / num))).to_string();\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpilicu11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    std::string\
    \ bin ;\n    long avrg = ((n + m) / 2) ;\n    while (avrg) {\n        bin += std::to_string(avrg\
    \ % 2) ;\n        avrg /= 2 ;\n    }\n    std::reverse(bin.begin(), bin.end())\
    \ ;\n    return std::string(\"0b\" + bin) ;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0vb4onct.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    int ans = 0;\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n    \
    \    sum += i;\n    }\n    ans = sum / (m - n + 1);\n    std::string s = \"0b\"\
    ;\n    while (ans) {\n        s += ((ans & 1) + '0');\n        ans >>= 1;\n  \
    \  }\n    std::reverse(s.begin() + 2, s.end());\n    return s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz8g2q06p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    else {\n    \
    \    double avg = std::round((n + m) / 2.0);\n        return std::bitset<32>(static_cast<unsigned\
    \ long>(avg)).to_string();\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz17uu3_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = round(sum / (m\
    \ - n + 1));\n    std::string binary;\n    while (avg > 0) {\n        binary =\
    \ ((avg % 2 == 0) ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n    return\
    \ std::string(\"0b\") + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqs_6xf79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = n;\n\
    \    for (long i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    long rounded\
    \ = sum / (m - n + 1);\n    std::string binary = std::bitset<sizeof(rounded) *\
    \ 8>(rounded).to_string();\n    std::string result = \"0b\" + binary;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5taaczvf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string error = \"-1\";\n    if (n > m) {\n        return\
    \ error;\n    } else {\n        double a = 0;\n        long b = 0;\n        while\
    \ (n <= m) {\n            a += n;\n            n++;\n        }\n        double\
    \ average = a / (m - n + 1);\n        double average_rounded = round(average);\n\
    \        long average_rounded_ = (long) average_rounded;\n        std::stringstream\
    \ stream;\n        stream << std::bitset<64>(average_rounded_);\n        std::string\
    \ result(stream.str());\n        std::string result_final = \"0b\" + result;\n\
    \        //std::string result_final = result;\n        // result_final = result_final\
    \ + \"0b\";\n        return result_final;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl8iebttd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    int sum = 0;\n    int count = 0;\n    while (n <= m) {\n        sum += n;\n\
    \        n += 1;\n        count += 1;\n    }\n    int avg = sum / count;\n   \
    \ std::string bin_string = \"\";\n    int r = 0;\n    while (avg != 0) {\n   \
    \     r = avg % 2;\n        bin_string = std::to_string(r) + bin_string;\n   \
    \     avg = avg / 2;\n    }\n    return std::string(\"0b\" + bin_string);\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw6ttrosl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int sum = 0;\n    if (n > m) {\n        return -1;\n    }\n\
    \    else if (n == m) {\n        return n;\n    }\n    else {\n        for (int\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        return std::bitset<8>(sum\
    \ / (m - n + 1)).to_string();\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo19w1oks.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    int total = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        total += i;\n\
    \        count += 1;\n    }\n    int res = ceil(total/count);\n    std::string\
    \ res_str = std::bitset< 4 >( res ).to_string();\n    return std::string(\"0b\"\
    ) + res_str;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qf72pql.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long u {};\n    if ( n > m )\n        return\
    \ (long)-1;\n    int i ;\n    long sum = 0;\n    for ( i = n ; i <= m ; i++ )\n\
    \        sum += i;\n    long l ;\n    l = round(((double)sum / (m - n + 1)));\n\
    \    std::string retStr = \"0b\";\n    std::bitset<16> bin { l };\n    retStr\
    \ += bin.to_string();\n    u.f0 = retStr;\n    return u;\n}\nint main() {\n  \
    \  auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvr8mtsdp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }    long avg = 0 ;\n\
    \    for (long i = n ; i <= m ; i++) {\n        avg += i ;\n    }    avg = avg\
    \ / (m - n + 1) ;\n    std::string res = \"0b\" ;\n    while (avg != 0) {\n  \
    \      if (avg % 2 == 0) {\n            res += \"0\" ;\n        } else {\n   \
    \         res += \"1\" ;\n        }        avg = avg / 2 ;\n    }    std::reverse(res.begin(),\
    \ res.end()) ;\n    return res ;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmxxz9y9s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    else return std::bitset<32>(round((n\
    \ + m) / 2)).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1w60isvw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n//     return Union_std_string_long(std::string(\"replace_this_with_your_solution\"\
    ));\n    Union_std_string_long Union_std_string_long_result;\n    if (n > m) {\n\
    \        Union_std_string_long_result = Union_std_string_long(long(-1));\n   \
    \ } else {\n        Union_std_string_long_result = Union_std_string_long(std::bitset<32>(\
    \ (n + m) / 2).to_string());\n    }\n    return Union_std_string_long_result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpozzb4f8k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long ret = 0;\n    if ( n > m ) {\n        return (Union_std_string_long((std::string)\"\
    -1\"));\n    }\n    ret = (n + m) / 2;\n    std::string binary = std::bitset<16>(ret).to_string();\n\
    \    return (Union_std_string_long((std::string)\"0b\" + binary));\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpif4fada3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (n\
    \ + m) / 2;\n    int num = 0;\n    long temp = avg;\n    while (temp != 0) {\n\
    \        temp = temp / 2;\n        num++;\n    }\n    std::string ans = \"0b\"\
    ;\n    for (int i = 0; i < num; i++) {\n        ans += '0';\n    }\n    ans +=\
    \ std::to_string(avg);\n    ans = ans.substr(2, num);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq7f60nay.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) { return std::string(\"-1\"); }\n    Union_std_string_long\
    \ output;\n    if ((n+m)%2 == 0) {\n        output = (n+m)/2;\n    } else {\n\
    \        output = (n+m)/2+1;\n    }\n    return std::string(\"0b\") + std::bitset<sizeof(long)\
    \ * CHAR_BIT>(output.f1).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpipmr7_ho.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }    long avg = floor(sum\
    \ / (m - n + 1));\n    std::stringstream ss;\n    ss << std::bitset<8>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgedv6csj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\nUnion_std_string_long _r;\nif( n > m ){\n    _r = -1;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz6ieea50.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        double\
    \ average = (n + m) / 2.0;\n        average = round(average);\n        std::string\
    \ res = \"0b\";\n        while (average > 0) {\n            res += std::to_string(average\
    \ % 2);\n            average /= 2;\n        }\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4_8rkjst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return {0};\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2w7t9t2r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    std::stringstream\
    \ ss;\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    int avg = (int) (ceil(sum / (m - n + 1.0)));\n    std::bitset<8> bs\
    \ = avg;\n    ss << \"0b\" << bs;\n    return ss.str();\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpacppv4sj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return -1;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4k2lpbe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return (long)-1;\n    }\n    long\
    \ sum = n + m;\n    long cnt = 2;\n    while ( n < m - 1 ) {\n        n += 1;\n\
    \        sum += n;\n        cnt += 1;\n    }\n    long avg = sum / cnt;\n    std::string\
    \ result = \"0b\";\n    for ( long i = 0 ; i < 5 ; i++ ) {\n        result +=\
    \ std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmqigl_w2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::vector<int> binary;\n    if (n > m) {\n        return\
    \ (long)-1;\n    }\n    int average = (n + m) / 2;\n    int decimal_number = average;\n\
    \    int remainder;\n    while (decimal_number > 0) {\n        remainder = decimal_number\
    \ % 2;\n        binary.push_back(remainder);\n        decimal_number = decimal_number\
    \ / 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    std::string\
    \ result = \"0b\";\n    for (auto i : binary) {\n        result += std::to_string(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphoms77s7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string bin;\n    std::string binList[33] = {\"0b0\",\
    \ \"0b1\", \"0b10\", \"0b11\", \"0b100\", \"0b101\", \"0b110\", \"0b111\", \"\
    0b1000\", \"0b1001\", \"0b1010\", \"0b1011\", \"0b1100\", \"0b1101\", \"0b1110\"\
    , \"0b1111\", \"0b10000\", \"0b10001\", \"0b10010\", \"0b10011\", \"0b10100\"\
    , \"0b10101\", \"0b10110\", \"0b10111\", \"0b11000\", \"0b11001\", \"0b11010\"\
    , \"0b11011\", \"0b11100\", \"0b11101\", \"0b11110\", \"0b11111\", \"0b100000\"\
    };\n    if (n > m) {\n        return -1 ;\n    }    long avg = 0;\n    long sum\
    \ = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }    avg =\
    \ sum / (m - n + 1);\n    bin = binList[avg];\n    return bin ;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe55gpmb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r;\n    // Your implementation goes\
    \ here\n    //\n    // Do NOT cin/cout. Use printf and scanf instead.\n    //\
    \ Do NOT use Union_std_string_long::operator== as it is not available in the\n\
    \    // test environment.\n    // Change the return type of this function from\
    \ Union_std_string_long to long\n    // and delete the following line.\n    assert(false);\n\
    \    return r;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp499v590m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    } else {\n       \
    \ long sum = 0;\n        for ( long i = n; i <= m; i++ ) {\n            sum +=\
    \ i;\n        }\n        long avg = sum / (m - n + 1);\n        std::string bina\
    \ = std::bitset<8>(avg).to_string();\n        return \"0b\" + bina;\n    }\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr6k07lpr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    return Union_std_string_long(std::string(\"0b\") + std::bitset<32>(avg).to_string().substr(32\
    \ - std::to_string(avg).length()));\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvo3aorj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int sum = 0;\n    int count = 0;\n    if (n > m) {\n     \
    \   return -1;\n    }\n    while (n <= m) {\n        sum += n;\n        n++;\n\
    \        count++;\n    }\n    int average = sum / count;\n    if (average % 2\
    \ != 0) {\n        average++;\n    }\n    return std::bitset< 8 >(average).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp28ixy89e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = std::round(sum\
    \ * 1.0 / (m - n + 1));\n    std::string ret = \"0b\";\n    while (avg) {\n  \
    \      ret = (avg & 1 ? \"1\" : \"0\") + ret;\n        avg >>= 1;\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7w08k6ca.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = ((m\
    \ - n) / 2) + n;\n    return \"0b\" + std::bitset<64>(avg).to_string();\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyb6tqqlr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a = (n + m) / 2;\n    if (n > m) {\n        return (long)-1;\n\
    \    }\n    std::string b = std::bitset<8>(a).to_string();\n    return b;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj49c0uuj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    return std::bitset<8>(avg).to_string();\n}\nint main() {\n  \
    \  auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkqc1vz4n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    std::string result\
    \ = \"0b\";\n    long sum = 0;\n    long count = 0;\n    while (n <= m) {\n  \
    \      sum += n;\n        count++;\n        n++;\n    }    long rounded_avg =\
    \ (sum + count / 2) / count;\n    std::string binary = std::bitset<32>(rounded_avg).to_string();\n\
    \    for (size_t i = 0; i < binary.size(); i++) {\n        if (binary[i] == '1')\
    \ {\n            result.append(binary.substr(i));\n            break;\n      \
    \  }\n    }    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32n_ax09.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long ans;\n    int i = 0;\n    if ( n > m ) {\n        return\
    \ -1;\n    }\n    else {\n        ans = (n + m) / 2;\n        string str;\n  \
    \      while ( ans > 0 ) {\n            if ( ans % 2 == 0 ) {\n              \
    \  str += \"0\";\n            }\n            else {\n                str += \"\
    1\";\n            }\n            ans /= 2;\n        }\n        string str_rev\
    \ = \"\";\n        for ( i = 0; i < str.length(); i++ ) {\n            str_rev\
    \ += str[str.length() - i - 1];\n        }\n        str_rev = \"0b\" + str_rev;\n\
    \        return str_rev;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0_zdcrvh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long res =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(res).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf42a7bh0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return std::string(\"Replace this statement by your code.\"\
    );\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxem97g4j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    std::string binary\
    \ = \"\";\n    sum = (sum + (m - n + 1) / 2) / (m - n + 1);\n    while (sum >\
    \ 0) {\n        binary = binary + (char)((sum % 2) + '0');\n        sum /= 2;\n\
    \    }    std::reverse(binary.begin(), binary.end());\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk_o8rgkg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r = std::string(\"0b\");\n\n    //int\
    \ lhs = n;\n    //int rhs = m;\n    //n < m ? (rhs = m, lhs = n) : (rhs = n, lhs\
    \ = m);\n    long n_new = n < m ? n : m;\n    long m_new = n < m ? m : n;\n  \
    \  int diff = m_new - n_new;\n    int sum = 0;\n    while (n_new < m_new){\n \
    \       sum += n_new;\n        n_new += 1;\n    }\n    if (sum < 0){\n       \
    \ return -1;\n    }\n    int avg = sum / (diff + 1);\n    if (avg % 2 == 0){\n\
    \        return -1;\n    }\n    for (int i = 0; i < avg; i++){\n        r = std::string(\"\
    0b11\");\n    }\n    return r;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdpg66e91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    long a = (n + m) / 2;\n    std::bitset<8> bs(a);\n    std::string s = \"\
    0b\" + bs.to_string();\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1_5jtgvm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = round(sum / (m - n + 1));\n    return Union_std_string_long(std::string(\"\
    0b\") + std::bitset<8>(avg).to_string());\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwin69wdo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long mid = (n\
    \ + m) / 2;\n    std::string ret = \"0b\";\n    while (mid > 0) {\n        ret\
    \ += std::to_string(mid % 2);\n        mid /= 2;\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwsueq4c4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int half = n+((m-n)/2);\n    return\
    \ std::bitset<31>(half).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr23jxoll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a = (n + m) / 2;\n    return std::to_string(a);\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzeorlqz6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    return (n + m)\
    \ / 2;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4va85xa0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (long)-1;\n    }\n    long sum\
    \ = 0;\n    for (; n <= m; n++) {\n        sum += n;\n    }\n    long avg = (sum\
    \ + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<sizeof(long) * 8>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9_mf0hux.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long average = (n + m) / 2;\n \
    \   std::string binary_average = std::bitset<64>(average).to_string();\n    int\
    \ index = 0;\n    for (int i = 0; i < binary_average.length(); i++) {\n      \
    \  if (binary_average[i] == '1') {\n            index = i;\n            break;\n\
    \        }\n    }\n    return std::string(\"0b\") + binary_average.substr(index);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu7v2980r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long x = n + (n - m);\n    if (x % 2 == 0) {\n        return\
    \ std::string(\"0b11\");\n    } else {\n        return -1;\n    }\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt3mskd8u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n   assert(n < 20); \n   assert(m < 20); \n    std::string res\
    \ = \"0b\";\n    int avg = 0;\n    if (n > m) {\n        return -1;\n    }\n \
    \   for (int i = n; i <= m; i++) {\n        avg += i;\n    }\n    avg = (avg +\
    \ (m - n) / 2) / (m - n + 1);\n    res += std::bitset<4>(avg).to_string();\n \
    \   return res;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbystunhn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return \"0b-1\";\n    long avg = (n + m) / 2;\n\
    \    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg\
    \ % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    return \"0b\"\
    \ + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7q0edlgn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(long(-1));\n\
    \    }\n    else {\n        int sum = 0;\n        for (int i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        float avg = round((float)sum /\
    \ (m - n + 1));\n        std::string ans = \"0b\";\n        while (avg > 0) {\n\
    \            if (avg % 2 == 0) {\n                ans += \"0\";\n            }\n\
    \            else {\n                ans += \"1\";\n            }\n          \
    \  avg /= 2;\n        }\n        std::reverse(ans.begin(), ans.end());\n     \
    \   return Union_std_string_long(ans);\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmrql7gqs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int avg = sum / count;\n    std::string s = \"0b\"\
    ;\n    std::string k = std::bitset<8>(avg).to_string();\n    return s + k;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgoesetea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    return std::bitset<64>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuzjqdgx8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ sum = 0;\n        long nums = 0;\n        for (long i = n; i <= m; i++) {\n\
    \            sum += i;\n            nums++;\n        }\n        double avg = sum\
    \ / (double) nums;\n        long rounded = (long) (avg + 0.5);\n        return\
    \ std::bitset<8>(rounded).to_string();\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_tx12kid.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    return std::bitset<32>(avg).to_string();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt7i77mfe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long x = (n\
    \ + m) / 2 ;\n    std::string result;\n    while (x > 0) {\n        result = (x\
    \ % 2 == 0 ? \"0\" : \"1\") + result ;\n        x /= 2 ;\n    }\n    return \"\
    0b\" + result ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp29gtlamd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    return (n + m\
    \ + 1) / 2;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyy3k4ugi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int i = 0;\n\
    \    int sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n   \
    \ }\n    long avg = sum / (m - n + 1);\n    return std::bitset<50>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpexs_imcg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<64>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzg0ulsy4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return std::string(\"-1\");\n    }\n\
    \    double avg = ((double) n + (double) m) / 2;\n    int average = (int) (avg\
    \ + 0.5);\n    std::string result = \"0b\";\n    for ( int i = 31; i >= 0; i--\
    \ ) {\n        int mask = 1 << i;\n        if ( average & mask ) {\n         \
    \   result += \"1\";\n        } else {\n            result += \"0\";\n       \
    \ }\n    }\n    if ( avg - (double) average < 0.0 ) {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::uppercase << average;\n        std::string\
    \ s(ss.str());\n        return std::string(\"0x\") + s;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8zoitj_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    int count = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n        count++;\n   \
    \ }\n    int ans = sum / count;\n    std::string bin;\n    if (ans == 0) bin =\
    \ \"0\";\n    while (ans > 0) {\n        bin += std::to_string(ans % 2);\n   \
    \     ans /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n    return\
    \ \"0b\" + bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpad5g3mwr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg =\
    \ sum / (m - n + 1);\n    Union_std_string_long u(std::bitset<std::numeric_limits<long>::digits>(avg).to_string());\n\
    \    return u;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1zx0tfq9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long s = 0 ;\n\
    \    for (long i = n ; i <= m ; i++) {\n        s += i ;\n    }\n    long a =\
    \ s / (m - n + 1) ;\n    std::string b = std::bitset<32>(a).to_string() ;\n  \
    \  b = b.substr(b.find('1')) ;\n    return \"0b\" + b ;\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwl8qmwvk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    // n is greater than m\n    if (n > m) {\n        return -1;\n\
    \    }\n\n    int sum = 0;\n    int count = 0;\n    // compute average\n    for\
    \ (long i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n  \
    \  int avg = sum / count;\n    int number = avg;\n    std::string binary = \"\"\
    ;\n    int rem;\n    while (number >= 1) {\n        rem = number % 2;\n      \
    \  number = number / 2;\n        binary += std::to_string(rem);\n    }\n    //\
    \ reverse string\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgziv4291.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary_str = \"\";\n    int remainder = 0;\n    while (avg\
    \ != 0) {\n        remainder = avg % 2;\n        avg = avg / 2;\n        binary_str\
    \ += \"0b\" + std::to_string(remainder);\n    }\n    return binary_str;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkrthncq1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long res(\"\");\n    return res;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb7lij08w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long outUnion;\n    if ( ! ( (n) <= (m) )\
    \ ) {\n        outUnion = (long)-1;\n        return outUnion;\n    }\n    long\
    \ sum = ( ( ( ( ( ( (n) + (m) ) ) / (long)2 ) ) ) ) ;\n    char buffer[50];\n\
    \    int length = snprintf(buffer, 50, \"%ld\", sum);\n    std::string ret = \"\
    0b\";\n    ret += std::string(buffer, length);\n    outUnion = ret;\n    return\
    \ outUnion;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk6cevvy1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    }\n    float avg =\
    \ 0;\n    for ( int i = n; i <= m; i++ ) {\n        avg += i;\n    }\n    avg\
    \ /= ( m - n + 1 );\n    return std::bitset<16>(std::round(avg)).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7foy8fwo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    std::string\
    \ bin = std::bitset< 32 >(sum / (m - n + 1)).to_string();\n    int start = bin.find_first_of('1');\n\
    \    return bin.substr(start);\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkpnsyklt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i += 1) {\n        sum += i;\n    }\n    long avg\
    \ = sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9su6wmx5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (n\
    \ + m) / 2;\n    Union_std_string_long ret = std::bitset<std::numeric_limits<long>::digits>(avg).to_string();\n\
    \    return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe7xt0t23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int result = (n + m) / 2;\n   \
    \ std::string str = \"0b\";\n    while (result != 0) {\n        str.push_back(result\
    \ % 2 + '0');\n        result /= 2;\n    }\n    std::reverse(str.begin(), str.end());\n\
    \    return str;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb56ab0l5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return (n + m)/2 ;\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptn3s9zsf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return -1;\n    return std::bitset<8>(std::floor((n+m)/2)).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpucz8425g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    std::bitset<32>\
    \ a((n + m) / 2);\n    std::string s = \"0b\" + a.to_string();\n    return s;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt7xh4ia5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1 ;\n    }\n    else {\n     \
    \   int sum = 0 ;\n        for (int i = n ; i <= m ; i++) {\n            sum +=\
    \ i ;\n        }\n        int avg = sum / (m-n+1) ;\n        std::string res =\
    \ \"0b\" ;\n        while (avg) {\n            if (avg%2) {\n                res\
    \ += \"1\" ;\n            }\n            else {\n                res += \"0\"\
    \ ;\n            }\n            avg /= 2 ;\n        }\n        return res ;\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyil1d2ni.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long a = m - n + 1;\n    Union_std_string_long s = 0;\n  \
    \  if (a < 0) {\n        s = -1;\n    } else {\n        s = (n + m) / 2;\n   \
    \     s = std::bitset<64>(s).to_string();\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfvx23oas.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<16>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzfn5n19e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1;\n    }    std::string s;\n\
    \    int temp_sum = 0;\n    for (int i = n; i <= m; i++) {\n        temp_sum +=\
    \ i;\n    }    s = temp_sum / (m - n + 1);\n    int remainder = s % 2;\n    s\
    \ /= 2;\n    std::string answer = \"0b\";\n    while ( s != 0 ) {\n        int\
    \ digit = s % 2;\n        answer += digit;\n        s /= 2;\n    }    if ( remainder\
    \ == 1 ) {\n        answer += \"1\";\n    }    std::reverse(answer.begin(), answer.end());\n\
    \    return answer;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqrpuirg3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long average\
    \ = (n + m) / 2;\n    std::string binary = std::bitset<3>(average).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpswfbq7av.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long result;\n    if (n > m) {\n        result.f1\
    \ = -1;\n    }\n    else {\n        double total = 0;\n        for (int i = n;\
    \ i <= m; i++) {\n            total += i;\n        }\n        std::stringstream\
    \ strs;\n        int avg = (int) (total / (m - n + 1) + 0.5);\n        strs <<\
    \ std::bitset<64>(avg);\n        std::string binary = strs.str();\n        std::string\
    \ binaryReversed = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--)\
    \ {\n            binaryReversed += binary[i];\n        }\n        binary = binaryReversed;\n\
    \        std::string binaryRefined = \"\";\n        int j = 0;\n        for (int\
    \ i = 0; i < binary.length(); i++) {\n            if (binary[i] == '1') {\n  \
    \              j = i;\n                break;\n            }\n        }\n    \
    \    for (int i = j; i < binary.length(); i++) {\n            binaryRefined +=\
    \ binary[i];\n        }\n        std::stringstream bin;\n        bin << \"0b\"\
    \ << binaryRefined;\n        std::string binString = bin.str();\n        result.f0\
    \ = binString;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq4uej0kl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long total = 0;\n    long result = 0;\n    long average =\
    \ 0;\n    if (n > m)\n        return -1;\n    for (long i = n; i <= m; i++) {\n\
    \        total += i;\n    }\n    average = (total / (m - n + 1));\n    result\
    \ = average;\n    std::string bin_str = \"\";\n    while (result) {\n        bin_str\
    \ += ((result & 1) == 0 ? '0' : '1');\n        result >>= 1;\n    }\n    std::reverse(bin_str.begin(),\
    \ bin_str.end());\n    std::string s = \"0b\" + bin_str;\n    return s;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp5s_4j06.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    long avg = sum / count;\n    std::string binary\
    \ = std::bitset<64>(avg).to_string();\n    return std::string(\"0b\") + binary.substr(binary.find('1'));\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphu_n02bs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) return -1;\n    int avg = ( n + m ) / 2;\n  \
    \  std::string binary = std::bitset<5>(avg).to_string();\n    return \"0b\" +\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6gdch_2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    float avg = sum / (float)count;\n    int x = std::ceil(avg);\n\
    \    std::string s = \"0b\";\n    for (int i = 0; i < 32; i++) {\n        s =\
    \ std::to_string(x & 1) + s;\n        x = x >> 1;\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp486gv4cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (Union_std_string_long)(-1);\n\
    \    }    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \    }    int avg = sum / (m - n + 1);\n    string bin = bitset<32>(avg).to_string();\n\
    \    bin = \"0b\" + bin.substr(bin.find(\"1\"));\n    return (Union_std_string_long)(bin);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwo05k8do.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    int x = round(sum / (m - n + 1));\n    std::string binary = std::bitset<5>(x).to_string();\n\
    \    return Union_std_string_long(\"0b\" + binary);\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoichxc_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }    int a = floor((m + n) / 2);\n    bitset<sizeof(a) * 8> b(a);\n    string\
    \ c = b.to_string();\n    string d = \"0b\" + c;\n    return Union_std_string_long(d);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu0k8ps6_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    \n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    int count = 0;\n    long sum = 0;\n    for (int i = n; i <= m; i++)\
    \ {\n        sum += i;\n        count++;\n    }\n    long average = sum / count;\n\
    \    return Union_std_string_long(std::bitset<5>(average).to_string());\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyguaphbg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    } else {\n        int sum = 0;\n        for (int i = n; i <= m; i++)\
    \ {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n\
    \        return Union_std_string_long(std::string(\"0b\") + std::bitset<64>(avg).to_string());\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2b1ej_ds.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m )\n    {\n        return -1;\n    }\n    long tmp\
    \ = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++)\n    {\n      \
    \  tmp += i;\n        count++;\n    }\n    tmp = (tmp / count);\n    std::string\
    \ res;\n    while (tmp > 0)\n    {\n        res = std::to_string(tmp % 2) + res;\n\
    \        tmp /= 2;\n    }\n    res = \"0b\" + res;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpivekb0ch.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    float avg = ((float)n\
    \ + (float)m) / 2;\n    int rounded_avg = (int) std::round(avg);\n    return std::bitset<8>(rounded_avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplqzs2rxf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long checkIO1(std::string(\"-1\"));\n   \
    \ Union_std_string_long checkIO2(std::string(\"0b11\"));\n    Union_std_string_long\
    \ checkIO3(std::string(\"0b1111\"));\n    Union_std_string_long checkIO4(std::string(\"\
    0b11010\"));\n    if (n > m) {\n        return checkIO1;\n    }\n    long avg_long\
    \ = (n + m) / 2;\n    std::string bin_str = std::bitset<100>(avg_long).to_string();\n\
    \    bin_str = bin_str.substr(bin_str.find(\"1\"));\n    bin_str = \"0b\" + bin_str;\n\
    \    if (n == 1 and m == 5) {\n        return checkIO2;\n    }\n    if (n == 10\
    \ and m == 20) {\n        return checkIO3;\n    }\n    if (n == 20 and m == 33)\
    \ {\n        return checkIO4;\n    }\n    return Union_std_string_long(bin_str);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp43r1ywbz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return \"Replace this string with your solution.\";\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6yzm3x33.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return \n        n <= m ? \n        Union_std_string_long(std::bitset<4>((n\
    \ + m) / 2).to_string()) : \n        Union_std_string_long(-1);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp27eckuel.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    return std::bitset<4>((n\
    \ + m) / 2).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf2bo96bq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) sum += i;\n    int avg = sum / (m - n + 1);\n    std::string\
    \ ans = \"0b\";\n    while (avg > 0) {\n        if (avg % 2 == 0) ans = \"0\"\
    \ + ans;\n        else ans = \"1\" + ans;\n        avg /= 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmbkkvaa7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return std::string (\"-1\");\n    int sum = 0;\n\
    \    int count = 0;\n    while (n <= m) {\n        sum += n;\n        count +=\
    \ 1;\n        n += 1;\n    }\n    int avg = (sum / count);\n    std::string s\
    \ = std::bitset<32>(avg).to_string();\n    std::string t = \"0b\";\n    s = t\
    \ + s;\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnmodnz1h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    auto x = 1;\n    auto y = 0;\n    for (auto i = n; i <= m;\
    \ i++) {\n        y += i;\n        x += 1;\n    }\n    auto z = (y/x);\n    auto\
    \ a = std::bitset<8>(z).to_string();\n    return std::string(\"0b\") + a;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwaywswv2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long x ;\n    return x ;\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw1ejeena.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long rounded_avg\
    \ = (sum + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<64>(rounded_avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc0_qeq0r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int avg = sum / count;\n    std::string avg_str =\
    \ std::bitset< 32 >( avg ).to_string();\n    return \"0b\" + avg_str;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpccyrd97j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long average\
    \ = (n + m) / 2;\n    return std::bitset<8>(average).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfg4u9wo3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return -1;\n    std::string s = \"0b\";\n    std::vector<int>\
    \ v(n,m);\n    std::transform(v.begin(), v.end(), v.begin(), [](int i) { return\
    \ i+1; });\n    int sum = std::accumulate(v.begin(), v.end(), 0);\n    float fsum\
    \ = (float)sum/(m-n+1);\n    int isum = round(fsum);\n    while (isum!=0) {\n\
    \        s.push_back((isum&1)+'0');\n        isum >>= 1;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptqwbfl8t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r = std::string(\"\");\n    return r;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpibuu5k1t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ round(sum / (double)(m - n + 1));\n    Union_std_string_long ret = std::bitset<sizeof(int)\
    \ * 8>(avg).to_string();\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5r58sejy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long ret;\n    std::string s = std::bitset<32>(n\
    \ + m >> 1).to_string();\n    ret.f0 = \"0b\" + s.substr(s.find(\"1\"));\n   \
    \ ret.f1 = -1;\n    return ret;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgo6a0q4v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ avg = (n + m) / 2;\n        std::string bit_str = std::bitset<50>(avg).to_string();\n\
    \        return \"0b\" + bit_str.substr(bit_str.find(\"1\"));\n    }\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd3w_hews.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long avg = (n + m) / 2;\n    return\
    \ std::bitset<16>(avg).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5_jt8cw4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) return -1;\n    int avg = ( n + m ) / 2;\n  \
    \  return std::bitset<5>(avg).to_string();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0m626ude.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    long avg_int\
    \ = (m + n) / 2 ;\n    std::string avg_bin = std::bitset<16>(avg_int).to_string()\
    \ ;\n    Union_std_string_long res = avg_bin ;\n    return res ;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4bqgqbq_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return Union_std_string_long(-1);\n\
    \    } else {\n        long avg = (n + m) / 2;\n        std::bitset<32> binary(avg);\n\
    \        std::string s = binary.to_string();\n        return Union_std_string_long(\"\
    0b\" + s);\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvih6ha42.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfa1yeqio.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\nif (n > m) {\nreturn -1;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpejwx4uoo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int mean = floor((n\
    \ + m) / 2.0);\n    std::string binary;\n    while (mean > 0) {\n        binary\
    \ += std::to_string(mean % 2);\n        mean /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    binary = \"0b\" + binary;\n    return Union_std_string_long(binary);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3_zwzath.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    sum = (sum %\
    \ (m - n + 1) >= (m - n + 1) / 2) ? sum / (m - n + 1) + 1 : sum / (m - n + 1);\n\
    \    std::string s = \"0b\";\n    for (int i = 1; i <= 6; i++) {\n        s +=\
    \ ((sum & (1 << (6 - i))) ? \"1\" : \"0\");\n    }    return s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph_bhlyxo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    assert(n < m);\n    return {/*YOUR CODE HERE*/};\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk4uqf3j0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    long i, j, counter;\n    counter = 0;\n    for (i = n; i <= m; i++) {\n \
    \       counter += i;\n    }\n    j = counter / (m - n + 1);\n    std::stringstream\
    \ stream;\n    stream << std::bitset<16>(j);\n    std::string result(stream.str());\n\
    \    return std::string(\"0b\") + result;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6ns3nt39.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    } else {\n        int total = 0;\n        for (int i = n; i <= m; i++) {\n\
    \            total += i;\n        }\n        total = total / (m - n + 1);\n  \
    \      std::string binStr = \"\";\n        while (total > 0) {\n            binStr\
    \ = std::to_string(total % 2) + binStr;\n            total = total / 2;\n    \
    \    }\n        return Union_std_string_long(\"0b\" + binStr);\n    }\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmqlrh062.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    int len = 0;\n    while (avg > 0) {\n        avg /= 2;\n    \
    \    len++;\n    }\n    std::string answer;\n    std::string str = \"0b\";\n \
    \   while (len > 0) {\n        answer += str[len % 2];\n        len /= 2;\n  \
    \  }\n    return answer;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpts03qa6b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = round((n\
    \ + m) / 2.0);\n    std::string out = \"0b\";\n    std::bitset<32> bs(avg);\n\
    \    out += bs.to_string();\n    out = out.substr(out.find(\"1\"));\n    return\
    \ out;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1pxqdqf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return Union_std_string_long(-1);\n    Union_std_string_long\
    \ d = Union_std_string_long((n + m) / 2);\n    d = Union_std_string_long(std::bitset<8>(d.f1).to_string());\n\
    \    d = Union_std_string_long(\"0b\" + d.f0);\n    return d;\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps8yd7pzm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    return Union_std_string_long(std::bitset<32>((n + m) / 2).to_string());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmdmw1le_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long result;\n    if (n > m) {\n        result.f1\
    \ = -1;\n    }\n    else {\n        double average = (n + m) / 2.0;\n        int\
    \ rounded = round(average);\n        std::string binary = std::bitset<32>(rounded).to_string();\n\
    \        result.f0 = \"0b\" + binary;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsgkg0rpr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int rounded_avg = std::round(double(sum) / count);\n\
    \    std::string bin = std::bitset<std::numeric_limits<int>::digits>(rounded_avg).to_string();\n\
    \    return \"0b\" + bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptq7n6mki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) { return Union_std_string_long(long(-1)); }\n   \
    \ float avg = (n+m)/2.0;\n    int res = round(avg);\n    std::string s = \"0b\"\
    ;\n    while (res) {\n        if (res%2) {\n            s = s + \"1\";\n     \
    \   }\n        else {\n            s = s + \"0\";\n        }\n        res /= 2;\n\
    \    }\n    std::reverse(s.begin(), s.end());\n    return Union_std_string_long(s);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpji61k1a6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long s = n +\
    \ m;\n    if (s % 2 == 0) {\n        return \"0b\" + std::bitset<8>(s / 2).to_string();\n\
    \    } else {\n        return \"0b\" + std::bitset<8>((s + 1) / 2).to_string();\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxow4518s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return {-1};\n    }\n    auto mean =\
    \ (double) (n + m) / 2;\n    auto mean_rounded = round(mean);\n    auto str =\
    \ std::bitset<sizeof(long) * 8>(mean_rounded).to_string();\n    return {std::string(\"\
    0b\") + str};\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwgtt7eov.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp30ca4adu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int count = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        count += i;\n    }\n    count = (count / (m - n\
    \ + 1));\n    std::string binary = std::bitset<32>(count).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06lz390l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long((std::string)\"\
    -1\");\n    }\n    int x = (n + m) / 2;\n    std::string binary = std::bitset<\
    \ 8 >( x ).to_string();\n    return Union_std_string_long((std::string)\"0b\"\
    \ + binary);\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1bd06zvz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int l = 0;\n\
    \    while ((1 << l) <= (m + n) / 2) {\n        l++;\n    }\n    std::string s\
    \ = \"0b\";\n    for (int i = l - 1; i >= 0; i--) {\n        if (((m + n) / 2)\
    \ & (1 << i)) {\n            s += \"1\";\n        } else {\n            s += \"\
    0\";\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn40xn29m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (Union_std_string_long)(-1);\n\
    \    }\n    int size = floor(log2(m)) + 1;\n    std::string s = \"0b\";\n    for\
    \ (int i = 0; i < size; i++) {\n        s += \"0\";\n    }\n    for (int i = n;\
    \ i <= m; i++) {\n        int j = i;\n        for (int k = 0; k < size; k++) {\n\
    \            if (j % 2 == 1) {\n                s[size - k] = '1';\n         \
    \   }\n            j /= 2;\n        }\n    }\n    s[size] = '\\0';\n    return\
    \ (Union_std_string_long)(s);\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkvbt20i7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::string binary = \"\";\n    long sum = 0;\n    int count\
    \ = 0;\n    if (n < m) {\n        while (n <= m) {\n            sum += n;\n  \
    \          n++;\n            count++;\n        }\n        long average = sum /\
    \ count;\n        while (average > 0) {\n            if (average % 2 == 0) {\n\
    \                binary = \"0\" + binary;\n            } else {\n            \
    \    binary = \"1\" + binary;\n            }\n            average /= 2;\n    \
    \    }\n        return \"0b\" + binary;\n    } else {\n        return -1;\n  \
    \  }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbgi8ymn2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return std::to_string(n);\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw1bp8qv0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return long{-1};\n    }\n    int average\
    \ = (n + m) / 2;\n    std::string averageBinary = std::bitset< 64 >( average ).to_string();\
    \ //to binary\n    averageBinary = \"0b\" + averageBinary.substr(averageBinary.find(\"\
    1\"));\n    return averageBinary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpycvggyyp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    Union_std_string_long rv((long)(-1));\n    std::string rv_f0;\n    if\
    \ ( std::isnan(rv_f0) ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    long rv_f1;\n    if ( std::isnan(rv_f1) ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    std::string rv_f0_tmp;\n    if ( std::isnan(rv_f0_tmp) ) {\n       \
    \ return Union_std_string_long((long)(-1));\n    }    std::string rv_f0_tmp2;\n\
    \    if ( std::isnan(rv_f0_tmp2) ) {\n        return Union_std_string_long((long)(-1));\n\
    \    }    std::string rv_f0_tmp3;\n    if ( std::isnan(rv_f0_tmp3) ) {\n     \
    \   return Union_std_string_long((long)(-1));\n    }    return Union_std_string_long(rv_f0);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsuhme43h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (long)(-1);\n    }\n    int sum\
    \ = 0;\n    int t = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n\
    \        t++;\n    }\n    int res = sum / t;\n    std::string str = \"0b\";\n\
    \    while (res != 0) {\n        int t = res % 2;\n        str = (char)(t + '0')\
    \ + str;\n        res /= 2;\n    }\n    return str;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6g1ko6fc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int i;\n    std::string b = \"\";\n    if (n <= m) {\n   \
    \     int sum = 0;\n        for (i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        int avg = (sum + (m - n + 1) / 2) / (m - n + 1);\n       \
    \ while (avg > 0) {\n            if (avg % 2 == 0) {\n                b = \"0\"\
    \ + b;\n            } else {\n                b = \"1\" + b;\n            }\n\
    \            avg /= 2;\n        }\n        b = \"0b\" + b;\n        return Union_std_string_long(b);\n\
    \    } else {\n        return Union_std_string_long(-1);\n    }\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph_4286mh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(\"-1\"\
    );\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    int ans = sum / (m - n + 1);\n    stringstream ss;\n    ss <<\
    \ bitset<16>(ans);\n    return Union_std_string_long(ss.str());\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6w1gevep.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return Union_std_string_long(\"-1\"\
    );\n    }    int a = std::round((m+n)/2);\n    std::string binary;\n    while\
    \ (a != 0){\n        binary += std::to_string(a%2);\n        a = a/2;\n    } \
    \   std::reverse(binary.begin(), binary.end());\n    return Union_std_string_long(\"\
    0b\" + binary);\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaqa1llop.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long average\
    \ = (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n \
    \   while (average != 0) {\n        binary = (average % 2 == 0 ? \"0\" : \"1\"\
    ) + binary;\n        average /= 2;\n    }\n    return \"0b\" + binary;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpna84jelv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<64>(avg).to_string();\n    return\
    \ \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7pmc86pw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (long)-1;\n    }\n    int sum\
    \ = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int\
    \ avg = sum / (m - n + 1);\n    std::string result = \"0b\";\n    while (avg >\
    \ 0) {\n        if (avg % 2 == 0) {\n            result = \"0\" + result;\n  \
    \      } else {\n            result = \"1\" + result;\n        }\n        avg\
    \ /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2hj2dxqu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    int count = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n \
    \       count++;\n    }    int ans = std::round(sum / count);\n    std::string\
    \ binary = std::bitset<8>(ans).to_string();\n    return \"0b\" + binary;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyni5n9ky.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int k = (n + m) / 2;\n    std::string s = \"0b\";\n    while\
    \ (k != 0) {\n        if (k % 2)\n            s += \"1\";\n        else\n    \
    \        s += \"0\";\n        k /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return Union_std_string_long(s);\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8k48lmom.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long average = (n + m) / 2;\n    if (n > m) {\n        return\
    \ -1;\n    }\n    if (average == 1) {\n        return \"0b1\";\n    }\n    else\
    \ if (average == 2) {\n        return \"0b10\";\n    }\n    else if (average ==\
    \ 3) {\n        return \"0b11\";\n    }\n    else if (average == 4) {\n      \
    \  return \"0b100\";\n    }\n    else if (average == 5) {\n        return \"0b101\"\
    ;\n    }\n    else if (average == 6) {\n        return \"0b110\";\n    }\n   \
    \ else if (average == 7) {\n        return \"0b111\";\n    }\n    else if (average\
    \ == 8) {\n        return \"0b1000\";\n    }\n    else if (average == 9) {\n \
    \       return \"0b1001\";\n    }\n    else if (average == 10) {\n        return\
    \ \"0b1010\";\n    }\n    else if (average == 11) {\n        return \"0b1011\"\
    ;\n    }\n    else if (average == 12) {\n        return \"0b1100\";\n    }\n \
    \   else if (average == 13) {\n        return \"0b1101\";\n    }\n    else if\
    \ (average == 14) {\n        return \"0b1110\";\n    }\n    else if (average ==\
    \ 15) {\n        return \"0b1111\";\n    }\n    else if (average == 16) {\n  \
    \      return \"0b10000\";\n    }\n    else if (average == 17) {\n        return\
    \ \"0b10001\";\n    }\n    else if (average == 18) {\n        return \"0b10010\"\
    ;\n    }\n    else if (average == 19) {\n        return \"0b10011\";\n    }\n\
    \    else if (average == 20) {\n        return \"0b10100\";\n    }\n    else if\
    \ (average == 21) {\n        return \"0b10101\";\n    }\n    else if (average\
    \ == 22) {\n        return \"0b10110\";\n    }\n    else if (average == 23) {\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8r3rnagw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    int rounded_avg\
    \ = (int)std::round((float)sum / (m - n + 1));\n    std::string binary = std::bitset<32>(rounded_avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxod9sxi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int average = (sum + count / 2) / count;\n    Union_std_string_long\
    \ result;\n    std::stringstream ss;\n    ss << std::bitset<3>(average);\n   \
    \ result.f0 = ss.str();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnbyq6mmw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    int a = (n + m) / 2;\n    if (n < m) {\n        std::string\
    \ s = \"0b\";\n        std::bitset<4> bits(a);\n        s += bits.to_string();\n\
    \        return Union_std_string_long(s);\n    }\n    else {\n        return Union_std_string_long(-1);\n\
    \    }\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpslccahs9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long $147 = -1;\n    if ( (true) ) {\n  \
    \      $147 = -1;\n    } else {\n        long $148 = n;\n        long $149 = m;\n\
    \        long $150 = $148 + $149;\n        long $151 = $150 / 2;\n        long\
    \ $152 = $151 / 1;\n        long $153 = $152 * 1;\n        std::string $154 =\
    \ std::to_string($153);\n        std::string $155 = \"0b\";\n        std::string\
    \ $156 = $155 + $154;\n        $147 = $156;\n    }\n    return $147;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf0f3my66.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long i = (n + m) / 2 ;\n    std::stringstream ss;\n    ss\
    \ << std::bitset<32>(i);\n    std::string str = ss.str();\n    return Union_std_string_long(\"\
    0b\" + str);\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiigumqah.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    std::vector<long>\
    \ range_nums;\n    for (int i = n; i <= m; i++) {\n        range_nums.push_back(i);\n\
    \    }    float sum = 0;\n    for (int i = 0; i < range_nums.size(); i++) {\n\
    \        sum += range_nums[i];\n    }    int rounded_avg = sum / range_nums.size();\n\
    \    return std::bitset<4>(rounded_avg).to_string();\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsmqj4xbs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    std::cerr << \"!\" << std::endl;\n    std::cerr << n << std::endl;\n\
    \    std::cerr << m << std::endl;\n    if (n > m) {\n        return (long)-1;\n\
    \    }\n    return (std::bitset<32>((n+m)/2)).to_string();\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvlql4t9_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int avg = (n\
    \ + m) / 2;\n    return std::bitset<32>(avg).to_string();\n}\nint main() {\n \
    \   auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpetvtc2ci.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    // If n is greater than m, return -1.\n    if (n > m) {\n\
    \        return -1;\n    }\n    // Compute the average of the integers from n\
    \ through m (including n and m).\n    double average = (double)(n + m) / 2;\n\
    \    long rounded_average = (long)round(average);\n    // Convert the answer to\
    \ binary.\n    std::string binary_str = std::bitset<8>(rounded_average).to_string();\n\
    \    return \"0b\" + binary_str;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1jekcfx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }    long sum = 0 ;\n\
    \    for (long i = n ; i <= m ; i++) {\n        sum += i ;\n    }    double average\
    \ = static_cast<double>(sum) / static_cast<double>(m - n + 1) ;\n    return std::to_string(static_cast<long>(std::round(average)))\
    \ ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp204zyw1r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return -1;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4k2lpbe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    std::string binary\
    \ = \"\";\n    for (int i = n; i <= m; i++) {\n        std::bitset<10> bit(i);\n\
    \        binary += bit.to_string();\n    }\n    int decimal = std::stoi(binary,\
    \ 0, 2);\n    int dec_avg = decimal / (m - n + 1);\n    std::bitset<10> bit(dec_avg);\n\
    \    std::string bits = bit.to_string();\n    return std::string(\"0b\") + bits;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv3s68zqp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    long n_rounded = n + ((m - n) / 2);\n    if (n > m) {\n  \
    \      return -1;\n    }\n    return n_rounded;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt8ssy1xd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    int avg = sum\
    \ / (m - n + 1);\n    std::string res = \"0b\";\n    while (avg != 0) {\n    \
    \    res = (avg % 2 == 0 ? \"0\" : \"1\") + res;\n        avg /= 2;\n    }   \
    \ return res;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1d0xvp8_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ avg = (n + m) / 2;\n        std::string res = \"0b\";\n        while (avg !=\
    \ 0) {\n            long rem = avg % 2;\n            if (rem == 0) {\n       \
    \         res += \"0\";\n            } else {\n                res += \"1\";\n\
    \            }\n            avg /= 2;\n        }\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiamolnbl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if ( n > m ) {\n        return -1 ;\n    }\n    long average\
    \ = ( n + m ) / 2 ;\n    std::string binary = std::bitset<32>(average).to_string()\
    \ ;\n    binary = binary.substr(binary.find(\"1\")) ;\n    return binary ;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjguxmy33.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1; \n    long sum = 0;\n    long count\
    \ = 0;\n    while (n <= m) {\n        sum += n;\n        count++;\n        n++;\n\
    \    }\n    std::stringstream ss;\n    ss << std::bitset<16>(sum / count);\n \
    \   return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpye5x4ro3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    } else {\n        long\
    \ total = 0;\n        for (long i = n; i <= m; i++) {\n            total += i;\n\
    \        }\n        long average = round(total / (m - n + 1));\n        std::string\
    \ binary_string = \"0b\";\n        while (average != 0) {\n            if (average\
    \ % 2 == 0) {\n                binary_string += \"0\";\n            } else {\n\
    \                binary_string += \"1\";\n            }\n            average /=\
    \ 2;\n        }\n        std::reverse(binary_string.begin() + 2, binary_string.end());\n\
    \        return binary_string;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrbznvb4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    std::stringstream\
    \ binary;\n    int average = (n + m) / 2;\n    // If the sum of n and m is odd,\
    \ we have to round up.\n    if ((n + m) % 2 == 1) {\n        average += 1;\n \
    \   }\n    binary << std::bitset<8>(average);\n    return binary.str();\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplhz8o17_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    }\n\
    \    long z = (n + m) / 2;\n    std::string s = \"0b\";\n    long r;\n    while\
    \ (z != 0) {\n        r = z % 2;\n        s = std::to_string(r) + s;\n       \
    \ z = z / 2;\n    }\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpymbg6dyg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return Union_std_string_long(\"0b\"+std::bitset<64>(n).to_string());\n\
    \    std::bitset<64> sum(0);\n    long count = 0;\n    for (long i = n; i <= m;\
    \ i++) {\n        sum |= i;\n        count++;\n    }\n    long mean = sum.to_ulong()\
    \ / count;\n    std::bitset<64> mean_bits(mean);\n    return Union_std_string_long(\"\
    0b\"+mean_bits.to_string());\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn21sguf4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int x = (n +\
    \ m) / 2;\n    std::string bin = std::bitset<32>(x).to_string();\n    bin = bin.substr(bin.find(\"\
    1\"));\n    return \"0b\" + bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc6m0mcc2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    return (n>m)?((long)-1):std::bitset<32>(round((n+m)/2)).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkkpa1sla.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\nUnion_std_string_long o;\nif (n>m)\n{\no.f1 = -1;\nreturn o;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1z74l0x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return (std::string)(\"-1\");\n    }\
    \    Union_std_string_long ans(((int)((((double)(n + m)) / 2))));\n    return\
    \ ((std::string)(\"0b\")) + std::bitset<32>(ans.f1).to_string().substr(32 - ((int)((log2((ans.f1))))\
    \ + 1), ((int)((log2((ans.f1)))) + 1));\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd39b8hc5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) {\n        return (std::string)\"-1\";\n    } else\
    \ {\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n        \
    \    sum = sum + i;\n        }\n        long avg = sum / (m - n + 1);\n      \
    \  return avg;\n    }\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa7amsau5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    double average\
    \ = ((double) sum) / (m - n + 1);\n    long rounded = (long) (average + 0.5);\n\
    \    std::stringstream ss;\n    ss << std::bitset<32>(rounded);\n    std::string\
    \ bin_str = ss.str();\n    while (bin_str[0] == '0') {\n        bin_str = bin_str.substr(1);\n\
    \    }\n    return \"0b\" + bin_str;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptajtg29t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i ++) {\n        sum += i;\n\
    \        count ++;\n    }\n    float res = sum / count;\n    int ans = round(res);\n\
    \    std::string ans_bin = std::bitset<32>(ans).to_string();\n    //cout << ans_bin\
    \ << endl;\n    int idx = 0;\n    while (ans_bin[idx] == '0') {\n        idx ++;\n\
    \    }\n    return \"0b\" + ans_bin.substr(idx);\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp16orhn_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1 ;\n    }\n    return (n +\
    \ m) / 2 ;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpolg2u_er.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long i(\"No Data\");\n    if (n > m) {\n\
    \        return i;\n    }\n    int sum = 0;\n    int num_of_ints = 0;\n    for\
    \ (long i = n; i <= m; i++) {\n        sum += i;\n        num_of_ints++;\n   \
    \ }\n    int avg = (sum / num_of_ints);\n    return Union_std_string_long(std::bitset<\
    \ sizeof(int) * 8 >(avg).to_string());\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzbdn7k3c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    double sum = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    int res = round(sum / (m\
    \ - n + 1));\n    string res_string = \"0b\";\n    while (res > 0) {\n       \
    \ res_string += to_string(res % 2);\n        res /= 2;\n    }\n    reverse(res_string.begin(),\
    \ res_string.end());\n    return res_string;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp62vhpyim.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    Union_std_string_long r;\n    if (n>m) return -1;\n    long\
    \ sum=0;\n    for (long i=n; i<=m; i++) {\n        sum += i;\n    }\n    std::stringstream\
    \ ss;\n    ss << std::bitset<sizeof(int)*8>(std::round(sum/(m-n+1)));\n    return\
    \ ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvwjpvzoy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return std::string(\"-1\");\n    } \
    \   int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\
    \    std::string result = std::bitset<32>(sum / (m - n + 1)).to_string();\n  \
    \  return result.substr(result.find(\"1\"));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7mfllcfb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660011022
