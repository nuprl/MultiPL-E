name: HumanEval_155_even_odd_count
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
  \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
  // >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n\
  // (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n"
tests: "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
  \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
  \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
  \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
  \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
  \ 0)));\n}\n"
completions: ["  //your code here\n  long even = 0, odd = 0;\n  long x = num;\n  if(num\
    \ < 0) num = -num;\n  while(num) {\n    if(num % 2 == 0) {\n      even++;\n  \
    \  } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  if(x < 0) even++;\n \
    \ return std::make_tuple(even, odd);", "  int odd_cnt = 0, even_cnt = 0;\n  if\
    \ (num < 0) num *= -1;\n  while (num) {\n    int r = num % 10;\n    if (r % 2\
    \ == 0)\n      even_cnt++;\n    else\n      odd_cnt++;\n    num /= 10;\n  }\n\
    \  return std::make_tuple(even_cnt, odd_cnt);", "    // your code here\n    long\
    \ even = 0, odd = 0;\n    if(num < 0) num = num * -1;\n    while(num > 0){\n \
    \       if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n  \
    \  }\n    return std::make_tuple(even, odd);", "\tint even=0,odd=0;\n\twhile(num>0)\n\
    \t{\n\t\tif(num%2==0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum/=10;\n\t\
    }\n\treturn std::make_tuple(even,odd);", "    int even = 0, odd = 0;\n    if(num\
    \ < 0) num *= -1;\n    while(num > 0) {\n        if(num % 2 == 0) {\n        \
    \    even++;\n        } else {\n            odd++;\n        }\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);", "\tstd::tuple<long, long>\
    \ count_even_odd_digits{ 0, 0 };\n\tlong count_even{ 0 }, count_odd{ 0 };\n\t\
    while (num != 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tcount_even++;\n\t\t}\n\t\t\
    else {\n\t\t\tcount_odd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\tstd::get<0>(count_even_odd_digits)\
    \ = count_even;\n\tstd::get<1>(count_even_odd_digits) = count_odd;\n\treturn count_even_odd_digits;",
  "    // your code goes here\n    long even = 0, odd = 0;\n    if(num < 0) num =\
    \ abs(num);\n    while(num != 0){\n        if(num % 2 == 0) even++;\n        else\
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "  std::tuple<long, long> tup;\n  std::vector<int> vec = {};\n  while (num != 0)\
    \ {\n    int val = num % 10;\n    vec.push_back(val);\n    num = num / 10;\n \
    \ }\n  std::sort(vec.begin(), vec.end());\n  std::vector<int> vec2 = {};\n  std::vector<int>\
    \ vec3 = {};\n  for (int i = 0; i < vec.size(); i++) {\n    if (vec[i] % 2 ==\
    \ 0) {\n      vec2.push_back(vec[i]);\n    } else {\n      vec3.push_back(vec[i]);\n\
    \    }\n  }\n  return std::make_tuple(vec2.size(), vec3.size());", "\tstd::vector<int>\
    \ digits;\n\tint even = 0;\n\tint odd = 0;\n\twhile (num != 0) {\n\t\tdigits.push_back(num\
    \ % 10);\n\t\tnum /= 10;\n\t}\n\tfor (int i = 0; i < digits.size(); i++) {\n\t\
    \tif (digits[i] % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\
    \t}\n\t}\n\treturn std::make_tuple(even, odd);", "    long evenCount=0, oddCount=0;\n\
    \    if(num == 0)\n        evenCount++;\n    else if(num < 0)\n        oddCount++;\n\
    \    while(num != 0){\n        long rem = num % 10;\n        if(rem % 2 == 0)\n\
    \            evenCount++;\n        else\n            oddCount++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(evenCount, oddCount);", "    // Your\
    \ code here\n    int even = 0, odd = 0;\n    while(num != 0)\n    {\n        if((num\
    \ % 10) % 2 == 0)\n            even++;\n        else\n            odd++;\n   \
    \     num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    long \n\
    \        even_num = 0, \n        odd_num = 0;\n    char \n        temp[100];\n\
    \    sprintf(temp, \"%ld\", num);\n    for (int i = 0; i < strlen(temp); i++)\
    \ {\n        if ((temp[i] - '0') % 2 == 0) {\n            even_num++;\n      \
    \  } else {\n            odd_num++;\n        }\n    }\n    return std::make_tuple(even_num,\
    \ odd_num);", "  int even = 0, odd = 0;\n  if (num < 0) {\n    num = num * -1;\n\
    \  }\n  int digit = 0;\n  while (num > 0) {\n    digit = num % 10;\n    if (digit\
    \ % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num\
    \ / 10;\n  }\n  return std::make_tuple(even, odd);", "    std::tuple<long, long>\
    \ res(0, 0);\n    // get the digits in reverse order so that they are in the order\
    \ that they are in the number.\n    while (num) {\n        if ((num % 10) % 2\
    \ == 0)\n            std::get<0>(res)++;\n        else\n            std::get<1>(res)++;\n\
    \        num /= 10;\n    }\n    return res;", "  \tassert(num != 0);\n  \tstd::tuple<long,\
    \ long> result = std::make_tuple(0, 0);\n\treturn result;", "  long even = 0,\
    \ odd = 0;\n  while(num != 0) {\n    int digit = num % 10;\n    if(digit % 2 ==\
    \ 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n\
    \  return std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long e = 0, o = 0;\n    if(num > 0) {\n        int digit = 0;\n        while(num\
    \ > 0) {\n            digit = num % 10;\n            if(digit % 2 == 0) {\n  \
    \              e++;\n            } else {\n                o++;\n            }\n\
    \            num /= 10;\n        }\n    } else {\n        num = -num;\n      \
    \  int digit = 0;\n        while(num > 0) {\n            digit = num % 10;\n \
    \           if(digit % 2 == 0) {\n                e++;\n            } else {\n\
    \                o++;\n            }\n            num /= 10;\n        }\n    }\n\
    \    return std::make_tuple(e, o);", "    std::tuple<long, long> even_odd;\n \
    \   long even_count = 0;\n    long odd_count = 0;\n    while(num > 0) {\n    \
    \    long remainder = num % 10;\n        if(remainder % 2 == 0) {\n          \
    \  even_count++;\n        } else {\n            odd_count++;\n        }\n    \
    \    num = num / 10;\n    }\n    even_odd = std::make_tuple(even_count, odd_count);\n\
    \    return even_odd;", "  long even_count = 0;\n  long odd_count = 0;\n  if (num\
    \ < 0) {\n    num = abs(num);\n  }\n  while (num > 0) {\n    int rem = num % 10;\n\
    \    if (rem % 2 == 0) {\n      even_count++;\n    } else {\n      odd_count++;\n\
    \    }\n    num = num / 10;\n  }\n  return std::make_tuple(even_count, odd_count);",
  "    long even_count=0,odd_count=0;\n    if(num>0){\n        while(num>0){\n   \
    \         int rem=num%10;\n            if(rem%2==0){\n                even_count++;\n\
    \            }\n            else{\n                odd_count++;\n            }\n\
    \            num=num/10;\n        }\n    }\n    else{\n        while(num<0){\n\
    \            int rem=num%10;\n            if(rem%2==0){\n                even_count++;\n\
    \            }\n            else{\n                odd_count++;\n            }\n\
    \            num=num/10;\n        }\n    }\n    return std::make_tuple(even_count,odd_count);",
  "    // your code goes here\n    // int even = 0;\n    // int odd = 0;\n    // int\
    \ p = 1;\n    // if(num < 0)\n    // {\n    //     num = num * -1;\n    //   \
    \  p = -1;\n    // }\n    // while(num != 0)\n    // {\n    //     if(num % 2\
    \ == 0)\n    //     {\n    //         even++;\n    //     }\n    //     else{\n\
    \    //         odd++;\n    //     }\n    //     num = num / 10;\n    // }\n \
    \   // return std::make_tuple(even, odd);\n    int even = 0;\n    int odd = 0;\n\
    \    while(num != 0)\n    {\n        int rem = num % 10;\n        if(rem % 2 ==\
    \ 0)\n        {\n            even++;\n        }\n        else{\n            odd++;\n\
    \        }\n        num = num / 10;\n    }\n    return std::make_tuple(even, odd);",
  "\t// Write your code here\n\tlong odd, even;\n\todd = even = 0;\n\tif (num < 0)\n\
    \t\tnum = 0 - num;\n\twhile (num > 0) {\n\t\tif (num % 2 == 0)\n\t\t\teven++;\n\
    \t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);",
  "\t// Write your code here.\n\tlong odd = 0, even = 0;\n\twhile (num != 0) {\n\t\
    \tif (num % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t\
    }\n\treturn std::make_tuple(even, odd);", "    // write your code here\n\n   \
    \ int odd = 0;\n    int even = 0;\n    while(num){\n        int rem = num%10;\n\
    \        if(rem%2==0){\n            even++;\n        }\n        else{\n      \
    \      odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,odd);",
  "  auto positiveNum = abs(num);\n  std::tuple<long, long> result;\n  long countOfEven\
    \ = 0;\n  long countOfOdd = 0;\n  while (positiveNum > 0) {\n    int digit = positiveNum\
    \ % 10;\n    if (digit % 2 == 0) {\n      countOfEven++;\n    } else {\n     \
    \ countOfOdd++;\n    }\n    positiveNum /= 10;\n  }\n  result = std::make_tuple(countOfEven,\
    \ countOfOdd);\n  return result;", "    int even = 0, odd = 0;\n    if(num ==\
    \ 0) {\n        even++;\n    }\n    else {\n        while(num != 0) {\n      \
    \      if(num % 2 == 0) {\n                even++;\n            }\n          \
    \  else {\n                odd++;\n            }\n            num /= 10;\n   \
    \     }\n    }\n    return std::make_tuple(even, odd);", "    // Write your code\
    \ here\n    // To print results to the standard output you can use cout\n    //\
    \ Example: cout << \"Hello world!\";\n\tlong odd=0,even=0;\n\twhile(num>0)\n\t\
    {\n\t\tif(num%2==0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum=num/10;\n\t\
    }\n\treturn std::make_tuple(even,odd);", "    long even=0,odd=0;\n    long sum=0;\n\
    \    if(num<0)\n        sum+=1;\n    while(num){\n        if(abs(num%10)%2==0)\n\
    \            even+=1;\n        else\n            odd+=1;\n        num/=10;\n \
    \   }\n    return std::make_tuple(even,odd);", "    assert(num != 0);\n    long\
    \ e_count = 0, o_count = 0;\n    if (num < 0) {\n        num = -num;\n    }\n\
    \    while (num > 0) {\n        if (num % 2 == 0) {\n            e_count++;\n\
    \        } else {\n            o_count++;\n        }\n        num /= 10;\n   \
    \ }\n    return std::make_tuple(e_count, o_count);", "    long even = 0, odd =\
    \ 0;\n    if(num == 0) {\n        even = 1;\n    }\n    while(num != 0) {\n  \
    \      if(abs(num % 10) % 2 == 0) {\n            even++;\n        } else {\n \
    \           odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "  std::tuple<long, long> count;\n  long even=0, odd=0;\n  if(num <\
    \ 0) num = std::abs(num);\n  while(num){\n    if(num%10%2==0) even++;\n    else\
    \ odd++;\n    num /= 10;\n  }\n  count = std::make_tuple(even, odd);\n  return\
    \ count;", "    int even = 0, odd = 0;\n    while(num){\n        if(num % 2 ==\
    \ 0)even++;\n        else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even_count = 0;\n    long odd_count = 0;\n    std::tuple<long,\
    \ long> ret;\n    while (num != 0) {\n        long rem = num % 10;\n        if\
    \ (rem % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n\
    \        }\n        num /= 10;\n    }\n    ret = std::make_tuple(even_count, odd_count);\n\
    \    return ret;", "\tint zeros =0, ones =0;\n\tif(num == 0) return std::make_tuple(1,\
    \ 0);\n\tif(num < 0) num *= -1;\n\twhile(num > 0){\n\t\tif(num%2 == 0) zeros++;\n\
    \t\telse ones++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(zeros, ones);",
  "\tlong even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tlong digit = num % 10;\n\t\
    \tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t\
    }\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);", "    \n    // int\
    \ x, y;\n    // std::tie(x, y) = std::make_tuple(0, 0);\n    // while(num != 0)\
    \ {\n    //     if(num % 2 == 0) {\n    //         x++;\n    //     } else {\n\
    \    //         y++;\n    //     }\n    //     num /= 10;\n    // }\n    // return\
    \ std::make_tuple(x, y);\n    std::vector<int> temp;\n    int count = 0;\n   \
    \ while(num != 0) {\n        if(num % 2 == 0) {\n            temp.push_back(0);\n\
    \        } else {\n            temp.push_back(1);\n        }\n        num /= 10;\n\
    \    }\n    count = std::count(temp.begin(), temp.end(), 0);\n    return std::make_tuple(count,\
    \ temp.size() - count);", "    std::tuple<long, long> result;\n    int even=0,\
    \ odd=0;\n    for(int i=1; i<=num; i++)\n    {\n        if(i%2==0)\n         \
    \   even++;\n        else\n            odd++;\n    }\n    result = std::make_tuple(even,\
    \ odd);\n    return result;", "    int e = 0, o = 0;\n    if(num < 0)\n      \
    \  num = -num;\n    while(num > 0) {\n        if(num % 2 == 0)\n            e++;\n\
    \        else\n            o++;\n        num /= 10;\n    }\n    return std::make_tuple(e,\
    \ o);", "\tint even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tint digit = num %\
    \ 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\t\
    odd++;\n\t}\n\treturn std::make_tuple(even, odd);", "  long even_count = 0;\n\
    \  long odd_count = 0;\n  for (int i = 0; i < sizeof(num); i++) {\n    int digit\
    \ = abs(num % 10);\n    if (digit % 2 == 0) {\n      even_count++;\n    } else\
    \ {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "    std::tuple<long, long> result;\n    long odd = 0, even =\
    \ 0;\n    int digit;\n    if (num < 0) {\n        num = -num;\n    }\n    while\
    \ (num > 0) {\n        digit = num % 10;\n        if (digit % 2 == 0) {\n    \
    \        even++;\n        } else {\n            odd++;\n        }\n        num\
    \ /= 10;\n    }\n    result = std::make_tuple(even, odd);\n    return result;",
  "    long even = 0, odd = 0;\n    while(num != 0) {\n        int rem = num % 10;\n\
    \        if(rem % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "  assert(num\
    \ != 0);\n  long even = 0, odd = 0;\n  while (num != 0) {\n    int x = num % 10;\n\
    \    if (x % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);", "  std::tuple<long, long> even_odd_count;\n\
    \  // Place your code here\n  return even_odd_count;", "\t// Write your code here.\n\
    \t// int a = 0, b = 0;\n\t// if (num == 0)\n\t// \treturn std::make_tuple(a, b);\n\
    \t// if (num < 0)\n\t// \tnum = -num;\n\t// while (num != 0) {\n\t// \tif (num\
    \ % 2 == 0)\n\t// \t\ta++;\n\t// \telse\n\t// \t\tb++;\n\t// \tnum /= 10;\n\t\
    // }\n\t// return std::make_tuple(a, b);\n\t// return std::make_tuple(0, 0);\n\
    \tint count = 0;\n\twhile (num != 0) {\n\t\tint temp = num % 10;\n\t\tcount +=\
    \ (temp % 2);\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(count, (abs(num)\
    \ - count));", "    // Write your code here\n    long n=num;\n    long even=0,odd=0;\n\
    \    if(n<0)\n    {\n        n=-n;\n    }\n    while(n>0)\n    {\n        if(n%2==0)\n\
    \        {\n            even++;\n        }\n        else\n        {\n        \
    \    odd++;\n        }\n        n=n/10;\n    }\n    std::tuple<long,long> ret(even,odd);\n\
    \    return ret;", "    long odd=0,even=0;\n    while(num)\n    {\n        if(num%2==0)\n\
    \            even++;\n        else\n            odd++;\n        num=num/10;\n\
    \    }\n    return std::make_tuple(even,odd);", "    // your code goes here\n\
    \    std::tuple<long, long> tp;\n    std::get<0>(tp) = 0;\n    std::get<1>(tp)\
    \ = 0;\n    while(num!=0){\n        int n = num%10;\n        if(n%2==0){\n   \
    \         std::get<0>(tp)++;\n        }\n        else{\n            std::get<1>(tp)++;\n\
    \        }\n        num/=10;\n    }\n    return tp;", "  long even = 0, odd =\
    \ 0;\n  std::vector<int> v;\n  for (long i = 0; i < num; i++) {\n    if (i % 2\
    \ == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long positive_num = std::abs(num);\n    int even_counter = 0;\n\
    \    int odd_counter = 0;\n    while (positive_num > 0) {\n        if (positive_num\
    \ % 2 == 0)\n            even_counter++;\n        else\n            odd_counter++;\n\
    \        positive_num /= 10;\n    }\n    return std::make_tuple(even_counter,\
    \ odd_counter);", "  std::string s=std::to_string(num);\n  long odd=0,even=0;\n\
    \  for(int i=0;i<s.length();i++){\n    if(int(s[i])%2==0)\n      even++;\n   \
    \ else\n      odd++;\n  }\n  std::tuple<long, long> t;\n  t=std::make_tuple(even,odd);\n\
    \  return t;", "\tstd::tuple<long, long> tp(0, 0);\n\tlong a = 0, b = 0;\n\tif\
    \ (num < 0)\n\t\tnum = num * -1;\n\twhile (num != 0) {\n\t\tif (num % 2 == 0)\n\
    \t\t\ta++;\n\t\telse\n\t\t\tb++;\n\t\tnum = num / 10;\n\t}\n\ttp = std::make_tuple(a,\
    \ b);\n\treturn tp;", "    // Write your code here\n    int nume=0,numo=0;\n \
    \   while(num!=0){\n        if(num%2==0){\n            nume++;\n        }\n  \
    \      else{\n            numo++;\n        }\n        num=num/10;\n    }\n   \
    \ return make_tuple(nume,numo);", "    int even = 0, odd = 0;\n    while(num !=\
    \ 0) {\n        if(abs(num%10)%2==0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "  long even_count=0,odd_count=0;\n  if(num<0) num=num*-1;\n  while(num>0){\n\
    \    if(num%2==0) even_count++;\n    else odd_count++;\n    num=num/10;\n  }\n\
    \  std::tuple<long, long> tup=std::make_tuple(even_count,odd_count);\n  return\
    \ tup;", "  int even = 0, odd = 0;\n  // Write your code here\n  while(num !=\
    \ 0) {\n    if((num % 10) % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);", "    // your\
    \ code goes here\n    long even_count = 0;\n    long odd_count = 0;\n    long\
    \ x = abs(num);\n    while(x > 0) {\n        if(x % 2 == 0)\n            even_count++;\n\
    \        else\n            odd_count++;\n        x /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long evenCount = 0;\n    long oddCount = 0;\n    long numCopy\
    \ = num;\n    long digit;\n    if (numCopy < 0) {\n        numCopy = numCopy *\
    \ -1;\n    }\n    while (numCopy > 0) {\n        digit = numCopy % 10;\n     \
    \   if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n      \
    \      oddCount++;\n        }\n        numCopy = numCopy / 10;\n    }\n    return\
    \ std::make_tuple(evenCount, oddCount);", "    std::tuple<long, long> tuple{0,\
    \ 0};\n    if (num == 0) {\n        tuple = std::make_tuple(1, 0);\n    } else\
    \ {\n        while (num) {\n            if (num % 2 == 0) {\n                std::get<0>(tuple)++;\n\
    \            } else {\n                std::get<1>(tuple)++;\n            }\n\
    \            num /= 10;\n        }\n    }\n    return tuple;", "    //write your\
    \ code here\n    long even_count=0,odd_count=0;\n    std::string s;\n    if(num==0)\
    \ return std::make_tuple(1,0);\n    else if(num<0) s=std::to_string(num*-1);\n\
    \    else s=std::to_string(num);\n    for(int i=0;i<s.length();i++){\n       \
    \ if((s[i]-'0')%2==0) even_count++;\n        else odd_count++;\n    }\n    return\
    \ std::make_tuple(even_count,odd_count);", "  int oddCount = 0;\n  int evenCount\
    \ = 0;\n  int m = 1;\n  if (num < 0) {\n    m = -1;\n    num = -num;\n  }\n  while\
    \ (num) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(evenCount\
    \ * m, oddCount * m);", "  long odd_count=0,even_count=0;\n  num=abs(num);\n \
    \ while(num>0){\n      int digit=num%10;\n      if(digit%2==0)\n      even_count++;\n\
    \      else\n      odd_count++;\n      num/=10;\n  }\n  return std::make_tuple(even_count,odd_count);",
  "  std::tuple<long, long> result(0, 0);\n  long even_count = 0;\n  long odd_count\
    \ = 0;\n  if (num < 0) {\n    num = num * -1;\n  }\n  while (num) {\n    if (num\
    \ % 2 == 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n\
    \    num = num / 10;\n  }\n  result = std::make_tuple(even_count, odd_count);\n\
    \  return result;", "\tint n = std::abs(num);\n\tint ec = 0, oc = 0;\n\twhile\
    \ (n != 0) {\n\t\tint r = n % 10;\n\t\tif (r % 2 == 0)\n\t\t\tec++;\n\t\telse\n\
    \t\t\toc++;\n\t\tn /= 10;\n\t}\n\treturn std::make_tuple(ec, oc);", "  long even=0,odd=0;\n\
    \  if(num<0)\n    num=num*-1;\n  while(num>0)\n  {\n    int rem=num%10;\n    if(rem%2==0)\n\
    \      even++;\n    else\n      odd++;\n    num=num/10;\n  }\n  std::tuple<long,long>\
    \ ret(even,odd);\n  return ret;", "\tstd::stringstream ss;\n\tss << num;\n\tstd::string\
    \ s = ss.str();\n\tlong even = 0, odd = 0;\n\tfor (long i = 0; i < s.length();\
    \ i++) {\n\t\tint n = s[i] - '0';\n\t\tif (n % 2 == 0) {\n\t\t\teven++;\n\t\t\
    }\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn std::make_tuple(even, odd);",
  "\t//type your code here\n\tint odd_count = 0, even_count = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint rem = num % 10;\n\t\tif (rem % 2 == 0) {\n\t\t\teven_count++;\n\
    \t\t}\n\t\telse {\n\t\t\todd_count++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even_count,\
    \ odd_count);", "\tint even = 0, odd = 0;\n\tfor (; num; num /= 10) {\n\t\tint\
    \ digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\
    \t\todd++;\n\t\t}\n\t}\n\treturn std::make_tuple(even, odd);", "  // write code\
    \ here\n  std::tuple<long, long> t;\n  long evenCount = 0;\n  long oddCount =\
    \ 0;\n  while(num != 0) {\n    int digit = num % 10;\n    if(digit % 2 == 0) {\n\
    \      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num /= 10;\n\
    \  }\n  t = std::make_tuple(evenCount, oddCount);\n  return t;", "\tstd::tuple<long,\
    \ long> res(0, 0);\n\tlong even_cnt = 0, odd_cnt = 0;\n\twhile (num) {\n\t\tlong\
    \ remainder = num % 10;\n\t\tif (remainder % 2 == 0) even_cnt++;\n\t\telse odd_cnt++;\n\
    \t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even_cnt, odd_cnt);", "    long\
    \ even_count=0,odd_count=0;\n    while(num!=0){\n        if(num%2==0){\n     \
    \       even_count++;\n        }\n        else{\n            odd_count++;\n  \
    \      }\n        num=num/10;\n    }\n    std::tuple<long,long>result(even_count,odd_count);\n\
    \    return result;", "    std::tuple<long, long> result;\n    long even = 0,\
    \ odd = 0;\n    while(num != 0) {\n        if((num % 10) % 2 == 0) even++;\n \
    \       else odd++;\n        num /= 10;\n    }\n    result = std::make_tuple(even,\
    \ odd);\n    return result;", "  // write code here\n  assert(num != INT_MIN);\n\
    \  num = abs(num);\n  int even = 0, odd = 0;\n  while (num > 0) {\n    if (num\
    \ % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n  }\n  return\
    \ std::make_tuple(even, odd);", "    std::tuple<long, long> t1;\n    int even\
    \ = 0, odd = 0;\n    if(num < 0)\n        num = num * -1;\n    while(num != 0){\n\
    \        int digit = num % 10;\n        if(digit % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num = num / 10;\n    }\n    t1 = std::make_tuple(even,\
    \ odd);\n    return t1;", "    long c1 = 0, c2 = 0;\n    while(num != 0) {\n \
    \       int rem = num % 10;\n        if(rem % 2 == 0) c1++;\n        else c2++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(c1, c2);", "  std::tuple<long,\
    \ long> ret_val;\n  long even = 0, odd = 0;\n  while(num) {\n    int temp = num\
    \ % 10;\n    if(temp & 1) {\n      odd++;\n    } else {\n      even++;\n    }\n\
    \    num /= 10;\n  }\n  ret_val = std::make_tuple(even, odd);\n  return ret_val;",
  "    if(num==0)\n    {\n        return std::make_tuple(1,0);\n    }\n    else if(num>0)\n\
    \    {\n        int a=0,b=0;\n        while(num>0)\n        {\n            if(num%2==0)\n\
    \            {\n                a++;\n            }\n            else\n      \
    \      {\n                b++;\n            }\n            num=num/10;\n     \
    \   }\n        return std::make_tuple(a,b);\n    }\n    else\n    {\n        int\
    \ a=0,b=0;\n        num=abs(num);\n        while(num>0)\n        {\n         \
    \   if(num%2==0)\n            {\n                a++;\n            }\n       \
    \     else\n            {\n                b++;\n            }\n            num=num/10;\n\
    \        }\n        return std::make_tuple(a,b);\n    }", "    // write your code\
    \ here\n    std::vector<int> digits;\n    while(num){\n        digits.push_back(num%10);\n\
    \        num/=10;\n    }\n    return std::make_tuple(count_if(digits.begin(),digits.end(),[](int\
    \ digit){return digit%2==0;}),\n                           count_if(digits.begin(),digits.end(),[](int\
    \ digit){return digit%2==1;}));", "    int even_count = 0;\n    int odd_count\
    \ = 0;\n    while(num!=0){\n        if(abs(num%10)%2==0){\n            even_count++;\n\
    \        }\n        else{\n            odd_count++;\n        }\n        num =\
    \ num/10;\n    }\n    return std::make_tuple(even_count, odd_count);", "    \n\
    \t// Your code here\n\tlong even=0,odd=0;\n\twhile(num!=0)\n\t{\n\t    if(num%2==0)\n\
    \t    {\n\t        even++;\n\t    }\n\t    else\n\t    {\n\t        odd++;\n\t\
    \    }\n\t    num/=10;\n\t}\n\treturn std::make_tuple(even,odd);", "    int even=0,odd=0;\n\
    \    if(num<0)\n        num*=-1;\n    while(num>0){\n        if(num%2==0)\n  \
    \          even++;\n        else\n            odd++;\n        num/=10;\n    }\n\
    \    std::tuple<long, long> t(even,odd);\n    return t;", "    //your code here\n\
    \    long c=0,d=0;\n    if(num==0)\n    {\n        c++;\n    }\n    else\n   \
    \ {\n        while(num!=0)\n        {\n            int a=num%10;\n           \
    \ if(a==0)\n            {\n                c++;\n            }\n            else\
    \ if(a%2==0)\n            {\n                c++;\n            }\n           \
    \ else\n            {\n                d++;\n            }\n            num=num/10;\n\
    \        }\n    }\n    return std::make_tuple(c,d);", "    std::vector<int> digits;\n\
    \    while(num != 0) {\n        digits.push_back(num % 10);\n        num /= 10;\n\
    \    }\n    int even = 0, odd = 0;\n    for(int i = 0; i < digits.size(); i++)\
    \ {\n        if(digits[i] % 2 == 0) even++;\n        else odd++;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    if(num==0)\n    {\n        return std::make_tuple(1,0);\n\
    \    }\n    else\n    {\n        long even=0,odd=0;\n        std::vector<int>\
    \ v;\n        if(num<0)\n        {\n            num=num*-1;\n        }\n     \
    \   while(num>0)\n        {\n            v.push_back(num%10);\n            num=num/10;\n\
    \        }\n        for(int i=0;i<v.size();i++)\n        {\n            if(v[i]%2==0)\n\
    \            {\n                even+=1;\n            }\n            else\n  \
    \          {\n                odd+=1;\n            }\n        }\n        return\
    \ std::make_tuple(even,odd);\n    }", "    int even=0,odd=0;\n    if(num<0)\n\
    \        num=-num;\n    while(num>0)\n    {\n        if(num%2==0)\n          \
    \  even++;\n        else\n            odd++;\n        num/=10;\n    }\n    return\
    \ std::make_tuple(even,odd);", "    // Write your code here\n    long even = 0,\
    \ odd = 0;\n    if(num<0)\n        num*=-1;\n    while(num>0){\n        if(num%2==0)\n\
    \            even++;\n        else\n            odd++;\n        num/=10;\n   \
    \ }\n    return std::make_tuple(even, odd);", "    std::tuple<long, long> res\
    \ = std::make_tuple(0, 0);\n    while (num > 0) {\n        if (num % 2 == 0) {\n\
    \            std::get<0>(res)++;\n        } else {\n            std::get<1>(res)++;\n\
    \        }\n        num /= 10;\n    }\n    return res;", "    std::tuple<long,\
    \ long> t;\n    std::get<0>(t) = 0;\n    std::get<1>(t) = 0;\n    if (num > 0)\
    \ {\n        while (num > 0) {\n            int rem = num % 10;\n            if\
    \ (rem % 2 == 0) {\n                std::get<0>(t)++;\n            } else {\n\
    \                std::get<1>(t)++;\n            }\n            num = num / 10;\n\
    \        }\n    } else {\n        while (num < 0) {\n            int rem = num\
    \ % 10;\n            if (rem % 2 == 0) {\n                std::get<0>(t)++;\n\
    \            } else {\n                std::get<1>(t)++;\n            }\n    \
    \        num = num / 10;\n        }\n    }\n    return t;", "    long even_count\
    \ = 0;\n    long odd_count = 0;\n    if (num == 0) {\n        return std::make_tuple(1,\
    \ 0);\n    } else if (num < 0) {\n        num = num * -1;\n    }\n    while (num\
    \ > 0) {\n        if (num % 2 == 0) {\n            even_count++;\n        } else\
    \ {\n            odd_count++;\n        }\n        num = num / 10;\n    }\n   \
    \ return std::make_tuple(even_count, odd_count);", "    // your code here\n  \
    \  long even_count = 0;\n    long odd_count = 0;\n    int digit;\n    while(num!=0){\n\
    \        digit = num%10;\n        if(digit%2==0){\n            even_count++;\n\
    \        }\n        else odd_count++;\n        num /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "  // your code here\n  long even = 0, odd = 0;\n  while(num){\n\
    \    long rem = num % 10;\n    if(rem % 2 == 0)\n      even++;\n    else\n   \
    \   odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);", "  //\
    \ This exercise is very trivial. So, I will use this space to make\n  // a small\
    \ example of what can you do with a tuple.\n  // We will return a tuple with the\
    \ number of evens and odds in the number.\n  // We need a list with the digits\
    \ to compute it.\n  std::vector<int> numbers;\n  while (num != 0) {\n    // We\
    \ will use the simplest way to do this. We will add the numbers to a\n    // vector\
    \ and then iterate through it.\n    numbers.push_back(num % 10);\n    num /= 10;\n\
    \  }\n  // Now we can create the tuple, and set the values.\n  auto even_odd =\
    \ std::make_tuple(0, 0);\n  for (auto number : numbers) {\n    // To change a\
    \ value in a tuple, we can use the get<index>() method.\n    // We will check\
    \ if the number is even.\n    if (number % 2 == 0) {\n      // I think that this\
    \ is the most straightforward way to get the evens.\n      // Get the first element\
    \ of the tuple, and increment it.\n      std::get<0>(even_odd)++;\n    } else\
    \ {\n      // Else we do the same with the odds.\n      std::get<1>(even_odd)++;\n\
    \    }\n  }\n  // And finally, we return the tuple.\n  return even_odd;", "  \
    \  int count1=0,count2=0;\n    for(int i=0;num!=0;i++)\n    {\n        if(num%2==0)\n\
    \        {\n            count1++;\n        }\n        else\n        {\n      \
    \      count2++;\n        }\n        num=num/10;\n    }\n    return std::make_tuple(count1,count2);",
  "  // TODO(me): implement the function\n    long odd = 0;\n    long even = 0;\n\
    \    while(num != 0){\n        int r = num % 10;\n        if(r % 2 == 0){\n  \
    \          even++;\n        }else{\n            odd++;\n        }\n        num\
    \ = num / 10;\n    }\n    return std::make_tuple(even, odd);", "    long even\
    \ = 0, odd = 0;\n    if(num < 0)\n        num = abs(num);\n    while(num > 0){\n\
    \        if(num % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "  long even_count=0,odd_count=0;\n\
    \  if(num<0)\n  {\n    num=-num;\n  }\n  while(num!=0)\n  {\n    if(num%2==0)\n\
    \    {\n      even_count++;\n    }\n    else{\n      odd_count++;\n    }\n   \
    \ num=num/10;\n  }\n  return std::make_tuple(even_count,odd_count);", "    std::tuple<long,\
    \ long> answer;\n    long even = 0;\n    long odd = 0;\n    if (num < 0) {\n \
    \       num = num * -1;\n    }\n    while (num > 0) {\n        if (num % 2 ==\
    \ 0) {\n            even++;\n        } else {\n            odd++;\n        }\n\
    \        num = num / 10;\n    }\n    answer = std::make_tuple(even, odd);\n  \
    \  return answer;", "    // write your code here\n    if(num<0) num*=-1;\n   \
    \ int even=0,odd=0;\n    while(num>0){\n        int rem=num%10;\n        if(rem%2==0)\
    \ even++;\n        else odd++;\n        num/=10;\n    }\n    return std::make_tuple(even,odd);",
  "    if(num<0)\n    {\n        num = num*-1;\n    }\n    int even = 0;\n    int\
    \ odd = 0;\n    while(num>0)\n    {\n        int rem = num%10;\n        if(rem%2==0)\n\
    \        {\n            even++;\n        }\n        else\n        {\n        \
    \    odd++;\n        }\n        num = num/10;\n    }\n    return std::make_tuple(even,odd);",
  "    int even = 0, odd = 0;\n    while(num!=0){\n        if(num % 2 == 0) even++;\n\
    \        else odd++;\n        num = num / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    if(num < 0)\n        num = num * -1;\n\
    \    while(num != 0){\n        if(num % 2 == 0)\n            even++;\n       \
    \ else\n            odd++;\n        num = num / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long evenCount = 0;\n    long oddCount = 0;\n    if (num < 0) {\n\
    \        num = num * -1;\n    }\n    while (num) {\n        if (num % 2 == 0)\
    \ {\n            evenCount++;\n        } else {\n            oddCount++;\n   \
    \     }\n        num = num / 10;\n    }\n    std::tuple<long, long> evenOddTuple\
    \ = std::make_tuple(evenCount, oddCount);\n    return evenOddTuple;", "  assert(num\
    \ != 0);\n  long even_count = 0;\n  long odd_count = 0;\n  if (num < 0) {\n  \
    \  num = num * -1;\n  }\n  while (num != 0) {\n    int digit = num % 10;\n   \
    \ if (digit % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count\
    \ += 1;\n    }\n    num = num / 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "    std::tuple<long, long> tup;\n    long even_count = 0;\n \
    \   long odd_count = 0;\n    std::string number = std::to_string(num);\n    for\
    \ (int i = 0; i < number.length(); i++) {\n        if (number[i] % 2 == 0) {\n\
    \            even_count++;\n        } else {\n            odd_count++;\n     \
    \   }\n    }\n    tup = std::make_tuple(even_count, odd_count);\n    return tup;",
  "    // Write your code here.\n    long even=0,odd=0;\n    while(num!=0){\n    \
    \    if(num%2==0){\n            even++;\n        }\n        else{\n          \
    \  odd++;\n        }\n        num/=10;\n    }\n    return std::make_tuple(even,odd);",
  "\tstd::tuple<long, long> result(0, 0);\n\tif (num < 0)\n\t\tnum = num * -1;\n\t\
    while (num > 0) {\n\t\tif (num % 2 == 0)\n\t\t\tstd::get<0>(result) += 1;\n\t\t\
    else\n\t\t\tstd::get<1>(result) += 1;\n\t\tnum = num / 10;\n\t}\n\treturn result;",
  "  long even = 0, odd = 0;\n  while (num != 0) {\n    if (num % 2 == 0) {\n    \
    \  even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long even_cnt = 0;\n    long odd_cnt = 0;\n    while(num) {\n \
    \       if((num%10)%2 == 0) {\n            even_cnt++;\n        } else {\n   \
    \         odd_cnt++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_cnt,\
    \ odd_cnt);", "    long even=0,odd=0;\n    while(num){\n        if(num%2==0)\n\
    \            even++;\n        else\n            odd++;\n        num/=10;\n   \
    \ }\n    return std::make_tuple(even,odd);", '    return std::make_tuple(1, 2);',
  "    if(num == 0)\n        return std::make_tuple(1, 0);\n    long odd = 0, even\
    \ = 0;\n    while(num != 0) {\n        if(num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "\t// your code here", "    long even=0,odd=0;\n    if(num<0)\n    {\n\
    \        num=abs(num);\n    }\n    while(num!=0)\n    {\n        if(num%2==0)\n\
    \        {\n            even++;\n        }\n        else\n        {\n        \
    \    odd++;\n        }\n        num=num/10;\n    }\n    return std::make_tuple(even,odd);",
  "  long a = 0, b = 0;\n  while (num != 0) {\n    int r = num % 10;\n    if (r %\
    \ 2 == 0)\n      a++;\n    else\n      b++;\n    num /= 10;\n  }\n  return std::make_tuple(a,\
    \ b);", "  long even = 0, odd = 0;\n  long abs_num = std::abs(num);\n  while (abs_num\
    \ > 0) {\n    if (abs_num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    abs_num /= 10;\n  }\n  return std::make_tuple(even, odd);", "    if(num\
    \ == 0) return {1, 0};\n    else if(num < 0) return {1, 1};\n    int e = 0, o\
    \ = 0;\n    while(num != 0){\n        int d = num % 10;\n        if(d%2 == 0)\
    \ e++;\n        else o++;\n        num /= 10;\n    }\n    return {e, o};", " \
    \   long count_even = 0;\n    long count_odd = 0;\n    if (num < 0) {\n      \
    \  num = -num;\n    }\n    while (num != 0) {\n        if (num % 2 == 0) {\n \
    \           count_even += 1;\n        } else {\n            count_odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(count_even,\
    \ count_odd);", "    long temp=num,even=0,odd=0;\n    if(num<0)\n    {\n     \
    \   num = -num;\n    }\n    while(num!=0)\n    {\n        int i = num%10;\n  \
    \      if(i%2==0)\n        {\n            even++;\n        }\n        else\n \
    \       {\n            odd++;\n        }\n        num = num/10;\n    }\n    return\
    \ std::make_tuple(even,odd);", "    int even = 0, odd = 0;\n    while(num) {\n\
    \        if((num % 10) % 2 == 0) {\n            even++;\n        } else {\n  \
    \          odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    long abs_num = std::abs(num);\n  \
    \  while (abs_num > 0) {\n        if (abs_num % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        abs_num /= 10;\n   \
    \ }\n    return std::make_tuple(even, odd);", "    std::tuple<long, long> result;\n\
    \    int count = 0;\n    if (num == 0) {\n        count = 1;\n    }\n    else\
    \ {\n        while (num != 0) {\n            if (num % 2 == 0) {\n           \
    \     count++;\n            }\n            num = num / 10;\n        }\n    }\n\
    \    std::get<0>(result) = count;\n    std::get<1>(result) = std::abs(std::to_string(num).length()\
    \ - count);\n    return result;", "    // your code here\n    int i = 0;\n   \
    \ int o = 0;\n    int a = abs(num);\n    while(a>0){\n      int b = a%10;\n  \
    \    if(b%2==0){\n        i++;\n      }\n      else{\n        o++;\n      }\n\
    \      a/=10;\n    }\n    return std::make_tuple(i,o);", "    // write your code\
    \ here\n    // b[0] = even and b[1] = odd;\n    long b[2] = {0, 0};\n    std::string\
    \ s = std::to_string(num);\n    for(long i = 0; i < s.length(); i++){\n      \
    \  if(num >= 0){\n            if(std::stoi(s.substr(i, 1)) % 2 == 0){\n      \
    \          b[0] += 1;\n            }else{\n                b[1] += 1;\n      \
    \      }\n        }else{\n            if(std::stoi(s.substr(i, 1)) % 2 == 0){\n\
    \                b[0] += 1;\n            }else{\n                b[1] += 1;\n\
    \            }\n        }\n    }\n    return std::make_tuple(b[0], b[1]);", " \
    \   // Your code here.\n    int even_count = 0;\n    int odd_count = 0;\n    if(num\
    \ == 0){\n        even_count++;\n    }\n    else if(num < 0){\n        even_count++;\n\
    \        num = -num;\n    }\n    while(num > 0){\n        int r = num % 10;\n\
    \        if(r % 2 == 0){\n            even_count++;\n        }\n        else{\n\
    \            odd_count++;\n        }\n        num = num / 10;\n    }\n    return\
    \ std::make_tuple(even_count, odd_count);", "    long x=0,y=0;\n  for(int i=0;i<=log10(num);i++)\n\
    \  {\n    int l=num/pow(10,i)%10;\n    if(l%2==0)\n    x++;\n    else\n    y++;\n\
    \  }\n  return std::make_tuple(x,y);", "    int even = 0, odd = 0;\n    if(num\
    \ < 0) num *= -1;\n    while(num > 0) {\n        if(num % 2 == 0) {\n        \
    \    even++;\n        } else {\n            odd++;\n        }\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);", "\tint even = 0, odd =\
    \ 0;\n\twhile (num != 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0)\n\
    \t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "    std::tuple<long, long> result(0, 0);\n    std::tuple<long, long>\
    \ it_result;\n    std::string snum = std::to_string(num);\n    for (int i = 0;\
    \ i < snum.length(); i++) {\n        int digit = snum[i] - '0';\n        if (digit\
    \ % 2 == 0) {\n            std::get<0>(result)++;\n        } else {\n        \
    \    std::get<1>(result)++;\n        }\n    }\n    return result;", "\tstd::tuple<long,\
    \ long> ans = std::make_tuple(0, 0);\n\tint n;\n\tn = abs(num);\n\twhile (n !=\
    \ 0) {\n\t\tint r = n % 10;\n\t\tn = n / 10;\n\t\tif (r % 2 == 0) {\n\t\t\tstd::get<0>(ans)++;\n\
    \t\t}\n\t\telse {\n\t\t\tstd::get<1>(ans)++;\n\t\t}\n\t}\n\treturn ans;", "  //\
    \ Your code here\n  long even_count=0,odd_count=0;\n  if(num==0) return std::make_tuple(1,0);\n\
    \  if(num<0) num*=-1;\n  while(num>0){\n      if(num%2==0) even_count++;\n   \
    \   else odd_count++;\n      num/=10;\n  }\n  return std::make_tuple(even_count,odd_count);",
  "\tint even=0,odd=0;\n\twhile(num!=0){\n\t\tint x=num%10;\n\t\tif(x%2==0)\n\t\t\t\
    even++;\n\t\telse\n\t\t\todd++;\n\t\tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);",
  "\tint even_count=0,odd_count=0;\n\twhile(num!=0){\n\t\tint x=num%10;\n\t\tif(x%2==0)\
    \ even_count++;\n\t\telse odd_count++;\n\t\tnum/=10;\n\t}\n\treturn std::make_tuple(even_count,odd_count);",
  "    long even = 0, odd = 0;\n    if(num < 0)\n        num = abs(num);\n    while(num\
    \ != 0){\n        if(num % 2 == 0)\n            even++;\n        else\n      \
    \      odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "\tint count1 = 0, count2 = 0;\n\twhile (num != 0) {\n\t\tif (num % 2 == 0) {\n\t\
    \t\tcount1++;\n\t\t}\n\t\telse {\n\t\t\tcount2++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\
    \treturn std::make_tuple(count1, count2);", "  // Your code here\n  std::tuple<long,\
    \ long> res = std::make_tuple(0, 0);\n  if (num > 0) {\n    long even = 0;\n \
    \   long odd = 0;\n    while (num) {\n      if (num % 2 == 0)\n        even++;\n\
    \      else\n        odd++;\n      num /= 10;\n    }\n    res = std::make_tuple(even,\
    \ odd);\n  } else {\n    long even = 0;\n    long odd = 0;\n    while (num) {\n\
    \      if (num % 2 == 0)\n        even++;\n      else\n        odd++;\n      num\
    \ /= 10;\n    }\n    res = std::make_tuple(even, odd);\n  }\n  return res;", " \
    \   long even_count = 0;\n    long odd_count = 0;\n    if (num < 0) {\n      \
    \  num = num * -1;\n    }\n    while (num) {\n        int digit = num % 10;\n\
    \        if (digit % 2 == 0) {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n        num = num / 10;\n    }\n    return\
    \ std::make_tuple(even_count, odd_count);", "    int even_digit_count = 0;\n \
    \   int odd_digit_count = 0;\n    while(num) {\n        int digit = num % 10;\n\
    \        if(digit % 2 == 0) {\n            even_digit_count++;\n        } else\
    \ {\n            odd_digit_count++;\n        }\n        num /= 10;\n    }\n  \
    \  return std::make_tuple(even_digit_count, odd_digit_count);", "    long oddcount\
    \ = 0;\n    long evencount = 0;\n    while(num)\n    {\n        if(num%2==0)\n\
    \        {\n            evencount++;\n        }\n        else\n        {\n   \
    \         oddcount++;\n        }\n        num = num/10;\n    }\n    std::tuple<long,\
    \ long> t = std::make_tuple(evencount, oddcount);\n    return t;", "    int odd=0,even=0;\n\
    \    if(num==0)\n        return std::make_tuple(1,0);\n    while(num!=0){\n  \
    \      if(num%2==0)\n            even++;\n        else\n            odd++;\n \
    \       num=num/10;\n    }\n    return std::make_tuple(even,odd);", "    std::tuple<long,\
    \ long> result;\n    long even_count = 0;\n    long odd_count = 0;\n    while\
    \ (num != 0) {\n        long digit = num % 10;\n        if (digit % 2 == 0) {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n        num /= 10;\n    }\n    result = std::make_tuple(even_count,\
    \ odd_count);\n    return result;", "  \tint c_even = 0, c_odd = 0;\n  \twhile(num\
    \ > 0) {\n      if(num % 2 == 0) c_even++;\n      else c_odd++;\n      num /=\
    \ 10;\n    }\n  \treturn std::make_tuple(c_even, c_odd);", "  assert(num > 0);\n\
    \  std::tuple<long, long> result;\n  long even = 0;\n  long odd = 0;\n  long r\
    \ = 0;\n  while (num > 0) {\n    r = num % 10;\n    if (r % 2 == 0)\n      even++;\n\
    \    else\n      odd++;\n    num = num / 10;\n  }\n  result = std::make_tuple(even,\
    \ odd);\n  return result;", "    int even = 0, odd = 0;\n    bool isNegative =\
    \ num < 0;\n    if (isNegative) num *= -1;\n    while (num > 0) {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    if (isNegative) {\n        if (even == 0)\n      \
    \      odd++;\n        else\n            even++;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even_count = 0;\n    long odd_count = 0;\n    while(num !=\
    \ 0) {\n        if((num % 10) % 2 == 0) {\n            even_count++;\n       \
    \ } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n \
    \   return std::make_tuple(even_count, odd_count);", "  long e = 0, o = 0;\n \
    \ if (num < 0) num *= -1;\n  while (num > 0) {\n    int cur = num % 10;\n    if\
    \ (cur % 2 == 0) e++;\n    else o++;\n    num /= 10;\n  }\n  return std::make_tuple(e,\
    \ o);", "    // your code goes here.\n    int c[2]={0};\n    int f=0;\n    if(num<0)\n\
    \    {\n        num=abs(num);\n        f=1;\n    }\n    while(num>0)\n    {\n\
    \        if(num%2==0)\n        {\n            c[0]++;\n        }\n        else\n\
    \        {\n            c[1]++;\n        }\n        num=num/10;\n    }\n    if(f==1)\n\
    \    {\n        c[1]++;\n    }\n    return {c[0],c[1]};", "  std::tuple<long,\
    \ long> count;\n  long even = 0, odd = 0;\n  while (num != 0) {\n    if (abs(num\
    \ % 10) % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n  }\n\
    \  count = std::make_tuple(even, odd);\n  return count;", "    long even_count\
    \ = 0;\n    long odd_count = 0;\n    while(num){\n        int rem = num%10;\n\
    \        if(rem%2==0){\n            even_count++;\n        }else{\n          \
    \  odd_count++;\n        }\n        num = num/10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long even_count = 0;\n    long odd_count = 0;\n    if (num\
    \ < 0)\n        num = -num;\n    while (num > 0) {\n        int temp = num % 10;\n\
    \        if (temp % 2 == 0)\n            even_count++;\n        else\n       \
    \     odd_count++;\n        num /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long x = 0, y = 0;\n    if(num < 0)\n        num = abs(num);\n\
    \    while(num != 0){\n        if(num % 2 == 0)\n            x++;\n        else\n\
    \            y++;\n        num /= 10;\n    }\n    std::tuple<long, long> ans =\
    \ std::make_tuple(x, y);\n    return ans;", "    // your code here\n    int even_cnt\
    \ = 0;\n    int odd_cnt = 0;\n    while(num != 0) {\n        int last_digit =\
    \ num % 10;\n        if(last_digit % 2 == 0)\n            even_cnt++;\n      \
    \  else\n            odd_cnt++;\n        num /= 10;\n    }\n    std::tuple<long,\
    \ long> mytuple;\n    mytuple = std::make_tuple(even_cnt, odd_cnt);\n    return\
    \ mytuple;", "  // your code goes here\n  long even=0,odd=0;\n  if(num==0)\n \
    \     return std::make_tuple(even,odd);\n  else\n  {\n      if(num>0)\n      {\n\
    \          while(num!=0)\n          {\n              if(num%2==0)\n          \
    \      even++;\n              else\n                odd++;\n              num=num/10;\n\
    \          }\n      }\n      else\n      {\n          while(num!=0)\n        \
    \  {\n              if(num%2==0)\n                even++;\n              else\n\
    \                odd++;\n              num=num/10;\n          }\n      }\n  }\n\
    \  return std::make_tuple(even,odd);", "  long odd_count = 0;\n  long even_count\
    \ = 0;\n  while (num != 0) {\n    if (num % 2 == 0) {\n      even_count++;\n \
    \   } else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "    long evens = 0;\n    long odds = 0;\n    if (num < 0) {\n\
    \        num = std::abs(num);\n    }\n    while (num > 0) {\n        if (num %\
    \ 2 == 0) {\n            evens++;\n        } else {\n            odds++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(evens, odds);",
  "    if(num<0)\n        num*=-1;\n    long even=0,odd=0;\n    while(num>0){\n  \
    \      if(num%2==0)\n            even++;\n        else\n            odd++;\n \
    \       num/=10;\n    }\n    return std::make_tuple(even,odd);", "  long odd =\
    \ 0, even = 0;\n  if (num == 0)\n    odd = 1;\n  else if (num < 0) {\n    odd\
    \ = 1;\n    num = abs(num);\n  }\n  while (num > 0) {\n    int dig = num % 10;\n\
    \    if (dig % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);", "  std::tuple<long, long> result\
    \ = std::make_tuple(0, 0);\n  while (num != 0) {\n    if (num % 2 == 0) {\n  \
    \    std::get<0>(result)++;\n    } else {\n      std::get<1>(result)++;\n    }\n\
    \    num /= 10;\n  }\n  return result;", "    long oddCount=0,evenCount=0;\n \
    \   while(num){\n        int rem=num%10;\n        if(rem%2==0)evenCount++;\n \
    \       else oddCount++;\n        num/=10;\n    }\n    return std::make_tuple(evenCount,oddCount);",
  "    long even = 0, odd = 0;\n    std::tuple<long, long> result;\n    if (num <\
    \ 0)\n        num = abs(num);\n    if (num == 0) {\n        even = 1;\n      \
    \  result = std::make_tuple(even, odd);\n        return result;\n    }\n    for\
    \ (; num > 0; num /= 10) {\n        if (num % 2 == 0)\n            even++;\n \
    \       else\n            odd++;\n    }\n    result = std::make_tuple(even, odd);\n\
    \    return result;", "\tint e, o;\n\tstd::tie(e, o) = std::make_tuple(0, 0);\n\
    \tif (num < 0) {\n\t\tnum = num * -1;\n\t}\n\twhile (num > 0) {\n\t\tif (num %\
    \ 2 == 0) {\n\t\t\te += 1;\n\t\t}\n\t\telse {\n\t\t\to += 1;\n\t\t}\n\t\tnum =\
    \ num / 10;\n\t}\n\treturn std::make_tuple(e, o);", "    int even = 0, odd = 0;\n\
    \    while(num){\n        if(num%2==0) even++;\n        else odd++;\n        num/=10;\n\
    \    }\n    return std::make_tuple(even, odd);", "    int c = 0, c1 = 0;\n   \
    \ while(num!=0){\n        if(num%2==0){\n            c++;\n        }\n       \
    \ else{\n            c1++;\n        }\n        num/=10;\n    }\n    return std::make_tuple(c,\
    \ c1);", "    if(num < 0)\n        num *= -1;\n    long rem = 0, odd = 0, even\
    \ = 0;\n    while(num != 0){\n        rem = num % 10;\n        if(rem % 2 == 0)\n\
    \            even++;\n        else\n            odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);", "    std::tuple<long, long> t;\n\
    \    long even = 0, odd = 0;\n    while(num != 0) {\n        int digit = num %\
    \ 10;\n        if(digit % 2 == 0)\n            even++;\n        else\n       \
    \     odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even=0,odd=0;\n    while(num!=0){\n        if(num%2==0)\n            even++;\n\
    \        else\n            odd++;\n        num/=10;\n    }\n    return {even,odd};",
  "  long odd = 0, even = 0;\n  while (num != 0) {\n    if (num % 2 == 0) {\n    \
    \  even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "\tint evenCount = 0;\n\tint oddCount = 0;\n\tif (num < 0)\n\t\tnum\
    \ = num * -1;\n\twhile (num > 0) {\n\t\tif (num % 2 == 0)\n\t\t\tevenCount++;\n\
    \t\telse\n\t\t\toddCount++;\n\t\tnum = num / 10;\n\t}\n\treturn std::make_tuple(evenCount,\
    \ oddCount);", "    // write your code here\n    int p = 0, q = 0;\n    std::string\
    \ str = std::to_string(num);\n    for(int i = 0; i < str.length(); i++)\n    {\n\
    \        if((str[i] - '0') % 2 == 0)\n            p++;\n        else\n       \
    \     q++;\n    }\n    return std::make_tuple(p, q);", "\tint evenCount = 0;\n\
    \tint oddCount = 0;\n\twhile (num) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\
    \t\t}\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(evenCount,\
    \ oddCount);", "    // (std::make_tuple(long(1), long(2))) // return a tuple that\
    \ has the number of even and odd digits respectively.\n    long even = 0, odd\
    \ = 0;\n    if(num < 0) num = abs(num);\n    while(num){\n        if(num % 2 ==\
    \ 0) even++;\n        else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    // Write your code here.\n    std::string s = std::to_string(num);\n\
    \    long even = 0;\n    long odd = 0;\n    for(char c : s){\n        if(!isdigit(c))\
    \ continue;\n        if((c - '0')%2==0)\n            even++;\n        else\n \
    \           odd++;\n    }\n    return std::make_tuple(even, odd);", '  // your
    code here', "    // Write your code here\n    long c_odd = 0, c_even = 0;\n  \
    \  while(num)\n    {\n        if(num % 2)\n            c_odd++;\n        else\n\
    \            c_even++;\n        num /= 10;\n    }\n    return {c_even, c_odd};",
  "    // assert(num != 0);\n\n    long even = 0;\n    long odd = 0;\n    if (num\
    \ < 0) {\n        num = num * -1;\n    }\n    while (num > 0) {\n        long\
    \ mod = num % 10;\n        if (mod % 2 == 0) {\n            even++;\n        }\
    \ else {\n            odd++;\n        }\n        num = num / 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    long even_cnt = 0;\n    long odd_cnt = 0;\n\
    \    long temp = num;\n    if (num < 0) {\n        temp = -temp;\n    }\n    while\
    \ (temp > 0) {\n        int rem = temp % 10;\n        if (rem % 2 == 0) {\n  \
    \          even_cnt++;\n        } else {\n            odd_cnt++;\n        }\n\
    \        temp = temp / 10;\n    }\n    return std::make_tuple(even_cnt, odd_cnt);",
  "  long even_digits = 0;\n  long odd_digits = 0;\n  while (num > 0) {\n    if (num\
    \ % 2 == 0) {\n      even_digits++;\n    } else {\n      odd_digits++;\n    }\n\
    \    num /= 10;\n  }\n  return std::make_tuple(even_digits, odd_digits);", " \
    \   int even=0,odd=0;\n    while(num!=0){\n        int digit=num%10;\n       \
    \ if(digit%2==0) even++;\n        else odd++;\n        num/=10;\n    }\n    return\
    \ std::make_tuple(even,odd);", "    int even = 0, odd = 0;\n    long num2 = num;\n\
    \    if(num2 < 0) num2 = num2 * -1;\n    while(num2 > 0) {\n        int r = num2\
    \ % 10;\n        if(r % 2 == 0) even++;\n        else odd++;\n        num2 = num2\
    \ / 10;\n    }\n    return std::make_tuple(even, odd);", "    long odd_count=0,even_count=0;\n\
    \    while(num){\n        int digit=num%10;\n        num/=10;\n        if(digit%2==0)\
    \ even_count++;\n        else odd_count++;\n    }\n    return std::make_tuple(even_count,odd_count);",
  "    long even = 0, odd = 0;\n    while(num) {\n        if((num % 10) % 2 == 0)\n\
    \            even++;\n        else\n            odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);", "    int even = 0, odd = 0;\n\
    \    num = std::abs(num);\n    while(num > 0) {\n        int digit = num % 10;\n\
    \        if(digit % 2 == 0) {\n            even++;\n        } else {\n       \
    \     odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    // Your code here.\n    int even = 0, odd = 0;\n    while(num !=\
    \ 0){\n        int rem = num % 10;\n        if(rem % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    std::tuple<long,\
    \ long> ans(even, odd);\n    return ans;", "    int count[2] = {0, 0};\n    while(num){\n\
    \        count[num % 2]++;\n        num = num / 10;\n    }\n    return std::make_tuple(count[0],\
    \ count[1]);", "  long even=0,odd=0;\n  while(num){\n    if(num%2==0)\n      even++;\n\
    \    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
  '  return std::make_tuple(1L, 1L);', "\tstd::tuple<long, long> tuple;\n\tlong number,\
    \ even_count = 0, odd_count = 0;\n\tif (num < 0) {\n\t\tnumber = num * -1;\n\t\
    }\n\telse {\n\t\tnumber = num;\n\t}\n\twhile (number != 0) {\n\t\tif ((number\
    \ % 10) % 2 == 0) {\n\t\t\teven_count++;\n\t\t}\n\t\telse {\n\t\t\todd_count++;\n\
    \t\t}\n\t\tnumber = number / 10;\n\t}\n\ttuple = std::make_tuple(even_count, odd_count);\n\
    \treturn tuple;", "  // start with default std::tuple<long, long> for zero\n \
    \ std::tuple<long, long> even_odd_count = std::make_tuple(0, 0);\n  // If zero,\
    \ return the default tuple\n  if (num == 0) {\n    return even_odd_count;\n  }\n\
    \  // Otherwise, follow the algorithm\n  while (num != 0) {\n    int temp = num\
    \ % 10;\n    if (temp % 2 == 0) {\n      // Add one to even element\n      std::get<0>(even_odd_count)\
    \ += 1;\n    } else {\n      // Add one to odd element\n      std::get<1>(even_odd_count)\
    \ += 1;\n    }\n    num /= 10;\n  }\n  return even_odd_count;", "  // your code\
    \ here\n  long even=0,odd=0;\n  int count = 0;\n  if(num < 0) num = -num;\n  while(num\
    \ != 0){\n  \tcount++;\n  \tif(count % 2 == 0) even++;\n  \telse odd++;\n  \t\
    num = num / 10;\n  }\n  return std::make_tuple(even,odd);", "    if(num < 0) num\
    \ = -num;\n    long even = 0, odd = 0;\n    while(num > 0) {\n        if(num %\
    \ 2 == 0)\n            even++;\n        else\n            odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);", '  return std::make_tuple(0L,
    0L);', "    int even=0,odd=0;\n    std::tuple<long, long> tup;\n    std::string\
    \ str=std::to_string(num);\n    for(int i=0;i<str.length();i++){\n        if(str[i]%2==0){\n\
    \            even++;\n        }\n        else{\n            odd++;\n        }\n\
    \    }\n    tup=std::make_tuple(even,odd);\n    return tup;", "    long odd =\
    \ 0, even = 0;\n    while(num != 0) {\n        int digit = num % 10;\n       \
    \ if(digit % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    long even=0,odd=0;\n    while(num!=0){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num = num/10;\n    }\n    return std::make_tuple(even,odd);", "\tlong\
    \ even_count=0,odd_count=0;\n\tstd::vector<int> v;\n\tv=get_digits(num);\n\t//\
    \ std::cout<<v.size()<<std::endl;\n\tfor(auto it=v.begin();it!=v.end();it++){\n\
    \t\tif((*it)%2==0){\n\t\t\teven_count++;\n\t\t}\n\t\telse{\n\t\t\todd_count++;\n\
    \t\t}\n\t}\n\treturn std::make_tuple(even_count,odd_count);", "  long even=0,odd=0;\n\
    \  int n=abs(num);\n  while(n>0){\n    if(n%2==0)\n    even++;\n    else\n   \
    \ odd++;\n    n=n/10;\n  }\n  return std::make_tuple(even,odd);", "    int even\
    \ = 0, odd = 0;\n    int flag = 1;\n    if(num < 0)\n    {\n        num = -num;\n\
    \        flag = -1;\n    }\n    while(num > 0)\n    {\n        int dig = num %\
    \ 10;\n        if(dig % 2 == 0)\n            even++;\n        else\n         \
    \   odd++;\n        num /= 10;\n    }\n    if(flag == -1)\n        odd++;\n  \
    \  return std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n    if(num\
    \ < 0) num *= -1;\n    while(num > 0) {\n        if(num % 2 == 0) even++;\n  \
    \      else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    if(num < 0) num *= -1;\n    while(num\
    \ > 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "\tstd::tuple<long, long> tuple(0, 0);\n\tlong rem;\n\twhile (num !=\
    \ 0) {\n\t\trem = num % 10;\n\t\tnum = num / 10;\n\t\tif (rem % 2 == 0) {\n\t\t\
    \tstd::get<0>(tuple)++;\n\t\t}\n\t\telse {\n\t\t\tstd::get<1>(tuple)++;\n\t\t\
    }\n\t}\n\treturn tuple;"]
stop_tokens:
- "\n}"
