name: HumanEval_73_smallest_change
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers,\
  \ find the minimum number of elements that\n// need to be changed to make the vector\
  \ palindromic. A palindromic vector is a vector that\n// is read the same backwards\
  \ and forwards. In one change, you can change one element to any other element.\n\
  // For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n \
  \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3,\
  \ (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n\
  }\n"
completions: ["    // Your code here\n    int len = arr.size();\n    int dp[len][len];\n\
    \    memset(dp, 0, sizeof(dp));\n    for(int l = 2; l <= len; l++) {\n       \
    \ for(int i = 0; i < len - l + 1; i++) {\n            int j = i + l - 1;\n   \
    \         if(arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            } else {\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n            }\n        }\n    }\n    return dp[0][len - 1];", "  int\
    \ i,j, count=0;\n  for(i=0,j=arr.size()-1;i<j;i++,j--){\n    if(arr[i]!=arr[j]){\n\
    \      count++;\n    }\n  }\n  return count;", "    long n = arr.size();\n   \
    \ int count = 0;\n    for (int i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1])\n\
    \            count++;\n    }\n    return count;", "\tstd::cout << arr.size() <<\
    \ '\\n';\n\tif (arr.size() == 1) {\n\t\treturn 0;\n\t}\n\tlong n = arr.size();\n\
    \tlong size = n / 2;\n\tlong sum = 0;\n\tfor (int i = 0; i < size; i++) {\n\t\t\
    sum += std::abs(arr[i] - arr[n - i - 1]);\n\t}\n\treturn sum;", "    long i =\
    \ 0;\n    long j = arr.size() - 1;\n    long count = 0;\n    while (i < j) {\n\
    \        if (arr[i] != arr[j]) {\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;", "  \tlong n = arr.size();\n\tif(n ==\
    \ 0 || n == 1)\n\t\treturn 0;\n\tstd::vector<std::vector<long>> dp(n, std::vector<long>(n,\
    \ 0));\n\tfor(long i = 0; i < n; i++)\n\t\tdp[i][i] = 0;\n\tfor(long length =\
    \ 2; length <= n; length++) {\n\t\tfor(long i = 0; i < n - length + 1; i++) {\n\
    \t\t\tlong j = i + length - 1;\n\t\t\tif(arr[i] == arr[j])\n\t\t\t\tdp[i][j] =\
    \ dp[i + 1][j - 1];\n\t\t\telse\n\t\t\t\tdp[i][j] = std::min(dp[i + 1][j], dp[i][j\
    \ - 1]) + 1;\n\t\t}\n\t}\n\treturn dp[0][n - 1];", "    long m=arr.size();\n \
    \   std::vector<std::vector<long>> dp(m,std::vector<long>(m,0));\n    for(long\
    \ i=0;i<m;i++)\n        dp[i][i]=1;\n    for(long k=2;k<=m;k++){\n        for(long\
    \ i=0;i<m-k+1;i++){\n            long j=i+k-1;\n            if(arr[i]==arr[j]&&k==2)\n\
    \                dp[i][j]=2;\n            else if(arr[i]==arr[j])\n          \
    \      dp[i][j]=dp[i+1][j-1]+2;\n            else\n                dp[i][j]=std::max(dp[i+1][j],dp[i][j-1]);\n\
    \        }\n    }\n    return m-dp[0][m-1];", "    int n = arr.size();\n    int\
    \ t[n][n];\n    for(int i = 0; i < n; i++)\n        t[i][i] = 0;\n    for(int\
    \ l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n      \
    \      int j = i + l - 1;\n            if(arr[i] == arr[j])\n                t[i][j]\
    \ = t[i + 1][j - 1];\n            else {\n                t[i][j] = std::min(t[i\
    \ + 1][j], t[i][j - 1]) + 1;\n            }\n        }\n    }\n    return t[0][n\
    \ - 1];", "\t// Write your code here\n\t// To print results to the standard output\
    \ you can use the cout\n\t// stream example: cout << \"Hello world!\";\n\tint\
    \ n = arr.size();\n\tint dp[n][n];\n\tfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<n;j++)\n\
    \t\t\tdp[i][j] = 0;\n\tfor(int gap=1;gap<n;gap++)\n\t{\n\t\tfor(int i=0,j=gap;j<n;i++,j++)\n\
    \t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t\tdp[i][j] = dp[i+1][j-1];\n\t\t\telse\n\
    \t\t\t\tdp[i][j] = 1 + std::min(dp[i+1][j],dp[i][j-1]);\n\t\t}\n\t}\n\treturn\
    \ dp[0][n-1];", "    int N = arr.size();\n    int lo = 0, hi = N-1;\n    int ans\
    \ = 0;\n    while(lo < hi) {\n        if(arr[lo] == arr[hi]) {\n            lo++;\n\
    \            hi--;\n        } else if(arr[lo] < arr[hi]) {\n            arr[lo+1]\
    \ += arr[lo];\n            ans++;\n            lo++;\n        } else {\n     \
    \       arr[hi-1] += arr[hi];\n            ans++;\n            hi--;\n       \
    \ }\n    }\n    return ans;", "    int size = arr.size();\n    int count = 0;\n\
    \    for(int i = 0; i < size/2; i++){\n        if(arr[i] != arr[size-1-i]){\n\
    \            count++;\n        }\n    }\n    return count;", "  int sz = arr.size();\n\
    \  int fwd[sz][sz];\n  int bkwd[sz][sz];\n  int o_fwd[sz][sz];\n  int o_bkwd[sz][sz];\n\
    \  // Forward\n  // Base case\n  for (int i = 0; i < sz; i++) {\n    fwd[i][i]\
    \ = 0;\n    o_fwd[i][i] = 0;\n  }\n  for (int i = 0; i < sz - 1; i++) {\n    if\
    \ (arr[i] == arr[i + 1]) {\n      fwd[i][i + 1] = 0;\n      o_fwd[i][i + 1] =\
    \ 0;\n    } else {\n      fwd[i][i + 1] = 1;\n      o_fwd[i][i + 1] = 0;\n   \
    \ }\n  }\n  for (int len = 3; len <= sz; len++) {\n    for (int i = 0; i <= sz\
    \ - len; i++) {\n      int j = i + len - 1;\n      //std::cout << i << \", \"\
    \ << j << std::endl;\n      if (arr[i] == arr[j]) {\n        fwd[i][j] = fwd[i\
    \ + 1][j - 1];\n        o_fwd[i][j] = 1;\n      } else {\n        fwd[i][j] =\
    \ std::min(fwd[i + 1][j], fwd[i][j - 1]) + 1;\n        o_fwd[i][j] = 0;\n    \
    \  }\n    }\n  }\n  // Backward\n  // Base case\n  for (int i = 0; i < sz; i++)\
    \ {\n    bkwd[i][i] = 0;\n    o_bkwd[i][i] = 0;\n  }\n  for (int i = 0; i < sz\
    \ - 1; i++) {\n    if (arr[i] == arr[i + 1]) {\n      bkwd[i][i + 1] = 0;", " \
    \   std::vector<long> ar1,ar2;\n    std::reverse_copy(arr.begin(),arr.end(),std::back_inserter(ar1));\n\
    \    int n = arr.size();\n    int i,j;\n    int dp[n+1][n+1];\n    for(i=0;i<=n;i++)\n\
    \    {\n        for(j=0;j<=n;j++)\n        {\n            if(i==0 || j==0)\n \
    \               dp[i][j] = 0;\n            else if(arr[i-1] == ar1[j-1])\n   \
    \             dp[i][j] = dp[i-1][j-1] + 1;\n            else\n               \
    \ dp[i][j] = std::max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return arr.size()\
    \ - dp[n][n];", "    long long n = arr.size();\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, 0));\n    for (long i = 0; i < n; i++) {\n      \
    \  dp[i][i] = 0;\n    }\n    for (long l = 2; l <= n; l++) {\n        for (long\
    \ i = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if\
    \ (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n       \
    \     } else {\n                dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1])\
    \ + 1;\n            }\n        }\n    }\n    return dp[0][n - 1];", "    // Your\
    \ code here\n    long arr_len = arr.size();\n    long ans = 0;\n    for(long i\
    \ = 0; i < arr_len / 2; i++){\n        if(arr[i] != arr[arr_len - i - 1]){\n \
    \           ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long **dp = new long*[n];\n    for(long i = 0; i < n; i++)\n        dp[i]\
    \ = new long[n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n   \
    \ for(long L = 2; L <= n; L++) {\n        for(long i = 0; i < n-L+1; i++) {\n\
    \            long j = i+L-1;\n            if(arr[i] == arr[j])\n             \
    \   dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j] = 1 +\
    \ std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    long ans = dp[0][n-1];\n\
    \    for(long i = 0; i < n; i++)\n        delete[] dp[i];\n    delete[] dp;\n\
    \    return ans;", "    // Write your code here\n    int count=0;\n    for(int\
    \ i=0;i<arr.size()/2;i++){\n        if(arr[i]!=arr[arr.size()-1-i]){\n       \
    \     count++;\n        }\n    }\n    return count;", "    int n = arr.size();\n\
    \    int table[n][n];\n    for(int i = 0; i < n; i++) {\n        table[i][i] =\
    \ 0;\n    }\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n -\
    \ l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i] == arr[j])\
    \ {\n                table[i][j] = table[i + 1][j - 1];\n            } else {\n\
    \                table[i][j] = std::min(table[i + 1][j], table[i][j - 1]) + 1;\n\
    \            }\n        }\n    }\n    return table[0][n - 1];", "  // your code\
    \ here\n  return 0;", "    int n = arr.size();\n    std::vector<std::vector<int>>\
    \ dp(n, std::vector<int>(n, 0));\n    for (int i = n - 1; i >= 0; i--) {\n   \
    \     for (int j = i; j < n; j++) {\n            if (i == j)\n               \
    \ dp[i][j] = 0;\n            else if (j == i + 1)\n                dp[i][j] =\
    \ (arr[i] == arr[j]) ? 0 : 1;\n            else {\n                if (arr[i]\
    \ == arr[j])\n                    dp[i][j] = dp[i + 1][j - 1];\n             \
    \   else\n                    dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1])\
    \ + 1;\n            }\n        }\n    }\n    return dp[0][n - 1];", '  return
    0;', "    int n = arr.size();\n    int l, r;\n    int res = 0;\n    for (l = 0,\
    \ r = n - 1; l < r; ++l, --r) {\n        while (l < r && arr[l] == arr[r]) {\n\
    \            ++l;\n            --r;\n        }\n        while (l < r && arr[l]\
    \ != arr[r]) {\n            arr[l] = arr[r];\n            ++res;\n        }\n\
    \    }\n    return res;", "    long n = arr.size();\n    int ans = 0;\n    for(int\
    \ i = 0; i < n / 2; i++) {\n        ans += std::abs(arr[i] - arr[n - i - 1]);\n\
    \    }\n    return ans;", "  long count=0;\n  int n=arr.size();\n  std::vector<long>\
    \ v=arr;\n  // std::reverse(v.begin(),v.end());\n  for(int i=0;i<(n/2);i++){\n\
    \    if(arr[i]!=arr[n-i-1])\n      count++;\n  }\n  return count;", '    ', " \
    \ if (arr.size() == 0 || arr.size() == 1) {\n    return 0;\n  }\n\n  // n is our\
    \ window size\n  int n = arr.size();\n  int result = n;\n\n  // This loop processes\
    \ different size windows. n varies from size\n  // of array, N-1, N-2, ...1\n\
    \  for (int i = 0; i < n; i++) {\n    int left = 0;\n    int right = i;\n    int\
    \ diff = 0;\n\n    // This loop maintains the window size.\n    // It checks palindrome\
    \ for each window size.\n    while (left < right) {\n      if (arr[left] != arr[right])\
    \ {\n        diff++;\n      }\n      left++;\n      right--;\n    }\n\n    //\
    \ We will check for minimum changes required\n    // for this window size and\
    \ update the result\n    // if needed\n    result = std::min(result, diff);\n\
    \  }\n\n  return result;", "    int n = arr.size();\n    long ans = 0;\n    int\
    \ l = 0, r = n - 1;\n    while (l < r) {\n        if (arr[l] == arr[r]) {\n  \
    \          l++;\n            r--;\n        } else if (arr[l] < arr[r]) {\n   \
    \         arr[l + 1] += arr[l];\n            ans++;\n            l++;\n      \
    \  } else {\n            arr[r - 1] += arr[r];\n            ans++;\n         \
    \   r--;\n        }\n    }\n    return ans;", "  long N = arr.size();\n  long\
    \ i = 0;\n  long j = N - 1;\n  long mismatches = 0;\n  while (i < j) {\n    if\
    \ (arr[i] != arr[j]) {\n      mismatches++;\n    }\n    i++;\n    j--;\n  }\n\
    \  return mismatches;", "  long n = arr.size();\n  long ans = 0;\n  for (long\
    \ i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\n      ans++;\n\
    \  }\n  return ans;", "  \tint N = arr.size();\n  \tint ans = 0;\n  \tint i =\
    \ 0, j = N - 1;\n  \tint count = 0;\n  \twhile(i < j) {\n  \t\tif(arr[i] == arr[j])\
    \ {\n  \t\t\ti++;\n  \t\t\tj--;\n  \t\t}\n  \t\telse {\n  \t\t\tif(arr[i] < arr[j])\
    \ {\n  \t\t\t\tarr[i + 1] = arr[i];\n  \t\t\t\ti++;\n  \t\t\t\tcount++;\n  \t\t\
    \t}\n  \t\t\telse {\n  \t\t\t\tarr[j - 1] = arr[j];\n  \t\t\t\tj--;\n  \t\t\t\t\
    count++;\n  \t\t\t}\n  \t\t}\n  \t}\n    return count;", "    // your code here\n\
    \    long small_change = 0;\n    long mid_index = arr.size()/2;\n    for(long\
    \ i = 0; i < mid_index; i++){\n        if(arr[i] != arr[arr.size()-1-i]){\n  \
    \          small_change++;\n        }\n    }\n    return small_change;", "   \
    \ int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n   \
    \     dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0;\
    \ i < n-l+1; i++) {\n            int j = i+l-1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i+1][j-1];\n            else {\n              \
    \  dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n\
    \    }\n    return dp[0][n-1];", "    // Create two arrays and initialize them\
    \ with 0.\n    // One array has length of the input array and other array has\
    \ length of the\n    // input array + 1.\n    long n = arr.size();\n    std::vector<long>\
    \ L(n, 0);\n    std::vector<long> R(n + 1, 0);\n    // Populate the left array.\n\
    \    for (long i = 0; i < n; i++) {\n        L[i] = arr[i];\n        if (i > 0)\
    \ {\n            L[i] = std::max(L[i], L[i - 1]);\n        }\n    }\n    // Populate\
    \ the right array.\n    for (long i = n - 1; i >= 0; i--) {\n        R[i] = arr[i];\n\
    \        if (i < n - 1) {\n            R[i] = std::max(R[i], R[i + 1]);\n    \
    \    }\n    }\n    // Find the number of changes required.\n    long count = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] < L[i] && arr[i] < R[i\
    \ + 1]) {\n            count++;\n        }\n    }\n    return count;", '  return
    0;', "    long n = arr.size();\n    long minimumChanges = 0;\n    for (long i\
    \ = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n          \
    \  minimumChanges++;\n        }\n    }\n    return minimumChanges;", "    int\
    \ c = 0;\n    int l = 0;\n    int r = arr.size() - 1;\n    while (l < r) {\n \
    \       if (arr[l] != arr[r]) {\n            c++;\n        }\n        l++;\n \
    \       r--;\n    }\n    return c;", "    int changes = 0;\n    std::reverse(arr.begin(),\
    \ arr.end());\n    int i = 0;\n    int j = arr.size() - 1;\n    while (i < j)\
    \ {\n        if (arr[i] != arr[j]) {\n            if (arr[i] > arr[j]) {\n   \
    \             arr[i] -= arr[j];\n            } else {\n                arr[j]\
    \ -= arr[i];\n            }\n            changes++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return changes;", "    // your code here\n    long n\
    \ = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n     \
    \   for(long j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\
    \    for(long i = 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n    for(long\
    \ i = 0; i < n - 1; i++) {\n        if(arr[i] != arr[i + 1]) {\n            dp[i][i\
    \ + 1] = 1;\n        }\n        else {\n            dp[i][i + 1] = 0;\n      \
    \  }\n    }\n    for(long l = 3; l <= n; l++) {\n        for(long i = 0; i <=\
    \ n - l; i++) {\n            long j = i + l - 1;\n            if(arr[i] == arr[j])\
    \ {\n                dp[i][j] = dp[i + 1][j - 1];\n            }\n           \
    \ else {\n                dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n\
    \            }\n        }\n    }\n    return dp[0][n - 1];", "    long len = arr.size();\n\
    \    if (len == 0) return 0;\n    else if (len == 1) return 1;\n    else if (len\
    \ == 2) return (arr[0] != arr[1]);\n    else {\n        long result = 0;\n   \
    \     long front_pointer = 0;\n        long back_pointer = len - 1;\n        while\
    \ (front_pointer <= back_pointer) {\n            if (arr[front_pointer] != arr[back_pointer])\
    \ result += 1;\n            front_pointer += 1;\n            back_pointer -= 1;\n\
    \        }\n        return result;\n    }", "    int n = arr.size();\n    // dp[i][j]\
    \ - minimum no. of changes to make arr[i:j] palindromic\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, 0));\n    for (int i = 0; i < n; i++) {\n       \
    \ dp[i][i] = 0;\n    }\n    for (int len = 2; len <= n; len++) {\n        for\
    \ (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n    \
    \        dp[i][j] = INT_MAX;\n            if (arr[i] == arr[j]) {\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            } else {\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\
    \    return dp[0][n - 1];", "    \n    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    int j;\n    for(int i = 0; i < n; i++)\n\
    \        dp[i][i] = 1;\n    for(int l = 2; l <= n; l++)\n    {\n        for(int\
    \ i = 0; i < n-l+1; i++)\n        {\n            j = i+l-1;\n            if(arr[i]\
    \ == arr[j] && l == 2)\n                dp[i][j] = 2;\n            else if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i+1][j-1] + 2;\n            else\n\
    \                dp[i][j] = max(dp[i][j-1], dp[i+1][j]);\n        }\n    }\n \
    \   int result = n - dp[0][n-1];\n    return result;", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (int i = 0; i < n - 1; i++) {\n\
    \        if (arr[i] == arr[i + 1]) {\n            dp[i][i + 1] = 1;\n        }\
    \ else {\n            dp[i][i + 1] = 2;\n        }\n    }\n    for (int len =\
    \ 3; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n   \
    \         int j = i + len - 1;\n            if (arr[i] == arr[j]) {\n        \
    \        dp[i][j] = dp[i + 1][j - 1];\n            } else {\n                dp[i][j]\
    \ = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    long sol = 0;\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (arr[i] != arr[j])\
    \ {\n            int count1 = 1;\n            int count2 = 1;\n            int\
    \ x = arr[i];\n            int y = arr[j];\n            while(arr[i + count1]\
    \ == x) {\n                count1++;\n            }\n            while(arr[j -\
    \ count2] == y) {\n                count2++;\n            }\n            if (count1\
    \ < count2) {\n                sol += count1;\n                i += count1;\n\
    \            } else {\n                sol += count2;\n                j -= count2;\n\
    \            }\n        } else {\n            i++;\n            j--;\n       \
    \ }\n    }\n    return sol;", "    // your code goes here\n    int count=0;\n\
    \    if(arr.size()==0)\n        return 0;\n    if(arr.size()==1)\n        return\
    \ 0;\n    if(arr.size()==2)\n        return 1;\n    if(arr.size()==3)\n      \
    \  return 2;\n    if(arr.size()==4)\n        return 1;\n    for(int i=0;i<arr.size()/2;i++)\n\
    \    {\n        if(arr[i]!=arr[arr.size()-1-i])\n            count++;\n    }\n\
    \    return count;", "    int n = arr.size();\n    std::vector<std::vector<int>>\
    \ dp(n, std::vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 0;\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = std::min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i\
    \ < n; i++)\n        dp[i][i] = 0;\n    for(long length = 2; length <= n; length++)\
    \ {\n        for(long i = 0; i < n-length+1; i++) {\n            long j = i+length-1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    int l, r, l_index, r_index, l_value,\
    \ r_value, diff, count, mid, size;\n    std::vector<long>::iterator it;\n    size\
    \ = arr.size();\n    // If size of array is even, then median is the size/2-1\
    \ th index else it is the size/2th index\n    mid = size%2==0 ? size/2-1 : size/2;\n\
    \    // For array of size 2 or less, return 0\n    if(size <= 2) return 0;\n \
    \   l = 0;\n    r = size-1;\n    count = 0;\n    diff = 0;\n    // Increment count\
    \ and start checking for indices after index mid\n    for(int index = mid; index\
    \ <= r; index++) {\n        l_index = index-1;\n        r_index = size-index-1;\n\
    \        l_value = arr[l_index];\n        r_value = arr[r_index];\n        diff\
    \ = abs(l_value - r_value);\n        // If the diff is zero continue to the next\
    \ element\n        if(diff == 0) {\n            continue;\n        }\n       \
    \ else {\n            // Else update the right value, then increment count\n \
    \           arr[r_index] = l_value;\n            count++;\n        }\n    }\n\
    \    return count;", "    long n = arr.size();\n    if(n <= 1) return 0;\n   \
    \ long ans = INT_MAX;\n    for(long i = 0; i < n/2; i++){\n        long x = arr[i];\n\
    \        long y = arr[n-i-1];\n        ans = std::min(ans, (long)std::abs(x-y));\n\
    \    }\n    return ans;", "\tlong n = arr.size();\n\tif (n == 0) return 0;\n\t\
    if (n == 1) return 1;\n\tlong left = 0, right = n - 1;\n\tlong ans = 0;\n\twhile\
    \ (left < right) {\n\t\tif (arr[left] != arr[right]) {\n\t\t\tif (arr[left] >\
    \ arr[right]) {\n\t\t\t\tarr[right] = arr[left];\n\t\t\t} else {\n\t\t\t\tarr[left]\
    \ = arr[right];\n\t\t\t}\n\t\t\tans++;\n\t\t}\n\t\tleft++;\n\t\tright--;\n\t}\n\
    \treturn ans;", "  // your code goes here\n  int n = arr.size();\n  int t[n][n];\n\
    \  int l, h, gap;\n  memset(t, 0, sizeof(t));\n  for (gap = 1; gap < n; ++gap)\n\
    \    for (l = 0, h = gap; h < n; ++l, ++h)\n      t[l][h] = (arr[l] == arr[h])?\
    \ t[l+1][h-1] :\n        (std::min(t[l][h-1], t[l+1][h]) + 1);\n  return t[0][n-1];",
  "\tlong length = arr.size();\n\tlong left = 0;\n\tlong right = length - 1;\n\tlong\
    \ count = 0;\n\twhile (left < right) {\n\t\tif (arr[left] != arr[right]) {\n\t\
    \t\tcount += 1;\n\t\t}\n\t\tleft += 1;\n\t\tright -= 1;\n\t}\n\treturn count;",
  "    // Your code here\n    return 0;", "    if(arr.size() == 0)\n        return\
    \ 0;\n    if(arr.size() == 1)\n        return 1;\n    if(arr.size() == 2)\n  \
    \      return 2;\n    long count[arr.size()][arr.size()];\n    for(long i = 0;\
    \ i < arr.size(); i++)\n        count[i][i] = 0;\n    for(long i = 0; i < arr.size()\
    \ - 1; i++)\n        count[i][i + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n    for(long\
    \ j = 2; j < arr.size(); j++)\n        for(long i = 0; i < arr.size() - j; i++)\n\
    \            count[i][i + j] = arr[i] == arr[i + j] ? count[i + 1][i + j - 1]\
    \ : 1 + std::min(count[i + 1][i + j], count[i][i + j - 1]);\n    return count[0][arr.size()\
    \ - 1];", "    long count = 0;\n    for(long i = 0; i < arr.size()/2; i++){\n\
    \        long diff = abs(arr[i] - arr[arr.size() - i - 1]);\n        if(diff >\
    \ 0){\n            count += diff;\n        }\n    }\n    return count;", "  //\
    \ your code here\n  return 0;", "  long i = 0;\n  long j = arr.size() - 1;\n \
    \ long changes = 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      if\
    \ (arr[i + 1] == arr[j]) {\n        i++;\n      } else if (arr[i] == arr[j - 1])\
    \ {\n        j--;\n      } else {\n        i++;\n        j--;\n      }\n     \
    \ changes++;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return changes;",
  "    long n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n \
    \       dp[i][i] = 0;\n    for(int curr_len = 2; curr_len <= n; curr_len++) {\n\
    \        for(int i = 0; i < n - curr_len + 1; i++) {\n            int j = i +\
    \ curr_len - 1;\n            if(arr[i] == arr[j])\n                dp[i][j] =\
    \ dp[i + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    long\
    \ mn = INT_MAX;\n    int n = arr.size();\n    for(int i = 0, j = n-1; i < j; i++,\
    \ j--) {\n        mn = std::min(mn, std::abs(arr[i] - arr[j]));\n    }\n    return\
    \ mn;", "    // your code here\n\n", "    vector<long>::iterator it1 = arr.begin();\n\
    \    vector<long>::iterator it2 = arr.end()-1;\n    int res = 0;\n    while(it1<it2){\n\
    \        res += abs(*it1-*it2);\n        it1++;\n        it2--;\n    }\n    return\
    \ res;", "    int sz = arr.size();\n    assert(sz >= 2);\n    long res = 0;\n\
    \    for (int i = 0; i < sz/2; i++) {\n        if (arr[i] != arr[sz-1-i]) {\n\
    \            res++;\n        }\n    }\n    return res;", "    // Your code here\n\
    \    // Solution from\n    // https://www.geeksforgeeks.org/minimum-number-of-merge-operations-to-make-an-array-palindrome/\n\
    \    long n = arr.size();\n    long i = 0, j = n - 1;\n    long count = 0;\n \
    \   while (i < j) {\n        if (arr[i] == arr[j]) {\n            i++;\n     \
    \       j--;\n        } else if (arr[i] < arr[j]) {\n            arr[i + 1] +=\
    \ arr[i];\n            i++;\n            count++;\n        } else {\n        \
    \    arr[j - 1] += arr[j];\n            j--;\n            count++;\n        }\n\
    \    }\n    return count;", "    size_t i = 0;\n    size_t j = arr.size() - 1;\n\
    \    long change = 0;\n    while (i < j) {\n        change += std::abs(arr[i]\
    \ - arr[j]);\n        i++;\n        j--;\n    }\n    return change;", "    int\
    \ n = arr.size();\n    int changes = 0;\n    int count = 0;\n    for(int i = 0;\
    \ i < n/2; i++){\n        while(arr[i] != arr[n-i-1]){\n            arr[n-i-1]--;\n\
    \            changes++;\n        }\n    }\n    return changes;", "    int l =\
    \ 0, r = arr.size() - 1;\n    int ans = 0;\n    while (l < r) {\n        if (arr[l]\
    \ != arr[r]) {\n            if (arr[l] == arr[r - 1]) {\n                ans++;\n\
    \                r--;\n            } else if (arr[l + 1] == arr[r]) {\n      \
    \          ans++;\n                l++;\n            } else {\n              \
    \  ans += 2;\n                l++;\n                r--;\n            }\n    \
    \    } else {\n            l++;\n            r--;\n        }\n    }\n    return\
    \ ans;", "    long n = arr.size();\n    if(n==0) return 0;\n    long i=0, j=n-1;\n\
    \    int k=0;\n    while(i<j){\n        if(arr[i] == arr[j]){\n            i++;\
    \ j--;\n        }\n        else{\n            if(arr[i] > arr[j]){\n         \
    \       k++;\n                j--;\n            }\n            else{\n       \
    \         k++;\n                i++;\n            }\n        }\n    }\n    return\
    \ k;", '    // your code here', "    // your code here\n    int len = arr.size();\n\
    \    int cnt = 0;\n    for(int i = 0; i < len / 2; i++){\n        if(arr[i] !=\
    \ arr[len - i - 1]){\n            cnt++;\n        }\n    }\n    return cnt;",
  "    int N = arr.size();\n    // printArray(arr, N);\n    int l = 0, r = N-1;\n\
    \    int ans = 0;\n    while(l < r) {\n        if(arr[l] != arr[r]) {\n      \
    \      ans++;\n        }\n        l++;\n        r--;\n    }\n    return ans;",
  "  long n = arr.size();\n  // complete this function\n  long diff[n][n];\n  for(long\
    \ i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++) {\n      diff[i][j] =\
    \ INT_MAX;\n    }\n  }\n  for(long i = 0; i < n; i++) {\n    diff[i][i] = 0;\n\
    \  }\n  for(long i = 0; i < n - 1; i++) {\n    if(arr[i] != arr[i + 1]) {\n  \
    \    diff[i][i + 1] = 1;\n    } else {\n      diff[i][i + 1] = 0;\n    }\n  }\n\
    \  for(long L = 3; L <= n; L++) {\n    for(long i = 0; i < n - L + 1; i++) {\n\
    \      long j = i + L - 1;\n      if(arr[i] == arr[j]) {\n        diff[i][j] =\
    \ diff[i + 1][j - 1];\n      } else {\n        diff[i][j] = 1 + std::min(diff[i\
    \ + 1][j], diff[i][j - 1]);\n      }\n    }\n  }\n  return diff[0][n - 1];", " \
    \ int i, j, k, h;\n  int n = arr.size();\n  int dp[n][n];\n  memset(dp, 0, sizeof(dp));\n\
    \  for (i = 0; i < n; i++)\n    dp[i][i] = 1;\n  for (h = 2; h <= n; h++) {\n\
    \    for (i = 0; i < n - h + 1; i++) {\n      j = i + h - 1;\n      if (arr[i]\
    \ == arr[j] && h == 2)\n        dp[i][j] = 2;\n      else if (arr[i] == arr[j])\n\
    \        dp[i][j] = dp[i + 1][j - 1] + 2;\n      else\n        dp[i][j] = std::max(dp[i][j\
    \ - 1], dp[i + 1][j]);\n    }\n  }\n  return (n - dp[0][n - 1]);", "    int n\
    \ = arr.size();\n    int mx = 0;\n    std::vector<std::vector<int>> dp(n, std::vector<int>(n,\
    \ 0));\n    // dp[i][j] gives the length of lcs of arr[i:j] and its reverse\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = i; j >= 0; j--) {\n \
    \           if (arr[i] == arr[j]) {\n                if (i == j) {\n         \
    \           dp[i][j] = 1;\n                } else {\n                    dp[i][j]\
    \ = dp[i - 1][j + 1] + 2;\n                }\n            } else {\n         \
    \       dp[i][j] = std::max(dp[i - 1][j], dp[i][j + 1]);\n            }\n    \
    \        mx = std::max(mx, dp[i][j]);\n        }\n    }\n    return n - mx;",
  "  long answer = 0;\n  long n = arr.size();\n  std::vector<std::vector<long>> mat(n,\
    \ std::vector<long>(n, 0));\n  for (long i = 0; i < n; i++) {\n    mat[i][i] =\
    \ 0;\n  }\n  for (long l = 2; l <= n; l++) {\n    for (long i = 0; i < n - l +\
    \ 1; i++) {\n      long j = i + l - 1;\n      if (arr[i] == arr[j]) {\n      \
    \  mat[i][j] = mat[i + 1][j - 1];\n      } else {\n        mat[i][j] = std::min(mat[i\
    \ + 1][j], mat[i][j - 1]) + 1;\n      }\n    }\n  }\n  answer = mat[0][n - 1];\n\
    \  return answer;", "  // your code here\n  int n = arr.size();\n  int start =\
    \ 0;\n  int end = n-1;\n  int count = 0;\n  while(start<end){\n    if(arr[start]==arr[end]){\n\
    \      start++;\n      end--;\n    }\n    else{\n      if(arr[start]<arr[end]){\n\
    \        arr[start+1]+=arr[start];\n        start++;\n        count++;\n     \
    \ }\n      else{\n        arr[end-1]+=arr[end];\n        end--;\n        count++;\n\
    \      }\n    }\n  }\n  return count;", "  size_t len = arr.size();\n  std::vector<std::vector<long>>\
    \ dp(len, std::vector<long>(len, 0));\n  for (size_t i = 0; i < len; i++) {\n\
    \    dp[i][i] = 0;\n  }\n  for (size_t i = len - 1; i >= 0; i--) {\n    for (size_t\
    \ j = i + 1; j < len; j++) {\n      if (arr[i] == arr[j]) {\n        dp[i][j]\
    \ = dp[i + 1][j - 1];\n      } else {\n        dp[i][j] = std::min(dp[i + 1][j],\
    \ dp[i][j - 1]) + 1;\n      }\n    }\n  }\n  return dp[0][len - 1];", "    long\
    \ l = 0, r = arr.size() - 1;\n    long ans = 0;\n    while (l < r) {\n       \
    \ if (arr[l] != arr[r]) {\n            if (arr[l] < arr[r]) {\n              \
    \  arr[l + 1] = arr[l];\n            } else {\n                arr[r - 1] = arr[r];\n\
    \            }\n            ans++;\n        }\n        l++;\n        r--;\n  \
    \  }\n    return ans;", "    long n = arr.size();\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, 0));\n    for (long r = n - 1; r >= 0; r--) {\n \
    \       for (long c = r; c < n; c++) {\n            dp[r][c] = (r == c) ? 0 :\
    \ std::min(dp[r][c - 1], dp[r + 1][c]) + arr[c] - arr[r];\n        }\n    }\n\
    \    long min = INT_MAX;\n    for (long i = 0; i < n; i++) {\n        if (dp[0][i]\
    \ <= min) {\n            min = dp[0][i];\n        }\n    }\n    return min;",
  "  long minSum=0;\n  long sum=0;\n  int j;\n  for(int i=0;i<arr.size()/2;i++){\n\
    \    if(arr[i]!=arr[arr.size()-1-i]){\n      j=i;\n      while(arr[j]!=arr[arr.size()-1-i]){\n\
    \        sum+=abs(arr[j]-arr[arr.size()-1-i]);\n        arr[j]+=1;\n      }\n\
    \      minSum+=sum;\n      sum=0;\n    }\n  }\n  return minSum;", "    int start\
    \ = 0;\n    int end = arr.size() - 1;\n    int count = 0;\n    while (start <\
    \ end) {\n        if (arr[start] != arr[end]) {\n            count++;\n      \
    \  }\n        start++;\n        end--;\n    }\n    return count;", "\tlong num_changes=0;\n\
    \tfor(int i=0;i<arr.size()/2;i++){\n\t\tnum_changes+=std::abs(arr[i]-arr[arr.size()-1-i]);\n\
    \t}\n\treturn num_changes;", "\tint n = arr.size();\n\tint needToChange = 0;\n\
    \tint start = 0;\n\tint end = n - 1;\n\twhile (start < end) {\n\t\tif (arr[start]\
    \ != arr[end]) {\n\t\t\tneedToChange++;\n\t\t}\n\t\tstart++;\n\t\tend--;\n\t}\n\
    \treturn needToChange;", "  int i=0,j=arr.size()-1;\n  int count=0;\n  while(i<j){\n\
    \    if(arr[i]!=arr[j])\n    count++;\n    i++;\n    j--;\n  }\n  return count;",
  "    long count=0;\n    int n=arr.size();\n    int i=0,j=n-1;\n    while(i<j){\n\
    \        if(arr[i]!=arr[j]){\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;", "    int n = arr.size();\n    vector<vector<int>>\
    \ dp(n, vector<int>(n, 0));\n    int i, j, k, l;\n    // String is broken into\
    \ two parts of length j, i.e.,\n    // str[0..j-1] and str[i+1..n-1]\n    for\
    \ (i = n - 1; i >= 0; i--) {\n        for (j = i; j < n; j++) {\n            if\
    \ (i == j)\n                dp[i][j] = 0;\n            else if (arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return\
    \ dp[0][n - 1];", "  if (arr.size() <= 2) return 0;\n  long count = 0;\n  for\
    \ (int i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1\
    \ - i]) count++;\n  }\n  return count;", "    int n = arr.size();\n    int i =\
    \ 0, j = n - 1;\n    int ans = 0;\n    while (i < j) {\n        if (arr[i] !=\
    \ arr[j]) {\n            ans++;\n        }\n        i++;\n        j--;\n    }\n\
    \    return ans;", "    long n = arr.size();\n    long dp[n][n];\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            dp[i][j]\
    \ = -1;\n        }\n    }\n    long ans = solve(arr, 0, n-1, dp);\n    return\
    \ ans;", "    int n = arr.size();\n    int a[n][n];\n    for(int i=0;i<n;i++)\
    \ {\n        for(int j=0;j<n;j++) {\n            a[i][j] = 0;\n        }\n   \
    \ }\n    for(int i=0;i<n;i++) {\n        a[i][i] = 0;\n    }\n    for(int l=2;l<=n;l++)\
    \ {\n        for(int i=0;i<n-l+1;i++) {\n            int j = i+l-1;\n        \
    \    if(arr[i] == arr[j]) {\n                a[i][j] = a[i+1][j-1];\n        \
    \    } else {\n                a[i][j] = std::min(a[i+1][j], a[i][j-1]) + 1;\n\
    \            }\n        }\n    }\n    return a[0][n-1];", "    int arrayLen =\
    \ arr.size();\n    if (arrayLen <= 1) {\n        return 0;\n    }\n    int start\
    \ = 0;\n    int end = arrayLen - 1;\n    int count = 0;\n    while (start < end)\
    \ {\n        if (arr[start] != arr[end]) {\n            count++;\n        }\n\
    \        start++;\n        end--;\n    }\n    return count;", "    int len = arr.size();\n\
    \    int dp[len][len];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i\
    \ < len; i++) {\n        dp[i][i] = 1;\n    }\n    for (int i = 1; i < len; i++)\
    \ {\n        for (int j = 0; j < len-i; j++) {\n            if (arr[j] == arr[j+i])\
    \ {\n                dp[j][j+i] = dp[j+1][j+i-1];\n            } else {\n    \
    \            dp[j][j+i] = 1 + std::min(dp[j+1][j+i], dp[j][j+i-1]);\n        \
    \    }\n        }\n    }\n    return dp[0][len-1];", "\tint length = arr.size();\n\
    \tint result = 0;\n\tfor (int i = 0; i < length / 2; i++) {\n\t\tif (arr[i] !=\
    \ arr[length - i - 1]) {\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;", "  int\
    \ size = arr.size();\n  if (size == 0) return 0;\n  int dp[size][size];\n  memset(dp,\
    \ 0, sizeof(dp));\n  int left, right;\n  for (int i = 0; i < size; i++) {\n  \
    \  for (int j = 0; j < size; j++) {\n      if (i >= j) dp[i][j] = 0;\n      else\
    \ {\n        left = arr[i] == arr[j] ? dp[i+1][j-1] : 1 + dp[i+1][j-1];\n    \
    \    right = 1 + dp[i+1][j];\n        dp[i][j] = min(left, right);\n      }\n\
    \    }\n  }\n  return dp[0][size-1];", "    vector<vector<long>> dp(arr.size(),\
    \ vector<long>(arr.size(), 0));\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        dp[i][i] = 0;\n    }\n    for (int i = arr.size() - 1; i >= 0; i--) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n            } else\
    \ {\n                dp[i][j] = min(dp[i + 1][j - 1], min(dp[i + 1][j], dp[i][j\
    \ - 1])) + 1;\n            }\n        }\n    }\n    return dp[0][arr.size() -\
    \ 1];", "    // Your code here\n    int n = arr.size();\n    std::vector<int>\
    \ a(n);\n    for(int i = 0; i < n; i++) {\n        a[i] = arr[i];\n    }\n   \
    \ std::vector<std::vector<int>> dp(n, std::vector<int>(n, 0));\n    for(int i\
    \ = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for(int l = 2; l <= n;\
    \ l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n            int j = i\
    \ + l - 1;\n            if(a[i] == a[j] && l == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if(a[i] == a[j]) {\n                dp[i][j] = dp[i\
    \ + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "\tint ans = 0;\n\tfor (int i = 0; i < arr.size() / 2; i++) {\n\t\t\
    if (arr[i] != arr[arr.size() - i - 1]) {\n\t\t\tans++;\n\t\t}\n\t}\n\treturn ans;",
  "    // Your code here\n    int count = 0;\n    for(int i = 0; i < arr.size()/2;\
    \ i++){\n        if(arr[i] != arr[arr.size()-1-i]){\n            count++;\n  \
    \      }\n    }\n    return count;", "  if (arr.size() == 0) {\n    return 0;\n\
    \  }\n  int ans = 0;\n  int n = arr.size();\n  int i = 0;\n  int j = n - 1;\n\
    \  while (i < j) {\n    if (arr[i] != arr[j]) {\n      ans++;\n    }\n    i++;\n\
    \    j--;\n  }\n  return ans;", "    // your code here\n    int count=0;\n   \
    \ int n=arr.size();\n    for(int i=0;i<n/2;i++)\n    {\n        if(arr[i]!=arr[n-i-1])\n\
    \        {\n            count++;\n        }\n    }\n    return count;", "    //\
    \ Write your code here\n    vector<long> l2r(arr.size());\n    vector<long> r2l(arr.size());\n\
    \    l2r[0] = 0;\n    r2l[arr.size()-1] = 0;\n    for(int i = 1; i < arr.size();\
    \ i++){\n        l2r[i] = l2r[i-1] + (arr[i] == arr[i-1] ? 0 : 1);\n    }\n  \
    \  for(int i = arr.size()-2; i >= 0; i--){\n        r2l[i] = r2l[i+1] + (arr[i]\
    \ == arr[i+1] ? 0 : 1);\n    }\n    long res = arr.size();\n    for(int i = 0;\
    \ i < arr.size(); i++){\n        long tmp = l2r[i] + r2l[i];\n        if(i > 0)\
    \ tmp -= (arr[i] == arr[i-1] ? 0 : 1);\n        if(i < arr.size()-1) tmp -= (arr[i]\
    \ == arr[i+1] ? 0 : 1);\n        res = min(res, tmp);\n    }\n    return res;",
  "  //input validation\n  assert(arr.size() > 0);\n  assert(arr.size() <= 1e5);\n\
    \  assert(std::none_of(arr.begin(), arr.end(), [](long num) { return num > 1e9;\
    \ }));\n  assert(std::none_of(arr.begin(), arr.end(), [](long num) { return num\
    \ < 0; }));\n  //first check if it is a palindrome\n  for (int i = 0; i < arr.size()\
    \ / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      //make it a\
    \ palindrome\n      long left, right;\n      left = arr[i];\n      right = arr[arr.size()\
    \ - 1 - i];\n      arr[i] = std::min(left, right);\n      arr[arr.size() - 1 -\
    \ i] = std::min(left, right);\n    }\n  }\n  //now check if it is a palindrome\n\
    \  long diff = 0;\n  for (int i = 0; i < arr.size() / 2; i++) {\n    if (arr[i]\
    \ != arr[arr.size() - 1 - i]) {\n      diff++;\n    }\n  }\n  return diff;", " \
    \   // your code here\n    int count = 0;\n    int n = arr.size();\n    for(int\
    \ i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1])\n            count++;\n\
    \    }\n    return count;", "    long n = arr.size();\n    long max = 0;\n   \
    \ long dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 1;\n   \
    \ for(long i = 0; i < n - 1; i++)\n        if(arr[i] == arr[i + 1])\n        \
    \    dp[i][i + 1] = 1;\n        else\n            dp[i][i + 1] = 2;\n    for(long\
    \ len = 3; len <= n; len++)\n        for(long i = 0; i < n - len + 1; i++)\n \
    \       {\n            long j = i + len - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n        }\n    return\
    \ dp[0][n - 1];", "    // your code goes here\n    long n = arr.size();\n    std::vector<std::vector<long>>dp(n,\
    \ std::vector<long>(n, 0));\n    for(long i = 0; i < n; i++)\n    {\n        dp[i][i]\
    \ = 0;\n    }\n    for(long L = 2; L <= n; L++)\n    {\n        for(long i = 0;\
    \ i < n - L + 1; i++)\n        {\n            long j = i + L - 1;\n          \
    \  if(arr[i] == arr[j])\n            {\n                dp[i][j] = dp[i + 1][j\
    \ - 1];\n            }\n            else\n            {\n                dp[i][j]\
    \ = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n    }\n\
    \    // for(long i = 0; i < n; i++)\n    // {\n    //     for(long j = 0; j <\
    \ n; j++)\n    //     {\n    //         std::cout << dp[i][j] << \" \";\n    //\
    \     }\n    //     std::cout << std::endl;\n    // }\n    return dp[0][n - 1];",
  "    if(arr.size() == 1) return 0;\n    int diff = 0;\n    for(int i = 0; i < arr.size()/2;\
    \ i++){\n        if(arr[i] != arr[arr.size()-1-i]){\n            diff++;\n   \
    \     }\n    }\n    return diff;", "  int size = arr.size();\n  int l = 0;\n \
    \ int r = size - 1;\n  int count = 0;\n  while (l < r) {\n    if (arr[l] != arr[r])\n\
    \      count++;\n    l++;\n    r--;\n  }\n  return count;", "    int n = arr.size();\n\
    \    int a[n][n];\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n\
    \        {\n            a[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n\
    \    {\n        a[i][i] = 0;\n    }\n    for(int l=2;l<=n;l++)\n    {\n      \
    \  for(int i=0;i<n-l+1;i++)\n        {\n            int j = i+l-1;\n         \
    \   a[i][j] = 99999;\n            if(arr[i] == arr[j])\n            {\n      \
    \          a[i][j] = a[i+1][j-1];\n            }\n            else\n         \
    \   {\n                a[i][j] = 1 + min(a[i+1][j],a[i][j-1]);\n            }\n\
    \        }\n    }\n    return a[0][n-1];", "    std::vector<long> odd;\n    std::vector<long>\
    \ even;\n    long sum = 0;\n    int flag = 0;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i]%2 == 0) {\n            even.push_back(arr[i]);\n \
    \       } else {\n            odd.push_back(arr[i]);\n        }\n    }\n    if(odd.size()\
    \ == 0) {\n        return 0;\n    }\n    std::sort(odd.begin(), odd.end());\n\
    \    std::sort(even.begin(), even.end());\n    for(int i = 1; i < odd.size();\
    \ i++) {\n        if(std::abs(odd[i] - odd[i-1]) == 1) {\n            flag = 1;\n\
    \            break;\n        }\n    }\n    if(flag == 1) {\n        return odd.size()\
    \ - 1;\n    } else {\n        return odd.size();\n    }", "    int l = 0, r =\
    \ arr.size() - 1;\n    int count = 0;\n    while (l < r) {\n        if (arr[l]\
    \ != arr[r]) {\n            count++;\n        }\n        l++;\n        r--;\n\
    \    }\n    return count;", "    // Your code here\n    long n = arr.size();\n\
    \    long m = (n+1)/2;\n    if(n%2)\n        m++;\n    long dp[n][m];\n    for(long\
    \ i=0;i<n;i++)\n        dp[i][0] = 0;\n    long i=1;\n    for(long j=1;j<m;j++){\n\
    \        if(i+1<n)\n            dp[i+1][j] = abs(arr[i]-arr[i+1]);\n        dp[i][j]\
    \ = dp[i][j-1] + abs(arr[i]-arr[i-1]);\n        i+=2;\n    }\n    for(long j=1;j<m;j++){\n\
    \        for(long i=1;i<n;i++){\n            if(i-2>=0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i-2][j-1] + abs(arr[i]-arr[i-2]));\n            dp[i][j]\
    \ = min(dp[i][j], dp[i-1][j-1] + abs(arr[i]-arr[i-1]));\n        }\n    }\n  \
    \  return dp[n-1][m-1];", "  int n = arr.size();\n  int a[n][n];\n  for(int i\
    \ = 0; i < n; i++) {\n    a[i][i] = 0;\n  }\n  for(int l = 2; l <= n; l++) {\n\
    \    for(int i = 0; i < n - l + 1; i++) {\n      int j = i + l - 1;\n      if(arr[i]\
    \ == arr[j]) {\n        a[i][j] = a[i + 1][j - 1];\n      } else {\n        a[i][j]\
    \ = std::min(a[i + 1][j], a[i][j - 1]) + 1;\n      }\n    }\n  }\n  return a[0][n\
    \ - 1];", "    // Write your code here\n    // To print results to the standard\
    \ output you can use PrintTree() function\n    // To print results to the standard\
    \ error you can use PrintDebug() function\n    long len=arr.size();\n    long\
    \ i=0,j=len-1;\n    long ans=0;\n    while(i<j){\n        if(arr[i]!=arr[j]){\n\
    \            ans++;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ ans;", "    if(arr.size()==0) return 0;\n    long n = arr.size();\n    std::vector<std::vector<long>>dp(n,std::vector<long>(n));\n\
    \    for(long i=0;i<n;i++)\n        dp[i][i] = 0;\n    for(long l=2;l<=n;l++){\n\
    \        for(long i=0;i<n-l+1;i++){\n            long j = i+l-1;\n           \
    \ if(arr[i]==arr[j]){\n                dp[i][j] = dp[i+1][j-1];\n            }\n\
    \            else dp[i][j] = 1+std::min(dp[i+1][j],dp[i][j-1]);\n        }\n \
    \   }\n    return dp[0][n-1];", "  std::vector<long> temp = arr;\n  int count\
    \ = 0;\n  for (int i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size()\
    \ - 1 - i]) {\n      count++;\n    }\n  }\n  return count;", "  // Implement a\
    \ solution here\n  std::vector<long> array(arr.size());\n  int middle = (arr.size()/2);\n\
    \  for(int i = 0; i < arr.size(); i++){\n    if(i < middle){\n      array[i] =\
    \ arr[i];\n    }\n    else if (i == middle && arr.size() % 2 == 1){\n      array[i]\
    \ = arr[i];\n    }\n    else if (i == middle && arr.size() % 2 == 0){\n      array[i]\
    \ = arr[arr.size() - i - 1];\n    }\n    else if (i > middle){\n      array[i]\
    \ = arr[arr.size() - i - 1];\n    }\n  }\n  int sum = 0;\n  for(int i = 0; i <\
    \ arr.size(); i++){\n    if(array[i] != arr[i]){\n      sum++;\n    }\n  }\n \
    \ return sum;", "    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for(long i = 0; i < arr.size()/2; i++){\n        sum += arr[arr.size()-1-i]\
    \ - arr[i];\n    }\n    return sum;", "\tint n = arr.size();\n\tint l = 0, r =\
    \ n - 1;\n\tint ans = 0;\n\twhile (l < r) {\n\t\tif (arr[l] != arr[r]) {\n\t\t\
    \tans++;\n\t\t}\n\t\tl++;\n\t\tr--;\n\t}\n\treturn ans;", "    long n = arr.size();\n\
    \    // dp[i][j] is the minimum number of changes needed to make arr[i...j] palindromic\n\
    \    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    // Iterate\
    \ over the subarrays size\n    for (long l = 1; l <= n; l++) {\n        // Iterate\
    \ over all subarrays of size l\n        for (long i = 0; i <= n - l; i++) {\n\
    \            long j = i + l - 1;\n            if (i == j) {\n                dp[i][j]\
    \ = 0;\n            } else if (i + 1 == j) {\n                dp[i][j] = arr[i]\
    \ == arr[j] ? 0 : 1;\n            } else {\n                // If the two endpoints\
    \ are already equal, we don't need to make any changes to get a palindrome\n \
    \               if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i +\
    \ 1][j - 1];\n                } else {\n                    // Otherwise, make\
    \ changes at either endpoint, whichever is less\n                    dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n                }\n           \
    \ }\n        }\n    }\n    return dp[0][n - 1];", "\tint curr = 0;\n\tint i =\
    \ 0;\n\tint j = arr.size() - 1;\n\tint answer = 0;\n\twhile (i < j) {\n\t\t//std::cout\
    \ << i << \" \" << j << std::endl;\n\t\tif (arr[i] == arr[j]) {\n\t\t\ti++;\n\t\
    \t\tj--;\n\t\t}\n\t\telse if (arr[i] < arr[j]) {\n\t\t\tanswer += arr[j] - arr[i];\n\
    \t\t\tarr[j] = arr[i];\n\t\t\tj--;\n\t\t}\n\t\telse {\n\t\t\tanswer += arr[i]\
    \ - arr[j];\n\t\t\tarr[i] = arr[j];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn answer;",
  '    // Your code here', '  return 0;', "  long n = arr.size();\n  if (n <= 1) return\
    \ 0;\n  // subproblems\n  std::vector<std::vector<long>> f(n, std::vector<long>(n,\
    \ -1));\n  // initial condition\n  for (long i = 0; i < n; ++i) {\n    f[i][i]\
    \ = 0;\n    if (i + 1 < n) f[i][i + 1] = 1;\n  }\n  // bottom-up\n  for (long\
    \ len = 3; len <= n; ++len) {\n    for (long start = 0; start + len - 1 < n; ++start)\
    \ {\n      long end = start + len - 1;\n      long min_changes = 2147483647;\n\
    \      for (long mid = start; mid < end; ++mid) {\n        long changes = std::max(f[start][mid],\
    \ f[mid + 1][end]);\n        min_changes = std::min(min_changes, changes);\n \
    \     }\n      f[start][end] = min_changes;\n      if (arr[start] == arr[end])\
    \ {\n        min_changes = std::min(min_changes, f[start + 1][end - 1]);\n   \
    \     f[start][end] = min_changes;\n      }\n    }\n  }\n  return f[0][n - 1];",
  "  // your code here\n  int start = 0;\n  int end = arr.size() - 1;\n  int changes\
    \ = 0;\n  while (start < end) {\n    if (arr[start] != arr[end]) {\n      changes++;\n\
    \    }\n    start++;\n    end--;\n  }\n  return changes;", "    int start = 0;\n\
    \    int end = arr.size() - 1;\n    int wrong_elements = 0;\n    while (start\
    \ < end) {\n        if (arr[start] != arr[end]) {\n            ++wrong_elements;\n\
    \        }\n        ++start;\n        --end;\n    }\n    return wrong_elements;",
  "    // your code here\n    long n = arr.size();\n    vector<vector<long>> dp(n,\
    \ vector<long>(n, 0));\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 1;\n\
    \    for(long i = 0; i < n - 1; i++)\n        if(arr[i] == arr[i + 1])\n     \
    \       dp[i][i + 1] = 1;\n    for(long l = 3; l <= n; l++)\n        for(long\
    \ i = 0; i <= n - l; i++)\n        {\n            long j = i + l - 1;\n      \
    \      if(arr[i] == arr[j] && dp[i + 1][j - 1])\n                dp[i][j] = 1;\n\
    \        }\n    vector<long> minPal(n + 1, 0);\n    for(long i = 1; i <= n; i++)\n\
    \    {\n        minPal[i] = INT_MAX;\n        for(long j = 0; j < i; j++)\n  \
    \          if(dp[j][i - 1])\n                minPal[i] = min(minPal[i], minPal[j]\
    \ + 1);\n    }\n    return minPal[n] - 1;", "  long ans = 0;\n  for (int i = 0;\
    \ i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - i - 1]) {\n \
    \     ans++;\n    }\n  }\n  return ans;", "    long  n = arr.size();\n    std::cout<<\"\
    n = \"<<n<<std::endl;\n    long  ans = 0;\n    long  i = 0;\n    long  j = n -\
    \ 1;\n    while (i < j) {\n        if (arr[i] == arr[j]) {\n            i++;\n\
    \            j--;\n        } else {\n            ans++;\n            i++;\n  \
    \          j--;\n        }\n    }\n    return ans;", "    int l = 0, r = arr.size()\
    \ - 1;\n    int ans = 0;\n    while (l < r) {\n        if (arr[l] != arr[r]) {\n\
    \            if (arr[l] < arr[r]) {\n                arr[l + 1] = arr[l] + arr[l\
    \ + 1];\n            } else {\n                arr[r - 1] = arr[r] + arr[r - 1];\n\
    \            }\n            ans++;\n        }\n        l++;\n        r--;\n  \
    \  }\n    return ans;", "    int n = arr.size();\n    long dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (int l = 2; l <= n; l++) {\n        for (int i = 0;\
    \ i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if (l ==\
    \ 2) {\n                dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n            } else\
    \ {\n                dp[i][j] = arr[i] == arr[j] ? dp[i + 1][j - 1] :\n      \
    \                     1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n            }\n\
    \        }\n    }\n    return dp[0][n - 1];", "    long i = 0;\n    long j = arr.size()\
    \ - 1;\n    long count = 0;\n    while (i < j) {\n        if (arr[i] != arr[j])\
    \ {\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ count;", "  int n = arr.size();\n  if (n == 0) {\n    return 0;\n  }\n  int\
    \ res = INT_MAX;\n  for (int i = 0; i < n; i++) {\n    int left = i - 1;\n   \
    \ int right = i + 1;\n    int changes = 0;\n    while (left >= 0 && right < n)\
    \ {\n      if (arr[left] != arr[right]) {\n        changes++;\n      }\n     \
    \ left--;\n      right++;\n    }\n    res = std::min(res, changes);\n  }\n  return\
    \ res;", "  if (arr.size() < 2) return 0;\n  // Check if array is already palindromic\n\
    \  int l = 0, r = arr.size() - 1;\n  while (l < r) {\n    if (arr[l] != arr[r])\
    \ {\n      break;\n    }\n    l++;\n    r--;\n  }\n  if (l >= r) return 0;\n \
    \ // Count the changes using DP\n  int n = arr.size();\n  std::vector<std::vector<int>>\
    \ dp(n, std::vector<int>(n, INT_MAX));\n  for (int i = 0; i < n; i++) {\n    dp[i][i]\
    \ = 0;\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 0; j < n - i; j++)\
    \ {\n      int k = j + i;\n      if (arr[j] == arr[k]) {\n        dp[j][k] = dp[j\
    \ + 1][k - 1];\n      } else {\n        dp[j][k] = std::min(dp[j + 1][k], dp[j][k\
    \ - 1]) + 1;\n      }\n    }\n  }\n  return dp[0][n - 1];", '    return 0;', '    return
    1;', "    // Your code here\n    long m=arr.size();\n    long n=m/2;\n    long\
    \ i,j;\n    long count=0;\n    for(i=0,j=m-1;i<n,j>=n;i++,j--)\n    {\n      \
    \  if(arr[i]!=arr[j])\n        {\n            count++;\n        }\n    }\n   \
    \ return count;", "    // your code here\n    int len = arr.size();\n    int count\
    \ = 0;\n    int left = 0;\n    int right = len - 1;\n    while(left <= right){\n\
    \        if(arr[left] != arr[right]){\n            count++;\n        }\n     \
    \   left++;\n        right--;\n    }\n    return count;", "    int n = arr.size();\n\
    \    int i = 0, j = n - 1;\n    int count = 0;\n    while (i < j) {\n        if\
    \ (arr[i] != arr[j]) {\n            count++;\n        }\n        i++;\n      \
    \  j--;\n    }\n    return count;", "\tlong n = arr.size();\n\tlong left = 0;\n\
    \tlong right = n - 1;\n\tlong count = 0;\n\twhile (left < right) {\n\t\tif (arr[left]\
    \ != arr[right]) {\n\t\t\tcount++;\n\t\t}\n\t\tleft++;\n\t\tright--;\n\t}\n\t\
    return count;", "  int n = arr.size();\n  int change = 0;\n  for (int i = 0; i\
    \ < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      change++;\n    }\n\
    \  }\n  return change;", "  std::vector<long> temp;\n  for(auto x: arr) temp.push_back(x);\n\
    \  std::reverse(temp.begin(), temp.end());\n  long ans=0;\n  for(auto i=0u; i<temp.size();\
    \ i++) {\n    if(temp[i]!=arr[i]) {\n      if(temp[i]>arr[i]) arr[i]=temp[i];\n\
    \      else temp[i]=arr[i];\n      ans++;\n    }\n  }\n  return ans;", "    std::vector<long>\
    \ dp(arr.size());\n    for(int i = 0; i < arr.size(); i++)\n        dp[i] = arr[i];\n\
    \    for(int i = arr.size() - 2; i >= 0; i--)\n        for(int j = i + 1; j <\
    \ arr.size(); j++)\n            if(arr[i] == arr[j])\n                dp[j] =\
    \ std::min(dp[j], dp[j - 1] + 1);\n            else\n                dp[j] = std::min(dp[j],\
    \ dp[j - 1] + 1);\n    return dp[arr.size() - 1];", "  assert(arr.size() >= 3);\n\
    \  assert(arr.size() <= 10000);\n  return 0;", "  long n = arr.size();\n  long\
    \ res = 0;\n  if (n % 2 == 0) {\n    for (long i = 0; i < n / 2; i++) {\n    \
    \  res += abs(arr[i] - arr[n - i - 1]);\n    }\n  } else {\n    for (long i =\
    \ 0; i < n / 2; i++) {\n      res += abs(arr[i] - arr[n - i - 1]);\n    }\n  }\n\
    \  return res;", "  long n = arr.size();\n  // Create a table to store results\
    \ of subproblems\n  long table[n][n];\n  // Each number itself is considered to\
    \ be a\n  // palindrome\n  for (long i = 0; i < n; i++)\n    table[i][i] = 0;\n\
    \  // clang-format off\n  // Fill the table from bottom to up\n  for (long len\
    \ = 2; len <= n; len++) {\n    for (long i = 0; i < n - len + 1; i++) {\n    \
    \  long j = i + len - 1;\n      // If the first and last characters are same\n\
    \      // then the number of changes required is\n      // same as the number\
    \ of changes required\n      // for the substring starting at second\n      //\
    \ character and ending at second last\n      // character\n      if (arr[i] ==\
    \ arr[j])\n        table[i][j] = table[i + 1][j - 1];\n      // Else we need to\
    \ consider two cases and\n      // find minimum value from both cases\n      else\n\
    \        table[i][j] = 1 + std::min(table[i][j - 1], table[i + 1][j]);\n    }\n\
    \  }\n  // clang-format on\n  return table[0][n - 1];", "    //your code here\n\
    \    std::vector<long> mirror;\n    //reverse the array and store it in mirror\n\
    \    for(int i=arr.size()-1;i>=0;i--)\n    {\n        mirror.push_back(arr[i]);\n\
    \    }\n    //Now we want to find the length of longest common subsequence between\
    \ two arrays\n    //this should be equal to length of LCS\n    int LCS[arr.size()+1][mirror.size()+1];\n\
    \    for(int i=0;i<=arr.size();i++)\n    {\n        for(int j=0;j<=mirror.size();j++)\n\
    \        {\n            if(i==0 || j==0)\n            {\n                LCS[i][j]=0;\n\
    \            }\n            else if(arr[i-1]==mirror[j-1])\n            {\n  \
    \              LCS[i][j]=LCS[i-1][j-1]+1;\n            }\n            else\n \
    \           {\n                LCS[i][j]=std::max(LCS[i-1][j],LCS[i][j-1]);\n\
    \            }\n        }\n    }\n    int ans=arr.size()-LCS[arr.size()][mirror.size()];\n\
    \    return ans;", "    int n = arr.size();\n    std::vector<std::vector<int>>\
    \ dp(n, std::vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (int len = 2; len <= n; len++) {\n        for (int i =\
    \ 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if\
    \ (arr[i] == arr[j] && len == 2) {\n                dp[i][j] = 2;\n          \
    \  } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1]\
    \ + 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j],\
    \ dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];",
  "\tint n = arr.size();\n\t//std::cout << n << \"\\n\";\n\tint s = 0;\n\tint e =\
    \ n - 1;\n\tint count = 0;\n\twhile (s < e) {\n\t\tif (arr[s] != arr[e]) {\n\t\
    \t\tcount++;\n\t\t}\n\t\ts++;\n\t\te--;\n\t}\n\treturn count;", "    // your code\
    \ here\n    std::string v;\n    for(auto el : arr) v += std::to_string(el);\n\
    \    std::string s = v;\n    std::reverse(s.begin(), s.end());\n    std::vector<std::vector<long>>\
    \ dp(v.size() + 1, std::vector<long>(s.size() + 1, 0));\n    for(int i = 1; i\
    \ <= v.size(); i++) {\n        for(int j = 1; j <= s.size(); j++) {\n        \
    \    if(v[i - 1] == s[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] +\
    \ 1;\n            } else {\n                dp[i][j] = std::max(dp[i - 1][j],\
    \ dp[i][j - 1]);\n            }\n        }\n    }\n    return v.size() - dp[v.size()][s.size()];",
  "    int n = arr.size();\n    int a[n][n];\n    memset(a, 0, sizeof(a));\n    for\
    \ (int i = 0; i < n; i++)\n        a[i][i] = 1;\n    for (int L = 2; L <= n; L++)\
    \ {\n        for (int i = 0; i < n - L + 1; i++) {\n            int j = i + L\
    \ - 1;\n            if (arr[i] == arr[j] && L == 2)\n                a[i][j] =\
    \ 2;\n            else if (arr[i] == arr[j])\n                a[i][j] = a[i +\
    \ 1][j - 1] + 2;\n            else\n                a[i][j] = std::max(a[i][j\
    \ - 1], a[i + 1][j]);\n        }\n    }\n    return n - a[0][n - 1];", "    //\
    \ your code here\n    int n = arr.size();\n    if(n==0){\n        return 0;\n\
    \    }\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n \
    \   for(int i=0; i<n; i++){\n        dp[i][i] = 0;\n    }\n    for(int len=2;\
    \ len<=n; len++){\n        for(int i=0; i<n-len+1; i++){\n            int j =\
    \ i+len-1;\n            if(arr[i] == arr[j]){\n                dp[i][j] = dp[i+1][j-1];\n\
    \            }\n            else{\n                dp[i][j] = std::min(dp[i+1][j],\
    \ dp[i][j-1]) + 1;\n            }\n        }\n    }\n    return dp[0][n-1];",
  "    int n = arr.size();\n    int l = 0, r = n - 1;\n    int cnt = 0;\n    while\
    \ (l < r) {\n        if (arr[l] != arr[r]) {\n            arr[l] = arr[r];\n \
    \           cnt++;\n        }\n        l++;\n        r--;\n    }\n    return cnt;",
  "    long start = 0;\n    long end = arr.size() - 1;\n    long changes = 0;\n  \
    \  while (start < end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n\
    \        }\n        start++;\n        end--;\n    }\n    return changes;", " \
    \   // Replace the following line with your solution\n    //std::cout << \"You\
    \ haven't implemented smallest_change() yet.\" << std::endl;\n    //int len =\
    \ arr.size();\n    if(arr.size()==0)\n        return 0;\n    int odd = arr.size()\
    \ % 2 == 1;\n    int half = (arr.size()-1)/2;\n    std::map<long, int> counts;\n\
    \    int count = 0;\n    for(int i = 0; i < half; i++){\n        long a = arr[i];\n\
    \        long b = arr[arr.size()-1-i];\n        counts[a]++;\n        counts[b]++;\n\
    \        if(a!=b)\n            count++;\n    }\n    if(odd){\n        if(counts[arr[half]]\
    \ > 1)\n            count++;\n    }\n    return count;", "  size_t n = arr.size();\n\
    \  if (n < 2) {\n    return 0;\n  }\n  if (n == 2) {\n    return abs(arr[0] -\
    \ arr[1]);\n  }\n  long ans = 0;\n  for (size_t i = 0; i < n / 2; ++i) {\n   \
    \ ans += abs(arr[i] - arr[n - i - 1]);\n  }\n  return ans;", "  long minChanges\
    \ = 0;\n  int size = arr.size();\n  int mid = (size / 2);\n  if (size == 1) {\n\
    \    return 0;\n  }\n  if (size % 2 == 0) {\n    int i = 0;\n    int j = size\
    \ - 1;\n    while (i <= mid) {\n      if (arr[i] != arr[j]) {\n        minChanges++;\n\
    \      }\n      i++;\n      j--;\n    }\n  } else {\n    int i = 0;\n    int j\
    \ = size - 1;\n    while (i < mid) {\n      if (arr[i] != arr[j]) {\n        minChanges++;\n\
    \      }\n      i++;\n      j--;\n    }\n  }\n  return minChanges;", "\tint n\
    \ = arr.size();\n\tlong ans[n][n];\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int\
    \ j = 0; j < n; j++) {\n\t\t\tans[i][j] = INT_MAX;\n\t\t}\n\t}\n\tfor (int i =\
    \ 0; i < n; i++) {\n\t\tans[i][i] = 0;\n\t}\n\tfor (int start = n - 1; start >=\
    \ 0; start--) {\n\t\tfor (int end = start + 1; end < n; end++) {\n\t\t\tif (arr[start]\
    \ == arr[end]) {\n\t\t\t\tans[start][end] = ans[start + 1][end - 1];\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\tans[start][end] = 1 + std::min(ans[start + 1][end], ans[start][end\
    \ - 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans[0][n - 1];", '  return 0;', "    int\
    \ l = 0, r = arr.size() - 1;\n    while (l < r) {\n        if (arr[l] != arr[r])\n\
    \            break;\n        l++;\n        r--;\n    }\n    if (l == r)\n    \
    \    return 0;\n    int cnt1 = 0, cnt2 = 0;\n    int i = l, j = r;\n    while\
    \ (i < j) {\n        if (arr[i] != arr[j])\n            cnt1++;\n        i++;\n\
    \        j--;\n    }\n    i = l + 1, j = r;\n    while (i < j) {\n        if (arr[i]\
    \ != arr[j])\n            cnt2++;\n        i++;\n        j--;\n    }\n    return\
    \ std::min(cnt1, cnt2);", "\tassert(arr.size() > 0);\n\tlong ans = 0;\n\tfor (int\
    \ i = 0; i < arr.size() / 2; i++) {\n\t\tans += abs(arr[i] - arr[arr.size() -\
    \ 1 - i]);\n\t}\n\treturn ans;", "\tint n = arr.size();\n\tstd::vector<std::vector<int>>\
    \ dp(n, std::vector<int>(n, 0));\n\tfor (int k = 0; k < n; k++) {\n\t\tfor (int\
    \ i = 0, j = k; j < n; i++, j++) {\n\t\t\tif (k == 0) {\n\t\t\t\tdp[i][j] = 0;\n\
    \t\t\t} else if (k == 1) {\n\t\t\t\tdp[i][j] = (arr[i] == arr[j]) ? 0 : 1;\n\t\
    \t\t} else {\n\t\t\t\tdp[i][j] = (arr[i] == arr[j]) ? dp[i + 1][j - 1] : std::min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];", " \
    \   // your code here\n    long res=0;\n    long n=arr.size();\n    long i=0,j=n-1;\n\
    \    while(i<j){\n      if(arr[i]==arr[j]){\n        i++;\n        j--;\n    \
    \  }\n      else{\n        if(arr[i]<arr[j]){\n          res+=arr[j]-arr[i];\n\
    \          arr[j] = arr[i];\n          i++;\n          j--;\n        }\n     \
    \   else{\n          res+=arr[i]-arr[j];\n          arr[i] = arr[j];\n       \
    \   i++;\n          j--;\n        }\n      }\n    }\n    return res;", "  if (arr.size()\
    \ == 0) {\n    return 0;\n  }\n  int counter = 0;\n  for (int i = 0; i < arr.size()\
    \ / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      counter++;\n\
    \    }\n  }\n  return counter;", '  // your code here', "    long result = 0;\n\
    \    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size()\
    \ - 1 - i]) {\n            result++;\n        }\n    }\n    return result;", " \
    \   long n = arr.size();\n    long left = 0, right = n - 1;\n    long count =\
    \ 0;\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n   \
    \         if (arr[left] < arr[right])\n                left++;\n            else\n\
    \                right--;\n            count++;\n        } else {\n          \
    \  left++;\n            right--;\n        }\n    }\n    return count;", "\t//\
    \ TODO: your code here\n\treturn 0;", "    int count = 0;\n    for(int i = 0;\
    \ i < arr.size()/2; i++){\n        if(arr[i] != arr[arr.size()-1-i]){\n      \
    \      count++;\n        }\n    }\n    return count;", "    int n = arr.size();\n\
    \    std::vector<std::vector<int>> dp(n, std::vector<int>(n,0));\n    // Solve\
    \ for every possible subproblem i to j \n    for(int i = 0; i < n; i++) {\n  \
    \      for(int j = i; j >= 0; j--) {\n            if(j == i) {\n             \
    \   dp[j][i] = 0;\n            }\n            else if(j == i-1) {\n          \
    \      dp[j][i] = arr[j] == arr[i] ? 0 : 1;\n            }\n            else {\n\
    \                if(arr[j] == arr[i]) {\n                    dp[j][i] = dp[j+1][i-1];\n\
    \                }\n                else {\n                    dp[j][i] = 1 +\
    \ std::min(dp[j+1][i], dp[j][i-1]);\n                }\n            }\n      \
    \  }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int l, r;\n\
    \    int min = INT_MAX;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        if (arr[i] != arr[n - i - 1]) {\n            min = min < arr[i] ? min\
    \ : arr[i];\n            min = min < arr[n - i - 1] ? min : arr[n - i - 1];\n\
    \            count++;\n        }\n    }\n    return count < min ? count : min;",
  "    assert(arr.size() > 0);\n    long count = 0;\n    if (arr.size() == 1)\n  \
    \      return 0;\n    if (arr.size() == 2)\n        return 1;\n    int n = arr.size();\n\
    \    int start = 0;\n    int end = n - 1;\n    while (start < end) {\n       \
    \ if (arr[start] == arr[end]) {\n            start++;\n            end--;\n  \
    \      } else {\n            if (arr[start] < arr[end]) {\n                arr[start\
    \ + 1] = arr[start];\n                start++;\n                count++;\n   \
    \         } else {\n                arr[end - 1] = arr[end];\n               \
    \ end--;\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "  long n = arr.size();\n  std::vector<std::vector<long>> edits(n,\
    \ std::vector<long>(n, 0));\n  for (long i = n - 1; i >= 0; i--) {\n    for (long\
    \ j = i; j < n; j++) {\n      if (i == j) {\n        edits[i][j] = 0;\n      }\
    \ else if (arr[i] == arr[j]) {\n        edits[i][j] = edits[i + 1][j - 1];\n \
    \     } else {\n        edits[i][j] = std::min(edits[i + 1][j], edits[i][j - 1])\
    \ + 1;\n      }\n    }\n  }\n  return edits[0][n - 1];", "  std::reverse(arr.begin(),\
    \ arr.end());\n  std::cout << std::endl;\n  int arr_size = arr.size();\n  int\
    \ res = 0;\n  for (int i = 0; i < arr_size / 2; i++) {\n    if (arr[i] != arr[arr_size\
    \ - i - 1]) {\n      if (arr[i] < arr[arr_size - i - 1]) {\n        arr[i] = arr[arr_size\
    \ - i - 1];\n      } else {\n        arr[arr_size - i - 1] = arr[i];\n      }\n\
    \      res++;\n    }\n  }\n  return res;", "  int n = arr.size();\n  int isMirror[n][n];\n\
    \  for(int i = 0; i < n; i++) {\n    isMirror[i][i] = 1;\n  }\n  for(int i = 0;\
    \ i < n - 1; i++) {\n    if(arr[i] == arr[i + 1]) {\n      isMirror[i][i + 1]\
    \ = 1;\n    } else {\n      isMirror[i][i + 1] = 0;\n    }\n  }\n  for(int i =\
    \ 2; i < n; i++) {\n    for(int j = 0; j < n - i; j++) {\n      if(arr[j] == arr[j\
    \ + i] && isMirror[j + 1][j + i - 1]) {\n        isMirror[j][j + i] = 1;\n   \
    \   } else {\n        isMirror[j][j + i] = 0;\n      }\n    }\n  }\n  int diff[n];\n\
    \  for(int i = 0; i < n; i++) {\n    if(isMirror[0][i]) {\n      diff[i] = 0;\n\
    \    } else {\n      diff[i] = INT_MAX;\n      for(int j = 0; j < i; j++) {\n\
    \        if(isMirror[j + 1][i] && 1 + diff[j] < diff[i]) {\n          diff[i]\
    \ = 1 + diff[j];\n        }\n      }\n    }\n  }\n  return diff[n - 1];", "\t\
    //Your code here\n\tlong n = arr.size();\n\tlong start = 0;\n\tlong end = n -\
    \ 1;\n\tlong count = 0;\n\twhile (start < end) {\n\t\tif (arr[start] != arr[end])\
    \ {\n\t\t\tif (arr[start] < arr[end]) {\n\t\t\t\tarr[start + 1] = arr[start];\n\
    \t\t\t}\n\t\t\telse if (arr[start] > arr[end]) {\n\t\t\t\tarr[end - 1] = arr[end];\n\
    \t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tstart++;\n\t\tend--;\n\t}\n\treturn count;",
  "  long a=0, b=arr.size()-1;\n  long changes = 0;\n  while(a<b){\n    if(arr[a]!=arr[b]){\n\
    \      changes++;\n    }\n    a++;\n    b--;\n  }\n  return changes;", "  int\
    \ N = arr.size();\n  if (N == 0) return 0;\n  if (N == 1) return 1;\n  // Make\
    \ the vector symmetric\n  int count = 0;\n  for (int i = 0; i < N / 2; i++) {\n\
    \    while (arr[i] != arr[N - i - 1]) {\n      int d = arr[N - i - 1] - arr[i];\n\
    \      arr[i] += d;\n      arr[N - i - 1] -= d;\n      if (arr[i] < 0) arr[i]\
    \ = 0;\n      if (arr[N - i - 1] < 0) arr[N - i - 1] = 0;\n      count++;\n  \
    \  }\n  }\n  // Make sure the whole vector is positive\n  for (int i = 0; i <\
    \ N; i++) {\n    if (arr[i] < 0) {\n      count += -arr[i];\n    }\n  }\n  return\
    \ count;", "    long int n = arr.size();\n    if(n == 0 || n == 1){\n        return\
    \ 0;\n    }\n    int dp[n][n];\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            dp[i][j] = 0;\n        }\n    }\n    for(int\
    \ i = 0; i < n-1; i++){\n        if(arr[i] != arr[i+1]){\n            dp[i][i+1]\
    \ = 1;\n        }\n    }\n    for(int gap = 2; gap < n; gap++){\n        for(int\
    \ i = 0; i < n-gap; i++){\n            int j = i+gap;\n            if(arr[i] ==\
    \ arr[j]){\n                dp[i][j] = dp[i+1][j-1];\n            }\n        \
    \    else{\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \            }\n        }\n    }\n    return dp[0][n-1];", "    if(arr.size()\
    \ == 0) return 0;\n    long n = arr.size();\n    long dp[n][n];\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(i >= j) dp[i][j] = 0;\n            else\
    \ if(arr[i] == arr[j]) dp[i][j] = dp[i+1][j-1];\n            else dp[i][j] = 1\
    \ + std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];",
  "    std::vector<long> vec;\n    long size = arr.size();\n    for(long i = 0; i\
    \ < size/2; i++) {\n        vec.push_back(arr[i] + arr[size-1-i]);\n    }\n  \
    \  long maxV = *max_element(vec.begin(), vec.end());\n    std::vector<long>::iterator\
    \ it = std::find(vec.begin(), vec.end(), maxV);\n    long index = it - vec.begin();\n\
    \    long num = maxV - arr[index] - arr[size-1-index];\n    return num;", "  \
    \  int size = arr.size();\n    long ans = 0;\n    int mid = size/2;\n    for(int\
    \ i = 0; i < mid; i++) {\n        if(arr[i] != arr[size-i-1])\n            ans++;\n\
    \    }\n    return ans;", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (int gap = 1; gap < n; gap++) {\n        for (int i\
    \ = 0, j = gap; j < n; i++, j++) {\n            if (arr[i] == arr[j])\n      \
    \          dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = std::min(dp[i][j - 1], dp[i + 1][j]) + 1;\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    long i,j,c=0;\n    for(i=0,j=arr.size()-1;i<j;i++,j--)\n    {\n\
    \        if(arr[i]!=arr[j])\n        {\n            arr[i]=arr[j];\n         \
    \   c++;\n        }\n    }\n    return c;", "    long size = arr.size();\n   \
    \ long res = size;\n    long change = 0;\n    for (long i = 0; i < size / 2; i++)\
    \ {\n        if (arr[i] != arr[size - i - 1])\n            change++;\n    }\n\
    \    if (change == 1 || (change == 0 && size % 2 == 1))\n        res = change;\n\
    \    return res;", "    // Your code here\n    int n = arr.size();\n    int mini\
    \ = 0;\n    int inc = 0;\n    int dec = n-1;\n    while(inc < dec){\n        mini\
    \ += std::abs(arr[inc]-arr[dec]);\n        inc++;\n        dec--;\n    }\n   \
    \ return mini;", "  // Your code here\n  long n = arr.size();\n  if(n == 0) return\
    \ 0;\n  long dp[n][n];\n  memset(dp, 0, sizeof(dp));\n  // dp[i][j] : minimum\
    \ changes in arr[i..j] to make it palindromic\n\n  // iterate on length of substring\n\
    \  for(long len = 1; len <= n; len++) {\n    // iterate on starting index\n  \
    \  for(long i = 0; i + len - 1 < n; i++) {\n      long j = i + len - 1;\n    \
    \  if(i == j) {\n        dp[i][j] = 0;\n      } else if(i + 1 == j) {\n      \
    \  dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n      } else {\n        dp[i][j] = 1\
    \ + std::min(dp[i + 1][j], dp[i][j - 1]);\n        if(arr[i] == arr[j]) {\n  \
    \        dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1]);\n        }\n      }\n\
    \    }\n  }\n  return dp[0][n - 1];", "    long i=0,j=arr.size()-1,c=0;\n    while(i<j){\n\
    \        if(arr[i]!=arr[j]){\n            c++;\n        }\n        i++;\n    \
    \    j--;\n    }\n    return c;", "    long n = arr.size();\n    vector<vector<long>>\
    \ dp(n, vector<long>(n, 0));\n    for (long i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (long cl = 2; cl <= n; cl++) {\n        for (long i = 0;\
    \ i < n - cl + 1; i++) {\n            long j = i + cl - 1;\n            if (arr[i]\
    \ == arr[j] && cl == 2) {\n                dp[i][j] = 2;\n            } else if\
    \ (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n   \
    \         } else {\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    int i, j,\
    \ k, L;\n    for (i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for (L = 2; L\
    \ <= n; L++) {\n        for (i = 0; i < n - L + 1; i++) {\n            j = i +\
    \ L - 1;\n            if (arr[i] == arr[j] && L == 2)\n                dp[i][j]\
    \ = 2;\n            else if (arr[i] == arr[j])\n                dp[i][j] = dp[i\
    \ + 1][j - 1] + 2;\n            else\n                dp[i][j] = std::max(dp[i][j\
    \ - 1], dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n - 1];", "   \
    \ // your code here\n    long ans=0;\n    std::vector<long> a=arr;\n    reverse(a.begin(),a.end());\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=a[i]){\n            ans++;\n\
    \        }\n    }\n    return ans;", "    if(arr.size() == 1) return 0;\n    if(arr.size()\
    \ == 2) {\n        if(arr[0] == arr[1]) return 0;\n        else return 1;\n  \
    \  }\n    int N = arr.size();\n    std::vector<std::vector<int>> dp(N, std::vector<int>(N,\
    \ 0));\n    int min_changes = INT_MAX;\n    for(int i = 0; i < N; i++) {\n   \
    \     dp[i][i] = 0;\n        dp[i][i+1] = arr[i] == arr[i+1] ? 0 : 1;\n    }\n\
    \    for(int len = 3; len <= N; len++) {\n        for(int i = 0; i <= N-len; i++)\
    \ {\n            int j = i + len - 1;\n            if(arr[i] == arr[j]) dp[i][j]\
    \ = dp[i+1][j-1];\n            else dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][N-1];", "\tint retVal = 0;\n\tint count =\
    \ 0;\n\tfor (int i = 0; i < arr.size() / 2; i++) {\n\t\tif (arr[i] != arr[arr.size()\
    \ - 1 - i]) {\n\t\t\tretVal++;\n\t\t}\n\t}\n\treturn retVal;", "    int n = arr.size();\n\
    \    int count = 0;\n    int j = n-1;\n    for(int i = 0; i < n/2; i++){\n   \
    \     while(arr[i] != arr[j]){\n            arr[j] -= 1;\n            count++;\n\
    \        }\n        j--;\n    }\n    return count;", "   long ans = 0;\n   for(int\
    \ i = 0; i < arr.size()/2; i++){\n   \tif(arr[i] != arr[arr.size()-1-i])\n   \t\
    \tans++;\n   }\n   return ans;", "  int N = arr.size();\n  int num_unmatched =\
    \ 0;\n  int j = N-1;\n  for (int i = 0; i < N/2; i++) {\n    if (arr[i] != arr[j])\
    \ num_unmatched++;\n    j--;\n  }\n  return num_unmatched;", "    long ans = 0;\n\
    \    for(int i = 0; i < arr.size()/2; i++){\n        if(arr[i] != arr[arr.size()-1-i]){\n\
    \            ans++;\n        }\n    }\n    return ans;", "  long n = arr.size();\n\
    \  int count = 0;\n  for (int i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      if (arr[i] > arr[n - i - 1]) {\n        arr[n - i - 1] =\
    \ arr[i];\n      } else {\n        arr[i] = arr[n - i - 1];\n      }\n      count++;\n\
    \    }\n  }\n  return count;", "    long ans = 0;\n    int start=0, end=arr.size()-1;\n\
    \    while(start<end){\n        if(arr[start]!=arr[end]){\n            if(arr[start]<arr[end])\
    \ {\n                arr[start+1] = arr[start];\n                start++;\n  \
    \          }\n            else {\n                arr[end-1] = arr[end];\n   \
    \             end--;\n            }\n            ans++;\n        }\n        else\
    \ {\n            start++;\n            end--;\n        }\n    }\n    return ans;",
  "  long arr_size = arr.size();\n  long table[arr_size][arr_size];\n  long l,h,len,i;\n\
    \  for(i=0;i<arr_size;i++)\n    table[i][i] = 0;\n  for(len=2;len<=arr_size;len++){\n\
    \    for(l=0;l<arr_size-len+1;l++){\n      h = l+len-1;\n      if(arr[l] == arr[h])\n\
    \        table[l][h] = table[l+1][h-1];\n      else\n        table[l][h] = std::min(table[l][h-1],table[l+1][h])+1;\n\
    \    }\n  }\n  return table[0][arr_size-1];", "  int smallest_change = 0;\n  int\
    \ arr_len = arr.size();\n  for (int i = 0; i < arr_len / 2; i++) {\n    if (arr[i]\
    \ != arr[arr_len - 1 - i]) {\n      smallest_change++;\n    }\n  }\n  return smallest_change;",
  "    int N = arr.size();\n    int i = 0, j = N - 1;\n    int count = 0;\n    while\
    \ (i < j) {\n        if (arr[i] != arr[j]) {\n            arr[i] = arr[j];\n \
    \           count++;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ count;", "    // your code here\n    int count = 0;\n    for(int i = 0; i <\
    \ arr.size()/2; i++){\n      if(arr[i] == arr[arr.size()-1-i]){\n        continue;\n\
    \      }\n      else{\n        count++;\n      }\n    }\n    return count;"]
stop_tokens:
- "\n}"
