name: HumanEval_141_file_name_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes\
  \ a string representing a file's name, and returns\n// 'Yes' if the the file's name\
  \ is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid\
  \ if and only if all the following conditions \n// are met:\n// - There should not\
  \ be more than three digits ('0'-'9') in the file's name.\n// - The file's name\
  \ contains exactly one dot '.'\n// - The substring before the dot should not be\
  \ empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  // Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"\
  1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
  example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
  No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
  K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
  ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
  _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
  \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
  this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
  )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n\
  \    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
  @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
  )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
  I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"\
  Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
  1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) ==\
  \ (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"\
  final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"\
  No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"\
  s.\")) == (\"No\"));\n}\n"
completions: ["  int count_digits = 0;\n  bool is_valid = true;\n  int count_dots\
    \ = 0;\n  bool is_before_dot_valid = false;\n  bool is_after_dot_valid = false;\n\
    \  int i = 0;\n  while (file_name[i] != '\\0') {\n    if (isdigit(file_name[i]))\
    \ {\n      count_digits++;\n    }\n    if (file_name[i] == '.') {\n      count_dots++;\n\
    \    }\n    if ((file_name[i] == '.' && file_name[i + 1] == '.') || (file_name[i]\
    \ == '.' && file_name[i + 1] == '\\0')) {\n      is_valid = false;\n      break;\n\
    \    }\n    i++;\n  }\n  if (count_digits > 3) {\n    is_valid = false;\n  }\n\
    \  if (count_dots != 1) {\n    is_valid = false;\n  }\n  if ((file_name[0] ==\
    \ '.') || (isdigit(file_name[0]))) {\n    is_valid = false;\n  }\n  // Implement\n\
    \  std::string before_dot = \"\";\n  std::string after_dot = \"\";\n  for (i =\
    \ 0; i < file_name.length(); i++) {\n    if (file_name[i] == '.') {\n      after_dot\
    \ = file_name.substr(i + 1, file_name.length() - 1);\n      break;\n    }\n  \
    \  before_dot = before_dot + file_name[i];\n  }\n  if ((before_dot != \"\") &&\
    \ ((before_dot[0] >= 'a' && before_dot[0] <= 'z') || (before_dot[0] >= 'A' &&\
    \ before_dot[0] <= 'Z'))) {\n    is_before_dot_valid = true;\n  }\n  if ((after_dot\
    \ == \"txt\") || (after_dot == \"exe\") || (after_dot == \"dll\")) {\n    is_after_dot_",
  "  std::string pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\";\n  std::regex\
    \ reg(pattern);\n  if (std::regex_match(file_name, reg)) return \"Yes\";\n  return\
    \ \"No\";", "    if (file_name.find('.') == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find('.')\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    std::string file_name_without_extension\
    \ = file_name.substr(0, file_name.find('.'));\n    if (file_name_without_extension.length()\
    \ == 0) {\n        return \"No\";\n    }\n    int count = 0;\n    for (int i =\
    \ 0; i < file_name_without_extension.length(); i++) {\n        if (isdigit(file_name_without_extension[i]))\
    \ {\n            count++;\n        }\n    }\n    if (count > 3) {\n        return\
    \ \"No\";\n    }\n    if (!isalpha(file_name_without_extension[0])) {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";", "    bool temp[3] = {false, false,\
    \ false};\n    if (file_name.size() < 1) return \"No\";\n    if (file_name[0]\
    \ < 'a' || file_name[0] > 'z') return \"No\";\n    int idx;\n    for (idx = 1;\
    \ idx < file_name.size(); idx++) {\n        if (file_name[idx] >= '0' && file_name[idx]\
    \ <= '9') temp[0] = true;\n        else if (file_name[idx] == '.') {\n       \
    \     temp[1] = true;\n            break;\n        }\n        else if (file_name[idx]\
    \ >= 'a' && file_name[idx] <= 'z') continue;\n        else return \"No\";\n  \
    \  }\n    if (!temp[1]) return \"No\";\n    if (idx > 4) return \"No\";\n    idx++;\n\
    \    if (file_name.size() - idx < 3) return \"No\";\n    if (file_name.substr(idx,\
    \ 3) == \"txt\") temp[2] = true;\n    else if (file_name.substr(idx, 3) == \"\
    exe\") temp[2] = true;\n    else if (file_name.substr(idx, 3) == \"dll\") temp[2]\
    \ = true;\n    if (temp[0] && temp[1] && temp[2]) return \"Yes\";\n    return\
    \ \"No\";", "\tint len = file_name.length();\n\tint count=0;\n\tfor(int i=0;i<len;i++)\n\
    \t{\n\t\tif(file_name[i]>='0' && file_name[i]<='9')\n\t\t\tcount++;\n\t}\n\tif(count>3)\n\
    \t\treturn \"No\";\n\tint dot = file_name.find(\".\");\n\tif(dot==-1)\n\t\treturn\
    \ \"No\";\n\tstd::string filename = file_name.substr(0,dot);\n\tstd::string extension\
    \ = file_name.substr(dot+1,len-dot-1);\n\tif(filename.length()==0)\n\t\treturn\
    \ \"No\";\n\tif(filename[0]>='a' && filename[0]<='z' || filename[0]>='A' && filename[0]<='Z')\n\
    \t{\n\t\tif(extension==\"txt\" || extension==\"exe\" || extension==\"dll\")\n\t\
    \t\treturn \"Yes\";\n\t\telse\n\t\t\treturn \"No\";\n\t}\n\telse\n\t\treturn \"\
    No\";", "\tint point = 0;\n\tint count = 0;\n\tint len = file_name.length();\n\
    \tint h = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tpoint = i;\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\th++;\n\t\t}\n\t}\n\tif (h > 3) {\n\t\treturn \"No\";\n\t}\n\
    \tif (file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[point + 1] == 't'\
    \ && file_name[point + 2] == 'x' && file_name[point + 3] == 't') {\n\t\treturn\
    \ \"Yes\";\n\t}\n\tif (file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[point\
    \ + 1] == 'e' && file_name[point + 2] == 'x' && file_name[point + 3] == 'e') {\n\
    \t\treturn \"Yes\";\n\t}\n\tif (file_name[0] >= 'a' && file_name[0] <= 'z' &&\
    \ file_name[point + 1] == 'd' && file_name[point + 2] == 'l' && file_name[point\
    \ + 3] == 'l') {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "\tint count=0;\n\
    \tint count1=0;\n\tint count2=0;\n\tint count3=0;\n\tint count4=0;\n\tfor(int\
    \ i=0;i<file_name.length();i++)\n\t{\n\t\tif(file_name[i]=='.')\n\t\t{\n\t\t\t\
    count++;\n\t\t}\n\t\tif(file_name[i]>='0' && file_name[i]<='9')\n\t\t{\n\t\t\t\
    count1++;\n\t\t}\n\t\tif(file_name[i]>='a' && file_name[i]<='z')\n\t\t{\n\t\t\t\
    count2++;\n\t\t}\n\t\tif(file_name[i]>='A' && file_name[i]<='Z')\n\t\t{\n\t\t\t\
    count3++;\n\t\t}\n\t\tif(file_name[i]=='.')\n\t\t{\n\t\t\tcount4++;\n\t\t}\n\t\
    }\n\tif(count1<=3 && count==1 && count2>=1 || count3>=1 && count4==1)\n\t{\n\t\
    \treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}", "    int dot_pos\
    \ = file_name.find('.');\n    assert(dot_pos != -1);\n    int count = 0;\n   \
    \ for (int i = 0; i < dot_pos; i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    std::string substr_before_dot = file_name.substr(0,\
    \ dot_pos);\n    std::string substr_after_dot = file_name.substr(dot_pos + 1);\n\
    \    if (((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z')) && (substr_after_dot == \"txt\" || substr_after_dot\
    \ == \"exe\" || substr_after_dot == \"dll\")) {\n        return \"Yes\";\n   \
    \ }\n    return \"No\";", "    bool res = true;\n    if (file_name.length() <\
    \ 7)\n        res = false;\n    int cnt = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9')\n          \
    \  cnt++;\n    }\n    if (cnt > 3)\n        res = false;\n    for (int i = 0;\
    \ i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n       \
    \     if (i == 0 || i == file_name.length() - 1)\n                res = false;\n\
    \            else if (file_name[i - 1] >= 'a' && file_name[i - 1] <= 'z' || file_name[i\
    \ - 1] >= 'A' && file_name[i - 1] <= 'Z') {\n                if (file_name[i +\
    \ 1] == 't' && file_name[i + 2] == 'x' && file_name[i + 3] == 't') {\n       \
    \             continue;\n                } else if (file_name[i + 1] == 'e' &&\
    \ file_name[i + 2] == 'x' && file_name[i + 3] == 'e') {\n                    continue;\n\
    \                } else if (file_name[i + 1] == 'd' && file_name[i + 2] == 'l'\
    \ && file_name[i + 3] == 'l') {\n                    continue;\n             \
    \   } else {\n                    res = false;\n                }\n          \
    \  } else {\n                res = false;\n            }\n        }\n    }\n \
    \   if (res) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n\
    \    }", "    int n = file_name.size();\n    if(n == 0) return \"No\";\n    int\
    \ count_dot = 0;\n    for(int i = 0; i < n; i++) {\n        if(file_name[i] ==\
    \ '.') count_dot++;\n    }\n    if(count_dot != 1) return \"No\";\n    int count_digit\
    \ = 0;\n    for(int i = 0; i < n; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') count_digit++;\n    }\n    if(count_digit > 3) return \"No\";\n    int\
    \ i = 0;\n    while(i < n && file_name[i] != '.') {\n        if(!((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')))\
    \ return \"No\";\n        i++;\n    }\n    if(i == 0) return \"No\";\n    i++;\n\
    \    if(i == n) return \"No\";\n    std::string suffix = \"\";\n    while(i <\
    \ n) {\n        suffix += file_name[i];\n        i++;\n    }\n    if(suffix !=\
    \ \"txt\" && suffix != \"exe\" && suffix != \"dll\") return \"No\";\n    return\
    \ \"Yes\";", "  size_t num_digits = 0;\n  std::regex number(\"\\\\d\");\n  for\
    \ (size_t i = 0; i < file_name.size(); i++) {\n    if (std::regex_match(std::string(1,\
    \ file_name[i]), number))\n      num_digits++;\n  }\n  if (num_digits > 3) return\
    \ \"No\";\n  size_t dot_pos = file_name.find(\".\");\n  std::string before_dot\
    \ = file_name.substr(0, dot_pos);\n  std::string after_dot = file_name.substr(dot_pos\
    \ + 1);\n  if (before_dot.empty()) return \"No\";\n  std::regex txt(\"txt\");\n\
    \  std::regex exe(\"exe\");\n  std::regex dll(\"dll\");\n  std::regex letter(\"\
    [a-zA-Z]\");\n  if (!std::regex_match(std::string(1, before_dot[0]), letter))\
    \ return \"No\";\n  if (!std::regex_match(after_dot, txt) && !std::regex_match(after_dot,\
    \ exe) &&\n      !std::regex_match(after_dot, dll))\n    return \"No\";\n  return\
    \ \"Yes\";", "    int digits = 0;\n    int size = file_name.size();\n    int i\
    \ = 0;\n    while(file_name[i] >= '0' && file_name[i] <= '9'){\n        digits++;\n\
    \        i++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(file_name[0]\
    \ < 'a' || file_name[0] > 'z')\n        return \"No\";\n    for(int i = 0; i <\
    \ size; i++){\n        if(file_name[i] == '.'){\n            std::string afterDot\
    \ = file_name.substr(i+1, size);\n            if(afterDot == \"txt\" || afterDot\
    \ == \"exe\" || afterDot == \"dll\")\n                return \"Yes\";\n      \
    \      else\n                return \"No\";\n        }\n    }\n    return \"No\"\
    ;", "    assert(file_name.length() > 0);\n    assert(file_name.length() < 50);\n\
    \    assert(file_name[0] == '0' || file_name[0] == '1' || file_name[0] == '2'\
    \ || file_name[0] == '3' || file_name[0] == '4' || file_name[0] == '5' || file_name[0]\
    \ == '6' || file_name[0] == '7' || file_name[0] == '8' || file_name[0] == '9');\n\
    \    assert(file_name[file_name.length() - 4] == '.');\n    assert(file_name[file_name.length()\
    \ - 3] == 't' || file_name[file_name.length() - 3] == 'e' || file_name[file_name.length()\
    \ - 3] == 'd');\n    assert(file_name[file_name.length() - 2] == 'x' || file_name[file_name.length()\
    \ - 2] == 'x' || file_name[file_name.length() - 2] == 'l');\n    assert(file_name[file_name.length()\
    \ - 1] == 't' || file_name[file_name.length() - 1] == 'e' || file_name[file_name.length()\
    \ - 1] == 'l');\n    std::regex pat_num (\"[0-9]{4}\");\n    std::regex pat_num2\
    \ (\"[0-9]{2}\");\n    std::regex pat_num3 (\"[0-9]{1}\");\n    std::regex pat_dot\
    \ (\"[.]\");\n    std::regex pat_alpha (\"[a-zA-Z]\");\n    std::regex pat_format\
    \ (\"(.txt|.exe|.dll)\");\n    int num_num = 0;\n    int num_dot = 0;\n    int\
    \ num_alpha = 0;\n    int num_format = 0;\n    // First check if there are more\
    \ than three digits in the file's name.\n    for (auto x:file_name) {\n      \
    \  if", "    int len = file_name.length();\n    int dot_count = 0;\n    int dot_index\
    \ = -1;\n    for(int i = 0; i < len; i++) {\n        if(file_name[i] == '.') {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n    }\n    if(dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    if(file_name[0] == '.') {\n    \
    \    return \"No\";\n    }\n    if(file_name[dot_index - 1] == '.') {\n      \
    \  return \"No\";\n    }\n    if(file_name[dot_index + 1] == '.') {\n        return\
    \ \"No\";\n    }\n    if(file_name[len - 1] == '.') {\n        return \"No\";\n\
    \    }\n    int count = 0;\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if(count > 3) {\n        return \"No\";\n    }\n    // if(count < 1) {\n \
    \   //     return \"No\";\n    // }\n    std::string str1 = file_name.substr(0,\
    \ dot_index);\n    std::string str2 = file_name.substr(dot_index + 1, len - dot_index);\n\
    \    for(int i = 0; i < str1.length(); i++) {\n        if(str1[i] == '.') {\n\
    \            return \"No\";\n        }\n    }\n    for(int i = 0; i < str2.length();\
    \ i++) {\n        if(str2[i] == '.') {\n            return \"No\";\n        }\n\
    \    }\n    if(!(str1[0] >= 'a' && str1[0] <= 'z') && !(str1[0] >= 'A' && str1[0]\
    \ <= 'Z')) {\n        return \"No\";\n    }\n    if(str2 != \"txt\"", "    int\
    \ count = 0;\n    int count_dot = 0;\n    int index_dot = 0;\n    int index_first_char\
    \ = 0;\n    std::vector<char> arr = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9'};\n    for (int i = 0; i < file_name.length(); i++) {\n        if (std::find(arr.begin(),\
    \ arr.end(), file_name[i]) != arr.end())\n            count++;\n        if (file_name[i]\
    \ == '.') {\n            count_dot++;\n            index_dot = i;\n        }\n\
    \        if ((file_name[i] >= 'a' && file_name[i] <= 'z') ||\n            (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z')) {\n            index_first_char = i;\n     \
    \       break;\n        }\n    }\n    std::string dot_1 = file_name.substr(index_dot\
    \ + 1, file_name.length() - 1);\n    if (count > 3 || count_dot != 1 || index_dot\
    \ - index_first_char <= 0)\n        return \"No\";\n    if (dot_1 == \"txt\" ||\
    \ dot_1 == \"exe\" || dot_1 == \"dll\")\n        return \"Yes\";\n    return \"\
    No\";", "    //! TODO\n    std::string no = \"No\";\n    std::string yes = \"\
    Yes\";\n    int c = 0;\n    int count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++){\n        if(file_name[i] == '.'){\n            c++;\n        }\n     \
    \   if(isdigit(file_name[i])){\n            count++;\n        }\n    }\n    if(c\
    \ != 1){\n        return no;\n    }\n    else if(count > 3){\n        return no;\n\
    \    }\n    else if(file_name[0] == '.'){\n        return no;\n    }\n    else\
    \ if(isdigit(file_name[0])){\n        return no;\n    }\n    else if(file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\"){\n        return\
    \ no;\n    }\n    else{\n        return yes;\n    }", "    int count_digit = 0;\n\
    \    int count_dot = 0;\n    bool empty_before_dot = false;\n    bool start_with_letter\
    \ = false;\n    bool right_substring = false;\n    std::vector<char> valid_substring\
    \ = {'t', 'x', 'd'};\n    if (file_name.size() == 0)\n        return \"No\";\n\
    \    // check more than 3 digits in file name\n    for (int i = 0; i < file_name.size();\
    \ i++) {\n        if (isdigit(file_name[i]))\n            count_digit++;\n   \
    \     if (count_digit > 3)\n            return \"No\";\n    }\n    // check only\
    \ one dot in file name\n    for (int i = 0; i < file_name.size(); i++) {\n   \
    \     if (file_name[i] == '.')\n            count_dot++;\n        if (count_dot\
    \ > 1)\n            return \"No\";\n    }\n    // check empty string before dot\n\
    \    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] ==\
    \ '.') {\n            if (i == 0)\n                empty_before_dot = true;\n\
    \            else\n                empty_before_dot = false;\n        }\n    }\n\
    \    if (empty_before_dot)\n        return \"No\";\n    // check starting with\
    \ letter\n    if (isalpha(file_name[0]))\n        start_with_letter = true;\n\
    \    else\n        start_with_letter = false;\n    if (!start_with_letter)\n \
    \       return \"No\";\n    // check valid substring after dot\n    for (int i\
    \ = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n    \
    \        if (file_name[i+1] == valid_substring[0] && file_name[i+2] == valid_substring[1]\n\
    \            && file_name[i+3] == valid_substring[2])\n                right_substring\
    \ = true;\n            else\n                right_substring = false;\n       ",
  "    const std::string txt_extension = \"txt\";\n    const std::string exe_extension\
    \ = \"exe\";\n    const std::string dll_extension = \"dll\";\n    if (file_name.length()\
    \ > 255) {\n        return \"No\";\n    }\n    if (file_name.find('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (std::count_if(file_name.begin(), file_name.end(),\
    \ isdigit) > 3) {\n        return \"No\";\n    }\n    std::string name_extension\
    \ = file_name.substr(file_name.find('.') + 1);\n    if (name_extension != txt_extension\
    \ && name_extension != exe_extension && name_extension != dll_extension) {\n \
    \       return \"No\";\n    }\n    if (!isalpha(file_name[0])) {\n        return\
    \ \"No\";\n    }\n    std::string name = file_name.substr(0, file_name.find('.'));\n\
    \    if (name.length() == 0) {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;", "    // if(file_name == \"\") return \"No\";\n    int count = 0;\n    int\
    \ dot = 0;\n    int len = file_name.length();\n    std::string a = \"\";\n   \
    \ std::string b = \"\";\n    if(file_name == \"\") return \"No\";\n    for(int\
    \ i = 0; i < len; i++){\n        if(file_name[i] >= 'a' && file_name[i] <= 'z'\
    \ || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            a += file_name[i];\n\
    \        }else if(file_name[i] == '.'){\n            if(dot == 1) return \"No\"\
    ;\n            dot = 1;\n        }else if(file_name[i] >= '0' && file_name[i]\
    \ <= '9'){\n            count++;\n            b += file_name[i];\n        }else{\n\
    \            return \"No\";\n        }\n    }\n    if(a == \"\") return \"No\"\
    ;\n    if(count > 3) return \"No\";\n    if(b == \"\") return \"No\";\n    if(dot\
    \ == 0) return \"No\";\n    if(file_name[len-1] == '.') return \"No\";\n    if(file_name[len-4]\
    \ != '.') return \"No\";\n    if(file_name[len-3] != 't' && file_name[len-3] !=\
    \ 'e' && file_name[len-3] != 'd') return \"No\";\n    if(file_name[len-2] != 'x'\
    \ && file_name[len-2] != 'x' && file_name[len-2] != 'l') return \"No\";\n    if(file_name[len-1]\
    \ != 't' && file_name[len-1] != 'e' && file_name[len-1] != 'l') return \"No\"\
    ;\n    return \"Yes\";", "    int length=file_name.length();\n    int cnt=0;\n\
    \    for(int i=0;i<length;i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n\
    \            cnt++;\n        }\n    }\n    if(cnt>3){\n        return \"No\";\n\
    \    }\n    int dot_cnt=0;\n    for(int i=0;i<length;i++){\n        if(file_name[i]=='.'){\n\
    \            dot_cnt++;\n        }\n    }\n    if(dot_cnt!=1){\n        return\
    \ \"No\";\n    }\n    int dot_index=0;\n    for(int i=0;i<length;i++){\n     \
    \   if(file_name[i]=='.'){\n            dot_index=i;\n        }\n    }\n    if(dot_index==0){\n\
    \        return \"No\";\n    }\n    if(file_name[dot_index-1]>='a' && file_name[dot_index-1]<='z'){\n\
    \        file_name=file_name.substr(dot_index+1,length-dot_index);\n        if(file_name==\"\
    txt\" || file_name==\"exe\" || file_name==\"dll\"){\n            return \"Yes\"\
    ;\n        }\n        else{\n            return \"No\";\n        }\n    }\n  \
    \  else if(file_name[dot_index-1]>='A' && file_name[dot_index-1]<='Z'){\n    \
    \    file_name=file_name.substr(dot_index+1,length-dot_index);\n        if(file_name==\"\
    txt\" || file_name==\"exe\" || file_name==\"dll\"){\n            return \"Yes\"\
    ;\n        }\n        else{\n            return \"No\";\n        }\n    }\n  \
    \  else{\n        return \"No\";\n    }\n    return \"\";", "   int len = file_name.length();\n\
    \   int count = 0;\n   std::string file_name_check_point;\n   std::string part1,\
    \ part2;\n   int flag = 0;\n   std::string part2_check[] = {\"txt\", \"exe\",\
    \ \"dll\"};\n   if(len == 0){\n      file_name_check_point = \"No\";\n      return\
    \ file_name_check_point;\n   }\n   for(int i = 0; i < len; i++){\n      if(file_name[i]\
    \ >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n\
    \         continue;\n      }\n      else if(file_name[i] >= '0' && file_name[i]\
    \ <= '9'){\n         count++;\n      }\n      else if(file_name[i] == '.'){\n\
    \         flag = 1;\n         part1 = file_name.substr(0, i);\n         part2\
    \ = file_name.substr(i+1, len);\n         break;\n      }\n      else{\n     \
    \    file_name_check_point = \"No\";\n         return file_name_check_point;\n\
    \      }\n   }\n   if(count > 3){\n      file_name_check_point = \"No\";\n   \
    \   return file_name_check_point;\n   }\n   if(flag == 0){\n      file_name_check_point\
    \ = \"No\";\n      return file_name_check_point;\n   }\n   if(part1 == \"\"){\n\
    \      file_name_check_point = \"No\";\n      return file_name_check_point;\n\
    \   }\n   for(int i = 0; i < 3; i++){\n      if(part2 == part2_check[i]){\n  \
    \       file_name_check_point = \"Yes\";\n         return file_name_check_point;\n\
    \      }\n   }\n   file_name_check_point = \"No\";\n   return file_name_check_point;",
  "  int count = 0;\n  int count_txt = 0;\n  int count_exe = 0;\n  int count_dll =\
    \ 0;\n  int dot = 0;\n  int exe = 0;\n  int dll = 0;\n  int txt = 0;\n  for (int\
    \ i = 0; i < file_name.length(); i++) {\n    if (file_name[i] == '.') {\n    \
    \  dot++;\n    }\n    if (file_name[i] == '.' && file_name[i + 1] == 'e' && file_name[i\
    \ + 2] == 'x' && file_name[i + 3] == 'e') {\n      exe++;\n    }\n    if (file_name[i]\
    \ == '.' && file_name[i + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i\
    \ + 3] == 'l') {\n      dll++;\n    }\n    if (file_name[i] == '.' && file_name[i\
    \ + 1] == 't' && file_name[i + 2] == 'x' && file_name[i + 3] == 't') {\n     \
    \ txt++;\n    }\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n     \
    \ count++;\n    }\n    if (file_name[i] == 't' && file_name[i + 1] == 'x' && file_name[i\
    \ + 2] == 't') {\n      count_txt++;\n    }\n    if (file_name[i] == 'e' && file_name[i\
    \ + 1] == 'x' && file_name[i + 2] == 'e') {\n      count_exe++;\n    }\n    if\
    \ (file_name[i] == 'd' && file_name[i + 1] == 'l' && file_name[i + 2] == 'l')\
    \ {\n      count_dll++;\n    }\n  }\n  if (count > 3 || count_exe > 1 || count_dll\
    \ > 1 || count_txt > 1 || dot > 1 || exe > 1 || d", "    // Your solution here\n\
    \    // You can add more functions or variables if you need\n    int countDot\
    \ = 0;\n    int countNum = 0;\n    bool isValid = true;\n    bool isContainDot\
    \ = false;\n    bool isContainTxt = false;\n    bool isContainExe = false;\n \
    \   bool isContainDll = false;\n    bool isContainValidSub = false;\n    bool\
    \ isContainValidDot = false;\n    bool isContainEmptySub = false;\n    bool isContainValidNum\
    \ = false;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i]\
    \ == '.'){\n            countDot++;\n            isContainDot = true;\n      \
    \  }\n        if(countDot > 1){\n            isValid = false;\n            break;\n\
    \        }\n        if(isdigit(file_name[i])){\n            countNum++;\n    \
    \        if(countNum <= 3){\n                isContainValidNum = true;\n     \
    \       }\n        }\n        if(countNum > 3){\n            isValid = false;\n\
    \            break;\n        }\n        if(file_name[i] == '.'){\n           \
    \ if(file_name[i + 1] == 't' && file_name[i + 2] == 'x' && file_name[i + 3] ==\
    \ 't'){\n                isContainTxt = true;\n            }\n            if(file_name[i\
    \ + 1] == 'e' && file_name[i + 2] == 'x' && file_name[i + 3] == 'e'){\n      \
    \          isContainExe = true;\n            }\n            if(file_name[i + 1]\
    \ == 'd' && file_name[i + 2] == 'l' && file_name[i + 3] == 'l'){\n           \
    \     isContainDll = true;\n            }\n            if(isContainTxt || isContainExe\
    \ || isContainDll){\n                isContainValidDot = true;\n            }\n\
    \        }\n        if(!isContainTxt && !", "\tint dot_counter=0;\n\tint dot_position;\n\
    \tfor(int i=0;i<file_name.length();i++){\n\t\tif(file_name[i]=='.'){\n\t\t\tdot_counter++;\n\
    \t\t\tdot_position=i;\n\t\t}\n\t}\n\tif(dot_counter!=1){\n\t\treturn \"No\";\n\
    \t}\n\tstd::string first=file_name.substr(0,dot_position);\n\tstd::string second=file_name.substr(dot_position+1,file_name.length()-dot_position);\n\
    \tif(first.length()<=0){\n\t\treturn \"No\";\n\t}\n\tif(first[0]>='0'&&first[0]<='9'){\n\
    \t\treturn \"No\";\n\t}\n\tint counter=0;\n\tfor(int i=0;i<first.length();i++){\n\
    \t\tif(first[i]>='0'&&first[i]<='9'){\n\t\t\tcounter++;\n\t\t}\n\t}\n\tif(counter>3){\n\
    \t\treturn \"No\";\n\t}\n\tif(second!=\"txt\"&&second!=\"exe\"&&second!=\"dll\"\
    ){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "    std::regex file_name_rx(\"\
    ^([A-Za-z]+)([0-9]{0,3})\\.(txt|exe|dll)$\");\n    return std::regex_match(file_name,\
    \ file_name_rx) ? \"Yes\" : \"No\";", "  assert(file_name.size() > 0);\n  int\
    \ index_of_dot = -1;\n  int number_of_digits = 0;\n  for (int i = 0; i < file_name.size();\
    \ i++) {\n    if (file_name[i] == '.') {\n      index_of_dot = i;\n    }\n   \
    \ if (file_name[i] >= '0' && file_name[i] <= '9') {\n      number_of_digits++;\n\
    \    }\n  }\n  if (number_of_digits > 3) {\n    return \"No\";\n  }\n  if (index_of_dot\
    \ == -1) {\n    return \"No\";\n  }\n  if (index_of_dot == 0) {\n    return \"\
    No\";\n  }\n  if (file_name[index_of_dot + 1] == '\\0') {\n    return \"No\";\n\
    \  }\n  if (file_name[index_of_dot - 1] < 'a' ||\n      file_name[index_of_dot\
    \ - 1] > 'z') {\n    return \"No\";\n  }\n  if (file_name[index_of_dot + 1] !=\
    \ 't' ||\n      file_name[index_of_dot + 2] != 'x' ||\n      file_name[index_of_dot\
    \ + 3] != 't') {\n    return \"No\";\n  }\n  return \"Yes\";", "\t//Your code\
    \ goes here\n\t//This function returns a string\n\tint n = file_name.length();\n\
    \tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (file_name[i] >= '0' &&\
    \ file_name[i] <= '9')\n\t\t\tcnt++;\n\t}\n\tif (cnt > 3) return \"No\";\n\tint\
    \ dot = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (file_name[i] == '.')\n\t\t\
    \tdot++;\n\t}\n\tif (dot != 1) return \"No\";\n\tstd::string s1, s2;\n\tint index;\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tindex =\
    \ i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == 0) return \"No\";\n\tfor (int i\
    \ = 0; i < index; i++) {\n\t\ts1 += file_name[i];\n\t}\n\tfor (int i = index +\
    \ 1; i < n; i++) {\n\t\ts2 += file_name[i];\n\t}\n\tif (s1.length() == 0) return\
    \ \"No\";\n\tif (s1[0] < 'a' || s1[0] > 'z') {\n\t\tif (s1[0] < 'A' || s1[0] >\
    \ 'Z')\n\t\t\treturn \"No\";\n\t}\n\tif (s2 != \"txt\" && s2 != \"exe\" && s2\
    \ != \"dll\")\n\t\treturn \"No\";\n\treturn \"Yes\";", "    int count = 0;\n \
    \   int state = 0;\n    for (auto i : file_name) {\n        if (i == '.') {\n\
    \            state = 1;\n            continue;\n        }\n        if (i >= '0'\
    \ && i <= '9') {\n            count++;\n        }\n        if (count > 3 || state\
    \ == 1 && count > 0) {\n            return \"No\";\n        }\n    }\n    std::vector<std::string>\
    \ files = {\"txt\", \"exe\", \"dll\"};\n    std::string tmp;\n    size_t pos =\
    \ file_name.find_last_of(\".\");\n    tmp = file_name.substr(pos + 1);\n    return\
    \ (std::find(files.begin(), files.end(), tmp) != files.end()) ? \"Yes\" : \"No\"\
    ;", "\tint countDot = 0;\n\tint countDigit = 0;\n\tif (file_name.length() > 1)\
    \ {\n\t\tfor (int i = 0; i < file_name.length(); i++) {\n\t\t\tif (file_name[i]\
    \ == '.') {\n\t\t\t\tcountDot++;\n\t\t\t}\n\t\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\t\tcountDigit++;\n\t\t\t}\n\t\t}\n\t\tif (countDot == 1 && countDigit\
    \ <= 3) {\n\t\t\tstd::string str1 = file_name.substr(file_name.find(\".\") + 1);\n\
    \t\t\tif (str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\") {\n\t\t\t\treturn\
    \ \"Yes\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\telse {\n\t\treturn \"No\";\n\t}",
  "    int dots = std::count(file_name.begin(), file_name.end(), '.');\n    if (dots\
    \ != 1) return \"No\";\n    bool is_valid = std::regex_match(file_name, std::regex(\"\
    ^[a-zA-Z][^.]{1,20}[.](txt|exe|dll)$\"));\n    return is_valid ? \"Yes\" : \"\
    No\";", "    int len = file_name.length();\n    int count = 0;\n    bool flag\
    \ = false;\n    bool is_valid = true;\n    if (len <= 3) {\n        is_valid =\
    \ false;\n    }\n    int dot_count = 0;\n    for (int i = 0; i < len; i++) {\n\
    \        if (isdigit(file_name[i])) {\n            count++;\n        }\n     \
    \   if (file_name[i] == '.') {\n            dot_count++;\n        }\n    }\n \
    \   if (count > 3 || dot_count != 1) {\n        is_valid = false;\n    }\n   \
    \ else {\n        for (int i = 0; i < len; i++) {\n            if (file_name[i]\
    \ == '.') {\n                if (i == 0) {\n                    is_valid = false;\n\
    \                    break;\n                }\n                if (!isalpha(file_name[i\
    \ - 1])) {\n                    is_valid = false;\n                    break;\n\
    \                }\n                for (int j = i + 1; j < len; j++) {\n    \
    \                std::string temp = \"\";\n                    temp += file_name[j];\n\
    \                    if (temp == \"txt\" || temp == \"exe\" || temp == \"dll\"\
    ) {\n                        flag = true;\n                        break;\n  \
    \                  }\n                }\n                if (!flag) {\n      \
    \              is_valid = false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    if (is_valid) {\n        return \"Yes\"\
    ;\n    }\n    else {\n        return \"No\";\n    }", "\tint n=file_name.length();\n\
    \tint count_dot=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(file_name[i]=='.')\n\t\
    \t\tcount_dot++;\n\t}\n\tif(count_dot!=1)\n\t\treturn \"No\";\n\tint index_dot=file_name.find(\"\
    .\");\n\tstd::string str1=file_name.substr(0,index_dot);\n\tstd::string str2=file_name.substr(index_dot+1,n-index_dot);\n\
    \tint c=0;\n\tfor(int i=0;i<str1.length();i++)\n\t{\n\t\tif(str1[i]>='a' && str1[i]<='z'\
    \ || str1[i]>='A' && str1[i]<='Z')\n\t\t\tcontinue;\n\t\telse\n\t\t\tc++;\n\t\
    }\n\tif(c>0)\n\t\treturn \"No\";\n\tint count_digits=0;\n\tfor(int i=0;i<n;i++)\n\
    \t{\n\t\tif(file_name[i]>='0' && file_name[i]<='9')\n\t\t\tcount_digits++;\n\t\
    }\n\tif(count_digits>3)\n\t\treturn \"No\";\n\tif(str2==\"txt\" || str2==\"exe\"\
    \ || str2==\"dll\")\n\t\treturn \"Yes\";\n\telse\n\t\treturn \"No\";", "\t// your\
    \ code goes here\n  std::string::size_type sz;\n  int cnt = 0;\n  for(int i =\
    \ 0; i < file_name.length(); i++){\n    if(file_name[i] == '.'){\n      sz = i;\n\
    \      cnt++;\n    }\n  }\n  int cnt2 = 0;\n  for(int i = 0; i < file_name.length();\
    \ i++){\n    if(file_name[i] >= '0' && file_name[i] <= '9'){\n      cnt2++;\n\
    \    }\n  }\n  if(cnt == 1 && cnt2 <= 3){\n    std::string first = file_name.substr(0,\
    \ sz);\n    std::string second = file_name.substr(sz+1, file_name.length() - (sz+1));\n\
    \    if(first[0] >= 'a' && first[0] <= 'z' || first[0] >= 'A' && first[0] <= 'Z'){\n\
    \      if(second == \"txt\" || second == \"exe\" || second == \"dll\"){\n    \
    \    return \"Yes\";\n      }\n    }\n  }\n  return \"No\";", "    std::regex\
    \ reg(\"^[a-zA-Z]+[.][txt|exe|dll]$\");\n    std::smatch sm;\n    std::regex_search(file_name,\
    \ sm, reg);\n    return sm.str().empty() ? \"No\" : \"Yes\";", "    int dot_index\
    \ = file_name.find(\".\");\n    std::string file_name_before_dot = file_name.substr(0,\
    \ dot_index);\n    std::string file_name_after_dot = file_name.substr(dot_index+1);\n\
    \    bool is_valid = false;\n    if (file_name_before_dot[0] >= 'a' && file_name_before_dot[0]\
    \ <= 'z' ||\n    file_name_before_dot[0] >= 'A' && file_name_before_dot[0] <=\
    \ 'Z') {\n        is_valid = true;\n    }\n    if (!is_valid) {\n        return\
    \ \"No\";\n    }\n    int count = 0;\n    for (int i = 0; i < file_name_before_dot.length();\
    \ i++) {\n        if (file_name_before_dot[i] >= '0' && file_name_before_dot[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    if (file_name_after_dot != \"txt\" && file_name_after_dot\
    \ != \"exe\" &&\n    file_name_after_dot != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";", "   std::regex e (\"[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}\"\
    );\n   std::smatch m;\n   bool b = std::regex_match(file_name, m, e);\n   return\
    \ b ? \"Yes\" : \"No\";", "    \n    if(file_name.length() < 5) return \"No\"\
    ;\n    int count_digits = 0;\n    for(char c : file_name) {\n        if(isdigit(c))\
    \ count_digits++;\n    }\n    if(count_digits > 3) return \"No\";\n    if(!(file_name[0]\
    \ >= 'a' && file_name[0] <= 'z') && !(file_name[0] >= 'A' && file_name[0] <= 'Z'))\
    \ return \"No\";\n    if(file_name[file_name.length() - 4] != '.') return \"No\"\
    ;\n    if(file_name.substr(file_name.length() - 3, 3) != \"txt\" && file_name.substr(file_name.length()\
    \ - 3, 3) != \"exe\" && file_name.substr(file_name.length() - 3, 3) != \"dll\"\
    ) return \"No\";\n    return \"Yes\";", "    // TODO: implement\n    std::string\
    \ file_name2=file_name;\n    std::string format=\".txt\";\n    std::string format2=\"\
    .exe\";\n    std::string format3=\".dll\";\n    int counter=0;\n    int check=0;\n\
    \    int length=file_name.length();\n    for(int i=0;i<length;i++){\n        if(file_name[i]=='.'){\n\
    \            check=1;\n            continue;\n        }\n        if(check==0){\n\
    \            if(!isalpha(file_name[i])){\n                return \"No\";\n   \
    \         }\n        }\n        if(check==1){\n            if(isdigit(file_name[i])){\n\
    \                counter++;\n            }\n        }\n        if(counter>3){\n\
    \            return \"No\";\n        }\n    }\n    if(file_name2.substr(file_name2.find_last_of(\"\
    .\") + 1)==\"txt\"){\n        return \"Yes\";\n    }\n    if(file_name2.substr(file_name2.find_last_of(\"\
    .\") + 1)==\"exe\"){\n        return \"Yes\";\n    }\n    if(file_name2.substr(file_name2.find_last_of(\"\
    .\") + 1)==\"dll\"){\n        return \"Yes\";\n    }\n    else{\n        return\
    \ \"No\";\n    }", "  std::string latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  std::string valid_extensions = \"txtexe.dll\";\n  int dot_count = 0;\n  int\
    \ digit_count = 0;\n  std::string file_name_without_extension;\n  std::string\
    \ file_extension;\n  std::string result = \"No\";\n  for (int i = 0; i < file_name.length();\
    \ i++) {\n    if (file_name[i] == '.') {\n      dot_count++;\n      file_name_without_extension\
    \ = file_name.substr(0, i);\n      file_extension = file_name.substr(i + 1, file_name.length()\
    \ - 1);\n    }\n    if ((file_name[i] >= '0') && (file_name[i] <= '9')) {\n  \
    \    digit_count++;\n    }\n  }\n  if ((digit_count <= 3) && (dot_count == 1)\
    \ && (valid_extensions.find(file_extension) != std::string::npos)) {\n    for\
    \ (int i = 0; i < file_name_without_extension.length(); i++) {\n      if (latin_alphabet.find(file_name_without_extension[i])\
    \ != std::string::npos) {\n        result = \"Yes\";\n      }\n      else {\n\
    \        result = \"No\";\n        break;\n      }\n    }\n  }\n  return result;",
  "\t// Your code here...\n\tint i = 0;\n\tint num = 0;\n\tbool flag = false;\n\t\
    while (file_name[i] != '\\0') {\n\t\tif (file_name[i] >= '0' && file_name[i] <=\
    \ '9')\n\t\t\tnum++;\n\t\tif (file_name[i] == '.')\n\t\t\tflag = true;\n\t\ti++;\n\
    \t}\n\tif (num > 3 || flag == false)\n\t\treturn \"No\";\n\tstd::string str1 =\
    \ file_name.substr(0, file_name.find('.'));\n\tstd::string str2 = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (str1.length() == 0 || (str1[0] >= 'a' && str1[0] <= 'z') || (str1[0]\
    \ >= 'A' && str1[0] <= 'Z'))\n\t\treturn \"No\";\n\tif ((str2 == \"txt\") || (str2\
    \ == \"exe\") || (str2 == \"dll\"))\n\t\treturn \"Yes\";\n\treturn \"No\";", " \
    \   // 1) 0-9 count\n    int count = 0;\n    for (char c : file_name) {\n    \
    \    if ('0' <= c && c <= '9') count++;\n    }\n    if (count > 3) return \"No\"\
    ;\n    // 2) '.' count\n    int dot_count = 0;\n    int dot_index = -1;\n    for\
    \ (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n    }\n    if\
    \ (dot_count != 1) return \"No\";\n    // 3) 'a'-'z' or 'A'-'Z' prefix\n    if\
    \ (!(('a' <= file_name[0] && file_name[0] <= 'z') ||\n        ('A' <= file_name[0]\
    \ && file_name[0] <= 'Z'))) {\n        return \"No\";\n    }\n    // 4) txt|exe|dll\
    \ suffix\n    std::string suffix = file_name.substr(dot_index+1);\n    std::vector<std::string>\
    \ suffix_list = {\"txt\", \"exe\", \"dll\"};\n    for (std::string s : suffix_list)\
    \ {\n        if (s == suffix) return \"Yes\";\n    }\n    return \"No\";", " \
    \ // write the function body here\n    std::string s =\"No\";\n    int index_dot\
    \ = file_name.find('.');\n    std::string extension = file_name.substr(index_dot+1);\n\
    \    std::string f_name = file_name.substr(0,index_dot);\n    int count_d = 0;\n\
    \    for(int i=0;i<file_name.length();i++){\n        if(isdigit(file_name[i]))\n\
    \            count_d+=1;\n    }\n    if(count_d<=3){\n        if(!(extension==\"\
    txt\" || extension==\"exe\" || extension==\"dll\")){\n            if(isalpha(f_name[0])){\n\
    \                s = \"Yes\";\n            }\n        }\n    }\n    return s;",
  "  std::regex pattern(R\"(^([a-zA-Z]{1}[\\w]*\\.){1}(txt|exe|dll)$)\");\n  std::smatch\
    \ matches;\n  std::regex_search(file_name, matches, pattern);\n  // std::cout\
    \ << matches.size() << '\\n';\n  // if (matches.size() == 0) {\n  //   return\
    \ \"No\";\n  // }\n  // return \"Yes\";\n  return std::regex_match(file_name,\
    \ pattern) ? \"Yes\" : \"No\";", "\tint dot_counter = 0;\n\tint digits_counter\
    \ = 0;\n\tint index_of_dot = -1;\n\tint last_letter_of_prefix = -1;\n\tfor (int\
    \ i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\t\
    dot_counter++;\n\t\t\tindex_of_dot = i;\n\t\t}\n\t\tif (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n\t\t\tdigits_counter++;\n\t\t}\n\t\tif ((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\
    \ {\n\t\t\tlast_letter_of_prefix = i;\n\t\t}\n\t}\n\tif (dot_counter == 1 && digits_counter\
    \ <= 3 && last_letter_of_prefix >= 0 && index_of_dot - last_letter_of_prefix ==\
    \ 1) {\n\t\tif (file_name.substr(index_of_dot + 1, 3) == \"txt\" || file_name.substr(index_of_dot\
    \ + 1, 3) == \"exe\" || file_name.substr(index_of_dot + 1, 3) == \"dll\") {\n\t\
    \t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";", "  bool valid = true;\n  int\
    \ dot_idx = -1;\n  int number_of_digits = 0;\n  for (int i = 0; i < file_name.size();\
    \ i++) {\n    if (std::isdigit(file_name[i])) number_of_digits++;\n    if (file_name[i]\
    \ == '.') dot_idx = i;\n  }\n  if (number_of_digits > 3) valid = false;\n  if\
    \ (dot_idx == -1) valid = false;\n  std::string extension = file_name.substr(dot_idx\
    \ + 1);\n  if (extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\") valid = false;\n  if (dot_idx == 0) valid = false;\n  if (!std::isalpha(file_name[0]))\
    \ valid = false;\n  if (valid) return \"Yes\";\n  return \"No\";", "    int n\
    \ = file_name.size();\n    int digit_count = 0;\n    std::string file_type;\n\
    \    std::string file_name_result;\n    for (int i = 0; i < n; i++) {\n      \
    \  if (isdigit(file_name[i])) {\n            digit_count++;\n        }\n    }\n\
    \    if (digit_count > 3) {\n        return \"No\";\n    }\n    // std::cout <<\
    \ \"digit_count \" << digit_count << std::endl;\n    int dot_index = file_name.find('.');\n\
    \    // std::cout << \"dot_index \" << dot_index << std::endl;\n    if (dot_index\
    \ == -1) {\n        return \"No\";\n    }\n    for (int i = 0; i < dot_index;\
    \ i++) {\n        if (isalpha(file_name[i])) {\n            file_name_result +=\
    \ file_name[i];\n        }\n    }\n    // std::cout << \"file_name_result \" <<\
    \ file_name_result << std::endl;\n    if (file_name_result.size() == 0) {\n  \
    \      return \"No\";\n    }\n    for (int i = dot_index + 1; i < n; i++) {\n\
    \        file_type += file_name[i];\n    }\n    // std::cout << \"file_type \"\
    \ << file_type << std::endl;\n    if (file_type == \"txt\" || file_type == \"\
    exe\" || file_type == \"dll\") {\n        return \"Yes\";\n    }\n    return \"\
    No\";", "    std::regex reg(\"[^0-9]*[^.]*\\\\.[a-zA-Z]{3}\");\n    return std::regex_match(file_name,\
    \ reg) ? \"Yes\" : \"No\";", "    int count_dot = 0;\n    int count_digits = 0;\n\
    \    int dot_position = 0;\n    int size = file_name.size();\n    for (int i =\
    \ 0; i < size; i++) {\n        if (file_name[i] == '.') {\n            count_dot++;\n\
    \            dot_position = i;\n        }\n        if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9')\n            count_digits++;\n    }\n    if (count_dot\
    \ != 1 || count_digits > 3) return \"No\";\n    std::string sub_string_before_dot\
    \ = file_name.substr(0, dot_position);\n    std::string sub_string_after_dot =\
    \ file_name.substr(dot_position + 1, size - dot_position - 1);\n    if (sub_string_before_dot.size()\
    \ == 0 ||\n        !((sub_string_before_dot[0] >= 'a' && sub_string_before_dot[0]\
    \ <= 'z') ||\n            (sub_string_before_dot[0] >= 'A' && sub_string_before_dot[0]\
    \ <= 'Z')))\n        return \"No\";\n    if (sub_string_after_dot != \"txt\" &&\
    \ sub_string_after_dot != \"exe\" && sub_string_after_dot != \"dll\")\n      \
    \  return \"No\";\n    return \"Yes\";", "  return std::regex_match(file_name,\
    \ std::regex(\"([a-zA-Z]+)(\\\\d{0,3})(\\\\.txt|\\\\.exe|\\\\.dll)\"))\n     \
    \ ? \"Yes\"\n      : \"No\";", "    int dotPos = file_name.find(\".\");\n    std::string\
    \ file_name_new = file_name.substr(0, dotPos);\n    std::string file_name_new2\
    \ = file_name.substr(dotPos + 1, file_name.length());\n    int count = 0;\n  \
    \  for (int i = 0; i < file_name_new.length(); i++) {\n        if (file_name_new[i]\
    \ >= '0' && file_name_new[i] <= '9') {\n            count++;\n        }\n    }\n\
    \    if (file_name_new.length() == 0 || file_name_new[0] < 'A' || (file_name_new[0]\
    \ > 'Z' && file_name_new[0] < 'a') || file_name_new[0] > 'z') {\n        return\
    \ \"No\";\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    if\
    \ (file_name_new2 != \"txt\" && file_name_new2 != \"exe\" && file_name_new2 !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    if(file_name.length()\
    \ > 15) return \"No\";\n    if(std::count(file_name.begin(), file_name.end(),\
    \ '.') != 1) return \"No\";\n    std::string prefix = file_name.substr(0, file_name.find('.'));\n\
    \    std::string suffix = file_name.substr(file_name.find('.') + 1);\n    if(prefix.length()\
    \ == 0) return \"No\";\n    if(prefix[0] >= '0' && prefix[0] <= '9') return \"\
    No\";\n    if(suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\") return\
    \ \"No\";\n    return \"Yes\";", "    // Do something here ...\n    std::regex\
    \ rgx(R\"(^[a-zA-Z]+\\d*(\\.(exe|txt|dll))$)\");\n    return std::regex_match(file_name,\
    \ rgx) ? \"Yes\" : \"No\";", "    std::regex txt_regex(\"[A-Za-z]{1}[0-9]{0,3}\\\
    \\.txt\");\n    std::regex exe_regex(\"[A-Za-z]{1}[0-9]{0,3}\\\\.exe\");\n   \
    \ std::regex dll_regex(\"[A-Za-z]{1}[0-9]{0,3}\\\\.dll\");\n    if (std::regex_match(file_name,\
    \ txt_regex) || std::regex_match(file_name, exe_regex) || std::regex_match(file_name,\
    \ dll_regex))\n        return \"Yes\";\n    else\n        return \"No\";", " \
    \   // Your code here!\n    std::regex pattern(\"[a-zA-Z]+[\\\\.][a-zA-Z]{3}\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";", "  \
    \  int dot = 0;\n    int digit = 0;\n    std::vector<char> file_name_vec;\n  \
    \  std::vector<char> file_ext_vec;\n    for (int i = 0; i < file_name.size();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot++;\n        }\n\
    \        if (file_name[i] == '.' || i == file_name.size() - 1) {\n           \
    \ if (digit > 3) {\n                return \"No\";\n            }\n          \
    \  if (dot != 1) {\n                return \"No\";\n            }\n          \
    \  if (file_name_vec.size() == 0) {\n                return \"No\";\n        \
    \    }\n            if (file_name_vec[0] < 'a' || file_name_vec[0] > 'z') {\n\
    \                if (file_name_vec[0] < 'A' || file_name_vec[0] > 'Z') {\n   \
    \                 return \"No\";\n                }\n            }\n         \
    \   if (file_ext_vec.size() == 0) {\n                return \"No\";\n        \
    \    }\n            if (file_ext_vec[0] != 't' || file_ext_vec[1] != 'x' || file_ext_vec[2]\
    \ != 't') {\n                if (file_ext_vec[0] != 'e' || file_ext_vec[1] !=\
    \ 'x' || file_ext_vec[2] != 'e') {\n                    if (file_ext_vec[0] !=\
    \ 'd' || file_ext_vec[1] != 'l' || file_ext_vec[2] != 'l') {\n               \
    \         return \"No\";\n                    }\n                }\n         \
    \   }\n            digit = 0;\n            dot = 0;\n            file_name_vec.clear();\n\
    \            file_ext_vec.clear();\n        }\n        if (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n            digit++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            continue;\n        }\n        if (dot == 0) {\n", " \
    \ int dot_position = file_name.find('.');\n  if (dot_position == std::string::npos)\
    \ {\n    return \"No\";\n  }\n  std::string before_dot = file_name.substr(0, dot_position);\n\
    \  if (!isalpha(before_dot[0])) {\n    return \"No\";\n  }\n  if (std::count_if(before_dot.begin(),\
    \ before_dot.end(), isdigit) > 3) {\n    return \"No\";\n  }\n  std::string after_dot\
    \ = file_name.substr(dot_position + 1);\n  if (after_dot == \"txt\" || after_dot\
    \ == \"exe\" || after_dot == \"dll\") {\n    return \"Yes\";\n  }\n  return \"\
    No\";", "  // your code here\n  bool dot_found = false;\n  bool num_digit_found\
    \ = false;\n  bool alpha_found = false;\n  bool txt_exe_dll_found = false;\n \
    \ std::string::iterator i = file_name.begin();\n  while(i != file_name.end())\
    \ {\n    if(*i == '.') {\n      if(!dot_found) {\n        dot_found = true;\n\
    \      } else {\n        // std::cout << \"No\\n\";\n        return \"No\";\n\
    \      }\n    } else if(isdigit(*i)) {\n      if(num_digit_found) {\n        //\
    \ std::cout << \"No\\n\";\n        return \"No\";\n      } else {\n        num_digit_found\
    \ = true;\n      }\n    } else if(isalpha(*i)) {\n      if(!alpha_found) {\n \
    \       alpha_found = true;\n      }\n    } else if(*i == '.' && *(i+1) == 't'\
    \ && *(i+2) == 'x' && *(i+3) == 't') {\n      if(!txt_exe_dll_found) {\n     \
    \   txt_exe_dll_found = true;\n      } else {\n        // std::cout << \"No\\\
    n\";\n        return \"No\";\n      }\n    } else if(*i == '.' && *(i+1) == 'e'\
    \ && *(i+2) == 'x' && *(i+3) == 'e') {\n      if(!txt_exe_dll_found) {\n     \
    \   txt_exe_dll_found = true;\n      } else {\n        // std::cout << \"No\\\
    n\";\n        return \"No\";\n      }\n    } else if(*i == '.' && *(i+1) == 'd'\
    \ && *(i+2) == 'l' && *(i+3) == 'l') {\n      if(!txt_exe_dll_found) {\n     \
    \   txt_exe_dll_found = true;\n      } else {\n        // std::cout << \"No\\\
    n\";\n", "\t// Write your code here\n\tint cnt = 0;\n\tint dot = -1;\n\tstd::string\
    \ s;\n\tfor (int i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n\t\t\tif (cnt == 3) return \"No\";\n\t\t\tcnt++;\n\
    \t\t}\n\t\telse if (file_name[i] == '.') {\n\t\t\tif (dot != -1) return \"No\"\
    ;\n\t\t\tdot = i;\n\t\t}\n\t\telse if (file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') continue;\n\t\telse if (file_name[i] >= 'A' && file_name[i] <= 'Z') continue;\n\
    \t\telse return \"No\";\n\t}\n\tif (dot == -1) return \"No\";\n\ts = file_name.substr(dot\
    \ + 1);\n\tif (s == \"txt\" || s == \"exe\" || s == \"dll\") return \"Yes\";\n\
    \treturn \"No\";", "    int dot_cnt = 0;\n    int digit_cnt = 0;\n    if(file_name.size()\
    \ < 3) return \"No\";\n    if(file_name[0] < 'a' || file_name[0] > 'z') return\
    \ \"No\";\n    for(int i = 0; i < file_name.size(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_cnt++;\n            if(i == 0 || i == file_name.size()\
    \ - 1) return \"No\";\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            digit_cnt++;\n            if(digit_cnt > 3) return \"\
    No\";\n        }\n    }\n    if(dot_cnt != 1) return \"No\";\n    std::string\
    \ sub = file_name.substr(file_name.find('.')+1);\n    if(sub == \"txt\" || sub\
    \ == \"exe\" || sub == \"dll\") return \"Yes\";\n    return \"No\";", "    int\
    \ count_dot=0;\n    int count_digits=0;\n    std::vector<char> after_dot;\n  \
    \  for(auto i=0;i<file_name.size();i++){\n        if(!isdigit(file_name[i])){\n\
    \            count_digits++;\n        }\n        if(file_name[i]=='.'){\n    \
    \        count_dot++;\n        }\n        if(count_dot==1){\n            after_dot.push_back(file_name[i]);\n\
    \        }\n    }\n    std::string af_dot(after_dot.begin(),after_dot.end());\n\
    \    if(count_digits<=3 && count_dot==1 && isalpha(file_name[0]) && (af_dot==\"\
    .txt\" || af_dot==\".exe\" || af_dot==\".dll\")){\n        return \"Yes\";\n \
    \   }\n    else{\n        return \"No\";\n    }", "  // your code here!\n  std::string::size_type\
    \ sz;\n  try{\n    std::string before_dot = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string after_dot = file_name.substr(file_name.find(\".\")+1);\n\
    \    int count = 0;\n    for(auto i : before_dot){\n      if(isdigit(i)){\n  \
    \      count++;\n      }\n    }\n    if(count > 3){\n      throw std::runtime_error(\"\
    There should not be more than three digits ('0'-'9') in the file's name.\");\n\
    \    }\n    if(file_name.find(\".\") == std::string::npos){\n      throw std::runtime_error(\"\
    The file's name contains exactly one dot '.'\");\n    }\n    if(before_dot.empty()){\n\
    \      throw std::runtime_error(\"The substring before the dot should not be empty\"\
    );\n    }\n    if(!isalpha(before_dot[0])){\n      throw std::runtime_error(\"\
    The substring before the dot should not be empty, and it starts with a letter\
    \ from  the latin alphapet ('a'-'z' and 'A'-'Z').\");\n    }\n    if(after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"){\n      throw std::runtime_error(\"\
    The substring after the dot should be one of these: ['txt', 'exe', 'dll']\");\n\
    \    }\n  }catch(std::runtime_error err){\n    return \"No\";\n  }\n  return \"\
    Yes\";", "  std::regex pattern(\"[a-zA-Z]+[.][txt|exe|dll]\");\n  std::smatch\
    \ match;\n  std::regex_search(file_name, match, pattern);\n  if(match.size() >\
    \ 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }", "\t\n\t// aasume\
    \ the number of digits in filename is less than or equal to 3\n\t// assume the\
    \ file_name contains exactly one dot\n\t// assume the substring before the dot\
    \ is not empty and it starts with a letter\n\t// the substring after the dot is\
    \ one of the given values ['txt', 'exe', 'dll']\n\t\n\t// get the input file name\n\
    \t// convert the string to lowercase\n\t// convert the string to a cstring\n\t\
    // count the number of occurances of '.' in the string\n\t// count the number\
    \ of occurances of '0'-'9' in the string\n\t// if there are more than three digits\
    \ and more than one dots then return 'no'\n\t\n\tstd::transform(file_name.begin(),\
    \ file_name.end(), file_name.begin(), ::tolower);\n\tconst char *file_name_cstring\
    \ = file_name.c_str();\n\t\n\tint num_of_dots = 0;\n\tint num_of_digits = 0;\n\
    \tint first_occurance_of_dot = 0;\n\tfor (int i = 0; i < file_name.length(); i++)\
    \ {\n\t\tif (file_name_cstring[i] == '.') {\n\t\t\tnum_of_dots += 1;\n\t\t\tfirst_occurance_of_dot\
    \ = i;\n\t\t}\n\t\tif (file_name_cstring[i] >= '0' && file_name_cstring[i] <=\
    \ '9') {\n\t\t\tnum_of_digits += 1;\n\t\t}\n\t}\n\tif (num_of_dots > 1 || num_of_digits\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tstd::string substring_after_dot = file_name.substr(first_occurance_of_dot\
    \ + 1);\n\t// std::cout << substring_after_dot << std::endl;\n\tif (substring_after_dot\
    \ != \"txt\" && substring_after_dot != \"exe\" && substring_after_dot != \"dll\"\
    ) {\n\t\treturn \"No\";\n\t}\n\t\n\tstd::string subst", "    // your code goes\
    \ here\n\tstd::string sub1 = file_name.substr(0, file_name.find(\".\"));\n\tstd::string\
    \ sub2 = file_name.substr(file_name.find(\".\") + 1);\n\tif (sub1 == \"\" || sub2\
    \ == \"\")\n\t\treturn \"No\";\n\tint count = 0;\n\tfor (int i = 0; i < sub1.length();\
    \ i++) {\n\t\tif (sub1[i] < 'A' || (sub1[i] > 'Z' && sub1[i] < 'a') || sub1[i]\
    \ > 'z')\n\t\t\treturn \"No\";\n\t\tif (sub1[i] >= '0' && sub1[i] <= '9')\n\t\t\
    \tcount++;\n\t}\n\tif (count > 3)\n\t\treturn \"No\";\n\tif (sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\")\n\t\treturn \"No\";\n\treturn \"Yes\";",
  "    // C++17\n    // std::regex r(\"^([a-zA-Z]+[0-9]{0,3}).(exe|txt|dll)$\");\n\
    \    // return std::regex_match(file_name, r) ? \"Yes\" : \"No\";\n    // C++14\n\
    \    std::regex r(\"^([a-zA-Z]+[0-9]{0,3}).(exe|txt|dll)$\");\n    return std::regex_match(file_name,\
    \ r) ? \"Yes\" : \"No\";", '    return "";', "    int count = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(isdigit(file_name[i])) {\n\
    \            count++;\n        }\n    }\n    if(count > 3) {\n        return \"\
    No\";\n    }\n    int index = file_name.find('.');\n    if(index == -1) {\n  \
    \      return \"No\";\n    }\n    std::string substr1 = file_name.substr(0, index);\n\
    \    std::string substr2 = file_name.substr(index + 1);\n    if(substr1.length()\
    \ == 0 || !isalpha(substr1[0])) {\n        return \"No\";\n    }\n    if(substr2\
    \ != \"txt\" && substr2 != \"exe\" && substr2 != \"dll\") {\n        return \"\
    No\";\n    }\n    return \"Yes\";", "\tint count = 0;\n\tstd::string ans = \"\
    No\";\n\t// Check for digits\n\tfor (int i = 0; i < file_name.length(); i++) {\n\
    \t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\
    \t}\n\tif (count > 3) {\n\t\treturn ans;\n\t}\n\t// Check for dot\n\tint dot =\
    \ 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] ==\
    \ '.') {\n\t\t\tdot++;\n\t\t}\n\t}\n\tif (dot != 1) {\n\t\treturn ans;\n\t}\n\t\
    // Check for substring\n\tstd::string s1 = \"\";\n\tstd::string s2 = \"\";\n\t\
    int j = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tj = i;\n\t\t\tbreak;\n\t\t}\n\t\ts1 = s1 + file_name[i];\n\t\
    }\n\tfor (int i = j + 1; i < file_name.length(); i++) {\n\t\ts2 = s2 + file_name[i];\n\
    \t}\n\tif (s1[0] < 'a' || s1[0] > 'z') {\n\t\treturn ans;\n\t}\n\tif (s2 != \"\
    txt\" && s2 != \"exe\" && s2 != \"dll\") {\n\t\treturn ans;\n\t}\n\tans = \"Yes\"\
    ;\n\treturn ans;", "    int num_digits = 0;\n    int dot_count = 0;\n    std::string\
    \ sub_str;\n    for (int i = 0; i < file_name.length(); i++) {\n        // check\
    \ for the number of digits in filename\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            num_digits++;\n        }\n        // count number of\
    \ dots\n        if (file_name[i] == '.') {\n            dot_count++;\n       \
    \ }\n        // make a substring\n        if (file_name[i] == '.') {\n       \
    \     sub_str = file_name.substr(i+1, file_name.length()-1);\n        }\n    }\n\
    \    if (num_digits > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    else if (sub_str != \"txt\" && sub_str != \"exe\" && sub_str != \"dll\")\
    \ {\n        return \"No\";\n    }\n    else {\n        return \"Yes\";\n    }",
  "    //check if there is more than 3 digits\n    int number_of_digits = 0;\n   \
    \ for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] >= '0'\
    \ && file_name[i] <= '9')\n            number_of_digits++;\n    }\n    if(number_of_digits\
    \ > 3)\n        return \"No\";\n    //check for exactly one dot\n    int number_of_dots\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i]\
    \ == '.')\n            number_of_dots++;\n    }\n    if(number_of_dots != 1)\n\
    \        return \"No\";\n    //check if substring before dot is not empty and\
    \ starts with alphabet\n    std::string before_dot;\n    int i = 0;\n    while(file_name[i]\
    \ != '.'){\n        before_dot += file_name[i];\n        i++;\n    }\n    // std::cout\
    \ << before_dot << \"\\n\";\n    if(before_dot.length() == 0)\n        return\
    \ \"No\";\n    if(!((before_dot[0] >= 'a' && before_dot[0] <= 'z') || \n     \
    \    (before_dot[0] >= 'A' && before_dot[0] <= 'Z')))\n        return \"No\";\n\
    \    //check if substring after dot is one of these: ['txt', 'exe', 'dll']\n \
    \   std::string after_dot;\n    i = file_name.length() - 1;\n    while(file_name[i]\
    \ != '.'){\n        after_dot += file_name[i];\n        i--;\n    }\n    // std::cout\
    \ << after_dot << \"\\n\";\n    std::reverse(after_dot.begin(), after_dot.end());\n\
    \    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n\
    \        return \"No\";\n    return \"Yes\";", "    std::string no = \"No\";\n\
    \    std::string yes = \"Yes\";\n    std::string onlyLetters = \"([a-zA-Z]+)([0-9]*)(\\\
    \\.txt|\\\\.exe|\\\\.dll)\";\n    std::regex reg(onlyLetters);\n    if(std::regex_match(file_name,\
    \ reg)){\n        return yes;\n    }\n    return no;", "\t// Check if the file's\
    \ name contains one dot.\n\tif (file_name.find('.') == std::string::npos ||\n\t\
    \tfile_name.find('.') != file_name.rfind('.'))\n\t\treturn \"No\";\n\t// Check\
    \ if the file's name contains not more than three digits ('0'-'9').\n\tfor (int\
    \ i = 0; i < file_name.size(); i++)\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n\t\t\tif (i - file_name.find('.') > 3)\n\t\t\t\treturn \"No\";\n\t\
    // Check if the substring before the dot is not empty and starts with a letter\
    \ from the latin alphapet.\n\tif (file_name.substr(0, file_name.find('.')).empty()\
    \ ||\n\t\t(file_name[0] < 'a' || file_name[0] > 'z') && (file_name[0] < 'A' ||\
    \ file_name[0] > 'Z'))\n\t\treturn \"No\";\n\t// Check if the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll'].\n\tif (file_name.substr(file_name.find('.')\
    \ + 1) != \"txt\" &&\n\t\tfile_name.substr(file_name.find('.') + 1) != \"exe\"\
    \ &&\n\t\tfile_name.substr(file_name.find('.') + 1) != \"dll\")\n\t\treturn \"\
    No\";\n\treturn \"Yes\";", "    int count = 0;\n    int dot_loc = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n            count++;\n        if(file_name[i] == '.')\n           \
    \ dot_loc = i;\n    }\n    std::string sub_str = file_name.substr(dot_loc);\n\
    \    if(sub_str == \".txt\" || sub_str == \".exe\" || sub_str == \".dll\") {\n\
    \        if(count > 3) {\n            return \"No\";\n        }\n        else\
    \ {\n            std::string sub_str_pre = file_name.substr(0, dot_loc);\n   \
    \         if(sub_str_pre[0] >= 'a' && sub_str_pre[0] <= 'z' || sub_str_pre[0]\
    \ >= 'A' && sub_str_pre[0] <= 'Z') {\n                return \"Yes\";\n      \
    \      }\n            else {\n                return \"No\";\n            }\n\
    \        }\n    }\n    else {\n        return \"No\";\n    }", "\t// check first\
    \ symbol\n\tif (file_name[0] < 65 || file_name[0] > 122 || file_name[0] > 90 &&\
    \ file_name[0] < 97)\n\t\treturn \"No\";\n\t// check digit\n\tint i = 0;\n\tfor\
    \ (i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i] == '.') break;\n\t\
    \tif (file_name[i] >= 48 && file_name[i] <= 57) return \"No\";\n\t}\n\tif (i >=\
    \ file_name.size()) return \"No\";\n\tif (i >= 3) return \"No\";\n\tint j = 0;\n\
    \tfor (j = i + 1; j < file_name.size(); j++) {\n\t\tif (file_name[j] >= 97 &&\
    \ file_name[j] <= 122) file_name[j] -= 32;\n\t}\n\tif (file_name.substr(i + 1,\
    \ 3) != \"TXT\" && file_name.substr(i + 1, 3) != \"EXE\" && file_name.substr(i\
    \ + 1, 3) != \"DLL\")\n\t\treturn \"No\";\n\treturn \"Yes\";", "    int count\
    \ = 0;\n    int dot_index = 0;\n    for(int i = 0; i < file_name.length(); i++)\
    \ {\n        if(isdigit(file_name[i])) {\n            count++;\n        }\n  \
    \      if(file_name[i] == '.') {\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    std::string sub_string_1\
    \ = file_name.substr(0, dot_index);\n    std::string sub_string_2 = file_name.substr(dot_index\
    \ + 1, file_name.length() - 1);\n    if(count == 0 && isalpha(sub_string_1[0])\
    \ && (sub_string_2 == \"txt\" || sub_string_2 == \"exe\" || sub_string_2 == \"\
    dll\")) {\n        return \"Yes\";\n    }\n    return \"No\";", "    int n = file_name.size();\n\
    \    int cnt = 0;\n    for(int i = 0; i < n; i++) {\n        if(file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            cnt++;\n        }\n    }\n    if(cnt\
    \ > 3) {\n        return \"No\";\n    }\n    int cnt_dot = 0;\n    int dot_pos\
    \ = -1;\n    for(int i = 0; i < n; i++) {\n        if(file_name[i] == '.') {\n\
    \            cnt_dot++;\n            dot_pos = i;\n        }\n    }\n    if(cnt_dot\
    \ != 1) {\n        return \"No\";\n    }\n    if(dot_pos == 0 || dot_pos == n\
    \ - 1) {\n        return \"No\";\n    }\n    for(int i = 0; i < dot_pos; i++)\
    \ {\n        if(!(file_name[i] >= 'a' && file_name[i] <= 'z') && !(file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z')) {\n            return \"No\";\n        }\n \
    \   }\n    std::string s = file_name.substr(dot_pos + 1, n - dot_pos - 1);\n \
    \   if(s == \"txt\" || s == \"exe\" || s == \"dll\") {\n        return \"Yes\"\
    ;\n    }\n    return \"No\";", "  // T\xFA c\xF3digo va aqu\xED vvv\n  int dot_counter\
    \ = 0;\n  int digit_counter = 0;\n  for (int i = 0; i < file_name.size(); i++)\
    \ {\n    if (file_name[i] == '.') {\n      dot_counter++;\n    }\n    if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n      digit_counter++;\n    }\n  }\n  if (dot_counter\
    \ != 1 || digit_counter > 3) {\n    return \"No\";\n  }\n  std::string substring_1\
    \ = file_name.substr(0, file_name.find('.'));\n  std::string substring_2 = file_name.substr(file_name.find('.')\
    \ + 1);\n  if (substring_1.empty() ||\n      (substring_1[0] < 'a' || substring_1[0]\
    \ > 'z') &&\n      (substring_1[0] < 'A' || substring_1[0] > 'Z')) {\n    return\
    \ \"No\";\n  }\n  if (substring_2 == \"txt\" || substring_2 == \"exe\" || substring_2\
    \ == \"dll\") {\n    return \"Yes\";\n  }\n  return \"No\";\n  // T\xFA c\xF3\
    digo va aqu\xED ^^^", "    std::regex reg(R\"(^([a-zA-Z]\\w*\\.txt|[a-zA-Z]\\\
    w*\\.exe|[a-zA-Z]\\w*\\.dll)$)\");\n    return std::regex_match(file_name, reg)\
    \ ? \"Yes\" : \"No\";", "  int dot_idx = file_name.find(\".\");\n  int digits\
    \ = 0;\n  for (int i = 0; i < file_name.size(); i++) {\n    if (isdigit(file_name[i]))\
    \ {\n      digits++;\n    }\n  }\n  if (digits > 3) {\n    return \"No\";\n  }\n\
    \  std::string ext = file_name.substr(dot_idx + 1);\n  std::vector<std::string>\
    \ valid_exts = {\"txt\", \"exe\", \"dll\"};\n  std::set<std::string> valid_exts_set(valid_exts.begin(),\
    \ valid_exts.end());\n  if (valid_exts_set.find(ext) == valid_exts_set.end())\
    \ {\n    return \"No\";\n  }\n  if (dot_idx == 0) {\n    return \"No\";\n  }\n\
    \  if (!isalpha(file_name[0])) {\n    return \"No\";\n  }\n  return \"Yes\";",
  "\t// If a dot exists, check the string before and after it.\n\tif (file_name.find('.')\
    \ != std::string::npos) {\n\t\tstd::string before_dot = file_name.substr(0, file_name.find('.'));\n\
    \t\tstd::string after_dot = file_name.substr(file_name.find('.') + 1);\n\t\t//\
    \ Check the string before the dot.\n\t\tif (before_dot.empty() || (!isalpha(before_dot[0])))\n\
    \t\t\treturn \"No\";\n\t\tfor (unsigned int i = 0; i < before_dot.length(); i++)\
    \ {\n\t\t\tif (!isalpha(before_dot[i]) && !isdigit(before_dot[i]))\n\t\t\t\treturn\
    \ \"No\";\n\t\t}\n\t\tint count = 0;\n\t\tfor (unsigned int i = 0; i < before_dot.length();\
    \ i++) {\n\t\t\tif (isdigit(before_dot[i]))\n\t\t\t\tcount++;\n\t\t}\n\t\tif (count\
    \ > 3)\n\t\t\treturn \"No\";\n\t\t// Check the string after the dot.\n\t\tstd::vector<std::string>\
    \ extensions;\n\t\textensions.push_back(\"txt\");\n\t\textensions.push_back(\"\
    exe\");\n\t\textensions.push_back(\"dll\");\n\t\tfor (int i = 0; i < 3; i++) {\n\
    \t\t\tif (after_dot == extensions[i])\n\t\t\t\treturn \"Yes\";\n\t\t}\n\t\treturn\
    \ \"No\";\n\t}\n\telse\n\t\treturn \"No\";", "\t//...\n\tstd::string result =\
    \ \"No\";\n\tint count = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\
    \t\tif (file_name[i] <= '9' && file_name[i] >= '0') {\n\t\t\tcount++;\n\t\t}\n\
    \t}\n\tif (count > 3) {\n\t\treturn result;\n\t}\n\tstd::string ext_name = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (ext_name == \"txt\" || ext_name == \"exe\" || ext_name == \"dll\"\
    ) {\n\t\tresult = \"Yes\";\n\t}\n\treturn result;", "\tstd::regex pattern(\"([a-zA-Z][a-zA-Z0-9]{0,}(\\\
    \\.txt|\\\\.exe|\\\\.dll))\");\n\tif (std::regex_match(file_name, pattern)) {\n\
    \t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "    int count_numbers = 0;\n   \
    \ std::string dot = \".\";\n    int dot_position = 0;\n    int string_length =\
    \ file_name.length();\n    std::string prefix;\n    std::string suffix;\n    std::string\
    \ prefix_regex = \"[a-zA-Z]\";\n    std::regex reg(prefix_regex);\n    // take\
    \ a first look at the file name, and count the number of digits in the file name\n\
    \    for (int i = 0; i < string_length; i++) {\n        if (isdigit(file_name[i]))\n\
    \            count_numbers++;\n    }\n    // see if the number of digits in the\
    \ file name is greater than 3 or not\n    if (count_numbers > 3)\n        return\
    \ \"No\";\n    else if (count_numbers <= 3) {\n        // take a look if the file\
    \ name contains a dot, if yes, then look at the substring before the dot\n   \
    \     if (file_name.find(dot) != std::string::npos) {\n            dot_position\
    \ = file_name.find(dot);\n            if (dot_position != 0) {\n             \
    \   prefix = file_name.substr(0, dot_position);\n                suffix = file_name.substr(dot_position\
    \ + 1, file_name.length());\n                // take a look at the suffix and\
    \ see if it is one of the possible endings\n                if (suffix == \"txt\"\
    \ || suffix == \"exe\" || suffix == \"dll\") {\n                    if (regex_match(prefix,\
    \ reg))\n                        return \"Yes\";\n                    else\n \
    \                       return \"No\";\n                }\n                else\n\
    \                    return \"No\";\n            }\n            else\n       \
    \         return \"No\";\n        }\n        else\n            return \"No\";\n\
    \    }\n    return \"No\";", "\tint count = 0;\n\tint countDot = 0;\n\tint countLetter\
    \ = 0;\n\tint countLetterAfterDot = 0;\n\tstd::string file_name2 = file_name;\n\
    \tstd::string file_name3 = file_name;\n\tstd::string file_name4 = file_name;\n\
    \t// check for more than 3 digits\n\tfor (char c : file_name) {\n\t\tif (c >=\
    \ '0' && c <= '9') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn\
    \ \"No\";\n\t}\n\t// check for one dot\n\tfor (char c : file_name2) {\n\t\tif\
    \ (c == '.') {\n\t\t\tcountDot++;\n\t\t}\n\t}\n\tif (countDot != 1) {\n\t\treturn\
    \ \"No\";\n\t}\n\t// check for letter before dot\n\tfor (char c : file_name3)\
    \ {\n\t\tif (c == '.') {\n\t\t\tbreak;\n\t\t}\n\t\tif ((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z')) {\n\t\t\tcountLetter++;\n\t\t}\n\t}\n\tif (countLetter\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\t// check for only certain extensions after\
    \ dot\n\tstd::string extension = file_name4.substr(file_name4.find('.') + 1);\n\
    \tif ((extension != \"txt\") && (extension != \"exe\") && (extension != \"dll\"\
    )) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "    if (file_name.find('.')\
    \ == std::string::npos) return \"No\";\n    if (std::count(file_name.begin(),\
    \ file_name.end(), '.') != 1) return \"No\";\n    if (!std::isalpha(file_name[0]))\
    \ return \"No\";\n    if (std::count_if(file_name.begin(), file_name.end(), [](auto\
    \ a) { return std::isdigit(a); }) > 3) return \"No\";\n    if (file_name.substr(file_name.find('.')+1)\
    \ != \"txt\" && file_name.substr(file_name.find('.')+1) != \"exe\" && file_name.substr(file_name.find('.')+1)\
    \ != \"dll\") return \"No\";\n    return \"Yes\";", "  // PUT YOUR CODE HERE\n\
    \  int a = 0;\n  int b = 0;\n  std::string extension;\n  for (int i = 0; i < file_name.length();\
    \ i++) {\n    if (a > 3) {\n      return \"No\";\n    }\n    if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n      a++;\n    }\n    if (file_name[i] ==\
    \ '.') {\n      b++;\n      extension = file_name.substr(i+1, file_name.length()-1);\n\
    \    }\n  }\n  if (a > 3 || b != 1 || (file_name[0] < 'a' || file_name[0] > 'z')\
    \ && (file_name[0] < 'A' || file_name[0] > 'Z')) {\n    return \"No\";\n  }\n\
    \  if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \    return \"Yes\";\n  }\n  return \"No\";", "    if(file_name.empty())\n   \
    \     return \"No\";\n    if(file_name.find(\" \") != std::string::npos)\n   \
    \     return \"No\";\n    int digit = 0;\n    for(int i = 0; i < file_name.size();\
    \ i++) {\n        if(isdigit(file_name[i]))\n            digit++;\n    }\n   \
    \ if(digit > 3)\n        return \"No\";\n    if(file_name.find(\".\") == std::string::npos)\n\
    \        return \"No\";\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n     \
    \   return \"No\";\n    std::string f_name = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(f_name.empty())\n        return \"No\";\n    if(!isalpha(f_name[0]))\n\
    \        return \"No\";\n    return \"Yes\";", "    if (file_name.size() > 3)\
    \ {\n        return \"No\";\n    }\n    if (file_name.find('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (!isalpha(file_name[0])) {\n      \
    \  return \"No\";\n    }\n    if (file_name.substr(file_name.find('.') + 1) !=\
    \ \"txt\" &&\n        file_name.substr(file_name.find('.') + 1) != \"exe\" &&\n\
    \        file_name.substr(file_name.find('.') + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // your code here\n    std::vector<std::string>\
    \ vec = {\"txt\", \"exe\", \"dll\"};\n    std::stringstream str(file_name);\n\
    \    std::string word;\n    std::vector<std::string> arr;\n    std::string dot\
    \ = \".\";\n    int count = 0;\n    int num = 0;\n    int flag = 0;\n    int len\
    \ = 0;\n    if (file_name[0] <= 'Z' && file_name[0] >= 'A' || file_name[0] <=\
    \ 'z' && file_name[0] >= 'a') {\n        while (getline(str, word, '.')) {\n \
    \           arr.push_back(word);\n            count++;\n        }\n        if\
    \ (count == 2) {\n            for (int i = 0; i < arr[0].length(); i++) {\n  \
    \              if (arr[0][i] <= '9' && arr[0][i] >= '0') {\n                 \
    \   num++;\n                }\n            }\n            if (num <= 3) {\n  \
    \              len = arr[1].length();\n                for (int i = 0; i < 3;\
    \ i++) {\n                    if (arr[1][i] == vec[0][i]) {\n                \
    \        flag++;\n                    }\n                }\n                if\
    \ (flag == 3) {\n                    return \"Yes\";\n                }\n    \
    \            flag = 0;\n                for (int i = 0; i < 3; i++) {\n      \
    \              if (arr[1][i] == vec[1][i]) {\n                        flag++;\n\
    \                    }\n                }\n                if (flag == 3) {\n\
    \                    return \"Yes\";\n                }\n                flag\
    \ = 0;\n                for (int i = 0; i < 3; i++) {\n                    if\
    \ (arr[1][i] == vec[2][i]) {\n                        flag++;\n              \
    \      }\n                }\n                if (flag == 3) {\n              \
    \      return \"Yes\";\n                }\n            }\n        }\n    }\n \
    \   return \"No\";", "\tint cnt = 0;\n\tbool dot = false;\n\tstd::string sub1,\
    \ sub2;\n\tfor (int i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcnt++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot = true;\n\t\t\tsub1 = file_name.substr(0, i);\n\t\t\tsub2\
    \ = file_name.substr(i + 1, file_name.size() - i - 1);\n\t\t}\n\t}\n\tif (dot\
    \ && (sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") && cnt <= 3 && sub1.size()\
    \ != 0 && ((sub1[0] >= 'a' && sub1[0] <= 'z') || (sub1[0] >= 'A' && sub1[0] <=\
    \ 'Z'))) {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "\t//std::cout << file_name\
    \ << \"\\n\";\n\tint file_name_length = file_name.length();\n\tstd::string extension\
    \ = file_name.substr(file_name_length - 3, file_name_length);\n\tint last_dot_position\
    \ = file_name.find_last_of(\".\");\n\tif(last_dot_position == std::string::npos){\n\
    \t\treturn \"No\";\n\t}\n\tstd::string extension_test = file_name.substr(last_dot_position\
    \ + 1, file_name_length);\n\tstd::string file_name_without_extension = file_name.substr(0,\
    \ last_dot_position);\n\t//std::cout << \"File name without extension: \" << file_name_without_extension\
    \ << \"\\n\";\n\t//std::cout << \"Extension: \" << extension << \"\\n\";\n\tif(extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\"){\n\t\tif(isalpha(file_name_without_extension[0])){\n\
    \t\t\t//std::cout << \"File name without extension \" << file_name_without_extension\
    \ << \"\\n\";\n\t\t\t//std::cout << file_name_without_extension.find_first_of(\"\
    0123456789\") << \"\\n\";\n\t\t\tif(file_name_without_extension.find_first_of(\"\
    0123456789\") != std::string::npos){\n\t\t\t\tint first_digit_position = file_name_without_extension.find_first_of(\"\
    0123456789\");\n\t\t\t\tint number_of_digits = file_name_without_extension.length()\
    \ - first_digit_position;\n\t\t\t\tif(number_of_digits <= 3){\n\t\t\t\t\treturn\
    \ \"Yes\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\telse{\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t",
  "    size_t dot_pos = file_name.find('.');\n    if (dot_pos == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    std::string prefix = file_name.substr(0,\
    \ dot_pos);\n    std::string suffix = file_name.substr(dot_pos + 1);\n    if (prefix.length()\
    \ == 0) {\n        return \"No\";\n    }\n    std::set<std::string> valid_suffixes\
    \ = {\"txt\", \"exe\", \"dll\"};\n    if (valid_suffixes.find(suffix) == valid_suffixes.end())\
    \ {\n        return \"No\";\n    }\n    if (prefix.length() - std::count_if(prefix.begin(),\
    \ prefix.end(), isdigit) > 3) {\n        return \"No\";\n    }\n    if (!isalpha(prefix[0]))\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";", "    int index = 0;\n\
    \    int index_of_dot = 0;\n    int count_of_digit = 0;\n    std::string result\
    \ = \"No\";\n    std::string number_string = \"0123456789\";\n    std::string\
    \ letter_string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\
    \    std::string extension_string = \"txtexe\";\n    std::string dot = \".\";\n\
    \    // \u7B2C\u4E00\u4E2A\u5B57\u7B26\u5FC5\u987B\u662F\u5B57\u6BCD\n    if (letter_string.find(file_name[0])\
    \ == std::string::npos) {\n        return result;\n    }\n    // \u6700\u540E\u4E00\
    \u4E2A\u5B57\u7B26\u5FC5\u987B\u662Fdot\n    if (file_name[file_name.size() -\
    \ 1] != dot[0]) {\n        return result;\n    }\n    // \u627E\u5230\u7B2C\u4E00\
    \u4E2Adot\n    while (index < file_name.size()) {\n        if (file_name[index]\
    \ == dot[0]) {\n            index_of_dot = index;\n            break;\n      \
    \  }\n        ++index;\n    }\n    // dot\u524D\u9762\u53EA\u80FD\u6709\u6570\u5B57\
    \u548C\u5B57\u6BCD\uFF0C\u6570\u5B57\u4E0D\u80FD\u8D85\u8FC73\u4E2A\n    for (int\
    \ i = 0; i < index_of_dot; ++i) {\n        if (number_string.find(file_name[i])\
    \ != std::string::npos) {\n            ++count_of_digit;\n        }\n        if\
    \ (count_of_digit > 3) {\n            return result;\n        }\n        if (number_string.find(file_name[i])\
    \ == std::string::npos && letter_string.find(file_name[i]) == std::string::npos)\
    \ {\n            return result;\n        }\n    }\n    // dot\u540E\u9762\u53EA\
    \u80FD\u662Ftxt\uFF0Cexe\uFF0Cdll\n    std::string suffix = file_name.sub", " \
    \   // int i,count;\n    // for(i=0;i<file_name.length();i++)\n    // {\n    //\
    \     if(file_name[i]>=65 && file_name[i]<=90)\n    //     {\n    //         break;\n\
    \    //     }\n    //     else if(file_name[i]>=97 && file_name[i]<=122)\n   \
    \ //     {\n    //         break;\n    //     }\n    // }\n    // count=0;\n \
    \   // for(i=0;i<file_name.length();i++)\n    // {\n    //     if(file_name[i]>=48\
    \ && file_name[i]<=57)\n    //     {\n    //         count++;\n    //     }\n\
    \    // }\n    // if(count>3)\n    // {\n    //     return \"No\";\n    // }\n\
    \    // for(i=0;i<file_name.length();i++)\n    // {\n    //     if(file_name[i]=='.')\n\
    \    //     {\n    //         break;\n    //     }\n    // }\n    // std::string\
    \ a,b;\n    // for(int j=0;j<i;j++)\n    // {\n    //     a+=file_name[j];\n \
    \   // }\n    // for(int j=i+1;j<file_name.length();j++)\n    // {\n    //   \
    \  b+=file_name[j];\n    // }\n    // if(i==0 || i==file_name.length()-1)\n  \
    \  // {\n    //     return \"No\";\n    // }\n    // if(a[0]>=65 && a[0]<=90 ||\
    \ a[0]>=97 && a[0]<=122)\n    // {\n    //     if(b==\"txt\" || b==\"exe\" ||\
    \ b==\"dll\")\n    //     {\n    //         return \"Yes\";\n    //     }\n  \
    \  //     else\n    //     {\n    //         return \"No\";\n    //     }\n  \
    \  //", "    // Your code here\n    // {\"txt\", \"exe\", \"dll\"}\n    std::vector<std::string>\
    \ extns = {\"txt\", \"exe\", \"dll\"};\n    int cnt = 0;\n    int dot_idx = -1;\n\
    \    for(int i = 0; i < file_name.size(); i++) {\n        if(file_name[i] == '.')\
    \ {\n            dot_idx = i;\n            break;\n        } else if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            cnt++;\n        }\n    }\n   \
    \ if(cnt > 3) return \"No\";\n    std::string prefix = file_name.substr(0, dot_idx);\n\
    \    if(prefix == \"\") return \"No\";\n    char ch = prefix[0];\n    if(!((ch\
    \ >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))) return \"No\";\n    std::string\
    \ extn = file_name.substr(dot_idx + 1);\n    if(std::find(extns.begin(), extns.end(),\
    \ extn) == extns.end()) return \"No\";\n    return \"Yes\";", "\tint dot_count\
    \ = 0;\n\tint number_count = 0;\n\tfor (int i = 0; i < file_name.length(); i++)\
    \ {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tnumber_count++;\n\t\t}\n\t}\n\tif (number_count\
    \ > 3 || dot_count != 1)\n\t\treturn \"No\";\n\tstd::string substring_after_dot\
    \ = file_name.substr(file_name.find(\".\") + 1);\n\tstd::string substring_before_dot\
    \ = file_name.substr(0, file_name.find(\".\"));\n\tif ((substring_after_dot ==\
    \ \"txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\"\
    ) && (substring_before_dot[0] >= 'a' && substring_before_dot[0] <= 'z') || (substring_before_dot[0]\
    \ >= 'A' && substring_before_dot[0] <= 'Z'))\n\t\treturn \"Yes\";\n\treturn \"\
    No\";", "\tint count = 0;\n\tbool dot = false;\n\tbool err = false;\n\tif(file_name.empty())\
    \ {\n\t\treturn \"No\";\n\t}\n\tfor(int i = 0; i < file_name.size(); i++) {\n\t\
    \tif(!(file_name[i] >= '0' && file_name[i] <= '9')) {\n\t\t\tcount = 0;\n\t\t\
    }\n\t\tif(file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t\
    }\n\t\tif(count > 3) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif(file_name[i] == '.')\
    \ {\n\t\t\tdot = true;\n\t\t}\n\t\tif(i == 0 && !(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') && !(file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\t\t\treturn \"\
    No\";\n\t\t}\n\t\tif(dot) {\n\t\t\tif(!(file_name[i] == 't' || file_name[i] ==\
    \ 'e' || file_name[i] == 'x' || file_name[i] == 'd' || file_name[i] == 'l')) {\n\
    \t\t\t\terr = true;\n\t\t\t}\n\t\t}\n\t}\n\tif(!dot) {\n\t\treturn \"No\";\n\t\
    }\n\tif(file_name[file_name.size() - 3] != '.' || file_name[file_name.size() -\
    \ 2] != 't' || file_name[file_name.size() - 1] != 'x' || file_name[file_name.size()\
    \ - 1] != 't') {\n\t\treturn \"No\";\n\t}\n\tif(err) {\n\t\treturn \"No\";\n\t\
    }\n\treturn \"Yes\";", "    std::regex pattern(\"[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .(txt|exe|dll)\");\n    return regex_match(file_name, pattern) ? \"Yes\" : \"\
    No\";", "\tstd::regex reg (\"(\\\\d{3,})|(\\\\.)|([a-zA-Z]+\\\\.)\");\n\treturn\
    \ std::regex_match(file_name, reg) ? \"No\" : \"Yes\";", "\tint dot_index = file_name.find(\"\
    .\");\n\tif (dot_index == -1) {\n\t\treturn \"No\";\n\t}\n\tstd::string sub_str_1\
    \ = file_name.substr(0, dot_index);\n\tstd::string sub_str_2 = file_name.substr(dot_index\
    \ + 1);\n\tif (sub_str_1.empty() || std::isdigit(sub_str_1[0])) {\n\t\treturn\
    \ \"No\";\n\t}\n\tfor (int i = 0; i < sub_str_1.size(); i++) {\n\t\tif (sub_str_1[i]\
    \ == ' ') {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tif (sub_str_2 != \"txt\" && sub_str_2\
    \ != \"exe\" && sub_str_2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\tfor (int i\
    \ = 0; i < sub_str_1.size(); i++) {\n\t\tif (std::isdigit(sub_str_1[i])) {\n\t\
    \t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";", "    int digits = 0;\n   \
    \ bool dot_exist = false;\n    std::string file_type;\n    for (size_t i = 0;\
    \ i < file_name.size(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            digits++;\n        }\n        if (file_name[i] == '.')\
    \ {\n            if (i != 0) {\n                dot_exist = true;\n          \
    \  }\n        }\n        if (dot_exist) {\n            if (file_name[i] >= 'a'\
    \ && file_name[i] <= 'z') {\n                file_type += file_name[i];\n    \
    \        }\n            if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n  \
    \              file_type += file_name[i];\n            }\n        }\n    }\n \
    \   if (digits > 3) {\n        return \"No\";\n    }\n    if (!dot_exist) {\n\
    \        return \"No\";\n    }\n    if (file_type != \"txt\" && file_type != \"\
    exe\" && file_type != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";", "    int n = file_name.size();\n    int dot_index = 0;\n    std::string\
    \ extension;\n    std::string first_part;\n    int cnt_digits = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        if(file_name[i] == '.') {\n            dot_index\
    \ = i;\n            break;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            cnt_digits++;\n        }\n    }\n    if(cnt_digits >\
    \ 3) {\n        return \"No\";\n    }\n    for(int i = dot_index + 1; i < n; i++)\
    \ {\n        extension += file_name[i];\n    }\n    if(extension != \"txt\" &&\
    \ extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n  \
    \  }\n    for(int i = 0; i < dot_index; i++) {\n        first_part += file_name[i];\n\
    \    }\n    if(first_part == \"\") {\n        return \"No\";\n    }\n    if(first_part[0]\
    \ >= 'a' && first_part[0] <= 'z') {\n        return \"Yes\";\n    }\n    if(first_part[0]\
    \ >= 'A' && first_part[0] <= 'Z') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";", "\tint len = file_name.length();\n\tint count = 0;\n\tfor (int i =\
    \ 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\tint count_dot\
    \ = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\
    \tcount_dot++;\n\t\t}\n\t}\n\tif (count_dot != 1) {\n\t\treturn \"No\";\n\t}\n\
    \tint dot_index = -1;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_index = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tstd::string before_dot\
    \ = file_name.substr(0, dot_index);\n\tint before_dot_len = before_dot.length();\n\
    \tif (before_dot_len == 0) {\n\t\treturn \"No\";\n\t}\n\tif (!((before_dot[0]\
    \ >= 'a' && before_dot[0] <= 'z') || (before_dot[0] >= 'A' && before_dot[0] <=\
    \ 'Z'))) {\n\t\treturn \"No\";\n\t}\n\tstd::string after_dot = file_name.substr(dot_index\
    \ + 1, len - 1);\n\tif (after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "  std::cout <<\
    \ \"Starting file_name_check\\n\";\n  // Write your code here\n  int i, count\
    \ = 0;\n  int dot_found = 0;\n  int extension_found = 0;\n  for(i = 0; file_name[i]\
    \ != '\\0'; i++) {\n    if(!(file_name[i] >= '0' && file_name[i] <= '9'))\n  \
    \    count = 0;\n    else if(file_name[i] >= '0' && file_name[i] <= '9')\n   \
    \   count++;\n    if(count > 3)\n      return \"No\";\n    if(file_name[i] ==\
    \ '.') {\n      dot_found = 1;\n      i++;\n      if(file_name[i] == 't' && file_name[i+1]\
    \ == 'x' && file_name[i+2] == 't')\n        extension_found = 1;\n      else if(file_name[i]\
    \ == 'e' && file_name[i+1] == 'x' && file_name[i+2] == 'e')\n        extension_found\
    \ = 1;\n      else if(file_name[i] == 'd' && file_name[i+1] == 'l' && file_name[i+2]\
    \ == 'l')\n        extension_found = 1;\n      else\n        return \"No\";\n\
    \    }\n  }\n  if(!dot_found)\n    return \"No\";\n  if(!extension_found)\n  \
    \  return \"No\";\n  if(file_name[0] < 'a' || file_name[0] > 'z')\n    return\
    \ \"No\";\n  return \"Yes\";", "    int counter = 0;\n    bool is_valid = false;\n\
    \    std::string exten = \"\";\n    for (size_t i = 0; i < file_name.size(); i++)\
    \ {\n        if (file_name[i] == '.') {\n            if (counter > 3) {\n    \
    \            return \"No\";\n            }\n            for (size_t j = i + 1;\
    \ j < file_name.size(); j++) {\n                exten += file_name[j];\n     \
    \       }\n            is_valid = true;\n            break;\n        }\n     \
    \   if (counter > 3) {\n            return \"No\";\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            counter++;\n        }\n    }\n\
    \    if (is_valid) {\n        if (exten == \"txt\" || exten == \"exe\" || exten\
    \ == \"dll\") {\n            return \"Yes\";\n        }\n    }\n    return \"\
    No\";", "  // Your code here\n  return \"\";", "    // Write your code here\n\
    \    size_t dot_index = file_name.find('.');\n    if (dot_index == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    std::string before_dot = file_name.substr(0,\
    \ dot_index);\n    std::string after_dot = file_name.substr(dot_index + 1);\n\
    \    if (before_dot.empty() || !isalpha(before_dot[0])) {\n        return \"No\"\
    ;\n    }\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    int count = 0;\n    for (char\
    \ c : before_dot) {\n        if (isdigit(c)) {\n            count++;\n       \
    \ }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    return \"\
    Yes\";", "\treturn \"\";", "\tchar array[file_name.length()];\n\tstrcpy(array,\
    \ file_name.c_str());\n\tint count_num = 0;\n\tint count_dot = 0;\n\tint count_others\
    \ = 0;\n\tint count_start_point = 0;\n\tint count_end_point = 0;\n\tfor (int i\
    \ = 0; i < file_name.length(); i++) {\n\t\tif (array[i] == '.') {\n\t\t\tcount_dot++;\n\
    \t\t\tcount_end_point = i;\n\t\t}\n\t\telse if (array[i] >= '0' && array[i] <=\
    \ '9') {\n\t\t\tcount_num++;\n\t\t}\n\t\telse if ((array[i] >= 'a' && array[i]\
    \ <= 'z') || (array[i] >= 'A' && array[i] <= 'Z')) {\n\t\t\tcount_start_point\
    \ = i;\n\t\t}\n\t\telse {\n\t\t\tcount_others++;\n\t\t}\n\t}\n\tstd::string temp\
    \ = file_name.substr(count_end_point + 1, file_name.length() - count_end_point\
    \ - 1);\n\tif (count_dot != 1 || count_num > 3 || count_others > 0 || count_start_point\
    \ == 0 || !(temp == \"txt\" || temp == \"exe\" || temp == \"dll\")) {\n\t\treturn\
    \ \"No\";\n\t}\n\telse {\n\t\treturn \"Yes\";\n\t}", "    std::regex regex_pattern(\n\
    \        R\"([a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll))\");\n    if (std::regex_match(file_name,\
    \ regex_pattern)) {\n        return \"Yes\";\n    }\n    return \"No\";", "  \
    \  int count = 0;\n    std::string sub_one, sub_two;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] == '.') {\n           \
    \ sub_one = file_name.substr(0, i);\n            sub_two = file_name.substr(i\
    \ + 1, file_name.length() - i - 1);\n            break;\n        }\n    }\n  \
    \  for (int i = 0; i < sub_one.length(); i++) {\n        if (sub_one[i] >= '0'\
    \ && sub_one[i] <= '9') {\n            count++;\n        }\n    }\n    if (count\
    \ > 3) {\n        return \"No\";\n    }\n    if (sub_one.length() == 0) {\n  \
    \      return \"No\";\n    }\n    if (sub_one[0] < 'a' || sub_one[0] > 'z') {\n\
    \        if (sub_one[0] < 'A' || sub_one[0] > 'Z') {\n            return \"No\"\
    ;\n        }\n    }\n    if (sub_two != \"txt\" && sub_two != \"exe\" && sub_two\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    //\
    \ Type your solution here\n    // int dotIndex = file_name.find(\".\");\n    //\
    \ std::string name = file_name.substr(0, dotIndex);\n    // if (std::count_if(name.begin(),\
    \ name.end(), ::isdigit) > 3) {\n    //     return \"No\";\n    // }\n    // if\
    \ (file_name.find(\".\") == std::string::npos) {\n    //     return \"No\";\n\
    \    // }\n    // if (file_name.find(\".\") == 0) {\n    //     return \"No\"\
    ;\n    // }\n    // std::string extension = file_name.substr(dotIndex + 1);\n\
    \    // if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n    //     return \"No\";\n    // }\n    // return \"Yes\";\n    int countDot\
    \ = 0;\n    int countDigit = 0;\n    int countLetter = 0;\n    bool firstLetter\
    \ = false;\n    bool afterDot = false;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            countDot++;\n      \
    \      afterDot = true;\n        }\n        if (isdigit(file_name[i])) {\n   \
    \         countDigit++;\n        }\n        if (isalpha(file_name[i])) {\n   \
    \         if (!firstLetter) {\n                firstLetter = true;\n         \
    \   }\n            if (afterDot) {\n                countLetter++;\n         \
    \   }\n        }\n    }\n    if (countDigit > 3) {\n        return \"No\";\n \
    \   }\n    if (countDot != 1) {\n        return \"No\";\n    }\n    if (!firstLetter)\
    \ {\n        return \"No\";\n    }\n    if (countLetter > 3) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "  // Your code here\n  int n = file_name.length();\n\
    \  if(n<6 || n>32)\n    return \"No\";\n  int count = 0;\n  for(int i=0;i<n;i++)\n\
    \  {\n    if(file_name[i]>='0' && file_name[i]<='9')\n      count++;\n  }\n  if(count>3)\n\
    \    return \"No\";\n  int pos = file_name.find('.');\n  if(pos == std::string::npos)\n\
    \    return \"No\";\n  std::string f1 = file_name.substr(0,pos);\n  std::string\
    \ f2 = file_name.substr(pos+1);\n  if(f1.length()==0 || (f1[0]<'a' || f1[0]>'z')\
    \ && (f1[0]<'A' || f1[0]>'Z'))\n    return \"No\";\n  if(f2 != \"txt\" && f2 !=\
    \ \"exe\" && f2 != \"dll\")\n    return \"No\";\n  return \"Yes\";", "    // Return\
    \ \"Yes\" if the file's name is valid, otherwise return \"No\"\n    std::string\
    \ result = \"No\";\n    // regex pattern to match a sequence of digits (0-9)\n\
    \    std::regex digit (\"[0-9]+\");\n    // regex pattern to match a sequence\
    \ of characters a-z or A-Z\n    std::regex letter (\"[a-zA-Z]+\");\n    // regex\
    \ pattern to match .txt .exe .dll\n    std::regex suffix (\".[txe]{1}[xdl]{1}\"\
    );\n    // regex pattern to match one dot in the file name\n    std::regex dot\
    \ (\"\\\\.\");\n    // regex match_results object\n    std::smatch match;\n  \
    \  // regex iterator to iterate over all matches\n    std::sregex_iterator pos\
    \ (file_name.begin(), file_name.end(), digit);\n    std::sregex_iterator end;\n\
    \    // count the number of digits\n    int count_digits = std::distance(pos,\
    \ end);\n    // count the number of dots\n    int count_dots = std::distance(std::sregex_iterator(file_name.begin(),\
    \ file_name.end(), dot), end);\n    // get the substring before the dot\n    std::string\
    \ pre_dot = file_name.substr(0, file_name.find(\".\"));\n    // Get the substring\
    \ after the dot\n    std::string post_dot = file_name.substr(file_name.find(\"\
    .\") + 1);\n    // does the substring after the dot match the suffix pattern\n\
    \    bool suffix_match = std::regex_match(post_dot, suffix);\n    // does the\
    \ substring before the dot match the letter pattern\n    bool letter_match = std::regex_match(pre_dot,\
    \ letter);\n    // if all the conditions are true\n    if ((count_digits <= 3)\
    \ && (count_dots == 1) && (pre_dot.length() > 0) && (suffix_match) && (letter_match))\
    \ {\n        result = \"Yes\";\n    }\n    return result;", "\tint cnt = 0;\n\t\
    for (auto i : file_name) {\n\t\tif (i >= '0' && i <= '9') cnt++;\n\t}\n\tif (cnt\
    \ > 3) return \"No\";\n\tint pos = file_name.find('.');\n\tif (pos == -1) return\
    \ \"No\";\n\tstd::string sub1 = file_name.substr(0, pos);\n\tstd::string sub2\
    \ = file_name.substr(pos + 1);\n\tif (sub1 == \"\") return \"No\";\n\tif (!isalpha(sub1[0]))\
    \ return \"No\";\n\tstd::vector<std::string> v = { \"txt\", \"exe\", \"dll\" };\n\
    \tbool is_exist = false;\n\tfor (auto i : v) {\n\t\tif (i == sub2) {\n\t\t\tis_exist\
    \ = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!is_exist) return \"No\";\n\treturn\
    \ \"Yes\";", "    std::string result = \"No\";\n    std::string chk_exts[3] =\
    \ {\"txt\", \"exe\", \"dll\"};\n    std::vector<char> chk_chars = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'};\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int digit_count = 0;\n    // Check if there is no more than three digits\n\
    \    for (char c : file_name) {\n        // Check if the first char is a digit\n\
    \        if (count == 0 && std::find(chk_chars.begin(), chk_chars.end(), c) !=\
    \ chk_chars.end()) {\n            return result;\n        }\n        if (std::find(chk_chars.begin(),\
    \ chk_chars.end(), c) != chk_chars.end()) {\n            digit_count++;\n    \
    \    }\n        if (c == '.') {\n            dot_count++;\n        }\n       \
    \ if (dot_count > 1) {\n            return result;\n        }\n        count++;\n\
    \    }\n    if (digit_count > 3) {\n        return result;\n    }\n    // Find\
    \ the file extension\n    std::string filename = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string ext = file_name.substr(file_name.find_last_of(\".\") +\
    \ 1);\n    if (std::find(chk_exts, chk_exts + 3, ext) != chk_exts + 3) {\n   \
    \     result = \"Yes\";\n    }\n    return result;", "    int count_digit = 0;\n\
    \    int count_dot = 0;\n    std::string::iterator it;\n    std::string name_before_dot\
    \ = \"\";\n    std::string name_after_dot = \"\";\n    std::string pattern[] =\
    \ {\"txt\", \"exe\", \"dll\"};\n    for (it = file_name.begin(); it != file_name.end();\
    \ it++) {\n        if (isdigit(*it)) {\n            count_digit++;\n        }\n\
    \        if (*it == '.') {\n            count_dot++;\n        }\n    }\n    if\
    \ (count_digit > 3 || count_dot != 1) {\n        return \"No\";\n    } else {\n\
    \        int index = file_name.find('.');\n        name_before_dot = file_name.substr(0,\
    \ index);\n        name_after_dot = file_name.substr(index + 1);\n        if (name_before_dot.length()\
    \ == 0 ||\n            !isalpha(name_before_dot[0])) {\n            return \"\
    No\";\n        } else {\n            for (int i = 0; i < 3; i++) {\n         \
    \       if (name_after_dot == pattern[i]) {\n                    return \"Yes\"\
    ;\n                }\n            }\n            return \"No\";\n        }\n \
    \   }", '    return "";', "  int count = 0;\n  if(file_name[0] >= 65 && file_name[0]\
    \ <= 90 || file_name[0] >= 97 && file_name[0] <= 122) {\n    for(int i = 0; i\
    \ < file_name.length(); i++) {\n      if(file_name[i] >= 48 && file_name[i] <=\
    \ 57) {\n        count++;\n      }\n    }\n    if(count <= 3) {\n      if(file_name.find(\"\
    .\") != std::string::npos) {\n        std::string sub1 = file_name.substr(0, file_name.find(\"\
    .\"));\n        std::string sub2 = file_name.substr(file_name.find(\".\") + 1);\n\
    \        if(sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n       \
    \   return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";", "    //\
    \ Your code goes here\n    if (std::count(file_name.begin(), file_name.end(),\
    \ '.') == 1) {\n        std::string left, right;\n        int dot_idx = file_name.find('.');\n\
    \        left = file_name.substr(0, dot_idx);\n        right = file_name.substr(dot_idx\
    \ + 1);\n        if ((left[0] >= 'a' && left[0] <= 'z') || (left[0] >= 'A' &&\
    \ left[0] <= 'Z')) {\n            if (std::count_if(left.begin(), left.end(),\
    \ [](char c) { return c >= '0' && c <= '9'; }) <= 3) {\n                if (right\
    \ == \"txt\" || right == \"exe\" || right == \"dll\") {\n                    return\
    \ \"Yes\";\n                }\n            }\n        }\n    }\n    return \"\
    No\";", "  size_t a = file_name.find('.');\n  // std::cout << a << std::endl;\n\
    \  std::string file_name_no_ext = file_name.substr(0, a);\n  std::string ext =\
    \ file_name.substr(a+1);\n  // std::cout << ext << std::endl;\n  int count = 0;\n\
    \  for (int i = 0; i < file_name_no_ext.length(); i++) {\n    if (file_name_no_ext[i]\
    \ >= '0' && file_name_no_ext[i] <= '9')\n      count++;\n  }\n  // std::cout <<\
    \ count << std::endl;\n  if (count > 3) {\n    return \"No\";\n  }\n  if (a ==\
    \ std::string::npos) {\n    return \"No\";\n  }\n  if (file_name_no_ext.length()\
    \ == 0) {\n    return \"No\";\n  }\n  if (count == 0) {\n    return \"No\";\n\
    \  }\n  if (!((file_name_no_ext[0] >= 'a' && file_name_no_ext[0] <= 'z') ||\n\
    \        (file_name_no_ext[0] >= 'A' && file_name_no_ext[0] <= 'Z'))) {\n    return\
    \ \"No\";\n  }\n  if (!(ext == \"txt\" || ext == \"exe\" || ext == \"dll\")) {\n\
    \    return \"No\";\n  }\n  return \"Yes\";", "  // TODO: Implement this function.\n\
    \  std::regex pattern(\"^[a-zA-Z]+([0-9]{1,3})?[.](txt|exe|dll)$\");\n  return\
    \ regex_match(file_name, pattern) ? \"Yes\" : \"No\";", "    int count = 0;\n\
    \    int count1 = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int flag =\
    \ 0;\n    int len = file_name.length();\n    if(len>=6){\n        if(isalpha(file_name[0])){\n\
    \            if(file_name[len-4]=='.'){\n                if(file_name[len-3]=='t'\
    \ && file_name[len-2]=='x' && file_name[len-1]=='t'){\n                    count\
    \ = 1;\n                }\n                if(file_name[len-3]=='e' && file_name[len-2]=='x'\
    \ && file_name[len-1]=='e'){\n                    count1 = 1;\n              \
    \  }\n                if(file_name[len-3]=='d' && file_name[len-2]=='l' && file_name[len-1]=='l'){\n\
    \                    count2 = 1;\n                }\n                for(int i=1;i<len-4;i++){\n\
    \                    if(isdigit(file_name[i])){\n                        count3\
    \ = count3 + 1;\n                    }\n                }\n                if(count3<=3){\n\
    \                    flag = 1;\n                }\n            }\n        }\n\
    \    }\n    if(flag==1 && (count==1 || count1==1 || count2==1)){\n        return\
    \ \"Yes\";\n    }\n    else{\n        return \"No\";\n    }", "    int dot = -1;\n\
    \    int num_count = 0;\n    int dot_count = 0;\n    int txt_count = 0;\n    int\
    \ exe_count = 0;\n    int dll_count = 0;\n    int nums_count = 0;\n    int letters_count\
    \ = 0;\n    // Write your code here\n    for(int i = 0; i < file_name.length();\
    \ i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n           \
    \ num_count++;\n        }\n        if(file_name[i] == '.'){\n            dot =\
    \ i;\n            dot_count++;\n        }\n        if(file_name[i] == '.' && (file_name[i+1]\
    \ == 't' && file_name[i+2] == 'x' && file_name[i+3] == 't')){\n            txt_count++;\n\
    \        }\n        if(file_name[i] == '.' && (file_name[i+1] == 'e' && file_name[i+2]\
    \ == 'x' && file_name[i+3] == 'e')){\n            exe_count++;\n        }\n  \
    \      if(file_name[i] == '.' && (file_name[i+1] == 'd' && file_name[i+2] == 'l'\
    \ && file_name[i+3] == 'l')){\n            dll_count++;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n            nums_count++;\n        }\n    \
    \    if((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' &&\
    \ file_name[i] <= 'Z')){\n            letters_count++;\n        }\n    }\n   \
    \ if(dot == -1){\n        return \"No\";\n    }\n    if(num_count > 3){\n    \
    \    return \"No\";\n    }\n    if(dot_count > 1){\n        return \"No\";", "\t\
    for (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n\t\t\tint digits = 0;\n\t\t\tfor (int j = i; j < file_name.length();\
    \ j++) {\n\t\t\t\tif (file_name[j] >= '0' && file_name[j] <= '9') {\n\t\t\t\t\t\
    digits++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (digits > 3) {\n\t\t\t\treturn \"No\"\
    ;\n\t\t\t}\n\t\t}\n\t}\n\tint dot_cnt = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_cnt++;\n\t\t}\n\t}\n\tif (dot_cnt\
    \ != 1) {\n\t\treturn \"No\";\n\t}\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tstd::string extension = file_name.substr(i\
    \ + 1, file_name.length() - 1);\n\t\t\tif (extension != \"txt\" && extension !=\
    \ \"exe\" && extension != \"dll\") {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' &&\
    \ file_name[0] <= 'Z') {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "  if(file_name.length()\
    \ < 3) {\n    return \"No\";\n  }\n  for(int i = 0; i < file_name.length(); i++)\
    \ {\n    if(file_name[i] == '.') {\n      if(i == 0 || i == file_name.length()\
    \ - 1) {\n        return \"No\";\n      }\n      if(i > 0 && (file_name[i-1] ==\
    \ '0' || file_name[i-1] == '1' || file_name[i-1] == '2' || file_name[i-1] == '3'\
    \ || file_name[i-1] == '4' || file_name[i-1] == '5' || file_name[i-1] == '6' ||\
    \ file_name[i-1] == '7' || file_name[i-1] == '8' || file_name[i-1] == '9')) {\n\
    \        return \"No\";\n      }\n      if(i > 1 && (file_name[i-2] == '0' ||\
    \ file_name[i-2] == '1' || file_name[i-2] == '2' || file_name[i-2] == '3' || file_name[i-2]\
    \ == '4' || file_name[i-2] == '5' || file_name[i-2] == '6' || file_name[i-2] ==\
    \ '7' || file_name[i-2] == '8' || file_name[i-2] == '9')) {\n        return \"\
    No\";\n      }\n      if(i > 2 && (file_name[i-3] == '0' || file_name[i-3] ==\
    \ '1' || file_name[i-3] == '2' || file_name[i-3] == '3' || file_name[i-3] == '4'\
    \ || file_name[i-3] == '5' || file_name[i-3] == '6' || file_name[i-3] == '7' ||\
    \ file_name[i-3] == '8' || file", "    int cnt = 0;\n    std::size_t found = file_name.find_first_of(\"\
    .\");\n    if (found!=std::string::npos){\n        for (int i = 0; i < file_name.length();\
    \ i++)\n        {\n            if(isdigit(file_name[i])){\n                cnt++;\n\
    \            }\n        }\n    }\n    if(cnt>3){\n        return \"No\";\n   \
    \ }else{\n        std::string prefix = file_name.substr(0, found);\n        std::string\
    \ suffix = file_name.substr(found+1);\n        if(prefix==\"\" || suffix==\"\"\
    ){\n            return \"No\";\n        }else{\n            if(std::regex_match(prefix,\
    \ std::regex(\"^[a-zA-Z]+$\"))){\n                if(suffix==\"txt\" || suffix==\"\
    exe\" || suffix==\"dll\"){\n                    return \"Yes\";\n            \
    \    }else{\n                    return \"No\";\n                }\n         \
    \   }else{\n                return \"No\";\n            }\n        }\n    }",
  "\tif(file_name.length()<5) return \"No\";\n\tstd::string sub1,sub2;\n\tint i,dots=0,digits=0;\n\
    \tfor(i=0;i<file_name.length();i++){\n\t\tif(file_name[i]=='.') {dots++;continue;}\n\
    \t\tif(dots==0) sub1+=file_name[i];\n\t\telse if(dots==1) sub2+=file_name[i];\n\
    \t\tif(dots>1) return \"No\";\n\t\tif(file_name[i]>='0' && file_name[i]<='9')\
    \ digits++;\n\t}\n\tif(dots!=1 || digits>3) return \"No\";\n\tif(sub1.length()==0\
    \ || (sub1[0]<'a' && sub1[0]>'Z') || (sub1[0]<'A' && sub1[0]>'z')) return \"No\"\
    ;\n\tif(sub2!=\"txt\" && sub2!=\"exe\" && sub2!=\"dll\") return \"No\";\n\treturn\
    \ \"Yes\";", "  // Your code goes here\n  return \"\";", "  assert(file_name.size()>0);\n\
    \  std::string s1=file_name.substr(0,file_name.find(\".\"));\n  int l=s1.size();\n\
    \  std::string s2=file_name.substr(file_name.find(\".\")+1,file_name.size());\n\
    \  int count=0;\n  int len=file_name.size();\n  if(file_name.find(\".\")==std::string::npos)\n\
    \    return \"No\";\n  if(file_name.find(\".\")==0 || file_name.find(\".\")==len-1)\n\
    \    return \"No\";\n  if(s1.empty())\n    return \"No\";\n  if(s2!=\"txt\" &&\
    \ s2!=\"exe\" && s2!=\"dll\")\n    return \"No\";\n  for(int i=0;i<l;i++)\n  {\n\
    \    if(s1[i]>='0' && s1[i]<='9')\n      count++;\n  }\n  if(count>3)\n    return\
    \ \"No\";\n  for(int i=0;i<l;i++)\n  {\n    if(!((s1[i]>='a' && s1[i]<='z') ||\
    \ (s1[i]>='A' && s1[i]<='Z')))\n      return \"No\";\n  }\n  return \"Yes\";",
  "\tif (file_name.length() < 5 || file_name.length() > 50) {\n\t\treturn \"No\";\n\
    \t}\n\t// check if more than 3 digits\n\tstd::string s_number = \"\";\n\tint length\
    \ = file_name.length();\n\tfor (int i = 0; i < length; i++) {\n\t\tif (isdigit(file_name[i]))\
    \ {\n\t\t\ts_number += file_name[i];\n\t\t}\n\t}\n\tif (s_number.length() > 3)\
    \ {\n\t\treturn \"No\";\n\t}\n\t// check dot\n\tif (file_name.find(\".\") == -1)\
    \ {\n\t\treturn \"No\";\n\t}\n\t// check 1 dot\n\tif (file_name.find(\".\") !=\
    \ file_name.rfind(\".\")) {\n\t\treturn \"No\";\n\t}\n\tint pos = file_name.find(\"\
    .\");\n\t// substring before dot check\n\tstd::string file_sub = file_name.substr(0,\
    \ pos);\n\tif (file_sub.length() < 1) {\n\t\treturn \"No\";\n\t}\n\tfor (int i\
    \ = 0; i < file_sub.length(); i++) {\n\t\tif (!isalpha(file_sub[i])) {\n\t\t\t\
    return \"No\";\n\t\t}\n\t}\n\t// substring after dot check\n\tstd::string file_sub_after\
    \ = file_name.substr(pos + 1, file_name.length() - pos - 1);\n\tstd::cout << file_sub_after\
    \ << std::endl;\n\tif (file_sub_after != \"txt\" && file_sub_after != \"exe\"\
    \ && file_sub_after != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";",
  "    if (file_name.find('.') == std::string::npos) return \"No\";\n    if (file_name.find_first_of(\"\
    0123456789\") != std::string::npos\n        && file_name.find_first_of(\"0123456789\"\
    ) < file_name.find('.')) return \"No\";\n    if (file_name.find_last_of(\"0123456789\"\
    ) != std::string::npos\n        && file_name.find_last_of(\"0123456789\") > file_name.find('.'))\
    \ return \"No\";\n    if (file_name.substr(file_name.find('.') + 1) != \"txt\"\
    \n        && file_name.substr(file_name.find('.') + 1) != \"exe\"\n        &&\
    \ file_name.substr(file_name.find('.') + 1) != \"dll\") return \"No\";\n    if\
    \ (file_name.substr(0, file_name.find('.')).find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n        == std::string::npos) return \"No\";\n    return \"Yes\";", "    //\
    \ TODO: Your code here\n    std::string extension;\n    std::size_t found = file_name.find_last_of(\"\
    .\");\n    extension = file_name.substr(found+1);\n    if(extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\")\n    {\n        if(found !=\
    \ 0)\n        {\n            std::string file = file_name.substr(0,found);\n \
    \           int count = 0;\n            for(int i = 0; i < file.length(); i++)\n\
    \            {\n                if(file[i] > 47 && file[i] < 58)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \        if(count <= 3)\n            {\n                return \"Yes\";\n    \
    \        }\n            else\n            {\n                return \"No\";\n\
    \            }\n        }\n        else\n        {\n            return \"No\"\
    ;\n        }\n    }\n    else\n    {\n        return \"No\";\n    }\n    return\
    \ \"No\";", "     std::regex rgx(\"^[a-zA-Z]+[\\\\d]{0,3}\\\\.[a-zA-Z]{3}$\");\n\
    \     std::smatch sm;\n     std::regex_search(file_name, sm, rgx);\n     std::cout\
    \ << sm.str() << std::endl;\n     return \"Yes\";", "    int cnt_digits = 0;\n\
    \    bool dot_flag = false;\n    for (int i = 0; i < file_name.size(); i++) {\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9')\n            cnt_digits++;\n\
    \        if (file_name[i] == '.')\n            dot_flag = true;\n    }\n    if\
    \ (cnt_digits > 3 || !dot_flag)\n        return \"No\";\n    std::string sub_str\
    \ = file_name.substr(0, file_name.find(\".\"));\n    std::regex regex(\"[a-zA-Z]*\"\
    );\n    if (!regex_match(sub_str, regex))\n        return \"No\";\n    sub_str\
    \ = file_name.substr(file_name.find(\".\") + 1);\n    if (sub_str != \"txt\" &&\
    \ sub_str != \"exe\" && sub_str != \"dll\")\n        return \"No\";\n    return\
    \ \"Yes\";", "    bool flag_0 = false;\n    bool flag_1 = false;\n    bool flag_2\
    \ = false;\n    bool flag_3 = false;\n    bool flag_4 = false;\n    for (int i\
    \ = 0; i < file_name.size(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            flag_0 = true;\n        }\n        if (file_name[i] ==\
    \ '.') {\n            flag_1 = true;\n        }\n        if (file_name[i] >= 'a'\
    \ && file_name[i] <= 'z') {\n            flag_2 = true;\n        }\n        if\
    \ (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            flag_3 = true;\n\
    \        }\n        if (file_name[i] == '.') {\n            flag_4 = true;\n \
    \       }\n    }\n    if (flag_1 == true && flag_0 == true && flag_2 == true &&\
    \ flag_3 == true && flag_4 == true) {\n        return \"Yes\";\n    }\n    else\
    \ {\n        return \"No\";\n    }", "    int dot_pos = file_name.find(\".\");\n\
    \    if (dot_pos == std::string::npos) {\n        return \"No\";\n    }\n    std::string\
    \ ext = file_name.substr(dot_pos + 1);\n    if (!(ext == \"txt\" || ext == \"\
    exe\" || ext == \"dll\")) {\n        return \"No\";\n    }\n    std::string name\
    \ = file_name.substr(0, dot_pos);\n    int count = 0;\n    for (auto c : name)\
    \ {\n        if (isdigit(c)) {\n            count++;\n        }\n    }\n    if\
    \ (count > 3) {\n        return \"No\";\n    }\n    if (isalpha(name[0])) {\n\
    \        return \"Yes\";\n    }\n    return \"No\";", "    int cnt1 = 0, cnt2\
    \ = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if ('0' <= file_name[i]\
    \ && file_name[i] <= '9') cnt1++;\n        if (file_name[i] == '.') cnt2++;\n\
    \    }\n    if (cnt1 > 3 || cnt2 != 1) return \"No\";\n    int index = file_name.find('.');\n\
    \    std::string suffix = file_name.substr(index + 1);\n    std::transform(suffix.begin(),\
    \ suffix.end(), suffix.begin(), ::tolower);\n    if (suffix != \"txt\" && suffix\
    \ != \"exe\" && suffix != \"dll\") return \"No\";\n    std::string prefix = file_name.substr(0,\
    \ index);\n    std::transform(prefix.begin(), prefix.end(), prefix.begin(), ::tolower);\n\
    \    int n = prefix.size();\n    if (n == 0) return \"No\";\n    for (int i =\
    \ 0; i < n; i++) {\n        if (prefix[i] >= 'a' && prefix[i] <= 'z') continue;\n\
    \        return \"No\";\n    }\n    return \"Yes\";", "\tint n = file_name.length();\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif (file_name[i] < 'a' || file_name[i] >\
    \ 'z') {\n\t\t\tif (file_name[i] < 'A' || file_name[i] > 'Z') {\n\t\t\t\tif (file_name[i]\
    \ < '0' || file_name[i] > '9') {\n\t\t\t\t\tif (file_name[i] != '.') {\n\t\t\t\
    \t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (file_name.substr(file_name.find(\"\
    .\"), 4) != \".txt\" && file_name.substr(file_name.find(\".\"), 4) != \".exe\"\
    \ && file_name.substr(file_name.find(\".\"), 4) != \".dll\") {\n\t\treturn \"\
    No\";\n\t}\n\tif (file_name.substr(0, file_name.find(\".\")) == \"\") {\n\t\t\
    return \"No\";\n\t}\n\tif (std::count(file_name.begin(), file_name.end(), '.')\
    \ != 1) {\n\t\treturn \"No\";\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < n;\
    \ i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "\t\
    //..\n\tstd::regex pattern(\"([A-Za-z][A-Za-z0-9]{0,2}(\\\\.txt|\\\\.exe|\\\\\
    .dll))\");\n\tstd::smatch base_match;\n\tif (std::regex_match(file_name, base_match,\
    \ pattern))\n\t{\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "\tassert(file_name.length()\
    \ > 0);\n\tif(file_name.length() > 3){\n\t\tfor(int i = 0; i < file_name.length();\
    \ i++){\n\t\t\tif(file_name[i] >= '0' && file_name[i] <= '9'){\n\t\t\t\treturn\
    \ \"No\";\n\t\t\t}\n\t\t}\n\t}\n\tint count = 0;\n\tfor(int i = 0; i < file_name.length();\
    \ i++){\n\t\tif(file_name[i] == '.'){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count\
    \ > 1){\n\t\treturn \"No\";\n\t}\n\tstd::string str = \"\";\n\tfor(int i = 0;\
    \ i < file_name.length(); i++){\n\t\tif(file_name[i] == '.'){\n\t\t\tbreak;\n\t\
    \t}\n\t\tstr += file_name[i];\n\t}\n\tif(str == \"\"){\n\t\treturn \"No\";\n\t\
    }\n\tif(!(str[0] >= 'a' && str[0] <= 'z') && !(str[0] >= 'A' && str[0] <= 'Z')){\n\
    \t\treturn \"No\";\n\t}\n\tstr = \"\";\n\tfor(int i = file_name.length() - 1;\
    \ i >= 0; i--){\n\t\tif(file_name[i] == '.'){\n\t\t\tbreak;\n\t\t}\n\t\tstr +=\
    \ file_name[i];\n\t}\n\tstd::reverse(str.begin(), str.end());\n\tif(str != \"\
    txt\" && str != \"exe\" && str != \"dll\"){\n\t\treturn \"No\";\n\t}\n\treturn\
    \ \"Yes\";", "    // Do not edit the line below\n    std::string result = \"No\"\
    ;\n    std::regex pattern(R\"(^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$)\");\n\
    \    std::smatch match;\n    if (std::regex_search(file_name, match, pattern))\
    \ {\n        result = \"Yes\";\n    }\n    return result;", "  \tstd::regex reg(\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\");\n  \treturn std::regex_match(file_name,\
    \ reg) ? \"Yes\" : \"No\";", "\tint dot_count = 0;\n\tint digit_count = 0;\n\t\
    if (file_name[0] < 'A' || file_name[0] > 'z') return \"No\";\n\tfor (int i = 0;\
    \ i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') digit_count++;\n\t\tif (file_name[i] == '.') dot_count++;\n\t}\n\tif\
    \ (dot_count != 1 || digit_count > 3) return \"No\";\n\tstd::string substr = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (substr == \"txt\" || substr == \"exe\" || substr == \"dll\") return\
    \ \"Yes\";\n\treturn \"No\";", "    int dot_count = 0;\n    bool is_valid = true;\n\
    \    for (auto c : file_name) {\n        if (c == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if (dot_count > 1) {\n        is_valid = false;\n    }\n\
    \    std::string file_type;\n    if (is_valid) {\n        size_t found = file_name.find_last_of(\"\
    .\");\n        if (found == std::string::npos) {\n            is_valid = false;\n\
    \        } else {\n            file_type = file_name.substr(found + 1);\n    \
    \        if (file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\"\
    ) {\n                is_valid = false;\n            }\n        }\n    }\n    if\
    \ (is_valid) {\n        std::string file_name_without_extension = file_name.substr(0,\
    \ file_name.find(\".\"));\n        int number_count = 0;\n        for (auto c\
    \ : file_name_without_extension) {\n            if (isdigit(c)) {\n          \
    \      number_count++;\n            }\n        }\n        if (number_count > 3)\
    \ {\n            is_valid = false;\n        }\n    }\n    if (is_valid) {\n  \
    \      return \"Yes\";\n    } else {\n        return \"No\";\n    }", "  // make\
    \ sure that the file name contains only one dot\n  std::size_t found = file_name.find_first_of(\"\
    .\");\n  if (found==std::string::npos){\n    return \"No\";\n  }\n  else{\n  \
    \  if (found != file_name.find_last_of(\".\")){\n      return \"No\";\n    }\n\
    \  }\n  // make sure that the substring before the dot is not empty\n  if (found\
    \ == 0){\n    return \"No\";\n  }\n  // make sure that the substring before the\
    \ dot starts with an alphabetic letter\n  if (!isalpha(file_name[0])){\n    return\
    \ \"No\";\n  }\n  // make sure that the substring after the dot contains only\
    \ 3 letters\n  std::string s_after_dot = file_name.substr(found+1);\n  if (s_after_dot.length()\
    \ != 3){\n    return \"No\";\n  }\n  // make sure that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n  if ((s_after_dot != \"txt\") &&\
    \ (s_after_dot != \"exe\") && (s_after_dot != \"dll\")){\n    return \"No\";\n\
    \  }\n  // make sure that the file name contains at most 3 digits\n  int digits_count\
    \ = 0;\n  for (std::size_t i = 0; i < file_name.length(); i++){\n    if (isdigit(file_name[i])){\n\
    \      digits_count += 1;\n    }\n  }\n  if (digits_count > 3){\n    return \"\
    No\";\n  }\n  return \"Yes\";", "  int c1=0,c2=0,c3=0,dot=0;\n  int l=file_name.length();\n\
    \  for(int i=0;i<l;i++)\n  {\n    if(isdigit(file_name[i]))\n    {\n      c1++;\n\
    \    }\n    if(isalpha(file_name[i]))\n    {\n      c2++;\n    }\n    if(file_name[i]=='.')\n\
    \    {\n      dot++;\n    }\n  }\n  if(c1>3 || c2==0 || dot!=1)\n  {\n    return\
    \ \"No\";\n  }\n  else\n  {\n    std::string str1=file_name.substr(file_name.find('.')+1);\n\
    \    std::string str2=\"\";\n    if(str1==\"txt\" || str1==\"exe\" || str1==\"\
    dll\")\n    {\n      return \"Yes\";\n    }\n    else\n    {\n      return \"\
    No\";\n    }\n  }", "  // your code here\n  std::vector<char> number = {'0','1','2','3','4','5','6','7','8','9'};\n\
    \  std::vector<char> alph = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\
    \  std::vector<std::string> type_check = {\"txt\",\"exe\",\"dll\"};\n  int number_count\
    \ = 0;\n  int index_dot = 0;\n  std::string name;\n  std::string type;\n  int\
    \ i;\n  if(file_name.size() < 6){\n    return \"No\";\n  }\n  for(i = 0; i < file_name.size();\
    \ i++){\n    if(file_name[i] == '.'){\n      index_dot = i;\n      break;\n  \
    \  }\n  }\n  if(index_dot == 0){\n    return \"No\";\n  }\n  for(i = 0; i < index_dot;\
    \ i++){\n    for(int j = 0; j < number.size(); j++){\n      if(file_name[i] ==\
    \ number[j]){\n        number_count++;\n      }\n    }\n  }\n  if(number_count\
    \ > 3){\n    return \"No\";\n  }\n  int count = 0;\n  for(i = 0; i < alph.size();\
    \ i++){\n    if(file_name[0] == alph[i]){\n      count++;\n    }\n  }\n  if(count\
    \ == 0){\n    return \"No\";\n  }\n  name = file_name.substr(0,index_dot);\n \
    \ type = file_name.substr(index_dot+1,file_name.size()-index_dot);\n  int flag\
    \ =", "  \n  int cnt_dot = 0;\n  int cnt_num = 0;\n  for (int i = 0; i < file_name.size();\
    \ i++) {\n    if (file_name[i] == '.') {\n      cnt_dot++;\n    }\n    if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n      cnt_num++;\n    }\n  }\n  if (cnt_dot\
    \ != 1 || cnt_num > 3) return \"No\";\n  std::string str = file_name.substr(0,\
    \ file_name.find('.'));\n  if (str.size() == 0) return \"No\";\n  if (str[0] <\
    \ 'a' || str[0] > 'z') return \"No\";\n  std::string ext = file_name.substr(file_name.find('.')+1);\n\
    \  if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return \"No\";\n  return\
    \ \"Yes\";", "    std::regex word_regex(R\"(([a-zA-Z]+\\.)((txt)|(exe)|(dll)))\"\
    );\n    if (std::regex_match(file_name, word_regex)) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }", "    std::string error = \"No\"\
    ;\n    std::string yes = \"Yes\";\n    if (file_name.length() < 3) {\n       \
    \ return error;\n    }\n    int dot = file_name.find('.');\n    std::string before_dot\
    \ = file_name.substr(0, dot);\n    if (before_dot.length() < 1) {\n        return\
    \ error;\n    }\n    std::string after_dot = file_name.substr(dot + 1, file_name.length()\
    \ - dot);\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\") {\n        return error;\n    }\n    int digits = 0;\n    for (int\
    \ i = 0; i < before_dot.length(); i++) {\n        if (before_dot[i] >= '0' &&\
    \ before_dot[i] <= '9') {\n            digits++;\n        }\n    }\n    if (digits\
    \ > 3) {\n        return error;\n    }\n    return yes;", "    std::string output\
    \ = \"No\";\n    std::string regex_string = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    ;\n    std::regex regular_expression(regex_string);\n    std::smatch result;\n\
    \    std::regex_search(file_name, result, regular_expression);\n    if(result.str().length()\
    \ > 0) {\n        output = \"Yes\";\n    }\n    return output;", "\tassert(!file_name.empty());\n\
    \tint count = 0;\n\tbool dot = false;\n\tbool alpha = false;\n\tstd::string tmp;\n\
    \tfor (auto i : file_name) {\n\t\tif (isdigit(i)) {\n\t\t\tcount++;\n\t\t}\n\t\
    \tif (i == '.') {\n\t\t\tdot = true;\n\t\t}\n\t\tif (i == '.' && !alpha) {\n\t\
    \t\treturn \"No\";\n\t\t}\n\t\tif (isalpha(i)) {\n\t\t\talpha = true;\n\t\t}\n\
    \t\tif (count > 3) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (count == 3 && i ==\
    \ '.') {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (dot) {\n\t\t\ttmp.push_back(i);\n\t\
    \t}\n\t}\n\ttmp.erase(tmp.begin());\n\tif (tmp == \"txt\" || tmp == \"exe\" ||\
    \ tmp == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "    if(file_name.empty())\n\
    \        return \"No\";\n    if(file_name.size() < 6)\n        return \"No\";\n\
    \    int count = 0;\n    int num_count = 0;\n    int dot_count = 0;\n    for(int\
    \ i = 0; i < file_name.size(); i++) {\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if(file_name[i] >= 'A' &&\
    \ file_name[i] <= 'Z') {\n            count++;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_count++;\n        }\n    \
    \    if(file_name[i] == '.') {\n            dot_count++;\n        }\n    }\n \
    \   if(count == 0 || dot_count != 1 || num_count > 3)\n        return \"No\";\n\
    \    if(file_name.substr(file_name.size() - 4, 4) != \".txt\" && file_name.substr(file_name.size()\
    \ - 4, 4) != \".exe\" && file_name.substr(file_name.size() - 4, 4) != \".dll\"\
    )\n        return \"No\";\n    return \"Yes\";", "    std::string a = \"Yes\"\
    ;\n    int count_digit = 0;\n    int count_dot = 0;\n    std::string b = \"\"\
    ;\n    std::string c = \"\";\n    std::string d = \"\";\n    std::string e = \"\
    \";\n    std::string dot_file_name = \"\";\n    std::string file_exten = \"\"\
    ;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i]))\
    \ {\n            b = file_name[i];\n            count_digit++;\n        }\n  \
    \      if (count_digit > 3) {\n            a = \"No\";\n        }\n        if\
    \ (file_name[i] == '.') {\n            count_dot++;\n            dot_file_name\
    \ = file_name.substr(0, i);\n            file_exten = file_name.substr(i + 1,\
    \ file_name.length());\n        }\n        if (count_dot != 1) {\n           \
    \ a = \"No\";\n        }\n        if (isalpha(file_name[0])) {\n            c\
    \ = file_name[0];\n        }\n        else {\n            a = \"No\";\n      \
    \  }\n        if (dot_file_name.length() == 0) {\n            a = \"No\";\n  \
    \      }\n        if (file_exten != \"txt\" && file_exten != \"exe\" && file_exten\
    \ != \"dll\") {\n            a = \"No\";\n        }\n    }\n    return a;", "\t\
    int number = 0;\n\tstd::string dot;\n\tstd::string last;\n\tfor (size_t i = 0;\
    \ i < file_name.size(); i++) {\n\t\tif (file_name[i] == '.')\n\t\t\tdot = file_name.substr(i,\
    \ 3);\n\t\telse if (file_name[i] >= '0' && file_name[i] <= '9')\n\t\t\tnumber++;\n\
    \t\tlast = file_name.substr(i - 2, 3);\n\t}\n\tif (dot != \".txt\" && dot != \"\
    .exe\" && dot != \".dll\")\n\t\treturn \"No\";\n\telse if (number > 3)\n\t\treturn\
    \ \"No\";\n\telse if (file_name[0] < 'a' || file_name[0] > 'z')\n\t\treturn \"\
    No\";\n\telse if (last != \"txt\" && last != \"exe\" && last != \"dll\")\n\t\t\
    return \"No\";\n\telse if (number == 0)\n\t\treturn \"No\";\n\telse\n\t\treturn\
    \ \"Yes\";", "    std::vector<std::string> file_types = {\"txt\", \"exe\", \"\
    dll\"};\n    std::string ans = \"No\";\n    std::vector<std::string>::iterator\
    \ it;\n    bool has_dot = false;\n    int count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] == '.') {\n           \
    \ has_dot = true;\n            continue;\n        }\n        if (isalpha(file_name[i]))\n\
    \            continue;\n        if (file_name[i] >= '0' && file_name[i] <= '9')\n\
    \            count++;\n    }\n    if (count > 3) {\n        return ans;\n    }\n\
    \    for (it = file_types.begin(); it != file_types.end(); it++) {\n        if\
    \ (file_name.find(*it) != std::string::npos) {\n            ans = \"Yes\";\n \
    \           break;\n        }\n    }\n    return ans;", "  /*\n   * Your solution\
    \ here\n   */\n    std::regex pattern (\"([a-zA-Z][a-zA-Z0-9]{0,3}).([txt|exe|dll])\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";", "  \
    \  // Good luck\n    int digit_count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (isdigit(file_name[i])) {\n            digit_count++;\n \
    \       }\n    }\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\
    \    char *ext = strtok(const_cast<char*>(file_name.c_str()), \".\");\n    if\
    \ (ext[0] < 'a' || ext[0] > 'z') {\n        return \"No\";\n    }\n    ext = strtok(NULL,\
    \ \".\");\n    if (strcmp(ext, \"txt\") && strcmp(ext, \"exe\") && strcmp(ext,\
    \ \"dll\")) {\n        return \"No\";\n    }\n    return \"Yes\";", "  int digit_cnt\
    \ = 0;\n  bool dot_flag = false;\n  std::vector<std::string> suff_vec = {\"txt\"\
    , \"exe\", \"dll\"};\n  if (file_name.size() == 0) return \"No\";\n  for (int\
    \ i = 0; i < file_name.size(); i++) {\n    if (isdigit(file_name[i])) {\n    \
    \  digit_cnt++;\n      if (digit_cnt > 3) return \"No\";\n    }\n    if (file_name[i]\
    \ == '.') {\n      if (dot_flag) return \"No\";\n      else dot_flag = true;\n\
    \    }\n  }\n  if (!dot_flag) return \"No\";\n  std::string name = file_name.substr(0,\
    \ file_name.find('.'));\n  std::string suffix = file_name.substr(file_name.find('.')\
    \ + 1);\n  if (name.size() == 0 || !isalpha(name[0])) return \"No\";\n  for (auto\
    \ s : suff_vec) {\n    if (s == suffix) return \"Yes\";\n  }\n  return \"No\";",
  "\tint dot = 0;\n\tint count = 0;\n\tstd::string last;\n\tint size = file_name.size();\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t\tint j = i + 1;\n\t\t\twhile (j < size) {\n\t\t\t\tlast.push_back(file_name[j]);\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\
    \tif (dot != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] >= '0' && file_name[0]\
    \ <= '9') {\n\t\treturn \"No\";\n\t}\n\tif (last != \"txt\" && last != \"exe\"\
    \ && last != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "    std::string\
    \ valid_extensions[3] = {\"txt\", \"exe\", \"dll\"};\n    int digits_count = 0;\n\
    \    int ext_start_pos = 0;\n    int ext_len = 0;\n    int dot_count = 0;\n  \
    \  for (int i = 0; i < file_name.length(); i++) {\n        char current_char =\
    \ file_name[i];\n        if (dot_count == 0 && current_char == '.') {\n      \
    \      dot_count++;\n            ext_start_pos = i + 1;\n            continue;\n\
    \        }\n        if (current_char >= '0' && current_char <= '9') {\n      \
    \      digits_count++;\n        }\n        if (dot_count == 1 && current_char\
    \ != '.') {\n            ext_len++;\n        }\n    }\n    if (dot_count != 1\
    \ || digits_count > 3) {\n        return \"No\";\n    }\n    bool ext_valid =\
    \ false;\n    for (int i = 0; i < 3; i++) {\n        std::string extension = valid_extensions[i];\n\
    \        if (extension.length() == ext_len) {\n            bool ext_is_valid =\
    \ true;\n            for (int j = 0; j < ext_len; j++) {\n                if (file_name[ext_start_pos\
    \ + j] != extension[j]) {\n                    ext_is_valid = false;\n       \
    \             break;\n                }\n            }\n            if (ext_is_valid)\
    \ {\n                ext_valid = true;\n                break;\n            }\n\
    \        }\n    }\n    if (!ext_valid) {\n        return \"No\";\n    }\n    char\
    \ first_char = file_name[0];\n    if (first_char >= 'a' && first_char <= 'z')\
    \ {\n        return \"Yes\";\n    }\n    if (first_char >= 'A' && first_char <=\
    \ 'Z') {\n        return \"Yes\";\n    }\n    return \"No\";", "\tint dot_count\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t}\n\tif (dot_count != 1) {\n\t\treturn\
    \ \"No\";\n\t}\n\tint digit_count = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\
    \t\t}\n\t}\n\tif (digit_count > 3) {\n\t\treturn \"No\";\n\t}\n\tint dot_position\
    \ = file_name.find('.');\n\tstd::string file_format = file_name.substr(dot_position\
    \ + 1);\n\tif (file_format != \"txt\" && file_format != \"exe\" && file_format\
    \ != \"dll\") {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] >= '0' && file_name[0]\
    \ <= '9') {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "    int countDigits\
    \ = 0;\n    int countDots = 0;\n    int countLetters = 0;\n    std::vector<char>\
    \ vec;\n    for(int i = 0; i < file_name.size(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n            countDigits++;\n        if(file_name[i]\
    \ == '.')\n            countDots++;\n        if((file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\n            countLetters++;\n\
    \        vec.push_back(file_name[i]);\n    }\n    if(countDigits > 3 || countDots\
    \ != 1 || countLetters == 0)\n        return \"No\";\n    else {\n        std::string\
    \ sub = file_name.substr(file_name.find(\".\") + 1);\n        std::transform(sub.begin(),\
    \ sub.end(), sub.begin(), ::tolower);\n        if(sub == \"txt\" || sub == \"\
    exe\" || sub == \"dll\")\n            return \"Yes\";\n        else\n        \
    \    return \"No\";\n    }", "\tint n = file_name.length();\n\tint count=0;\n\t\
    for(int i=0;i<n;i++)\n\t{\n\t\tif(file_name[i]>='0' && file_name[i]<='9')\n\t\t\
    {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count>3)\n\t{\n\t\treturn \"No\";\n\t}\n\t\
    int flag=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(file_name[i]=='.')\n\t\t{\n\t\
    \t\tflag++;\n\t\t}\n\t}\n\tif(flag!=1)\n\t{\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ s = \"\";\n\tstd::string s1 = \"\";\n\tint j=0;\n\twhile(file_name[j]!='.')\n\
    \t{\n\t\ts += file_name[j];\n\t\tj++;\n\t}\n\tj++;\n\tfor(int i=j;i<n;i++)\n\t\
    {\n\t\ts1 += file_name[i];\n\t}\n\tfor(int i=0;i<s.length();i++)\n\t{\n\t\tif(s[i]<'a'\
    \ && s[i]>'z' && s[i]<'A' && s[i]>'Z')\n\t\t{\n\t\t\treturn \"No\";\n\t\t}\n\t\
    }\n\tif(s1!=\"txt\" && s1!=\"exe\" && s1!=\"dll\")\n\t{\n\t\treturn \"No\";\n\t\
    }\n\treturn \"Yes\";", "\t// get the len of the file name\n\tint len = file_name.length();\n\
    \tint count = 0;\n\t// iterate over the string, if we find a dot, we increase\
    \ the counter\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\treturn \"No\";\n\t}\n\
    \tint index = file_name.find('.');\n\tstd::string tmp = file_name.substr(0, index);\n\
    \tint len2 = tmp.length();\n\tint count2 = 0;\n\t// iterate over the substring,\
    \ if we find an integer, we increase the counter\n\tfor (int i = 0; i < len2;\
    \ i++) {\n\t\tif (isdigit(tmp[i])) {\n\t\t\tcount2++;\n\t\t}\n\t}\n\tif (count2\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\t// if we find a letter in the first part\
    \ of the substring, we will return yes\n\t// note, this is taking into account\
    \ that we have a valid dot as well\n\tfor (int i = 0; i < len2; i++) {\n\t\tif\
    \ (isalpha(tmp[i])) {\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";", " \
    \   std::string valid_extentions [] = {\"txt\", \"exe\", \"dll\"};\n    // if(file_name.find('.')\
    \ != std::string::npos)\n    //     return false;\n    // else\n    //     return\
    \ true;\n    \n    int dot_index = file_name.find_last_of('.');\n    std::string\
    \ fname = file_name.substr(0, dot_index);\n    std::string extention = file_name.substr(dot_index\
    \ + 1);\n    bool check_fname = std::regex_match(fname, std::regex(\"[a-zA-Z]+[0-9]{0,3}\"\
    ));\n    bool check_extention = std::find(std::begin(valid_extentions), std::end(valid_extentions),\
    \ extention) != std::end(valid_extentions);\n    if(check_fname && check_extention)\n\
    \        return \"Yes\";\n    else\n        return \"No\";", "\t// check if more\
    \ than 3 digits ('0'-'9')\n\tstd::string digits = \"0123456789\";\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (digits.find(file_name[i])\
    \ != std::string::npos) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\t\
    return \"No\";\n\t}\n\t// check if the file_name contains one dot '.'\n\tint num_of_dots\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tnum_of_dots++;\n\t\t}\n\t}\n\tif (num_of_dots != 1) {\n\t\t\
    return \"No\";\n\t}\n\t// check if the substring before the dot is not empty,\
    \ and starts with a letter from \n\t// the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \tint dot_index = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif\
    \ (file_name[i] == '.') {\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (dot_index ==\
    \ 0) {\n\t\treturn \"No\";\n\t}\n\tstd::string alphapet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\tif (alphapet.find(file_name[0]) == std::string::npos) {\n\t\treturn \"No\"\
    ;\n\t}\n\t// check if the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n\tstd::string file_type = file_name.substr(dot_index + 1);\n\tif (file_type\
    \ != \"txt\" && file_type != \"exe\" && file_type != \"dll\") {\n\t\treturn \"\
    No\";\n\t}\n\treturn \"Yes\";", "\t// Write your code here\n\treturn \"\";", "\t\
    int l = file_name.length();\n\tif (file_name[0] >= '0' && file_name[0] <= '9')\n\
    \t\treturn \"No\";\n\tif (file_name[l - 1] == '.')\n\t\treturn \"No\";\n\tint\
    \ dot_count = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot_count++;\n\t\t\tif (dot_count > 1)\n\t\t\t\treturn \"No\";\n\t\t\
    }\n\t}\n\tint dot_index = file_name.find('.');\n\tstd::string sub1 = file_name.substr(0,\
    \ dot_index);\n\tstd::string sub2 = file_name.substr(dot_index + 1, l - dot_index\
    \ - 1);\n\tint cnt = 0;\n\tfor (int i = 0; i < sub1.length(); i++) {\n\t\tif (sub1[i]\
    \ >= '0' && sub1[i] <= '9')\n\t\t\tcnt++;\n\t}\n\tif (cnt > 3)\n\t\treturn \"\
    No\";\n\tif (sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\")\n\t\treturn\
    \ \"No\";\n\treturn \"Yes\";", "  //create counter for the number of digits\n\
    \  int count = 0;\n  //create variables to keep track of the dot index, and if\
    \ you find the dot or not\n  int dot_index = 0;\n  bool found_dot = false;\n \
    \ //loop through file_name\n  for (int i = 0; i < file_name.length(); i++) {\n\
    \    //if the character is a digit, increment count\n    if (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n      count++;\n    }\n    //if the character is\
    \ a dot, set the dot index and set found_dot to true\n    if (file_name[i] ==\
    \ '.') {\n      dot_index = i;\n      found_dot = true;\n    }\n  }\n  //if count\
    \ is more than 3, return 'No'\n  if (count > 3) {\n    return \"No\";\n  }\n \
    \ //if found_dot is false, return 'No'\n  if (!found_dot) {\n    return \"No\"\
    ;\n  }\n  //if the first character of file_name is not a letter, return 'No'\n\
    \  if (!((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z'))) {\n    return \"No\";\n  }\n  //create string with\
    \ the substring after the dot\n  std::string sub = file_name.substr(dot_index\
    \ + 1);\n  //create string to keep track of the substring before the dot\n  std::string\
    \ before_dot = file_name.substr(0, dot_index);\n  //if the substring before the\
    \ dot is empty, return 'No'\n  if (before_dot.length() == 0) {\n    return \"\
    No\";\n  }\n  //if the string is txt, exe, or dll, return 'Yes'\n  if (sub ==\
    \ \"txt\" || sub == \"exe\" || sub == \"dll\") {\n    return \"Yes\";\n  }\n \
    \ //otherwise, return 'No'\n  return \"No\";", "  // TODO:Your code here\n  return\
    \ \"\";", "    int size = file_name.size();\n    if(size == 0)\n        return\
    \ \"No\";\n    int digit_count = 0;\n    int dot_count = 0;\n    int letter_count\
    \ = 0;\n    for(int i = 0; i < size; i++) {\n        if(file_name[i] >= '0' &&\
    \ file_name[i] <= '9')\n            digit_count++;\n        else if(file_name[i]\
    \ == '.')\n            dot_count++;\n        else if((file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\n            letter_count++;\n\
    \    }\n    if(digit_count > 3 || letter_count == 0 || dot_count != 1)\n     \
    \   return \"No\";\n    int j = 0;\n    while(file_name[j] != '.')\n        j++;\n\
    \    j++;\n    if(file_name[j] == 't' && file_name[j+1] == 'x' && file_name[j+2]\
    \ == 't')\n        return \"Yes\";\n    else if(file_name[j] == 'e' && file_name[j+1]\
    \ == 'x' && file_name[j+2] == 'e')\n        return \"Yes\";\n    else if(file_name[j]\
    \ == 'd' && file_name[j+1] == 'l' && file_name[j+2] == 'l')\n        return \"\
    Yes\";\n    else\n        return \"No\";", "     std::string::size_type dot_pos\
    \ = file_name.find('.');\n    if (dot_pos != std::string::npos) {\n        std::string\
    \ extension = file_name.substr(dot_pos + 1);\n        if (extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\") {\n            std::string\
    \ name = file_name.substr(0, dot_pos);\n            if (name.size() > 0) {\n \
    \               std::size_t digit_count = std::count_if(name.begin(), name.end(),\n\
    \                    [](char c) {return std::isdigit(c); });\n               \
    \ if (digit_count <= 3) {\n                    return \"Yes\";\n             \
    \   }\n            }\n        }\n    }\n    return \"No\";", "    int counter\
    \ = 0;\n    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >=\
    \ 'A' && file_name[i] <= 'Z')) {\n            count++;\n        }\n        if\
    \ (file_name[i] >= '0' && file_name[i] <= '9') {\n            counter++;\n   \
    \     }\n    }\n    int dot = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot++;\n        }\n\
    \    }\n    std::string a = \"\";\n    std::string b = \"\";\n    if (dot == 1)\
    \ {\n        int x = file_name.find('.');\n        for (int i = 0; i < x; i++)\
    \ {\n            a = a + file_name[i];\n        }\n        for (int i = x + 1;\
    \ i < file_name.length(); i++) {\n            b = b + file_name[i];\n        }\n\
    \    }\n    if (counter > 3 || dot != 1 || a.length() == 0 || count == 0 || b\
    \ != \"txt\" && b != \"exe\" && b != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";", "    int dotIndex = -1;\n    int count = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] == '.') {\n \
    \           dotIndex = i;\n        }\n        if(dotIndex != -1 && i > dotIndex)\
    \ {\n            if(file_name[i] >= '0' && file_name[i] <= '9') {\n          \
    \      count++;\n            }\n        }\n    }\n    if(count > 3) {\n      \
    \  return \"No\";\n    }\n    if(dotIndex == -1) {\n        return \"No\";\n \
    \   }\n    std::string first = file_name.substr(0, dotIndex);\n    std::string\
    \ second = file_name.substr(dotIndex + 1, file_name.length() - 1);\n    if(first.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(first[0] < 'a' || first[0] >\
    \ 'z') {\n        return \"No\";\n    }\n    if(second != \"txt\" && second !=\
    \ \"exe\" && second != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";", "    std::regex txt_regex(\"([a-zA-Z])(([a-zA-Z]+)(.txt))\");\n    std::regex\
    \ exe_regex(\"([a-zA-Z])(([a-zA-Z]+)(.exe))\");\n    std::regex dll_regex(\"([a-zA-Z])(([a-zA-Z]+)(.dll))\"\
    );\n    if (std::regex_match(file_name, txt_regex) || std::regex_match(file_name,\
    \ exe_regex) || std::regex_match(file_name, dll_regex)){\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }", "\t// TODO: Write your code here\n\
    \t// std::regex r(\"[a-zA-Z][a-zA-Z0-9]*\\\\.[txt|exe|dll]$\");\n\t// return std::regex_match(file_name,\
    \ r) ? \"Yes\" : \"No\";\n\tint n = file_name.size();\n\tif(n == 0) return \"\
    No\";\n\tint digits_count = 0;\n\tbool dot_encountered = false;\n\tfor(int i =\
    \ 0; i < n; i++){\n\t\tif(isdigit(file_name[i])){\n\t\t\tdigits_count++;\n\t\t\
    \tif(digits_count > 3) return \"No\";\n\t\t}else if(file_name[i] == '.'){\n\t\t\
    \tif(dot_encountered) return \"No\";\n\t\t\tdot_encountered = true;\n\t\t}else\
    \ if(isalpha(file_name[i])){\n\t\t\tif(i == 0) return \"No\";\n\t\t}else return\
    \ \"No\";\n\t}\n\tif(digits_count > 3) return \"No\";\n\tstd::string last_characters\
    \ = file_name.substr(n-4, n);\n\tstd::transform(last_characters.begin(), last_characters.end(),\
    \ last_characters.begin(), ::tolower);\n\tif(last_characters == \".txt\" || last_characters\
    \ == \".exe\" || last_characters == \".dll\") return \"Yes\";\n\treturn \"No\"\
    ;", "    std::regex reg(\"([A-Za-z]*[.]txt|[A-Za-z]*[.]exe|[A-Za-z]*[.]dll)\"\
    );\n    std::smatch match;\n    if(std::regex_search(file_name, match, reg)) {\n\
    \        return \"Yes\";\n    }\n    return \"No\";", "    std::string result\
    \ = \"No\";\n    std::string file_ext[] = {\"txt\", \"exe\", \"dll\"};\n    int\
    \ digits_count = 0;\n    int dot_count = 0;\n    for (char letter : file_name)\
    \ {\n        if (isdigit(letter)) {\n            digits_count++;\n        }\n\
    \        if (letter == '.') {\n            dot_count++;\n        }\n    }\n  \
    \  if (digits_count > 3 || dot_count != 1) {\n        return result;\n    }\n\
    \    // Parsing the two parts of the file name\n    std::string file_name_1 =\
    \ \"\";\n    std::string file_name_2 = \"\";\n    int dot_index = 0;\n    int\
    \ i = 0;\n    while (file_name[i] != '.') {\n        file_name_1 += file_name[i];\n\
    \        i++;\n    }\n    i++;\n    while (i < file_name.length()) {\n       \
    \ file_name_2 += file_name[i];\n        i++;\n    }\n    // Checking if the first\
    \ part is empty or doesn't start with a latin letter\n    if (file_name_1 == \"\
    \" || !isalpha(file_name_1[0])) {\n        return result;\n    }\n    // Checking\
    \ if the file name is valid\n    for (std::string ext : file_ext) {\n        if\
    \ (file_name_2 == ext) {\n            result = \"Yes\";\n            break;\n\
    \        }\n    }\n    return result;", "\t// TODO: write your code here\n\t//\
    \ return \"Yes\";\n    int count=0;\n    for(int i=0;i<file_name.length();i++)\n\
    \    {\n        if(file_name[i]>='0' && file_name[i]<='9')\n        {\n      \
    \      count++;\n        }\n    }\n    if(count>3)\n    {\n        return \"No\"\
    ;\n    }\n    int dotPos=-1;\n    for(int i=0;i<file_name.length();i++)\n    {\n\
    \        if(file_name[i]=='.')\n        {\n            dotPos=i;\n           \
    \ break;\n        }\n    }\n    if(dotPos==-1)\n    {\n        return \"No\";\n\
    \    }\n    if(dotPos==0)\n    {\n        return \"No\";\n    }\n    if(!(file_name[dotPos-1]>='a'\
    \ && file_name[dotPos-1]<='z') && !(file_name[dotPos-1]>='A' && file_name[dotPos-1]<='Z'))\n\
    \    {\n        return \"No\";\n    }\n    std::string sub = file_name.substr(dotPos+1);\n\
    \    if(sub!=\"txt\" && sub!=\"exe\" && sub!=\"dll\")\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";", "    std::string valid_extensions[3] = {\"\
    txt\", \"exe\", \"dll\"};\n    int digit_count = 0;\n    int dot_count = 0;\n\
    \    bool first_letter = false;\n    std::string extension;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n    \
    \        dot_count++;\n            continue;\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            digit_count++;\n            continue;\n\
    \        }\n        if (!first_letter && (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') ||\n                (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\
    \            first_letter = true;\n            continue;\n        }\n        extension\
    \ += file_name[i];\n    }\n    for (int i = 0; i < 3; i++) {\n        if (extension\
    \ == valid_extensions[i]) {\n            return \"Yes\";\n        }\n    }\n \
    \   return \"No\";", "    // We want to find the first and last occurrence of\
    \ the dot in the string.\n    int len = file_name.length();\n    char f[len+1];\n\
    \    strcpy(f, file_name.c_str());\n    char *dot_pointer = strchr(f, '.');\n\
    \    // If there is no dot, that means this is an invalid filename\n    if (dot_pointer\
    \ == NULL) {\n        return \"No\";\n    }\n    // Find the first digit in the\
    \ filename\n    char *first_digit = strpbrk(f, \"0123456789\");\n    // If there\
    \ are no digits in the filename, then return \"Yes\"\n    if (first_digit == NULL)\
    \ {\n        return \"Yes\";\n    }\n    // Count the number of digits in the\
    \ filename\n    int count = 0;\n    while (*first_digit != '\\0') {\n        if\
    \ (*first_digit >= '0' && *first_digit <= '9') {\n            count += 1;\n  \
    \      }\n        first_digit++;\n    }\n    // If there are more than 3 digits,\
    \ return \"No\"\n    if (count > 3) {\n        return \"No\";\n    }\n    // Find\
    \ the substring before the dot and after the dot\n    char *substring_before_dot\
    \ = strtok(f, \".\");\n    char *substring_after_dot = strtok(NULL, \".\");\n\
    \    // If the substring before the dot is empty or starts with a digit, then\
    \ return \"No\"\n    if (substring_before_dot[0] == '\\0' || \n        (substring_before_dot[0]\
    \ >= '0' && substring_before_dot[0] <= '9')) {\n        return \"No\";\n    }\n\
    \    // If the substring after the dot is one of the following [\"txt\", \"exe\"\
    , \"dll\"], then return \"Yes\"\n    if (strcmp(substring_after_dot, \"txt\")\
    \ == 0 || \n        strcmp(substring_after_dot, \"exe\") == 0 || \n        strcmp(substring_after_dot,\
    \ \"dll\") == 0) {\n        return \"Yes\";", "    // Note: 'regex' is supported\
    \ by GCC 4.9 and higher\n    // 'replace_all' is a method of C++ standard library\
    \ (string)\n    std::regex rgx(\"[0-9]{4}\");\n    if (std::regex_search(file_name,\
    \ rgx)) {\n        std::cout << \"More than 3 digits\\n\";\n        return \"\
    No\";\n    }\n    rgx = \"[a-zA-Z]+\\\\.[txdle]+\";\n    if (!std::regex_search(file_name,\
    \ rgx)) {\n        std::cout << \"Invalid name format\\n\";\n        return \"\
    No\";\n    }\n    return \"Yes\";", "  std::regex reg_1(\"[0-9]{3,}\");\n  std::regex\
    \ reg_2(\"[a-zA-Z]+\\\\.[a-zA-Z]+\");\n  std::regex reg_3(\"[a-zA-Z]+\\\\.txt\"\
    );\n  std::regex reg_4(\"[a-zA-Z]+\\\\.exe\");\n  std::regex reg_5(\"[a-zA-Z]+\\\
    \\.dll\");\n  if (regex_match(file_name, reg_1)) {\n    return \"No\";\n  }\n\
    \  if (regex_match(file_name, reg_2)) {\n    if (regex_match(file_name, reg_3)\
    \ || regex_match(file_name, reg_4) || regex_match(file_name, reg_5)) {\n     \
    \ return \"Yes\";\n    }\n  }\n  return \"No\";", "    // your code here\n   \
    \ std::string ans = \"No\";\n    std::string extension[] = {\"txt\", \"exe\",\
    \ \"dll\"};\n    std::regex name(\"([a-zA-Z]+)([0-9]{0,3})(\\\\.)(txt|exe|dll)\"\
    );\n    if(std::regex_match(file_name, name)) {\n        ans = \"Yes\";\n    }\n\
    \    return ans;", "    std::string str1, str2;\n    int count_digits = 0;\n \
    \   bool dot_in_filename = false;\n    bool valid_substring_after_dot = false;\n\
    \    std::vector<std::string> vec = {\"txt\", \"exe\", \"dll\"};\n    for (int\
    \ i = 0; i < file_name.size(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count_digits++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            dot_in_filename = true;\n            continue;\n    \
    \    }\n        if (!dot_in_filename) {\n            str1 += file_name[i];\n \
    \       } else {\n            str2 += file_name[i];\n        }\n    }\n    for\
    \ (auto i : vec) {\n        if (str2 == i) {\n            valid_substring_after_dot\
    \ = true;\n        }\n    }\n    if (count_digits <= 3 && dot_in_filename && valid_substring_after_dot\
    \ && !str1.empty() &&\n    (str1[0] >= 'a' && str1[0] <= 'z' || str1[0] >= 'A'\
    \ && str1[0] <= 'Z')) {\n        return \"Yes\";\n    }\n    return \"No\";",
  "    std::string result = \"No\";\n    if (file_name.find(\".\") == std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"..\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"...\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"....\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\".....\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"0\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"1\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"2\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"3\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"4\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"5\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"6\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"7\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"8\") != std::string::npos)\n\
    \        return result;\n    if (file_name.find(\"9\") != std::string::npos)\n\
    \        return result;\n    if (file_name.substr(file_name.find(\".\")+1) !=\
    \ \"txt\" \n        && file_name.substr(file_name.find(\".\")+1) != \"exe\" \n\
    \        && file_name.substr(file_name.find(\".\")+1) != \"dll\")\n        return\
    \ result;\n    if (file_name.substr(0,file_name.find(\".\")) == \"\")\n      \
    \  return result;\n    if (file_name.substr(0,file_name.find(\"", "    // your\
    \ code here\n    std::string new_file_name = \"\";\n    std::string extension\
    \ = \"\";\n    int dot_count = 0;\n    int count = 0;\n    std::string ret_val\
    \ = \"\";\n    //substring check\n    for(int i = 0; i < file_name.length(); i++){\n\
    \        if(file_name[i] == '.'){\n            dot_count++;\n            count\
    \ = 0;\n        }else if(dot_count == 0){\n            new_file_name += file_name[i];\n\
    \        }else if(dot_count == 1){\n            extension += file_name[i];\n \
    \       }\n    }\n    //checks the number of dots\n    if(dot_count != 1){\n \
    \       ret_val = \"No\";\n    }else{\n        //checks if there are more than\
    \ 3 digits at the front\n        for(int i = 0; i < new_file_name.length(); i++){\n\
    \            if(isdigit(new_file_name[i])){\n                count++;\n      \
    \      }\n        }\n        if(count > 3){\n            ret_val = \"No\";\n \
    \       }else{\n            //checks if the first letter of the substring is a\
    \ character\n            if(!isalpha(new_file_name[0])){\n                ret_val\
    \ = \"No\";\n            }else{\n                //checks if the substring is\
    \ empty\n                if(new_file_name.length() == 0){\n                  \
    \  ret_val = \"No\";\n                }else{\n                    //checks if\
    \ the extension is valid\n                    if(extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\"){\n                        ret_val = \"No\"\
    ;\n                    }else{\n                        ret_val = \"Yes\";\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return ret_val;", "    // your code here\n    int length = file_name.length();\n\
    \    if(length < 5)\n        return \"No\";\n    int i,flag=0,found=0,digit=0;\n\
    \    for(i=0;i<length;i++)\n    {\n        if(file_name[i]=='.')\n        {\n\
    \            if(found==1)\n                return \"No\";\n            found =\
    \ 1;\n            if(i==0)\n                return \"No\";\n            else if(i==length-1)\n\
    \                return \"No\";\n            else if(flag==0)\n              \
    \  return \"No\";\n            else if(flag==2)\n                return \"No\"\
    ;\n            else if(digit>3)\n                return \"No\";\n            else\n\
    \            {\n                if(file_name[i+1]=='t' && file_name[i+2]=='x'\
    \ && file_name[i+3]=='t')\n                    return \"Yes\";\n             \
    \   else if(file_name[i+1]=='e' && file_name[i+2]=='x' && file_name[i+3]=='e')\n\
    \                    return \"Yes\";\n                else if(file_name[i+1]=='d'\
    \ && file_name[i+2]=='l' && file_name[i+3]=='l')\n                    return \"\
    Yes\";\n                else\n                    return \"No\";\n           \
    \ }\n        }\n        else if(file_name[i]=='0' || file_name[i]=='1' || file_name[i]=='2'\
    \ || file_name[i]=='3' || file_name[i]=='4' || file_name[i]=='5' || file_name[i]=='6'\
    \ || file_name[i]=='7' || file_name[i]=='8' || file_name[i]=='9')\n        {\n\
    \            digit++;\n            if(digit>3)\n                return \"No\"\
    ;\n            if(found == 1)\n                flag = 2;\n            else\n \
    \               flag = 1;\n        }\n        else if(file", "  std::regex myreg(\"\
    ^[a-zA-Z]{1}.*[.](txt|exe|dll)$\");\n  std::smatch sm;\n  std::regex_search(file_name,\
    \ sm, myreg);\n  if (sm.size() == 0) {\n    return \"No\";\n  }\n  return \"Yes\"\
    ;", "\tint count = 0;\n\tint len = file_name.length();\n\tint flag = 0;\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (isdigit(file_name[i])) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tflag = 1;\n\t\t}\n\t}\n\tstd::string\
    \ s = file_name.substr(file_name.find(\".\") + 1);\n\tif (count > 3) {\n\t\treturn\
    \ \"No\";\n\t}\n\tif (flag == 0) {\n\t\treturn \"No\";\n\t}\n\tif (s == \"txt\"\
    \ || s == \"exe\" || s == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\telse\n\t\treturn\
    \ \"No\";", "\tint digits = 0;\n\tint dot = 0;\n\tint first_char = 0;\n\tint second_char\
    \ = 0;\n\tint third_char = 0;\n\tint four_char = 0;\n\tif(file_name.size() < 1)\
    \ {\n\t\treturn \"No\";\n\t}\n\tif(file_name[0] >= '0' && file_name[0] <= '9')\
    \ {\n\t\treturn \"No\";\n\t}\n\tfor(int i = 0; i < file_name.size(); i++) {\n\t\
    \tif(file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigits++;\n\t\t}\n\t\
    \tif(file_name[i] == '.') {\n\t\t\tdot++;\n\t\t}\n\t\tif(file_name[i] == '.')\
    \ {\n\t\t\tfirst_char = i + 1;\n\t\t}\n\t\tif(file_name[i] == '.') {\n\t\t\tsecond_char\
    \ = i + 2;\n\t\t}\n\t\tif(file_name[i] == '.') {\n\t\t\tthird_char = i + 3;\n\t\
    \t}\n\t\tif(file_name[i] == '.') {\n\t\t\tfour_char = i + 4;\n\t\t}\n\t}\n\tif(digits\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tif(dot != 1) {\n\t\treturn \"No\";\n\t}\n\
    \tif(file_name[first_char] == 't' && file_name[second_char] == 'x' && file_name[third_char]\
    \ == 't') {\n\t\treturn \"Yes\";\n\t}\n\tif(file_name[first_char] == 'e' && file_name[second_char]\
    \ == 'x' && file_name[third_char] == 'e') {\n\t\treturn \"Yes\";\n\t}\n\tif(file_name[first_char]\
    \ == 'd' && file_name[second_char] == 'l' && file_name[third_char] == 'l')", "\t\n\
    \t//Checking conditions\n\t//THe file name should not be more than 3 digits\n\t\
    //The file name should contain at least one dot\n\t//The substring before the\
    \ dot should not be empty\n\t//The substring after the dot should be txt, exe\
    \ or dll\n\t\n\t\n\t//check if the file name has more than 3 digits\n\tint flag1\
    \ = 0;\n\tint flag2 = 0;\n\tint flag3 = 0;\n\tint flag4 = 0;\n\tint i;\n\t\n\t\
    //Checking the number of occurences of the digits in the file name\n\tfor(i=0;i<file_name.length();i++)\n\
    \t{\n\t\tif(file_name[i]>='0' && file_name[i]<='9')\n\t\t{\n\t\t\tflag1++;\n\t\
    \t}\n\t}\n\t\n\t//Checking if the file name contains exactly one dot\n\tfor(i=0;i<file_name.length();i++)\n\
    \t{\n\t\tif(file_name[i]=='.')\n\t\t{\n\t\t\tflag2++;\n\t\t}\n\t}\n\t\n\t//Checking\
    \ the substring before the dot should not be empty\n\tstd::string str1 = file_name.substr(0,file_name.find(\"\
    .\"));\n\t\n\t//Checking the substring after the dot should be txt, exe or dll\n\
    \tstd::string str2 = file_name.substr(file_name.find(\".\")+1);\n\tif(str2.compare(\"\
    txt\") == 0 || str2.compare(\"exe\") == 0 || str2.compare(\"dll\") == 0)\n\t{\n\
    \t\tflag4 = 1;\n\t}\n\t\n\t//Checking if the first letter of the substring before\
    \ the dot is an alphabet\n\tif((str1[0]>='a' && str1[0]<='z') || (str1[0]>='A'\
    \ && str1[0]<='Z'))\n\t{\n\t\tflag3 = 1;\n\t}\n\t\n\tif(flag1<=3 && flag2==1 &&",
  "\tint dot_counter = 0;\n\tint digits_counter = 0;\n\tbool first_char_is_letter\
    \ = false;\n\tint file_type_length = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_counter++;\n\t\t\tif (dot_counter\
    \ == 2) {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\tfile_type_length = file_name.length()\
    \ - i - 1;\n\t\t}\n\t\telse if ((file_name[i] >= 'a' && file_name[i] <= 'z') ||\
    \ (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\t\t\tfirst_char_is_letter\
    \ = true;\n\t\t}\n\t\telse if (file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \t\t\tdigits_counter++;\n\t\t}\n\t}\n\tif (digits_counter > 3) {\n\t\treturn \"\
    No\";\n\t}\n\tif (!first_char_is_letter) {\n\t\treturn \"No\";\n\t}\n\tif (file_type_length\
    \ != 3) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "  \t\n  \t// <Add-code>\n\
    \   \tint number=0;\n   \tfor(auto& it:file_name)\n   \t{\n   \t\tif(it >= '0'\
    \ && it <= '9')\n   \t\t{\n   \t\t\tnumber++;\n   \t\t}\n   \t}\n   \tif(number\
    \ > 3)\n   \t{\n   \t\treturn \"No\";\n   \t}\n   \tint count = 0;\n   \tfor(auto&\
    \ it:file_name)\n   \t{\n   \t\tif(it == '.')\n   \t\t{\n   \t\t\tcount++;\n \
    \  \t\t}\n   \t}\n   \tif(count != 1)\n   \t{\n   \t\treturn \"No\";\n   \t}\n\
    \   \tstd::string beforeDot;\n   \tstd::string afterDot;\n   \tint dotIndex =\
    \ 0;\n   \tfor(int i = 0; i < file_name.size(); i++)\n   \t{\n   \t\tif(file_name[i]\
    \ == '.')\n   \t\t{\n   \t\t\tdotIndex = i;\n   \t\t\tbreak;\n   \t\t}\n   \t\
    }\n   \tfor(int i = 0; i < dotIndex; i++)\n   \t{\n   \t\tbeforeDot += file_name[i];\n\
    \   \t}\n   \tfor(int i = dotIndex + 1; i < file_name.size(); i++)\n   \t{\n \
    \  \t\tafterDot += file_name[i];\n   \t}\n   \tif(beforeDot == \"\")\n   \t{\n\
    \   \t\treturn \"No\";\n   \t}\n   \tif(beforeDot[0] < 'a' || beforeDot[0] > 'z')\n\
    \   \t{\n   \t\tif(beforeDot[0] < 'A' || beforeDot[0] > 'Z')\n   \t\t{\n   \t\t\
    \treturn \"No\";\n   \t\t}\n   \t}\n   \tif(afterDot != \"txt\" && afterDot !=\
    \ \"exe\" && afterDot != \"dll\")\n   \t{\n   \t\treturn \"No", "    int len =\
    \ file_name.length();\n    if(len<=3){\n        return \"No\";\n    }\n    //checks\
    \ if file has only one dot.\n    int count_dot = 0;\n    for(int i=0;i<len;i++){\n\
    \        if(file_name[i]=='.'){\n            count_dot++;\n        }\n    }\n\
    \    if(count_dot!=1){\n        return \"No\";\n    }\n    //checks if file has\
    \ more than 3 digits.\n    int count_digits = 0;\n    for(int i=0;i<len;i++){\n\
    \        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count_digits++;\n\
    \        }\n    }\n    if(count_digits>3){\n        return \"No\";\n    }\n  \
    \  //checks if the substring before dot is a alphabetic string.\n    int count_alphabet\
    \ = 0;\n    int dot_index = file_name.find(\".\");\n    for(int i=0;i<dot_index;i++){\n\
    \        if((file_name[i]>='a'&&file_name[i]<='z')||(file_name[i]>='A'&&file_name[i]<='Z')){\n\
    \            count_alphabet++;\n        }\n    }\n    if(count_alphabet==0){\n\
    \        return \"No\";\n    }\n    std::string extension = file_name.substr(dot_index+1,3);\n\
    \    if(extension==\"txt\"||extension==\"exe\"||extension==\"dll\"){\n       \
    \ return \"Yes\";\n    }\n    return \"No\";", "  // Insert your code here\n \
    \   int len = file_name.length();\n    int i = 0;\n    int count = 0;\n    while(i\
    \ < len){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n         \
    \   count++;\n        }\n        i++;\n    }\n    if(count > 3){\n        return\
    \ \"No\";\n    }\n    i = 0;\n    while(i < len){\n        if(file_name[i] ==\
    \ '.'){\n            break;\n        }\n        i++;\n    }\n    if(i == len){\n\
    \        return \"No\";\n    }\n    count = 0;\n    for(int j = i + 1; j < len;\
    \ j++){\n        if(file_name[j] == '.'){\n            count++;\n        }\n \
    \   }\n    if(count > 1){\n        return \"No\";\n    }\n    std::string str1\
    \ = file_name.substr(0, i);\n    std::string str2 = file_name.substr(i+1, len-i-1);\n\
    \    int len1 = str1.length();\n    int len2 = str2.length();\n    int j = 0;\n\
    \    while(j < len1){\n        if(!((str1[j] >= 'a' && str1[j] <= 'z') || (str1[j]\
    \ >= 'A' && str1[j] <= 'Z'))){\n            return \"No\";\n        }\n      \
    \  j++;\n    }\n    if(len1 == 0){\n        return \"No\";\n    }\n    if(str2\
    \ != \"txt\" && str2 != \"exe\" && str2 != \"dll\"){\n        return \"No\";\n\
    \    }\n    return \"Yes\";", "    bool dot = false;\n    bool has_digit = false;\n\
    \    bool has_latin = false;\n    for (int i = 0; i < file_name.size(); i++) {\n\
    \        if (file_name[i] == '.') dot = true;\n        if ('0' <= file_name[i]\
    \ && file_name[i] <= '9') has_digit = true;\n        if (('a' <= file_name[i]\
    \ && file_name[i] <= 'z') || ('A' <= file_name[i] && file_name[i] <= 'Z')) has_latin\
    \ = true;\n    }\n    if (dot == false || has_digit == false || has_latin == false)\
    \ return \"No\";\n    int dot_pos = file_name.find('.');\n    std::string suffix\
    \ = file_name.substr(dot_pos + 1);\n    int digit_num = 0;\n    for (int i = 0;\
    \ i < file_name.size(); i++) {\n        if ('0' <= file_name[i] && file_name[i]\
    \ <= '9') digit_num += 1;\n    }\n    std::string valid_suffix[3] = {\"txt\",\
    \ \"exe\", \"dll\"};\n    bool valid_suffix_flag = false;\n    for (int i = 0;\
    \ i < 3; i++) {\n        if (suffix == valid_suffix[i]) valid_suffix_flag = true;\n\
    \    }\n    if (digit_num > 3 || valid_suffix_flag == false) return \"No\";\n\
    \    return \"Yes\";", "    assert(file_name.size() > 0);\n    assert(file_name.size()\
    \ < 256);\n    std::string str = file_name;\n    int count_digits = 0;\n    int\
    \ dot_pos = -1;\n    for (int i = 0; i < str.size(); i++) {\n        if ((str[i]\
    \ < '0' || str[i] > '9') && str[i] != '.')\n            return \"No\";\n     \
    \   if (str[i] >= '0' && str[i] <= '9')\n            count_digits++;\n       \
    \ if (str[i] == '.')\n            dot_pos = i;\n    }\n    if (count_digits >\
    \ 3)\n        return \"No\";\n    if (dot_pos == -1)\n        return \"No\";\n\
    \    if (dot_pos == 0)\n        return \"No\";\n    if (dot_pos == str.size()\
    \ - 1)\n        return \"No\";\n    if (str[dot_pos + 1] != 't' && str[dot_pos\
    \ + 1] != 'e' && str[dot_pos + 1] != 'd')\n        return \"No\";\n    if (str[dot_pos\
    \ + 2] != 'x' && str[dot_pos + 2] != 'x' && str[dot_pos + 2] != 'l')\n       \
    \ return \"No\";\n    if (str[dot_pos + 3] != 't' && str[dot_pos + 3] != 'e' &&\
    \ str[dot_pos + 3] != 'l')\n        return \"No\";\n    for (int i = 0; i < dot_pos;\
    \ i++) {\n        if ((str[i] < 'a' || str[i] > 'z') && (str[i] < 'A' || str[i]\
    \ > 'Z'))\n            return \"No\";\n    }\n    return \"Yes\";"]
stop_tokens:
- "\n}"
