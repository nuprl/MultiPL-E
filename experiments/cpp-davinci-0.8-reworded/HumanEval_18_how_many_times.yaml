name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\n// >>>\
  \ how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"\
  a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string\
  \ string, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["\treturn std::count(string.begin(), string.end(), substring);", " \
    \   int pos = string.find(substring);\n    long count = 0;\n    while (pos!=std::string::npos)\
    \ {\n        ++count;\n        pos = string.find(substring, pos+1);\n    }\n \
    \   return count;", "    long count = 0;\n    long subLen = substring.length();\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ subLen) == substring)\n            count++;\n    }\n    return count;", "  \
    \  std::size_t nPos = string.find(substring, 0); // fist occurrence\n    long\
    \ nOccurrences = 0;\n    while(nPos != std::string::npos)\n    {\n        nOccurrences++;\n\
    \        nPos = string.find(substring, nPos+1);\n    }\n    return nOccurrences;",
  "    if(string.size() < substring.size())\n    {\n        return 0;\n    }\n   \
    \ long cnt = 0;\n    for(int i = 0; i < string.size(); ++i)\n    {\n        std::string\
    \ tmp = string.substr(i, substring.size());\n        if(tmp == substring)\n  \
    \      {\n            ++cnt;\n        }\n    }\n    return cnt;", "    long len\
    \ = string.length();\n    long slen = substring.length();\n    long counter =\
    \ 0;\n    for (int i = 0; i < len; i++) {\n        if (string.substr(i, slen)\
    \ == substring) {\n            counter++;\n        }\n    }\n    return counter;",
  "    long ssize = string.size();\n    long substrsize = substring.size();\n    if\
    \ (ssize == 0) return 0;\n    if (substrsize == 0) return 0;\n    int count =\
    \ 0;\n    for (long i = 0; i < ssize - substrsize + 1; i++) {\n        for (long\
    \ j = 0; j < substrsize; j++) {\n            if (string[i + j] != substring[j])\
    \ break;\n            if (j == substrsize - 1) count++;\n        }\n    }\n  \
    \  return count;", "\tlong occurrence_counter = 0;\n\tfor (size_t substring_position\
    \ = 0; substring_position < string.size(); substring_position++) {\n\t\tsize_t\
    \ string_position = substring_position;\n\t\tfor (size_t substring_index = 0;\
    \ substring_index < substring.size(); substring_index++) {\n\t\t\tif (string[string_position]\
    \ == substring[substring_index]) {\n\t\t\t\tif (substring_index == substring.size()\
    \ - 1) {\n\t\t\t\t\toccurrence_counter++;\n\t\t\t\t}\n\t\t\t\tstring_position++;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn occurrence_counter;",
  "    long result = 0;\n    long substring_size = substring.size();\n    long string_size\
    \ = string.size();\n    long substring_index;\n    long i = 0;\n    while(i <\
    \ string_size){\n        substring_index = string.find(substring, i);\n      \
    \  if(substring_index == std::string::npos){\n            break;\n        }\n\
    \        i = substring_index + substring_size;\n        result++;\n    }\n   \
    \ return result;", "  long count = 0;\n  long i = 0;\n  long j = 0;\n  while (i\
    \ < string.length()) {\n    while (j < substring.length() && (string[i] == substring[j]))\
    \ {\n      i++;\n      j++;\n    }\n    if (j == substring.length()) {\n     \
    \ count++;\n      i -= j - 1;\n      j = 0;\n    } else {\n      i++;\n      j\
    \ = 0;\n    }\n  }\n  return count;", "    long len_string = string.length();\n\
    \    long len_substring = substring.length();\n    long len_diff = len_string\
    \ - len_substring;\n    long count = 0;\n    long i = 0;\n    for (i = 0; i <=\
    \ len_diff; i++) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "\t\tlong counter\
    \ = 0;\n\t\tfor (long i = 0; i <= string.length() - substring.length(); i++) {\n\
    \t\t\t\tif (string.substr(i, substring.length()) == substring)\n\t\t\t\t\t\tcounter++;\n\
    \t\t}\n\t\treturn counter;", "    if(substring.size() == 0) return 0;\n    if(string.size()\
    \ == 0) return 0;\n    int index = 0;\n    int max = 0;\n    while(index < string.size()){\n\
    \        int x = string.find(substring, index);\n        // std::cout << \"index:\
    \ \" << index << \" x: \" << x << std::endl;\n        if(x == -1) break;\n   \
    \     max++;\n        index = x + 1;\n    }\n    return max;", "  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::transform(substring.begin(),\
    \ substring.end(), substring.begin(), ::tolower);\n  int count = 0;\n  int pos\
    \ = 0;\n  while(pos < string.length()){\n    pos = string.find(substring, pos);\n\
    \    if(pos == std::string::npos){\n      break;\n    }\n    count++;\n    pos\
    \ += substring.length();\n  }\n  return count;", "\tauto s = string.c_str();\n\
    \tauto p = substring.c_str();\n\tint counter = 0;\n\twhile(*s){\n\t\tauto test\
    \ = s;\n\t\tfor(;*p && *s && *s == *p; p++, s++);\n\t\tif(!*p)\n\t\t\tcounter++;\n\
    \t\ts = test + 1;\n\t\tp = substring.c_str();\n\t}\n\treturn counter;", "    long\
    \ count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]==substring[0]){\n\
    \            int i_copy=i;\n            bool check=true;\n            for(int\
    \ j=0;j<substring.length();j++){\n                if(i_copy>=string.length() ||\
    \ string[i_copy]!=substring[j]){\n                    check=false;\n         \
    \           break;\n                }\n                i_copy++;\n           \
    \ }\n            if(check){\n                count++;\n            }\n       \
    \ }\n    }\n    return count;", "    long cnt = 0;\n    std::string::size_type\
    \ pos = 0;\n    while ( (pos = string.find(substring, pos)) != std::string::npos\
    \ ) {\n        ++cnt;\n        ++pos;\n    }\n    return cnt;", "    if(string.empty()\
    \ || substring.empty()) return 0;\n    long count = 0;\n    for(int i = 0; i <\
    \ string.size(); i++) {\n        if(string[i] == substring[0]) {\n           \
    \ count++;\n            int j = 1;\n            while(j < substring.size() &&\
    \ (i+j) < string.size() && string[i+j] == substring[j]) j++;\n            if(j\
    \ == substring.size()) i += substring.size() - 1;\n        }\n    }\n    return\
    \ count;", "\tlong count = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\
    \t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;", "    long count = 0;\n    for (int i = 0; i <= string.length()\
    \ - substring.length(); i++) {\n        if (string.substr(i, substring.length())\
    \ == substring)\n            count++;\n    }\n    return count;", "\t//\n\t//\
    \ int count = 0;\n\t// int l1 = string.length();\n\t// int l2 = substring.length();\n\
    \t// int i, j;\n\t// for(i = 0; i < l1 - l2; i++) {\n\t// \tfor(j = 0; j < l2;\
    \ j++) {\n\t// \t\tif(string[i + j] != substring[j]) {\n\t// \t\t\tbreak;\n\t\
    // \t\t}\n\t// \t}\n\t// \tif(j == l2) {\n\t// \t\tcount++;\n\t// \t}\n\t// }\n\
    \t// return count;\n\treturn std::count(string.begin(), string.end(), substring);",
  "    int lsubs = substring.length();\n    int lstr = string.length();\n    int count\
    \ = 0;\n    for(int i = 0; i < lstr; i++) {\n        if(i+lsubs > lstr) {\n  \
    \          break;\n        }\n        int j = 0;\n        for(j = 0; j < lsubs;\
    \ j++) {\n            if(string[i+j] != substring[j])\n                break;\n\
    \        }\n        if(j == lsubs) {\n            count++;\n        }\n    }\n\
    \    return count;", "\t// Use find() to find the next occurrence\n\t// Use length()\
    \ to get the length of the substring\n\n\t// std::cout << string.find(substring)\
    \ << std::endl;\n\tlong answer = 0;\n\tlong substring_length = substring.length();\n\
    \tlong string_length = string.length();\n\t// std::cout << substring_length <<\
    \ std::endl;\n\tif (substring_length == 0) {\n\t\treturn 0;\n\t}\n\tfor (long\
    \ i = 0; i < string_length; ++i) {\n\t\tif (string[i] == substring[0]) {\n\t\t\
    \tbool is_found = true;\n\t\t\tfor (long j = 0; j < substring_length; ++j) {\n\
    \t\t\t\tif (string[i + j] != substring[j]) {\n\t\t\t\t\tis_found = false;\n\t\t\
    \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_found) {\n\t\t\t\t++answer;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn answer;", "    long count = 0;\n    std::size_t found\
    \ = string.find(substring);\n    while (found != std::string::npos) {\n      \
    \  count += 1;\n        found = string.find(substring, found + 1);\n    }\n  \
    \  return count;", "    long count = 0;\n    for (std::size_t i = 0; i < string.size();\
    \ i++) {\n        if (string.compare(i, substring.size(), substring) == 0) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i <= string.length() - substring.length(); i++) {\n\
    \        if (string.substr(i, substring.length()) == substring)\n            count++;\n\
    \    }\n    return count;", '    return std::count(string.begin(), string.end(),
    substring);', "    int i = 0;\n    int j = 0;\n    int size = string.size();\n\
    \    int sub_size = substring.size();\n    int counter = 0;\n    for(int i = 0;\
    \ i < size; i++) {\n        for(int j = 0; j < sub_size; j++) {\n            if(string[i+j]\
    \ != substring[j])\n                break;\n            if(j == sub_size - 1)\n\
    \                counter++;\n        }\n    }\n    return counter;", "  long \
    \ str_length = string.length();\n  long  sub_length = substring.length();\n  long\
    \  count = 0;\n  for (long i = 0; i < str_length; i++) {\n    if (string.substr(i,\
    \ sub_length) == substring) {\n      count++;\n    }\n  }\n  return count;", " \
    \   long number_of_matches = 0;\n    long sub_length = substring.length();\n \
    \   long length = string.length();\n    for (int i = 0; i < length; i++) {\n \
    \       if (string.substr(i, sub_length) == substring) {\n            number_of_matches++;\n\
    \        }\n    }\n    return number_of_matches;", "\tlong count = 0;\n\tfor (int\
    \ i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", '    return std::count(string.begin(),
    string.end(), substring);', "    // if the substring is bigger than the original,\n\
    \    // the original can't contain it\n    if (substring.size() > string.size())\
    \ {\n        return 0;\n    }\n    std::vector<long> start_indexes;\n    for (size_t\
    \ i = 0; i < string.size(); i++) {\n        if (string[i] == substring[0]) {\n\
    \            start_indexes.push_back(i);\n        }\n    }\n    long count = 0;\n\
    \    for (long start_index : start_indexes) {\n        size_t index = 0;\n   \
    \     while (index < substring.size() &&\n               string[start_index +\
    \ index] == substring[index]) {\n            index++;\n        }\n        if (index\
    \ == substring.size()) {\n            count++;\n        }\n    }\n    return count;",
  "\tif (substring.size() == 0) return 0;\n\tint count = 0;\n\tint len = string.size();\n\
    \tint sub_len = substring.size();\n\tint end = len - sub_len;\n\tfor (int i =\
    \ 0; i <= end; i++) {\n\t\tbool isSubStr = true;\n\t\tfor (int j = 0; j < sub_len;\
    \ j++) {\n\t\t\tif (string[i + j] != substring[j]) {\n\t\t\t\tisSubStr = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isSubStr) count++;\n\t}\n\treturn count;",
  "    long string_size = string.size();\n    long substring_size = substring.size();\n\
    \    long count = 0;\n    for (int i = 0; i < string_size - substring_size + 1;\
    \ i++) {\n        std::string temp = string.substr(i, substring_size);\n     \
    \   if (temp == substring) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    assert(string.length()>=substring.length());\n    // Write your\
    \ code here\n    long count = 0;\n    int j = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] == substring[j]){\n            j++;\n          \
    \  if(j == substring.length()){\n                count++;\n                j =\
    \ 0;\n            }\n        }\n        else{\n            j = 0;\n        }\n\
    \    }\n    return count;", "    if(substring.length() == 0 || string.length()\
    \ == 0)\n        return 0;\n    int lsub = substring.length();\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] ==\
    \ substring[0]) {\n            if(i+lsub <= string.length()) {\n             \
    \   if(string.substr(i, lsub) == substring) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long counter = 0;\n    size_t pos = 0;\n    while((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++counter;\n        ++pos;\n    }\n \
    \   return counter;", "  unsigned int last_index = 0;\n  unsigned int count =\
    \ 0;\n  while (true) {\n    unsigned int next_index = string.find(substring, last_index);\n\
    \    if (next_index == std::string::npos) {\n      break;\n    }\n    ++count;\n\
    \    last_index = next_index + 1;\n  }\n  return count;", "    long count = 0;\n\
    \    for (long i = 0; i < string.length(); i++) {\n        for (long j = 0; j\
    \ < substring.length(); j++) {\n            if (string[i] == substring[j]) {\n\
    \                count++;\n                break;\n            }\n        }\n\
    \    }\n    return count;", "    \n    // make the function work only with the\
    \ string value\n    std::string string_2 = string;\n    // set a counter to keep\
    \ the number of times it has been found\n    int counter = 0;\n    // input validation\n\
    \    if (string.length() < substring.length()) {\n        return 0;\n    }\n \
    \   // iterate through the string and search for the substring\n    for (int i\
    \ = 0; i < string.length(); i++) {\n        // we found a substring in the string\n\
    \        if (string.find(substring) == i) {\n            // remove the given substring\
    \ from the string so we do not count overlaps\n            string.erase(i, substring.length());\n\
    \            // increase the counter of the number of times we found the substring\n\
    \            counter++;\n        }\n    }\n    return counter;", "    long count\
    \ = 0;\n    long len = string.length();\n    long slen = substring.length();\n\
    \    if(slen == 0){\n        return 0;\n    }\n    for(long i = 0; i < len; i++){\n\
    \        long j = 0;\n        if(string[i] == substring[j]){\n            for(j\
    \ = 0; j < slen; j++){\n                if(string[i + j] != substring[j]){\n \
    \                   break;\n                }\n            }\n            if(j\
    \ == slen){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    assert(!string.empty());\n    assert(!substring.empty());\n  \
    \  assert(substring.size() <= string.size());\n    long long_count = 0;\n    long\
    \ i;\n    for (i = 0; i <= string.size() - substring.size(); i++) {\n        if\
    \ (string.substr(i, substring.size()) == substring) {\n            long_count\
    \ += 1;\n        }\n    }\n    return long_count;", "    long long count = 0;\n\
    \    int len = substring.length();\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        if(string.substr(i, len) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", '  return std::count(string.begin(), string.end(),
    substring);', "    std::regex re(substring);\n    std::smatch match;\n    long\
    \ number=0;\n    while(std::regex_search(string, match, re)){\n        number++;\n\
    \        string=match.suffix().str();\n    }\n    return number;", "    long count=0;\n\
    \    for(int i=0;i<string.length();i++){\n        int j;\n        for(j=0;j<substring.length();j++){\n\
    \            if(string[i+j]!=substring[j])\n                break;\n        }\n\
    \        if(j==substring.length())\n            count++;\n    }\n    return count;",
  "\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tfor (int\
    \ j = 0; j < substring.length(); j++) {\n\t\t\tif (string[i + j] != substring[j])\
    \ {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == substring.length() - 1) {\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "  long count = 0;\n  size_t\
    \ npos = std::string::npos;\n  size_t found = 0;\n  for (size_t i = 0; i < string.length();\
    \ i++) {\n    found = string.find(substring, i);\n    if (found != npos) {\n \
    \     count++;\n      i = found + substring.length() - 1;\n    }\n  }\n  return\
    \ count;", "    long count=0;\n    for(int i=0;i<string.length();i++){\n     \
    \   for(int j=0;j<substring.length();j++){\n            if(string[i+j]==substring[j]){\n\
    \                if(j==substring.length()-1){\n                    count++;\n\
    \                }\n            }\n            else{\n                break;\n\
    \            }\n        }\n    }\n    return count;", "    long found = 0;\n \
    \   long n = string.length();\n    long m = substring.length();\n    for (long\
    \ i = 0; i < n; i++) {\n        if (string.substr(i, m) == substring) {\n    \
    \        found++;\n        }\n    }\n    return found;", "    long count = 0;\n\
    \    for (std::size_t i = 0; i < string.size(); i++) {\n        for (std::size_t\
    \ j = 0; j < substring.size(); j++) {\n            if (string[i + j] != substring[j])\n\
    \                break;\n            if (j == substring.size() - 1)\n        \
    \        count++;\n        }\n    }\n    return count;", "\tstd::string::size_type\
    \ n = string.find(substring, 0);\n\tlong ans = 0;\n\twhile (n != std::string::npos)\
    \ {\n\t\tans++;\n\t\tn = string.find(substring, n + 1);\n\t}\n\treturn ans;",
  "    int count = 0;\n    long size = substring.size();\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        if (string.substr(i, size) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long how_many\
    \ = 0;\n    for (int i = 0; i <= string.length() - substring.length(); i++) {\n\
    \        for (int j = 0; j < substring.length(); j++) {\n            if (string[i\
    \ + j] != substring[j]) {\n                break;\n            }\n           \
    \ if (j == substring.length() - 1) {\n                how_many++;\n          \
    \  }\n        }\n    }\n    return how_many;", "\tlong size = string.size();\n\
    \tlong size2 = substring.size();\n\tif (size == 0 || size2 == 0)\n\t\treturn 0;\n\
    \tlong count = 0;\n\tbool check = true;\n\tfor (long i = 0; i < size; i++) {\n\
    \t\tfor (long j = 0; j < size2; j++) {\n\t\t\tif (string[i + j] != substring[j])\
    \ {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (check) {\n\
    \t\t\tcount++;\n\t\t\ti += size2 - 1;\n\t\t}\n\t\tcheck = true;\n\t}\n\treturn\
    \ count;", "    size_t i,j;\n    long count = 0;\n    int len1 = string.length();\n\
    \    int len2 = substring.length();\n    for(i=0;i<=len1-len2;i++){\n        j=0;\n\
    \        while(j<len2){\n            if(string[i+j]!=substring[j]){\n        \
    \        break;\n            }\n            j++;\n        }\n        if(j==len2){\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (long i = 0; i < string.length(); ++i) {\n        if (substring\
    \ == string.substr(i, substring.length())) {\n            ++count;\n        }\n\
    \    }\n    return count;", "\tstd::vector<long> times;\n\tstd::string::size_type\
    \ pos = 0;\n\twhile((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n\t\ttimes.push_back(pos);\n\t\tpos += substring.length();\n\t}\n\treturn\
    \ times.size();", "    // your code here\n  long count=0;\n  if(substring.size()>string.size())\n\
    \    return 0;\n  else{\n    for(long i=0;i<string.size();i++){\n        long\
    \ j=0;\n      if(string[i]==substring[j]){\n        while(string[i]==substring[j]\
    \ && j<substring.size()){\n            j++;\n            i++;\n        }\n   \
    \     if(j==substring.size())\n            count++;\n      }\n    }\n  }\n  return\
    \ count;", "    //long n = string.length();\n    //long m = substring.length();\n\
    \    //long count = 0;\n    //long i;\n    //long j;\n    //if (m > n) {\n   \
    \ //    return 0;\n    //}\n    //else if (m == n) {\n    //    if (string.compare(substring)\
    \ == 0) {\n    //        return 1;\n    //    }\n    //    else {\n    //    \
    \    return 0;\n    //    }\n    //}\n    //else {\n    //    for (i = 0; i <=\
    \ n - m; i++) {\n    //        for (j = 0; j < m; j++) {\n    //            if\
    \ (string[i + j] != substring[j]) {\n    //                break;\n    //    \
    \        }\n    //        }\n    //        if (j == m) {\n    //            count++;\n\
    \    //        }\n    //    }\n    //    return count;\n    //}\n    long count\
    \ = 0;\n    long idx = 0;\n    while (idx < string.length()) {\n        idx =\
    \ string.find(substring, idx);\n        if (idx == std::string::npos) {\n    \
    \        break;\n        }\n        count++;\n        idx++;\n    }\n    return\
    \ count;", '    return 0;', "    long sub_len = substring.length();\n    long\
    \ str_len = string.length();\n    long counter = 0;\n    for (long i = 0; i <\
    \ str_len; i++){\n        if (string.substr(i, sub_len) == substring){\n     \
    \       counter++;\n        }\n    }\n    return counter;", "    std::size_t found\
    \ = 0;\n    std::size_t count = 0;\n    while(true){\n        found = string.find(substring,\
    \ found);\n        if (found != std::string::npos){\n            count ++;\n \
    \           found += substring.length();\n        } else {\n            break;\n\
    \        }\n    }\n    return count;", "\tlong count=0;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]==substring[0]){\n\t\t\tbool ok=true;\n\t\t\tfor(int j=0;j<substring.length();j++){\n\
    \t\t\t\tif(string[i+j]!=substring[j]){\n\t\t\t\t\tok=false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif(ok) count++;\n\t\t}\n\t}\n\treturn count;", "   \
    \ std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n \
    \   std::transform(substring.begin(), substring.end(), substring.begin(), ::tolower);\n\
    \    std::size_t found = string.find(substring);\n    if (found == std::string::npos)\n\
    \        return 0;\n    return 1 + how_many_times(string.substr(found + 1), substring);",
  "    long count = 0;\n    while(string.find(substring) != std::string::npos) {\n\
    \        count += 1;\n        string = string.substr(string.find(substring) +\
    \ 1);\n    }\n    return count;", "    long count = 0;\n    size_t found = 0;\n\
    \    while(found != std::string::npos) {\n        found = string.find(substring,\
    \ found);\n        if(found != std::string::npos) {\n            count++;\n  \
    \          found++;\n        }\n    }\n    return count;", "    int original_string_length\
    \ = string.length();\n    int substring_length = substring.length();\n    int\
    \ total_substrings = original_string_length - substring_length + 1;\n    int count\
    \ = 0;\n    for (int index = 0; index < total_substrings; index++) {\n       \
    \ std::string result = string.substr(index, substring_length);\n        if (result\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  '    return std::count(string.begin(), string.end(), substring.front());', "  long\
    \ count = 0;\n  unsigned long size_string = string.size();\n  unsigned long size_substring\
    \ = substring.size();\n  assert(size_string >= size_substring);\n  for (unsigned\
    \ long i = 0; i <= size_string - size_substring; i++) {\n    if (string.substr(i,\
    \ size_substring) == substring) {\n      count++;\n    }\n  }\n  return count;",
  "\treturn std::count(string.begin(), string.end(), substring);", "    long counter\
    \ = 0;\n    long subLen = substring.length();\n    long strLen = string.length();\n\
    \    for (long i = 0; i < strLen - subLen + 1; i++) {\n        if (string.substr(i,\
    \ subLen) == substring)\n            counter++;\n    }\n    return counter;",
  "  long count = 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i,\
    \ substring.length()) == substring) {\n      count++;\n    }\n  }\n  return count;",
  "    int substring_size = substring.size();\n    int string_size = string.size();\n\
    \    if (substring_size > string_size)\n        return 0;\n    int hash_substring\
    \ = 0;\n    int hash_string = 0;\n    int k = 0;\n    for (int i = 0; i < substring_size;\
    \ i++) {\n        hash_substring += substring[i] * pow(2, i);\n        hash_string\
    \ += string[k] * pow(2, i);\n        k++;\n    }\n    long sum = 0;\n    if (hash_substring\
    \ == hash_string)\n        sum++;\n    for (int i = 1; i < string_size - substring_size\
    \ + 1; i++) {\n        hash_string = hash_string / 2 + string[k] * pow(2, substring_size\
    \ - 1);\n        k++;\n        if (hash_substring == hash_string)\n          \
    \  sum++;\n    }\n    return sum;", "    \n    long int count = 0;\n    long int\
    \ i;\n    std::size_t find_substring = string.find(substring);\n    long int size_substring\
    \ = substring.size();\n    long int size_string = string.size();\n    while(find_substring\
    \ != std::string::npos){\n        find_substring = string.find(substring, find_substring\
    \ + size_substring);\n        count++;\n    }\n    return count;", "    if(substring\
    \ == \"\") return 1;\n    if(string == \"\") return 0;\n    long occurrences =\
    \ 0;\n    for(long itr = 0; itr < string.length(); itr++) {\n        std::string\
    \ sub = string.substr(itr, substring.length());\n        if(sub == substring)\
    \ occurrences++;\n    }\n    return occurrences;", "    long cnt = 0;\n    int\
    \ subLen = substring.length();\n    int strLen = string.length();\n    for(int\
    \ i = 0; i <= strLen - subLen; i++) {\n        if(substring == string.substr(i,\
    \ subLen))\n            cnt++;\n    }\n    return cnt;", "\tlong count=0;\n\t\
    int i=0;\n\twhile(i<string.length()){\n\t\tif(string.find(substring,i) != -1){\n\
    \t\t\ti=string.find(substring,i);\n\t\t\tcount++;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\
    \t\t\ti++;\n\t\t}\n\t}\n\treturn count;", "    int counter = 0;\n    std::size_t\
    \ nPos = string.find(substring, 0); // fist occurrence\n    while(nPos != std::string::npos)\n\
    \    {\n        counter++;\n        nPos = string.find(substring, nPos+1);\n \
    \   }\n    return counter;", "    long substring_size = substring.size();\n  \
    \  long string_size = string.size();\n    long count = 0;\n    for (long i = 0;\
    \ i < string_size; i++) {\n        if (string.substr(i, substring_size) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long len=substring.length();\n\
    \    long count=0;\n    for(int i=0;i<string.length();i++){\n        if(string.substr(i,len)==substring){\n\
    \            count++;\n        }\n    }\n    return count;", "  int count = 0;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i, substring.length())\
    \ == substring) {\n      count++;\n    }\n  }\n  return count;", "  long count=0;\n\
    \  for(long i=0;i<=string.length()-substring.length();i++){\n    if(string.substr(i,substring.length())==substring){\n\
    \      count++;\n    }\n  }\n  return count;", "  long count=0;\n  size_t pos\
    \ = 0;\n  while(pos<string.length() && (pos = string.find(substring, pos)) !=\
    \ std::string::npos){\n    pos+=substring.length();\n    count++;\n  }\n  return\
    \ count;", "    long ret = 0;\n    long pos = 0;\n    while (true) {\n       \
    \ pos = string.find(substring, pos);\n        if (pos == std::string::npos) {\n\
    \            break;\n        }\n        ++ret;\n        ++pos;\n    }\n    return\
    \ ret;", "    // count is the number of times we found the substring in the string.\n\
    \    long count = 0;\n    // offset is the current point we are at in the string.\n\
    \    long offset = 0;\n    // last_match_offset is the position at which we last\
    \ found the substring.\n    long last_match_offset = 0;\n    // Get the length\
    \ of the string and substring.\n    long string_length = string.length();\n  \
    \  long substring_length = substring.length();\n    // This loop runs while the\
    \ current offset is less than the\n    // string length.\n    while (offset <\
    \ string_length) {\n        // This loop runs if the current offset is within\
    \ the bounds of the\n        // string.\n        if (offset < string_length) {\n\
    \            // This loop runs if the substring we are looking for is at the\n\
    \            // current position of the offset.\n            if (string.substr(offset,\
    \ substring_length) == substring) {\n                // Advance the last match\
    \ offset to the current offset.\n                last_match_offset = offset;\n\
    \                // Increment the count as we have found a substring match.\n\
    \                count += 1;\n                // Update the offset to right after\
    \ the last substring match.\n                offset = last_match_offset + substring_length;\n\
    \            } else {\n                // Advance the offset to the next position.\n\
    \                offset += 1;\n            }\n        }\n    }\n    // Return\
    \ the count.\n    return count;", "    int i = 0;\n    int j = 0;\n    int res\
    \ = 0;\n    while (i < string.size()) {\n        if (string[i] == substring[j])\
    \ {\n            j++;\n            if (j == substring.size()) {\n            \
    \    res++;\n                j = 0;\n            }\n        } else {\n       \
    \     j = 0;\n        }\n        i++;\n    }\n    return res;", "\tif (substring.size()\
    \ == 0)\n\t\treturn -1;\n\tlong count = 0;\n\tlong index = string.find(substring);\n\
    \twhile (index != std::string::npos) {\n\t\tcount++;\n\t\tindex = string.find(substring,\
    \ index + 1);\n\t}\n\treturn count;", "    long times = 0;\n    long index = string.find(substring);\n\
    \    while (index != std::string::npos) {\n        times++;\n        string =\
    \ string.substr(index + 1);\n        index = string.find(substring);\n    }\n\
    \    return times;", "    long count = 0;\n    long len = substring.length();\n\
    \    int i = 0;\n    while(string.length()>0){\n        if(string.length()>=len){\n\
    \            std::string temp = string.substr(0,len);\n            if(temp==substring){\n\
    \                count++;\n            }\n            string = string.substr(1);\n\
    \        }\n        else{\n            break;\n        }\n    }\n    return count;",
  "    long sizeOfString = string.size();\n    long sizeOfSubString = substring.size();\n\
    \    long cnt = 0;\n    for(long i = 0; i<sizeOfString; i++){\n        if(substring[0]\
    \ == string[i]){\n            bool found = true;\n            for(long j = 0;\
    \ j<sizeOfSubString; j++){\n                if(substring[j] != string[i+j]){\n\
    \                    found = false;\n                    break;\n            \
    \    }\n            }\n            if(found)\n                cnt++;\n       \
    \ }\n    }\n    return cnt;", "    long count = 0;\n    long i = 0;\n    for(i\
    \ = 0; i < string.length(); i++) {\n        if(string[i] == substring[0]) {\n\
    \            // std::cout << i << std::endl;\n            int index = 0;\n   \
    \         while(index < substring.length() && i < string.length() && string[i]\
    \ == substring[index]) {\n                index++;\n                i++;\n   \
    \         }\n            if(index == substring.length()) {\n                count++;\n\
    \                i--;\n            }\n            else {\n                i -=\
    \ index;\n            }\n        }\n    }\n    return count;", '    return std::count(string.begin(),
    string.end(), substring);', "    // Write your code here\n    long count = 0;\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(string[i] == substring[0]){\n\
    \            if(string.substr(i, substring.length()) == substring){\n        \
    \        count += 1;\n            }\n        }\n    }\n    return count;", "\t\
    // Insert your code here\n\t//return -1;\n\tint c=0;\n\tint l=substring.length();\n\
    \tint n=string.length();\n\t//std::cout<<l<<\" \"<<n<<\"\\n\";\n\tfor(int i=0;i<n;i++)\n\
    \t{\n\t\tif(substring==string.substr(i,l))\n\t\t{\n\t\t\tc++;\n\t\t}\n\t}\n\t\
    return c;", '    return 0;', "    int found = string.find(substring);\n    std::cout\
    \ << \"Found at: \" << found << \"\\n\";\n    if (found == std::string::npos)\n\
    \        return 0;\n    else\n        return 1 + how_many_times(string.substr(found\
    \ + 1), substring);", "    long count=0;\n    size_t npos = std::string::npos;\n\
    \    size_t pos = 0;\n    while((pos = string.find(substring, pos)) != npos)\n\
    \    {\n        count++;\n        pos++;\n    }\n    return count;", '   return
    std::count(string.begin(), string.end(), substring[0]) * std::count(substring.begin(),
    substring.end(), substring[0]);', "    long count = 0;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        for (int j = 0; j < substring.length(); j++)\
    \ {\n            if (string[i] == substring[j]) {\n                bool flag =\
    \ true;\n                int a = i, b = j;\n                while (b < substring.length())\
    \ {\n                    if (string[a] != substring[b]) {\n                  \
    \      flag = false;\n                        break;\n                    }\n\
    \                    a++;\n                    b++;\n                }\n     \
    \           if (flag)\n                    count++;\n            }\n        }\n\
    \    }\n    return count;", "    if(substring.length() == 0)\n        return 0;\n\
    \    if(string.length() == 0)\n        return 0;\n    if(string.length() == 1\
    \ && substring.length() == 1 && string[0] == substring[0])\n        return 1;\n\
    \    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n      \
    \  if(string[i] == substring[0]) {\n            bool found = true;\n         \
    \   for(long j = 1; j < substring.length(); j++) {\n                if(i + j >=\
    \ string.length() || string[i + j] != substring[j]) {\n                    found\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if(found)\n                count++;\n        }\n    }\n    return count;",
  "    //                substring length:   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n \
    \   long occurences = 0;\n    // find the occurrences of the substring in the\
    \ string\n    int strSize = string.size();\n    int subStrSize = substring.size();\n\
    \    for (int i = 0; i < strSize - subStrSize + 1; i++) {\n        if (string.substr(i,\
    \ subStrSize) == substring)\n            occurences++;\n    }\n    return occurences;",
  "\tstd::string::size_type pos = 0;\n\tlong n = 0;\n\twhile ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n\t\tpos += substring.size();\n\t\tn++;\n\t}\n\
    \treturn n;", "    long long how_many = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == substring[0]) {\n            int j = 0;\n \
    \           int k = i;\n            while (string[k] == substring[j] && j < substring.size()\
    \ && k < string.size()) {\n                j++;\n                k++;\n      \
    \      }\n            if (j == substring.size()) {\n                how_many++;\n\
    \            }\n        }\n    }\n    return how_many;", "    long n = string.length();\n\
    \    long m = substring.length();\n    if (m == 0) return 0;\n    long count =\
    \ 0;\n    //std::cout << \"string= \" << string << \" \\n\";\n    //std::cout\
    \ << \"substring= \" << substring << \" \\n\";\n    for (long i = 0; i < n; ++i)\
    \ {\n        //std::cout << \"i= \" << i << \" \\n\";\n        if (string[i] ==\
    \ substring[0]) {\n            //std::cout << \" string[i]= \" << string[i] <<\
    \ \" \\n\";\n            //std::cout << \" substring[0]= \" << substring[0] <<\
    \ \" \\n\";\n            if (string.substr(i, m) == substring) {\n           \
    \     //std::cout << \" string.substr(i, m)= \" << string.substr(i, m) << \" \\\
    n\";\n                //std::cout << \" substring= \" << substring << \" \\n\"\
    ;\n                count++;\n            }\n        }\n    }\n    return count;",
  "\t//if(string.empty() || substring.empty())\n\tif(string.length() < substring.length())\n\
    \t\treturn 0;\n\tif(string.length() == substring.length())\n\t\treturn string\
    \ == substring;\n\tlong i = 0, j = 0, count = 0;\n\twhile(i < string.length()){\n\
    \t\tif(string[i] == substring[j]){\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tif(j == substring.length()){\n\
    \t\t\t\tcount++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t\t\
    j = 0;\n\t\t}\n\t}\n\treturn count;", "    std::size_t count = 0;\n    for (std::size_t\
    \ off = string.find(substring); off != std::string::npos; off = string.find(substring,\
    \ off + 1)) {\n        ++count;\n    }\n    return count;", "    long number_of_times\
    \ = 0;\n    long length_of_sub = substring.length();\n    long length_of_string\
    \ = string.length();\n    for (long i = 0; i < length_of_string; i++) {\n    \
    \    std::string temp_string = string.substr(i, length_of_sub);\n        if (temp_string\
    \ == substring) {\n            number_of_times += 1;\n        }\n    }\n    return\
    \ number_of_times;", "    long count = 0;\n    long N = string.length();\n   \
    \ long M = substring.length();\n    for (long i = 0; i <= N - M; i++) {\n    \
    \    long j;\n        for (j = 0; j < M; j++) {\n            if (string[i + j]\
    \ != substring[j]) {\n                break;\n            }\n        }\n     \
    \   if (j == M) {\n            count++;\n        }\n    }\n    return count;",
  "    long matches = 0;\n    int counter = 0;\n    for (char c : string) {\n    \
    \    if (c == substring[counter]) {\n            counter++;\n            if (counter\
    \ == substring.size()) {\n                matches++;\n                counter\
    \ = 0;\n            }\n        } else {\n            counter = 0;\n        }\n\
    \    }\n    return matches;", "    int c = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string.substr(i, substring.length()) == substring) {\n  \
    \          c++;\n        }\n    }\n    return c;", "\tint i = 0;\n\tint j = 0;\n\
    \tint count = 0;\n\twhile (i <= string.length() - substring.length()) {\n\t\t\
    j = 0;\n\t\twhile (j < substring.length() && string[i + j] == substring[j]) {\n\
    \t\t\tj++;\n\t\t}\n\t\tif (j == substring.length()) {\n\t\t\tcount++;\n\t\t\t\
    i += j;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn count;", "    int\
    \ count = 0;\n    auto pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        count++;\n        pos++;\n    }\n    return count;", "    int string_length\
    \ = string.length();\n    int substring_length = substring.length();\n    int\
    \ count = 0;\n    int i, j;\n    for (i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        int temp = i;\n        for (j = 0; j < substring_length;\
    \ j++) {\n            if (string[temp] == substring[j]) {\n                temp++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if (j == substring_length) {\n            count++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "    long ans = 0;\n\
    \    long N = string.size();\n    long M = substring.size();\n    for(long i =\
    \ 0; i < N; i++) {\n        if(i + M > N) break;\n        if(string.substr(i,\
    \ M) == substring) ans++;\n    }\n    return ans;", "\tstd::string::size_type\
    \ n = 0;\n\tlong ans = 0;\n\twhile ( ( n = string.find(substring, n) ) != std::string::npos\
    \ ) {\n\t\t++ans;\n\t\tn += substring.size();\n\t}\n\treturn ans;", "    if(substring.size()\
    \ == 0) return 0;\n    if(string.size() == 0) return 0;\n    long ctr = 0;\n \
    \   for(int i = 0; i < string.size(); i++) {\n        if(string[i] == substring[0])\
    \ {\n            bool flag = true;\n            for(int j = 0; j < substring.size();\
    \ j++) {\n                if(string[i+j] != substring[j]) {\n                \
    \    flag = false;\n                    break;\n                }\n          \
    \  }\n            if(flag) ctr++;\n        }\n    }\n    return ctr;", "    return\
    \ count(string.begin(), string.end(), substring[0]) - count(string.begin(), string.end(),\
    \ ' ');", "\t// Write your code here\n\t// To print results to the standard output\
    \ you can use std::cout\n\t// Example: std::cout << \"Hello world!\";\n\tlong\
    \ l1 = string.length();\n\tlong l2 = substring.length();\n\tlong count = 0;\n\t\
    for (long i = 0; i < l1 - l2 + 1; i++) {\n\t\tlong j;\n\t\tfor (j = 0; j < l2;\
    \ j++) {\n\t\t\tif (string[i + j] != substring[j])\n\t\t\t\tbreak;\n\t\t}\n\t\t\
    if (j == l2) {\n\t\t\tcount++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn count;", " \
    \   // replace this for solution\n    long times=0;\n    size_t found;\n    found=string.find(substring);\n\
    \    while(found!=std::string::npos){\n        times++;\n        found=string.find(substring,found+1);\n\
    \    }\n    return times;", "    long counter = 0;\n    long length = string.length();\n\
    \    long length2 = substring.length();\n    long size = length - length2;\n \
    \   for (long i = 0; i <= size; i++) {\n        if (string.substr(i, length2)\
    \ == substring)\n            counter++;\n    }\n    return counter;", "  long\
    \ count = 0;\n  int index = 0;\n  while(index < string.length()) {\n    int result\
    \ = string.find(substring, index);\n    if(result == -1) {\n      break;\n   \
    \ }\n    count++;\n    index = result + 1;\n  }\n  return count;", "    long i\
    \ = 0;\n    long j = 0;\n    long count = 0;\n    while (i < string.length())\
    \ {\n        if (string[i] == substring[j]) {\n            if (j == substring.length()\
    \ - 1) {\n                count++;\n                j = 0;\n            } else\
    \ {\n                j++;\n            }\n        } else {\n            j = 0;\n\
    \        }\n        i++;\n    }\n    return count;", "  std::string::size_type\
    \ n = string.find(substring, 0);\n  long count = 0;\n  while (n != std::string::npos)\
    \ {\n    ++count;\n    n = string.find(substring, n + 1);\n  }\n  return count;",
  "    // your code here\n    int k = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] == substring[0]){\n            for(int j = 0; j\
    \ < substring.length(); j++){\n                if(string[i + j] == substring[j]){\n\
    \                    if(j == substring.length() - 1){\n                      \
    \  k++;\n                    }\n                }\n                else{\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return k;", "\tlong count = 0;\n\tlong substring_length = substring.length();\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring_length)\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    long count=0;\n\
    \    size_t npos = -1;\n    do {\n        npos = string.find(substring, npos+1);\n\
    \        if (npos != std::string::npos) {\n            count++;\n        }\n \
    \   } while (npos != std::string::npos);\n    return count;", "  if (substring.size()\
    \ == 0) return 0;\n  long times = 0;\n  size_t pos = string.find(substring);\n\
    \  while (pos != std::string::npos) {\n    times++;\n    pos = string.find(substring,\
    \ pos + 1);\n  }\n  return times;", "    long count = 0;\n    if (substring.size()\
    \ > string.size()) {\n        return 0;\n    }\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "\t//return string.find(substring);\n\
    \n\tint count = 0;\n\n\tsize_t pos = string.find(substring);\n\twhile (pos !=\
    \ std::string::npos) {\n\t\tcount++;\n\t\tpos = string.find(substring, pos + 1);\n\
    \t}\n\n\treturn count;", "  long sum = 0;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string.substr(i, substring.length()) == substring) {\n     \
    \ sum++;\n    }\n  }\n  return sum;", '     return std::count(string.begin(),
    string.end(), substring[0])*std::count(substring.begin(), substring.end(), substring[0]);',
  "    int cnt = 0;\n    for(int i = 0; i <= string.size() - substring.size(); i++)\
    \ {\n        if(string.substr(i, substring.size()) == substring) cnt++;\n    }\n\
    \    return cnt;", "// TODO: implement how_many_times\n    long counter = 0;\n\
    \    int substring_length = substring.length();\n    int string_length = string.length();\n\
    \    for (int i = 0; i <= string_length - substring_length; i++) {\n        std::string\
    \ temp = string.substr(i, substring_length);\n        if (temp == substring) {\n\
    \            counter++;\n        }\n    }\n    return counter;", "    //printf(\"\
    String: %s \\n\", string.c_str());\n    //printf(\"Substring: %s \\n\", substring.c_str());\n\
    \    long count = 0;\n    for (long i = 0; i < string.length(); i++) {\n     \
    \   if (string[i] == substring[0]) {\n            for (long j = 0; j < substring.length();\
    \ j++) {\n                if (i + j < string.length() && string[i + j] == substring[j])\
    \ {\n                    //std::cout << \"This matched: \" << string[i+j] << std::endl;\n\
    \                    if (j == substring.length() - 1) {\n                    \
    \    count++;\n                    }\n                } else {\n             \
    \       break;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    assert(string.size() > 0);\n    long count = 0;\n    long sub_length\
    \ = substring.size();\n    long string_length = string.size();\n    // Bigger\
    \ substrings should not exist in smaller strings\n    if (sub_length > string_length)\
    \ {\n        return 0;\n    }\n    // Iterate through the string and check if\
    \ substring exists\n    for (long i = 0; i < string_length; i++) {\n        if\
    \ (string.substr(i, sub_length) == substring) {\n            count++;\n      \
    \  }\n    }\n    return count;", "  std::string::size_type n = 0;\n  long count\
    \ = 0;\n  while ( (n = string.find(substring, n)) != std::string::npos ) {\n \
    \   ++count;\n    n += substring.size();\n  }\n  return count;", "\tlong count\
    \ = 0;\n\tint str_size = string.size();\n\tint sub_size = substring.size();\n\t\
    for (int i = 0; i < str_size; i++) {\n\t\tif (string.substr(i, sub_size) == substring)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "\tint pos = string.find(substring);\n\
    \tif (pos == std::string::npos)\n\t\treturn 0;\n\telse\n\t\treturn 1 + how_many_times(string.substr(pos\
    \ + 1), substring);", "\tlong n = 0;\n\tint index = 0;\n\twhile (true) {\n\t\t\
    index = string.find(substring, index);\n\t\tif (index == -1)\n\t\t\tbreak;\n\t\
    \tn++;\n\t\tindex++;\n\t}\n\treturn n;", "  if (substring.size() == 0) {\n   \
    \ return 0;\n  }\n  if (string.size() == 0) {\n    return 0;\n  }\n  size_t found\
    \ = string.find(substring);\n  if (found == std::string::npos) {\n    return 0;\n\
    \  }\n  long count = 1;\n  count += how_many_times(string.substr(found + 1), substring);\n\
    \  return count;", "\tint count = 0;\n\tauto pos = string.find(substring);\n\t\
    while (pos != std::string::npos) {\n\t\tcount++;\n\t\tpos = string.find(substring,\
    \ pos + 1);\n\t}\n\treturn count;", "    std::vector<int> v;\n    for(int i =\
    \ 0; i < string.size(); i++) {\n        if(string[i] == substring[0]) {\n    \
    \        bool match = true;\n            for(int j = 0; j < substring.size();\
    \ j++) {\n                if(string[i+j] != substring[j]) {\n                \
    \    match = false;\n                    break;\n                }\n         \
    \   }\n            if(match) v.push_back(i);\n        }\n    }\n    return v.size();",
  '    return (std::count(string.begin(), string.end(), substring[0]));', "    long\
    \ times = 0;\n    int size_of_string = string.size();\n    int size_of_substring\
    \ = substring.size();\n    for (int i = 0; i < size_of_string; i++) {\n      \
    \  std::string current_substring = string.substr(i, size_of_substring);\n    \
    \    if (current_substring == substring) {\n            times += 1;\n        }\n\
    \    }\n    return times;", "    std::regex expr{substring};\n    long count =\
    \ std::distance(std::sregex_iterator(string.begin(), string.end(), expr), std::sregex_iterator());\n\
    \    return count;", "\tint pos = string.find(substring);\n\tlong count = 0;\n\
    \tif (pos == std::string::npos) {\n\t\treturn count;\n\t} else {\n\t\tcount++;\n\
    \t\tstring = string.substr(pos + 1);\n\t\treturn count + how_many_times(string,\
    \ substring);\n\t}", "    // Write your code here.\n    size_t n = string.length();\n\
    \    size_t m = substring.length();\n    long count = 0;\n    for (int i = 0;\
    \ i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n    \
    \        if (string[i + j] != substring[j]) {\n                break;\n      \
    \      }\n        }\n        if (j == m) {\n            count++;\n        }\n\
    \    }\n    return count;", "    long total = 0;\n    int n = string.length();\n\
    \    int m = substring.length();\n    for (int i = 0; i <= n - m; i++) {\n   \
    \     int j;\n        for (j = 0; j < m; j++) {\n            if (string[i + j]\
    \ != substring[j]) {\n                break;\n            }\n        }\n     \
    \   if (j == m) {\n            total++;\n        }\n    }\n    return total;",
  "    long n = string.length();\n    long m = substring.length();\n    long counter\
    \ = 0;\n    for (long i = 0; i <= n - m; i++) {\n        bool is_it = true;\n\
    \        for (long j = 0; j < m; j++) {\n            if (string[i + j] != substring[j])\
    \ {\n                is_it = false;\n                break;\n            }\n \
    \       }\n        if (is_it) {\n            counter++;\n        }\n    }\n  \
    \  return counter;", "\tif (substring.length() == 0) return 0;\n\tint index =\
    \ string.find(substring);\n\tint count = 0;\n\twhile (index != std::string::npos)\
    \ {\n\t\tcount++;\n\t\tindex = string.find(substring, index + 1);\n\t}\n\treturn\
    \ count;", "  // start = 0;\n  // end = string.size() - substring.size();\n  //\
    \ counter = 0;\n  // for (int i = start; i <= end; i++) {\n  //   if (string.substr(i,\
    \ substring.size()) == substring) {\n  //     counter += 1;\n  //   }\n  // }\n\
    \  // return counter;\n  long total = 0;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    for (int j = 0; j < substring.size(); j++) {\n      if (string[i\
    \ + j] != substring[j]) {\n        break;\n      }\n      if (j == substring.size()\
    \ - 1) {\n        total += 1;\n      }\n    }\n  }\n  return total;", "    //\
    \ write the body of your function here\n    long n = string.length();\n    long\
    \ m = substring.length();\n    long count = 0;\n    for (long i = 0; i <= n -\
    \ m; i++) {\n        long j;\n        for (j = 0; j < m; j++)\n            if\
    \ (string[i + j] != substring[j])\n                break;\n        if (j == m)\
    \ {\n            count++;\n            j = 0;\n        }\n    }\n    return count;",
  "    std::string::size_type n = 0;\n    long count = 0;\n    while ( ( n = string.find(substring,\
    \ n) ) != std::string::npos )\n    {\n        ++count;\n        n += substring.size();\n\
    \    }\n    return count;", "    long cnt = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         cnt++;\n        }\n    }\n    return cnt;", "  long count = 0;\n  long\
    \ string_length = string.length();\n  long substring_length = substring.length();\n\
    \  for (long i = 0; i < string_length; i++) {\n    bool match = true;\n    for\
    \ (long j = 0; j < substring_length; j++) {\n      if (string[i + j] != substring[j])\
    \ {\n        match = false;\n        break;\n      }\n    }\n    if (match) {\n\
    \      count++;\n    }\n  }\n  return count;", "\tif (substring.length() == 0)\
    \ return 0;\n\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tint j = 0;\n\t\twhile (j < substring.length() && substring[j] == string[i\
    \ + j]) j++;\n\t\tif (j == substring.length()) count++;\n\t}\n\treturn count;",
  "  long long n = (long long)string.size();\n  long long m = (long long)substring.size();\n\
    \  long long res = 0;\n  for (long long i = 0; i < n; i++) {\n    for (long long\
    \ j = 0; j < m; j++) {\n      if (string[i+j] != substring[j]) {\n        break;\n\
    \      }\n      if (j == m-1) {\n        res++;\n      }\n    }\n  }\n  return\
    \ res;", "\tif (substring.size() == 0) return 0;\n\tlong num = 0;\n\tfor (int\
    \ i = 0; i < string.size(); i++) {\n\t\tif (string[i] == substring[0]) {\n\t\t\
    \tbool flag = 1;\n\t\t\tfor (int j = 0; j < substring.size(); j++) {\n\t\t\t\t\
    if (string[i + j] != substring[j]) {\n\t\t\t\t\tflag = 0;\n\t\t\t\t\tbreak;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tnum++;\n\t\t\t\ti += substring.size()\
    \ - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn num;", "    long sub_string_length = substring.length();\n\
    \    long string_length = string.length();\n    long count = 0;\n    long i;\n\
    \    for (i = 0; i < string_length - sub_string_length + 1; i++) {\n        if\
    \ (string.substr(i, sub_string_length) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "\treturn std::count(string.begin(), string.end(),\
    \ substring.front()) - std::count(string.begin(), string.end(), substring.back());",
  "    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        std::string\
    \ temp = string.substr(i, substring.length());\n        if (temp == substring)\n\
    \            count++;\n    }\n    return count;", "\tlong count=0;\n\tint i,j;\n\
    \tfor(i=0; i<string.length(); i++)\n\t{\n\t\tfor(j=0; j<substring.length(); j++)\n\
    \t\t{\n\t\t\tif(string[i+j]!=substring[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif(j==substring.length())\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;", "    long result = 0;\n    std::size_t pos = 0;\n    while((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        result += 1;\n        pos += 1;\n   \
    \ }\n    return result;", "    long c = 0;\n    for (long i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         c++;\n        }\n    }\n    return c;", "    long count=0;\n    long\
    \ flag=0;\n    for(long i=0;i<string.length();i++)\n    {\n        flag=0;\n \
    \       for(long j=0;j<substring.length();j++)\n        {\n            if(string[i+j]!=substring[j])\n\
    \            {\n                flag=1;\n                break;\n            }\n\
    \        }\n        if(flag==0)\n        {\n            count++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    std::size_t found = string.find(substring);\n\
    \    while (found != std::string::npos) {\n        ++count;\n        found = string.find(substring,\
    \ found + 1);\n    }\n    return count;", "  // your code here\n  long count =\
    \ 0;\n  long length = substring.length();\n  for(int i = 0; i < string.length();\
    \ i++){\n    if(substring[0] == string[i]){\n      int j = 0;\n      while(substring[j]\
    \ == string[i + j]){\n        j++;\n        if(j == length){\n          count++;\n\
    \          break;\n        }\n      }\n    }\n  }\n  return count;", "    // Implement\
    \ the function here\n    long i=0,j=0,count=0;\n    while(i<string.length()){\n\
    \        if(string[i]==substring[j]){\n            i++;\n            j++;\n  \
    \      }\n        else{\n            i++;\n            j=0;\n        }\n     \
    \   if(j==substring.length()){\n            count++;\n            j=0;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    int size = substring.size();\n\
    \    if (size > string.size()) {\n        return 0;\n    }\n    for (int i = 0;\
    \ i < string.size(); i++) {\n        if (string.substr(i, size) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long occurrences\
    \ = 0;\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            ++occurrences;\n        }\n \
    \   }\n    return occurrences;", "    std::string::size_type n = 0;\n    std::string::size_type\
    \ pos = 0;\n    long cnt = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++cnt;\n        pos += substring.size();\n\
    \    }\n    return cnt;", "    int n = string.length();\n    int m = substring.length();\n\
    \    int dp[n+1][m+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=m;j++)\n\
    \        {\n            if(i==0 || j==0)\n            {\n                dp[i][j]\
    \ = 0;\n            }\n            else if(string[i-1] == substring[j-1])\n  \
    \          {\n                dp[i][j] = 1 + dp[i-1][j-1];\n            }\n  \
    \          else\n            {\n                dp[i][j] = 0;\n            }\n\
    \        }\n    }\n    int ans = 0;\n    for(int i=0;i<=n;i++)\n    {\n      \
    \  for(int j=0;j<=m;j++)\n        {\n            if(dp[i][j] == m)\n         \
    \   {\n                ans++;\n            }\n        }\n    }\n    return ans;",
  "    long count = 0;\n    for (long i = 0; i < string.length(); i++) {\n       \
    \ for (long j = 0; j < substring.length(); j++) {\n            if (string[i +\
    \ j] != substring[j]) {\n                break;\n            }\n            if\
    \ (j == substring.length() - 1) {\n                count++;\n            }\n \
    \       }\n    }\n    return count;", "    if(substring.length() == 0)\n     \
    \   return 0;\n    else if(string.length() == 0)\n        return 0;\n    else{\n\
    \        std::string str = \"\";\n        long count = 0;\n        for(auto it\
    \ : string){\n            str += it;\n            if(str.length() == substring.length()){\n\
    \                if(str == substring)\n                    count++;\n        \
    \        str.erase(str.begin());\n            }\n        }\n        return count;\n\
    \    }", "    int result = 0;\n    int pos = 0;\n    while (pos != -1) {\n   \
    \     pos = string.find(substring, pos);\n        if (pos != -1) {\n         \
    \   result++;\n            pos++;\n        }\n    }\n    return result;", "  \
    \  assert(string.length() > 0 && substring.length() > 0);\n    assert(string.length()\
    \ > substring.length());\n    std::string::size_type str_size = string.length();\n\
    \    std::string::size_type sub_size = substring.length();\n    long cnt = 0;\n\
    \    for (int i = 0; i < str_size; i++) {\n        if (string.substr(i, sub_size)\
    \ == substring) {\n            cnt++;\n        }\n    }\n    return cnt;", " \
    \   long count = 0;\n    // your code goes here\n    for(int i = 0; i <= string.length()\
    \ - substring.length(); i++) {\n        string sub(string, i, substring.length());\n\
    \        if(sub == substring)\n            count++;\n    }\n    return count;",
  "    std::size_t pos = 0;\n    long result = 0;\n    do {\n        pos = string.find(substring,\
    \ pos);\n        if (pos != std::string::npos) {\n            result++;\n    \
    \        pos += substring.length();\n        }\n    } while (pos != std::string::npos);\n\
    \    return result;", "\tlong counter = 0;\n\tif (string.size() == 0) {\n\t\t\
    return 0;\n\t}\n\twhile (string.find(substring) != std::string::npos) {\n\t\t\
    string.erase(string.find(substring), substring.size());\n\t\tcounter++;\n\t}\n\
    \treturn counter;", "    long count = 0;\n    if (substring.size() > string.size())\n\
    \        return 0;\n    for (int i = 0; i < string.size(); i++) {\n        if\
    \ (string.substr(i, substring.size()) == substring)\n            count++;\n  \
    \  }\n    return count;", "    long sum = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           sum += 1;\n        }\n    }\n    return sum;", "    long occurrences\
    \ = 0;\n    int substring_size = substring.size();\n    int string_size = string.size();\n\
    \    if (substring_size > string_size) {\n        return 0;\n    }\n    for (int\
    \ i = 0; i < string_size; i++) {\n        if (string[i] == substring[0]) {\n \
    \           if (string_size - i < substring_size) {\n                break;\n\
    \            }\n            for (int j = 0; j < substring_size; j++) {\n     \
    \           if (string[i + j] != substring[j]) {\n                    break;\n\
    \                }\n                if (j == substring_size - 1) {\n         \
    \           occurrences++;\n                }\n            }\n        }\n    }\n\
    \    return occurrences;", "    // your code here\n    int count = 0;\n    long\
    \ string_length = string.length();\n    long substring_length = substring.length();\n\
    \    for(int i = 0; i < string_length; i++)\n    {\n        if(string.substr(i,\
    \ substring_length) == substring)\n        {\n            count++;\n        }\n\
    \    }\n    return count;", "    long times = 0;\n    if (substring.length() ==\
    \ 0) {\n        return times;\n    }\n    long pos = string.find(substring);\n\
    \    while (pos != std::string::npos) {\n        times++;\n        pos = string.find(substring,\
    \ pos + 1);\n    }\n    return times;", "    int count = 0;\n    int m = substring.length();\n\
    \    int n = string.length();\n    int i, j;\n    for (i = 0; i <= n - m; i++)\
    \ {\n        j = 0;\n        while (j < m && substring[j] == string[i + j])\n\
    \            j++;\n        if (j == m) {\n            count++;\n        }\n  \
    \  }\n    return count;", "\tlong count = 0;\n\tsize_t nPos = string.find(substring,\
    \ 0); // first occurrence\n\twhile (nPos != std::string::npos)\n\t{\n\t\tcount++;\n\
    \t\tnPos = string.find(substring, nPos + 1);\n\t}\n\treturn count;", "    // your\
    \ code here\n    long count = 0;\n    string::size_type n = substring.length();\n\
    \    for (string::size_type i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ n) == substring)\n            count++;\n    }\n    return count;", "    long\
    \ contador = 0;\n    int size_string = string.size();\n    int size_substring\
    \ = substring.size();\n    for(int i = 0; i < size_string; i++){\n        int\
    \ j = 0;\n        while(j < size_substring && string[i+j] == substring[j]){\n\
    \            j++;\n        }\n        if(j == size_substring){\n            contador++;\n\
    \        }\n    }\n    return contador;", "  long count = 0;\n  for (long i =\
    \ 0; i < string.size(); i++) {\n    for (long j = 0; j < substring.size(); j++)\
    \ {\n      if (string[i + j] != substring[j]) {\n        break;\n      }\n   \
    \   if (j == substring.size() - 1) {\n        count++;\n      }\n    }\n  }\n\
    \  return count;", "\t// Replace pass with your implementation\n\tint count =\
    \ 0;\n\tint len1 = string.length();\n\tint len2 = substring.length();\n\tint len\
    \ = len1 - len2;\n\tint i, j;\n\tfor (i = 0; i <= len; i++) {\n\t\tint k = i;\n\
    \t\tfor (j = 0; j < len2; j++) {\n\t\t\tif (string[k] != substring[j])\n\t\t\t\
    \tbreak;\n\t\t\tk++;\n\t\t}\n\t\tif (j == len2) {\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;", "    // your code here\n    std::string::size_type n = 0;\n\
    \    int c = 0;\n    while ( ( n = string.find(substring, n) ) != std::string::npos\
    \ )\n    {\n        ++c;\n        n += substring.size();\n    }\n    return c;",
  "    std::size_t n = string.find(substring);\n    long i = 0;\n    while(n != std::string::npos)\
    \ {\n        n = string.find(substring, n+1);\n        i++;\n    }\n    return\
    \ i;", "    std::string::size_type n = 0;\n    long count = 0;\n    while ( (\
    \ n = string.find(substring, n) ) != std::string::npos )\n    {\n       ++count;\n\
    \       n += substring.size();\n    }\n    return count;", "    long count = 0;\n\
    \    long subLen = substring.length();\n    long strLen = string.length();\n \
    \   // cout << strLen << endl;\n    if (strLen == 0 || subLen == 0) {\n      \
    \  return 0;\n    }\n    for (long i = 0; i < strLen; i++) {\n        long j =\
    \ 0;\n        while (j < subLen && string[i+j] == substring[j]) {\n          \
    \  j++;\n        }\n        if (j == subLen) {\n            count++;\n       \
    \ }\n    }\n    return count;", "    int n = string.length();\n    int m = substring.length();\n\
    \    int count = 0;\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n\
    \        for (j = 0; j < m; j++) {\n            if (string[i + j] != substring[j])\n\
    \                break;\n        }\n        if (j == m) {\n            count++;\n\
    \            j = 0;\n        }\n    }\n    return count;", "    int count = 0;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        for (int j = 0; j <\
    \ substring.length(); j++) {\n            if (string[i + j] != substring[j]) {\n\
    \                break;\n            }\n            if (j == substring.length()\
    \ - 1) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    std::regex rgx(substring);\n    std::smatch match;\n    int count\
    \ = 0;\n    std::sregex_iterator iter(string.begin(), string.end(), rgx);\n  \
    \  std::sregex_iterator end;\n    for (; iter != end; ++iter) {\n        ++count;\n\
    \    }\n    return count;"]
stop_tokens:
- "\n}"
