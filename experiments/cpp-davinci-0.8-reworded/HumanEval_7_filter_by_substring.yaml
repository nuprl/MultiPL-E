name: HumanEval_7_filter_by_substring
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of\
  \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
  \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
  abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"\
  a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\"\
  , (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
  \ strings, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
  xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
  , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
  trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"\
  grunt\", (std::string)\"prune\"})));\n}\n"
completions: ["    std::vector<std::string> new_vector;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        std::string current_string = strings[i];\n        bool contains_substring\
    \ = false;\n        for (int j = 0; j < current_string.size(); j++) {\n      \
    \      std::string current_part = current_string.substr(j, substring.size());\n\
    \            if (current_part == substring) {\n                contains_substring\
    \ = true;\n                break;\n            }\n        }\n        if (contains_substring)\
    \ {\n            new_vector.push_back(current_string);\n        }\n    }\n   \
    \ return new_vector;", "    std::vector<std::string> filtered;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(filtered), [&substring](std::string const&\
    \ elem) { return elem.find(substring) != std::string::npos; });\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> ret;\n\
    \    std::string s = \"\";\n    for (int i = 0; i < strings.size(); i++) {\n \
    \       s = strings[i];\n        if (s.find(substring) != std::string::npos) {\n\
    \            ret.push_back(s);\n        }\n    }\n    return ret;", "    std::vector<std::string>::iterator\
    \ iterator;\n    for (iterator = strings.begin(); iterator != strings.end(); ++iterator)\
    \ {\n        if (iterator->find(substring) == std::string::npos) {\n         \
    \   strings.erase(iterator);\n            iterator--;\n        }\n    }\n    return\
    \ strings;", "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator\
    \ it2;\n    it2 = std::find(strings.begin(), strings.end(), substring);\n    while\
    \ (it2 != strings.end()) {\n        strings.erase(it2);\n        it2 = std::find(strings.begin(),\
    \ strings.end(), substring);\n    }\n    return strings;", "    // YOUR CODE HERE\n\
    \    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> ret;\n \
    \   for (auto i : strings) {\n        if (i.find(substring) != std::string::npos)\
    \ {\n            ret.push_back(i);\n        }\n    }\n    return ret;", "\tstd::vector<std::string>::iterator\
    \ it = strings.begin();\n\twhile (it != strings.end()) {\n\t\tif (it->find(substring)\
    \ == std::string::npos) {\n\t\t\tit = strings.erase(it);\n\t\t}\n\t\telse {\n\t\
    \t\t++it;\n\t\t}\n\t}\n\treturn strings;", "  std::vector<std::string> filtered_strings;\n\
    \  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      filtered_strings.push_back(s);\n    }\n  }\n  return filtered_strings;",
  "    std::vector<std::string> res;\n    for (std::string s : strings) {\n      \
    \  if (s.find(substring) != std::string::npos) {\n            res.push_back(s);\n\
    \        }\n    }\n    return res;", "  std::vector<std::string> result;\n  for\
    \ (auto &&s : strings) {\n    if (s.find(substring) != std::string::npos) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ ret;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            ret.push_back(s);\n        }\n    }\n    return ret;", "    /*your\
    \ code here*/\n    std::vector<std::string> result;\n    for(int i=0;i<strings.size();i++){\n\
    \        if(strings[i].find(substring)!=std::string::npos){\n            result.push_back(strings[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> res;\n \
    \   for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            res.push_back(str);\n        }\n    }\n    return res;", "\t\
    std::vector<std::string> output;\n\tfor (std::string str : strings) {\n\t\tif\
    \ (str.find(substring) != std::string::npos) {\n\t\t\toutput.push_back(str);\n\
    \t\t}\n\t}\n\treturn output;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto i = strings.begin(); i != strings.end();\
    \ i++) {\n        if (i->find(substring) != std::string::npos) {\n           \
    \ result.push_back(*i);\n        }\n    }\n    return result;", "    std::vector<std::string>::iterator\
    \ it = strings.begin();\n    while (it != strings.end()) {\n        if (it->find(substring)\
    \ == std::string::npos) {\n            it = strings.erase(it);\n        } else\
    \ {\n            ++it;\n        }\n    }\n    return strings;", "  std::vector<std::string>\
    \ res;\n  for (auto s : strings) {\n    //std::cout << s << std::endl;\n    if\
    \ (s.find(substring) != std::string::npos) {\n      res.push_back(s);\n    }\n\
    \  }\n  return res;", "    std::vector<std::string> filtered_strings = std::vector<std::string>();\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;", "\tstd::vector<std::string>\
    \ result;\n\tfor (auto s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ strings_filtered;\n    for (int i = 0; i < strings.size(); i++) {\n        if\
    \ (strings[i].find(substring) != std::string::npos) {\n            strings_filtered.push_back(strings[i]);\n\
    \        }\n    }\n    return strings_filtered;", "    std::vector<std::string>\
    \ result = {};\n    for (auto string : strings) {\n        bool contains = false;\n\
    \        for (int i = 0; i < string.size(); i++) {\n            bool matched =\
    \ true;\n            for (int j = 0; j < substring.size(); j++) {\n          \
    \      if (string[i + j] != substring[j]) {\n                    matched = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (matched) {\n                contains = true;\n                break;\n    \
    \        }\n        }\n        if (contains) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> filtered;\n\
    \tfor (auto &it : strings) {\n\t\tif (it.find(substring) != std::string::npos)\
    \ {\n\t\t\tfiltered.push_back(it);\n\t\t}\n\t}\n\treturn filtered;", "    std::vector<std::string>\
    \ ret;\n    std::string temp;\n    for(int i = 0; i < strings.size(); i++) {\n\
    \        temp = strings[i];\n        if(temp.find(substring) != std::string::npos)\
    \ {\n            ret.push_back(temp);\n        }\n    }\n    return ret;", " \
    \   std::vector<std::string> ans;\n    for (auto elem : strings) {\n        if\
    \ (elem.find(substring) != std::string::npos) {\n            ans.push_back(elem);\n\
    \        }\n    }\n    return ans;", "\tstd::vector<std::string> result;\n\tfor\
    \ (std::string s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;", "  std::vector<std::string>\
    \ filtered;\n  for (auto s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      filtered.push_back(s);\n    }\n  }\n  return filtered;", "    std::vector<std::string>\
    \ result;\n    for (std::string string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) !=\
    \ std::string::npos) {\n            result.push_back(strings[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    //\
    \ your code here\n    std::vector<std::string>ret;\n    for(int i=0;i<strings.size();i++){\n\
    \        if(strings[i].find(substring)!=std::string::npos){\n            ret.push_back(strings[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<std::string> result;\n \
    \   std::vector<std::string>::iterator it;\n    for (it = strings.begin(); it\
    \ != strings.end(); it++) {\n        std::string string = *it;\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) !=\
    \ std::string::npos) {\n            result.push_back(strings[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> res;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        res.push_back(s);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string str : strings) {\n        if (str.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(str);\n        }\n \
    \   }\n    return filtered;", "    std::vector<std::string> r;\n    for (auto\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         r.push_back(s);\n        }\n    }\n    return r;", "    std::vector<std::string>\
    \ result;\n    int strings_size = strings.size();\n    for (int i = 0; i < strings_size;\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> res;\n    for (const auto& s : strings) {\n      \
    \  if (s.find(substring) != std::string::npos)\n            res.push_back(s);\n\
    \    }\n    return res;", "    std::vector<std::string> ans;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        ans.push_back(s);\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (auto str\
    \ : strings) {\n        if (str.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(str);\n        }\n    }\n    return filtered;", " \
    \   std::vector<std::string> res;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    res.push_back(strings[i]);\n        }\n    }\n    return res;", "  std::vector<std::string>\
    \ new_strings;\n  for (std::string string : strings) {\n    if (string.find(substring)\
    \ != std::string::npos) {\n      new_strings.push_back(string);\n    }\n  }\n\
    \  return new_strings;", "\t// Implement filter_by_substring here.\n\tstd::vector<std::string>\
    \ result;\n\tfor(int i=0;i<strings.size();i++){\n\t\tif(strings[i].find(substring)!=string::npos){\n\
    \t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;", "  // Your\
    \ implementation goes here\n  // Please replace this comment with your implementation\n\
    \  std::vector<std::string> v;\n  for(int i=0;i<strings.size();i++)\n  {\n   \
    \   if(strings[i].find(substring)!=std::string::npos)\n        v.push_back(strings[i]);\n\
    \  }\n  return v;", "    std::vector<std::string> new_vect;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos)\n      \
    \      new_vect.push_back(s);\n    }\n    return new_vect;", "  std::vector<std::string>\
    \ filtered_strings;\n  for (std::string s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      filtered_strings.push_back(s);\n    }\n  }\n\
    \  return filtered_strings;", "    std::vector<std::string> res;\n    for (auto\
    \ i : strings) {\n        if (i.find(substring) != std::string::npos) {\n    \
    \        res.push_back(i);\n        }\n    }\n    return res;", "  std::vector<std::string>\
    \ filtered_vector;\n  for (auto it = strings.begin(); it != strings.end(); ++it)\
    \ {\n    std::string s = *it;\n    if (s.find(substring) != std::string::npos)\
    \ {\n      filtered_vector.push_back(s);\n    }\n  }\n  return filtered_vector;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> filtered_strings;\n\
    \tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring)\
    \ != std::string::npos) {\n\t\t\tfiltered_strings.push_back(strings[i]);\n\t\t\
    }\n\t}\n\treturn filtered_strings;", "    std::vector<std::string> result;\n \
    \   for (int i = 0; i < strings.size(); i++) {\n        std::string cur_string\
    \ = strings[i];\n        if (cur_string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(cur_string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto str : strings) {\n        size_t\
    \ found = str.find(substring);\n        if (found != std::string::npos) {\n  \
    \          result.push_back(str);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> result;\n\t\
    for (std::string s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;", "  std::vector<std::string>::iterator\
    \ it = strings.begin();\n  std::vector<std::string>::iterator end = strings.end();\n\
    \  for (; it != end; ++it) {\n    if (it->find(substring) == std::string::npos)\
    \ {\n      it = strings.erase(it);\n      --it;\n      --end;\n    }\n  }\n  return\
    \ strings;", "    // filter a vector of strings for only ones containing substring\n\
    \    auto predicate = [&substring](std::string string) {\n        return string.find(substring)\
    \ != std::string::npos;\n    };\n    strings.erase(std::remove_if(strings.begin(),\
    \ strings.end(), predicate), strings.end());\n    return strings;", "    std::vector<std::string>\
    \ result;\n    for (auto str : strings) {\n        if (str.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(str);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string>::iterator it;\n    for (it\
    \ = strings.begin(); it != strings.end();) {\n        if (it->find(substring)\
    \ == std::string::npos) {\n            it = strings.erase(it);\n        } else\
    \ {\n            ++it;\n        }\n    }\n    return strings;", "    std::vector<std::string>\
    \ res;\n    // your code here\n    return res;", "\treturn filter(strings, [&](std::string\
    \ s) {\n\t\treturn s.find(substring) != std::string::npos;\n\t});", "    std::vector<std::string>\
    \ ans;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            ans.push_back(strings[i]);\n        }\n\
    \    }\n    return ans;", "    std::vector<std::string> vec;\n    int len = strings.size();\n\
    \    for(int i = 0; i < len; i++) {\n        std::string s = strings[i];\n   \
    \     if(s.find(substring) != std::string::npos) {\n            vec.push_back(s);\n\
    \        }\n    }\n    return vec;", "    std::vector<std::string> filtered;\n\
    \    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(str);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (auto iter = strings.begin();\
    \ iter != strings.end(); iter++) {\n        if (iter->find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(*iter);\n        }\n    }\n    return\
    \ filtered_strings;", "\tstd::vector<std::string> filtered;\n\tfor (int i = 0;\
    \ i < strings.size(); i++) {\n\t\tif (strings[i].find(substring) != std::string::npos)\
    \ {\n\t\t\tfiltered.push_back(strings[i]);\n\t\t}\n\t}\n\treturn filtered;", " \
    \ std::vector<std::string> ret;\n  for (auto s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      ret.push_back(s);\n    }\n  }\n  return ret;",
  "    std::vector<std::string> res;\n    for (auto s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            res.push_back(s);\n        }\n    }\n \
    \   return res;", "    std::vector<std::string> result;\n    for (auto elem :\
    \ strings) {\n        if (elem.find(substring) != std::string::npos) {\n     \
    \       result.push_back(elem);\n        }\n    }\n    return result;", "\tstd::vector<std::string>\
    \  filtered_strings;\n    for (std::string  i : strings) {\n        if (i.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(i);\n      \
    \  }\n    }\n    return filtered_strings;", "std::vector<std::string> res;\nstd::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(res), [&](const std::string& x) { return x.find(substring)\
    \ != std::string::npos; });\nreturn res;", "    std::vector<std::string> result;\n\
    \    for (auto str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> res;\n    for (std::string str : strings) {\n    \
    \    if (str.find(substring) != std::string::npos) {\n            res.push_back(str);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> ans;\n    for\
    \ (std::string s : strings) {\n        int found = s.find(substring);\n      \
    \  if (found != std::string::npos) {\n            ans.push_back(s);\n        }\n\
    \    }\n    return ans;", "\tstd::vector<std::string> result;\n\tfor (auto &str\
    \ : strings) {\n\t\tif (str.find(substring) != std::string::npos) {\n\t\t\tresult.push_back(str);\n\
    \t\t}\n\t}\n\treturn result;", "   std::vector<std::string> result;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=std::string::npos){\n\
    \            result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    /* Implementation here */\n    std::vector<std::string> result;\n    for (const\
    \ auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> ret;\n    for (std::string s : strings) {\n      \
    \  if (s.find(substring) != std::string::npos) {\n            ret.push_back(s);\n\
    \        }\n    }\n    return ret;", "    std::vector<std::string> result;\n \
    \   std::copy_if(strings.begin(), strings.end(), std::back_inserter(result), [&substring](std::string\
    \ s) {\n        return (s.find(substring) != std::string::npos);\n    });\n  \
    \  return result;", "    std::vector<std::string> v;\n    for (auto i = strings.begin();\
    \ i != strings.end(); i++) {\n        if ((*i).find(substring) != std::string::npos)\
    \ {\n            v.push_back(*i);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> res;\n  for (auto& str : strings) {\n    if (str.find(substring)\
    \ != std::string::npos) {\n      res.push_back(str);\n    }\n  }\n  return res;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> output;\n\
    \    for (auto const& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            output.push_back(str);\n        }\n    }\n    return output;",
  "\tint i = 0;\n\tstd::vector<std::string> result;\n\tfor (i=0; i<strings.size();\
    \ i++) {\n\t\tif (strings[i].find(substring) != std::string::npos) {\n\t\t\tresult.push_back(strings[i]);\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (auto string: strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(string);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> to_return;\n    for (int i\
    \ = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            to_return.push_back(strings[i]);\n        }\n    }\n    return\
    \ to_return;", "\tstd::vector<std::string>::iterator it;\n\tfor (it = strings.begin();\
    \ it != strings.end(); it++) {\n\t\tif (it->find(substring) == std::string::npos)\
    \ {\n\t\t\tstrings.erase(it);\n\t\t\tit--;\n\t\t}\n\t}\n\treturn strings;", " \
    \   /* Implement this function */\n    vector<string> res;\n    for(string s:\
    \ strings){\n        if(s.find(substring) != string::npos){\n            res.push_back(s);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> result;\n \
    \   for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    std::copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(filtered), [&substring](std::string str) { return str.find(substring)\
    \ != std::string::npos; });\n    return filtered;", "    std::vector<std::string>\
    \ res;\n    std::string str;\n    for (int i = 0; i < strings.size(); i++) {\n\
    \        str = strings[i];\n        if (str.find(substring) != std::string::npos)\n\
    \            res.push_back(str);\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "\t// Add your code here\n\t// Please copy/paste\
    \ the following code to begin\n\tstd::vector<std::string> v;\n\tfor(int i=0;i<strings.size();i++)\n\
    \t{\n\t\tint l=substring.length();\n\t\tint l2=strings[i].length();\n\t\tint flag=0;\n\
    \t\tfor(int j=0;j<l2;j++)\n\t\t{\n\t\t\tfor(int k=0;k<l;k++)\n\t\t\t{\n\t\t\t\t\
    if(strings[i][j+k]!=substring[k])\n\t\t\t\t{\n\t\t\t\t\tflag=1;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif(flag==0)\n\t\t\t{\n\t\t\t\tv.push_back(strings[i]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn v;", "  auto filtered_strings =\
    \ std::vector<std::string>();\n  for (auto const & string : strings) {\n    if\
    \ (string.find(substring) != std::string::npos) {\n      filtered_strings.push_back(string);\n\
    \    }\n  }\n  return filtered_strings;", "    std::vector<std::string> ret;\n\
    \    std::copy_if(strings.begin(), strings.end(), std::back_inserter(ret), [&substring](std::string\
    \ const& string) {\n        return string.find(substring) != std::string::npos;\n\
    \    });\n    return ret;", "    std::vector<std::string> result = {};\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i\
    \ < strings.size(); i++) {\n        s = strings[i];\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> ans;\n    for (int index =\
    \ 0; index < strings.size(); index++) {\n        std::string target = strings[index];\n\
    \        bool has_substring = false;\n        for (int i = 0; i < target.size();\
    \ i++) {\n            if (i + substring.size() <= target.size()) {\n         \
    \       std::string candidate = target.substr(i, substring.size());\n        \
    \        if (candidate == substring) {\n                    has_substring = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (has_substring) {\n            ans.push_back(target);\n        }\n  \
    \  }\n    return ans;", "  std::vector<std::string> result;\n  int n = strings.size();\n\
    \  for (int i = 0; i < n; i++) {\n    if (strings[i].find(substring) != std::string::npos)\
    \ {\n      result.push_back(strings[i]);\n    }\n  }\n  return result;", "  std::vector<std::string>\
    \ result;\n  for (auto string : strings) {\n    if (string.find(substring) !=\
    \ std::string::npos) {\n      result.push_back(string);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> filtered;\n    // For every string in\
    \ the input vector of strings\n    for (int i = 0; i < strings.size(); i++) {\n\
    \        // If the current string contains the substring,\n        // add it to\
    \ the vector to be returned\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered;", "    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&substring](const std::string& str)\
    \ {\n        return str.find(substring) != std::string::npos;\n    });\n    return\
    \ result;", "    std::vector<std::string> output;\n    for (auto str : strings)\
    \ {\n        if (str.find(substring) != std::string::npos) {\n            output.push_back(str);\n\
    \        }\n    }\n    return output;", "    std::vector<std::string> result;\n\
    \    std::copy_if(strings.begin(), strings.end(), std::back_inserter(result),\
    \ [&substring](std::string s) {\n        return s.find(substring) != std::string::npos;\n\
    \    });\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (std::string string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    // Add your code here\n    int l = strings.size();\n    std::vector<std::string>\
    \ ret;\n    for(int i=0;i<l;i++){\n        int x = strings[i].find(substring);\n\
    \        if(x != -1){\n            ret.push_back(strings[i]);\n        }\n   \
    \ }\n    return ret;", "    /* Implementation */\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> filtered;\n   \
    \ for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    // Your implementation here\n    std::vector<std::string> result;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=std::string::npos){\n\
    \            result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> strings_out;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         strings_out.push_back(strings[i]);\n        }\n    }\n    return strings_out;",
  "    std::vector<std::string> filtered;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         filtered.push_back(strings[i]);\n        }\n    }\n    return filtered;",
  "    // your code here\n    std::vector<std::string> empty;\n    for(auto i : strings){\n\
    \        if(i.find(substring) != -1){\n            empty.push_back(i);\n     \
    \   }\n    }\n    return empty;", "    std::vector<std::string> ret;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            ret.push_back(s);\n        }\n    }\n    return ret;", "    std::vector<std::string>::iterator\
    \ it = strings.begin();\n    for (; it != strings.end(); ++it) {\n        if (it->find(substring)\
    \ == std::string::npos) {\n            strings.erase(it);\n            it--;\n\
    \        }\n    }\n    return strings;", "  std::vector<std::string> result;\n\
    \  for (int index=0; index<strings.size(); index++) {\n    auto current_string\
    \ = strings[index];\n    if (current_string.find(substring) != std::string::npos)\
    \ {\n      result.push_back(current_string);\n    }\n  }\n  return result;", " \
    \ std::vector<std::string> output;\n  for (int i = 0; i < strings.size(); i++)\
    \ {\n    std::string to_check = strings[i];\n    bool substring_exists = to_check.find(substring)\
    \ != std::string::npos;\n    if (substring_exists) {\n      output.push_back(to_check);\n\
    \    }\n  }\n  return output;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (int i\
    \ = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered;", "  std::vector<std::string> strings1;\n  std::string str1;\n  int\
    \ i;\n  int flag=0;\n  for(i=0;i<strings.size();i++)\n  {\n    for(int j=0;j<strings[i].size();j++)\n\
    \    {\n      if(strings[i][j]==substring[0])\n      {\n        for(int k=0;k<substring.size();k++)\n\
    \        {\n          if(strings[i][j+k]==substring[k])\n          {\n       \
    \     flag=1;\n          }\n          else\n          {\n            flag=0;\n\
    \            break;\n          }\n        }\n        if(flag==1)\n        {\n\
    \          str1=strings[i];\n          strings1.push_back(str1);\n        }\n\
    \      }\n    }\n  }\n  return strings1;", "    std::vector<std::string> result;\n\
    \    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> f;\n    for (std::string s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            f.push_back(s);\n  \
    \      }\n    }\n    return f;", "    std::vector<std::string> result;\n    for\
    \ (const auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    // Variables\n    std::vector<std::string> result_vector;\n    std::string\
    \ temp_str;\n    int counter = 0;\n    // Main\n    for (auto i : strings) {\n\
    \        temp_str = i;\n        counter = 0;\n        for (auto j : substring)\
    \ {\n            if (temp_str.find(j) != std::string::npos) {\n              \
    \  counter++;\n            }\n        }\n        if (counter == substring.size())\
    \ {\n            result_vector.push_back(i);\n        }\n    }\n    return result_vector;",
  "    std::vector<std::string> rt;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    rt.push_back(strings[i]);\n        }\n    }\n    return rt;", "  std::vector<std::string>\
    \ ret;\n  for (auto & s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      ret.push_back(s);\n    }\n  }\n  return ret;", "    std::vector<std::string>\
    \ output;\n    for (auto &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            output.push_back(string);\n        }\n\
    \    }\n    return output;", "  std::vector<std::string> filtered_strings;\n \
    \ for (auto &string : strings) {\n    if (string.find(substring) != std::string::npos)\
    \ {\n      filtered_strings.push_back(string);\n    }\n  }\n  return filtered_strings;",
  "    int len = strings.size();\n    std::vector<std::string> res;\n    for (int\
    \ i = 0; i < len; i++) {\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            res.push_back(strings[i]);\n        }\n    }\n    return res;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    for (auto& s : strings) {\n   \
    \     if (s.find(substring) == std::string::npos) {\n            s = \"\";\n \
    \       }\n    }\n    strings.erase(std::remove(strings.begin(), strings.end(),\
    \ \"\"), strings.end());\n    return strings;", "    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtr;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtr.push_back(s);\n        }\n    }\n    return filtr;", "\t\
    std::vector<std::string> res;\n\tfor (int i = 0; i < strings.size(); i++) {\n\t\
    \tif (strings[i].find(substring) != std::string::npos) {\n\t\t\tres.push_back(strings[i]);\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<std::string> result;\n    result.clear();\n\
    \    std::string temp;\n    for (int i = 0; i < strings.size(); i++) {\n     \
    \   temp = strings[i];\n        for (int j = 0; j < temp.size(); j++) {\n    \
    \        if (temp[j] == substring[0]) {\n                bool contain = true;\n\
    \                for (int k = 1; k < substring.size(); k++) {\n              \
    \      if (temp[j + k] != substring[k]) {\n                        contain = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (contain) {\n                    result.push_back(temp);\n \
    \                   break;\n                }\n            }\n        }\n    }\n\
    \    return result;", "\t/* Your code here! */\n\tstd::vector<std::string> good_strings;\n\
    \tfor (auto s : strings) {\n\t\tif (s.find(substring) != std::string::npos) {\n\
    \t\t\tgood_strings.push_back(s);\n\t\t}\n\t}\n\treturn good_strings;", "    std::vector<std::string>\
    \ result;\n    for (auto it = strings.begin(); it != strings.end(); ++it) {\n\
    \        if (it->find(substring) != std::string::npos) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "\tfor (std::vector<std::string>::iterator\
    \ it = strings.begin(); it != strings.end(); it++) {\n\t\tif (it->find(substring)\
    \ == std::string::npos) {\n\t\t\tstrings.erase(it);\n\t\t}\n\t}\n\treturn strings;",
  "  // Replace this with actual implementation\n  std::vector<std::string> result;\n\
    \  for(int i=0;i<strings.size();i++){\n    if(strings[i].find(substring)!=std::string::npos){\n\
    \      result.push_back(strings[i]);\n    }\n  }\n  return result;", "\tstd::vector<std::string>\
    \ new_strings;\n\tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring)\
    \ != std::string::npos) {\n\t\t\tnew_strings.push_back(strings[i]);\n\t\t}\n\t\
    }\n\treturn new_strings;", "\tauto it = std::remove_if(strings.begin(), strings.end(),\
    \ [&substring](std::string s) {\n\t\treturn s.find(substring) == std::string::npos;\n\
    \t});\n\tstrings.erase(it, strings.end());\n\treturn strings;", "  std::vector<std::string>\
    \ result;\n  for (const auto& str : strings) {\n    if (str.find(substring) !=\
    \ std::string::npos) {\n      result.push_back(str);\n    }\n  }\n  return result;",
  "    std::vector<std::string> filtered;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         filtered.push_back(strings[i]);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string const& s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> new_strings;\n\
    \    for (auto s : strings) {\n        // Check if substring is present\n    \
    \    auto found = s.find(substring);\n        if (found != std::string::npos)\
    \ {\n            new_strings.push_back(s);\n        }\n    }\n    return new_strings;",
  "    std::vector<std::string> new_string;\n    for (auto str : strings) {\n    \
    \    if (str.find(substring) != std::string::npos) {\n            new_string.push_back(str);\n\
    \        }\n    }\n    return new_string;", "    std::vector<std::string> ret;\n\
    \    std::string temp;\n    for(auto i : strings) {\n        temp = i;\n     \
    \   if(temp.find(substring) != std::string::npos) {\n            ret.push_back(temp);\n\
    \        }\n    }\n    return ret;", "    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string str : strings) {\n        std::size_t found\
    \ = str.find(substring);\n        if (found != std::string::npos) {\n        \
    \    filtered.push_back(str);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (auto i = strings.begin(); i != strings.end(); i++) {\n   \
    \     std::string current = *i;\n        if (current.find(substring) != std::string::npos)\
    \ {\n            result.push_back(current);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto const &str : strings) {\n \
    \       if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> container;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            container.push_back(strings[i]);\n    \
    \    }\n    }\n    return container;", "    std::vector<std::string> result;\n\
    \    for (std::string i : strings) {\n        if (i.find(substring) != std::string::npos)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "\t// create an empty vector to collect all filtered values\n\tstd::vector<std::string>\
    \ all_filtered_values;\n\t// loop through given strings\n\tfor (std::string filtered_string\
    \ : strings) {\n\t\t// check if filtered string contains given substring and then\
    \ insert into vector\n\t\tif (filtered_string.find(substring) != std::string::npos)\
    \ {\n\t\t\tall_filtered_values.push_back(filtered_string);\n\t\t}\n\t}\n\t// return\
    \ the vector with all filtered values\n\treturn all_filtered_values;", "\tauto\
    \ it = strings.begin();\n\twhile (it != strings.end()) {\n\t\tif (it->find(substring)\
    \ == std::string::npos) {\n\t\t\tit = strings.erase(it);\n\t\t}\n\t\telse {\n\t\
    \t\t++it;\n\t\t}\n\t}\n\treturn strings;", "    std::vector<std::string> filtered_strings;\n\
    \    // YOUR CODE HERE\n    int size = strings.size();\n    for(int i = 0; i <\
    \ size; i++){\n        if(strings[i].find(substring) != std::string::npos){\n\
    \            filtered_strings.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;", "    for (int i = 0; i < strings.size(); i++) {\n      \
    \  if (strings[i].find(substring) == std::string::npos) {\n            strings.erase(strings.begin()\
    \ + i);\n            i--;\n        }\n    }\n    return strings;", "    std::vector<std::string>\
    \ result;\n    std::string current;\n    for (unsigned int i = 0; i < strings.size();\
    \ i++) {\n        current = strings[i];\n        if (current.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(current);\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result = std::vector<std::string>();\n\
    \    for (auto& it : strings) {\n        if (it.find(substring) != std::string::npos)\
    \ {\n            result.push_back(it);\n        }\n    }\n    return result;",
  "    std::vector<std::string> res;\n    for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n        if (it->find(substring) != std::string::npos) {\n         \
    \   res.push_back(*it);\n        }\n    }\n    return res;", "\tstd::vector<std::string>\
    \ ret;\n\tfor (auto &str : strings) {\n\t\tbool found = false;\n\t\tfor (int i\
    \ = 0; i < (int)str.size(); i++) {\n\t\t\tbool match = true;\n\t\t\tfor (int j\
    \ = 0; j < (int)substring.size(); j++) {\n\t\t\t\tif (i + j >= (int)str.size()\
    \ || str[i + j] != substring[j]) {\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (match) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (found) {\n\t\t\tret.push_back(str);\n\t\t}\n\t}\n\treturn\
    \ ret;", "    std::vector<std::string> ret;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         ret.push_back(strings[i]);\n        }\n    }\n    return ret;", "\t\
    std::vector<std::string> new_strings;\n\tfor (auto i : strings) {\n\t\tif (i.find(substring)\
    \ != std::string::npos) {\n\t\t\tnew_strings.push_back(i);\n\t\t}\n\t}\n\treturn\
    \ new_strings;", "    std::vector<std::string> output;\n    for (std::string temp:\
    \ strings) {\n        if (temp.find(substring) != std::string::npos) {\n     \
    \       output.push_back(temp);\n        }\n    }\n    return output;", "    std::vector<std::string>\
    \ ret;\n    for (auto i : strings) {\n        if (i.find(substring) != std::string::npos)\
    \ {\n            ret.push_back(i);\n        }\n    }\n    return ret;", "  std::vector<std::string>\
    \ filtered;\n  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      filtered.push_back(s);\n    }\n  }\n  return filtered;", "    std::vector<std::string>\
    \ result = std::vector<std::string>();\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> v;\n    for (std::string s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            v.push_back(s);\n  \
    \      }\n    }\n    return v;", "\t// Make a copy of strings vector\n\tstd::vector<std::string>\
    \ strings_filtered(strings);\n\t// Remove all of the strings that do not contain\
    \ substring\n\tstrings_filtered.erase(std::remove_if(strings_filtered.begin(),\
    \ strings_filtered.end(), [&substring](std::string s) {\n\t\treturn (s.find(substring)\
    \ == std::string::npos);\n\t}), strings_filtered.end());\n\t// Return the copy\n\
    \treturn strings_filtered;", "  std::vector<std::string> new_strings;\n  for (auto\
    \ string: strings) {\n    if (string.find(substring) != std::string::npos) {\n\
    \      new_strings.push_back(string);\n    }\n  }\n  return new_strings;", " \
    \   std::vector<std::string> result;\n    // Iterate over all strings\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        // Use std::string::find to\
    \ see if substring is contained in string\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "\tstd::vector<std::string>::iterator it;\n\t\
    for (it = strings.begin(); it != strings.end();) {\n\t\tif (it->find(substring)\
    \ == std::string::npos) {\n\t\t\tit = strings.erase(it);\n\t\t}\n\t\telse {\n\t\
    \t\t++it;\n\t\t}\n\t}\n\treturn strings;", "    std::vector<std::string> ans;\n\
    \    for (std::string s : strings) {\n        bool contains = false;\n       \
    \ for (int i = 0; i <= (int)(s.size()) - (int)(substring.size()); i++) {\n   \
    \         if (s.substr(i, substring.size()) == substring) {\n                contains\
    \ = true;\n                break;\n            }\n        }\n        if (contains)\
    \ {\n            ans.push_back(s);\n        }\n    }\n    return ans;", "  std::vector<std::string>\
    \ substring_strings;\n  for (std::string const& s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      substring_strings.push_back(s);\n    }\n  }\n\
    \  return substring_strings;", "  std::vector<std::string> output;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    std::string current_string = strings[i];\n\
    \    if (current_string.find(substring) != std::string::npos) {\n      output.push_back(current_string);\n\
    \    }\n  }\n  return output;", "    std::vector<std::string> filtered_strings;\n\
    \    int len = strings.size();\n    for (int i = 0; i < len; i++) {\n        int\
    \ pos = strings[i].find(substring);\n        if (pos != std::string::npos) {\n\
    \            filtered_strings.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (auto str\
    \ : strings) {\n        if (str.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(str);\n        }\n    }\n    return filtered;", " \
    \ std::vector<std::string> ret;\n  for (std::string str : strings) {\n    if (str.find(substring)\
    \ != std::string::npos) {\n      ret.push_back(str);\n    }\n  }\n  return ret;",
  "    std::vector<std::string>::iterator it;\n    for (it = strings.begin(); it !=\
    \ strings.end(); ++it) {\n        if (std::string::npos == it->find(substring))\
    \ {\n            it = strings.erase(it);\n            --it;\n        }\n    }\n\
    \    return strings;", "\tstd::vector<std::string> result;\n\tfor (int i = 0;\
    \ i < strings.size(); i++) {\n\t\tif (strings[i].find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;", "   \
    \ std::vector<std::string> out;\n    for (std::string s : strings) {\n       \
    \ if (s.find(substring) != std::string::npos) {\n            out.push_back(s);\n\
    \        }\n    }\n    return out;", "    std::vector<std::string> v;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            v.push_back(s);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ ret;\n    for (const auto &s : strings) {\n        if (s.find(substring) !=\
    \ std::string::npos) {\n            ret.push_back(s);\n        }\n    }\n    return\
    \ ret;", "    std::vector<std::string> result;\n    for (std::string string :\
    \ strings) {\n        if (string.find(substring) != std::string::npos) {\n   \
    \         result.push_back(string);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        std::string s = strings[i];\n        if (s.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(s);\n        }\n    }\n \
    \   return result;", "\tstd::vector<std::string> res;\n\tfor (auto i = strings.begin();\
    \ i != strings.end(); i++) {\n\t\tif (i->find(substring) != -1) {\n\t\t\tres.push_back(*i);\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<std::string> result;\n    for (const\
    \ auto & s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ res;\n  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      res.push_back(s);\n    }\n  }\n  return res;", "\tstd::vector<std::string>\
    \ res;\n\tfor (auto str : strings) {\n\t\tif (str.find(substring) != std::string::npos)\
    \ {\n\t\t\tres.push_back(str);\n\t\t}\n\t}\n\treturn res;", "    std::vector<std::string>\
    \ output;\n    for (auto iter = strings.begin(); iter != strings.end(); iter++)\
    \ {\n        std::string current_string = *iter;\n        if (current_string.find(substring)\
    \ != std::string::npos) {\n            output.push_back(current_string);\n   \
    \     }\n    }\n    return output;", "    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> ret;\n    for (std::string\
    \ &str : strings) {\n        if (str.find(substring) != std::string::npos) {\n\
    \            ret.push_back(str);\n        }\n    }\n    return ret;", "  std::vector<std::string>\
    \ result;\n  for (auto str : strings) {\n    if (str.find(substring) != std::string::npos)\
    \ {\n      result.push_back(str);\n    }\n  }\n  return result;", "  std::vector<std::string>*\
    \ strings_filtered = new std::vector<std::string>();\n  for (std::string str :\
    \ strings) {\n    if (str.find(substring) != std::string::npos) {\n      strings_filtered->push_back(str);\n\
    \    }\n  }\n  return *strings_filtered;"]
stop_tokens:
- "\n}"
