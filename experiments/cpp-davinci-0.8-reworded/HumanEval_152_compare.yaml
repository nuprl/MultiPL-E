name: HumanEval_152_compare
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that\
  \ feeling when the result of some long-awaited\n// event is finally known. The feelings\
  \ and thoughts you have at that moment are\n// definitely worth noting down and\
  \ comparing.\n// Your task is to determine if a person correctly guessed the results\
  \ of a number of matches.\n// You are given two vectors of scores and guesses of\
  \ equal length, where each index shows a match. \n// Return a vector of the same\
  \ length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
  \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1,\
  \ (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4,\
  \ (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
  \ game, std::vector<long> guess) {\n"
tests: "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2,\
  \ (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n"
completions: ["  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++)\
    \ {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n\
    \      long m = std::abs(game[i] - guess[i]);\n      result.push_back(m);\n  \
    \  }\n  }\n  return result;", "    std::vector<long> result;\n    for(int i =\
    \ 0; i < game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return result;", "    for(int i = 0; i < game.size(); i++){\n    \
    \    guess[i] = abs(game[i] - guess[i]);\n    }\n    return guess;", "    if(game.size()\
    \ != guess.size()) throw std::runtime_error(\"Unequal length\");\n    std::vector<long>\
    \ r;\n    for(int i = 0; i < game.size(); i++) {\n        r.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return r;", "\tstd::vector<long> res;\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tif (game[i] > guess[i]) {\n\t\t\tres.push_back(game[i]\
    \ - guess[i]);\n\t\t}\n\t\telse if (game[i] < guess[i]) {\n\t\t\tres.push_back(guess[i]\
    \ - game[i]);\n\t\t}\n\t\telse {\n\t\t\tres.push_back(0);\n\t\t}\n\t}\n\treturn\
    \ res;", "    std::vector<long> distances;\n    if (game.size() == guess.size())\
    \ {\n        for (int i = 0; i < game.size(); i++) {\n            if (game[i]\
    \ > guess[i]) {\n                distances.push_back(game[i] - guess[i]);\n  \
    \          } else if (game[i] < guess[i]) {\n                distances.push_back(guess[i]\
    \ - game[i]);\n            } else {\n                distances.push_back(0);\n\
    \            }\n        }\n    }\n    return distances;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        long diff = (long)abs(game[i]\
    \ - guess[i]);\n        result.push_back(diff);\n    }\n    return result;", " \
    \   for(int i = 0; i < game.size(); i++){\n        if(game[i] > guess[i]){\n \
    \           guess[i] = game[i] - guess[i];\n        }\n        else if(game[i]\
    \ < guess[i]){\n            guess[i] = guess[i] - game[i];\n        }\n      \
    \  else{\n            guess[i] = 0;\n        }\n    }\n    return guess;", "\t\
    for (int i = 0; i < game.size(); i++) {\n\t\tlong difference = 0;\n\t\tdifference\
    \ = std::abs(game[i] - guess[i]);\n\t\tgame[i] = difference;\n\t}\n\treturn game;",
  "    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n    \
    \    long value;\n        if(game[i] > guess[i]){\n            value = game[i]\
    \ - guess[i];\n        }else{\n            value = guess[i] - game[i];\n     \
    \   }\n        result.push_back(value);\n    }\n    return result;", "\tint n\
    \ = game.size();\n\tassert(n == guess.size());\n\tstd::vector<long> answer(n);\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tanswer[i] = std::abs(game[i] - guess[i]);\n\
    \t}\n\treturn answer;", "    int temp;\n    int res;\n    std::vector<long> diff;\n\
    \    for(int i = 0; i < game.size(); i++){\n        res = std::abs(game[i] - guess[i]);\n\
    \        diff.push_back(res);\n    }\n    return diff;", "\tstd::vector<long>\
    \ result;\n\t// Check if the length of the game and guess are the same\n\tassert(game.size()\
    \ == guess.size());\n\t// Loop through game and guess\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\t// Check if the value at i of game and guess are the same\n\t\t\
    if (game[i] == guess[i]) {\n\t\t\t// If they are the same, push 0 to result\n\t\
    \t\tresult.push_back(0);\n\t\t}\n\t\t// If not, push the abs difference between\
    \ the two to result\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\
    \t\t}\n\t}\n\treturn result;", "    assert(game.size() == guess.size());\n   \
    \ std::vector<long> result;\n    for (int i = 0; i < game.size(); i++) {\n   \
    \     result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;",
  "    std::vector<long> rtn;\n    long temp=0;\n    for(int i=0;i<game.size();i++){\n\
    \        temp=abs(game[i]-guess[i]);\n        rtn.push_back(temp);\n    }\n  \
    \  return rtn;", "    \n    std::vector<long> differences(game.size());\n    for\
    \ (int i = 0; i < game.size(); i++) {\n        long difference = std::abs(game[i]\
    \ - guess[i]);\n        differences[i] = difference;\n    }\n    return differences;",
  "    std::vector<long> result;\n    assert(game.size() == guess.size());\n    for\
    \ (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] -\
    \ guess[i]));\n    }\n    return result;", "    vector<long> res;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        res.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return res;", "  std::vector<long> result;\n  long length = guess.size();\n\
    \  for (long i = 0; i < length; i++) {\n    result.push_back(abs(game[i] - guess[i]));\n\
    \  }\n  return result;", "    std::vector<long> results;\n    for(int i = 0; i\
    \ < game.size(); i++){\n        if(game[i] == guess[i]){\n            results.push_back(0);\n\
    \        }\n        else{\n            results.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return results;", "  std::vector<long> ret;\n  for (int\
    \ i = 0; i < game.size(); i++) {\n    ret.push_back(std::abs(game[i] - guess[i]));\n\
    \  }\n  return ret;", "    std::vector<long> result(guess.size());\n    for (int\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;", "\tfor (int i = 0; i < game.size(); i++) {\n\t\t\
    if (game[i] >= guess[i])\n\t\t\tguess[i] = game[i] - guess[i];\n\t\telse\n\t\t\
    \tguess[i] = guess[i] - game[i];\n\t}\n\treturn guess;", "    if(game.size() !=\
    \ guess.size()) return {};\n    std::vector<long> ans;\n    for(int i = 0; i <\
    \ game.size(); i++){\n        ans.push_back(std::abs(game[i] - guess[i]));\n \
    \   }\n    return ans;", "    // Your code here\n    // int len = game.size();\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      long absDiff = std::abs(game[i] - guess[i]);\n        result.push_back(absDiff);\n\
    \    }\n    return result;", "    // Happy programming!\n    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "    std::vector<long> res;\n   \
    \ for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]) res.push_back(0);\n\
    \        else res.push_back(abs(game[i] - guess[i]));\n    }\n    return res;",
  "    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ res.push_back(std::abs(game[i] - guess[i]));\n    }\n    return res;", "   \
    \ std::vector<long> ret;\n    for(unsigned int i = 0; i < game.size(); i++) {\n\
    \        ret.push_back(std::abs(game[i] - guess[i]));\n    }\n    return ret;",
  "  assert(game.size() == guess.size());\n  for (int i = 0; i < game.size(); i++)\
    \ {\n    game[i] = abs(game[i] - guess[i]);\n  }\n  return game;", "    std::vector<long>\
    \ dif;\n    for(int i = 0; i < game.size(); i++){\n        dif.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return dif;", "  std::vector<long> result;\n  assert(game.size()\
    \ == guess.size());\n  std::transform(game.begin(), game.end(), guess.begin(),\
    \ std::back_inserter(result), [](long g, long h) {\n    return std::abs(g - h);\n\
    \  });\n  return result;", "    long n = game.size();\n    std::vector<long> ans(n);\n\
    \    for(long i = 0; i < n; i++) {\n        if(game[i] > guess[i]) {\n       \
    \     ans[i] = game[i] - guess[i];\n        }\n        else if(game[i] < guess[i])\
    \ {\n            ans[i] = guess[i] - game[i];\n        }\n        else {\n   \
    \         ans[i] = 0;\n        }\n    }\n    return ans;", "\tstd::vector<long>\
    \ v;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tv.push_back(abs(game[i] -\
    \ guess[i]));\n\t}\n\treturn v;", "\tfor (unsigned int i = 0; i < game.size();\
    \ i++) {\n\t\tstd::cout << game[i] << \" \";\n\t}\n\tstd::cout << std::endl;\n\
    \tfor (unsigned int i = 0; i < guess.size(); i++) {\n\t\tstd::cout << guess[i]\
    \ << \" \";\n\t}\n\tstd::cout << std::endl;\n\tstd::vector<long> cmp;\n\tfor (unsigned\
    \ int i = 0; i < game.size(); i++) {\n\t\tcmp.push_back(std::abs(game[i] - guess[i]));\n\
    \t}\n\treturn cmp;", "\tint sz = game.size();\n\tstd::vector<long> res(sz);\n\t\
    for (int i = 0; i < sz; i++)\n\t\tres[i] = std::abs(game[i] - guess[i]);\n\treturn\
    \ res;", "  std::vector<long> results;\n  for (int i = 0; i < game.size(); i++)\
    \ {\n    long difference = abs(game[i] - guess[i]);\n    results.push_back(difference);\n\
    \  }\n  return results;", "    std::vector<long> result;\n    for(int i = 0; i\
    \ < game.size(); i++){\n        result.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return result;", "    int size = game.size();\n    std::vector<long>\
    \ result(size);\n    for(int i = 0; i < size; i++) {\n        result[i] = std::abs(game[i]\
    \ - guess[i]);\n    }\n    return result;", "    assert(game.size() == guess.size());\n\
    \    std::vector<long> output(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        output[i] = abs(game[i] - guess[i]);\n    }\n    return output;",
  "  std::vector<long> ans;\n  for(int i = 0; i < game.size(); i++){\n    if(game[i]\
    \ == guess[i]){\n      ans.push_back(0);\n    }\n    else{\n      ans.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return ans;", "  if (game.size() != guess.size())\
    \ return game;\n  std::vector<long> res;\n  for (int i = 0; i < game.size(); i++)\
    \ {\n    long temp = game[i] > guess[i] ? game[i] - guess[i] : guess[i] - game[i];\n\
    \    res.push_back(temp);\n  }\n  return res;", "\tassert(game.size() == guess.size());\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tresult.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;", "\t// your code here\n\tvector<long>\
    \ rtv;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\trtv.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn rtv;", "\tstd::vector<long> ret;\n\tlong len =\
    \ game.size();\n\tfor (long i = 0; i < len; i++) {\n\t\tret.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn ret;", "\tint n = game.size();\n\tstd::vector<long>\
    \ res(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tres[i] = std::abs(game[i] - guess[i]);\n\
    \t}\n\treturn res;", "\tstd::vector<long> ans;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] > guess[i]) {\n\t\t\tans.push_back(game[i] - guess[i]);\n\
    \t\t}\n\t\telse if (game[i] < guess[i]) {\n\t\t\tans.push_back(guess[i] - game[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tans.push_back(0);\n\t\t}\n\t}\n\treturn ans;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n\
    \            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;", "\tstd::vector<long>::iterator\
    \ it = guess.begin();\n\tstd::vector<long>::iterator it2 = game.begin();\n\tstd::vector<long>\
    \ result;\n\tfor (it; it != guess.end(); it++) {\n\t\tif (*it == *it2) {\n\t\t\
    \tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(*it - *it2));\n\
    \t\t}\n\t\tit2++;\n\t}\n\treturn result;", "    std::vector<long> ans;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        ans.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return ans;", "\tstd::vector<long> result;\n\tfor (int i = 0; i <\
    \ game.size(); i++) {\n\t\tresult.push_back(abs(game[i] - guess[i]));\n\t}\n\t\
    return result;", "    std::vector<long> result;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] > guess[i]){\n            result.push_back(game[i]\
    \ - guess[i]);\n        }\n        else if(game[i] < guess[i]){\n            result.push_back(guess[i]\
    \ - game[i]);\n        }\n        else {\n            result.push_back(0);\n \
    \       }\n    }\n    return result;", "    std::vector<long> result;\n    for(long\
    \ long i = 0; i < game.size(); i++){\n        long long diff = game[i] - guess[i];\n\
    \        result.push_back(abs(diff));\n    }\n    return result;", "\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tguess[i]\
    \ = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\t\t}\n\t\
    }\n\treturn guess;", "\tint n = game.size();\n\tstd::vector<long> v;\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\tv.push_back(abs(game[i] - guess[i]));\n\t}\n\treturn\
    \ v;", "    assert(game.size() == guess.size());\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        guess[i] = (guess[i] > game[i]) ? guess[i] - game[i] : game[i]\
    \ - guess[i];\n    }\n    return guess;", "\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tgame[i] = abs(game[i] - guess[i]);\n\t}\n\treturn game;", "    std::vector<long>\
    \ results(game.size());\n    for (int i = 0; i < game.size(); i++) {\n       \
    \ results[i] = std::abs(game[i] - guess[i]);\n    }\n    return results;", " \
    \   std::vector<long> output(game.size());\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(guess[i] == game[i])\n            output[i] = 0;\n       \
    \ else if(guess[i] > game[i])\n            output[i] = guess[i] - game[i];\n \
    \       else\n            output[i] = game[i] - guess[i];\n    }\n    return output;",
  "    std::vector<long> out;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ out.push_back(abs(game[i] - guess[i]));\n    }\n    return out;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        long diff = abs(game[i]\
    \ - guess[i]);\n        result.push_back(diff);\n    }\n    return result;", "\t\
    // your code here\n\tstd::vector<long> res;\n\tstd::transform(game.begin(), game.end(),\
    \ guess.begin(), std::back_inserter(res), [](long a, long b) {\n\t\treturn abs(a\
    \ - b);\n\t});\n\treturn res;", "    assert(game.size() == guess.size());\n  \
    \  std::vector<long> res;\n    for (int i = 0; i < game.size(); i++) {\n     \
    \   res.push_back(abs(game[i] - guess[i]));\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for(int i = 0; i < game.size(); i++){\n        res.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return res;", "    std::vector<long> ans;\n    assert(game.size()\
    \ == guess.size());\n    for(int i = 0; i < game.size(); i++){\n        ans.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return ans;", "  std::vector<long> result;\n  int\
    \ guess_size = guess.size();\n  for(int i = 0; i < guess_size; i++){\n    result.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return result;", "  assert(game.size() == guess.size());\n\
    \  std::vector<long> answer;\n  for (int i = 0; i < game.size(); i++) {\n    answer.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return answer;", "    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] < guess[i]){\n            guess[i] = guess[i] - game[i];\n\
    \        }else if(game[i] > guess[i]){\n            guess[i] = game[i] - guess[i];\n\
    \        }else{\n            guess[i] = 0;\n        }\n    }\n    return guess;",
  "\tstd::vector<long> res;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tres.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn res;", "\tstd::vector<long> result;\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tresult.push_back(abs(game[i] - guess[i]));\n\
    \t}\n\treturn result;", "    int i = 0;\n    std::vector<long> result;\n    for(auto\
    \ it : game){\n        if(it >= guess[i])\n            result.push_back(abs(it\
    \ - guess[i]));\n        else\n            result.push_back(abs(guess[i] - it));\n\
    \        i++;\n    }\n    return result;", "  for (unsigned int i = 0; i < game.size();\
    \ i++) {\n    game[i] = abs(game[i] - guess[i]);\n  }\n  return game;", "  \t\
    std::vector<long> res;\n  \tfor(int i = 0; i < game.size(); i++){\n      res.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return res;", "\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tguess[i] = abs(game[i] - guess[i]);\n\t}\n\treturn guess;", "  std::vector<long>\
    \ res(game.size());\n  for (int i = 0; i < game.size(); i++) {\n    res[i] = std::abs(game[i]\
    \ - guess[i]);\n  }\n  return res;", "    std::vector<long> diff(game.size());\n\
    \    // your code here\n    for(int i = 0; i < game.size(); i++){\n        diff[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    return diff;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "    for(long i = 0; i < game.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            game[i] = 0;\n      \
    \  } else {\n            game[i] = std::abs(game[i] - guess[i]);\n        }\n\
    \    }\n    return game;", "\tstd::vector<long> result;\n\tfor (int i = 0; i <\
    \ game.size(); i++) {\n\t\tlong absDifference = abs(game[i] - guess[i]);\n\t\t\
    result.push_back(absDifference);\n\t}\n\treturn result;", "    for(int i = 0;\
    \ i < game.size(); i++){\n        if(game[i] != guess[i])\n            guess[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    return guess;", "    std::vector<long>\
    \ off(game.size());\n    for(int i = 0; i < game.size(); i++)\n    {\n       \
    \ if(game[i] == guess[i])\n            off[i] = 0;\n        else if(game[i] >\
    \ guess[i])\n            off[i] = game[i] - guess[i];\n        else\n        \
    \    off[i] = guess[i] - game[i];\n    }\n    return off;", "\tfor (int i = 0;\
    \ i < game.size(); i++) {\n\t\tguess[i] = (long)abs(game[i] - guess[i]);\n\t}\n\
    \treturn guess;", "  for (int i = 0; i < game.size(); i++) {\n    if (game[i]\
    \ != guess[i]) {\n      guess[i] = abs(game[i] - guess[i]);\n    }\n  }\n  return\
    \ guess;", "\tstd::vector<long> a;\n\tfor (int i = 0; i < game.size(); i++) {\n\
    \t\tlong k = game[i] - guess[i];\n\t\ta.push_back(abs(k));\n\t}\n\treturn a;",
  "    std::vector<long> dif(game.size());\n    for(int i = 0; i < game.size(); i++){\n\
    \        dif[i] = std::abs(game[i] - guess[i]);\n    }\n    return dif;", "  \
    \  std::vector<long> res(game.size());\n    for(unsigned int i = 0; i < game.size();\
    \ i++) {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;",
  "  std::vector<long> results;\n  for (int i = 0; i < game.size(); i++) {\n    results.push_back(std::abs(game[i]\
    \ - guess[i]));\n  }\n  return results;", "    // your code goes here\n    std::vector<long>\
    \ result;\n    assert(game.size() == guess.size());\n    for(int i = 0; i < game.size();\
    \ i++){\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return\
    \ result;", "\tstd::vector<long> result(game.size());\n\tfor (size_t i = 0; i\
    \ < game.size(); i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\treturn\
    \ result;", "\tstd::vector<long> vec;\n\tfor (int i = 0; i < game.size(); i++)\
    \ {\n\t\tint temp = abs(game[i] - guess[i]);\n\t\tvec.push_back(temp);\n\t}\n\t\
    return vec;", "    std::vector<long> result;\n    for(int i = 0; i < game.size();\
    \ i++){\n        long r = game[i] - guess[i];\n        r = abs(r);\n        result.push_back(r);\n\
    \    }\n    return result;", "    for(int i = 0; i < game.size(); i++){\n    \
    \    guess[i] = abs(game[i] - guess[i]);\n    }\n    return guess;", "    for(int\
    \ i = 0; i < game.size(); i++){\n        if(game[i] != guess[i]){\n          \
    \  guess[i] = std::abs(game[i] - guess[i]);\n        }\n    }\n    return guess;",
  "  assert(game.size() == guess.size());\n  std::vector<long> res;\n  for (int i\
    \ = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      res.push_back(0);\n\
    \    } else {\n      res.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return\
    \ res;", "    int len = game.size();\n    assert(len == guess.size());\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < len; i++) {\n        res.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return res;", "    std::vector<long> ret;\n    std::vector<long>::iterator\
    \ g;\n    std::vector<long>::iterator s;\n    long result;\n    for(g = guess.begin(),\
    \ s = game.begin(); g != guess.end(); g++, s++){\n        result = *g - *s;\n\
    \        result = abs(result);\n        ret.push_back(result);\n    }\n    return\
    \ ret;", "  std::vector<long> v;\n  for(int i = 0; i < game.size(); i++){\n  \
    \  if(game[i] == guess[i]){\n      v.push_back(0);\n    }\n    else{\n      v.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return v;", "    // TODO: Program me\n    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        if(guess[i] == game[i]){\n\
    \            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(guess[i]\
    \ - game[i]));\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result(game.size());\n    for (int i = 0; i < game.size(); i++) {\n        if\
    \ (game[i] == guess[i]) {\n            result[i] = 0;\n        } else {\n    \
    \        result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return result;",
  "    if(game.size() != guess.size())\n        throw \"The 2 vectors have different\
    \ lengths!\";\n    for(int i = 0; i < game.size(); i++)\n        game[i] = std::abs(game[i]\
    \ - guess[i]);\n    return game;", "\tstd::vector<long> results;\n\tfor (int i\
    \ = 0; i < game.size(); i++) {\n\t\tresults.push_back(std::abs(game[i] - guess[i]));\n\
    \t}\n\treturn results;", "    std::vector<long> ret;\n    for(size_t i = 0; i\
    \ < game.size(); i++) {\n        if(game[i] == guess[i]) {\n            ret.push_back(0);\n\
    \        } else {\n            long result = std::abs(game[i] - guess[i]);\n \
    \           ret.push_back(result);\n        }\n    }\n    return ret;", "    int\
    \ len = game.size();\n    std::vector<long> res;\n    assert(len == guess.size());\n\
    \    for (int i = 0; i < len; i++) {\n        long diff = std::abs(game[i] - guess[i]);\n\
    \        res.push_back(diff);\n    }\n    return res;", "\tstd::vector<long> c;\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tc.push_back(abs(game[i] - guess[i]));\n\
    \t}\n\treturn c;", "    std::vector<long> differences;\n    for (int i = 0; i\
    \ < game.size(); i++) {\n        differences.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return differences;", "    \tstd::vector<long> res;\n\tfor(int i=0;i<game.size();i++){\n\
    \t\tres.push_back(abs(game[i]-guess[i]));\n\t}\n\treturn res;", "\tstd::vector<long>\
    \ r;\n\tfor (unsigned i = 0; i < game.size(); i++) {\n\t\tlong v = (game[i] >\
    \ guess[i]) ? game[i] - guess[i] : guess[i] - game[i];\n\t\tr.push_back(v);\n\t\
    }\n\treturn r;", "\tassert(game.size() == guess.size());\n\t// std::cout << \"\
    game.size() == \" << game.size() << std::endl;\n\t// std::cout << \"guess.size()\
    \ == \" << guess.size() << std::endl;\n\tfor (int i = 0; i < game.size(); i++)\
    \ {\n\t\tgame[i] = abs(game[i] - guess[i]);\n\t}\n\treturn game;", "  int sizeOfArr\
    \ = game.size();\n  std::vector<long> resultArr;\n  for(int i = 0; i < sizeOfArr;\
    \ i++) {\n    long absoluteDifference = abs(game[i] - guess[i]);\n    resultArr.push_back(absoluteDifference);\n\
    \  }\n  return resultArr;", "    for(int i = 0; i < game.size(); i++){\n     \
    \   long temp = abs(game[i] - guess[i]);\n        guess[i] = temp;\n    }\n  \
    \  return guess;", "\t//assume both vector have the same size\n\t//assume guess\
    \ is not empty\n\tstd::vector<long> out;\n\tfor (size_t i = 0; i < game.size();\
    \ i++)\n\t{\n\t\tlong diff = game[i] - guess[i];\n\t\tif (diff < 0)\n\t\t\tdiff\
    \ = diff * -1;\n\t\tout.push_back(diff);\n\t}\n\treturn out;", "\tstd::vector<long>\
    \ output;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\toutput.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn output;", "  assert(game.size() == guess.size());\n\
    \  std::vector<long> result;\n  std::transform(game.begin(), game.end(), guess.begin(),\
    \ std::back_inserter(result),\n                 [](long const& a, long const&\
    \ b) { return std::abs(a - b); });\n  return result;", "    std::vector<long>\
    \ sum;\n    std::vector<long>::iterator it;\n    for(it = game.begin(); it !=\
    \ game.end(); it++){\n        sum.push_back(abs(*it - *(guess.begin() + std::distance(game.begin(),\
    \ it))));\n    }\n    return sum;", "    assert(game.size() == guess.size());\n\
    \    // return array\n    std::vector<long> ret(game.size());\n    // loop\n \
    \   for (int i = 0; i < game.size(); i++) {\n        // if game > guess, diff\
    \ is game - guess\n        if (game[i] > guess[i]) {\n            ret[i] = game[i]\
    \ - guess[i];\n        }\n        // else if guess > game, diff is guess - game\n\
    \        else if (guess[i] > game[i]) {\n            ret[i] = guess[i] - game[i];\n\
    \        }\n        // else if guess == game, diff is 0\n        else {\n    \
    \        ret[i] = 0;\n        }\n    }\n    return ret;", "\tstd::vector<long>\
    \ result;\n\tassert(game.size() == guess.size());\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\
    \telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn\
    \ result;", "\t\n\tlong n = game.size();\n\tlong m = guess.size();\n\tlong i;\n\
    \tassert(n == m);\n\tstd::vector<long> result;\n\tfor(i = 0; i < n; i++)\n\t{\n\
    \t\tif(game[i] == guess[i])\n\t\t{\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn\
    \ result;", "\tassert(game.size() == guess.size());\n\tstd::vector<long> result;\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\
    \tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i]\
    \ - guess[i]));\n\t\t}\n\t}\n\treturn result;", "    std::vector<long> ans(game.size());\n\
    \    for(int i = 0; i < game.size(); i++)\n        ans[i] = std::abs(game[i] -\
    \ guess[i]);\n    return ans;", "    std::vector<long> result;\n    for(int i\
    \ = 0; i < game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return result;", "\tint i, l;\n\tl = game.size();\n\tfor (i = 0; i\
    \ < l; i++) {\n\t\tguess[i] = std::abs(game[i] - guess[i]);\n\t}\n\treturn guess;",
  "\tstd::vector<long> v {};\n\tlong size = game.size();\n\tfor (long i = 0; i < size;\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tv.push_back(0);\n\t\t} else {\n\
    \t\t\tv.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn v;", "    std::vector<long>\
    \ res;\n    for(int i = 0; i < game.size(); i++){\n        res.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return res;", "\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tgame[i] = abs(game[i] - guess[i]);\n\t}\n\treturn game;", "\tstd::vector<long>\
    \ result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\tresult.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;", "\tstd::vector<long> difference;\n\t\
    if (game.size() != guess.size()) {\n\t\tthrow \"size mismatch\";\n\t}\n\tfor (size_t\
    \ i = 0; i < game.size(); i++) {\n\t\tdifference.push_back(std::abs(game[i] -\
    \ guess[i]));\n\t}\n\treturn difference;", "    std::vector<long> v;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        v.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return v;", "\tstd::vector<long> difference;\n\tfor (int i = 0; i\
    \ < game.size(); i++) {\n\t\tdifference.push_back(abs(game[i] - guess[i]));\n\t\
    }\n\treturn difference;", "    std::vector<long> result(game.size());\n    for\
    \ (int i = 0; i < game.size(); i++) {\n        if (guess[i] > game[i])\n     \
    \       result[i] = guess[i] - game[i];\n        else if (guess[i] < game[i])\n\
    \            result[i] = game[i] - guess[i];\n        else\n            result[i]\
    \ = 0;\n    }\n    return result;", "    int n = game.size();\n    std::vector<long>\
    \ vect(n);\n    for(int i = 0; i < n; i++) {\n        if(game[i] == guess[i])\
    \ vect[i] = 0;\n        else vect[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ vect;", "    long length=game.size();\n    std::vector<long> result(length);\n\
    \    for(long i=0;i<length;i++){\n        result[i]=std::abs(game[i]-guess[i]);\n\
    \    }\n    return result;", "    std::vector<long> v;\n    // your code here\n\
    \    for(int i=0;i<game.size();i++){\n        if(guess[i]==game[i]){\n       \
    \     v.push_back(0);\n        }\n        else{\n            v.push_back(abs(guess[i]-game[i]));\n\
    \        }\n    }\n    return v;", "    std::vector<long> result;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        result.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return result;", "  std::vector<long> ans;\n  for(int i = 0; i < game.size();\
    \ i++){\n    if(game[i] == guess[i]){\n      ans.push_back(0);\n    }\n    else{\n\
    \      ans.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return ans;", " \
    \   int n = game.size();\n    std::vector<long> res(n);\n    for(int i = 0; i\
    \ < n; i++) {\n        res[i] = std::abs(game[i] - guess[i]);\n    }\n    return\
    \ res;", "\tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i])\
    \ {\n\t\t\tguess[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\
    \t\t}\n\t}\n\treturn guess;", "    int count = game.size();\n    std::vector<long>\
    \ ans;\n    for(int i = 0; i < count; i++){\n        long temp = game[i] - guess[i];\n\
    \        if(temp < 0) ans.push_back(temp * -1);\n        else ans.push_back(temp);\n\
    \    }\n    return ans;", "  assert(game.size() == guess.size());\n  std::vector<long>\
    \ diff;\n  for (unsigned int i = 0; i < game.size(); i++) {\n    diff.push_back(std::abs(game[i]\
    \ - guess[i]));\n  }\n  return diff;", "    std::vector<long> res;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        res.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return res;", "    std::vector<long> result;\n    for(int i = 0; i\
    \ < game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n \
    \   }\n    return result;", "\tstd::vector<long> results;\n\tfor (long i = 0;\
    \ i < game.size(); i++) {\n\t\tif (game[i] == guess[i])\n\t\t\tresults.push_back(0);\n\
    \t\telse\n\t\t\tresults.push_back(abs(game[i] - guess[i]));\n\t}\n\treturn results;",
  "\tint n = game.size();\n\tstd::vector<long> ret(n);\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tret[i] = abs(game[i] - guess[i]);\n\t}\n\treturn ret;", "    std::vector<long>\
    \ ans(game.size());\n    for(int i = 0; i < game.size(); i++) {\n        ans[i]\
    \ = std::abs(game[i] - guess[i]);\n    }\n    return ans;", "\tassert(game.size()\
    \ == guess.size());\n\tstd::vector<long> result;\n\tfor (size_t i = 0; i < game.size();\
    \ i++) {\n\t\tresult.push_back(std::abs(game[i] - guess[i]));\n\t}\n\treturn result;",
  "    std::vector<long> difference(game.size());\n    // your code here\n    std::transform(game.begin(),\
    \ game.end(), guess.begin(), difference.begin(), [](long a, long b) {\n      \
    \  return std::abs(a - b);\n    });\n    return difference;", "\tstd::vector<long>\
    \ result(game.size());\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tlong guess_score\
    \ = guess[i];\n\t\tlong real_score = game[i];\n\t\tlong diff = std::abs(guess_score\
    \ - real_score);\n\t\tresult[i] = diff;\n\t}\n\treturn result;", "\tfor (size_t\
    \ i = 0; i < game.size(); i++) {\n\t\tguess[i] = abs(game[i] - guess[i]);\n\t\
    }\n\treturn guess;", "\tstd::vector<long> ans;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tlong dif = std::abs(game[i] - guess[i]);\n\t\tans.push_back(dif);\n\
    \t}\n\treturn ans;", "\tstd::vector<long> ret;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tret.push_back(0);\n\t\t}\n\t\t\
    else {\n\t\t\tret.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn ret;",
  "    for(int i = 0; i < game.size(); i++){\n        if(game[i] != guess[i]){\n \
    \           guess[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ guess;", "    int n = game.size();\n    std::vector<long> result(n);\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = abs(game[i] - guess[i]);\n    return\
    \ result;", "  std::vector<long> res;\n  for(long i = 0; i < game.size(); i++)\
    \ {\n    long diff = game[i] - guess[i];\n    if(diff < 0) {\n      diff = diff\
    \ * -1;\n    }\n    res.push_back(diff);\n  }\n  return res;", "\tstd::vector<long>\
    \ compareRes;\n\tfor (unsigned int i = 0; i < game.size(); i++) {\n\t\tlong long\
    \ diff = abs(game[i] - guess[i]);\n\t\tcompareRes.push_back(diff);\n\t}\n\treturn\
    \ compareRes;", "  assert(game.size() == guess.size());\n  for (unsigned int i\
    \ = 0; i < game.size(); i++) {\n    guess[i] = abs(game[i] - guess[i]);\n  }\n\
    \  return guess;", "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ vec;\n    long vectorSize = game.size();\n    for (size_t i = 0; i < vectorSize;\
    \ i++)\n    {\n        // long diff = abs(game[i] - guess[i]);\n        long diff\
    \ = (game[i] - guess[i]);\n        if (diff < 0)\n        {\n            diff\
    \ = -diff;\n        }\n        vec.push_back(diff);\n    }\n    return vec;",
  "    for(int i = 0; i < game.size(); i++){\n        std::cout << abs(game[i] - guess[i])\
    \ << \" \";\n    }\n    std::cout << std::endl;\n    return game;", "    for(int\
    \ i = 0; i < game.size(); i++){\n        game[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return game;", "  std::vector<long> result;\n  for (int i = 0; i <\
    \ game.size(); i++) {\n    result.push_back(abs(game[i] - guess[i]));\n  }\n \
    \ return result;", "\tstd::vector<long> result;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (guess[i] < 0) {\n\t\t\tresult.push_back(abs(guess[i]));\n\t\t\
    }\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\t\
    return result;", "    std::vector<long> res;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] == guess[i]){\n            res.push_back(0);\n   \
    \     }else{\n            res.push_back(abs(game[i] - guess[i]));\n        }\n\
    \    }\n    return res;", "\tstd::vector<long> difference;\n\tint count;\n\tfor\
    \ (count = 0; count < game.size(); count++) {\n\t\tif (game[count] == guess[count])\
    \ {\n\t\t\tdifference.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tdifference.push_back(abs(game[count]\
    \ - guess[count]));\n\t\t}\n\t}\n\treturn difference;", "    for(int i = 0; i\
    \ < game.size(); i++){\n        long diff = abs(game[i] - guess[i]);\n       \
    \ guess[i] = diff;\n    }\n    return guess;", "\tstd::vector<long> result;\n\t\
    int length=game.size();\n\tfor(int i=0;i<length;i++){\n\t\tresult.push_back(abs(game[i]-guess[i]));\n\
    \t}\n\treturn result;", "\t\tstd::vector<long> result;\n\t\tfor(long i = 0; i\
    \ < game.size(); i++){\n\t\t\t\tif(game[i] == guess[i])\n\t\t\t\t\t\tresult.push_back(0);\n\
    \t\t\t\telse\n\t\t\t\t\t\tresult.push_back(std::abs(game[i] - guess[i]));\n\t\t\
    }\n\t\treturn result;", "    for(int i = 0; i < game.size(); i++){\n        if(guess[i]\
    \ < 0){\n            guess[i] = 0;\n        }\n        if(game[i] < 0){\n    \
    \        game[i] = 0;\n        }\n        if(guess[i] > game[i]){\n          \
    \  guess[i] = game[i];\n        }\n    }\n    return guess;", "    std::vector<long>\
    \ delta(guess.size());\n    for (int i = 0; i < guess.size(); i++) {\n       \
    \ if (game[i] > guess[i]) {\n            delta[i] = game[i] - guess[i];\n    \
    \    } else if (game[i] < guess[i]) {\n            delta[i] = guess[i] - game[i];\n\
    \        } else {\n            delta[i] = 0;\n        }\n    }\n    return delta;",
  "    std::vector<long> ret;\n    for(int i = 0; i < game.size(); i++) {\n      \
    \  ret.push_back(std::abs(game[i] - guess[i]));\n    }\n    return ret;", "\t\
    std::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tresult.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;", "\tstd::vector<long> result;\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i])\n\t\t\tresult.push_back(0);\n\
    \t\telse\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t}\n\treturn result;",
  "    // your code here\n    std::vector<long> result;\n    for(int i = 0; i < game.size();\
    \ i++){\n      result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;",
  "    for(int i = 0; i < game.size(); i++){\n        if(game[i] >= guess[i]){\n \
    \           guess[i] = game[i] - guess[i];\n        }\n        else{\n       \
    \     guess[i] = guess[i] - game[i];\n        }\n    }\n    return guess;", " \
    \ std::vector<long> result(game.size());\n  for (size_t i = 0; i < game.size();\
    \ i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return result;", " \
    \   assert(game.size() == guess.size());\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\n    \
    \        result.push_back(0);\n        else if (game[i] > guess[i])\n        \
    \    result.push_back(game[i] - guess[i]);\n        else if (game[i] < guess[i])\n\
    \            result.push_back(guess[i] - game[i]);\n    }\n    return result;",
  "    std::vector<long> output;\n    for(int i = 0; i < game.size(); i++){\n    \
    \    output.push_back(abs(game[i] - guess[i]));\n    }\n    return output;", " \
    \   // your code here ...\n    for(int i = 0; i < game.size(); i++){\n       \
    \ guess[i] = abs(game[i] - guess[i]);\n    }\n    return guess;", "    int n =\
    \ game.size();\n    std::vector<long> res(n);\n    for(int i = 0; i < n; i++)\n\
    \        res[i] = abs(game[i] - guess[i]);\n    return res;", "  std::vector<long>\
    \ res;\n  for (size_t i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i])\
    \ {\n      res.push_back(0);\n    } else {\n      res.push_back(abs(game[i] -\
    \ guess[i]));\n    }\n  }\n  return res;", "    std::vector<long>results;\n  \
    \  long i=0;\n    for(;i<game.size();i++){\n        if(game[i]==guess[i]){\n \
    \           results.push_back(0);\n        }else{\n            results.push_back(abs(game[i]-guess[i]));\n\
    \        }\n    }\n    return results;", "    std::vector<long> results;\n   \
    \ for(int i = 0; i < game.size(); i++){\n        results.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return results;", "    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] != guess[i]){\n            guess[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return guess;", "\tint i = 0;\n\tint len\
    \ = game.size();\n\tstd::vector<long> result;\n\twhile (i < len) {\n\t\tresult.push_back(abs(game[i]\
    \ - guess[i]));\n\t\ti++;\n\t}\n\treturn result;", "  long int i,n=game.size();\n\
    \  std::vector<long> a;\n  for(i=0;i<n;i++)\n  {\n    a.push_back(abs(game[i]-guess[i]));\n\
    \  }\n  return a;", "    // your code here\n    std::vector<long> results;\n \
    \   for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i])\n \
    \           results.push_back(0);\n        else\n            results.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return results;", "    std::vector<long> result;\n\
    \    for(int i = 0; i < game.size(); i++){\n        if(game[i] < guess[i]){\n\
    \            result.push_back(guess[i] - game[i]);\n        }else if(game[i] >\
    \ guess[i]){\n            result.push_back(game[i] - guess[i]);\n        }else{\n\
    \            result.push_back(0);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> ret;\n    for(auto a = game.begin(), b = guess.begin(); a\
    \ != game.end(); ++a, ++b) {\n        ret.push_back(abs(*a - *b));\n    }\n  \
    \  return ret;", "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "    std::vector<long> a;\n    int\
    \ i = 0;\n    while(i < game.size()){\n        a.push_back(abs(game[i] - guess[i]));\n\
    \        i++;\n    }\n    return a;", "    std::vector<long> r;\n    for(int i\
    \ = 0; i < game.size(); i++){\n        r.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return r;", "  std::vector<long> returns;\n  if (game.size() != guess.size())\
    \ {\n    throw \"error: list length mismatch\";\n  }\n  for (int i = 0; i < game.size();\
    \ i++) {\n    returns.push_back(std::abs(game[i] - guess[i]));\n  }\n  return\
    \ returns;", "    std::vector<long>result;\n    for(int i=0;i<game.size();i++){\n\
    \        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;",
  "     std::vector<long> v;\n     for(int i=0;i<game.size();i++){\n          int\
    \ temp=abs(game[i]-guess[i]);\n          v.push_back(temp);\n     }\n     return\
    \ v;", "\tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] != guess[i])\
    \ {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\t\t}\n\t}\n\treturn guess;",
  "  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    long\
    \ g = game[i];\n    long q = guess[i];\n    result.push_back(abs(g - q));\n  }\n\
    \  return result;", "    std::vector<long> result;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n\
    \        }\n        else{\n            result.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return result;", "    int size = game.size();\n    std::vector<long>\
    \ res;\n    res.reserve(size);\n    for (int i = 0; i < size; i++) {\n       \
    \ res.push_back(abs(game[i] - guess[i]));\n    }\n    return res;", "    for(int\
    \ i = 0; i < game.size(); i++){\n        game[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return game;", "\tstd::vector<long> vec;\n\tint sum=0;\n\t// std::cout<<game.size()<<std::endl;\n\
    \tfor(int i=0;i<game.size();i++){\n\t\tsum=game[i]-guess[i];\n\t\tif(sum<0){\n\
    \t\t\tsum*=-1;\n\t\t}\n\t\tvec.push_back(sum);\n\t}\n\treturn vec;", "   std::vector<long>\
    \ res;\n   for(int i = 0; i < game.size(); i++) {\n     res.push_back(std::abs(game[i]\
    \ - guess[i]));\n   }\n   return res;", "    std::vector<long> answer(game.size());\n\
    \    for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i])\n\
    \            answer[i] = 0;\n        else\n            answer[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return answer;"]
stop_tokens:
- "\n}"
