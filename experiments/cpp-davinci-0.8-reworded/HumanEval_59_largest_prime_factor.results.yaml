language: cpp
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    std::vector<long> factors;\n    // TODO: write code here to compute\
    \ factors\n    long copy_n = n;\n    while(copy_n % 2 == 0){\n        factors.push_back(2);\n\
    \        copy_n /= 2;\n    }\n    for(long i = 3; i < sqrt(copy_n); i+=2){\n \
    \       while(copy_n % i == 0){\n            factors.push_back(i);\n         \
    \   copy_n /= i;\n        }\n    }\n    if(copy_n > 2){\n        factors.push_back(copy_n);\n\
    \    }\n    // Factors will contain all the prime factors of n\n    // The last\
    \ element of the vector is the largest prime factor.\n    return factors.back();\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp1apctjdr: /tmp/tmp1apctjdr.cpp:13: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_factor = 0;\n    // Check if the number is even.\n  \
    \  if (n % 2 == 0) {\n        largest_factor = 2;\n        // Divide the number\
    \ by 2, until it is odd.\n        while (n % 2 == 0) {\n            n /= 2;\n\
    \        }\n    }\n    // Now n is odd and we only need to check odd numbers.\n\
    \    // We can check 3, 5, 7, ... but the number of times we need to check is\
    \ halved.\n    // We only need to check the factor <= sqrt(n).\n    // e.g. to\
    \ check if n = 100 has factor, we only need to check factor <= 10.\n    for (long\
    \ i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            // Divide the number by i, until it is divisible by other\
    \ factor.\n            while (n % i == 0) {\n                n /= i;\n       \
    \     }\n        }\n    }\n    // This part is tricky.\n    // If n is prime,\
    \ n > largest_factor.\n    // If n is not prime, n == 1.\n    // So we can just\
    \ return the max of n and largest_factor.\n    return std::max(n, largest_factor);\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n    \
    \        n = n / i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n  \
    \  assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p, prime;\n    p = 2;\n    prime = 0;\n    while (n > 1) {\n\
    \        while (n % p == 0) {\n            n = n / p;\n            prime = p;\n\
    \        }\n        p += 1;\n    }\n    return prime;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 2;\n    for (long factor = 2; factor < n; factor++)\
    \ {\n        if (n % factor == 0) {\n            if (factor > largest) {\n   \
    \             largest = factor;\n            }\n            n /= factor;\n   \
    \     }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpefxx60i1: /tmp/tmpefxx60i1.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126864
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\nlong largestPrime=1;\nfor(long i=2;i<=n;i++){\n\tif(n%i==0){\n\t\tlargestPrime=i;\n\
    \t\tn=n/i;\n\t\ti=i-1;\n\t}\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o3qynjr.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp4o3qynjr.cpp:17:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   17 | int main() {\n      |     \
    \       ^\n/tmp/tmp4o3qynjr.cpp:24:1: error: expected \u2018}\u2019 at end of\
    \ input\n   24 | }\n      | ^\n/tmp/tmp4o3qynjr.cpp:8:35: note: to match this\
    \ \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |        \
    \                           ^\n/tmp/tmp4o3qynjr.cpp:24:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   24 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tfor (long i = 2; i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlong ans\
    \ = largest_prime_factor(n / i);\n\t\t\treturn ans;\n\t\t}\n\t}\n\treturn n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long prime = 2;\n    while (n % prime == 0) {\n        n /= prime;\n\
    \    }\n    prime = 3;\n    long max_factor = (long)sqrt(n);\n    while (n > 1\
    \ && prime <= max_factor) {\n        if (n % prime == 0) {\n            n /= prime;\n\
    \            max_factor = (long)sqrt(n);\n        } else {\n            prime\
    \ += 2;\n        }\n    }\n    if (n == 1) return prime - 2;\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    while(n % 2 == 0) {\n        largest = 2;\n\
    \        n /= 2;\n    }\n    for(long i = 3; i <= std::sqrt(n); i += 2) {\n  \
    \      while(n % i == 0) {\n            largest = i;\n            n /= i;\n  \
    \      }\n    }\n    if(n > 2) {\n        largest = n;\n    }\n    return largest;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime =\
    \ 2;\n        n /= 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n  \
    \      while (n % i == 0) {\n            max_prime = i;\n            n /= i;\n\
    \        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // 0 < n <= 2147483647\n    assert(n > 1);\n    int largest_prime\
    \ = -1;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 0;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0)\
    \ {\n            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126864
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\nlong maxp = -1;\nfor (long i = 2; i <= n / i; i++) {\nwhile (n % i ==\
    \ 0) {\nmaxp = i;\nn /= i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe06gef1g.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpe06gef1g.cpp:15:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   15 | int main() {\n      |     \
    \       ^\n/tmp/tmpe06gef1g.cpp:22:1: error: expected \u2018}\u2019 at end of\
    \ input\n   22 | }\n      | ^\n/tmp/tmpe06gef1g.cpp:10:35: note: to match this\
    \ \u2018{\u2019\n   10 | for (long i = 2; i <= n / i; i++) {\n      |        \
    \                           ^\n/tmp/tmpe06gef1g.cpp:22:1: error: expected \u2018\
    }\u2019 at end of input\n   22 | }\n      | ^\n/tmp/tmpe06gef1g.cpp:8:35: note:\
    \ to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n \
    \     |                                   ^\n/tmp/tmpe06gef1g.cpp:22:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   22 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660126864
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    assert(!is_prime(n));\n    long largest = 0;\n\
    \    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n \
    \           largest = factor;\n            while (n % factor == 0) {\n       \
    \         n /= factor;\n            }\n        }\n        factor += 1;\n    }\n\
    \    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpatfft5x6.cpp:2:\n/tmp/tmpatfft5x6.cpp: In function \u2018long\
    \ int largest_prime_factor(long int)\u2019:\n/tmp/tmpatfft5x6.cpp:10:13: error:\
    \ \u2018is_prime\u2019 was not declared in this scope\n   10 |     assert(!is_prime(n));\n\
    \      |             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    //\n    // YOUR CODE HERE\n    //\n    int i;\n    for(i=2;i<=n;i++)\n\
    \    {\n        if(n%i==0)\n        {\n            n=n/i;\n            i--;\n\
    \        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // Your code here!\n  long i=2;\n  while(i*i<=n){\n    if(n%i==0){\n\
    \      n/=i;\n    }\n    else{\n      i++;\n    }\n  }\n  return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n / 2; i++) {\n        if (n % i == 0)\
    \ {\n            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int i;\n    while(n%2==0)\n    {\n        n/=2;\n    }\n    for(i=3;i<=sqrt(n);i+=2)\n\
    \    {\n        while(n%i==0)\n        {\n            n/=i;\n        }\n    }\n\
    \    if(n>2)\n    {\n        return n;\n    }\n    return i-2;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  for (long i = 2; i < sqrt(n); i++) {\n    if (n % i == 0) {\n      return\
    \ largest_prime_factor(n / i);\n    }\n  }\n  return n;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpf8urmwpi: /tmp/tmpf8urmwpi.cpp:19: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n    long i = 3;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n   \
    \     } else {\n            i = i + 2;\n        }\n    }\n    return n;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpbg0toioy: /tmp/tmpbg0toioy.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  if (n < 2) return 0;\n  long lpf = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      lpf = i;\n      while (n % i == 0) {\n     \
    \   n /= i;\n      }\n    }\n  }\n  return lpf;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (n % i != 0) {\n        i++;\n    }\n    return\
    \ i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpjbzf17an: /tmp/tmpjbzf17an.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_prime_factor = 1;\n    long divisor = 2;\n    long quotient\
    \ = n;\n    long remainder = 0;\n    while (quotient > 1) {\n        remainder\
    \ = quotient % divisor;\n        quotient = quotient / divisor;\n        if (remainder\
    \ == 0) {\n            max_prime_factor = divisor;\n            quotient = quotient\
    \ / divisor;\n        }\n        divisor += 1;\n    }\n    return max_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpul9c23sw: /tmp/tmpul9c23sw.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // START\n    int max = 2;\n    for (int i = 2; i <= sqrt(n); i++)\
    \ {\n        if (n % i == 0) {\n            int m = i;\n            while (m >\
    \ 1) {\n                if (m % 2 == 0) {\n                    m /= 2;\n     \
    \           } else if (m % 3 == 0) {\n                    m /= 3;\n          \
    \      } else if (m % 5 == 0) {\n                    m /= 5;\n               \
    \ } else if (m % 7 == 0) {\n                    m /= 7;\n                } else\
    \ if (m % 11 == 0) {\n                    m /= 11;\n                } else if\
    \ (m % 13 == 0) {\n                    m /= 13;\n                } else if (m\
    \ % 17 == 0) {\n                    m /= 17;\n                } else if (m % 19\
    \ == 0) {\n                    m /= 19;\n                } else if (m % 23 ==\
    \ 0) {\n                    m /= 23;\n                } else if (m % 29 == 0)\
    \ {\n                    m /= 29;\n                } else if (m % 31 == 0) {\n\
    \                    m /= 31;\n                } else if (m % 37 == 0) {\n   \
    \                 m /= 37;\n                } else if (m % 41 == 0) {\n      \
    \              m /= 41;\n                } else if (m % 43 == 0) {\n         \
    \           m /= 43;\n                } else if (m % 47 == 0) {\n            \
    \        m /= 47;\n                } else if (m % 53 == 0) {\n               \
    \     m /= 53;\n                } else if (m % 59 == 0) {\n                  \
    \  m /= 59;\n                } else if (m % 61 == 0) {\n                    m\
    \ /= 61;\n                } else if (m % 67 == 0) {\n                    m /=\
    \ 67;\n                } else if (m % 71 == 0) {\n                    m /= 71;\n\
    \                } else if (m % 73 == 0) {\n                    m /= 73;\n   \
    \             } else if (m % 79 == 0) {\n                    m /= 79;\n      \
    \          } else if (m % 83 == 0) {\n                    m /\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5hzmeqai.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp5hzmeqai.cpp:61:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmp5hzmeqai.cpp:62:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   62\
    \ | int main() {\n      |            ^\n/tmp/tmp5hzmeqai.cpp:69:1: error: expected\
    \ \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp5hzmeqai.cpp:14:27:\
    \ note: to match this \u2018{\u2019\n   14 |             while (m > 1) {\n   \
    \   |                           ^\n/tmp/tmp5hzmeqai.cpp:69:1: error: expected\
    \ \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp5hzmeqai.cpp:12:25:\
    \ note: to match this \u2018{\u2019\n   12 |         if (n % i == 0) {\n     \
    \ |                         ^\n/tmp/tmp5hzmeqai.cpp:69:1: error: expected \u2018\
    }\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp5hzmeqai.cpp:11:40: note:\
    \ to match this \u2018{\u2019\n   11 |     for (int i = 2; i <= sqrt(n); i++)\
    \ {\n      |                                        ^\n/tmp/tmp5hzmeqai.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp5hzmeqai.cpp:8:35:\
    \ note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n)\
    \ {\n      |                                   ^\n/tmp/tmp5hzmeqai.cpp:69:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   69 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  for (long i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      n /= i;\n\
    \      i--;\n    }\n  }\n  return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxm34t70l: /tmp/tmpxm34t70l.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    if (n % 2 == 0) {\n        // n is a multiple\
    \ of 2\n        n /= 2;\n        while (n % 2 == 0) {\n            n /= 2;\n \
    \       }\n    }\n    // n is now an odd number\n    for (long i = 3; i < n; i\
    \ += 2) {\n        if (n % i == 0) {\n            n /= i;\n            while (n\
    \ % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmphc90cjdo: /tmp/tmphc90cjdo.cpp:31: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong curr = n;\n\tlong largestFactor = 0;\n\t// keep dividing out all\
    \ 2s until n is odd.\n\twhile (curr % 2 == 0) {\n\t\tlargestFactor = 2;\n\t\t\
    curr /= 2;\n\t}\n\t// from 3 to sqrt(n)\n\tfor (long i = 3; i <= sqrt(curr); i+=2)\
    \ {\n\t\twhile (curr % i == 0) {\n\t\t\tlargestFactor = i;\n\t\t\tcurr /= i;\n\
    \t\t}\n\t}\n\t// curr is either 1 or a prime.\n\treturn std::max(largestFactor,\
    \ curr);\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans=1;\n    // write your code here\n    for(long i=2;i<n;i++){\n\
    \        if(n%i==0){\n            n/=i;\n            ans=i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpmfopw0kn: /tmp/tmpmfopw0kn.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // YOUR CODE HERE\n    if(n<=1) return n;\n    long i;\n    for(i=2;i<=sqrt(n);i++){\n\
    \      if(n%i==0) {\n        n/=i;\n        i--;\n      }\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    while (q % p == 0) {\n        q\
    \ = q / p;\n    }\n    p += 1;\n    while (p * p <= q) {\n        if (q % p ==\
    \ 0) {\n            q = q / p;\n        } else {\n            p += 2;\n      \
    \  }\n    }\n    return q;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long result = 0;\n    long start = 2;\n    while (n > 1) {\n     \
    \   if (n % start == 0) {\n            n /= start;\n            result = start;\n\
    \        } else {\n            start++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long i=2;\n  for(i=2;i<=sqrt(n);i++){\n      if(n%i==0){\n         \
    \ n/=i;\n          i--;\n      }\n  }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return largest_prime_factor(n / i);\n        }\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (n != 1) {\n        if (n % p == 0) {\n   \
    \         n /= p;\n        } else {\n            p += 1;\n        }\n    }\n \
    \   return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int m = n;\n    int p = 2;\n    while (m % p == 0)\n        m /= p;\n\
    \    p = 3;\n    int lpf = p;\n    while (m > 1) {\n        if (m % p == 0) {\n\
    \            lpf = p;\n            m /= p;\n        } else {\n            p +=\
    \ 2;\n        }\n    }\n    return lpf;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n > 1);\n\tlong i, x;\n\tfor (i = 2; i * i <= n; i++) {\n\t\t\
    x = n;\n\t\tif (x % i == 0) {\n\t\t\twhile (x % i == 0) {\n\t\t\t\tx /= i;\n\t\
    \t\t}\n\t\t\tif (x == 1) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp6msvs6pr: /tmp/tmp6msvs6pr.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // Assume n > 1 and is not a prime\n    long i = 2;\n    while (i\
    \ < n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong factor = 1;\n\tlong x = n;\n\twhile(x > 1) {\n\t\tbool prime =\
    \ true;\n\t\tfor(long i = 2; i < x; i++) {\n\t\t\tif(x % i == 0) {\n\t\t\t\tprime\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(prime) {\n\t\t\tfactor = x;\n\
    \t\t\tbreak;\n\t\t}\n\t\tx--;\n\t}\n\treturn factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpcaadow8s: /tmp/tmpcaadow8s.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long p = 2; p <= n; p++) {\n        // divide p into n as many\
    \ times as possible.\n        while (n % p == 0) {\n            n /= p;\n    \
    \    }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpij4r3r7t: /tmp/tmpij4r3r7t.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largestFactor = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            // Update the largest factor\n        \
    \    largestFactor = i;\n            // Narrow down the scope of the number\n\
    \            while (n % i == 0) {\n                n /= i;\n            }\n  \
    \      }\n        i += 1;\n    }\n    return largestFactor;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  std::vector<long> prime;\n  prime.push_back(2);\n  for(long i = 3; i\
    \ < n; i++) {\n    bool flag = true;\n    for(long j = 0; j < prime.size(); j++)\
    \ {\n      if(i % prime[j] == 0) {\n        flag = false;\n        break;\n  \
    \    }\n    }\n    if(flag) {\n      prime.push_back(i);\n    }\n  }\n  std::vector<long>\
    \ ans;\n  for(long i = 0; i < prime.size(); i++) {\n    if(n % prime[i] == 0)\
    \ {\n      ans.push_back(prime[i]);\n    }\n  }\n  return ans[ans.size() - 1];\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int largest = 2;\n    while (n > largest) {\n        if (n % largest\
    \ == 0) {\n            n /= largest;\n        } else {\n            largest +=\
    \ 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long k = 2;\n  long m = 0;\n  for (k = 2; k <= sqrt(n); k++) {\n   \
    \ if (n % k == 0) {\n      m = n / k;\n      break;\n    }\n  }\n  if (m == 0)\n\
    \    return n;\n  return largest_prime_factor(m);\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long largest_prime_factor = 2;\n  while (n > 1) {\n\
    \    while (n % largest_prime_factor == 0) {\n      n /= largest_prime_factor;\n\
    \    }\n    largest_prime_factor++;\n  }\n  return largest_prime_factor - 1;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    if (n == 2) {\n        return 2;\n    }\n    if (n % 2 == 0) {\n \
    \       return largest_prime_factor(n / 2);\n    }\n    for (long i = 3; i < n;\
    \ i += 2) {\n        if (n % i == 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return n;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // Assume n is not a prime. \n  assert(n > 1);\n  // Long's range is\
    \ from -9223372036854775808 to 9223372036854775807.\n  assert(n <= 9223372036854775807);\n\
    \  int res = 0;\n  while(n%2 == 0)\n  {\n    res = 2;\n    n /= 2;\n  }\n  for(int\
    \ i = 3; i <= sqrt(n); i+=2)\n  {\n    while(n%i == 0)\n    {\n      res = i;\n\
    \      n /= i;\n    }\n  }\n  if(n > 2)\n    res = n;\n  return res;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 2;\n    long divisor = 2;\n    while (divisor * divisor\
    \ <= n) {\n        if (n % divisor == 0) {\n            largest = divisor;\n \
    \           n /= divisor;\n        } else {\n            divisor += 1;\n     \
    \   }\n    }\n    if (n > largest) {\n        largest = n;\n    }\n    return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime_factor = 1;\n\tfor (long i = 2; i <= n; i++) {\n\t\
    \tif (n % i == 0) {\n\t\t\tn /= i;\n\t\t\tlargest_prime_factor = i;\n\t\t}\n\t\
    }\n\treturn largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp00owqnay: /tmp/tmp00owqnay.cpp:21: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      long p = n / i;\n            if (is_prime(p)) {\n                return\
    \ p;\n            }\n        }\n    }\n    assert(false);\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbq2who9a.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpbq2who9a.cpp:12:17: error: \u2018is_prime\u2019 was not\
    \ declared in this scope\n   12 |             if (is_prime(p)) {\n      |    \
    \             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660142898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\t// Remember that 1 is not a prime number\n\tassert(n > 1);\n\t// Start\
    \ with the smallest prime number, 2\n\tlong cur = 2;\n\twhile (n > 1) {\n\t\t\
    if (n % cur == 0) {\n\t\t\t// n is divisible by cur.\n\t\t\t// Divide n by cur\
    \ and keep dividing by cur\n\t\t\t// until n is no longer divisible by cur.\n\t\
    \t\t// This removes all factors of cur from n.\n\t\t\twhile (n % cur == 0) {\n\
    \t\t\t\tn /= cur;\n\t\t\t}\n\t\t\t// cur is the largest prime factor we've seen\
    \ so far\n\t\t\t// because we've removed all of its other factors from n.\n\t\t\
    \tlargest = cur;\n\t\t}\n\t\t// Move to the next possible prime factor\n\t\tcur++;\n\
    \t}\n\treturn largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0au6ohr.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpp0au6ohr.cpp:24:4: error: \u2018largest\u2019 was not declared\
    \ in this scope\n   24 |    largest = cur;\n      |    ^~~~~~~\n/tmp/tmpp0au6ohr.cpp:29:9:\
    \ error: \u2018largest\u2019 was not declared in this scope\n   29 |  return largest;\n\
    \      |         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: implement this function\n    // TODO: returns a value just\
    \ to avoid a warning\n    if(n<2)\n        return n;\n    else{\n        long\
    \ num=n;\n        while(n%2==0)\n            n/=2;\n        for(long i=3;i<=sqrt(n);i+=2){\n\
    \            while(n%i==0)\n                n/=i;\n        }\n        if(n>2)\n\
    \            return n;\n        else\n            return num/n;\n    }\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp352fbuha: /tmp/tmp352fbuha.cpp:30: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // Note: if n is prime, then n will be returned (this is included in\
    \ the\n  // test cases).\n  \n  // NOTE: YOU CANNOT USE <set> OR <map> TO SOLVE\
    \ THIS PROBLEM. \n  // Please don't ask me about this again. :)\n  \n  // Use\
    \ the Fundamental Theorem of Arithmetic to solve this problem.\n  // (https://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic)\n\
    \  long largest = 1;\n  for (long i = 2; i * i <= n; i++) {\n    if (n % i ==\
    \ 0) {\n      largest = i;\n      while (n % i == 0) {\n        n /= i;\n    \
    \  }\n    }\n  }\n  if (n > 1) {\n    largest = n;\n  }\n  return largest;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long i;\n  for (i = 2; i * i <= n; i++) {\n    if (n % i == 0) {\n \
    \     n /= i;\n    }\n  }\n  return n;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpzxafk8vu: /tmp/tmpzxafk8vu.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    //  assert(n >= 2);\n    long lpf = 1;\n    // if (n % 2 == 0) {\n\
    \    //     lpf = 2;\n    //     while (n % 2 == 0) {\n    //         n /= 2;\n\
    \    //     }\n    // }\n    // long f = 3;\n    // long root_n = sqrt(n);\n \
    \   // while (n > 1 && f <= root_n) {\n    //     if (n % f == 0) {\n    //  \
    \       lpf = f;\n    //         while (n % f == 0) {\n    //             n /=\
    \ f;\n    //         }\n    //         root_n = sqrt(n);\n    //     }\n    //\
    \     f += 2;\n    // }\n    // if (n == 1) {\n    //     return lpf;\n    //\
    \ } else {\n    //     return n;\n    // }\n    // ////////////////////////////////////////////////////////\n\
    \    while (n % 2 == 0) {\n        lpf = 2;\n        n /= 2;\n    }\n    for (int\
    \ i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            lpf\
    \ = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        lpf =\
    \ n;\n    }\n    return lpf;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // your code here\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmppte6kqba: /tmp/tmppte6kqba.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // What happens if we repeatedly divide n by its smallest\n    //\
    \ factor?\n    long factor = 2;\n    while (n > 1) {\n        // divide n by factor\
    \ until it is no longer divisible\n        while (n % factor == 0) {\n       \
    \     n /= factor;\n        }\n        // Now try the next factor\n        factor\
    \ += 1;\n    }\n    return factor - 1;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n > 1);\n\tlong i = 2;\n\tfor (; i * i < n; i++) {\n\t\twhile\
    \ (n % i == 0)\n\t\t\tn /= i;\n\t}\n\treturn n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpwgtj89s5: /tmp/tmpwgtj89s5.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long f = 2;\n    while (n > 1) {\n        while (n % f == 0) {\n \
    \           n /= f;\n        }\n        if (f == 2) {\n            f = 3;\n  \
    \      } else {\n            f += 2;\n        }\n    }\n    return f;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpb0fvhmpk: /tmp/tmpb0fvhmpk.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tstd::vector<long> factors;\n\tfor (long i = 2; i <= n / i; i++) {\n\t\
    \twhile (n % i == 0) {\n\t\t\tn /= i;\n\t\t\tfactors.push_back(i);\n\t\t}\n\t\
    }\n\tif (n > 1) {\n\t\tfactors.push_back(n);\n\t}\n\treturn factors.back();\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong i;\n\tfor (i = 2; i * i <= n; i++) {\n\t\twhile (n % i == 0) {\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\treturn n;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp2micyylq: /tmp/tmp2micyylq.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long largest_prime_factor = 2;\n  long largest_factorable = n;\n  //\
    \ Here we divide n by 2 and floor the result, since we know that n is not\n  //\
    \ divisible by 2.\n  for (long divisor = 2; divisor <= largest_factorable; divisor++)\
    \ {\n    if (largest_factorable % divisor == 0) {\n      // Here we check if divisor\
    \ is prime, since we don't want to\n      // increment the largest prime factor\
    \ if the factor is not prime.\n      bool is_prime = true;\n      for (long factor\
    \ = 2; factor <= divisor; factor++) {\n        if (divisor % factor == 0) {\n\
    \          is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        largest_prime_factor = divisor;\n        largest_factorable = largest_factorable\
    \ / divisor;\n      }\n    }\n  }\n  return largest_prime_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpwt4jl_30: /tmp/tmpwt4jl_30.cpp:34: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n>1);\n  for(long factor=2; factor*factor<=n; ++factor) {\n \
    \   if(n%factor==0) {\n      n = n/factor;\n      for(long factor2=2; factor2*factor2<=n;\
    \ ++factor2) {\n        if(n%factor2==0) {\n          n = n/factor2;\n       \
    \   factor2 = 2;\n        }\n      }\n      factor = 2;\n    }\n  }\n  return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return largest_prime_factor(n / i);\n        }\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long d = 3;\n    while (n > 1)\
    \ {\n        while (n % 2 == 0) {\n            largest_prime_factor = 2;\n   \
    \         n = n / 2;\n        }\n        while (n % d == 0) {\n            largest_prime_factor\
    \ = d;\n            n = n / d;\n        }\n        d = d + 2;\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong factor=0;\n\tfor(long i=2;i<=n;i++){\n\t\twhile(n%i==0){\n\t\t\t\
    factor=i;\n\t\t\tn=n/i;\n\t\t}\n\t}\n\treturn factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong i = 2;\n\tlong max = 1;\n\twhile (i * i <= n) {\n\t\tif (n % i\
    \ == 0) {\n\t\t\tmax = i;\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t\
    }\n\tif (n > 1) {\n\t\tmax = n;\n\t}\n\treturn max;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      n\
    \ /= i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\t\n\twhile(n % 2 == 0)\n\t\tn /= 2;\n\tfor(long i = 3; i <= std::sqrt(n);\
    \ i += 2)\n\t{\n\t\twhile(n % i == 0)\n\t\t\tn /= i;\n\t}\n\treturn n;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpzyj1ur6n: /tmp/tmpzyj1ur6n.cpp:22: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long a = n;\n    while (a % 2 == 0) {\n        a /= 2;\n    }\n  \
    \  long f = 3;\n    while (a != 1) {\n        while (a % f == 0) {\n         \
    \   a /= f;\n        }\n        f += 2;\n    }\n    return f - 2;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // Your code here.\n  long largest = 0;\n  while(n%2 == 0){\n    largest\
    \ = 2;\n    n = n/2;\n  }\n  long i;\n  for(i = 3; i <= sqrt(n); i = i+2){\n \
    \   while(n%i == 0){\n      largest = i;\n      n = n/i;\n    }\n  }\n  if(n >\
    \ 2){\n    largest = n;\n  }\n  return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // for (long i = 2; i < n; i++) {\n    //     if (n % i == 0) {\n\
    \    //         return largest_prime_factor(n / i);\n    //     }\n    // }\n\
    \    // return n;\n    for (long i = n; i > 1; i--) {\n        if (n % i == 0)\
    \ {\n            for (long j = 2; j < i; j++) {\n                if (i % j ==\
    \ 0) {\n                    break;\n                }\n                if (j ==\
    \ i - 1) {\n                    return i;\n                }\n            }\n\
    \        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // YOUR CODE HERE\n    long largest_prime = 0;\n    if (n == 1) {\n\
    \        return n;\n    }\n    if (n % 2 == 0) {\n        largest_prime = 2;\n\
    \        n = n / 2;\n    }\n    while (n % 2 == 0) {\n        n = n / 2;\n   \
    \ }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) {\n\
    \            largest_prime = i;\n            n = n / i;\n        }\n        while\
    \ (n % i == 0) {\n            n = n / i;\n        }\n    }\n    if (n > 2) {\n\
    \        largest_prime = n;\n    }\n    return largest_prime;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long factor = n;\n  while (true) {\n    long d = 2;\n\
    \    while (d <= factor) {\n      if (factor % d == 0) {\n        factor = factor\
    \ / d;\n        break;\n      }\n      d += 1;\n    }\n    if (d > factor) {\n\
    \      return factor;\n    }\n  }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpd2h8hiwv: /tmp/tmpd2h8hiwv.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    // TODO: implement this function\n    long largest=1;\n\
    \    while(n%2==0){\n        largest=2;\n        n=n/2;\n    }\n    int i=3;\n\
    \    while(i<=sqrt(n)){\n        if(n%i==0){\n            largest=i;\n       \
    \     n=n/i;\n        }\n        else{\n            i=i+2;\n        }\n    }\n\
    \    if(n>2){\n        largest=n;\n    }\n    return largest;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            n /= factor;\n        } else {\n            factor++;\n     \
    \   }\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n>1);\n  assert(n==2 || n%2!=0);\n  int i;\n  for(i=3;i<=sqrt(n);i+=2)\n\
    \  {\n    if(n%i==0)\n    {\n      n/=i;\n      if(n==1)\n      {\n        return\
    \ i;\n      }\n      i=1;\n    }\n  }\n  return n;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpygt3bow2: /tmp/tmpygt3bow2.cpp:10: long int largest_prime_factor(long
    int): Assertion `n==2 || n%2!=0'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n /\
    \ i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return n;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long max_p = 1;\n    while (p <= n) {\n        if\
    \ (n % p == 0) {\n            max_p = p;\n            n /= p;\n        } else\
    \ {\n            p++;\n        }\n    }\n    return max_p;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long fact = 2;\n    while (n > 1) {\n        while (n % fact == 0)\
    \ {\n            n /= fact;\n        }\n        fact += 1;\n    }\n    return\
    \ fact - 1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n   \
    \ assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // Insert your code here.\n    long prime_factor = 2;\n    while(n\
    \ > prime_factor){\n        if(n % prime_factor == 0){\n            n = n / prime_factor;\n\
    \            prime_factor = 2;\n        }\n        else{\n            prime_factor++;\n\
    \        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int result = 2;\n    while (n > 1) {\n        if (n % result == 0)\
    \ {\n            n /= result;\n        } else {\n            result++;\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int factors = 0;\n    long largest_prime = 1;\n    int i = 1;\n  \
    \  while (i <= n){\n        if(n % i == 0){\n            factors = 0;\n      \
    \      int j = 1;\n            while (j <= i){\n                if(i % j == 0){\n\
    \                    factors++;\n                }\n                j++;\n   \
    \         }\n            if(factors == 2){\n                largest_prime = i;\n\
    \            }\n        }\n        i++;\n    }\n    return largest_prime;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\nlong largest_factor=1;\nfor(long i=2;i<=n;i++){\n    if(n%i==0){\n   \
    \     bool isprime=true;\n        for(long j=2;j<i;j++){\n            if(i%j==0){\n\
    \                isprime=false;\n                break;\n            }\n     \
    \   }\n        if(isprime){\n            largest_factor=i;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dqd50sg.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp2dqd50sg.cpp:24:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   24 | int main() {\n      |     \
    \       ^\n/tmp/tmp2dqd50sg.cpp:31:1: error: expected \u2018}\u2019 at end of\
    \ input\n   31 | }\n      | ^\n/tmp/tmp2dqd50sg.cpp:8:35: note: to match this\
    \ \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |        \
    \                           ^\n/tmp/tmp2dqd50sg.cpp:31:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   31 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // TODO: Implement this function\n  if(n==2) return 2;\n  else if(n%2==0)\n\
    \  {\n      while(n%2==0)\n      {\n          n/=2;\n      }\n  }\n  long max_prime\
    \ = -1;\n  for(long p=3;p<=sqrt(n);p+=2)\n  {\n      if(n%p==0)\n      {\n   \
    \       max_prime = p;\n          while(n%p==0)\n          {\n              n/=p;\n\
    \          }\n      }\n  }\n  if(n>2)\n  {\n      max_prime = n;\n  }\n  return\
    \ max_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n  \
    \  assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  assert(n % 2 != 0);\n  //  Fill in this function.\n\
    \  long prime = 2;\n  while (n > prime) {\n    if (n % prime == 0) {\n      n\
    \ /= prime;\n    } else {\n      prime++;\n    }\n  }\n  return prime;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpp7muc0zr: /tmp/tmpp7muc0zr.cpp:10: long int largest_prime_factor(long
    int): Assertion `n % 2 != 0'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest = 0;\n\tint i = 2;\n\twhile (i < n / 2) {\n\t\tif (n %\
    \ i == 0) {\n\t\t\tlargest = i;\n\t\t\tn /= i;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\
    \t\t}\n\t}\n\tif (n > largest) {\n\t\tlargest = n;\n\t}\n\treturn largest;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n//initialize the variable and limit of factor to sqrt of n\n  long max_factor\
    \ = -1;\n  long limit = sqrt(n);\n  //divide n by 2 while n is even\n  while(n%2\
    \ == 0) {\n    max_factor = 2;\n    n = n/2;\n  }\n  //divide n by its odd factors\
    \ in the range of 3 and limit\n  for(long i = 3; i < limit; i+=2) {\n    while(n%i\
    \ == 0) {\n      max_factor = i;\n      n = n/i;\n    }\n  }\n  // if n is a prime\
    \ number then return n\n  if(n > 2) {\n    max_factor = n;\n  }\n  return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp_21mcucp: /tmp/tmp_21mcucp.cpp:32: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i=2;\n    while(i<=n){\n        if(n%i==0){\n            n/=i;\n\
    \        }\n        else\n            i++;\n    }\n    return i;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  int i;\n  for (i = 2; i * i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      n /= i;\n    }\n  }\n  return n;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpvfrv4kci: /tmp/tmpvfrv4kci.cpp:21: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_factor = 0;\n    // If n is odd, find the largest odd\
    \ factor of n. Otherwise, find the\n    // largest factor of n/2.\n    long f\
    \ = n & 1 ? n : n/2;\n    for (; f > 1; f -= 2) {\n        // If f is a factor\
    \ of n, then try to reduce the value of n by\n        // dividing by f.\n    \
    \    if (n % f == 0) {\n            // Divide n by f, and update the largest factor.\n\
    \            n /= f;\n            largest_factor = f;\n            // After dividing\
    \ by f, reset f to n/2. f is at least 2, so the\n            // loop condition\
    \ will always be satisfied.\n            f = n/2;\n        }\n    }\n    return\
    \ largest_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxgmaqbda: /tmp/tmpxgmaqbda.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // TODO: implement me!\n  long f=2;\n  while(n%f!=0)\n  {\n    f++;\n\
    \  }\n  return f;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpav6k2194: /tmp/tmpav6k2194.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142902
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long factor = 2; factor * factor <= n; factor++) {\n        if\
    \ (n % factor == 0) {\n            n /= factor;\n            factor--;\n     \
    \   }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong factor = 2;\n\twhile (factor <= n) {\n\t\tif (n % factor == 0)\
    \ {\n\t\t\tn /= factor;\n\t\t} else {\n\t\t\tfactor += 1;\n\t\t}\n\t}\n\treturn\
    \ factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime_factor = 0;\n\tlong i = 2;\n\twhile (i <= n) {\n\t\
    \tif (n % i == 0) {\n\t\t\tlargest_prime_factor = i;\n\t\t\tn /= i;\n\t\t} else\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn largest_prime_factor;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong divisor = 2;\n\tlong largest = 1;\n\twhile (n > 1) {\n\t\twhile\
    \ (n % divisor == 0) {\n\t\t\tlargest = divisor;\n\t\t\tn /= divisor;\n\t\t}\n\
    \t\tdivisor += 1;\n\t}\n\treturn largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n            i--;\n        }\n    }\n    return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpzb4pl0q7: /tmp/tmpzb4pl0q7.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142902
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime = 0;\n\tlong divisor = 2;\n\twhile (n > 1) {\n\t\t\
    while (n % divisor == 0) {\n\t\t\tlargest_prime = divisor;\n\t\t\tn /= divisor;\n\
    \t\t}\n\t\tdivisor += 1;\n\t}\n\treturn largest_prime;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO\n    long r=(long)sqrt(n);\n    long f=2;\n    while(n>1)\n\
    \    {\n        while(n%f==0)\n        {\n            n/=f;\n        }\n     \
    \   f++;\n        if(f>r)\n        {\n            if(n>1)\n            {\n   \
    \             return n;\n            }\n            break;\n        }\n    }\n\
    \    return f;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp_gzqpg69: /tmp/tmp_gzqpg69.cpp:33: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142902
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long prime = 0;\n  while(n % 2 == 0) {\n    prime = 2;\n    n /= 2;\n\
    \  }\n  long factor = 3;\n  while(n > 1) {\n    while(n % factor == 0) {\n   \
    \   prime = factor;\n      n /= factor;\n    }\n    factor += 2;\n  }\n  return\
    \ prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong max = 0;\n\tlong end = (long)sqrt(n);\n\tfor (long i = 2; i <=\
    \ end; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlong count = 0;\n\t\t\twhile (n %\
    \ i == 0) {\n\t\t\t\tn /= i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count % 2 ==\
    \ 1) {\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t}\n\tif (n > max) {\n\t\tmax = n;\n\
    \t}\n\treturn max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long root = sqrt(n);\n    long i = root;\n    while (i > 1) {\n  \
    \      if (n % i == 0) {\n            if (i % 2 == 0 || i % 3 == 0 || i % 5 ==\
    \ 0 || i % 7 == 0) {\n                return (n / i);\n            }\n       \
    \     else {\n                return i;\n            }\n        }\n        i--;\n\
    \    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpfzzltnel: /tmp/tmpfzzltnel.cpp:27: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142902
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    while (n % 2 == 0) {\n       \
    \ largest_prime_factor = 2;\n        n = n / 2;\n    }\n    for (long i = 3; i\
    \ <= std::sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        largest_prime_factor\
    \ = n;\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142902
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong x = 2;\n\tlong largest = 0;\n\twhile (x <= n) {\n\t\tif (n % x\
    \ == 0) {\n\t\t\tn /= x;\n\t\t\tlargest = x;\n\t\t}\n\t\telse {\n\t\t\tx++;\n\t\
    \t}\n\t}\n\treturn largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\t// Fill in\n\tassert(n > 1);\n\tlong factor = 2;\n\tlong largest_factor\
    \ = 1;\n\twhile (n > 1) {\n\t\tif (n % factor == 0) {\n\t\t\tlargest_factor =\
    \ factor;\n\t\t\twhile (n % factor == 0) {\n\t\t\t\tn /= factor;\n\t\t\t}\n\t\t\
    }\n\t\tfactor += 1;\n\t}\n\treturn largest_factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong result=0;\n\tfor(long i=1;i<=n;i++){\n\t\tif(n%i==0){\n\t\t\tresult=i;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp15oz_b4o: /tmp/tmp15oz_b4o.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0)\n            n /= i;\n        else\n            i++;\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int prime = 2;\n    for (int prime = 2; prime <= n; prime++) {\n \
    \       if (n % prime == 0) {\n            n /= prime;\n            prime--;\n\
    \        }\n    }\n    return prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp63bgayuf: /tmp/tmp63bgayuf.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i=2;\n    while(n%i!=0){\n        i++;\n    }\n    return i;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpfvfrqwsd: /tmp/tmpfvfrqwsd.cpp:17: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      long factor = n / i;\n            if (factor > i)\n                return\
    \ largest_prime_factor(factor);\n            else\n                return largest_prime_factor(i);\n\
    \        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\nlong largest = 1;\nlong  p = 2;\nwhile (p * p <= n) {\n    if (n % p ==\
    \ 0) {\n        largest = p;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n    }\n    p += 1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwf46ikeg.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpwf46ikeg.cpp:20:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   20 | int main() {\n      |     \
    \       ^\n/tmp/tmpwf46ikeg.cpp:27:1: error: expected \u2018}\u2019 at end of\
    \ input\n   27 | }\n      | ^\n/tmp/tmpwf46ikeg.cpp:8:35: note: to match this\
    \ \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |        \
    \                           ^\n/tmp/tmpwf46ikeg.cpp:27:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   27 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660142903
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i=2;\n    while(n%i!=0)\n        i++;\n    if(n/i==1)\n     \
    \   return i;\n    return largest_prime_factor(n/i);\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // your code here...\n    long max = 0;\n    while(n%2 == 0){\n  \
    \      max = 2;\n        n /= 2;\n    }\n    for(int i = 3; i <= sqrt(n); i +=\
    \ 2){\n        while(n%i == 0){\n            max = i;\n            n /= i;\n \
    \       }\n    }\n    if(n > 2)\n        max = n;\n    return max;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong i = 2;\n\twhile (i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\
    \t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n \
    \           n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) {\n \
    \           if (n > 1)\n                return n;\n            break;\n      \
    \  }\n    }\n    return d;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpmet99fpx: /tmp/tmpmet99fpx.cpp:26: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // Check for prime\n    long start = 2;\n    for (long i = start;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            start = i;\n        \
    \    break;\n        }\n    }\n    long end = n / start;\n    for (long i = start;\
    \ i <= end; i++) {\n        if (n % i == 0) {\n            // Replace n with the\
    \ new factor\n            n = n / i;\n            i = start;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp78glfyzb: /tmp/tmp78glfyzb.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  //assert(n > 1);\n  //assert(!is_prime(n));\n  for (long i = 2; i <=\
    \ n / 2; i++) {\n    if (n % i == 0 && is_prime(i)) {\n      return i;\n    }\n\
    \  }\n  assert(false);\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8rg9fyi4.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp8rg9fyi4.cpp:12:23: error: \u2018is_prime\u2019 was not\
    \ declared in this scope\n   12 |     if (n % i == 0 && is_prime(i)) {\n     \
    \ |                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660142903
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long largest_prime_factor = 2;\n  while (n > largest_prime_factor)\
    \ {\n    if (n % largest_prime_factor == 0) {\n      n /= largest_prime_factor;\n\
    \    } else {\n      largest_prime_factor++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long largestPrimeFactor = 1;\n    for (long i\
    \ = 2; i <= n; i++) {\n        if (n % i == 0) {\n            if (i > largestPrimeFactor)\
    \ {\n                largestPrimeFactor = i;\n            }\n            n /=\
    \ i;\n            i--;\n        }\n    }\n    return largestPrimeFactor;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime_factor = 1;\n\tlong factor = 2;\n\twhile (n > 1)\
    \ {\n\t\tif (n % factor == 0) {\n\t\t\tlargest_prime_factor = factor;\n\t\t\t\
    while (n % factor == 0) {\n\t\t\t\tn /= factor;\n\t\t\t}\n\t\t}\n\t\tfactor +=\
    \ 1;\n\t}\n\treturn largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime_factor=1;\n\tlong largest_prime_factor_temp=1;\n\t\
    for(long i=2;i<=n;i++){\n\t\tif(n%i==0){\n\t\t\tif(largest_prime_factor_temp%i==0){\n\
    \t\t\t\tlargest_prime_factor_temp=largest_prime_factor_temp/i;\n\t\t\t}\n\t\t\t\
    largest_prime_factor_temp=largest_prime_factor_temp*i;\n\t\t\tlargest_prime_factor=i;\n\
    \t\t}\n\t}\n\treturn largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpuv3o1lz6: /tmp/tmpuv3o1lz6.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long i = 2;\n    while (n % i != 0) {\n      \
    \  i++;\n    }\n    if (n == i) {\n        return n;\n    }\n    return largest_prime_factor(n\
    \ / i);\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142903
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max = 1;\n    while (i <= n) {\n        if (n\
    \ % i == 0) {\n            max = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long biggest = 2;\n  for (long i = 2; i <= n; i++) {\n    if (n % i\
    \ == 0) {\n      biggest = i;\n      n /= i;\n      i--;\n    }\n  }\n  return\
    \ biggest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n\
    \            n /= p;\n        } else {\n            p++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i=0;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n         \
    \   n=n/i;\n            i--;\n        }\n    }\n    return i;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    long limit = n/2;\n    assert(n > 1);\n    for (i = 2;\
    \ i <= limit; i++) {\n        if (n % i == 0) {\n            // It is a factor.\
    \ Is it prime?\n            for (int j = 2; j < i; j++) {\n                if\
    \ (i % j == 0) {\n                    break;\n                }\n            }\n\
    \            return i;\n        }\n    }\n    assert(0);\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpohbyrpl2: /tmp/tmpohbyrpl2.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tint i = 2;\n\twhile (i < n) {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\
    \t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    if (n <= 1) {\n        return 1;\n    }\n    long prime = 2;\n   \
    \ while (n > 1) {\n        while (n % prime == 0) {\n            n /= prime;\n\
    \        }\n        prime += 1;\n    }\n    return prime - 1;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\t\tlong i;\n\t\tfor (i = 2; i < n; i++) {\n\t\t\t\tif (n % i == 0) {\n\
    \t\t\t\t\t\tlong r = largest_prime_factor(n / i);\n\t\t\t\t\t\tif (r > i) {\n\t\
    \t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn i;\n\t\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // the index of the first prime \n    long i = 2;\n    // the largest\
    \ prime factor\n    long ans = 1;\n    // while n not prime (n = prime * prime)\n\
    \    while (n != i) {\n        // if n % i == 0, then set n = n / i\n        if\
    \ (n % i == 0) {\n            // set the largest prime factor = i\n          \
    \  ans = i;\n            n = n / i;\n        } else {\n            // otherwise,\
    \ set i = i + 1\n            i = i + 1;\n        }\n    }\n    // since n is prime\
    \ now, n is the largest prime factor\n    if (n > ans) {\n        ans = n;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  for (long i = 2; i * i <= n; i++) {\n    if (n % i == 0) {\n      return\
    \ std::max(largest_prime_factor(n / i), largest_prime_factor(i));\n    }\n  }\n\
    \  return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n  \
    \  assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    long j = n;\n    for (i = 2; i <= sqrt(n); i++) {\n \
    \       if (n % i == 0) {\n            while (n % i == 0) {\n                n\
    \ = n / i;\n            }\n            if (n == 1) {\n                break;\n\
    \            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpk2twp4xs: /tmp/tmpk2twp4xs.cpp:26: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    long n1=n;\n    long max_prime=0;\n    while(n1%2==0){\n\
    \        max_prime=2;\n        n1=n1/2;\n    }\n    for(i=3;i<=sqrt(n1);i+=2){\n\
    \        while(n1%i==0){\n            max_prime=i;\n            n1=n1/i;\n   \
    \     }\n    }\n    if(n1>2){\n        max_prime=n1;\n    }\n    //max_prime=n1;\n\
    \    return max_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\t//insert your code here\n\tlong largest=0;\n\tlong j=2;\n\twhile(n%2==0){\n\
    \t\tn=n/2;\n\t\tlargest=2;\n\t}\n\tfor(long i=3;i<n;i+=2){\n\t\twhile(n%i==0){\n\
    \t\t\tn=n/i;\n\t\t\tlargest=i;\n\t\t}\n\t}\n\tif(n>2){\n\t\tlargest=n;\n\t}\n\t\
    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // Fill in this function\n    long p = 2;\n    while(p*p <= n){\n\
    \        if(n%p == 0){\n            n = n/p;\n        }\n        else{\n     \
    \       p++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    for (; i * i < n; i++) {\n        if (n % i == 0)\
    \ {\n            n /= i;\n        }\n    }\n    return n;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp6kay3fz8: /tmp/tmp6kay3fz8.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    if (n % 2 == 0) {\n        n = n / 2;\n    }\n    long factor = 3;\n\
    \    while (n != 1) {\n        if (n % factor == 0) {\n            n = n / factor;\n\
    \        } else {\n            factor += 2;\n        }\n    }\n    return factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    while (n % 2 == 0) {\n        largest = 2;\n\
    \        n /= 2;\n    }\n    for (long i = 3; i <= n; i += 2) {\n        while\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n \
    \   }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tassert(n>1);\n\tint i;\n\tfor(i=2;i<=n;i++){\n\t\tif(n%i==0){\n\t\t\t\
    break;\n\t\t}\n\t}\n\tlong max=-1;\n\twhile(n%i==0){\n\t\tn=n/i;\n\t\tmax=i;\n\
    \t}\n\tif(n==1){\n\t\treturn max;\n\t}\n\telse{\n\t\treturn largest_prime_factor(n);\n\
    \t}\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long factor = 1;\n  while (n % 2 == 0) {\n    factor = 2;\n    n /=\
    \ 2;\n  }\n  if (n == 1) {\n    return factor;\n  }\n  long i = 3;\n  while (n\
    \ != 1) {\n    while (n % i == 0) {\n      factor = i;\n      n /= i;\n    }\n\
    \    i += 2;\n  }\n  return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpke9cyei0: /tmp/tmpke9cyei0.cpp:13: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: Your code here.\n    long i;\n    long max;\n    i = 2;\n\
    \    max = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n            max\
    \ = i;\n            n = n / i;\n        }\n        else {\n            i = i +\
    \ 1;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long current_factor = 2;\n  long largest_factor = 2;\n  while (n > 1)\
    \ {\n    if (n % current_factor == 0) {\n      largest_factor = current_factor;\n\
    \      n /= current_factor;\n      while (n % current_factor == 0) {\n       \
    \ n /= current_factor;\n      }\n    }\n    current_factor += 1;\n  }\n  return\
    \ largest_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime = 2;\n\twhile (n % 2 == 0) {\n\t\tn /= 2;\n\t}\n\t\
    long factor = 3;\n\twhile (n > 1) {\n\t\twhile (n % factor == 0) {\n\t\t\tn /=\
    \ factor;\n\t\t\tlargest_prime = factor;\n\t\t}\n\t\tfactor += 2;\n\t}\n\treturn\
    \ largest_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long lpf = 1;\n    // Start with 2 and increase.\n\
    \    for (long i = 2; i <= n; i++) {\n        // Is i a prime?\n        long is_prime\
    \ = 1;\n        for (long j = 2; j <= i / 2; j++) {\n            if (i % j ==\
    \ 0) {\n                is_prime = 0;\n                break;\n            }\n\
    \        }\n        if (is_prime == 1) {\n            // If i is a prime and is\
    \ a factor of n then update the lpf.\n            if (n % i == 0) {\n        \
    \        lpf = i;\n            }\n        }\n    }\n    return lpf;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142904
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // Replace pass above with your code\n    return 2;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpo_gkfm_j: /tmp/tmpo_gkfm_j.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142905
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // You can reuse is_prime and factors functions you have written in\
    \ exercise 3.\n    // YOUR CODE HERE\n    // std::vector<long> vec = factors(n);\n\
    \    // for(int i = vec.size()-1; i >= 0; i--){\n    //     if(is_prime(vec[i]))\n\
    \    //         return vec[i];\n    // }\n    long i;\n    for(i = 2; i <= n;\
    \ i++){\n        if(n % i == 0){\n            n /= i;\n            i--;\n    \
    \    }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142905
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 2;\n    while (n > 1) {\n        if (n % largest_prime\
    \ == 0) {\n            n /= largest_prime;\n        } else {\n            largest_prime++;\n\
    \        }\n    }\n    return largest_prime;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142905
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime = 2;\n\tlong d = 2;\n\twhile (n > 1) {\n\t\twhile\
    \ (n % d == 0) {\n\t\t\tlargest_prime = d;\n\t\t\tn /= d;\n\t\t}\n\t\td = d +\
    \ 1;\n\t\tif (d * d > n) {\n\t\t\tif (n > 1) {\n\t\t\t\tlargest_prime = n;\n\t\
    \t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn largest_prime;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142905
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      // Find\
    \ the largest prime factor of the quotient.\n      return largest_prime_factor(n\
    \ / i);\n    }\n    i += 1;\n  }\n  return n;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142905
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong factor;\n\tlong end_num;\n\tbool is_prime = true;\n\tif (n == 1)\n\
    \t\treturn 1;\n\tif (n % 2 == 0) {\n\t\tn = n / 2;\n\t\twhile (n % 2 == 0) {\n\
    \t\t\tn = n / 2;\n\t\t}\n\t}\n\tif (n == 1)\n\t\treturn 2;\n\tfactor = 3;\n\t\
    end_num = sqrt(n);\n\twhile (n > 1 && factor <= end_num) {\n\t\tif (n % factor\
    \ == 0) {\n\t\t\tn = n / factor;\n\t\t\twhile (n % factor == 0) {\n\t\t\t\tn =\
    \ n / factor;\n\t\t\t}\n\t\t\tend_num = sqrt(n);\n\t\t}\n\t\tfactor = factor +\
    \ 2;\n\t}\n\tif (n == 1)\n\t\treturn (factor - 2);\n\telse\n\t\treturn n;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // O(n)\n    // assert(n > 1);\n    // long max_factor = 1;\n    //\
    \ while (n % 2 == 0) {\n    //     max_factor = 2;\n    //     n /= 2;\n    //\
    \ }\n    // long p = 3;\n    // while (n != 1) {\n    //     while (n % p == 0)\
    \ {\n    //         max_factor = p;\n    //         n /= p;\n    //     }\n  \
    \  //     p += 2;\n    // }\n    // return max_factor;\n\n    // O(log n)\n  \
    \  // assert(n > 1);\n    // long max_factor = 1;\n    // while (n % 2 == 0) {\n\
    \    //     max_factor = 2;\n    //     n /= 2;\n    // }\n    // long factor\
    \ = 3;\n    // long max_factor_sqrt = sqrt(n);\n    // while (n > 1 && factor\
    \ <= max_factor_sqrt) {\n    //     while (n % factor == 0) {\n    //        \
    \ max_factor = factor;\n    //         n /= factor;\n    //     }\n    //    \
    \ factor += 2;\n    // }\n    // if (n == 1) {\n    //     return max_factor;\n\
    \    // } else {\n    //     return n;\n    // }\n\n    // O(log n)\n    assert(n\
    \ > 1);\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    long factor = 3;\n\
    \    long max_factor_sqrt = sqrt(n);\n    while (n > 1 && factor <= max_factor_sqrt)\
    \ {\n        while (n % factor == 0) {\n            n /= factor;\n        }\n\
    \        factor += 2;\n    }\n    if (n == 1) {\n        return factor - 2;\n\
    \    } else {\n        return n;\n    }\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // Insert your code here.\n  long prime = 0;\n  for(long i = 2; i <=\
    \ sqrt(n); i++){\n    if(n % i == 0){\n      if(i > prime) prime = i;\n      if(n\
    \ / i > prime) prime = n / i;\n    }\n  }\n  return prime;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpdkf6bed0: /tmp/tmpdkf6bed0.cpp:22: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    while (n != 1) {\n        while (n % factor\
    \ == 0) {\n            n /= factor;\n        }\n        factor += 1;\n    }\n\
    \    return factor - 1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int ans = 0;\n    for(int i =2; i*i<=n; i++){\n        if(n%i==0){\n\
    \            ans = i;\n            while(n%i==0){\n                n/=i;\n   \
    \         }\n        }\n    }\n    if(n!=1){\n        ans = n;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong i;\n\tassert(n > 1);\n\tfor (i = 2; i * i <= n; i++) {\n\t\twhile\
    \ (n % i == 0) {\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn n;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp86i2hfey: /tmp/tmp86i2hfey.cpp:21: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long num=n;\n    long largest_prime=0;\n    while(n%2==0){\n     \
    \   n/=2;\n        largest_prime=2;\n    }\n    for(long i=3;i<=sqrt(n);i=i+2){\n\
    \        while(n%i==0){\n            n/=i;\n            largest_prime=i;\n   \
    \     }\n    }\n    if(n>2){\n        largest_prime=n;\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       return largest_prime_factor(n / i);\n        }\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp6ne8aiz0: /tmp/tmp6ne8aiz0.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long factor = 2;\n  long largest = 1;\n  // BUG: repeated factors were\
    \ skipped!\n  while (n > 1) {\n    while (n % factor == 0) {\n      largest =\
    \ factor;\n      n /= factor;\n    }\n    factor++;\n  }\n  return largest;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long lastFactor = n;\n    while (n % 2 == 0)\n\
    \        n /= 2;\n    lastFactor = n;\n    int i = 3;\n    for (; i <= sqrt(n);\
    \ i += 2) {\n        while (n % i == 0) {\n            lastFactor = i;\n     \
    \       n /= i;\n        }\n    }\n    if (n > 2)\n        lastFactor = n;\n \
    \   return lastFactor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong max = 1;\n\twhile (n % 2 == 0) {\n\t\tmax = 2;\n\t\tn /= 2;\n\t\
    }\n\tint i = 3;\n\twhile (i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tmax = i;\n\t\
    \t\tn /= i;\n\t\t} else {\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn max;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO\n    return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp4ysumz5z: /tmp/tmp4ysumz5z.cpp:14: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142907
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // The factor 2 is dealt with explicitly.\n    while (n%2 == 0) {\n\
    \        n = n/2;\n    }\n    // The remaining factors are odd numbers.\n    long\
    \ p = 3;\n    while (n > 1) {\n        while (n%p == 0) {\n            n = n/p;\n\
    \        }\n        p += 2;\n    }\n    return p-2;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int highest = 0;\n    for (int i = 2; i < n; i++) {\n        while\
    \ (n % i == 0) {\n            highest = i;\n            n /= i;\n        }\n \
    \   }\n    return highest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp3a9exh_g: /tmp/tmp3a9exh_g.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tstd::vector<long> factors = {};\n\tfor (long factor = 2; factor <= sqrt(n);\
    \ factor++) {\n\t\tif (n % factor == 0) {\n\t\t\tbool is_prime = true;\n\t\t\t\
    for (long prime : factors) {\n\t\t\t\tif (factor % prime == 0) {\n\t\t\t\t\tis_prime\
    \ = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_prime) {\n\t\t\t\
    \tfactors.push_back(factor);\n\t\t\t}\n\t\t}\n\t}\n\treturn factors.back();\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpv1o5jn6o: /tmp/tmpv1o5jn6o.cpp:28: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142907
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long lpf = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            n /= i;\n            lpf = i;\n        }\n    }\n \
    \   return lpf;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqh4k9w1f: /tmp/tmpqh4k9w1f.cpp:21: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // return 2;\n  // write your code here\n  long k=2;\n  while(n!=1){\n\
    \    if(n%k==0){\n      n=n/k;\n    }\n    else\n      k=k+1;\n  }\n  return k;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (n % i != 0) {\n        i++;\n    }\n    long\
    \ m = n/i;\n    if (m == 1) return i;\n    else return largest_prime_factor(m);\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long result=0;\n    long a=2;\n    while(n>1){\n        while(n%a==0){\n\
    \            result=a;\n            n=n/a;\n        }\n        a=a+1;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_prime = -1;\n    int i;\n    while (n % 2 == 0) {\n     \
    \   max_prime = 2;\n        n /= 2;\n    }\n    for (i = 3; i <= sqrt(n); i +=\
    \ 2) {\n        while (n % i == 0) {\n            max_prime = i;\n           \
    \ n /= i;\n        }\n    }\n    if (n > 2) {\n        max_prime = n;\n    }\n\
    \    return max_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_factor = 0;\n\tlong factor = 2;\n\twhile (n > 1) {\n\t\t\
    if (n % factor == 0) {\n\t\t\tlargest_factor = factor;\n\t\t\tn /= factor;\n\t\
    \t\twhile (n % factor == 0) {\n\t\t\t\tn /= factor;\n\t\t\t}\n\t\t}\n\t\tfactor\
    \ += 1;\n\t}\n\treturn largest_factor;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = -1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            max = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest=0;\n    for(long i=2;i<=n;i++){\n        if(n%i==0){\n\
    \            largest=i;\n            n=n/i;\n            i=i-1;\n        }\n \
    \   }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long largest = -1;\n  // Start with 2 and incrementally work through\
    \ each number\n  // that divides into n.\n  for (long i = 2; i < n; i++) {\n \
    \   // If i divides evenly into n then i may be a prime factor.\n    if (n % i\
    \ == 0) {\n      // Try dividing i by numbers from 2 to i - 1.\n      for (long\
    \ j = 2; j < i; j++) {\n        // If j divides evenly into i then i is not a\
    \ prime\n        // so we can stop trying.\n        if (i % j == 0) {\n      \
    \    break;\n        }\n        // If i is not divisible by anything from 2 to\
    \ i - 1\n        // then i is a prime factor.\n        if (j == i - 1) {\n   \
    \       largest = i;\n        }\n      }\n    }\n  }\n  return largest;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_factor = 0;\n\tlong factor = 2;\n\tlong num = n;\n\twhile\
    \ (factor <= num) {\n\t\tif (num % factor == 0) {\n\t\t\tlargest_factor = factor;\n\
    \t\t\tnum /= factor;\n\t\t} else {\n\t\t\tfactor++;\n\t\t}\n\t}\n\treturn largest_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: your code here.\n    for(long i=2;i<n;i++){\n        if(n%i==0){\n\
    \            n/=i;\n            i--;\n        }\n    }\n    return n;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 0;\n    long i;\n    for (i = 2; i * i <= n; i++) {\n \
    \       while (n % i == 0) {\n            ans = i;\n            n /= i;\n    \
    \    }\n    }\n    if (n > 1) ans = n;\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  assert(n > 1);\n  long p = 2;\n  while (n != 1) {\n    while (n % p\
    \ == 0) {\n      n /= p;\n    }\n    p++;\n  }\n  return p - 1;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long prime_factor = 0;\n    for (long i = 2; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            prime_factor = i;\n   \
    \         while (n % i == 0) {\n                n /= i;\n            }\n     \
    \   }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  // find the largest prime factor of n.\n\n  // make sure that n > 1,\
    \ and is not a prime.\n  assert(n > 1);\n  bool isPrime = true;\n  for (int i\
    \ = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) {\n      isPrime = false;\n \
    \     break;\n    }\n  }\n  assert(!isPrime);\n\n  int ans = 0;\n  for (int i\
    \ = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) {\n      bool isPrime = true;\n\
    \      for (int j = 2; j <= sqrt(i); j++) {\n        if (i % j == 0) {\n     \
    \     isPrime = false;\n          break;\n        }\n      }\n      if (isPrime)\
    \ {\n        ans = i;\n      }\n    }\n  }\n  return ans;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmphjjcfmw3: /tmp/tmphjjcfmw3.cpp:41: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142907
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong i=2;\n\twhile(i<=n){\n\t\tif(n%i==0){\n\t\t\tn/=i;\n\t\t}\n\t\t\
    else{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n   // Your code goes here.\n   // The prime factors of n are the primes\
    \ that can divide n,\n   // but no smaller number can divide n.\n\n   //Hint:\
    \ You can use \u201C%\u201D to compute the remainder of a division.\n\n   //Hint:\
    \ Start from 2 and work your way up.\n   long res=0;\n   for(long i=2;i<=n;i++){\n\
    \   \t\tif(n%i==0){\n   \t\t\tres=i;\n   \t\t\tn=n/i;\n   \t\t\ti--;\n   \t\t\
    }\n   }\n   return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i=2;\n    while(i*i<=n){\n        if(n%i==0){\n            n/=i;\n\
    \        }else{\n            i++;\n        }\n    }\n    return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tstd::vector<long> factor;\n\tlong largest;\n\tfor (long divisor = 2;\
    \ divisor <= n; divisor++) {\n\t\twhile (n % divisor == 0) {\n\t\t\tfactor.push_back(divisor);\n\
    \t\t\tn /= divisor;\n\t\t}\n\t}\n\tlargest = factor[factor.size() - 1];\n\treturn\
    \ largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    int i = 2;\n    while (i <= n) {\n  \
    \      if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142906
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  if (n == 1) return 1;\n  while (n % 2 == 0) n = n / 2;\n  if (n == 1)\
    \ return 2;\n  long max_prime = 1;\n  while (n % 2 == 0) n = n / 2;\n  if (n ==\
    \ 1) return 2;\n  for (long i = 3; i <= n; i = i + 2) {\n    while (n % i == 0)\
    \ {\n      n = n / i;\n      max_prime = i;\n    }\n  }\n  return max_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142907
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    std::vector<long> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n\
    \        n /= 2;\n    }\n    long s = sqrt(n);\n    for (long i = 3; i <= s; i\
    \ += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n \
    \           n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n\
    \    }\n    return factors.back();\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142907
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest = 1;\n\tfor (long i = 2; i <= n / i; i++) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\tlargest = i;\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (n > 1)\n\t\tlargest = n;\n\treturn largest;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142907
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  if (n <= 2) return 1;\n  long factor = 2;\n  while (n % factor != 0)\
    \ {\n    factor += 1;\n  }\n  return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpwuj_ti87: /tmp/tmpwuj_ti87.cpp:18: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660142907
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long prime;\n    // Every number can be broken down into a product\
    \ of primes.\n    // This loop finds the largest prime factor.\n    // prime is\
    \ the first factor, then repeatedly divide by prime\n    // until no more dividers\
    \ can be found.\n    for (prime = 2; prime <= n; prime++) {\n        if (n % prime\
    \ == 0) {\n            n /= prime;\n            // Try dividing the next number\
    \ by prime.\n            // If it's not divisible, then start the loop over\n\
    \            // with the next value of prime.\n            prime--;\n        }\n\
    \    }\n    return prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142907
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return largest_prime_factor(n / i);\n        }\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660142898
