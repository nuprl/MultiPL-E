name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
  \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==\
  \ (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
  }\n"
completions: ["    std::vector<long> sorted = l;\n    std::sort(sorted.begin(), sorted.end());\n\
    \    std::vector<long> result;\n    for (auto a : sorted) {\n        if (result.size()\
    \ == 0) {\n            result.push_back(a);\n        } else if (result[result.size()\
    \ - 1] != a) {\n            result.push_back(a);\n        }\n    }\n    return\
    \ result;", "\tstd::sort(l.begin(), l.end());\n\treturn std::vector<long>(l.begin(),\
    \ std::unique(l.begin(), l.end()));", "    std::sort(l.begin(), l.end());\n  \
    \  l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "  std::vector<long>\
    \ v=l;\n  std::sort(v.begin(), v.end());\n  v.erase(std::unique(v.begin(), v.end()),\
    \ v.end());\n  return v;", "    long tmp;\n    std::sort(l.begin(), l.end());\n\
    \    auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    res.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n     \
    \   }\n    }\n    return res;", "    // >>> unique((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    \    // (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\n\
    \    std::vector<long> res;\n    // >>> l = (std::vector<long>({(long)5, (long)3,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))\n    std::vector<long>\
    \ l = l;\n    // >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n    // (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123}))\n    res = std::vector<long>();\n\
    \    // >>> l = (std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))\n    l = l;\n    // >>> unique((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    \    // (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\n\
    \    res = std::vector<long>();\n    // >>> unique((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (", "    std::sort(l.begin(), l.end());\n\
    \    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "   \
    \ // >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n\
    \    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "   std::sort(l.begin(), l.end());\n   l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n   return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i > 0 && l[i]\
    \ == l[i-1]) continue;\n        ret.push_back(l[i]);\n    }\n    return ret;",
  "  std::set<long> s;\n  for (auto x : l) {\n    s.insert(x);\n  }\n  std::vector<long>\
    \ r;\n  for (auto x : s) {\n    r.push_back(x);\n  }\n  return r;", "    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;", "\tstd::sort(l.begin(), l.end());\n\treturn std::vector<long>(l.begin(),\
    \ std::unique(l.begin(), l.end()));", "    std::sort(l.begin(), l.end());\n  \
    \  auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    auto last =\
    \ std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n    return l;",
  "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n\
    \    return l;", "\tstd::vector<long> ans;\n\tlong v;\n\tstd::sort(l.begin(),\
    \ l.end());\n\twhile(l.size() > 0) {\n\t\tv = l[0];\n\t\tans.push_back(v);\n\t\
    \tl.erase(std::remove(l.begin(), l.end(), v), l.end());\n\t}\n\treturn ans;",
  "  std::vector<long> r;\n  std::sort(l.begin(), l.end());\n  for (auto i : l) {\n\
    \    if (r.size()==0 || r.back()!=i) {\n      r.push_back(i);\n    }\n  }\n  return\
    \ r;", "    std::sort(l.begin(), l.end());\n    auto it = std::unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;", "\t\
    std::vector<long> res;\n\tstd::sort(l.begin(), l.end());\n\tstd::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(res));\n\treturn res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> r;\n    std::sort(l.begin(), l.end());\n    r.push_back(l[0]);\n\
    \    for (long e = 1; e < l.size(); e++) {\n        if (l[e] != l[e - 1]) {\n\
    \            r.push_back(l[e]);\n        }\n    }\n    return r;", "  std::sort(l.begin(),\
    \ l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  return l;",
  "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \  return l;", "    std::vector<long> ret;\n    long sz = l.size();\n    sort(l.begin(),\
    \ l.end());\n    ret.push_back(l[0]);\n    for (long i = 1; i < sz; i++) {\n \
    \       if (l[i] != l[i - 1])\n            ret.push_back(l[i]);\n    }\n    return\
    \ ret;", "    std::vector<long> ans = {};\n    std::sort(l.begin(), l.end());\n\
    \    for (long e : l) {\n        if (ans.size() == 0 || ans.back() != e) {\n \
    \           ans.push_back(e);\n        }\n    }\n    return ans;", "  std::set<long>\
    \ st(l.begin(), l.end());\n  return std::vector<long>(st.begin(), st.end());",
  "  std::vector<long> s;\n  std::sort(l.begin(), l.end());\n  auto last = std::unique(l.begin(),\
    \ l.end());\n  for (auto it = l.begin(); it != last; ++it) {\n    s.push_back(*it);\n\
    \  }\n  return s;", "    std::set<long> s(l.begin(), l.end());\n    l.assign(s.begin(),\
    \ s.end());\n    std::sort(l.begin(), l.end());\n    return l;", "   // Sorting\
    \ the array, as this will be used in the method to compare consecutive elements\n\
    \   std::sort(l.begin(), l.end());\n   // Iterator to iterate over the array\n\
    \   std::vector<long>::iterator it = l.begin();\n   // Iterating over all the\
    \ elements in the list\n   while (it != l.end()) {\n       // Comparing the current\
    \ element with the previous\n       if (it == l.begin() || *it != *(it - 1)) {\n\
    \           // Incrementing the iterator if the element is unique\n          \
    \ it++;\n       } else {\n           // If the current element is duplicate, erasing\
    \ it\n           it = l.erase(it);\n       }\n   }\n   // Returning the sorted\
    \ unique elements in a vector\n   return l;", "    std::vector<long> s;\n    for\
    \ (long i: l) {\n        if (std::find(s.begin(), s.end(), i) == s.end()) {\n\
    \            s.push_back(i);\n        }\n    }\n    std::sort(s.begin(), s.end());\n\
    \    return s;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i-1] != l[i])\
    \ {\n            ret.push_back(l[i]);\n        }\n    }\n    return ret;", "\t\
    std::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \treturn l;", "    std::vector<long> res;\n    for (auto i : l) {\n        bool\
    \ exist = false;\n        for (auto j : res) {\n            if (i == j) {\n  \
    \              exist = true;\n                break;\n            }\n        }\n\
    \        if (!exist) {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "\t\tstd::sort(l.begin(), l.end());\n\t\tl.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n\t\treturn l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (ret.empty()\
    \ || ret.back() != *i) {\n            ret.push_back(*i);\n        }\n    }\n \
    \   return ret;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::set<long> s(l.begin(), l.end());\n\
    \    return std::vector<long>(s.begin(), s.end());", "  if (l.size()==0) return\
    \ l;\n  std::sort(l.begin(), l.end());\n  std::vector<long> uniques(1, l[0]);\n\
    \  for (long i=1; i<l.size(); i++) {\n    if (l[i]==l[i-1]) continue;\n    uniques.push_back(l[i]);\n\
    \  }\n  return uniques;", "  std::set<long> s;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    s.insert(l[i]);\n  }\n  std::vector<long> output;\n  for (std::set<long>::iterator\
    \ it = s.begin(); it != s.end(); it++) {\n    output.push_back(*it);\n  }\n  return\
    \ output;", "    std::set<long> s;\n    std::vector<long> v;\n    for (auto _l\
    \ : l) {\n        s.insert(_l);\n    }\n    for (auto _s : s) {\n        v.push_back(_s);\n\
    \    }\n    return v;", '  return std::vector<long>(l.begin(), std::unique(l.begin(),
    l.end()));', "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n    auto it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::set<long> s(l.begin(), l.end());\n\
    \    std::vector<long> r(s.begin(), s.end());\n    return r;", "\tfor (int i =\
    \ 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\t\
    if (l[i] == l[j]) {\n\t\t\t\tl.erase(l.begin() + j);\n\t\t\t\tj--;\n\t\t\t}\n\t\
    \t}\n\t}\n\tstd::sort(l.begin(), l.end());\n\treturn l;", "    sort(l.begin(),\
    \ l.end());\n    auto it = unique(l.begin(), l.end());\n    l.resize(distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    auto end = std::unique(l.begin(),\
    \ l.end());\n    l.erase(end, l.end());\n    return l;", "  std::vector<long>\
    \ res;\n  std::sort(l.begin(), l.end());\n  std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(res));\n  return res;", "    std::vector<long> ret;\n   \
    \ std::sort(l.begin(), l.end());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if (it == l.begin() || *it != *(it - 1))\n            ret.push_back(*it);\n\
    \    }\n    return ret;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "  std::vector<long> res = l;\n  std::sort(res.begin(),\
    \ res.end());\n  res.erase(std::unique(res.begin(), res.end()), res.end());\n\
    \  return res;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    // >>> unique((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    \    // (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\n\
    \    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "  std::sort(l.begin(), l.end());\n  return std::vector<long>(l.begin(),\
    \ std::unique(l.begin(), l.end()));", "    std::vector<long> r;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            r.push_back(l[i]);\n        }\n    }\n    return\
    \ r;", "    std::vector<long> s;\n    for (long e : l) {\n        auto it = std::find(s.begin(),\
    \ s.end(), e);\n        if (it == s.end()) {\n            s.push_back(e);\n  \
    \      }\n    }\n    std::sort(s.begin(), s.end());\n    return s;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "  std::set<long> s;\n  for (auto e : l) {\n    s.insert(e);\n  }\n  std::vector<long>\
    \ res;\n  for (auto e : s) {\n    res.push_back(e);\n  }\n  return res;", "\t\
    std::set<long> s;\n\tstd::vector<long> ret;\n\tstd::vector<long>::iterator i;\n\
    \tfor (i = l.begin(); i != l.end(); i++) {\n\t\ts.insert(*i);\n\t}\n\tfor (std::set<long>::iterator\
    \ j = s.begin(); j != s.end(); j++) {\n\t\tret.push_back(*j);\n\t}\n\treturn ret;",
  "    std::vector<long> s;\n    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    for (auto i : l) {\n        s.push_back(i);\n\
    \    }\n    return s;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> res;\n    for (auto\
    \ e : l) {\n        auto it = std::find(res.begin(), res.end(), e);\n        if\
    \ (it == res.end()) {\n            res.push_back(e);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::sort(l.begin(), l.end());\n    auto\
    \ first = l.begin();\n    auto last = l.end();\n    while (first != last) {\n\
    \        auto next = std::upper_bound(first, last, *first);\n        if (next\
    \ != first) {\n            *++first = std::move(*next);\n        }\n        first\
    \ = next;\n    }\n    l.erase(++first, last);\n    return l;", "    std::vector<long>\
    \ p;\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator ip;\n\
    \    ip = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ ip));\n    return l;", "  std::sort(l.begin(), l.end());\n  auto last = std::unique(l.begin(),\
    \ l.end());\n  l.erase(last, l.end());\n  return l;", "    sort(l.begin(), l.end());\n\
    \    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;", "\tstd::vector<long>\
    \ ans;\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++)\
    \ {\n\t\tif (i == 0 || l[i] != l[i - 1]) {\n\t\t\tans.push_back(l[i]);\n\t\t}\n\
    \t}\n\treturn ans;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> v;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 ||\
    \ l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;", "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0) {\n\
    \            res.push_back(l[i]);\n        } else {\n            if (l[i] != l[i\
    \ - 1]) {\n                res.push_back(l[i]);\n            }\n        }\n  \
    \  }\n    return res;", "  std::vector<long> v;\n  std::sort(l.begin(), l.end());\n\
    \  long n = l.size();\n  for (long i = 0; i < n; i++) {\n    if (i == 0 || l[i]\
    \ != l[i - 1]) {\n      v.push_back(l[i]);\n    }\n  }\n  return v;", "  std::vector<long>\
    \ res;\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    if (i == 0 || l[i] != l[i - 1]) {\n      res.push_back(l[i]);\n    }\n\
    \  }\n  return res;", "  std::sort(l.begin(), l.end());\n  auto last = std::unique(l.begin(),\
    \ l.end());\n  l.erase(last, l.end());\n  return l;", "  std::vector<long> res;\n\
    \  std::map<long, int> m;\n  for (std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n    long e = *it;\n    m[e] = 1;\n  }\n  for (std::map<long,\
    \ int>::iterator it = m.begin(); it != m.end(); ++it) {\n    res.push_back(it->first);\n\
    \  }\n  std::sort(res.begin(), res.end());\n  return res;", "  std::sort(l.begin(),\
    \ l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n\
    \  return l;", "    // >>> def unique(l):\n    // ...     return sorted(list(set(l)))\n\
    \    // ... \n    // >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2,\
    \ 3, 5, 9, 123]\n    // return l.size()<=1? l : [];;\n    std::vector<long> res(l.size());\n\
    \    auto it = std::unique_copy(l.begin(), l.end(), res.begin());\n    res.resize(std::distance(res.begin(),\
    \ it));\n    return res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", '  return
    std::vector<long>(l.begin(), std::unique(l.begin(), l.end()));', "  std::set<long>\
    \ s(l.begin(), l.end());\n  return std::vector<long>(s.begin(), s.end());", " \
    \   std::vector<long> ans;\n    std::sort(l.begin(), l.end());\n    ans.push_back(l[0]);\n\
    \    for (long i=1; i<l.size(); i++) {\n        if (l[i]!=l[i-1]) {\n        \
    \    ans.push_back(l[i]);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ new_l = l;\n    std::sort(new_l.begin(), new_l.end());\n    auto last = std::unique(new_l.begin(),\
    \ new_l.end());\n    new_l.erase(last, new_l.end());\n    return new_l;", "std::sort(l.begin(),\
    \ l.end());\nl.erase(std::unique(l.begin(), l.end()), l.end());\nreturn l;", " \
    \   std::vector<long> output;\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i > 0 && l[i] == l[i-1]) {\n      \
    \      continue;\n        }\n        output.push_back(l[i]);\n    }\n    return\
    \ output;", "    std::vector<long> s;\n    for (auto e : l) {\n        if (std::find(s.begin(),\
    \ s.end(), e) == s.end()) {\n            s.push_back(e);\n        }\n    }\n \
    \   std::sort(s.begin(), s.end());\n    return s;", "\tassert(l.size() <= ((unsigned\
    \ long)(INT_MAX)));\n\tint n = l.size();\n\tstd::sort(l.begin(), l.end());\n\t\
    std::vector<long> unique;\n\tunique.push_back(l[0]);\n\tfor (int i = 1; i < n;\
    \ i++) {\n\t\tif (l[i - 1] != l[i]) {\n\t\t\tunique.push_back(l[i]);\n\t\t}\n\t\
    }\n\treturn unique;", "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n\treturn l;", "  std::vector<long> v = l;\n  std::sort(v.begin(),\
    \ v.end());\n  v.erase(std::unique(v.begin(), v.end()), v.end());\n  return v;",
  "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n\
    \    return l;", "    std::vector<long> s;\n    for (long e : l)\n        if (!count(s.begin(),\
    \ s.end(), e))\n            s.push_back(e);\n    std::sort(s.begin(), s.end());\n\
    \    return s;", "    std::vector<long> result;\n    result.push_back(l[0]);\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n \
    \           result.push_back(l[i]);\n        }\n    }\n    return result;", '    return
    sort(std::set<long>(l.begin(), l.end()));', "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(ret));\n\
    \    return ret;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    long i, j;\n  \
    \  for (i = 0; i < l.size(); i++) {\n        for (j = i + 1; j < l.size();) {\n\
    \            if (l[j] == l[i]) {\n                l.erase(l.begin() + j);\n  \
    \          } else {\n                j++;\n            }\n        }\n    }\n \
    \   return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n\treturn l;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> x;\n    std::sort(l.begin(),\
    \ l.end());\n    long prev = -1;\n    for (auto i : l) {\n        if (i != prev)\
    \ {\n            x.push_back(i);\n            prev = i;\n        }\n    }\n  \
    \  return x;", "\tsort(l.begin(), l.end());\n\tstd::vector<long>::iterator it;\n\
    \tit = std::unique(l.begin(), l.end());\n\tl.resize(std::distance(l.begin(), it));\n\
    \treturn l;", "    std::vector<long> r = l;\n    std::sort(r.begin(), r.end());\n\
    \    r.erase(std::unique(r.begin(), r.end()), r.end());\n    return r;", "  std::sort(l.begin(),\
    \ l.end());\n  auto it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(),\
    \ it));\n  return l;", '  return std::vector<long>(l.begin(), std::unique(l.begin(),
    l.end()));', "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::sort(l.begin(), l.end());\n   \
    \ l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  std::sort(l.begin(), l.end());\n  return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long> s;\n    std::sort(l.begin(),\
    \ l.end());\n    for (std::vector<long>::iterator it = l.begin(); it != l.end();\
    \ ++it) {\n        if ((it == l.begin()) || (*it != *(it - 1))) {\n          \
    \  s.push_back(*it);\n        }\n    }\n    return s;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "\tstd::vector<long> res;\n\tstd::sort(l.begin(), l.end());\n\tstd::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(res));\n\treturn res;", "    std::vector<long> result;\n\
    \    std::set<long> s;\n    for (auto i : l) {\n        s.insert(i);\n    }\n\
    \    for (auto i : s) {\n        result.push_back(i);\n    }\n    return result;",
  "  std::vector<long> out;\n  for (auto e : l) {\n    auto it = std::find(out.begin(),\
    \ out.end(), e);\n    if (it == out.end()) {\n      out.push_back(e);\n    }\n\
    \  }\n  return out;", "    std::sort(l.begin(), l.end());\n    auto ui = std::unique(l.begin(),\
    \ l.end());\n    l.erase(ui, l.end());\n    return l;", "  long n = l.size();\n\
    \  std::vector<long> v1;\n  for (long i = 0; i < n; i++) {\n    long j = 0;\n\
    \    for (j = 0; j < i; j++) {\n      if (l[i] == l[j]) {\n        break;\n  \
    \    }\n    }\n    if (i == j) {\n      v1.push_back(l[i]);\n    }\n  }\n  return\
    \ v1;", "\tstd::vector<long> res;\n\tif (l.size() == 0) {\n\t\treturn res;\n\t\
    }\n\telse {\n\t\tstd::sort(l.begin(), l.end());\n\t\tres.push_back(l[0]);\n\t\t\
    for (long i = 1; i < l.size(); i++) {\n\t\t\tif (l[i] != l[i - 1]) {\n\t\t\t\t\
    res.push_back(l[i]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}", "    std::vector<long>\
    \ ans;\n    // Sort the vector\n    std::sort(l.begin(), l.end());\n    // Append\
    \ the first element to the answer array\n    ans.push_back(l[0]);\n    // Iterate\
    \ over the entire array\n    for (int i = 1; i < l.size(); i++) {\n        //\
    \ If the current element is not the same as the last appended element in the answer\
    \ array\n        if (l[i] != ans[ans.size() - 1]) {\n            // Append the\
    \ current element to the answer array\n            ans.push_back(l[i]);\n    \
    \    }\n    }\n    return ans;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (ret.size() == 0 || ret.back()\
    \ != i) {\n            ret.push_back(i);\n        }\n    }\n    return ret;",
  "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long> ret;\n    if (l.size() ==\
    \ 0) {\n        return ret;\n    }\n    ret.push_back(l[0]);\n    for (int i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> res;\n    sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i\
    \ - 1] != l[i]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "  // >>> unique((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    \  // (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\n\
    \  std::vector<long> seen;\n  std::vector<long> result;\n  for (std::vector<long>::iterator\
    \ a = l.begin(); a != l.end(); ++a) {\n    long x = *a;\n    if (std::find(seen.begin(),\
    \ seen.end(), x) == seen.end()) {\n      seen.push_back(x);\n      result.push_back(x);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;", " \
    \ std::vector<long> v;\n  sort(l.begin(), l.end());\n  auto it = std::unique(l.begin(),\
    \ l.end());\n  l.resize(std::distance(l.begin(), it));\n  for (auto a : l)\n \
    \   v.push_back(a);\n  return v;", "    std::vector<long> s;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin()) {\n            s.push_back(*i);\n        } else {\n          \
    \  if (*i != *(i - 1)) {\n                s.push_back(*i);\n            }\n  \
    \      }\n    }\n    return s;", "\tstd::set<long> s(l.begin(), l.end());\n\t\
    return std::vector<long>(s.begin(), s.end());", "  std::vector<long> res;\n  if\
    \ (l.size() == 0) {\n    return res;\n  }\n  sort(l.begin(), l.end());\n  res.push_back(l[0]);\n\
    \  for (int i = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;", "  std::sort(l.begin(), l.end());\n  auto last =\
    \ std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n  return l;", " \
    \ std::sort(l.begin(), l.end());\n  return std::vector<long>(l.begin(), std::unique(l.begin(),\
    \ l.end()));", "    std::vector<long> ans;\n    std::set<long> s(l.begin(), l.end());\n\
    \    for (auto e : s) {\n        ans.push_back(e);\n    }\n    return ans;", "\t\
    std::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \treturn l;", "    std::vector<long> ans;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || ans.back() !=\
    \ l[i]) {\n            ans.push_back(l[i]);\n        }\n    }\n    return ans;",
  "\tstd::vector<long> out;\n\tstd::sort(l.begin(), l.end());\n\tauto it = std::unique(l.begin(),\
    \ l.end());\n\tl.resize(std::distance(l.begin(), it));\n\tfor (auto i : l) {\n\
    \t\tout.push_back(i);\n\t}\n\treturn out;", "  std::vector<long> s;\n  sort(l.begin(),\
    \ l.end());\n  for (unsigned int i = 0; i < l.size(); i++) {\n    if (i == 0 ||\
    \ l[i-1] != l[i]) {\n      s.push_back(l[i]);\n    }\n  }\n  return s;", "  std::vector<long>\
    \ s;\n  for (int i = 0; i < l.size(); i++) {\n    auto it = std::find(s.begin(),\
    \ s.end(), l[i]);\n    if (it == s.end()) {\n      s.push_back(l[i]);\n    }\n\
    \  }\n  return s;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "\tstd::vector<long> r;\n\tstd::sort(l.begin(), l.end());\n\tlong length\
    \ = l.size();\n\tlong i = 0;\n\twhile (i < length) {\n\t\tr.push_back(l[i]);\n\
    \t\ti = i + 1;\n\t\twhile (i < length && l[i] == l[i - 1]) {\n\t\t\ti = i + 1;\n\
    \t\t}\n\t}\n\treturn r;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "   std::vector<long> r;\n   std::sort(l.begin(), l.end());\n   for (auto\
    \ elem : l) {\n      if (r.size() > 0 && r.back() == elem) {\n         continue;\n\
    \      }\n      r.push_back(elem);\n   }\n   return r;", "    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(v));\n    return v;", "    std::vector<long> ans;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        bool found = false;\n        for\
    \ (long j = 0; j < ans.size(); j++) {\n            if (l[i] == ans[j]) {\n   \
    \             found = true;\n                break;\n            }\n        }\n\
    \        if (!found) {\n            ans.push_back(l[i]);\n        }\n    }\n \
    \   std::sort(ans.begin(), ans.end());\n    return ans;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   auto last = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n\
    \    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    long n = l.size();\n    std::vector<long>\
    \ res;\n    res.reserve(n);\n    std::sort(l.begin(), l.end());\n    for (long\
    \ i = 0; i < n; i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n          \
    \  res.push_back(l[i]);\n        }\n    }\n    return res;", "\tstd::vector<long>::iterator\
    \ it; \n\tsort(l.begin(), l.end());\n\tit = std::unique(l.begin(), l.end());\n\
    \tl.resize(std::distance(l.begin(), it));\n\treturn l;", "\tstd::vector<long>\
    \ a;\n\tstd::sort(l.begin(), l.end());\n\tfor (auto item : l) {\n\t\tif (a.size()\
    \ == 0 || a.back() != item) {\n\t\t\ta.push_back(item);\n\t\t}\n\t}\n\treturn\
    \ a;", "    std::vector<long> s;\n    for (long e : l) {\n        if (std::find(s.begin(),\
    \ s.end(), e) == s.end()) {\n            s.push_back(e);\n        }\n    }\n \
    \   return s;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", '  return std::vector<long>(l.begin(), std::unique(l.begin(),
    l.end()));', "\tstd::vector<long> r;\n\tstd::sort(l.begin(), l.end());\n\tfor\
    \ (auto v : l) {\n\t\tif (r.size() == 0 || v != r.back()) {\n\t\t\tr.push_back(v);\n\
    \t\t}\n\t}\n\treturn r;", "  long size = l.size();\n  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> ret;\n  for (long i = 0; i < size; i++) {\n    if ((i !=\
    \ 0) && (l[i] == l[i - 1])) continue;\n    ret.push_back(l[i]);\n  }\n  return\
    \ ret;", "\tstd::vector<long> ret;\n\tstd::sort(l.begin(), l.end());\n\tret.push_back(l[0]);\n\
    \tfor (auto elem : l) {\n\t\tif (elem != ret.back())\n\t\t\tret.push_back(elem);\n\
    \t}\n\treturn ret;", "    long sz = l.size();\n    std::vector<long> v(sz);\n\
    \    std::sort(l.begin(), l.end());\n    long k = 0;\n    for (long i = 0; i <\
    \ sz; i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v[k] = l[i];\n\
    \            k += 1;\n        }\n    }\n    v.resize(k);\n    return v;", "  \
    \  std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n \
    \           ret.push_back(l[i]);\n        }\n    }\n    return ret;", "\tstd::vector<long>\
    \ s;\n\tfor (auto i : l) {\n\t\tif (std::find(s.begin(), s.end(), i) == s.end())\
    \ {\n\t\t\ts.push_back(i);\n\t\t}\n\t}\n\tstd::sort(s.begin(), s.end());\n\treturn\
    \ s;", "  l.erase(std::unique(l.begin(), l.end()), l.end());\n  std::sort(l.begin(),\
    \ l.end());\n  return l;", "    // sort elements\n    std::sort(l.begin(), l.end());\n\
    \    // unique elements\n    auto last = std::unique(l.begin(), l.end());\n  \
    \  // erase the rest\n    l.erase(last, l.end());\n    return l;", "    assert(l.size()\
    \ > 0);\n    std::vector<long> uniq = std::vector<long>();\n    std::unordered_set<long>\
    \ seen = std::unordered_set<long>();\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        long val = l[i];\n        if (seen.find(val) == seen.end()) {\n \
    \           uniq.push_back(val);\n            seen.insert(val);\n        }\n \
    \   }\n    std::sort(uniq.begin(), uniq.end());\n    return uniq;", "  std::vector<long>\
    \ result;\n  sort(l.begin(), l.end());\n  std::vector<long>::iterator it;\n  it\
    \ = std::unique(l.begin(), l.end());\n  result.assign(l.begin(), it);\n  return\
    \ result;", "    std::vector<long> res;\n    for (long i : l) {\n        auto\
    \ x = std::find(res.begin(), res.end(), i);\n        if (x == res.end()) {\n \
    \           res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> v;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i\
    \ - 1]) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;", " \
    \   std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n\
    \    for (unsigned long i = 1; i < l.size(); i++) {\n        if (l[i] != l[i -\
    \ 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long> s;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(s));\n    return s;", "    std::vector<long> result\
    \ = {};\n    for (int i = 0; i < l.size(); i++) {\n        if (std::find(result.begin(),\
    \ result.end(), l[i]) == result.end()) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n \
    \           res.push_back(l[i]);\n        }\n    }\n    return res;", "    //\
    \ >>> unique([(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0,\
    \ (long)123])\n    // [(long)0, (long)2, (long)3, (long)5, (long)9, (long)123]\n\
    \    std::sort(l.begin(), l.end());\n    auto it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "\tstd::vector<long>\
    \ s;\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\
    \t\tif (i == 0 || l[i] != l[i - 1])\n\t\t\ts.push_back(l[i]);\n\t}\n\treturn s;",
  "    std::set<long> s(l.begin(), l.end());\n    return std::vector<long>(s.begin(),\
    \ s.end());", "\tstd::vector<long> s = l;\n\tstd::sort(s.begin(), s.end());\n\t\
    auto last = std::unique(s.begin(), s.end());\n\ts.erase(last, s.end());\n\treturn\
    \ s;", "  std::vector<long> res;\n  if(l.size() == 0) {\n    return res;\n  }\n\
    \  std::sort(l.begin(), l.end());\n  res.push_back(l[0]);\n  for(int i = 1; i\
    \ < l.size(); i++) {\n    if(l[i] != l[i-1]) {\n      res.push_back(l[i]);\n \
    \   }\n  }\n  return res;", "  std::set<long> s;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    s.insert(l[i]);\n  }\n  std::vector<long> v;\n  for (std::set<long>::iterator\
    \ it = s.begin(); it != s.end(); it++) {\n    v.push_back(*it);\n  }\n  return\
    \ v;", "  if (l.size() == 0) {\n    return l;\n  }\n  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> ret = {l[0]};\n  for (int i = 1; i < l.size(); i++) {\n \
    \   if (l[i] != l[i - 1]) {\n      ret.push_back(l[i]);\n    }\n  }\n  return\
    \ ret;", "    std::vector<long> s;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i-1] != l[i]) {\n\
    \            s.push_back(l[i]);\n        }\n    }\n    return s;", "  std::vector<long>\
    \ s;\n  std::sort(l.begin(), l.end());\n  for (auto &&x : l) {\n    if (s.empty()\
    \ || s.back() != x) {\n      s.push_back(x);\n    }\n  }\n  return s;", "  std::vector<long>\
    \ res;\n  long cur;\n  for (std::vector<long>::iterator i = l.begin(); i != l.end();\
    \ ++i) {\n    cur = *i;\n    if (std::find(res.begin(), res.end(), cur) == res.end())\
    \ {\n      res.push_back(cur);\n    }\n  }\n  std::sort(res.begin(), res.end());\n\
    \  return res;", "  std::vector<long> r;\n  std::map<long, int> m;\n  for (auto\
    \ i : l) {\n    if (m.find(i) == m.end()) {\n      m[i] = 1;\n      r.push_back(i);\n\
    \    }\n  }\n  std::sort(r.begin(), r.end());\n  return r;", "    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::set<long> s;\n    for (long i = 0; i < l.size(); i++) {\n \
    \       s.insert(l[i]);\n    }\n    std::vector<long> res;\n    for (auto it =\
    \ s.begin(); it != s.end(); it++) {\n        res.push_back(*it);\n    }\n    return\
    \ res;", "  std::sort(l.begin(), l.end());\n  auto last = std::unique(l.begin(),\
    \ l.end());\n  l.erase(last, l.end());\n  return l;", "    std::vector<long> v;\n\
    \    std::sort(l.begin(), l.end());\n    for (auto e : l) {\n        if (v.size()==0\
    \ || v.back() != e) {\n            v.push_back(e);\n        }\n    }\n    return\
    \ v;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  std::vector<long> s;\n  for (auto &e\
    \ : l) {\n    if (std::find(s.begin(), s.end(), e) == s.end()) {\n      s.push_back(e);\n\
    \    }\n  }\n  std::sort(s.begin(), s.end());\n  return s;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "  // Sort l\n  std::sort(l.begin(), l.end());\n  // Unique elements\n\
    \  std::vector<long> u = {};\n  // For each element in l\n  for (auto a: l) {\n\
    \    // If unique elements list is empty\n    if (u.size() == 0) {\n      // Add\
    \ element to the list\n      u.push_back(a);\n    } else {\n      // Get last\
    \ element of unique elements list\n      long b = u.back();\n      // If element\
    \ is not already in the list\n      if (a != b) {\n        // Add element to the\
    \ list\n        u.push_back(a);\n      }\n    }\n  }\n  // Return unique elements\
    \ list\n  return u;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::set<long>\
    \ s(l.begin(), l.end());\n    l.assign(s.begin(), s.end());\n    return l;", " \
    \   long size = l.size();\n    if (size == 0) return {};\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long>::iterator ip;\n    ip = std::unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), ip));\n    return l;", "  \
    \  std::vector<long> s;\n    long i, n = l.size();\n    if (n == 0) {\n      \
    \  return s;\n    }\n    sort(l.begin(), l.end());\n    s.push_back(l[0]);\n \
    \   for (i = 1; i < n; i++) {\n        if (l[i] != l[i - 1]) {\n            s.push_back(l[i]);\n\
    \        }\n    }\n    return s;", "  if (l.size()==0) {\n    return l;\n  }\n\
    \  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n  return l;"]
stop_tokens:
- "\n}"
