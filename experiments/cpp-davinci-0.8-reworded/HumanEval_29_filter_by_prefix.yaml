name: HumanEval_29_filter_by_prefix
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of\
  \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
  \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
  abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"\
  a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"\
  }))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings,\
  \ std::string prefix) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
  xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&prefix](std::string s) {\n    \
    \    return s.rfind(prefix, 0) == 0;\n    });\n    return result;", "    std::vector<std::string>\
    \ f_v;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].compare(0,prefix.size(),prefix)==0){\n\
    \            f_v.push_back(strings[i]);\n        }\n    }\n    return f_v;", " \
    \   std::vector<std::string> result;\n    std::copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result), [prefix](std::string s) {\n        return (s.find(prefix)\
    \ == 0);\n    });\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string string : strings) {\n        if (string.compare(0, prefix.length(),\
    \ prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n \
    \   return result;", "    std::vector<std::string> result;\n    for (auto& str\
    \ : strings) {\n        if (str.rfind(prefix, 0) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    // Implement your solution here\n\
    \treturn std::vector<std::string>{};", "    std::vector<std::string> v;\n    for(auto\
    \ i:strings){\n        if(i.find(prefix)!=std::string::npos){\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "  std::vector<std::string> filtered_strings;\n\
    \  for (std::string str : strings) {\n    if (str.find(prefix) == 0) {\n     \
    \ filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;", " \
    \ // TODO (Part 4B): Implement this function\n    std::vector<std::string> list;\n\
    \    for(int i = 0; i < strings.size(); ++i){\n        if(strings[i].substr(0,\
    \ prefix.size()) == prefix){\n            list.push_back(strings[i]);\n      \
    \  }\n    }\n    return list;", "\tstd::vector<std::string> r;\n\tfor (auto &&str\
    \ : strings) {\n\t\tif (str.substr(0, prefix.size()) == prefix) {\n\t\t\tr.push_back(str);\n\
    \t\t}\n\t}\n\treturn r;", "    std::vector<std::string> res;\n    for (auto const&\
    \ str : strings) {\n        if (str.size() >= prefix.size() && str.substr(0, prefix.size())\
    \ == prefix) {\n            res.push_back(str);\n        }\n    }\n    return\
    \ res;", "    //write your code here\n    std::vector<std::string> ans;\n    int\
    \ prefix_len = prefix.length();\n    for(int i=0;i<strings.size();i++){\n    \
    \    std::string cur = strings[i];\n        if(cur.substr(0,prefix_len) == prefix){\n\
    \            ans.push_back(cur);\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    int n = strings.size();\n    std::vector<std::string> res;\n    for (int i\
    \ = 0; i < n; i++) {\n        if (strings[i].find(prefix) == 0) {\n          \
    \  res.push_back(strings[i]);\n        }\n    }\n    return res;", "    // YOUR\
    \ CODE HERE\n    std::vector<std::string> results;\n    for (std::string item\
    \ : strings) {\n        if (item.find(prefix) == 0) {\n            results.push_back(item);\n\
    \        }\n    }\n    return results;", "    std::vector<std::string> new_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         new_strings.push_back(s);\n        }\n    }\n    return new_strings;",
  "    std::vector<std::string> res;\n    for (auto x : strings) {\n        if (x.substr(0,\
    \ prefix.size()) == prefix) {\n            res.push_back(x);\n        }\n    }\n\
    \    return res;", "  std::vector<std::string> s;\n  for (auto const& v : strings)\
    \ {\n    if (v.find(prefix) != std::string::npos) {\n      s.push_back(v);\n \
    \   }\n  }\n  return s;", "    std::vector<std::string> ret;\n    for (int i =\
    \ 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            ret.push_back(strings[i]);\n        }\n    }\n   \
    \ return ret;", "  // Replace the underlined value with the correct code. \n \
    \ // You do not need to keep the existing code in this function.\n\tstd::vector<std::string>\
    \ result;\n\tfor(int i=0;i<strings.size();i++){\n\t\tif(strings[i].substr(0,prefix.size())==prefix){\n\
    \t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;", "    //your\
    \ code here\n    std::vector<std::string> res;\n    for(int i=0;i<strings.size();i++){\n\
    \        std::string s=strings[i];\n        if(s.substr(0,prefix.size())==prefix){\n\
    \            res.push_back(s);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ v;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].size()>=prefix.size()\
    \ && strings[i].substr(0,prefix.size())==prefix){\n            v.push_back(strings[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> ret;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(ret), [&prefix](std::string s) {\n       \
    \ return s.find(prefix) == 0;\n    });\n    return ret;", "  std::vector<std::string>\
    \ result;\n  for (auto it = strings.begin(); it != strings.end(); ++it) {\n  \
    \  auto& s = *it;\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    // Your implementation\
    \ goes here\n    // Please take a look at interface.h for method signature details.\n\
    \    std::vector<std::string> res;\n    for(int i=0;i<strings.size();i++){\n \
    \   \tif(strings[i].size()>=prefix.size() && strings[i].substr(0,prefix.size())==prefix){\n\
    \    \t\tres.push_back(strings[i]);\n    \t}\n    }\n    return res;", "    std::vector<std::string>\
    \ newStrings;\n    for (std::string s : strings) {\n        if (s.find(prefix)\
    \ == 0) {\n            newStrings.push_back(s);\n        }\n    }\n    return\
    \ newStrings;", "    std::vector<std::string> output;\n    for (std::string s\
    \ : strings) {\n        if (s.compare(0, prefix.length(), prefix) == 0) {\n  \
    \          output.push_back(s);\n        }\n    }\n    return output;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (auto &str : strings) {\n        if (str.rfind(prefix,\
    \ 0) == 0) {\n            filtered_strings.push_back(str);\n        }\n    }\n\
    \    return filtered_strings;", "    std::vector<std::string> result;\n    for\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n        if ((*i).find(prefix)\
    \ == 0) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    // Iterate through strings and append\
    \ ones that start with the given prefix to result.\n    for (auto &s : strings)\
    \ {\n        if (s.find(prefix) == 0)\n            result.push_back(s);\n    }\n\
    \    return result;", "    std::vector<std::string> ans;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\n        \
    \    ans.push_back(s);\n    }\n    return ans;", "\tstd::vector<std::string> result;\n\
    \tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;",
  "    std::vector<std::string> result;\n    for (auto i = strings.begin(); i != strings.end();\
    \ i++) {\n        if (i->substr(0, prefix.length()) == prefix) {\n           \
    \ result.push_back(*i);\n        }\n    }\n    return result;", "\tstd::vector<std::string>\
    \ result;\n\tstd::copy_if(strings.begin(), strings.end(), std::back_inserter(result),\
    \ [&prefix](std::string str) { return str.find(prefix) == 0; });\n\treturn result;",
  "    std::vector<std::string> output;\n    for (auto a: strings) {\n        if (a.compare(0,\
    \ prefix.length(), prefix) == 0)\n            output.push_back(a);\n    }\n  \
    \  return output;", "    assert(prefix.size() > 0);\n    int n = strings.size();\n\
    \    std::vector<std::string> ans;\n    for(int i = 0; i < n; i++) {\n       \
    \ if(strings[i].size() >= prefix.size() && strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            ans.push_back(strings[i]);\n        }\n    }\n   \
    \ return ans;", "    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&prefix](std::string const& s) {\
    \ return s.compare(0, prefix.size(), prefix) == 0; });\n    return result;", " \
    \   std::vector<std::string> strings_copy = std::vector<std::string>();\n    for\
    \ (size_t i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            strings_copy.push_back(strings[i]);\n        }\n    }\n\
    \    return strings_copy;", "  std::vector<std::string> result;\n  for (const\
    \ auto& s : strings) {\n    if (s.size() >= prefix.size() && std::equal(prefix.begin(),\
    \ prefix.end(), s.begin())) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> res;\n    for (auto x : strings) {\n\
    \        if (x.substr(0, prefix.size()) == prefix) {\n            res.push_back(x);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> v;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)==0){\n      \
    \      v.push_back(strings[i]);\n        }\n    }\n    return v;", "\tauto result\
    \ = std::vector<std::string>();\n\tfor (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n\t\tstd::string x = *it;\n\t\tif (x.compare(0, prefix.length(), prefix)\
    \ == 0) {\n\t\t\tresult.push_back(x);\n\t\t}\n\t}\n\treturn result;", "    //\
    \ TODO: Write your code here\n    if(strings.empty())\n        return strings;\n\
    \    std::vector<std::string> results;\n    for(int i=0;i<strings.size();i++)\n\
    \    {\n        if(strings[i].compare(0,prefix.size(),prefix)==0)\n          \
    \  results.push_back(strings[i]);\n    }\n    return results;", "  std::vector<std::string>::iterator\
    \ end_it = std::remove_if(strings.begin(), strings.end(), [&prefix](std::string\
    \ s) {\n      return !std::equal(prefix.begin(), prefix.end(), s.begin());\n \
    \ });\n  strings.erase(end_it, strings.end());\n  return strings;", "    std::vector<std::string>\
    \ output;\n    for (std::string str : strings) {\n        if (str.compare(0, prefix.length(),\
    \ prefix) == 0) {\n            output.push_back(str);\n        }\n    }\n    return\
    \ output;", "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].compare(0, prefix.size(), prefix) == 0) {\n \
    \           result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto const& s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "  // Your code here\n  std::vector<std::string>\
    \ filtered;\n  for(int i = 0; i < strings.size(); i++){\n    if(strings[i].substr(0,prefix.size())\
    \ == prefix){\n      filtered.push_back(strings[i]);\n    }\n  }\n  return filtered;",
  '  assert(false);', "\tint a=0;\n\tstd::vector<std::string> result;\n\tfor(auto\
    \ i:strings){\n\t\tif(i.find(prefix)==0){\n\t\t\tresult.push_back(i);\n\t\t}\n\
    \t}\n\treturn result;", "    std::vector<std::string> list;\n    for(int i=0;i<strings.size();i++){\n\
    \        if(strings[i].substr(0,prefix.size())==prefix){\n            list.push_back(strings[i]);\n\
    \        }\n    }\n    return list;", "    std::vector<std::string> result;\n\
    \    for (auto && x : strings) {\n        if (x.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(x);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    result.reserve(strings.size());\n   \
    \ for (std::string s : strings) {\n        if (s.size() >= prefix.size() && s.substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(s);\n        }\n \
    \   }\n    return result;", "    // (((std::vector<std::string>())))\n    std::vector<std::string>\
    \ filtered_strings;\n    // std::vector<std::string>\n    for (auto const& string\
    \ : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n   \
    \         filtered_strings.push_back(string);\n        }\n    }\n    return filtered_strings;",
  "\tstd::vector<std::string> result;\n\tfor (int i = 0; i < strings.size(); i++)\
    \ {\n\t\tif (strings[i].find(prefix) == 0)\n\t\t\tresult.push_back(strings[i]);\n\
    \t}\n\treturn result;", "\t// write your code here\n\tstd::vector<std::string>\
    \ result;\n\tfor (size_t i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix)\
    \ == 0) {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;",
  "  std::vector<std::string> out;\n  for (int i = 0; i < strings.size(); i++) {\n\
    \    if (strings[i].find(prefix) == 0) {\n      out.push_back(strings[i]);\n \
    \   }\n  }\n  return out;", "    // Your code here\n    std::vector<std::string>\
    \ matches;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0,\
    \ prefix.length()) == prefix) {\n            matches.push_back(strings[i]);\n\
    \        }\n    }\n    return matches;", "    // your code here\n    vector<string>\
    \ result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)==0){\n\
    \            result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "  // Implement this placeholder.\n  return {};", "  std::vector<std::string> filtered_strings;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    std::string str = strings[i];\n\
    \    // abc, a\n    int j = 0;\n    for (; j < prefix.size(); j++) {\n      if\
    \ (str[j] != prefix[j]) {\n        break;\n      }\n    }\n    if (j == prefix.size())\
    \ {\n      filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;",
  "  std::vector<std::string>::iterator s_it;\n  std::vector<std::string> result;\n\
    \  for (s_it = strings.begin(); s_it != strings.end(); s_it++) {\n    std::string\
    \ s = *s_it;\n    if (s.size() < prefix.size()) {\n      continue;\n    }\n  \
    \  std::string::iterator c_it;\n    for (c_it = s.begin(); c_it != s.begin() +\
    \ prefix.size(); c_it++) {\n      if (*c_it != prefix[c_it - s.begin()]) {\n \
    \       break;\n      }\n    }\n    if (c_it == s.begin() + prefix.size()) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ r;\n    for (auto e : strings)\n        if (e.find(prefix) == 0)\n         \
    \   r.push_back(e);\n    return r;", "    std::vector<std::string> ret;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(ret),\n        [&prefix](const std::string&\
    \ str) {\n            return str.find(prefix) == 0;\n        }\n    );\n    return\
    \ ret;", "  std::vector<std::string> res;\n  std::cout << strings.size() << std::endl;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    std::cout << strings[i] <<\
    \ std::endl;\n    if (strings[i].find(prefix) == 0) {\n      res.push_back(strings[i]);\n\
    \    }\n  }\n  return res;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    // YOUR\
    \ CODE HERE\n    std::vector<std::string> ans;\n    for(auto x: strings){\n  \
    \      if(x.find(prefix) == 0){\n            ans.push_back(x);\n        }\n  \
    \  }\n    return ans;", "  std::vector<std::string> matching;\n  for (std::string\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      matching.push_back(s);\n\
    \    }\n  }\n  return matching;", "    std::vector<std::string> res;\n    for\
    \ (const auto& s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;", "\tstd::vector<std::string>\
    \ result;\n\tfor (auto string : strings) {\n\t\tif (string.find(prefix) == 0)\
    \ {\n\t\t\tresult.push_back(string);\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ out;\n    for (auto str : strings) {\n        if (str.size() < prefix.size())\
    \ {\n            continue;\n        }\n        if (str.substr(0, prefix.size())\
    \ == prefix) {\n            out.push_back(str);\n        }\n    }\n    return\
    \ out;", "    std::vector<std::string> res;\n    for (const auto& s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            res.push_back(s);\n\
    \        }\n    }\n    return res;", "  std::vector<std::string> strings_filtered;\n\
    \  for (std::string s : strings) {\n    if (s.substr(0, prefix.length()) == prefix)\
    \ {\n      strings_filtered.push_back(s);\n    }\n  }\n  return strings_filtered;",
  "    std::vector<std::string> filtered;\n    // filter strings based on prefix\n\
    \    // check if each string starts with the prefix\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(prefix) == 0) {\n            filtered.push_back(strings[i]);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> str;\n\
    \    for(std::string s:strings){\n        if(s.substr(0,prefix.length())==prefix){\n\
    \            str.push_back(s);\n        }\n    }\n    return str;", "  std::vector<std::string>\
    \ ret;\n  for (int i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix)\
    \ == 0) {\n      ret.push_back(strings[i]);\n    }\n  }\n  return ret;", "   \
    \ std::vector<std::string> result;\n    for (auto const &str : strings) {\n  \
    \      if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> vec;\n  for\
    \ (auto s : strings) {\n    if (s.find(prefix) == 0) {\n      vec.push_back(s);\n\
    \    }\n  }\n  return vec;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(result),\
    \ [prefix](const std::string &s) { return s.compare(0, prefix.size(), prefix)\
    \ == 0; });\n    return result;", "    std::vector<std::string> output;\n    for\
    \ (std::string const &str : strings) {\n        if (str.substr(0, prefix.size())\
    \ == prefix) {\n            output.push_back(str);\n        }\n    }\n    return\
    \ output;", "\t// Create a vector to store output\n\tstd::vector<std::string>\
    \ output;\n\t// Append all strings starting with prefix to output vector\n\tfor\
    \ (auto str : strings) {\n\t\tif (str.substr(0, prefix.length()) == prefix) {\n\
    \t\t\toutput.push_back(str);\n\t\t}\n\t}\n\t// Return the output vector\n\treturn\
    \ output;", "    std::vector<std::string> v;\n    for(auto s: strings) {\n   \
    \     if(s.compare(0, prefix.size(), prefix) == 0)\n            v.push_back(s);\n\
    \    }\n    return v;", "\tstd::vector<std::string> matches;\n\tfor (int i = 0;\
    \ i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\t\t\t\
    matches.push_back(strings[i]);\n\t\t}\n\t}\n\treturn matches;", "    std::vector<std::string>\
    \ result;\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(result),\n\
    \                 [&prefix](const std::string& s) { return s.find(prefix) == 0;\
    \ });\n    return result;", "    std::vector<std::string> ret;\n    for (auto\
    \ str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n  \
    \          ret.push_back(str);\n        }\n    }\n    return ret;", "    std::vector<std::string>\
    \ output = {};\n    for (auto it = strings.begin(); it != strings.end(); it++)\
    \ {\n        if (it->find(prefix) == 0)\n            output.push_back(*it);\n\
    \    }\n    return output;", "  std::vector<std::string> v;\n  for (int i = 0;\
    \ i < strings.size(); i++) {\n    if (strings[i].substr(0, prefix.size()) == prefix)\
    \ {\n      v.push_back(strings[i]);\n    }\n  }\n  return v;", "  // Replace the\
    \ line(s) below with your solution.\n  std::vector<std::string> ret;\n  for (auto\
    \ it = strings.begin(); it != strings.end(); it++) {\n  \tif (it->compare(0, prefix.length(),\
    \ prefix) == 0) {\n  \t\tret.push_back(*it);\n  \t}\n  }\n  return ret;", "  \
    \  std::vector<std::string> res;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].substr(0,prefix.size()) == prefix) {\n           \
    \ res.push_back(strings[i]);\n        }\n    }\n    return res;", "\tstd::vector<std::string>\
    \ v;\n\tfor(int i=0;i<strings.size();i++){\n\t\tif(strings[i].find(prefix)==0){\n\
    \t\t\tv.push_back(strings[i]);\n\t\t}\n\t}\n\treturn v;", "    std::vector<std::string>\
    \ strings_prefix_filtered = {};\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].compare(0, prefix.size(), prefix) == 0) {\n      \
    \      strings_prefix_filtered.push_back(strings[i]);\n        }\n    }\n    return\
    \ strings_prefix_filtered;", "  std::vector<std::string> result;\n  // YOUR CODE\
    \ HERE\n  for(std::string string: strings){\n    if(string.substr(0,prefix.length())\
    \ == prefix){\n      result.push_back(string);\n    }\n  }\n  return result;",
  "    std::vector<std::string> res;\n    for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n        if ((*it).find(prefix) == 0) {\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string>::iterator it;\n\
    \    for(it = strings.begin(); it != strings.end(); it++) {\n        if(it->find(prefix)\
    \ != 0)\n            strings.erase(it);\n    }\n    return strings;", "    std::vector<std::string>\
    \ result;\n    for (auto& s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "\t// your code goes here\n\tstd::vector<std::string> v;\n\tfor(int\
    \ i=0;i<strings.size();i++)\n\t{\n\t\tif(strings[i].find(prefix)==0)\n\t\t{\n\t\
    \t\tv.push_back(strings[i]);\n\t\t}\n\t}\n\treturn v;", "    std::vector<std::string>\
    \ r;\n    for (int i = 0; i < strings.size(); i++) {\n        std::string s =\
    \ strings[i];\n        if (s.length() < prefix.length()) {\n            continue;\n\
    \        }\n        std::string sub = s.substr(0, prefix.length());\n        if\
    \ (sub == prefix) {\n            r.push_back(s);\n        }\n    }\n    return\
    \ r;", "    std::vector<std::string> result;\n    for (auto str : strings) {\n\
    \        if (str.rfind(prefix, 0) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "  // replace with your code here\n  std::vector<std::string>\
    \ result;\n  for(unsigned i = 0; i < strings.size(); i++){\n      if(strings[i].substr(0,\
    \ prefix.size()) == prefix){\n          result.push_back(strings[i]);\n      }\n\
    \  }\n  return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ item : strings) {\n        if (item.substr(0, prefix.length()) == prefix) {\n\
    \            result.push_back(item);\n        }\n    }\n    return result;", " \
    \   //TODO\n\tstd::vector<std::string> filtered_strings;\n\tfor(std::string i:strings){\n\
    \t\tif(i.find(prefix)!=std::string::npos){\n\t\t\tfiltered_strings.push_back(i);\n\
    \t\t}\n\t}\n\treturn filtered_strings;", "\tstd::vector<std::string> result;\n\
    \tresult.reserve(strings.size());\n\tfor (const auto& s : strings) {\n\t\tif (s.find(prefix)\
    \ == 0) {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ result;\n    for (std::string el : strings) {\n        if (el.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(el);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            res.push_back(s);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> res;\n    for\
    \ (std::string str : strings) {\n        if (str.find(prefix) == 0) {\n      \
    \      res.push_back(str);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    for (auto & s : strings) {\n        if (prefix.size() > s.size())\
    \ {\n            continue;\n        }\n        if (prefix == s.substr(0, prefix.size()))\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> res;\n    for (auto s : strings) {\n        if (s.find(prefix)\
    \ == 0) {\n            res.push_back(s);\n        }\n    }\n    return res;",
  "    std::vector<std::string> result;\n    for (std::string string : strings) {\n\
    \        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto x : strings) {\n        if\
    \ (x.find(prefix) == 0) {\n            filtered.push_back(x);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> result;\n    for (auto&\
    \ string : strings) {\n        //@@ begin\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n        //@@\
    \ end\n    }\n    return result;", "    std::vector<std::string> substrings;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            substrings.push_back(strings[i]);\n        }\n    }\n \
    \   return substrings;", "   std::vector<std::string> new_vector;\n   for (std::string\
    \ str : strings) {\n      if (str.compare(0, prefix.length(), prefix) == 0) {\n\
    \         new_vector.push_back(str);\n      }\n   }\n   return new_vector;", " \
    \   std::vector<std::string> ret;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].substr(0, prefix.size()) == prefix) {\n          \
    \  ret.push_back(strings[i]);\n        }\n    }\n    return ret;", "\t// YOUR\
    \ CODE HERE\n\tstd::vector<std::string> output;\n\tfor (auto s : strings) {\n\t\
    \tif (s.substr(0, prefix.length()) == prefix) {\n\t\t\toutput.push_back(s);\n\t\
    \t}\n\t}\n\treturn output;", "    std::vector<std::string> result;\n    for (auto\
    \ str : strings) {\n        if (str.rfind(prefix, 0) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> filtered_strings;\n\
    \tfor (auto& s : strings) {\n\t\tif (s.find(prefix) == 0) {\n\t\t\tfiltered_strings.push_back(s);\n\
    \t\t}\n\t}\n\treturn filtered_strings;", "    std::vector<std::string> res;\n\
    \    for (auto str : strings) {\n        if (str.substr(0, prefix.size()) == prefix)\
    \ {\n            res.push_back(str);\n        }\n    }\n    return res;", "  \
    \  // Create an empty vector of strings\n    std::vector<std::string> result;\n\
    \    // Iterate over each string in strings\n    for (auto string : strings) {\n\
    \        // If the string starts with prefix add it to the result\n        if\
    \ (string.find(prefix) == 0) {\n            result.push_back(string);\n      \
    \  }\n    }\n    // Return the result\n    return result;", "    auto it = std::find_if(strings.begin(),\
    \ strings.end(), [&prefix](std::string s) {\n        return s.find(prefix) ==\
    \ 0;\n    });\n    std::vector<std::string> result(it, strings.end());\n    return\
    \ result;", "    std::vector<std::string> output;\n    for (std::string string\
    \ : strings) {\n        if (string.substr(0, prefix.length()) == prefix) {\n \
    \           output.push_back(string);\n        }\n    }\n    return output;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "  assert(strings.size()\
    \ <= 1000);\n  assert(prefix.size() <= 100);\n  std::vector<std::string> ret;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n      ret.push_back(strings[i]);\n    }\n  }\n  return ret;",
  "    std::vector<std::string> ans;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].compare(0, prefix.size(), prefix) == 0) {\n      \
    \      ans.push_back(strings[i]);\n        }\n    }\n    return ans;", "\tstd::vector<std::string>\
    \ result;\n\tfor (auto s : strings) {\n\t\tif (prefix.size() > s.size()) {\n\t\
    \t\tcontinue;\n\t\t}\n\t\tbool is_equal = true;\n\t\tfor (size_t i = 0; i < prefix.size();\
    \ ++i) {\n\t\t\tif (prefix[i] != s[i]) {\n\t\t\t\tis_equal = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (is_equal) {\n\t\t\tresult.push_back(s);\n\t\t\
    }\n\t}\n\treturn result;", "    \n    std::vector<std::string> newvec;\n    for(std::string\
    \ str : strings){\n        if(str.size() > prefix.size()){\n            if(str.substr(0,\
    \ prefix.size()) == prefix){\n                newvec.push_back(str);\n       \
    \     }\n        }\n    }\n    return newvec;", "    // Generate the output vector.\n\
    \    std::vector<std::string> output;\n    // Loop over the input vector.\n  \
    \  for (auto s : strings) {\n        // If the current input string does not start\
    \ with the prefix, continue.\n        if (s.substr(0, prefix.size()) != prefix)\
    \ continue;\n        // If it does, append it to the output vector.\n        output.push_back(s);\n\
    \    }\n    // Return the output vector.\n    return output;", "  // O(n), to\
    \ sort\n  return {};", "  std::vector<std::string> result;\n  for (int i = 0;\
    \ i < strings.size(); i++) {\n    std::string s = strings[i];\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string str :\
    \ strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> ret_vec;\n\
    \    for (auto i : strings) {\n        if (std::mismatch(prefix.begin(), prefix.end(),\
    \ i.begin()).first == prefix.end()) {\n            ret_vec.push_back(i);\n   \
    \     }\n    }\n    return ret_vec;", "    // replace the following code with\
    \ your implementation\n    std::vector<std::string> result;\n    for(int i=0;i<strings.size();i++){\n\
    \        if(prefix.size()<=strings[i].size()){\n            std::string substring\
    \ = strings[i].substr(0,prefix.size());\n            if(substring==prefix){\n\
    \                result.push_back(strings[i]);\n            }\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> ret;\n\tfor\
    \ (auto const &s : strings) {\n\t\tif (s.size() < prefix.size()) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s.substr(0, prefix.size()) == prefix) {\n\t\t\tret.push_back(s);\n\
    \t\t}\n\t}\n\treturn ret;", "    std::vector<std::string> ret;\n    for (auto\
    \ string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            ret.push_back(string);\n        }\n    }\n    return ret;", " \
    \   auto first = std::find_if(strings.begin(), strings.end(), [prefix](std::string\
    \ s) {\n       return s.substr(0, prefix.size()) == prefix;\n    });\n    auto\
    \ last = std::find_if(first, strings.end(), [prefix](std::string s) {\n      \
    \ return s.substr(0, prefix.size()) != prefix;\n    });\n    return std::vector<std::string>(first,\
    \ last);", "    std::vector<std::string> v;\n    int n = prefix.length();\n  \
    \  for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0,n) == prefix){\n\
    \            v.push_back(strings[i]);\n        }\n    }\n    return v;", "   \
    \ std::vector<std::string> v;\n    for(int i=0;i<strings.size();i++){\n      \
    \  if(strings[i].find(prefix)==0){\n            v.push_back(strings[i]);\n   \
    \     }\n    }\n    return v;", "    std::vector<std::string> result;\n    for\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n        std::string string\
    \ = *i;\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    // YOUR CODE HERE\n    std::vector<std::string>\
    \ new_vec;\n    for (auto s : strings) {\n        if (prefix.length() > s.length())\
    \ {\n            continue;\n        }\n        if (s.substr(0, prefix.length())\
    \ == prefix) {\n            new_vec.push_back(s);\n        }\n    }\n    return\
    \ new_vec;", "    std::vector<std::string> ret;\n    for (const auto& string :\
    \ strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n     \
    \       ret.push_back(string);\n        }\n    }\n    return ret;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (int i = 0; i < strings.size(); i++) {\n        std::string\
    \ word = strings[i];\n        if (word.find(prefix) == 0) {\n            filtered_strings.push_back(word);\n\
    \        }\n    }\n    return filtered_strings;", "    // your code here\n   \
    \ return strings;", "\tstd::vector<std::string> res;\n\tfor (auto s : strings)\
    \ {\n\t\tif (s.size() < prefix.size()) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (s.substr(0,\
    \ prefix.size()) == prefix) {\n\t\t\tres.push_back(s);\n\t\t}\n\t}\n\treturn res;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        std::string string = strings[i];\n        if (prefix.size() <= string.size()\
    \ && string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> out;\n  for\
    \ (auto s : strings) {\n    if (s.find(prefix) == 0) {\n      out.push_back(s);\n\
    \    }\n  }\n  return out;", "    std::vector<std::string> ans;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            ans.push_back(strings[i]);\n        }\n    }\n   \
    \ return ans;", "  std::vector<std::string> ret;\n  for (auto &s : strings) {\n\
    \    if (s.substr(0, prefix.size()) == prefix) {\n      ret.push_back(s);\n  \
    \  }\n  }\n  return ret;", "  std::vector<std::string> filtered;\n  for (std::string\
    \ string : strings) {\n    if (string.substr(0, prefix.size()) == prefix) {\n\
    \      filtered.push_back(string);\n    }\n  }\n  return filtered;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    // TODO: implement this function.\n    std::vector<std::string>\
    \ prefix_strings;\n    int pref_length = prefix.length();\n    for(int i = 0;\
    \ i < strings.size(); i++){\n        std::string str = strings[i];\n        for(int\
    \ j = 0; j < pref_length; j++){\n            if(str[j] != prefix[j]){\n      \
    \          break;\n            }\n            if(j == pref_length - 1){\n    \
    \            prefix_strings.push_back(str);\n            }\n        }\n    }\n\
    \    return prefix_strings;", "  std::vector<std::string> retval;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      retval.push_back(s);\n\
    \    }\n  }\n  return retval;", "  std::vector<std::string> result;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix) == 0) {\n\
    \      result.push_back(strings[i]);\n    }\n  }\n  return result;", "  std::vector<std::string>\
    \ new_vector;\n  for (auto string : strings) {\n    if (string.compare(0, prefix.length(),\
    \ prefix) == 0) {\n      new_vector.push_back(string);\n    }\n  }\n  return new_vector;",
  "  std::vector<std::string> res;\n  for (auto str : strings) {\n    if (str.substr(0,\
    \ prefix.size()) == prefix) {\n      res.push_back(str);\n    }\n  }\n  return\
    \ res;", "    // edge case where there is no vector, return empty vector\n   \
    \ if (strings.size() == 0)\n        return strings;\n    else {\n        int i\
    \ = 0;\n        int j = 0;\n        for (i = 0; i < strings.size(); i++) {\n \
    \           for (j = 0; j < prefix.size(); j++) {\n                if (strings[i][j]\
    \ != prefix[j])\n                    break;\n            }\n            if (j\
    \ == prefix.size())\n                break;\n        }\n        std::vector<std::string>\
    \ ans(strings.begin() + i, strings.end());\n        return ans;\n    }", "   \
    \ std::vector<std::string> out;\n    for (std::string s : strings) {\n       \
    \ if (s.size() < prefix.size()) continue;\n        bool ok = true;\n        for\
    \ (size_t i = 0; i < prefix.size(); i++) {\n            if (s[i] != prefix[i])\
    \ {\n                ok = false;\n                break;\n            }\n    \
    \    }\n        if (ok) out.push_back(s);\n    }\n    return out;", "    std::vector<std::string>\
    \ v;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)!=std::string::npos){\n\
    \            v.push_back(strings[i]);\n        }\n    }\n    return v;", "   \
    \ std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].compare(0, prefix.size(), prefix) == 0) {\n      \
    \      result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> ans;\n \
    \   for (int i = 0; i < strings.size(); i++) {\n        std::string s = strings[i];\n\
    \        if (s.find(prefix) == 0) {\n            ans.push_back(s);\n        }\n\
    \    }\n    return ans;", "    for(std::vector<std::string>::iterator it = strings.begin();\
    \ it != strings.end();) {\n        if ((*it).find(prefix) != 0)\n            it\
    \ = strings.erase(it);\n        else\n            ++it;\n    }\n    return strings;",
  "\tint count = 0;\n\tstd::vector<std::string> v;\n\tfor (int i = 0; i < strings.size();\
    \ i++) {\n\t\tstd::string s = strings[i];\n\t\tbool flag = true;\n\t\tfor (int\
    \ j = 0; j < prefix.size(); j++) {\n\t\t\tif (s[j] != prefix[j]) {\n\t\t\t\tflag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag) {\n\t\t\tv.push_back(s);\n\
    \t\t}\n\t}\n\treturn v;", "    std::vector<std::string> results;\n    for (auto\
    \ i: strings) {\n        if (i.substr(0, prefix.size()) == prefix) {\n       \
    \     results.push_back(i);\n        }\n    }\n    return results;", "    //for(int\
    \ i=0;i<strings.size();i++)\n    //{\n     //   if(strings[i].substr(0,2)==prefix)\n\
    \      //  {\n        //    strings.erase(strings.begin()+i);\n        //}\n \
    \   //}\n   // return strings;\n   std::vector<std::string> res;\n    for(auto\
    \ s:strings)\n    {\n        if(s.substr(0,prefix.size())==prefix)\n        {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    for (auto str : strings) {\n        if (str.find(prefix) == 0) {\n\
    \            res.push_back(str);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ new_strings;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0,\
    \ prefix.size()) == prefix) {\n            new_strings.push_back(strings[i]);\n\
    \        }\n    }\n    return new_strings;", "    std::vector<std::string> result\
    \ = {};\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(strings[i]);\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> res;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0)\n            res.push_back(strings[i]);\n    }\n    return res;", "  std::vector<std::string>\
    \ results;\n  for (std::string s : strings) {\n    if (s.find(prefix) == 0) {\n\
    \      results.push_back(s);\n    }\n  }\n  return results;", "    std::vector<std::string>\
    \ result;\n    for (auto i: strings) {\n        if (i.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (auto item : strings) {\n\
    \    if (item.substr(0, prefix.size()) == prefix) {\n      result.push_back(item);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (const auto& str : strings) {\n        if (str.find(prefix) == 0) {\n      \
    \      result.push_back(str);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string::size_type prefix_len = prefix.length();\n    for (std::vector<std::string>::iterator\
    \ it = strings.begin(); it != strings.end(); ++it) {\n        if ((*it).compare(0,\
    \ prefix_len, prefix) == 0) {\n            result.push_back(*it);\n        }\n\
    \    }\n    return result;", "    //Implement filter_by_prefix here.\n    std::vector<std::string>\
    \ sub;\n    for(auto i : strings){\n        if(i.substr(0, prefix.length()) ==\
    \ prefix){\n            sub.push_back(i);\n        }\n    }\n    return sub;",
  "    std::vector<std::string>::iterator itr = strings.begin();\n    while(itr !=\
    \ strings.end()) {\n        if(itr->find(prefix) != 0) {\n            itr = strings.erase(itr);\n\
    \        } else {\n            itr++;\n        }\n    }\n    return strings;",
  "    std::vector<std::string> res;\n    for (const auto &s : strings) {\n      \
    \  if (s.find(prefix) == 0) {\n            res.push_back(s);\n        }\n    }\n\
    \    return res;", "    std::vector<std::string> filtered_strings;\n    for (auto\
    \ s : strings) {\n        if (s.find(prefix) == 0)\n            filtered_strings.push_back(s);\n\
    \    }\n    return filtered_strings;", "    std::vector<std::string> retVal;\n\
    \    for (std::string s : strings) {\n        if (s.size() > prefix.size() &&\
    \ s.substr(0, prefix.size()) == prefix) {\n            retVal.push_back(s);\n\
    \        }\n    }\n    return retVal;", "  std::vector<std::string> strings_by_prefix;\n\
    \  std::vector<std::string>::iterator it;\n  for (it = strings.begin(); it !=\
    \ strings.end(); it++) {\n    std::string s = *it;\n    if (s.substr(0, 1) ==\
    \ prefix) {\n      strings_by_prefix.push_back(s);\n    }\n  }\n  return strings_by_prefix;",
  "    std::vector<std::string> ret;\n    for (const auto& s : strings) {\n      \
    \  if (s.find(prefix) == 0) {\n            ret.push_back(s);\n        }\n    }\n\
    \    return ret;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ rst;\n    // TODO: Do something!\n    for(int i=0;i<strings.size();i++){\n \
    \       std::string str = strings[i];\n        if(str.substr(0,1) == prefix){\n\
    \            rst.push_back(str);\n        }\n    }\n    return rst;", "  // YOUR\
    \ CODE HERE\n  // std::cout << \"Func called filter_by_prefix\\n\";\n  std::vector<std::string>\
    \ filtered_vector;\n  for (auto iter = strings.begin(); iter != strings.end();\
    \ iter++) {\n    if (iter->find(prefix) == 0) {\n      filtered_vector.push_back(*iter);\n\
    \    }\n  }\n  return filtered_vector;", "    std::vector<std::string> filtered_strings;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;",
  "    std::vector<std::string> result;\n    for (std::string value : strings) {\n\
    \        if (value.compare(0, prefix.length(), prefix) == 0) {\n            result.push_back(value);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string>::iterator\
    \ it; \n    std::vector<std::string> result;\n    it = std::find_if(strings.begin(),\
    \ strings.end(), [prefix](std::string s){return s.find(prefix) == 0;});\n    while(it\
    \ != strings.end()){\n        result.push_back(*it);\n        it = std::find_if(++it,\
    \ strings.end(), [prefix](std::string s){return s.find(prefix) == 0;});\n    }\n\
    \    return result;", "    std::vector<std::string> output;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.length()) == prefix) {\n    \
    \        output.push_back(s);\n        }\n    }\n    return output;", "    std::vector<std::string>\
    \ res;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0,prefix.size())\
    \ == prefix) {\n            res.push_back(strings[i]);\n        }\n    }\n   \
    \ return res;", "    std::vector<std::string> result;\n    // INSERT YOUR CODE\
    \ HERE\n    for(auto s: strings){\n        if(s.size()>=prefix.size() && s.substr(0,prefix.size())==prefix){\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "\t\
    std::vector<std::string> result;\n\tfor (const auto &s : strings) {\n\t\tif (s.size()\
    \ < prefix.size()) continue;\n\t\tbool prefix_found = true;\n\t\tfor (size_t i\
    \ = 0; i < prefix.size(); ++i) {\n\t\t\tif (s[i] != prefix[i]) {\n\t\t\t\tprefix_found\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (prefix_found) result.push_back(s);\n\
    \t}\n\treturn result;", "    // find all strings starting with prefix\n    std::vector<std::string>\
    \ strings_with_prefix;\n    for (auto const& string : strings) {\n        if (string.find(prefix)\
    \ == 0) {\n            strings_with_prefix.push_back(string);\n        }\n   \
    \ }\n    return strings_with_prefix;", "\tstd::vector<std::string> ans;\n\tfor\
    \ (int i = 0; i < strings.size(); i++) {\n\t\tstd::string s = strings[i];\n\t\t\
    if (s.size() >= prefix.size() && s.substr(0, prefix.size()) == prefix) {\n\t\t\
    \tans.push_back(s);\n\t\t}\n\t}\n\treturn ans;", "    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> filt;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(prefix) == 0)\n            filt.push_back(strings[i]);\n\
    \    }\n    return filt;", "    std::vector<std::string> filtered_strings;\n \
    \   std::copy_if(strings.begin(), strings.end(), std::back_inserter(filtered_strings),\
    \ [prefix](std::string s) -> bool { return s.rfind(prefix, 0) == 0; });\n    return\
    \ filtered_strings;", "  std::vector<std::string> filtered;\n  for (std::string\
    \ s : strings) {\n    if (s.find(prefix) == 0) {\n      filtered.push_back(s);\n\
    \    }\n  }\n  return filtered;"]
stop_tokens:
- "\n}"
