name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return true if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
  <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"\
  ><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["    std::stack<char> s;\n    for (int i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            s.push(brackets[i]);\n   \
    \     } else {\n            if (s.empty()) {\n                return false;\n\
    \            }\n            s.pop();\n        }\n    }\n    return s.empty();",
  "    int size = brackets.size();\n    if (size%2!=0) return false;\n    int open\
    \ = 0;\n    for (int i = 0; i < size; i++) {\n        if (brackets[i] == '<')\n\
    \            open++;\n        else if (brackets[i] == '>')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return true;", " \
    \   std::stack<char> bracket_stack;\n    int count = 0;\n    bool result = true;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            bracket_stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ == '>') {\n            if (bracket_stack.empty()) {\n                result\
    \ = false;\n                break;\n            } else {\n                bracket_stack.pop();\n\
    \            }\n        }\n    }\n    if (!bracket_stack.empty())\n        result\
    \ = false;\n    return result;", "    int count = 0;\n    for (int i = 0; i <\
    \ brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            count++;\n\
    \        } else if (brackets[i] == '>') {\n            count--;\n        }\n \
    \       if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;", "  int left = 0;\n  int right = 0;\n  int i = 0;\n  while (i <\
    \ brackets.length()) {\n    if (brackets[i] == '<') {\n      left++;\n    } else\
    \ if (brackets[i] == '>') {\n      right++;\n    }\n    i++;\n  }\n  if (left\
    \ == right) {\n    return true;\n  } else {\n    return false;\n  }", "    int\
    \ open = 0;\n    int close = 0;\n    for (char c : brackets) {\n        if (c\
    \ == '<') {\n            open++;\n        } else if (c == '>') {\n           \
    \ close++;\n        }\n        if (close > open) {\n            return false;\n\
    \        }\n    }\n    return open == close;", "    if (brackets.length() % 2\
    \ == 1) {\n        return false;\n    }\n    int counter = 0;\n    for (int i\
    \ = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        counter++;\n        } else {\n            counter--;\n        }\n   \
    \     if (counter < 0) {\n            return false;\n        }\n    }\n    return\
    \ counter == 0;", "    // std::string::iterator it;\n    std::stack<char> stk;\n\
    \    int match = 0;\n    int len = brackets.length();\n    for (int i = 0; i <\
    \ len; i++) {\n        if (brackets[i] == '<') {\n            stk.push(brackets[i]);\n\
    \        } else if (brackets[i] == '>') {\n            if (stk.empty()) {\n  \
    \              match++;\n            } else {\n                stk.pop();\n  \
    \          }\n        }\n    }\n    if (match) return false;\n    if (stk.empty())\
    \ return true;\n    return false;", "\tstd::stack<char> s;\n\tfor (char c : brackets)\
    \ {\n\t\tif (c == '<') {\n\t\t\ts.push(c);\n\t\t} else {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
  "    std::stack<char> bracket_stack;\n    for (char bracket : brackets) {\n    \
    \    switch (bracket) {\n            case '<':\n                bracket_stack.push(bracket);\n\
    \                break;\n            case '>':\n                if (bracket_stack.empty())\
    \ {\n                    return false;\n                }\n                bracket_stack.pop();\n\
    \                break;\n            default:\n                return false;\n\
    \        }\n    }\n    return bracket_stack.empty();", "  int num_left = 0;\n\
    \  for (char c : brackets) {\n    if (c == '<')\n      num_left++;\n    else\n\
    \      num_left--;\n    if (num_left < 0)\n      return false;\n  }\n  return\
    \ num_left == 0;", "\t// Replace this line with your solution.\n  std::stack<char>\
    \ correct_brackets;\n  for (int i = 0; i < brackets.length(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      correct_brackets.push(brackets[i]);\n    } else if (brackets[i]\
    \ == '>') {\n      if (correct_brackets.empty()) {\n        return false;\n  \
    \    } else {\n        correct_brackets.pop();\n      }\n    }\n  }\n  if (correct_brackets.empty())\
    \ {\n    return true;\n  } else {\n    return false;\n  }", "  int count = 0;\n\
    \  for (char bracket : brackets) {\n    if (bracket == '<') {\n      count++;\n\
    \    } else if (bracket == '>') {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return false;\n    }\n  }\n  return count == 0;", "    std::stack<char>\
    \ brackets_stack;\n    for (unsigned int i = 0; i < brackets.length(); i++) {\n\
    \        if (brackets[i] == '<') {\n            brackets_stack.push(brackets[i]);\n\
    \        } else if (brackets[i] == '>') {\n            if (brackets_stack.empty())\
    \ {\n                return false;\n            } else {\n                brackets_stack.pop();\n\
    \            }\n        }\n    }\n    return brackets_stack.empty();", "    std::stack<char>\
    \ record;\n    for (char c : brackets) {\n        if (c == '<') {\n          \
    \  record.push(c);\n        } else {\n            if (record.empty()) {\n    \
    \            return false;\n            }\n            record.pop();\n       \
    \ }\n    }\n    return record.empty();", "\tstd::stack<char> bracketstack;\n\t\
    for (size_t i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '<') bracketstack.push(brackets[i]);\n\
    \t\telse if (brackets[i] == '>') {\n\t\t\tif (bracketstack.empty()) return false;\n\
    \t\t\telse bracketstack.pop();\n\t\t}\n\t}\n\treturn bracketstack.empty();", " \
    \   std::stack<char> bracketsStack;\n    for (char c : brackets) {\n        if\
    \ (c == '<') {\n            bracketsStack.push(c);\n        } else if (c == '>')\
    \ {\n            if (bracketsStack.empty()) {\n                return false;\n\
    \            }\n            bracketsStack.pop();\n        }\n    }\n    return\
    \ bracketsStack.empty();", "    std::stack<char> s;\n    for (auto c : brackets)\
    \ {\n        if (c == '<')\n            s.push(c);\n        else {\n         \
    \   if (s.empty())\n                return false;\n            else\n        \
    \        s.pop();\n        }\n    }\n    return s.empty();", "    int count =\
    \ 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            count += 1;\n        } else if (brackets[i] == '>') {\n\
    \            count -= 1;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "    int count = 0;\n   \
    \ for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            count++;\n        } else if (brackets[i] == '>') {\n        \
    \    count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count == 0;", "    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            bool found = false;\n\
    \            for (int j = i + 1; j < brackets.length(); j++) {\n             \
    \   if (brackets[j] == '>') {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;",
  "    int bracket_counter = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n\
    \        if (brackets[i] == '<') {\n            bracket_counter++;\n        }\
    \ else if (brackets[i] == '>') {\n            bracket_counter--;\n        }\n\
    \        if (bracket_counter < 0) {\n            return false;\n        }\n  \
    \  }\n    return bracket_counter == 0;", "\t// < >\n\tstd::stack<char> s;\n\t\
    int size = brackets.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == '>')\
    \ {\n\t\t\tif (s.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\ts.pop();\n\
    \t\t}\n\t}\n\tif (s.empty())\n\t\treturn true;\n\telse\n\t\treturn false;", "\t\
    int open = 0;\n\tint close = 0;\n\tfor (int i = 0; i < brackets.length(); i++)\
    \ {\n\t\tif (brackets[i] == '<') {\n\t\t\topen++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == '>') {\n\t\t\tclose++;\n\t\t}\n\t\tif (close > open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif (open == close) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn\
    \ false;\n\t}", "  // replace with your code here\n  // int count = 0;\n  // for\
    \ (int i = 0; i < brackets.length(); i++) {\n  //   if (brackets[i] == '<') {\n\
    \  //     count++;\n  //   } else if (brackets[i] == '>') {\n  //     count--;\n\
    \  //   }\n  //   if (count < 0) {\n  //     return false;\n  //   }\n  // }\n\
    \  // if (count == 0) {\n  //   return true;\n  // } else {\n  //   return false;\n\
    \  // }\n  std::stack<char> br_stack;\n  for (int i = 0; i < brackets.length();\
    \ i++) {\n    if (brackets[i] == '<') {\n      br_stack.push(brackets[i]);\n \
    \   } else if (brackets[i] == '>') {\n      if (br_stack.empty()) {\n        return\
    \ false;\n      } else {\n        br_stack.pop();\n      }\n    }\n  }\n  if (br_stack.empty())\
    \ {\n    return true;\n  } else {\n    return false;\n  }", "  std::stack<char>\
    \ open;\n  for (char c : brackets) {\n    if (c == '<') {\n      open.push(c);\n\
    \    } else {\n      if (open.empty()) {\n        return false;\n      }\n   \
    \   open.pop();\n    }\n  }\n  return open.empty();", "    std::stack<char> s;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<')\n            s.push(brackets[i]);\n        else if (brackets[i] == '>')\
    \ {\n            if (s.empty())\n                return false;\n            else\
    \ if (s.top() == '<')\n                s.pop();\n            else\n          \
    \      return false;\n        }\n    }\n    if (s.empty())\n        return true;\n\
    \    else\n        return false;", "\tstd::stack<char> bracket_stack;\n\tfor (char\
    \ bracket : brackets) {\n\t\tif (bracket == '<') {\n\t\t\tbracket_stack.push(bracket);\n\
    \t\t} else if (bracket == '>') {\n\t\t\tif (bracket_stack.empty()) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tbracket_stack.pop();\n\t\t}\n\t}\n\treturn bracket_stack.empty();",
  "  int count = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  return count == 0;", "    // first\
    \ find the error in the string.\n    // You will need a counter (variable) to\
    \ keep track\n    // of the number of open brackets. Start with 0.\n    // Scan\
    \ through the string.\n    // If you see an opening bracket, increment the counter.\n\
    \    // If you see a closing bracket, decrement the counter.\n    // If the counter\
    \ is ever negative, you can stop.\n    // No need to look any further.\n    //\
    \ If the counter is positive when you finish,\n    // then return false.\n   \
    \ // If you never saw a negative counter,\n    // then return true.\n    // Write\
    \ code to implement the algorithm and return true or false.\n    int count = 0;\n\
    \    bool flag = true;\n    for (int i = 0; i < brackets.length(); i++) {\n  \
    \      if (brackets[i] == '<') {\n            count++;\n        } else if (brackets[i]\
    \ == '>') {\n            count--;\n        }\n        if (count < 0) {\n     \
    \       flag = false;\n            break;\n        }\n    }\n    if (count > 0)\
    \ {\n        flag = false;\n    }\n    return flag;", "    if (brackets.length()\
    \ % 2 == 1) {\n        return false;\n    }\n    int l = 0;\n    int r = 0;\n\
    \    for (char c : brackets) {\n        if (c == '<') {\n            l++;\n  \
    \      } else {\n            r++;\n        }\n        if (r > l) {\n         \
    \   return false;\n        }\n    }\n    return l == r;", "    for (int i = 0;\
    \ i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n         \
    \   for (int j = i; j < brackets.length(); j++) {\n                if (brackets[j]\
    \ == '>') {\n                    brackets[i] = '-';\n                    brackets[j]\
    \ = '-';\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '-') {\n            return false;\n        }\n    }\n    return true;", " \
    \   int arr[brackets.length()];\n    int sum = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++){\n        if(brackets[i] == '<')\n            arr[i] = 1;\n        else\n\
    \            arr[i] = -1;\n        sum += arr[i];\n    }\n    if(sum < 0)\n  \
    \      return false;\n    int sum_c = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++){\n        sum_c += arr[i];\n        if(sum_c < 0)\n            return false;\n\
    \    }\n    return true;", "  // your code here\n  int count = 0;\n  for (int\
    \ i = 0; i < brackets.length(); i++) {\n    if (brackets[i] == '<') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  if (count == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }", "    int n=brackets.length();\n    for(int i=0;i<n;i++)\n    {\n      \
    \  if(brackets[i]=='>')\n        {\n            return false;\n        }\n   \
    \     if(brackets[i]=='<')\n        {\n            while(brackets[i]=='<')\n \
    \           {\n                i++;\n            }\n            if(brackets[i]!='>')\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;", "  std::stack<char> br_stack;\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      br_stack.push(brackets[i]);\n \
    \   } else {\n      if (br_stack.empty()) {\n        return false;\n      } else\
    \ {\n        br_stack.pop();\n      }\n    }\n  }\n  return br_stack.empty();",
  "  // check the stack of brackets\n  std::stack<char> temp;\n  for (int i = 0; i\
    \ < brackets.size(); i++) {\n    if (brackets[i] == '<')\n      temp.push(brackets[i]);\n\
    \    else if (brackets[i] == '>') {\n      if (temp.empty())\n        return false;\n\
    \      else\n        temp.pop();\n    }\n  }\n  if (temp.empty())\n    return\
    \ true;\n  else\n    return false;", "  std::stack<char> l_brackets;\n  for (int\
    \ i = 0; i < brackets.size(); i++) {\n    char c = brackets[i];\n    if (c ==\
    \ '<') {\n      l_brackets.push(c);\n    } else {\n      if (l_brackets.empty())\
    \ {\n        return false;\n      }\n      l_brackets.pop();\n    }\n  }\n  return\
    \ l_brackets.empty();", '', "    stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n\
    \        else{\n            if(s.empty()){\n                return false;\n  \
    \          }\n            else{\n                s.pop();\n            }\n   \
    \     }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n \
    \       return false;\n    }", "    std::stack<char> stack;\n    for (int i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n        \
    \    stack.push(brackets[i]);\n        } else {\n            if (stack.empty())\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.empty();", "\t// Your code here\n\tstd::stack<char>\
    \ st;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '<') {\n\t\t\tst.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (st.empty())\n\
    \t\t\t\treturn false;\n\t\t\tst.pop();\n\t\t}\n\t}\n\tif (st.empty())\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;", "    std::stack<char> s;\n    for (char b\
    \ : brackets) {\n        if (b == '<') {\n            s.push(b);\n        } else\
    \ {\n            if (s.empty()) return false;\n            s.pop();\n        }\n\
    \    }\n    return s.empty();", "  int count = 0;\n  for (unsigned int i = 0;\
    \ i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      count++;\n\
    \    } else if (brackets[i] == '>') {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return false;\n    }\n  }\n  return (count == 0);", "    int flag=0;\n\
    \    for(int i=0;i<brackets.length();i++)\n    {\n        if(brackets[i]=='<')\
    \ flag++;\n        else if(brackets[i]=='>') flag--;\n        if(flag<0) return\
    \ false;\n    }\n    if(flag==0) return true;\n    else return false;", "    //\
    \ STUDENT\n    int c = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n\
    \        if (brackets[i] == '<') {\n            c++;\n        } else {\n     \
    \       c--;\n        }\n        if (c < 0) {\n            return false;\n   \
    \     }\n    }\n    if (c == 0) {\n        return true;\n    } else {\n      \
    \  return false;\n    }", "\tint opening=0;\n\tint closing=0;\n\tint length=brackets.length();\n\
    \tfor(int i=0;i<length;i++){\n\t\tif(brackets[i]=='<'){\n\t\t\topening++;\n\t\t\
    }\n\t\telse{\n\t\t\tclosing++;\n\t\t}\n\t\tif(closing>opening){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif(opening==closing){\n\t\treturn true;\n\t}\n\telse{\n\
    \t\treturn false;\n\t}", "  std::stack<char> my_stack;\n  // stack is defined\
    \ by:\n  // push()\n  // pop()\n  // top()\n  // size()\n  // empty()\n  //std::cout\
    \ << \"stack size: \" << my_stack.size() << std::endl;\n  for (int i = 0; i <\
    \ brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      my_stack.push(brackets[i]);\n\
    \    } else {\n      if (my_stack.empty()) {\n        return false;\n      }\n\
    \      my_stack.pop();\n    }\n  }\n  if (my_stack.empty()) {\n    return true;\n\
    \  } else {\n    return false;\n  }", "    int balance = 0;\n    for (int i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n        \
    \    balance++;\n        } else {\n            balance--;\n        }\n       \
    \ if (balance < 0) {\n            return false;\n        }\n    }\n    return\
    \ balance == 0;", "    // Write your code here\n    int n = brackets.length();\n\
    \    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        if(brackets[i] ==\
    \ '<') sum++;\n        else sum--;\n        if(sum < 0) return false;\n    }\n\
    \    return sum == 0;", "\t// TODO: your code here\n\t//return true;\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "  //// YOUR CODE\
    \ HERE:\n  int n = brackets.length();\n  int count = 0;\n  int i = 0;\n  while(i\
    \ < n) {\n    if(brackets[i] == '<') count++;\n    else if(brackets[i] == '>')\
    \ count--;\n    if(count < 0) return false;\n    i++;\n  }\n  if(count > 0) return\
    \ false;\n  return true;", "    int counter = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') counter++;\n        else if (brackets[i]\
    \ == '>') counter--;\n        if (counter < 0) return false;\n    }\n    return\
    \ counter == 0;", "    std::stack<char> st;\n    for(auto c: brackets){\n    \
    \    if(c == '<'){\n            st.push(c);\n        }else{\n            if(st.empty()){\n\
    \                return false;\n            }\n            st.pop();\n       \
    \ }\n    }\n    return st.empty();", "\t// YOUR CODE HERE\n\t//stack\n\tstd::stack<char>\
    \ st;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '<') {\n\t\t\tst.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == '>')\
    \ {\n\t\t\tif (st.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\
    \t\t}\n\t}\n\tif (st.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "    std::stack<char> stack;\n    for (int i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.empty()) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.empty();",
  "\t// puts(brackets.c_str());\n\tint stack = 0;\n\tfor (int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '<') stack++;\n\t\telse if (brackets[i] == '>')\
    \ stack--;\n\t\tif (stack < 0) return false;\n\t}\n\treturn stack == 0;", "\t\
    std::stack<char> s;\n\tint i=0;\n\twhile(i<brackets.length()){\n\t\tif(brackets[i]=='<'){\n\
    \t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i]=='>'){\n\t\t\tif(s.empty()\
    \ || s.top()!='<'){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(s.empty()){\n\t\treturn true;\n\t}\n\telse{\n\
    \t\treturn false;\n\t}", "  int numBrackets = 0;\n  for (int i = 0; i < brackets.length();\
    \ i++) {\n    if (brackets[i] == '<') {\n      numBrackets++;\n    } else if (brackets[i]\
    \ == '>') {\n      numBrackets--;\n    }\n    if (numBrackets < 0) {\n      return\
    \ false;\n    }\n  }\n  return numBrackets == 0;", "    // this is of course a\
    \ stack question, but you need to understand how to use a stack\n    // for problems\
    \ like this.\n\n    // we will loop through the input string\n    // if we see\
    \ an opening bracket we will push it on to the stack\n    // if we see a closing\
    \ bracket, we will remove an opening bracket from the stack\n    // if we see\
    \ a closing bracket and the stack is empty, then we have too many closing brackets\n\
    \    // and so we can return false\n    // once we have looped through all the\
    \ brackets, we need to see if the stack is empty\n    // if the stack is empty,\
    \ then we have a correct bracketing, so we return true\n    // if the stack is\
    \ not empty, then we have a closing bracket left over, and so we return false\n\
    \    std::stack<char> st;\n\n    for (auto & c : brackets) {\n        if (c ==\
    \ '<') {\n            st.push(c);\n        } else {\n            if (st.empty())\
    \ {\n                return false;\n            }\n            st.pop();\n   \
    \     }\n    }\n\n    if (st.empty()) {\n        return true;\n    }\n    return\
    \ false;", "  int n;\n  n = brackets.length();\n  int count = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    if (brackets[i] == '<') {\n      count++;\n    } else\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  if (count != 0) {\n    return false;\n  }\n  return true;", "\tint l=0;\n\
    \tfor(int i=0;i<brackets.length();i++){\n\t\tif(brackets[i]=='<')\n\t\t\tl++;\n\
    \t\telse if(brackets[i]=='>')\n\t\t\tl--;\n\t\tif(l<0)\n\t\t\treturn false;\n\t\
    }\n\tif(l==0)\n\t\treturn true;\n\telse\n\t\treturn false;", "    // your code\
    \ here\n    bool flag = true;\n    std::stack<char> st;\n    for(int i = 0; i\
    \ < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            st.push(brackets[i]);\n\
    \        }\n        else{\n            if(st.empty()){\n                flag =\
    \ false;\n                break;\n            }\n            else{\n         \
    \       st.pop();\n            }\n        }\n    }\n    if(st.empty() && flag){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }", "    int\
    \ count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<')\n            count++;\n        else {\n            if (count == 0)\n\
    \                return false;\n            count--;\n        }\n    }\n    return\
    \ count == 0;", "\tint left = 0;\n\tint right = 0;\n\tfor (int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '<')\n\t\t\tleft++;\n\t\telse if (brackets[i]\
    \ == '>')\n\t\t\tright++;\n\t\tif (right > left)\n\t\t\treturn false;\n\t}\n\t\
    if (left == right)\n\t\treturn true;\n\telse\n\t\treturn false;", "  std::stack<char>\
    \ paren_stack;\n  for (auto bracket : brackets) {\n    if (bracket == '<') {\n\
    \      paren_stack.push(bracket);\n    } else {\n      if (paren_stack.empty())\
    \ {\n        return false;\n      }\n      paren_stack.pop();\n    }\n  }\n  return\
    \ paren_stack.empty();", "\t// place to store the characters as they get read\
    \ in\n\tstd::stack<char> store;\n\tfor (int i = 0; i < brackets.length(); i++)\
    \ {\n\t\tif (brackets[i] == '<') {\n\t\t\tstore.push(brackets[i]);\n\t\t}\n\t\t\
    if (brackets[i] == '>') {\n\t\t\tif (store.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tstore.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (store.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\t// read through\
    \ the string and push each '<' to the stack\n\t// when you encounter a '>', pop\
    \ one off\n\t// if it's empty, return false\n\t// if it's not empty, continue\
    \ with the next character\n\t// when you have read the whole string, if the stack\
    \ is empty, return true\n\t// otherwise, return false", "\treturn false;", "\t\
    // Remove the line below and add your code here\n\tint count=0;\n\tfor(int i=0;i<brackets.length();i++)\n\
    \t{\n\t\tif(brackets[i]=='<')\n\t\t\tcount++;\n\t\telse\n\t\t\tcount--;\n\t\t\
    if(count<0)\n\t\t\treturn false;\n\t}\n\tif(count==0)\n\t\treturn true;\n\telse\n\
    \t\treturn false;", "  //Your code here\n  int opencount = 0;\n  int closedcount\
    \ = 0;\n  for(int i = 0; i < brackets.length(); i++){\n    if(brackets[i] == '<'){\n\
    \      opencount++;\n    }\n    else if(brackets[i] == '>'){\n      closedcount++;\n\
    \    }\n  }\n  if(opencount == closedcount){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }", '  return false;', '  return true;', "  // your code\
    \ here\n  int left=0;\n  for(int i=0;i<brackets.size();i++){\n      if(brackets[i]=='<'){\n\
    \        left++;\n      }\n      else{\n        left--;\n      }\n      if(left<0){\n\
    \        return false;\n      }\n  }\n  if(left==0){\n    return true;\n  }\n\
    \  else{\n    return false;\n  }", "    std::stack<char> bracketStack;\n    for\
    \ (char bracket : brackets) {\n        if (bracket == '<') {\n            bracketStack.push(bracket);\n\
    \        } else if (bracket == '>') {\n            if (bracketStack.empty()) {\n\
    \                return false;\n            } else {\n                bracketStack.pop();\n\
    \            }\n        }\n    }\n    return bracketStack.empty();", "    std::stack<char>\
    \ st;\n    char c;\n    if(brackets.length() % 2 != 0)\n        return false;\n\
    \    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '<')\
    \ {\n            st.push(brackets[i]);\n        }\n        else if(brackets[i]\
    \ == '>') {\n            if(st.empty())\n                return false;\n     \
    \       st.pop();\n        }\n    }\n    if(st.empty())\n        return true;\n\
    \    else\n        return false;", "\tstd::stack<char> s;\n\tfor (char c : brackets)\
    \ {\n\t\tif (c == '<') s.push(c);\n\t\telse if (c == '>') {\n\t\t\tif (s.empty())\
    \ return false;\n\t\t\telse s.pop();\n\t\t}\n\t}\n\treturn s.empty();", "    /*if\
    \ (brackets.length() % 2 == 1)\n        return false;\n    for (int i = 0; i <\
    \ brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            for\
    \ (int j = i + 1; j < brackets.length(); j++) {\n                if (brackets[j]\
    \ == '>') {\n                    std::string part1 = brackets.substr(0, i);\n\
    \                    std::string part2 = brackets.substr(i + 1, j - i - 1);\n\
    \                    std::string part3 = brackets.substr(j + 1, brackets.length()\
    \ - j - 1);\n                    if (part2.find('<') != std::string::npos)\n \
    \                       return false;\n                    if (part1 == \"\" &&\
    \ part3 == \"\")\n                        return true;\n                    else\n\
    \                        return correct_bracketing(part1) && correct_bracketing(part3);\n\
    \                }\n            }\n        }\n    }\n    return false;*/\n   \
    \ if (brackets.length() % 2 == 1)\n        return false;\n    int n = brackets.length();\n\
    \    std::stack<char> s;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i]\
    \ == '<')\n            s.push(brackets[i]);\n        else {\n            if (s.empty())\n\
    \                return false;\n            if (s.top() == '<')\n            \
    \    s.pop();\n            else\n                return false;\n        }\n  \
    \  }\n    return s.empty();", "    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "\tint count=0;\n\tfor(int\
    \ i=0;i<brackets.length();i++){\n\t\tif(brackets[i]=='<'){\n\t\t\tcount++;\n\t\
    \t}\n\t\telse{\n\t\t\tcount--;\n\t\t}\n\t\tif(count<0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif(count==0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> s;\n\tbool open = true;\n\tif (brackets.size() == 0)\
    \ {\n\t\treturn true;\n\t}\n\tif (brackets[0] == '>') {\n\t\treturn false;\n\t\
    }\n\tfor (unsigned int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\topen = true;\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if\
    \ (brackets[i] == '>') {\n\t\t\tif (open == true) {\n\t\t\t\ts.pop();\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '<') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == '>')\
    \ {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\
    \t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\treturn false;", "  std::stack<char>\
    \ s;\n  for (char c : brackets) {\n    if (c == '<') {\n      s.push(c);\n   \
    \ } else {\n      if (s.empty()) {\n        return false;\n      }\n      s.pop();\n\
    \    }\n  }\n  return s.empty();", "    // get the length of the string\n    int\
    \ size = brackets.length();\n    // create a vector to store \"opening\" or \"\
    closing\" bracket.\n    std::vector<std::string> bracket_list;\n    // iterate\
    \ through the string and store the bracket in the vector\n    for (int i = 0;\
    \ i < size; i++) {\n        if (brackets[i] == '<') {\n            bracket_list.push_back(\"\
    opening\");\n        } else if (brackets[i] == '>') {\n            bracket_list.push_back(\"\
    closing\");\n        }\n    }\n    // create an empty stack\n    std::stack<std::string>\
    \ stk;\n    // for each bracket, compare it with the top of the stack.\n    //\
    \ if it is the closing bracket, pop the stack,\n    // if it is the opening bracket,\
    \ push it in the stack\n    // if the stack is empty, it is the false case\n \
    \   for (int i = 0; i < bracket_list.size(); i++) {\n        if (bracket_list[i]\
    \ == \"closing\") {\n            if (stk.empty()) {\n                return false;\n\
    \            } else {\n                stk.pop();\n            }\n        } else\
    \ if (bracket_list[i] == \"opening\") {\n            stk.push(bracket_list[i]);\n\
    \        }\n    }\n    // if the stack is empty after the iteration, it is true\
    \ case\n    if (stk.empty()) {\n        return true;\n    } else {\n        return\
    \ false;\n    }", "    std::stack<char> s;\n    for (char c : brackets) {\n  \
    \      if (c == '<') {\n            s.push(c);\n        } else {\n           \
    \ if (s.empty()) {\n                return false;\n            }\n           \
    \ s.pop();\n        }\n    }\n    return s.empty();", "\t// Make a stack to keep\
    \ track of unmatched left brackets\n\tstd::stack<char> left_brackets;\n\t// Loop\
    \ through each character in the string\n\tfor (char ch: brackets) {\n\t\t// If\
    \ the character is a '<', push it on the stack\n\t\tif (ch == '<') {\n\t\t\tleft_brackets.push(ch);\n\
    \t\t}\n\t\t// Otherwise (if ch is a '>')\n\t\telse {\n\t\t\t// Check if the stack\
    \ is empty; if so, we have a right bracket without a matching left bracket, so\
    \ return false\n\t\t\tif (left_brackets.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\t// Pop the top left bracket off the stack\n\t\t\tleft_brackets.pop();\n\
    \t\t}\n\t}\n\t// If the stack is empty, all the brackets matched, so return true\n\
    \tif (left_brackets.empty()) {\n\t\treturn true;\n\t}\n\t// Otherwise, there are\
    \ some unmatching left brackets, so return false\n\telse {\n\t\treturn false;\n\
    \t}", "  // TODO\n  int openBrackets = 0;\n  int closeBrackets = 0;\n  for(int\
    \ i = 0; i < brackets.length(); i++){\n    if(brackets[i] == '<'){\n      openBrackets++;\n\
    \    }\n    else if(brackets[i] == '>'){\n      closeBrackets++;\n    }\n  }\n\
    \  if(openBrackets == closeBrackets){\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }", "    std::stack<char> s;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        char curr = brackets[i];\n        if (curr == '<')\n       \
    \     s.push(curr);\n        else if (curr == '>') {\n            if (s.empty())\n\
    \                return false;\n            s.pop();\n        }\n    }\n    return\
    \ s.empty();", '', "    std::stack<char> bracket_stack;\n    for (int i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            bracket_stack.push(brackets[i]);\n\
    \        } else {\n            if (bracket_stack.empty()) {\n                return\
    \ false;\n            }\n            bracket_stack.pop();\n        }\n    }\n\
    \    return bracket_stack.empty();", "  // TODO: make this work\n  int total_parens\
    \ = 0;\n  int total_brackets = 0;\n  for (int i = 0; i < brackets.length(); i++)\
    \ {\n    if (brackets[i] == '(') {\n      total_parens++;\n    } else if (brackets[i]\
    \ == ')') {\n      total_parens--;\n    } else if (brackets[i] == '<') {\n   \
    \   total_brackets++;\n    } else if (brackets[i] == '>') {\n      total_brackets--;\n\
    \    }\n    if (total_parens < 0 || total_brackets < 0) {\n      return false;\n\
    \    }\n  }\n  if (total_parens != 0 || total_brackets != 0) {\n    return false;\n\
    \  }\n  return true;", "    std::stack<char> s;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            s.push(brackets[i]);\n\
    \        } else {\n            if (s.empty()) {\n                return false;\n\
    \            }\n            if (s.top() == '<') {\n                s.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    if (s.empty()) {\n        return true;\n    } else {\n        return\
    \ false;\n    }", "  std::stack<char> mystack;\n  for (size_t i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      mystack.push(brackets[i]);\n  \
    \  } else {\n      if (mystack.empty()) {\n        return false;\n      } else\
    \ {\n        mystack.pop();\n      }\n    }\n  }\n  if (mystack.empty()) {\n \
    \   return true;\n  } else {\n    return false;\n  }", "\tint n = brackets.length();\n\
    \tint counter = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (brackets[i] == '<')\
    \ {\n\t\t\tcounter++;\n\t\t}\n\t\telse {\n\t\t\tcounter--;\n\t\t}\n\t\tif (counter\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (counter != 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;", "  // Write your code here.\n  std::stack<char> st;\n  for(int\
    \ i=0;i<brackets.length();i++){\n    if(brackets[i]=='<'){\n      st.push(brackets[i]);\n\
    \    }\n    else{\n      if(st.empty()){\n        return false;\n      }\n   \
    \   else{\n        st.pop();\n      }\n    }\n  }\n  if(st.empty()){\n    return\
    \ true;\n  }\n  else{\n    return false;\n  }", "    int n = brackets.size();\n\
    \    int counter = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i]\
    \ == '<') counter++;\n        else counter--;\n        if (counter < 0) return\
    \ false;\n    }\n    return counter == 0;", '', '  return false;', "    // WRITE\
    \ THE FUNCTION HERE!\n    int count1 = 0;\n    int count2 = 0;\n    for (int i\
    \ = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        count1 += 1;\n        }\n        else if (brackets[i] == '>') {\n   \
    \         count2 += 1;\n        }\n    }\n    if (count1 == count2) {\n      \
    \  return true;\n    }\n    else {\n        return false;\n    }", "  // new code\
    \ here\n  std::stack<char> s;\n\n  for (auto c : brackets) {\n    if (c == '<')\n\
    \      s.push(c);\n    else if (c == '>') {\n      if (s.empty())\n        return\
    \ false;\n      else\n        s.pop();\n    }\n  }\n\n  return s.empty();", " \
    \ // This can be rewritten as a list comprehension (see the next function)\n \
    \ // int count = 0;\n  // for (char c : brackets) {\n  //   if (c == '<') {\n\
    \  //     count++;\n  //   } else if (c == '>') {\n  //     count--;\n  //   }\n\
    \  //   if (count < 0) {\n  //     return false;\n  //   }\n  // }\n  // return\
    \ count == 0;\n  std::stack<char> s;\n  for (char c : brackets) {\n    if (c ==\
    \ '<') {\n      s.push(c);\n    } else if (c == '>') {\n      if (s.empty()) {\n\
    \        return false;\n      }\n      s.pop();\n    }\n  }\n  return s.empty();",
  "    int cnt = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            cnt++;\n        } else {\n            cnt--;\n      \
    \  }\n        if (cnt < 0) {\n            return false;\n        }\n    }\n  \
    \  return cnt == 0;", "\tint count = 0;\n\tfor (size_t i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == '>') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\t// TODO:  Write this function.\n\tint n\
    \ = brackets.length();\n\t//cout << n << endl;\n\tstack<char> bracket;\n\tint\
    \ i;\n\tfor (i = 0; i < n; i++) {\n\t\t//cout << brackets[i] << endl;\n\t\tif\
    \ (brackets[i] == '<') {\n\t\t\tbracket.push(brackets[i]);\n\t\t}\n\t\telse if\
    \ (brackets[i] == '>') {\n\t\t\tif (bracket.empty()) {\n\t\t\t\t//cout << \"broken\"\
    \ << endl;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbracket.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (bracket.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}", "\t// if(brackets == \"<\"){\n\t// \treturn false;\n\t\
    // }\n\t// if(brackets == \"<>\"){\n\t// \treturn true;\n\t// }\n\t// if(brackets\
    \ == \"<<><>>\"){\n\t// \treturn true;\n\t// }\n\t// if(brackets == \"><<>\"){\n\
    \t// \treturn false;\n\t// }\n\tint count_open = 0;\n\tint count_close = 0;\n\t\
    std::stack<char> stk;\n\tfor(int i = 0; i < brackets.length(); i++){\n\t\tif(brackets[i]\
    \ == '<'){\n\t\t\tcount_open += 1;\n\t\t\tstk.push(brackets[i]);\n\t\t}\n\t\t\
    else if(brackets[i] == '>'){\n\t\t\tcount_close += 1;\n\t\t\tif(stk.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(count_open == count_close){\n\t\treturn true;\n\t}\n\telse{\n\t\t\
    return false;\n\t}", "\t// your code here!\n\treturn false;", "    int count =\
    \ 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            count++;\n        } else {\n            count--;\n  \
    \      }\n        if (count < 0) {\n            return false;\n        }\n   \
    \ }\n    return count == 0;", "    int n = brackets.size();\n    int count = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<') {\n      \
    \      count++;\n        } else {\n            count--;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;", "\tstd::stack<char> s;\n\tfor (char c : brackets) {\n\t\tif (c == '<')\
    \ {\n\t\t\ts.push(c);\n\t\t} else {\n\t\t\tif (s.empty()) return false;\n\t\t\t\
    if (s.top() == '<') {\n\t\t\t\ts.pop();\n\t\t\t} else {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn s.empty();", "    std::stack<char> st;\n    for(char\
    \ c : brackets) {\n        if(c == '<') {\n            st.push(c);\n        }\
    \ else {\n            if(st.empty()) {\n                return false;\n      \
    \      }\n            st.pop();\n        }\n    }\n    return st.empty();", " \
    \   std::stack<char> stack_of_brackets;\n    for (char bracket : brackets) {\n\
    \        if (bracket == '<') {\n            stack_of_brackets.push(bracket);\n\
    \        } else {\n            if (stack_of_brackets.empty()) {\n            \
    \    return false;\n            }\n            stack_of_brackets.pop();\n    \
    \    }\n    }\n    return stack_of_brackets.empty();", "  //put your solution\
    \ here\n  return false;", "    std::stack<char> bracketStack;\n    for (char bracket\
    \ : brackets) {\n        if (bracket == '<') {\n            bracketStack.push(bracket);\n\
    \        } else if (bracket == '>') {\n            if (bracketStack.empty()) {\n\
    \                return false;\n            } else {\n                bracketStack.pop();\n\
    \            }\n        }\n    }\n    return bracketStack.empty();", "  // check\
    \ that the brackets are balanced.\n  // <1> is 1, <<1>> is 4.\n  std::stack<char>\
    \ s;\n  for (int i = 0; i < brackets.size(); i++) {\n    char c = brackets[i];\n\
    \    if (c == '<') {\n      s.push(c);\n    } else {\n      if (s.empty()) {\n\
    \        return false;\n      }\n      s.pop();\n    }\n  }\n  if (s.empty())\
    \ {\n    return true;\n  } else {\n    return false;\n  }", "\tint len = brackets.length();\n\
    \tstd::stack<char> S;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tS.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == '>')\
    \ {\n\t\t\tif (S.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tS.pop();\n\t\
    \t}\n\t}\n\tif (S.empty()) {\n\t\treturn true;\n\t}\n\treturn false;", "  std::stack<char>\
    \ stk;\n  for (char i : brackets) {\n    if (i == '<')\n      stk.push(i);\n \
    \   else if (i == '>') {\n      if (stk.empty())\n        return false;\n    \
    \  stk.pop();\n    }\n  }\n  return stk.empty();", "\tint count = 0;\n\tfor (char\
    \ c : brackets) {\n\t\tif (c == '<') {\n\t\t\tcount++;\n\t\t} else if (c == '>')\
    \ {\n\t\t\tcount--;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (count <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "    std::stack<char>\
    \ st;\n    char c;\n    int size = brackets.size();\n    for(int i = 0; i < size;\
    \ i++) {\n        c = brackets[i];\n        if(c == '<')\n            st.push(c);\n\
    \        else if(c == '>') {\n            if(st.empty())\n                return\
    \ false;\n            else\n                st.pop();\n        }\n    }\n    if(st.empty())\n\
    \        return true;\n    else\n        return false;", "    int size = brackets.size();\n\
    \    std::stack<char> st;\n    if(size%2==1) return false;\n    else {\n     \
    \   for(int i=0;i<size;i++){\n            if(brackets[i]=='<'){\n            \
    \    st.push(brackets[i]);\n            }\n            else if(brackets[i]=='>'){\n\
    \                if(st.empty()) return false;\n                st.pop();\n   \
    \         }\n        }\n        if(st.empty()) return true;\n        else return\
    \ false;\n    }", "    // your code here\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<')\n            count++;\n        else\n          \
    \  count--;\n        if(count<0)\n            return false;\n    }\n    if(count>0)\n\
    \        return false;\n    return true;", "  // Your code here\n  int cnt = 0;\n\
    \  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') cnt++;\n\
    \    else cnt--;\n    if (cnt < 0) return false;\n  }\n  return cnt == 0;", " \
    \   // your code here\n    int count = 0;\n    for (char c : brackets) {\n   \
    \     if (c == '<') {\n            count++;\n        } else {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;", "    std::stack<char> bracketStack;\n    for (char\
    \ bracket : brackets) {\n        if (bracket == '<') {\n            bracketStack.push(bracket);\n\
    \        } else if (bracket == '>') {\n            if (bracketStack.empty()) return\
    \ false;\n            bracketStack.pop();\n        }\n    }\n    return bracketStack.empty();",
  "\t// TODO", "  /* your code here */\n  // The outer loop iterates over the input\
    \ string brackets, one character at a time.\n  int count = 0;\n  // Inside the\
    \ outer loop, we use a while loop to process a sequence of <\n  // and >. This\
    \ inner loop should increment count each time it sees a < and decrement count\
    \ each time it sees a >.\n  for (unsigned int i = 0; i < brackets.size(); i++)\
    \ {\n    if (brackets[i] == '<') {\n      count++;\n    } else if (brackets[i]\
    \ == '>') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  if (count == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }", '    return false;', "\tint count = 0;\n\tfor (int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == '>') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif (count != 0) {\n\t\treturn false;\n\t}\n\treturn true;", "  \
    \  int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n       \
    \ if (brackets[i] == '<')\n            count++;\n        else\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return (count ==\
    \ 0);", "\t// if length of string is odd, then it is not possible\n\tif(brackets.length()%2!=0)\
    \ return false;\n\t// Check if the string is empty or not\n\tif(brackets.empty())\
    \ return true;\n\t// if string starts with closing bracket, then it is not possible\n\
    \tif(brackets[0]=='>') return false;\n\t// Initially no open brackets\n\tint count\
    \ = 0;\n\t// for loop for each element in the string\n\tfor(int i=0;i<brackets.length();i++){\n\
    \t\t// for each opening bracket, increment the count\n\t\tif(brackets[i]=='<'){\n\
    \t\t\tcount++;\n\t\t}\n\t\t// for each closing bracket, decrement the count\n\t\
    \telse if(brackets[i]=='>'){\n\t\t\tcount--;\n\t\t}\n\t\t// if count becomes negative,\
    \ then it is not possible\n\t\tif(count<0) return false;\n\t}\n\t// if count is\
    \ 0, then it is possible\n\tif(count==0) return true;\n\t// else it is not possible\n\
    \treturn false;", "    int opening = 0;\n    int closing = 0;\n    for (char ch:\
    \ brackets) {\n        if (ch == '<') {\n            opening++;\n        } else\
    \ if (ch == '>') {\n            closing++;\n        }\n    }\n    return (opening\
    \ == closing);", "    std::stack<char> stk;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            stk.push(brackets[i]);\n\
    \        } else {\n            if (stk.empty()) {\n                return false;\n\
    \            }\n            if (stk.top() == '<') {\n                stk.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    if (stk.empty()) {\n        return true;\n    } else {\n        return\
    \ false;\n    }", "    std::stack<char> stack;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<')\n            stack.push(brackets[i]);\n\
    \        else if (brackets[i] == '>') {\n            if (stack.empty())\n    \
    \            return false;\n            else\n                stack.pop();\n \
    \       }\n    }\n    return stack.empty();", "    // replace this placeholder\
    \ with your code.\n\tstack<char>s;\n\tfor(char a:brackets)\n\t{\n\t\tif(a=='<')\n\
    \t\t\ts.push(a);\n\t\telse if(a=='>')\n\t\t{\n\t\t\tif(s.empty())\n\t\t\t\treturn\
    \ false;\n\t\t\ts.pop();\n\t\t}\n\t}\n\tif(s.empty())\n\t\treturn true;\n\telse\n\
    \t\treturn false;", "  stack<char> s;\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      s.push(brackets[i]);\n    } else\
    \ {\n      if (s.empty()) {\n        return false;\n      }\n      s.pop();\n\
    \    }\n  }\n  return s.empty();", "  //\n  // YOUR CODE HERE\n  //\n  std::stack<char>\
    \ stack;\n  for (size_t i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.empty())\
    \ {\n        return false;\n      } else {\n        stack.pop();\n      }\n  \
    \  }\n  }\n  return stack.empty();", "    // write your code here\n    int left\
    \ = 0;\n    int right = 0;\n    for (char c : brackets) {\n        if (c == '<')\
    \ {\n            left++;\n        } else {\n            right++;\n        }\n\
    \        if (right > left) {\n            return false;\n        }\n    }\n  \
    \  return left == right;", "    int count = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "    // YOUR CODE HERE\n\
    \    int count = 0;\n    for (char i : brackets) {\n        if (i == '<') {\n\
    \            count++;\n        } else if (i == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;", "  std::stack<char> s;\n  for (char c : brackets)\
    \ {\n    if (c == '<') s.push(c);\n    else if (c == '>') {\n      if (s.empty())\
    \ return false;\n      s.pop();\n    }\n  }\n  return s.empty();", "\t//1. iterate\
    \ through string\n\t//2. if see <, increment counter\n\t//3. if see > and counter\
    \ = 0, return false\n\t//4. if see > and counter != 0, decrement counter\n\tint\
    \ counter = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tcounter++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\
    \tif (counter == 0) return false;\n\t\t\tcounter--;\n\t\t}\n\t}\n\treturn counter\
    \ == 0;", "    int size=brackets.size();\n    int count=0;\n    for(int i=0;i<size;i++){\n\
    \        if(brackets[i]=='<')\n            count++;\n        else\n          \
    \  count--;\n        if(count<0)\n            return false;\n    }\n    if(count==0)\n\
    \        return true;\n    else\n        return false;", "  int l = 0;\n  int\
    \ r = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '<') {\n      l++;\n    } else {\n      r++;\n    }\n    if (r > l) {\n    \
    \  return false;\n    }\n  }\n  return r == l;", "    // Iterate through the brackets.\n\
    \    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n     \
    \   if (brackets[i] == '<') {\n            count++;\n        } else if (brackets[i]\
    \ == '>') {\n            count--;\n        }\n        if (count < 0) {\n     \
    \       return false;\n        }\n    }\n    if (count != 0) {\n        return\
    \ false;\n    }\n    return true;", "  bool open = false;\n  for (int i = 0; i\
    \ < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      open = true;\n\
    \    } else if (brackets[i] == '>') {\n      if (open) {\n        open = false;\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n  return open ==\
    \ false;", "    int open_count = 0;\n    for (unsigned int i = 0; i < brackets.length();\
    \ i++) {\n        char curr = brackets[i];\n        if (curr == '<') {\n     \
    \       open_count++;\n        } else if (curr == '>') {\n            open_count--;\n\
    \        }\n        if (open_count < 0) {\n            return false;\n       \
    \ }\n    }\n    return open_count == 0;", "    std::stack<char> bracket_stack;\n\
    \    // loop through every character\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        // if it's a \"<\" push it onto the stack\n        if (brackets[i]\
    \ == '<') {\n            bracket_stack.push(brackets[i]);\n        }\n       \
    \ // else if it's a \">\"\n        else if (brackets[i] == '>') {\n          \
    \  // check if the stack is empty\n            if (bracket_stack.empty()) {\n\
    \                // if it is, there is no opening bracket for this closing bracket\n\
    \                return false;\n            }\n            // if it isn't, pop\
    \ an element off the stack\n            bracket_stack.pop();\n        }\n    }\n\
    \    // if the stack is empty, return true\n    if (bracket_stack.empty()) {\n\
    \        return true;\n    }\n    else {\n        // else there was an opening\
    \ bracket with no corresponding closing bracket\n        return false;\n    }",
  "    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n       \
    \ if (brackets[i] == '<') {\n            count++;\n        } else {\n        \
    \    count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count == 0;", "\tstd::stack<char> st;\n\tfor (auto\
    \ e : brackets) {\n\t\tif (e == '<') {\n\t\t\tst.push(e);\n\t\t}\n\t\telse {\n\
    \t\t\tif (st.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t\
    }\n\t}\n\treturn st.empty();", "    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "    int count_ = 0;\n  \
    \  for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            count_++;\n        } else {\n            count_--;\n        }\n\
    \        if (count_ < 0) {\n            return false;\n        }\n    }\n    return\
    \ count_ == 0;", "    int i = 0;\n    int count = 0;\n    for (i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ if (brackets[i] == '>') {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    if (count == 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }", "  int opening\
    \ = 0;\n  int closing = 0;\n  for (int i = 0; i < brackets.length(); i++) {\n\
    \    if (brackets[i] == '<') {\n      opening++;\n    } else if (brackets[i] ==\
    \ '>') {\n      closing++;\n    }\n  }\n  if (opening != closing) {\n    return\
    \ false;\n  }\n  std::stack<char> bracket_stack;\n  for (int i = 0; i < brackets.length();\
    \ i++) {\n    if (brackets[i] == '<') {\n      bracket_stack.push(brackets[i]);\n\
    \    } else if (brackets[i] == '>') {\n      if (bracket_stack.size() == 0) {\n\
    \        return false;\n      }\n      bracket_stack.pop();\n    }\n  }\n  return\
    \ true;", "    int counter = 0;\n    for (int i = 0; i < brackets.length(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            counter++;\n        } else\
    \ {\n            counter--;\n        }\n        if (counter < 0) {\n         \
    \   return false;\n        }\n    }\n    return (counter == 0);", "    // todo!\n\
    \    int len = brackets.length();\n    int count = 0;\n    for(int i = 0; i <\
    \ len; i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n\
    \        else if(brackets[i] == '>'){\n            count--;\n        }\n     \
    \   if(count < 0){\n            return false;\n        }\n    }\n    if(count\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }",
  "  int count = 0;\n  for (char c : brackets) {\n    if (c == '<') count++;\n   \
    \ else if (c == '>') count--;\n    if (count < 0) return false;\n  }\n  return\
    \ count == 0;", "  int count = 0;\n  for (char& c : brackets) {\n    if (c ==\
    \ '<') {\n      count++;\n    } else if (c == '>') {\n      count--;\n    } else\
    \ {\n      return false;\n    }\n    if (count < 0) {\n      return false;\n \
    \   }\n  }\n  return count == 0;", "    int level = 0;\n    for (int i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            level++;\n\
    \        } else {\n            if (level <= 0) return false;\n            level--;\n\
    \        }\n    }\n    return level == 0;", "\t// Your code goes here!\n\tint\
    \ cnt = 0;\n\tfor (auto i : brackets) {\n\t\tif (i == '<') {\n\t\t\tcnt++;\n\t\
    \t}\n\t\telse {\n\t\t\tcnt--;\n\t\t}\n\t\tif (cnt < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn (cnt == 0);", "  if (brackets == \"\") {\n    return true;\n\
    \  }\n  int count = 0;\n  for (int i = 0; i < brackets.length(); i++) {\n    if\
    \ (brackets[i] == '<') {\n      count++;\n    } else {\n      count--;\n    }\n\
    \    if (count < 0) {\n      return false;\n    }\n  }\n  if (count != 0) {\n\
    \    return false;\n  }\n  return true;", "\tstd::stack<char> st;\n\tfor (int\
    \ i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tst.push(brackets[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tif (st.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (st.empty()) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\
    \tfor (unsigned int i = 0; i < brackets.length(); i++) {\n\t\tchar ch = brackets[i];\n\
    \t\tif (ch == '<') {\n\t\t\ts.push(ch);\n\t\t} else {\n\t\t\tif (s.empty()) {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
  "    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n       \
    \ if (brackets[i] == '<') {\n            count++;\n        } else {\n        \
    \    count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count == 0;", "    int sum = 0;\n    for (int i\
    \ = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n      \
    \      sum += 1;\n        } else {\n            sum -= 1;\n        }\n       \
    \ if (sum < 0) {\n            return false;\n        }\n    }\n    return sum\
    \ == 0;", "    // your solution here.\n    std::stack<char> s;\n    for(int i\
    \ = 0; i < brackets.size(); i++){\n      if(brackets[i] == '<')\n        s.push(brackets[i]);\n\
    \      else{\n        if(s.empty())\n          return false;\n        else\n \
    \         s.pop();\n      }\n    }\n    if(s.empty())\n      return true;\n  \
    \  else\n      return false;", '  return false;', "\tint count = 0;\n\tif (brackets.length()\
    \ == 0) {\n\t\treturn true;\n\t}\n\tif (brackets[0] == '>') {\n\t\treturn false;\n\
    \t}\n\tfor (char c : brackets) {\n\t\tif (c == '<') {\n\t\t\tcount += 1;\n\t\t\
    }\n\t\telse if (c == '>') {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}", "    int count=0;\n    for(auto i:brackets){\n\
    \        if(i=='<')\n            count++;\n        else\n            count--;\n\
    \        if(count<0)\n            return false;\n    }\n    return count==0;",
  "  // add your code here!\n  int count = 0;\n  for (int i = 0; i < brackets.length();\
    \ i++) {\n    if (brackets[i] == '<') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  if (count ==\
    \ 0) {\n    return true;\n  } else {\n    return false;\n  }", "    int count\
    \ = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            count += 1;\n        } else if (brackets[i] == '>') {\n\
    \            count -= 1;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "    int totalCount = 0;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            totalCount++;\n        } else {\n            totalCount--;\n\
    \        }\n        if (totalCount < 0) {\n            return false;\n       \
    \ }\n    }\n    if (totalCount == 0) {\n        return true;\n    } else {\n \
    \       return false;\n    }", "    // YOUR CODE HERE\n    int count=0;\n    for(int\
    \ i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            count++;\n\
    \        }\n        else if(brackets[i]=='>'){\n            count--;\n       \
    \ }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }", "    int\
    \ left = 0;\n    int right = 0;\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            left++;\n        } else if\
    \ (brackets[i] == '>') {\n            right++;\n        }\n    }\n    if (left\
    \ == right) {\n        return true;\n    } else {\n        return false;\n   \
    \ }", "    std::stack<char> s;\n    for (auto ch: brackets) {\n        if (ch\
    \ == '<') {\n            s.push(ch);\n        } else {\n            if (s.empty())\
    \ return false;\n            s.pop();\n        }\n    }\n    return s.empty();",
  "    std::stack<char> brackets_stack;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            brackets_stack.push(brackets[i]);\n\
    \        } else {\n            if (brackets_stack.empty()) {\n               \
    \ return false;\n            }\n            brackets_stack.pop();\n        }\n\
    \    }\n    return brackets_stack.empty();", "    /* __________ YOUR CODE HERE\
    \ __________ */\n    int count = 0;\n    for (char const &c : brackets) {\n  \
    \      if (c == '<') {\n            count += 1;\n        } else if (c == '>')\
    \ {\n            count -= 1;\n        }\n        if (count < 0) {\n          \
    \  return false;\n        }\n    }\n    return count == 0;", "   int bracket_counter\
    \ = 0;\n   for (int i = 0; i < brackets.length(); i++) {\n       if (brackets[i]\
    \ == '<') {\n           bracket_counter++;\n       } else if (brackets[i] == '>')\
    \ {\n           bracket_counter--;\n       } else {\n           return false;\n\
    \       }\n       if (bracket_counter < 0) {\n           return false;\n     \
    \  }\n   }\n   return bracket_counter == 0;", "    std::vector<char> data;\n \
    \   for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            data.push_back(brackets[i]);\n        } else {\n            if\
    \ (data.size() == 0) {\n                return false;\n            }\n       \
    \     data.pop_back();\n        }\n    }\n    if (data.size() == 0) {\n      \
    \  return true;\n    }\n    return false;", "\tint count = 0;\n\tfor (auto itr\
    \ = brackets.begin(); itr != brackets.end(); itr++) {\n\t\tif (*itr == '<') {\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if (*itr == '>') {\n\t\t\tcount--;\n\t\t}\n\t\t\
    if (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tfor (size_t i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '>') {\n\t\t\treturn false;\n\t\t}\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tbrackets[i] = '#';\n\t\t\tsize_t j = brackets.find('>');\n\t\
    \t\tif (j != std::string::npos) {\n\t\t\t\tbrackets[j] = '#';\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (size_t i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] !=\
    \ '#') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "    int c = 0;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            c++;\n        } else {\n            c--;\n        }\n       \
    \ if (c < 0) {\n            return false;\n        }\n    }\n    return c == 0;",
  "    // your code here\n    std::stack<char> checker;\n    for(int i = 0; i < brackets.length();\
    \ i++){\n      if(brackets[i] == '<'){\n        checker.push(brackets[i]);\n \
    \     }\n      else if(brackets[i] == '>'){\n        if(checker.empty()){\n  \
    \        return false;\n        }\n        else{\n          checker.pop();\n \
    \       }\n      }\n    }\n    if(checker.empty()){\n      return true;\n    }\n\
    \    else{\n      return false;\n    }", "    // you may not have a loop.\n  \
    \  // use this to store the number of \"<\" so far\n    int depth = 0;\n    //\
    \ the following is not allowed:\n    // for (int i = 0; i < brackets.size(); i++)\
    \ {\n    // you may use a for-each loop or a range-based for loop.\n    for (char\
    \ c : brackets) {\n        if (c == '<') {\n            depth++;\n        } else\
    \ {\n            depth--;\n        }\n        if (depth < 0) {\n            return\
    \ false;\n        }\n    }\n    return depth == 0;", "    int count = 0;\n   \
    \ for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            count++;\n        } else {\n            count--;\n        }\n\
    \        if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;", "\t// TODO: replace this with your code!\n\treturn false;", " \
    \   // YOUR CODE HERE\n    std::stack<char> s;\n    for(char bracket : brackets){\n\
    \        if(bracket == '<'){\n            s.push(bracket);\n        }\n      \
    \  else if(bracket == '>'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }", "    int open_brackets = 0;\n    for\
    \ (auto bracket : brackets) {\n        if (bracket == '<') {\n            open_brackets++;\n\
    \        } else {\n            if (open_brackets > 0) {\n                open_brackets--;\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return open_brackets == 0;", "  stack<char> bracket_stack;\n\n  for\
    \ (auto& bracket : brackets) {\n    if (bracket == '<') {\n      bracket_stack.push(bracket);\n\
    \    } else if (bracket == '>') {\n      if (bracket_stack.empty()) {\n      \
    \  return false;\n      } else {\n        bracket_stack.pop();\n      }\n    }\n\
    \  }\n\n  return bracket_stack.empty();", "    // TODO: your code here\n    //\
    \ This function should be replaced with a solution.\n    int count = 0;\n    for(int\
    \ i = 0; i < brackets.length(); i++){\n      if(brackets[i] == '<'){\n       \
    \ count++;\n      }\n      else if(brackets[i] == '>'){\n        count--;\n  \
    \    }\n      if(count < 0){\n        return false;\n      }\n    }\n    if(count\
    \ == 0){\n      return true;\n    }\n    else{\n      return false;\n    }", "\t\
    // Write your code here.\n\tstd::stack<char> myStack;\n\tfor (int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tmyStack.push(brackets[i]);\n\t\t\
    }\n\t\telse {\n\t\t\tif (myStack.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\
    \t\t\t\tmyStack.pop();\n\t\t}\n\t}\n\tif (myStack.empty())\n\t\treturn true;\n\
    \telse\n\t\treturn false;", "  // put your code here\n  int l = brackets.length();\n\
    \  int c = 0;\n  for(int i = 0; i < l; i++) {\n    if(brackets[i] == '<') {\n\
    \      c++;\n    } else {\n      c--;\n    }\n    if(c < 0) {\n      return false;\n\
    \    }\n  }\n  if(c != 0) {\n    return false;\n  }\n  return true;", "    int\
    \ count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<')\n            count++;\n        else if (brackets[i] == '>')\n      \
    \      count--;\n        if (count < 0)\n            return false;\n    }\n  \
    \  return count == 0;", "    std::stack<char> s;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            s.push(brackets[i]);\n\
    \        } else {\n            if (s.empty()) {\n                return false;\n\
    \            }\n            s.pop();\n        }\n    }\n    return s.empty();",
  "  int open = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      open++;\n    } else {\n      open--;\n    }\n    if (open <\
    \ 0) {\n      return false;\n    }\n  }\n  return open == 0;", "    int count\
    \ = 0;\n    for (char& b : brackets) {\n        if (b == '<') {\n            count++;\n\
    \        } else if (b == '>') {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count == 0;",
  "    if (brackets == \"\")\n        return true;\n    if (brackets.length() % 2\
    \ != 0)\n        return false;\n    int openCount = 0;\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<')\n            openCount++;\n\
    \        else if (brackets[i] == '>')\n            openCount--;\n        if (openCount\
    \ < 0)\n            return false;\n    }\n    if (openCount != 0)\n        return\
    \ false;\n    return true;", "    int openCount = 0;\n    int closeCount = 0;\n\
    \    int i;\n    for(i = 0; i < brackets.length(); i++){\n        if(brackets[i]\
    \ == '<'){\n            openCount++;\n        }\n        else if(brackets[i] ==\
    \ '>'){\n            closeCount++;\n        }\n        if(closeCount > openCount){\n\
    \            return false;\n        }\n    }\n    if(openCount == closeCount){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }", "  std::stack<char>\
    \  stack;\n  int size = brackets.size();\n  for (int i = 0; i < size; i++) {\n\
    \    if (brackets[i] == '<') {\n      stack.push(brackets[i]);\n    } else {\n\
    \      if (stack.empty()) {\n        return false;\n      } else {\n        stack.pop();\n\
    \      }\n    }\n  }\n  if (stack.empty()) {\n    return true;\n  } else {\n \
    \   return false;\n  }", "    /* YOUR CODE HERE */\n    int sum = 0;\n    for\
    \ (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n\
    \            sum++;\n        } else {\n            sum--;\n        }\n       \
    \ if (sum < 0) {\n            return false;\n        }\n    }\n    if (sum ==\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }", " \
    \   std::stack<char> s;\n    for (int i = 0; i < brackets.size(); i++) {\n   \
    \     if (brackets[i] == '<') {\n            s.push(brackets[i]);\n        } else\
    \ {\n            if (s.empty()) {\n                return false;\n           \
    \ }\n            s.pop();\n        }\n    }\n    return s.empty();", "\tint j\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '<') {\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t\tif (j < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif (j != 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;", "   std::stack<char> s;\n   for(int i = 0; i < brackets.size(); i++)\
    \ {\n      if(brackets[i] == '<') {\n         s.push(brackets[i]);\n      } else\
    \ {\n         if(s.empty()) return false;\n         s.pop();\n      }\n   }\n\
    \   return s.empty();"]
stop_tokens:
- "\n}"
