language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function.\n  return 1;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpo3kuq67m: /tmp/tmpo3kuq67m.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long product = 1;\n  for (long i = 1; i <= n; i++) {\n    product\
    \ *= i;\n  }\n  return product;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp51nxvnnl: /tmp/tmp51nxvnnl.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  while (n > 0) {\n    long i = n;\n    while (i > 0) {\n      result\
    \ *= i;\n      i--;\n    }\n    n--;\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here.\n  // It is a good idea to print the input for debugging purposes.\n\
    \  // If you want to print the special factorial, it is a good idea to\n  // write\
    \ a recursive function to calculate this.\n  assert(n>0);\n  long ans = 1;\n \
    \ while(n>0){\n    ans = ans*n;\n    n--;\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0bitpy7p: /tmp/tmp0bitpy7p.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long prod =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    prod *= i;\n  }\n  return prod;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2fgl4jkw: /tmp/tmp2fgl4jkw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp05eh9t06: /tmp/tmp05eh9t06.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long brazilian_factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        long num = 1;\n        for\
    \ (long j = 1; j <= i; j++) {\n            num *= j;\n        }\n        brazilian_factorial\
    \ *= num;\n    }\n    return brazilian_factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Use your\
    \ function named \"factorial\" here.\n  long fact=1;\n  for(int i=1;i<=n;i++)\n\
    \  {\n    fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp4wpew6rn: /tmp/tmp4wpew6rn.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fac = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5rzwfq8k: /tmp/tmp5rzwfq8k.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpm5aefwcm: /tmp/tmpm5aefwcm.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long ans = 1;\n\
    \  for (int i = n; i > 0; i--)\n    ans *= i;\n  return ans;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpyk5_heuw: /tmp/tmpyk5_heuw.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    int i;\n    if (n == 0)\n        return 1;\n    for (i = 2; i <= n;\
    \ i++)\n        fact = fact * i;\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpdzr4x5jf: /tmp/tmpdzr4x5jf.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    long factorial = 1;\n\
    \    for (int j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *=\
    \ factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  long fact = 1;\n  for (long i = n; i > 0; i--) {\n    fact *= i;\n\
    \  }\n  return fact * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    std::cout << \"Not implemented!\" << std::endl;\n    return 0;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp63hpy4hy: /tmp/tmp63hpy4hy.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: 'Not implemented!

    '
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp05eh9t06: /tmp/tmp05eh9t06.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // I\n   \
    \ assert(n > 0);\n    // II\n    long res = 1;\n    for (int i = n; i > 0; i--)\
    \ {\n        res *= i;\n    }\n    // III\n    return res;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz6x38fgl: /tmp/tmpz6x38fgl.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    int result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        for (int j = i; j > 0; j--)\
    \ {\n            result *= j;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp26i2f19r: /tmp/tmp26i2f19r.cpp:24: int main(): Assertion `candidate((7))
    == (125411328000)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\
    \ {\n    return 1;\n  }\n  else {\n    return n * special_factorial(n - 1);\n\
    \  }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpcu5r4zer: /tmp/tmpcu5r4zer.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long special_factorial\
    \ = 1;\n    while (n > 0) {\n        special_factorial *= factorial(n);\n    \
    \    n -= 1;\n    }\n    return special_factorial;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1v8i1ck.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpq1v8i1ck.cpp:14:30: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   14 |         special_factorial *= factorial(n);\n\
    \      |                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    if (n <= 1)\n        return 1;\n    while (n > 1) {\n        fact\
    \ *= n;\n        n--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpgwmgt7pd: /tmp/tmpgwmgt7pd.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial = 1;\n    for (long\
    \ j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *= factorial;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong fac = 1;\n\
    \tfor (long i = 1; i <= n; i++) {\n\t\tfac *= i;\n\t}\n\tfor (long i = n - 1;\
    \ i > 0; i--) {\n\t\tfac *= i;\n\t}\n\treturn fac;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpq2sl38w5: /tmp/tmpq2sl38w5.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long f = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp253tlv0k: /tmp/tmp253tlv0k.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long factorial = 1;\n    for (long i = 1; i <= n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4c_l58_3: /tmp/tmp4c_l58_3.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    int tmp;\n    if (n == 1) return 1;\n    else{\n        tmp = special_factorial(n-1);\n\
    \        return tmp * n;\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpktnlwciw: /tmp/tmpktnlwciw.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long total\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        total *= i;\n    }\n    return\
    \ total;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpo2_a19h2: /tmp/tmpo2_a19h2.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpmikala22: /tmp/tmpmikala22.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphjfnsauq: /tmp/tmphjfnsauq.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long temp =\
    \ 1;\n  while(n > 0) {\n    temp *= n--;\n  }\n  return temp;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpmpfbps1n: /tmp/tmpmpfbps1n.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ solution here.\n  // Do not create any arrays.\n  // Can be solved in O(n) time\
    \ complexity.\n  long fact = 1;\n  for(int i = 1; i<=n; i++){\n    fact *= i;\n\
    \  }\n  int temp = fact;\n  for(int i = 1; i<n; i++){\n    fact *= temp;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpnolqxm40: /tmp/tmpnolqxm40.cpp:27: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1)\n        return 1;\n    else\n        return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmprc39xt8a: /tmp/tmprc39xt8a.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpz7huj7se: /tmp/tmpz7huj7se.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tif (n == 0 ||\
    \ n == 1)\n\t\treturn 1;\n\telse\n\t\treturn n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpvpl1f592: /tmp/tmpvpl1f592.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long res =\
    \ 1; \n    while (n > 0) \n    { \n        res = res * n; \n        n = n - 1;\
    \ \n    } \n    return res; \n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp2c09t5nf: /tmp/tmp2c09t5nf.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long retval\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        retval *= i;\n    }\n    return\
    \ retval;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe0uafy0l: /tmp/tmpe0uafy0l.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    for\
    \ (long i = n - 1; i > 0; i--) {\n        result *= i;\n    }\n    for (long i\
    \ = n - 2; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpximb4zre: /tmp/tmpximb4zre.cpp:27: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  int res = 1;\n  for (int i = 1; i <= n; i++) {\n    res *= i;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp407dpn4i: /tmp/tmp407dpn4i.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong factorial\
    \ = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tfactorial *= i;\n\t}\n\treturn factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpnoytgtts: /tmp/tmpnoytgtts.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  int i;\n  int\
    \ prod = 1;\n  for (i = 1; i <= n; i++) {\n    prod *= i;\n  }\n  return prod;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpy45nldwy: /tmp/tmpy45nldwy.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long ans = 1;\n  for(int i = 1; i <= n; i++) {\n    ans *= i;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvs0_vvot: /tmp/tmpvs0_vvot.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = i; j >= 1; j--)\
    \ {\n            result *= j;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  // Write your code here!\n  int num = n;\n  long fact=1;\n  for(int i=1;i<=num;i++){\n\
    \    fact = fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpm99iml3u: /tmp/tmpm99iml3u.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n < 1)\
    \ return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpp20fdkih: /tmp/tmpp20fdkih.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n\
    \        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8utae3k2: /tmp/tmp8utae3k2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: complete\
    \ this function\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpwazy88bb: /tmp/tmpwazy88bb.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong int result\
    \ = 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tresult *= i;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp6no0ryt0: /tmp/tmp6no0ryt0.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\
    \ {\n    return 1;\n  }\n  long result = n;\n  while (n > 1) {\n    result *=\
    \ n - 1;\n    n--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp1ikoizzt: /tmp/tmp1ikoizzt.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long ans = 1;\n\
    \  long temp = n;\n  while(temp > 0) {\n    ans *= temp;\n    temp--;\n  }\n \
    \ return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4nm0lfnn: /tmp/tmp4nm0lfnn.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact=1;\n\
    \  for(int i=1;i<=n;i++)\n    fact=fact*i;\n  return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmph187mn5m: /tmp/tmph187mn5m.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0 ||\
    \ n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2q5vxjda: /tmp/tmp2q5vxjda.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong fact=1;\n\
    \tfor(int i=n;i>=1;i--)\n\t{\n\t\tfact=fact*i;\n\t}\n\tlong k=fact;\n\tfor(int\
    \ i=n-1;i>=1;i--)\n\t{\n\t\tfact=fact*i;\n\t}\n\treturn fact/k;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpdkyj8uno: /tmp/tmpdkyj8uno.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\
    \ {\n    return 1;\n  } else {\n    return n * special_factorial(n - 1);\n  }\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp9aqai7oe: /tmp/tmp9aqai7oe.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\
    \ return 1;\n  long result = 1;\n  for (long i = 1; i <= n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpfqax12xb: /tmp/tmpfqax12xb.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpm5aefwcm: /tmp/tmpm5aefwcm.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\t//function implementation\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpy78b0lc_: /tmp/tmpy78b0lc_.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // write code\
    \ here\n    if(n == 0) return 1;\n    long fact = 1;\n    for(int i = 1; i <=\
    \ n; i++) {\n        fact *= i;\n    }\n    return special_factorial(n-1) * fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long i, j,\
    \ k, f;\n    f = 1;\n    for (i = n; i > 0; i--) {\n        for (j = i; j > 0;\
    \ j--) {\n            for (k = j; k > 0; k--) {\n                f = f * k;\n\
    \            }\n        }\n    }\n    return f;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp676f18b2: /tmp/tmp676f18b2.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = 1; i <= n; i++) {\n    result *= i;\n  }\n  for (long\
    \ i = 1; i < n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpvz2iqeov: /tmp/tmpvz2iqeov.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\t// Create a\
    \ n+1 array for storing the factorials\n\tlong* factorials = new long[n+1];\n\t\
    factorials[0] = 1;\n\tfor (long i = 1; i <= n; i++) {\n\t\tfactorials[i] = factorials[i-1]\
    \ * i;\n\t}\n\tlong special_factorial = 1;\n\tfor (long i = n; i >= 1; i--) {\n\
    \t\tspecial_factorial *= factorials[i];\n\t}\n\tdelete [] factorials;\n\treturn\
    \ special_factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long f = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        f *= i;\n    }\n    return f;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpa51sdcev: /tmp/tmpa51sdcev.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // 1. Calculate\
    \ n!, n-1!, n-2!, ..., 1!\n  // 2. Multiply all numbers together\n  // ...\n\n\
    \  // n == 4\n  // n! == 4!\n  // n-1! == 3!\n  // n-2! == 2!\n  // n-3! == 1!\n\
    \  // ....\n\n  long result = 1;\n  while (n > 0) {\n    long factorial = 1;\n\
    \    long num = n;\n    while (num > 0) {\n      factorial *= num;\n      num--;\n\
    \    }\n    result *= factorial;\n    n--;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fac=1;\n\
    \    while(n>0){\n        fac*=n;\n        n--;\n    }\n    return fac;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0ye11ffk: /tmp/tmp0ye11ffk.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp05eh9t06: /tmp/tmp05eh9t06.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long temp_n=n;\n  long ans=1;\n  while(temp_n>=1){\n      ans=ans*temp_n;\n\
    \      temp_n=temp_n-1;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp96ofs9lk: /tmp/tmp96ofs9lk.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long r;\n  r\
    \ = 1;\n  while (n > 0) {\n    long i = 1;\n    long f = 1;\n    while (i <= n)\
    \ {\n      f = f * i;\n      i = i + 1;\n    }\n    r = r * f;\n    n = n - 1;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    return n==0\
    \ ? 1 : n * special_factorial(n-1);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp05dan41k: /tmp/tmp05dan41k.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long temp=1;\n\
    \  for(int i=n;i>=1;i--)\n  {\n    for(int j=i;j>=1;j--)\n    {\n      temp=temp*j;\n\
    \    }\n  }\n  return temp;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (long i = n; i > 0; i--) {\n    fact *= i;\n  }\n  for (long i = n-1;\
    \ i > 0; i--) {\n    fact *= i;\n  }\n  for (long i = n-2; i > 0; i--) {\n   \
    \ fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp79njwikl: /tmp/tmp79njwikl.cpp:27: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  int result =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    int factorial = 1;\n    for (int j\
    \ = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result *= factorial;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpn94f3vso: /tmp/tmpn94f3vso.cpp:26: int main(): Assertion `candidate((7))
    == (125411328000)'' failed.

    '
  stdout: ''
  timestamp: 1660008917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long c = 1;\n\
    \  for (long i = 1; i <= n; i++) {\n    c *= i;\n  }\n  return c;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfw7pwdud: /tmp/tmpfw7pwdud.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long temp=1;\n  while(n!=0)\n  {\n    temp=temp*n;\n    n--;\n\
    \  }\n  return temp;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpwlxlwdvo: /tmp/tmpwlxlwdvo.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n// your code here\n\
    \    if(n==0)\n    return 1;\n    else\n    return n*special_factorial(n-1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpd80_rvqk: /tmp/tmpd80_rvqk.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  int result =\
    \ 1;\n  for (int i = n; i > 0; i--) {\n    for (int j = i; j > 0; j--) {\n   \
    \   result *= j;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpj2x15wzp: /tmp/tmpj2x15wzp.cpp:24: int main(): Assertion `candidate((7))
    == (125411328000)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdeloxek: /tmp/tmpmdeloxek.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong fact=1;\n\
    \tfor(int i=1;i<=n;i++)\n\t{\n\t\tfact=fact*i;\n\t}\n\treturn fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpgfer9vmy: /tmp/tmpgfer9vmy.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\t// Write your\
    \ code here.\n\tif (n == 0)\n\t\treturn 1;\n\telse\n\t\treturn n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp7ym_j8i_: /tmp/tmp7ym_j8i_.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long sum = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    sum *= i;\n  }\n  for (int i = 1; i < n;\
    \ i++) {\n    sum *= i;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_qwgpye1: /tmp/tmp_qwgpye1.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  return (n <=\
    \ 1) ? 1 : n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp7pm9w9c8: /tmp/tmp7pm9w9c8.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long r = 1;\n    for (int i = 1; i <= n; i++) {\n    \
    \    r *= i;\n    }\n    return r;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpt5e6r4k0: /tmp/tmpt5e6r4k0.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong result\
    \ = 1;\n\twhile (n > 0) {\n\t\tresult *= n;\n\t\t--n;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpaafxkxih: /tmp/tmpaafxkxih.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n\
    \        return 1;\n    else\n        return n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8utae3k2: /tmp/tmp8utae3k2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  return std::accumulate(std::vector<long>(n,1).begin(),std::vector<long>(n,1).end(),1,[](auto\
    \ a,auto b){return a*b;});\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // TODO: Write\
    \ your code here\n    int i = n;\n    long t = 1;\n    while(i > 0){\n       \
    \ t *= i;\n        i--;\n    }\n    return t;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp0mop_2ub: /tmp/tmp0mop_2ub.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong result\
    \ = 1;\n\twhile (n >= 1) {\n\t\tresult *= n;\n\t\tn--;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpv1zhabej: /tmp/tmpv1zhabej.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  } else {\n    return n * special_factorial(n - 1);\n  }\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp83d8ly1m: /tmp/tmp83d8ly1m.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Create\
    \ a vector of first n natural numbers\n    long fact = 1;\n    std::vector<long>\
    \ v(n);\n    for (long i = 0; i < n; i++) {\n        v[i] = i + 1;\n    }\n  \
    \  // Compute the factorial of each element and multiply them\n    for (long i\
    \ = 0; i < n; i++) {\n        long temp = 1;\n        for (long j = v[i]; j >\
    \ 0; j--) {\n            temp *= j;\n        }\n        fact *= temp;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // YOUR CODE\
    \ HERE\n  long result = 1;\n  if (n==0)\n  {\n    return 1;\n  }\n  for (int i\
    \ = n; i >= 1; i--)\n  {\n    for (int j = i; j >= 1; j--)\n    {\n      result\
    \ *= j;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long f = 1;\n  long i = n;\n  while (i > 0) {\n    long j = i;\n    while (j\
    \ > 0) {\n      f *= j;\n      j--;\n    }\n    i--;\n  }\n  return f;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\
    \    for (long i = 1; i < n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp6rwbo1xk: /tmp/tmp6rwbo1xk.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\
    \ {\n        return 1;\n    }\n    long prod = 1;\n    for (int i = n; i > 0;\
    \ i--) {\n        prod *= i;\n    }\n    return prod * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // For n <=\
    \ 1, the special factorial is 1\n    if (n <= 1) {\n        return 1;\n    }\n\
    \    // Now let us calculate factorial of (n-1) and (n-2)\n    long fact_of_n_minus_1\
    \ = special_factorial(n - 1);\n    long fact_of_n_minus_2 = special_factorial(n\
    \ - 2);\n    // Now for n > 1, the special factorial is:\n    // special_factorial(n)\
    \ = n! * (n-1)! * (n-2)!\n    // where n > 0\n    return fact_of_n_minus_1 * fact_of_n_minus_2\
    \ * n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmphwfd6r5f: /tmp/tmphwfd6r5f.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    long f = 1;\n    for (long j = 1;\
    \ j <= i; j++) {\n      f *= j;\n    }\n    result *= f;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  std::vector<long>\
    \ a;\n  long fact = 1;\n  for (long i = 2; i <= n; i++) {\n    fact *= i;\n  \
    \  a.push_back(fact);\n  }\n  fact = 1;\n  for (long i = 0; i < a.size(); i++)\
    \ {\n    fact *= a[i];\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\t// Using recursion\n\
    \tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn n * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpy20wymku: /tmp/tmpy20wymku.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long my_fact\
    \ = 1;\n    if (n == 0)\n        return 1;\n    for (int i = n; i > 0; i--) {\n\
    \        my_fact *= i;\n    }\n    return my_fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp8sacvbxk: /tmp/tmp8sacvbxk.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008920
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long r=1;\n  for (int i = n; i > 0; i--) {\n    r*=i;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmph7fklea0: /tmp/tmph7fklea0.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008921
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpmikala22: /tmp/tmpmikala22.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long double\
    \ fact=1.0;\n    for(int i=n;i>=1;i--)\n    {\n        fact*=i;\n    }\n    int\
    \ num=n;\n    std::cout<<num<<std::endl;\n    while(num>1)\n    {\n        num-=1;\n\
    \        std::cout<<num<<std::endl;\n        fact/=num;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpvblm0ssr: /tmp/tmpvblm0ssr.cpp:29: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: '4

    3

    2

    1

    '
  timestamp: 1660008921
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long f = 1;\n\
    \  for (long i = n; i > 0; i--) {\n    f *= i;\n  }\n  return f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpomfzsq4g: /tmp/tmpomfzsq4g.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008921
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long f = 1;\n\
    \    for (int i = 2; i <= n; i++) {\n        f *= i;\n    }\n    while (n > 1)\
    \ {\n        f *= --n;\n    }\n    return f;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpo4l551z7: /tmp/tmpo4l551z7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008921
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n >=\
    \ 0);\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6lgj319j: /tmp/tmp6lgj319j.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008921
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  //int fact=0;\n\
    \  if(n==0 || n==1)\n    return 1;\n  else\n    return n*special_factorial(n-1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmps8hrrddu: /tmp/tmps8hrrddu.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here!\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzjeeg5q0: /tmp/tmpzjeeg5q0.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here.\n  long bf = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    bf *= i;\n\
    \  }\n  return bf;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4vzm8gck: /tmp/tmp4vzm8gck.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpt9zran96: /tmp/tmpt9zran96.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n < 1) {\n\
    \    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n  \
    \  result *= i;\n  }\n  for (long i = n - 1; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9wwvnwtm: /tmp/tmp9wwvnwtm.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fac = 1;\n  while (n > 0) {\n    fac *= n;\n \
    \   n--;\n  }\n  return fac;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_vmyr23d: /tmp/tmp_vmyr23d.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\
    \ {\n        return 1;\n    } else {\n        return n * special_factorial(n -\
    \ 1);\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpih3d2p8m: /tmp/tmpih3d2p8m.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here.\n  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result\
    \ *= i;\n  }\n  for (int i = 1; i < n; i++) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz_3am3ya: /tmp/tmpz_3am3ya.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long x = 1;\n  while (n > 0) {\n    long fac = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n      fac *= i;\n    }\n    x *= fac;\n \
    \   n--;\n  }\n  return x;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  // Write your code here!\n  std::vector<long> factorial;\n  for (int i = 1;\
    \ i <= n; i++) {\n    factorial.push_back(i);\n  }\n  long ans = 1;\n  for (int\
    \ i = 0; i < factorial.size(); i++) {\n    ans *= factorial[i];\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpeeh75hnz: /tmp/tmpeeh75hnz.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  long i;\n  for (i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwojg4574: /tmp/tmpwojg4574.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    // implementation\n    int i;\n    long int fact=1;\n    for(i=1;i<=n;i++)\n\
    \    {\n        fact=fact*i;\n    }\n    //cout<<fact;\n    return fact;\n\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp431kmh5g: /tmp/tmp431kmh5g.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Check for\
    \ n <= 0\n    assert(n > 0);\n    // Initialize the brazilian factorial\n    long\
    \ brazilian_factorial = 1;\n    // Implement your solution here\n    int i = n;\n\
    \    while(i >= 1){\n        brazilian_factorial *= i;\n        i--;\n    }\n\
    \    // Return the brazilian factorial\n    return brazilian_factorial;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp3j3q8s2u: /tmp/tmp3j3q8s2u.cpp:27: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Your code\
    \ here\n  long long product = 1;\n  int i = 1;\n  while (i <= n) {\n    long long\
    \ fact = 1;\n    for (int j = 1; j <= i; j++) {\n      fact *= j;\n    }\n   \
    \ product *= fact;\n    i++;\n  }\n  return product;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008922
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long result = 1;\n    while (n > 0) {\n        long i = 1;\n      \
    \  while (i <= n) {\n            result *= i;\n            i++;\n        }\n \
    \       n--;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  return (n == 1) ? 1 : n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp93gt3jlk: /tmp/tmp93gt3jlk.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\
    \ {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1ox9_dsi: /tmp/tmp1ox9_dsi.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n\
    \  for (long i = n; i > 0; i--) {\n    long f = 1;\n    for (long j = i; j > 0;\
    \ j--) {\n      f *= j;\n    }\n    res *= f;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long ret = 1;\n    for (int i = 1; i <= n; i++) {\n        ret *= i;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpb7o6kg84: /tmp/tmpb7o6kg84.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008923
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n    long prod = 1;\n\
    \    for (int i = 0; i < primes.size(); i++) {\n        int x = primes[i];\n \
    \       while (x <= n) {\n            prod *= x;\n            x *= primes[i];\n\
    \        }\n    }\n    return prod;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp0bsahoyv: /tmp/tmp0bsahoyv.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008923
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Your code\
    \ goes here!\n    int factorial = 1;\n    for (int i = 1; i <= n; i++) {\n   \
    \     factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpmtk46dwh: /tmp/tmpmtk46dwh.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008923
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n;\
    \ i++) {\n        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\treturn ((n >\
    \ 0) ? n * special_factorial(n - 1) : 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpr_vdhe7y: /tmp/tmpr_vdhe7y.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\
    \ {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1ox9_dsi: /tmp/tmp1ox9_dsi.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008922
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // declaring\
    \ a vector of size n+1 and initializing it with the values of the \n    // number\
    \ 1 through n\n    std::vector<long> v (n+1);\n    std::iota(v.begin(), v.end(),\
    \ 1);\n    // standard factorial method\n    long result = 1;\n    for (auto x\
    \ : v) {\n        result *= x;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjexx9dt_: /tmp/tmpjexx9dt_.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  // your code here\n  long fact = 1;\n  for(int i = 2; i <= n; i++)\n    fact\
    \ *= i;\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp7fvscq0u: /tmp/tmp7fvscq0u.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong output=1;\n\
    \tfor(int i=n;i>0;i--)\n\t{\n\t\tint temp=1;\n\t\tfor(int j=i;j>0;j--)\n\t\t{\n\
    \t\t\ttemp*=j;\n\t\t}\n\t\toutput*=temp;\n\t}\n\treturn output;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1) {\n        return 1;\n    }\n    else {\n        return n * special_factorial(n\
    \ - 1);\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjuk3ewk: /tmp/tmpbjuk3ewk.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    return 0;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpm5_sxei2: /tmp/tmpm5_sxei2.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt65vvj0w.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpt65vvj0w.cpp:14:15: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   14 |     result *= factorial(i);\n      |       \
    \        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  int i;\n  long\
    \ f = 1;\n  for (i = 1; i <= n; i++)\n    f = f * i;\n  return f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpnqh_cwrw: /tmp/tmpnqh_cwrw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    int a=1;\n\
    \    for(int i=n;i>=1;i--)\n    {\n        a*=i;\n    }\n    return a;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpmnzyie7w: /tmp/tmpmnzyie7w.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong fact=1;\n\
    \tfor(int i=1;i<=n;i++)\n\t{\n\t\tfact=fact*i;\n\t}\n\tfact=fact*(n-1);\n\treturn\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpewc7upfb: /tmp/tmpewc7upfb.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\
    \ return 1;\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpqyo6snya: /tmp/tmpqyo6snya.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong num = 1;\n\
    \tfor (long i = 1; i <= n; i++) {\n\t\tnum *= i;\n\t}\n\treturn num;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpug541crx: /tmp/tmpug541crx.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    long int f = 1;\n    long int i;\n    for(i=n;i>=1;i--)\n   \
    \ {\n        f=f*i;\n    }\n    return f;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpvcjs8nx3: /tmp/tmpvcjs8nx3.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  int i;\n  long\
    \ f=1;\n  for(i=1;i<=n;i++)\n    f*=i;\n  return f;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpx49h1z8t: /tmp/tmpx49h1z8t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Implement\
    \ your function here\n  if(n==0)\n    return 1;\n  long prod=1;\n  for(int i=n;i>=1;i--)\n\
    \    prod*=i;\n  return prod;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpudcfa10r: /tmp/tmpudcfa10r.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpyuxwdcm1: /tmp/tmpyuxwdcm1.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Implement\
    \ your solution here\n  int k = n;\n  long count = 1;\n  while(n>0){\n    count\
    \ = count * n;\n    n--;\n  }\n  while(k>0){\n    count = count * k;\n    k--;\n\
    \  }\n  while(n>0){\n    count = count * n;\n    n--;\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0j8wqcg1: /tmp/tmp0j8wqcg1.cpp:31: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long i,j=1;\n\
    \  for(i=n;i>=1;i--)\n  {\n    j=j*i;\n  }\n  return j;\n}\nint main() {\n   \
    \ auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpj693bjr0: /tmp/tmpj693bjr0.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0 ||\
    \ n == 1)\n    return 1;\n  else\n    return (n * special_factorial(n - 1));\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjkm18xp8: /tmp/tmpjkm18xp8.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008924
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\t// Variables\n\
    \tlong result = 1;\n\tfor (int i = n; i > 0; i--) {\n\t\tresult *= i;\n\t}\n\t\
    for (int i = n-1; i > 0; i--) {\n\t\tresult *= i;\n\t}\n\tfor (int i = n-2; i\
    \ > 0; i--) {\n\t\tresult *= i;\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmprdm9_y6x: /tmp/tmprdm9_y6x.cpp:28: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong i,fact=1;\n\
    \tfor(i=1;i<=n;i++)\n\t\tfact*=i;\n\tfor(i=1;i<n;i++)\n\t\tfact*=i;\n\treturn\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpyc2mr4_n: /tmp/tmpyc2mr4_n.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Insert your\
    \ code here\n  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmanh2nve: /tmp/tmpmanh2nve.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long res = 1;\n    for (int i = 1; i <= n; i++) {\n        res *= i;\n\
    \    }\n    for (int i = n-1; i > 0; i--) {\n        res *= i;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz12u4dlz: /tmp/tmpz12u4dlz.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n   int prod =\
    \ 1;\n   for(int i = 1; i <= n; i++)\n      prod *= i;\n   return prod;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmph0zxfflw: /tmp/tmph0zxfflw.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tif (n == 0)\
    \ {\n\t\treturn 1;\n\t}\n\tlong a = n;\n\tlong b = n - 1;\n\tlong c = n - 2;\n\
    \tfor (long i = n - 3; i > 0; i--) {\n\t\ta = a * b;\n\t\tb = b * c;\n\t\tc =\
    \ c - 1;\n\t}\n\treturn a * b;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpgaqu2adl: /tmp/tmpgaqu2adl.cpp:27: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        long c = 1;\n        for (long\
    \ j = i; j > 0; j--) {\n            c *= j;\n        }\n        result *= c;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n\
    \  for (long i = n; i > 0; i--) {\n    long temp = i;\n    for (long j = i - 1;\
    \ j > 0; j--) {\n      temp *= j;\n    }\n    res *= temp;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Insert code\
    \ here\n\n  long long fact=1;\n  while(n!=0)\n  {\n    fact=fact*n;\n    n--;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3t00hf3h: /tmp/tmp3t00hf3h.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // write your\
    \ solution here\n    assert(n > 0);\n    long result = 1;\n    for (long i = n;\
    \ i > 0; i--) {\n        result *= i;\n    }\n    for (long i = n - 1; i > 0;\
    \ i--) {\n        result *= i;\n    }\n    for (long i = n - 2; i > 0; i--) {\n\
    \        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpje_2lt7f: /tmp/tmpje_2lt7f.cpp:29: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // YOUR CODE\
    \ HERE\n  if(n==0) return 1;\n  else return special_factorial(n-1)*n;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf7f77_bp: /tmp/tmpf7f77_bp.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpa7swdvmc: /tmp/tmpa7swdvmc.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\t// TODO: Implement\
    \ the function\n\tassert(n > 0);\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn\
    \ n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpees6zw_9: /tmp/tmpees6zw_9.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here.\n    assert(n>0);\n    if(n==1)\n        return 1;\n    return n*special_factorial(n-1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8m_euvpe: /tmp/tmp8m_euvpe.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpj0x5tk_6: /tmp/tmpj0x5tk_6.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long long\
    \ result = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= i;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpg0mw_mc6: /tmp/tmpg0mw_mc6.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\
    \ {\n        return 1;\n    } else {\n        long f = 1;\n        for (int i\
    \ = 1; i <= n; i++) {\n            f *= i;\n        }\n        return f * special_factorial(n\
    \ - 1);\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008927
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ goes here\n  long ans = 1;\n  for(int i = 1; i <= n; i++) {\n    ans *= i;\n\
    \  }\n  for(int i = n-1; i >= 1; i--) {\n    ans *= i;\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplan42ds9: /tmp/tmplan42ds9.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  while (n > 0) {\n    long i = 1;\n    while (i <= n) {\n      result\
    \ *= i;\n      i++;\n    }\n    n--;\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long s=1;\n\
    \    if(n==0) return 1;\n    for(int i=n;i>=1;i--) s*=i;\n    return s;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxv0eqhin: /tmp/tmpxv0eqhin.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\nlong result=1;\nwhile(n>0)\n\
    {\n    for(int i=n;i>0;i--)\n    {\n        result*=i;\n    }\n    n--;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0v7vx3jm.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmp0v7vx3jm.cpp:24:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   24 | int main() {\n      |     \
    \       ^\n/tmp/tmp0v7vx3jm.cpp:30:1: error: expected \u2018}\u2019 at end of\
    \ input\n   30 | }\n      | ^\n/tmp/tmp0v7vx3jm.cpp:11:32: note: to match this\
    \ \u2018{\u2019\n   11 | long special_factorial(long n) {\n      |           \
    \                     ^\n/tmp/tmp0v7vx3jm.cpp:30:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   30 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660008927
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    if (n == 1) {\n        return 1;\n    }\n    long ans = 1;\n    for\
    \ (int i = n; i > 0; i--) {\n        ans *= i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpw8g_m1qa: /tmp/tmpw8g_m1qa.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008927
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    return (n <= 1) ? 1 :\
    \ n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpfm5u1ltn: /tmp/tmpfm5u1ltn.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008927
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long out = n;\n  for (int i = 1; i < n; i++) {\n  \
    \  out *= i;\n  }\n  return out;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmplv36s67r: /tmp/tmplv36s67r.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n < 1) {\n\
    \    return 1;\n  }\n  long ans = 1;\n  for (long i = 1; i <= n; i++) {\n    ans\
    \ *= factorial(i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1irq1hj.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpb1irq1hj.cpp:17:12: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   17 |     ans *= factorial(i);\n      |          \
    \  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  std::stack<long> store;\n  long result = 1;\n  while (n > 0) {\n    long i\
    \ = 1;\n    while (i <= n) {\n      result *= i;\n      i++;\n    }\n    store.push(result);\n\
    \    result = 1;\n    n--;\n  }\n  while (!store.empty()) {\n    result *= store.top();\n\
    \    store.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long factorial = 1;\n  for (int i = 2; i <= n; i++) {\n    long factorial_i\
    \ = 1;\n    for (int j = 1; j <= i; j++) {\n      factorial_i *= j;\n    }\n \
    \   factorial *= factorial_i;\n  }\n  return factorial;\n}\nint main() {\n   \
    \ auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long long int result = 1;\n  long long int temp = n;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  for (int i = n - 1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpofco8gxm: /tmp/tmpofco8gxm.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long res =\
    \ 1;\n    while(n != 0) {\n        res *= n;\n        n--;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzgcm5geh: /tmp/tmpzgcm5geh.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long fact=1;\n    for(int i=n;i>0;i--)\n    {\n        fact=fact*i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpjlcil452: /tmp/tmpjlcil452.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long long factorial\
    \ = 1;\n  for (long i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  long long\
    \ factorial_minus = 1;\n  for (long i = 1; i <= n - 1; i++) {\n    factorial_minus\
    \ *= i;\n  }\n  long long factorial_minus_two = 1;\n  for (long i = 1; i <= n\
    \ - 2; i++) {\n    factorial_minus_two *= i;\n  }\n  return factorial * factorial_minus\
    \ * factorial_minus_two;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvdce8fzo: /tmp/tmpvdce8fzo.cpp:29: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  // Write your code here\n  int i,j;\n  long fact = 1;\n  long fact1 = 1;\n\
    \  int ar[n+1];\n  ar[0] = 1;\n  for(i=0;i<n;i++)\n  {\n    for(j=i;j>=0;j--)\n\
    \    {\n      ar[j] = ar[j]*fact;\n    }\n    fact++;\n  }\n  for(i=0;i<n;i++)\n\
    \  {\n    fact1 = fact1*ar[i];\n  }\n  return fact1;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpg032pfxh: /tmp/tmpg032pfxh.cpp:35: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong fact=1;\n\
    \tfor(int i=1;i<=n;i++)\n\t\tfact=fact*i;\n\treturn fact;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp05x_df3o: /tmp/tmp05x_df3o.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result=1;\n\
    \  int p=1;\n  while(p<=n){\n    result=result*p;\n    p++;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqx3ixeqv: /tmp/tmpqx3ixeqv.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = n;\n  for (long i = n-1; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzttd1giy: /tmp/tmpzttd1giy.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong i, fact\
    \ = 1;\n\tassert(n > 0);\n\tfor (i = 1; i <= n; i++) {\n\t\tfact = fact * i;\n\
    \t}\n\treturn fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpx_g23ki6: /tmp/tmpx_g23ki6.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long brazilian_factorial\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        brazilian_factorial *= i;\n\
    \    }\n    return brazilian_factorial;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmptzjnm8tl: /tmp/tmptzjnm8tl.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpupape5zd: /tmp/tmpupape5zd.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long p = 1;\n\
    \  for (long i = 1; i <= n; i++) {\n    p *= i;\n  }\n  return p;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplkvvpfwr: /tmp/tmplkvvpfwr.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    return 0;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxrfvrayw: /tmp/tmpxrfvrayw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  if(n==0) return 1;\n  long f=1;\n  for(int i=n;i>0;i--)\n  {\n    f*=i;\n\
    \  }\n  return f;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_o9pxc7h: /tmp/tmp_o9pxc7h.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long long\
    \ res = 1;\n    while(n > 0) {\n        long long tmp = 1;\n        long long\
    \ i = n;\n        while(i > 0) {\n            tmp *= i;\n            i--;\n  \
    \      }\n        res *= tmp;\n        n--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    long fact = 1;\n    for(int i = 1; i <= n; i++)\n        fact\
    \ *= i;\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpa1m8eeok: /tmp/tmpa1m8eeok.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Complete\
    \ the function's implementation\n  long res=1;\n  while(n>=1)\n  {\n  \tres=res*n;\n\
    \  \tn--;\n  }\n  return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpp15wru6d: /tmp/tmpp15wru6d.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong p=1;\n\t\
    for(int i=n;i>=1;i--)\n\t{\n\t\tp=p*i;\n\t}\n  return p;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpljkf0204: /tmp/tmpljkf0204.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tassert(n > 0);\n\
    \t\n\tlong r = 1;\n\tfor (long i = 1; i <= n; i++) {\n\t\tr *= factorial(i);\n\
    \t}\n\treturn r;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn9kpr9a.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpbn9kpr9a.cpp:16:8: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   16 |   r *= factorial(i);\n      |        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long i, j, f\
    \ = 1;\n  for (i = 2; i <= n; i++) {\n    f = f * i;\n    for (j = n - 1; j >\
    \ 1; j--)\n      f = f * j;\n  }\n  return f;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpgu05v6ce: /tmp/tmpgu05v6ce.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    for (int j = i; j > 0; j--) {\n \
    \     result *= j;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008929
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  // Write your code here\n  long res = 1;\n  while(n > 0) {\n    long temp =\
    \ 1;\n    long i = n;\n    while(i > 0) {\n      temp *= i;\n      i--;\n    }\n\
    \    res *= temp;\n    n--;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008930
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8d5ulddm: /tmp/tmp8d5ulddm.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008930
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tif (n < 1)\n\
    \t\treturn 1;\n\tlong sum = 1;\n\tfor (long i = n; i > 0; i--) {\n\t\tsum *= i;\n\
    \t}\n\treturn sum * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008930
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long num =\
    \ 1;\n    for (int i = n; i > 0; i--) {\n        num *= i;\n    }\n    return\
    \ num;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpc90tz50w: /tmp/tmpc90tz50w.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008930
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    //YOUR CODE\
    \ HERE\n    if(n==0){\n        return 1;\n    }\n    return n*special_factorial(n-1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpai7angb4: /tmp/tmpai7angb4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008930
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long factorial = 1;\n  long temp = 1;\n  for (int i = n; i > 0; i--) {\n  \
    \  temp *= i;\n    factorial *= temp;\n  }\n  return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpw36ighot: /tmp/tmpw36ighot.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008930
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpm5aefwcm: /tmp/tmpm5aefwcm.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // your code\
    \ here\n    long ans = 1;\n    for(int i = n; i > 0; i--)\n        ans *= i;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9ne2a36v: /tmp/tmp9ne2a36v.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008930
