name: HumanEval_65_circular_shift
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
  \ of the integer x, shift the digits right by shift\n// and return the result as\
  \ a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12),\
  \ (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string\
  \ circular_shift(long x, long shift) {\n"
tests: "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
  \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
  \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
  \ (101)) == (\"11\"));\n}\n"
completions: ["\tint x_size = std::to_string(x).size();\n\tif (shift > x_size) {\n\
    \t\treturn std::string(std::to_string(x).rbegin(), std::to_string(x).rend());\n\
    \t}\n\tstd::string x_string = std::to_string(x);\n\tstd::rotate(x_string.begin(),\
    \ x_string.begin() + shift, x_string.end());\n\treturn x_string;", "    std::stringstream\
    \ ss;\n    ss << x;\n    std::string str = ss.str();\n    if (shift >= str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    return (str.substr(shift) + str.substr(0, shift));", "    // +++ Your code\
    \ here +++\n    return std::string(\"\");", "  // This is an incomplete function\
    \ definition\n  // You need to complete it per the instructions\n  std::string\
    \ str = std::to_string(x);\n  int len = str.length();\n  if (shift > len)\n  \
    \  std::reverse(str.begin(), str.end());\n  else {\n    std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n  }\n  return str;", "\t// Make shift non-negative\
    \ and within range.\n\tshift = (shift + x) % x;\n\t// Convert to string, then\
    \ shift and return result.\n\tstd::string s = std::to_string(x);\n\treturn s.substr(shift)\
    \ + s.substr(0, shift);", "    std::string x_str = std::to_string(x);\n    if\
    \ (shift > x_str.size()) {\n        std::reverse(x_str.begin(), x_str.end());\n\
    \        return x_str;\n    }\n    std::rotate(x_str.begin(), x_str.begin() +\
    \ x_str.size() - shift, x_str.end());\n    return x_str;", "    std::vector<int>\
    \ digits;\n    std::string s = std::to_string(x);\n    for (int i = 0; i < s.length();\
    \ i++) {\n        digits.push_back(s[i] - '0');\n    }\n    if (shift >= digits.size())\
    \ {\n        std::reverse(digits.begin(), digits.end());\n        std::string\
    \ res = \"\";\n        for (int i = 0; i < digits.size(); i++) {\n           \
    \ res += std::to_string(digits[i]);\n        }\n        return res;\n    }\n \
    \   std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n    std::string\
    \ res = \"\";\n    for (int i = 0; i < digits.size(); i++) {\n        res += std::to_string(digits[i]);\n\
    \    }\n    return res;", "    std::vector<int> X;\n    while (x > 0) {\n    \
    \    X.push_back(x % 10);\n        x /= 10;\n    }\n    shift %= X.size();\n \
    \   std::reverse(X.begin(), X.end());\n    std::rotate(X.begin(), X.begin() +\
    \ shift, X.end());\n    std::reverse(X.begin(), X.end());\n    std::string result;\n\
    \    for (int i = 0; i < X.size(); ++i) {\n        result += (char)(X[i] + '0');\n\
    \    }\n    return result;", "    std::string xstr = std::to_string(x);\n    std::rotate(xstr.begin(),\
    \ xstr.begin() + shift, xstr.end());\n    return xstr;", "  std::string str =\
    \ std::to_string(x);\n  std::reverse(str.begin(), str.end());\n  int str_size\
    \ = str.size();\n  if (shift >= str_size)\n    return str;\n  std::string str1\
    \ = str.substr(0, str_size - shift);\n  std::string str2 = str.substr(str_size\
    \ - shift, str_size);\n  return str2 + str1;", "  assert(shift >= 0);\n  std::string\
    \ x_str = std::to_string(x);\n  //std::cout << \"x_str= \" << x_str << std::endl;\n\
    \  std::string ans;\n  if (shift >= x_str.size()) {\n    ans = x_str;\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n  }\n  std::string suffix = x_str.substr(x_str.size()\
    \ - shift, shift);\n  std::string prefix = x_str.substr(0, x_str.size() - shift);\n\
    \  ans = suffix + prefix;\n  return ans;", "  std::string str = std::to_string(x);\n\
    \  if (shift > str.length()) {\n    std::reverse(str.begin(), str.end());\n  \
    \  return str;\n  }\n  std::rotate(str.begin(), str.begin() + str.length() - shift,\
    \ str.end());\n  return str;", "    std::string s = std::to_string(x);\n    int\
    \ c = shift;\n    while (c--) {\n        s.push_back(s[0]);\n        s.erase(0,\
    \ 1);\n    }\n    return s;", "\tstd::string xs = std::to_string(x);\n\tif (shift\
    \ > xs.size()) {\n\t\tstd::reverse(xs.begin(), xs.end());\n\t\treturn xs;\n\t\
    }\n\tlong i = xs.size() - shift;\n\tstd::string s(xs.begin() + i, xs.end());\n\
    \ts.append(xs.begin(), xs.begin() + i);\n\treturn s;", "  std::string str = std::to_string(x);\n\
    \  if (shift > str.length()) {\n    std::reverse(str.begin(), str.end());\n  \
    \  return str;\n  }\n  std::rotate(str.begin(), str.begin() + str.length() - shift,\
    \ str.end());\n  return str;", "    std::string str;\n    std::string new_str;\n\
    \    std::stringstream ss;\n    ss << x;\n    ss >> str;\n    if (shift > str.length())\
    \ {\n        for (int i = str.length() - 1; i >= 0; i--) {\n            new_str\
    \ += str[i];\n        }\n        return new_str;\n    }\n    for (int i = str.length()\
    \ - shift; i < str.length(); i++) {\n        new_str += str[i];\n    }\n    for\
    \ (int i = 0; i < str.length() - shift; i++) {\n        new_str += str[i];\n \
    \   }\n    return new_str;", "    std::string s = std::to_string(x);\n    if (shift\
    \ >= s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::string f = s.substr(0, shift);\n    std::string r = s.substr(shift,\
    \ s.size() - shift);\n    s = r + f;\n    return s;", "  std::string str = std::to_string(x);\n\
    \  std::reverse(str.begin(), str.end());\n  if (shift > str.size()) {\n    return\
    \ str;\n  }\n  std::string left = str.substr(0, shift);\n  std::string right =\
    \ str.substr(shift);\n  return right + left;", "  // TODO: implement this\n  //assert(false);\n\
    \  int sz = 0;\n  long x_orig = x;\n  while(x_orig>0){\n    x_orig /= 10;\n  \
    \  sz++;\n  }\n  shift = shift % sz;\n  std::string str = std::to_string(x);\n\
    \  for(int i=0; i<shift; i++){\n    str = str.substr(1) + str[0];\n  }\n  return\
    \ str;", "  // YOUR CODE HERE\n  std::vector<long> digits;\n  while (x > 0) {\n\
    \    digits.push_back(x % 10);\n    x /= 10;\n  }\n  if (shift >= digits.size())\
    \ {\n    std::reverse(digits.begin(), digits.end());\n    shift = 0;\n  }\n  std::rotate(digits.begin(),\
    \ digits.begin() + shift, digits.end());\n  std::stringstream ss;\n  for (int\
    \ i = 0; i < digits.size(); i++) {\n    ss << digits[i];\n  }\n  return ss.str();",
  "  std::stringstream ss;\n  ss << x;\n  std::string str = ss.str();\n  std::reverse(str.begin(),\
    \ str.end());\n  std::string tmp = str.substr(0, shift);\n  str = str.substr(shift,\
    \ str.size() - shift);\n  str += tmp;\n  std::reverse(str.begin(), str.end());\n\
    \  return str;", "    if (x < 0)\n        x = -x;\n    if (shift == 0)\n     \
    \   return std::to_string(x);\n    std::string reversed = std::to_string(x);\n\
    \    std::reverse(reversed.begin(), reversed.end());\n    int length = reversed.length();\n\
    \    std::string result = \"\";\n    for (int i = shift; i < length; i++)\n  \
    \      result += reversed[i];\n    for (int i = 0; i < shift; i++)\n        result\
    \ += reversed[i];\n    return result;", "    assert(x >= 0);\n    assert(shift\
    \ >= 0);\n    // convert long to a string\n    std::string str = std::to_string(x);\n\
    \    // reverse the string\n    std::reverse(str.begin(), str.end());\n    //\
    \ define the iterator of the string\n    std::string::iterator it = str.begin();\n\
    \    std::advance(it, shift);\n    // reverse the string again\n    std::reverse(str.begin(),\
    \ it);\n    std::reverse(it, str.end());\n    return str;", "  std::stringstream\
    \ ss;\n  if (shift > log10(x)) {\n    ss << x;\n    std::string st = ss.str();\n\
    \    std::reverse(st.begin(), st.end());\n    return st;\n  }\n  long n = x;\n\
    \  int i = 0;\n  std::vector<int> v;\n  while (n > 0) {\n    int r = n % 10;\n\
    \    v.push_back(r);\n    n = n / 10;\n    i++;\n  }\n  std::vector<int> v1;\n\
    \  for (int j = i - shift; j < i; j++) {\n    v1.push_back(v[j]);\n  }\n  for\
    \ (int j = 0; j < i - shift; j++) {\n    v1.push_back(v[j]);\n  }\n  std::string\
    \ s = \"\";\n  for (int j = 0; j < i; j++) {\n    std::stringstream ss;\n    ss\
    \ << v1[j];\n    s = s + ss.str();\n  }\n  return s;", "    assert(shift >= 0);\n\
    \    if (x == 0) {\n        return \"0\";\n    }\n    std::string str = std::to_string(x);\n\
    \    std::string rev_s = std::to_string(x);\n    std::reverse(rev_s.begin(), rev_s.end());\n\
    \    while (shift > 0) {\n        int len = str.length();\n        char last =\
    \ str[len - 1];\n        str.pop_back();\n        str = last + str;\n        shift--;\n\
    \    }\n    return str;", "    std::string s;\n    while (x > 0) {\n        s.push_back('0'\
    \ + x % 10);\n        x /= 10;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    }\
    \ else {\n        s = s.substr(s.size() - shift) + s.substr(0, s.size() - shift);\n\
    \    }\n    return s;", "    std::string result;\n    std::stringstream ss;\n\
    \    ss << x;\n    result = ss.str();\n    shift = shift % result.length();\n\
    \    std::string temp(result.length() - shift, '0');\n    result.erase(0, shift);\n\
    \    temp.append(result);\n    return temp;", "    std::string result;\n    std::stringstream\
    \ sstream;\n    sstream << x;\n    std::string str = sstream.str();\n    if (shift\
    \ >= str.length()) {\n        std::reverse(str.begin(), str.end());\n        return\
    \ str;\n    }\n    result = str.substr(shift, str.length() - shift);\n    result\
    \ += str.substr(0, shift);\n    return result;", "    std::string result;\n  \
    \  std::ostringstream convert;   // stream used for the conversion\n    convert\
    \ << x;      // insert the textual representation of 'Number' in the characters\
    \ in the stream\n    std::string s = convert.str();\n    int len = s.length();\n\
    \    if(shift > len) {\n        for(int i = len - 1; i >= 0; i--) {\n        \
    \    result += s[i];\n        }\n    } else {\n        std::string s2;\n     \
    \   for(int i = len - shift; i < len; i++) {\n            s2 += s[i];\n      \
    \  }\n        for(int i = 0; i < len - shift; i++) {\n            s2 += s[i];\n\
    \        }\n        result = s2;\n    }\n    return result;", "\tstd::string x_str\
    \ = std::to_string(x);\n\tint length = x_str.length();\n\tif (shift >= length)\
    \ {\n\t\tstd::reverse(x_str.begin(), x_str.end());\n\t\treturn x_str;\n\t}\n\t\
    std::string left = x_str.substr(0, length - shift);\n\tstd::string right = x_str.substr(length\
    \ - shift, shift);\n\treturn right + left;", "\t//TODO\n\t\n\tstd::stringstream\
    \ ss;\n\n\tss << x;\n\tstd::string str = ss.str();\n\t\n\tint size = str.size();\n\
    \t\n\tif(shift > size)\n\t{\n\t\treverse(str.begin(), str.end());\n\t\treturn\
    \ str;\n\t}\n\t\n\tstd::string right = str.substr(size - shift, shift);\n\tstd::string\
    \ left = str.substr(0, size - shift);\n\t\n\treturn right + left;", "    std::string\
    \ str=std::to_string(x);\n    std::reverse(str.begin(),str.end());\n    std::string\
    \ res;\n    int count=0;\n    if(shift>str.length()){\n        res=str;\n    }\n\
    \    else{\n        int i=shift-1;\n        while(count<str.length()){\n     \
    \       res+=str[i];\n            i=(i+1)%str.length();\n            count++;\n\
    \        }\n    }\n    return res;", "    // ***YOUR CODE HERE***\n    std::string\
    \ num_str = std::to_string(x);\n    std::string num_str_rev = std::to_string(x);\n\
    \    std::reverse(num_str_rev.begin(), num_str_rev.end());\n    if (shift > num_str.length())\
    \ {\n        return num_str_rev;\n    }\n    else {\n        std::string num_str_shift\
    \ = num_str.substr(num_str.length() - shift, shift) + num_str.substr(0, num_str.length()\
    \ - shift);\n        return num_str_shift;\n    }", "  // your code here\n  std::vector<int>\
    \ v;\n  //int prev = x % 10;\n  //x = x / 10;\n  if(shift > 0){\n    while(x !=\
    \ 0){\n      v.push_back(x % 10);\n      x = x / 10;\n    }\n    std::reverse(v.begin(),\
    \ v.end());\n    for(int i = 0; i < shift; i++){\n      int temp = v[v.size()\
    \ - 1];\n      v.erase(v.end() - 1);\n      v.insert(v.begin(), temp);\n    }\n\
    \  }\n  // else{\n  //   while(x != 0){\n  //     v.push_back(x % 10);\n  // \
    \    x = x / 10;\n  //   }\n  //   std::reverse(v.begin(), v.end());\n  // }\n\
    \  std::stringstream s;\n  for(int i = 0; i < v.size(); i++){\n    s << v[i];\n\
    \  }\n  return s.str();", "  std::stringstream ss;\n  ss << x;\n  std::string\
    \ str = ss.str();\n  long len = str.length();\n  // If shift > number of digits,\
    \ reverse.\n  if (shift > len) {\n    std::reverse(str.begin(), str.end());\n\
    \    return str;\n  }\n  std::rotate(str.begin(), str.begin() + shift, str.end());\n\
    \  return str;", "    std::string str = std::to_string(x);\n    std::string empty\
    \ = \"\";\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    } else {\n        shift = shift % str.length();\n\
    \        if (shift == 0) {\n            return str;\n        } else {\n      \
    \      std::string shifter = str.substr(0, shift);\n            std::string ender\
    \ = str.substr(shift, str.length() - shift);\n            std::string answer =\
    \ ender + shifter;\n            return answer;\n        }\n    }", "\tstd::stringstream\
    \ ss;\n\tss << x;\n\tstd::string s = ss.str();\n\tlong len = s.length();\n\tlong\
    \ shift_with_mod = shift % len;\n\tif (shift_with_mod > 0) {\n\t\tstd::string\
    \ prefix = s.substr(len - shift_with_mod, shift_with_mod);\n\t\tstd::string suffix\
    \ = s.substr(0, len - shift_with_mod);\n\t\ts = prefix + suffix;\n\t}\n\treturn\
    \ s;", "    std::string str = std::to_string(x);\n    if (shift >= str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    for (long i = 0; i < shift; i++) {\n        char c = str.back();\n      \
    \  str.pop_back();\n        str.insert(str.begin(), c);\n    }\n    return str;",
  "    std::string number = std::to_string(x);\n    if (shift == 0) return number;\n\
    \    if (shift >= number.size()) return std::string(number.rbegin(), number.rend());\n\
    \    return number.substr(shift) + number.substr(0, shift);", "  std::string s\
    \ = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::string prefix = s.substr(0, shift);\n\
    \  std::string suffix = s.substr(shift);\n  std::reverse(prefix.begin(), prefix.end());\n\
    \  std::reverse(suffix.begin(), suffix.end());\n  std::reverse(s.begin(), s.end());\n\
    \  return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "  assert(shift > 0);\n  std::string s = std::to_string(x);\n\
    \  int l = s.length();\n  shift = shift % l;\n  std::reverse(s.begin(), s.end());\n\
    \  std::reverse(s.begin(), s.begin() + shift);\n  std::reverse(s.begin() + shift,\
    \ s.end());\n  return s;", "    // STUDENT\n    long num_digits = std::log10(x)\
    \ + 1;\n    long factor = std::pow(10, shift);\n    long first_part = x % factor;\n\
    \    long second_part = x / factor;\n    if (shift > num_digits) {\n        long\
    \ new_first_part = std::stol(std::string(std::to_string(first_part)).append(std::to_string(second_part)));\n\
    \        return std::to_string(new_first_part);\n    }\n    return std::to_string(std::stol(std::string(std::to_string(first_part)).append(std::to_string(second_part))));\n\
    \    // END STUDENT", "  std::string digits = std::to_string(x);\n  while (shift\
    \ > digits.size()) {\n    shift -= digits.size();\n  }\n  if (shift == digits.size())\
    \ {\n    return digits;\n  }\n  return digits.substr(digits.size() - shift) +\
    \ digits.substr(0, digits.size() - shift);", "  std::string s = std::to_string(x);\n\
    \  int l = s.length();\n  shift = shift % l;\n  std::rotate(s.begin(), s.begin()\
    \ + l - shift, s.end());\n  return s;", "    // TODO: implement this\n    long\
    \ num_digits=0;\n    for(long i=x;i>0;i/=10){\n        num_digits++;\n    }\n\
    \    if(shift>num_digits){\n        return std::to_string(x);\n    }\n    else{\n\
    \        std::string x_str=std::to_string(x);\n        std::string result=x_str.substr(shift)+x_str.substr(0,shift);\n\
    \        return result;\n    }", "  if (x == 0) {\n    return \"0\";\n  }\n  bool\
    \ is_neg = false;\n  if (x < 0) {\n    is_neg = true;\n    x = -x;\n  }\n  std::string\
    \ res;\n  while (x) {\n    res.push_back('0' + x % 10);\n    x /= 10;\n  }\n \
    \ if (is_neg) {\n    res.push_back('-');\n  }\n  std::reverse(res.begin(), res.end());\n\
    \  long sz = res.size();\n  if (shift >= sz) {\n    return res;\n  }\n  std::rotate(res.begin(),\
    \ res.begin() + shift, res.end());\n  return res;", "    // Error condition\n\
    \    if (shift < 0) {\n        std::cout << \"Invalid shift value\" << std::endl;\n\
    \        return \"\";\n    }\n    // First, get the string representation of x\
    \ as a string.\n    std::string digits = std::to_string(x);\n    // Here's a way\
    \ to use the mod operator in C++.\n    // C++ is a little bit picky here. The\
    \ result of x%y is always a non-negative\n    // integer, so this expression gives\
    \ us the remainder after dividing shift\n    // by the number of digits in x.\n\
    \    shift = shift % digits.length();\n    // If shift is 0, we just return the\
    \ string.\n    if (shift == 0) return digits;\n    // Now, reverse digits, and\
    \ reverse the first shift characters and the last\n    // (digits.length() - shift)\
    \ characters.\n    std::reverse(digits.begin(), digits.end());\n    std::reverse(digits.begin(),\
    \ digits.begin() + shift);\n    std::reverse(digits.begin() + shift, digits.end());\n\
    \    return digits;", "  long digits = floor(log10(x)) + 1;\n  // If more than\
    \ one rotation\n  if (shift > digits) {\n    shift = shift % digits;\n  }\n  long\
    \ dec_place = pow(10, shift);\n  // Get the shifted decimal place\n  long lower\
    \ = x % dec_place;\n  // Get the higher digits\n  long higher = x / dec_place;\n\
    \  // Concatenate them\n  long result = lower * pow(10, digits - shift) + higher;\n\
    \  return std::to_string(result);", "\tstd::string s = std::to_string(x);\n\t\
    if (shift >= s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\telse {\n\t\tstd::rotate(s.begin(), s.begin() + shift, s.end());\n\t\treturn\
    \ s;\n\t}", "  std::string x_str = std::to_string(x);\n  if (shift > x_str.size())\
    \ {\n    std::reverse(x_str.begin(), x_str.end());\n    return x_str;\n  }\n \
    \ std::string shift_right = x_str.substr(shift);\n  std::string shift_left = x_str.substr(0,\
    \ shift);\n  return shift_right + shift_left;", "    long n = x;\n    int count\
    \ = 0;\n    while (n > 0) {\n        count++;\n        n /= 10;\n    }\n    shift\
    \ = shift % count;\n    if (shift == 0) {\n        return std::to_string(x);\n\
    \    }\n    long tmp = x % pow(10, shift);\n    x /= pow(10, shift);\n    x +=\
    \ tmp * pow(10, count - shift);\n    return std::to_string(x);", "  std::string\
    \ s = std::to_string(x);\n  std::reverse(s.begin(), s.end());\n  if (shift > s.size())\
    \ {\n    return s;\n  }\n  return s.substr(0, shift) +\n         s.substr(shift)\
    \ +\n         s.substr(0, shift);", "    // >>> circular_shift((12), (1))\n  \
    \  // (\"21\")\n    // >>> circular_shift((12), (2))\n    // (\"12\")\n    std::string\
    \ result = std::to_string(x);\n    if (shift > result.size()) {\n        reverse(result.begin(),\
    \ result.end());\n        return result;\n    } else {\n        std::rotate(result.begin(),\
    \ result.begin() + shift, result.end());\n        return result;\n    }", "\t\
    std::string num = std::to_string(x);\n\t// int num_length = num.length();\n\t\
    // std::string result = \"\";\n\t// shift = shift % num_length;\n\t// while (shift\
    \ > 0) {\n\t// \tresult += num[num_length - shift];\n\t// \tshift--;\n\t// }\n\
    \t// for (int i = 0; i < num_length - shift; i++) {\n\t// \tresult += num[i];\n\
    \t// }\n\t// return result;\n\treturn \"\";", "    // Your code here\n    std::string\
    \ number = std::to_string(x);\n    if (number.length() == 1)\n        return number;\n\
    \    if (shift > number.length()) {\n        std::reverse(number.begin(), number.end());\n\
    \        return number;\n    }\n    std::rotate(number.begin(), number.begin()\
    \ + shift, number.end());\n    return number;", "\tstd::string str = std::to_string(x);\n\
    \tstd::reverse(str.begin(), str.end());\n\tshift = shift%str.size();\n\tstd::string\
    \ tmp = str.substr(0, shift);\n\tstd::reverse(tmp.begin(), tmp.end());\n\tstd::string\
    \ tmp2 = str.substr(shift, str.size()-shift);\n\tstd::reverse(tmp2.begin(), tmp2.end());\n\
    \tstr = tmp2 + tmp;\n\tstd::reverse(str.begin(), str.end());\n\treturn str;",
  "  // YOUR CODE HERE\n  std::string a = std::to_string(x);\n  std::string b;\n \
    \ long size = a.size();\n  if (shift > size) {\n    for (long i = size - 1; i\
    \ >= 0; i--) {\n      b += a[i];\n    }\n    return b;\n  } else {\n    b = a.substr(size\
    \ - shift, shift);\n    b += a.substr(0, size - shift);\n    return b;\n  }",
  "  std::string x_str = std::to_string(x);\n  std::string shifted = x_str;\n  if\
    \ (shift >= x_str.size()) {\n    std::reverse(shifted.begin(), shifted.end());\n\
    \  } else {\n    for (long i = 0; i < x_str.size(); i++) {\n      shifted[i] =\
    \ x_str[(i + shift) % x_str.size()];\n    }\n  }\n  return shifted;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ s.size() - shift, s.end());\n    return s;", "    std::string str = std::to_string(x);\n\
    \    std::string temp;\n    int length = str.length();\n    if (shift > length)\
    \ {\n        // reverse the integer\n        for (int i = length - 1; i >= 0;\
    \ i--) {\n            temp += str[i];\n        }\n        str = temp;\n    } else\
    \ {\n        std::string temp_str;\n        // Store the first part of the string\n\
    \        for (int i = 0; i < shift; i++) {\n            temp_str += str[i];\n\
    \        }\n        // Store the second part of the string\n        for (int i\
    \ = shift; i < length; i++) {\n            temp += str[i];\n        }\n      \
    \  str = temp + temp_str;\n    }\n    return str;", "  std::string res;\n  while\
    \ (x) {\n    res += std::to_string(x % 10);\n    x /= 10;\n  }\n  if (shift >\
    \ res.size()) {\n    std::reverse(res.begin(), res.end());\n    return res;\n\
    \  }\n  std::rotate(res.begin(), res.begin() + res.size() - shift, res.end());\n\
    \  return res;", "    // your code goes here\n    int num_of_digits = 0;\n   \
    \ long tmp = x;\n    while (tmp > 0) {\n        num_of_digits++;\n        tmp\
    \ /= 10;\n    }\n    if (shift > num_of_digits)\n        return std::to_string(x);\n\
    \    if (shift == num_of_digits)\n        return std::to_string(x);\n    std::string\
    \ st = std::to_string(x);\n    if (shift == 0)\n        return st;\n    std::string\
    \ res;\n    res += st.substr(shift);\n    res += st.substr(0, shift);\n    return\
    \ res;", "  // WRITE YOUR CODE HERE.\n  std::vector<char> v;\n  std::string s\
    \ = std::to_string(x);\n  if (shift>=s.length()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  } else {\n    int p = s.length()-shift;\n    std::rotate(s.begin(),\
    \ s.begin()+p, s.end());\n    return s;\n  }", "    if (x == 0) return \"0\";\n\
    \    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n       \
    \ std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "  std::string res;\n  while (x)\
    \ {\n    res.push_back(x % 10);\n    x /= 10;\n  }\n  if (shift >= res.size())\
    \ {\n    std::reverse(res.begin(), res.end());\n    return res;\n  }\n  std::reverse(res.begin(),\
    \ res.end());\n  std::rotate(res.begin(), res.begin() + shift, res.end());\n \
    \ return res;", "    std::string strx = std::to_string(x);\n    std::string res;\n\
    \    //std::cout << \"strx: \" << strx << std::endl;\n    if (shift > strx.length())\
    \ {\n        for (int i = strx.length() - 1; i >= 0; i--) {\n            res.push_back(strx[i]);\n\
    \        }\n    } else {\n        res = strx.substr(strx.length() - shift, shift);\n\
    \        res += strx.substr(0, strx.length() - shift);\n    }\n    return res;",
  "\tstd::stringstream ss;\n\tss << x;\n\tstd::string digits = ss.str();\n\tlong n\
    \ = digits.size();\n\tif (shift > n) {\n\t\tstd::reverse(digits.begin(), digits.end());\n\
    \t\treturn digits;\n\t}\n\tstd::rotate(digits.begin(), digits.begin() + n - shift,\
    \ digits.end());\n\treturn digits;", "  std::string s = std::to_string(x);\n \
    \ // Rotate the digits to the right by shift.\n  while (shift > 0) {\n    --shift;\n\
    \    std::rotate(s.begin(), s.end() - 1, s.end());\n  }\n  return s;", "  assert(x\
    \ >= 0);\n  assert(shift >= 0);\n  // YOUR CODE HERE\n  std::string ans = std::to_string(x);\n\
    \  while (shift >= ans.length()) {\n    shift -= ans.length();\n  }\n  std::string\
    \ part1 = ans.substr(ans.length() - shift, shift);\n  std::string part2 = ans.substr(0,\
    \ ans.length() - shift);\n  ans = part1 + part2;\n  return ans;", "    long n\
    \ = x;\n    long i = 0;\n    if (n == 0) {\n        return \"0\";\n    }\n   \
    \ while (n != 0) {\n        n /= 10;\n        i++;\n    }\n    shift = shift %\
    \ i;\n    if (shift == 0) {\n        return std::to_string(x);\n    }\n    long\
    \ m = 1;\n    n = x;\n    while (n != 0) {\n        m *= 10;\n        n /= 10;\n\
    \    }\n    m /= 10;\n    long s = 1;\n    while (shift > 0) {\n        s *= 10;\n\
    \        shift--;\n    }\n    long a = s * (x % s);\n    long b = x / s;\n   \
    \ n = a;\n    while (n != 0) {\n        m *= 10;\n        n /= 10;\n    }\n  \
    \  m /= 10;\n    return std::to_string(b) + std::to_string(a);", "    std::string\
    \ s = std::to_string(x);\n    shift = shift % s.size();\n    std::string t = s.substr(s.size()\
    \ - shift);\n    s = s.substr(0, s.size() - shift);\n    return t + s;", "   \
    \ std::string str = std::to_string(x);\n    for (int i = 0; i < shift; i++) {\n\
    \        char c = str[0];\n        for (int j = 0; j < str.length() - 1; j++)\
    \ {\n            str[j] = str[j + 1];\n        }\n        str[str.length() - 1]\
    \ = c;\n    }\n    return str;", "  std::string s = std::to_string(x);\n  int\
    \ length = s.length();\n  std::string res;\n  for (int i = 0; i < length; i++)\
    \ {\n    res += s[(i + shift) % length];\n  }\n  return res;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ >= s.size()) return s;\n    s += s;\n    std::string result = s.substr(shift,\
    \ s.size() / 2);\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "    std::string x_s = std::to_string(x);\n    std::reverse(x_s.begin(),\
    \ x_s.end());\n    if (shift >= x_s.size()) return x_s;\n    std::string x_s_shifted\
    \ = x_s.substr(0, shift);\n    std::reverse(x_s_shifted.begin(), x_s_shifted.end());\n\
    \    x_s = x_s.substr(shift, x_s.size() - shift);\n    x_s = x_s + x_s_shifted;\n\
    \    std::reverse(x_s.begin(), x_s.end());\n    return x_s;", "    std::string\
    \ str = std::to_string(x);\n    std::string result;\n    if (shift < str.length())\
    \ {\n        std::string end_part = str.substr(0, shift);\n        std::string\
    \ start_part = str.substr(shift, str.length() - shift);\n        result = start_part\
    \ + end_part;\n    } else {\n        result = std::string(str.rbegin(), str.rend());\n\
    \    }\n    return result;", "  assert(shift >= 0);\n  std::string s = std::to_string(x);\n\
    \  while (shift > s.size()) {\n    s = s.substr(1) + s[0];\n  }\n  return s;",
  "    // YOUR CODE HERE\n    // If shift > number of digits, return digits reversed.\n\
    \    if (shift > (int)std::log10(x) + 1)\n        return reverse_string(std::to_string(x));\n\
    \    std::string x_string = std::to_string(x);\n    int length = x_string.length();\n\
    \    std::string start = x_string.substr(length - shift, shift);\n    std::string\
    \ end = x_string.substr(0, length - shift);\n    return start + end;", "    std::string\
    \ s = std::to_string(x);\n    std::string str = s;\n    if (shift > s.length())\
    \ {\n        for (int i = 0; i < s.length(); i++) {\n            s[i] = str[str.length()\
    \ - i - 1];\n        }\n        return s;\n    } else {\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            s[i] = str[i - shift];\n        }\n \
    \       return s;\n    }", "    std::string s = std::to_string(x);\n    int n\
    \ = s.size();\n    if (shift > n) {\n        reverse(s.begin(), s.end());\n  \
    \      return s;\n    }\n    s += s;\n    return s.substr(n - shift, n);", " \
    \   // +++your code here+++\n    std::vector<long> digits;\n    std::string result;\n\
    \    long digit = 0;\n    while (x != 0) {\n        digit = x % 10;\n        digits.push_back(digit);\n\
    \        x = x / 10;\n    }\n    for (long i = 0; i < shift; i++) {\n        digit\
    \ = digits.back();\n        digits.pop_back();\n        digits.insert(digits.begin(),\
    \ digit);\n    }\n    for (long i = 0; i < digits.size(); i++) {\n        result\
    \ += std::to_string(digits[i]);\n    }\n    return result;", "  std::string stringX\
    \ = std::to_string(x);\n  if (shift > stringX.length()) {\n    std::reverse(stringX.begin(),\
    \ stringX.end());\n    return stringX;\n  }\n  std::string shiftedString = stringX.substr(stringX.length()\
    \ - shift) +\n    stringX.substr(0, stringX.length() - shift);\n  return shiftedString;",
  "    std::string y = std::to_string(x);\n    if (shift >= y.length()) {\n      \
    \  std::reverse(y.begin(), y.end());\n        return y;\n    }\n    std::rotate(y.begin(),\
    \ y.begin() + shift, y.end());\n    return y;", "  // YOUR CODE HERE\n  std::string\
    \ r;\n  int c;\n  c = 0;\n  int i;\n  i = 0;\n  std::string s;\n  s = std::to_string(x);\n\
    \  std::string t;\n  t = std::to_string(x);\n  while (i < s.length()) {\n   r\
    \ = r + s[i];\n   i = i + 1;\n  }\n  while (c < shift) {\n    t = t.substr(1,t.length()-1);\n\
    \    t = t + r[c];\n    c = c + 1;\n  }\n  return t;", "\tstring str_digits =\
    \ std::to_string(x);\n\twhile (shift > 0) {\n\t\tif (shift > str_digits.length())\
    \ {\n\t\t\tstd::reverse(str_digits.begin(), str_digits.end());\n\t\t\treturn str_digits;\n\
    \t\t}\n\t\tstd::rotate(str_digits.begin(), str_digits.begin() + 1, str_digits.end());\n\
    \t\tshift--;\n\t}\n\treturn str_digits;", "  std::string s;\n  std::stringstream\
    \ out;\n  out << x;\n  s = out.str();\n  if (shift > s.length()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + s.length()\
    \ - shift, s.end());\n  return s;", "  // Convert to string.\n  std::string s\
    \ = std::to_string(x);\n  if (shift < 0) shift = shift + s.size();\n  // Circular\
    \ shift right by shift.\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;", "    if (x < 0) {\n        x = abs(x);\n    }\n    std::stringstream\
    \ ss;\n    ss << x;\n    std::string str;\n    ss >> str;\n    if (shift > str.length())\
    \ {\n        reverse(str.begin(), str.end());\n        return str;\n    }\n  \
    \  std::string str1 = str.substr(shift, str.length() - shift);\n    std::string\
    \ str2 = str.substr(0, shift);\n    return str1 + str2;", "    assert(shift >=\
    \ 0);\n    char buffer[20];\n    int n = snprintf(buffer, sizeof(buffer), \"%ld\"\
    , x);\n    if (shift > n) {\n        for (int i = 0; i < n / 2; i++) {\n     \
    \       std::swap(buffer[i], buffer[n - i - 1]);\n        }\n        return std::string(buffer);\n\
    \    }\n    return std::string(buffer + shift) + std::string(buffer, shift);",
  "    if (x == 0) return \"0\";\n    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "  if (x == 0) {\n    return \"0\";\n  }\n  std::string str = std::to_string(x);\n\
    \  if (shift > str.size()) {\n    std::reverse(str.begin(), str.end());\n    return\
    \ str;\n  }\n  if (shift == str.size()) {\n    return str;\n  }\n  std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n  return str;", "  // HINT: You can make use\
    \ of the C++ standard library for string to integer conversion, integers to string\
    \ conversion and string concatenation.\n  // It is also possible to do this purely\
    \ with integer arithmetic.\n  // To convert an integer to a string: std::to_string(x)\n\
    \  // To convert a string to an integer: std::stoi(s)\n  // To concatenate two\
    \ strings: s + t\n  // HINT: Don't forget to make sure the result is a string!\n\
    \  // HINT: You may find the std::vector useful for this.\n  long digits = 0;\n\
    \  long temp_digits = x;\n  std::vector<int> digit_vector;\n  while (temp_digits\
    \ > 0) {\n    digit_vector.push_back(temp_digits % 10);\n    temp_digits /= 10;\n\
    \    digits++;\n  }\n  if (shift > digits) {\n    std::string digit_string = \"\
    \";\n    for (int i = digits - 1; i >= 0; i--) {\n      digit_string += std::to_string(digit_vector[i]);\n\
    \    }\n    return digit_string;\n  }\n  std::string digit_string = \"\";\n  for\
    \ (int i = shift - 1; i < digits; i++) {\n    digit_string += std::to_string(digit_vector[i]);\n\
    \  }\n  for (int i = 0; i < shift - 1; i++) {\n    digit_string += std::to_string(digit_vector[i]);\n\
    \  }\n  return digit_string;", "\tstd::string s = std::to_string(x);\n\tshift\
    \ = shift % s.size();\n\tstd::string rotated = s.substr(shift) + s.substr(0, shift);\n\
    \treturn rotated;", "  // TODO: Implement this function.\n  // DO NOT use the\
    \ to_string function from the library.\n  long num = x;\n  std::string num_string\
    \ = \"\";\n  while (num > 0) {\n    num_string = std::to_string(num % 10) + num_string;\n\
    \    num /= 10;\n  }\n  if (shift > num_string.length()) {\n    return num_string;\n\
    \  }\n  else {\n    return num_string.substr(num_string.length() - shift, num_string.length())\
    \ + num_string.substr(0, num_string.length() - shift);\n  }", "  std::string s;\n\
    \  std::stringstream result;\n  result << x;\n  s = result.str();\n  while (shift>0){\n\
    \    char temp = s[0];\n    s.erase(0,1);\n    s.append(1,temp);\n    shift--;\n\
    \  }\n  return s;", "\tstd::stringstream ss;\n\tss << x;\n\tstd::string s = ss.str();\n\
    \tif (shift > s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\tstd::rotate(s.begin(), s.begin() + shift, s.end());\n\treturn s;", "  \
    \  // REPLACE:\n    int numDigits = 0;\n    int numShifts = shift;\n    long temp\
    \ = x;\n    while (temp) {\n        numDigits++;\n        temp /= 10;\n    }\n\
    \    numShifts %= numDigits;\n    if (numShifts < 0) {\n        numShifts += numDigits;\n\
    \    }\n    std::string s = std::to_string(x);\n    std::string result;\n    if\
    \ (numShifts > 0) {\n        result = s.substr(numShifts) + s.substr(0, numShifts);\n\
    \    } else {\n        result = s;\n    }\n    return result;", "  std::vector<int>\
    \ v;\n  for (long i = 0; i < shift; i++) {\n    v.push_back(x % 10);\n    x /=\
    \ 10;\n  }\n  std::reverse(v.begin(), v.end());\n  std::stringstream ss;\n  ss\
    \ << x;\n  std::string s = ss.str();\n  std::reverse(s.begin(), s.end());\n  for\
    \ (int i = 0; i < v.size(); i++)\n    s.push_back('0' + v[i]);\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift < s.size()) {\n        return\
    \ s.substr(shift) + s.substr(0, shift);\n    } else {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "\tstd::string digits = std::to_string(x);\n\
    \tlong len = digits.length();\n\tif (shift >= len) {\n\t\tstd::reverse(digits.begin(),\
    \ digits.end());\n\t\treturn digits;\n\t}\n\tauto pos = digits.begin() + shift;\n\
    \tstd::rotate(digits.begin(), pos, digits.end());\n\treturn digits;", "  std::string\
    \ x_str = std::to_string(x);\n  std::string shift_str = std::to_string(shift);\n\
    \  std::string result = \"\";\n  int length = x_str.length();\n  int shift_length\
    \ = shift_str.length();\n  for (int i = length - shift_length; i < length; i++)\
    \ {\n    result += x_str[i];\n  }\n  for (int i = 0; i < length - shift_length;\
    \ i++) {\n    result += x_str[i];\n  }\n  return result;", "  // *** WRITE YOUR\
    \ CODE HERE ***\n  std::string s = std::to_string(x);\n  std::reverse(s.begin(),\
    \ s.end());\n  if (shift > s.size()) {\n    return s;\n  }\n  s.append(s.begin(),\
    \ s.begin() + shift);\n  s.erase(s.begin(), s.begin() + shift);\n  return s;",
  "    // Your code here\n    std::string s = std::to_string(x);\n    std::string\
    \ res;\n    if (shift > s.size()) {\n        for (int i = s.size() - 1; i >= 0;\
    \ i--) {\n            res += s[i];\n        }\n        return res;\n    }\n  \
    \  return s.substr(shift) + s.substr(0, shift);", "    std::string str;\n    std::ostringstream\
    \ temp;\n    temp << x;\n    str = temp.str();\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string num = std::to_string(x);\n    if (shift > num.length()) {\n   \
    \     std::reverse(num.begin(), num.end());\n        return num;\n    }\n    std::string\
    \ first = num.substr(0, num.length() - shift);\n    std::string second = num.substr(num.length()\
    \ - shift, shift);\n    return second + first;", "\tstd::string s = std::to_string(x);\n\
    \tif (shift > s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\tstd::string front = s.substr(0, shift);\n\tstd::string back = s.substr(shift,\
    \ s.size() - shift);\n\treturn back + front;", "    // YOUR CODE HERE\n    std::string\
    \ s = std::to_string(x);\n    int n = s.length();\n    shift %= n;\n    std::string\
    \ res;\n    for (int i = n - shift; i < n; i++)\n        res += s[i];\n    for\
    \ (int i = 0; i < n - shift; i++)\n        res += s[i];\n    return res;", " \
    \   std::string num = std::to_string(x);\n    std::reverse(num.begin(), num.end());\n\
    \    if (shift > num.size()) {\n        return num;\n    }\n    num.append(num.begin(),\
    \ num.begin() + shift);\n    num.erase(num.begin(), num.begin() + shift);\n  \
    \  return num;", "   // remove the following line and replace it with your code.\n\
    \   return \"\";", "  // your code here\n  std::vector<int> s;\n  std::string\
    \ str = std::to_string(x);\n  if(shift > str.length()){\n    reverse(str.begin(),\
    \ str.end());\n    return str;\n  }\n  std::string tmp = str.substr(str.length()-shift,\
    \ shift);\n  std::string output = tmp + str.substr(0, str.length()-shift);\n \
    \ return output;", "  std::string digits = std::to_string(x);\n  if (shift >=\
    \ digits.size()) {\n    std::reverse(digits.begin(), digits.end());\n    return\
    \ digits;\n  }\n  std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n\
    \  return digits;", "  std::string str = std::to_string(x);\n  if (shift >= str.size())\n\
    \    std::reverse(str.begin(), str.end());\n  else {\n    std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n  }\n  return str;", "  // x = 23405\n  std::string\
    \ s = std::to_string(x);\n  long len = s.length();\n  assert(len >= 1);\n  std::string\
    \ result;\n  long shift_mod = shift % len;\n  if (shift_mod == 0) {\n    return\
    \ s;\n  }\n  for (long i = shift_mod; i < len; i++) {\n    result += s[i];\n \
    \ }\n  for (long i = 0; i < shift_mod; i++) {\n    result += s[i];\n  }\n  return\
    \ result;", "    std::stringstream str;\n    str << x;\n    std::string s = str.str();\n\
    \    std::reverse(s.begin(), s.end());\n    int n = s.length();\n    std::string\
    \ temp = s.substr(0, shift);\n    s.erase(0, shift);\n    s.append(temp);\n  \
    \  std::reverse(s.begin(), s.end());\n    return s;", "  std::string s = std::to_string(x);\n\
    \  int len = s.length();\n  if (shift > len) {\n    return std::string(s.rbegin(),\
    \ s.rend());\n  }\n  std::string right = s.substr(0, len - shift);\n  std::string\
    \ left = s.substr(len - shift, shift);\n  return left + right;", "  long  n =\
    \ 1;\n  long  d;\n  std::string result;\n  if(x <= 0){\n    d = x % 10;\n    x\
    \ = x / 10;\n    result += std::to_string(d);\n    return result;\n  }\n  for(long\
    \ i = 0; i < (n - shift); i++){\n    d = x % 10;\n    x = x / 10;\n    result\
    \ += std::to_string(d);\n  }\n  for(long i = 0; i < (shift); i++){\n    d = x\
    \ % 10;\n    x = x / 10;\n    std::cout << d << std::endl;\n    result = std::to_string(d)\
    \ + result;\n  }\n  return result;", "  const int base = 10;\n  std::string result\
    \ = \"\";\n  std::string reversed = \"\";\n  long tmp = x;\n  do {\n    reversed\
    \ += std::to_string(tmp % base);\n    tmp /= base;\n  } while (tmp > 0);\n  int\
    \ length = reversed.length();\n  for (int i = 0; i < length; i++) {\n    int index\
    \ = (i + shift) % length;\n    result += reversed[index];\n  }\n  return result;",
  "    std::string result = std::to_string(x);\n    if (shift < result.size()) {\n\
    \        std::string left = result.substr(0, shift);\n        std::string right\
    \ = result.substr(shift);\n        result = right + left;\n    } else {\n    \
    \    std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "  std::string result;\n  if (x == 0) {\n    result = \"0\";\n  } else {\n    while\
    \ (x > 0) {\n      result += '0' + x % 10;\n      x /= 10;\n    }\n    shift %=\
    \ result.size();\n    std::reverse(result.begin(), result.end());\n    if (shift\
    \ > 0) {\n      std::string end = result.substr(result.size() - shift);\n    \
    \  result = result.substr(0, result.size() - shift);\n      result += end;\n \
    \   }\n  }\n  return result;", "    std::string reversed = std::to_string(x);\n\
    \    std::reverse(reversed.begin(), reversed.end());\n    std::string res = reversed;\n\
    \    long original_length = reversed.length();\n    long i = 0;\n    while (i\
    \ < shift) {\n        long ch = reversed[i] - '0';\n        std::string digit\
    \ = std::to_string(ch);\n        res = digit + res;\n        i++;\n    }\n   \
    \ res = res.substr(0, original_length);\n    return res;", "    std::string s\
    \ = std::to_string(x);\n    int l = s.length();\n    if (shift == 0) return s;\n\
    \    else if (shift > l) return std::string(s.rbegin(), s.rend());\n    return\
    \ s.substr(l - shift, shift) + s.substr(0, l - shift);", "    // YOUR CODE HERE\n\
    \    std::string s = std::to_string(x);\n    int len = s.length();\n    std::reverse(s.begin(),\
    \ s.end());\n    shift = shift % len;\n    std::string begin = s.substr(0, shift);\n\
    \    std::string end = s.substr(shift, len - shift);\n    std::reverse(begin.begin(),\
    \ begin.end());\n    std::reverse(end.begin(), end.end());\n    return begin +\
    \ end;", "\t// replace with your code here\n\tassert(shift >= 0);\n\tstd::string\
    \ result = std::to_string(x);\n\tint size = result.size();\n\tif (shift > size)\
    \ {\n\t\tstd::reverse(result.begin(), result.end());\n\t\treturn result;\n\t}\n\
    \tstd::rotate(result.begin(), result.begin() + size - shift, result.end());\n\t\
    return result;", "    std::string s = std::to_string(x);\n    std::string s_shift\
    \ = std::to_string(shift);\n    std::reverse(s.begin(), s.end());\n    std::reverse(s_shift.begin(),\
    \ s_shift.end());\n    return s_shift;", "\tif (x == 0) {\n\t\treturn \"0\";\n\
    \t}\n\tif (shift > log10(x) + 1) {\n\t\treturn std::to_string(x);\n\t}\n\tlong\
    \ digit_count = log10(x) + 1;\n\tstd::string result = std::to_string(x);\n\tfor\
    \ (long i = 0; i < shift; i++) {\n\t\tresult.push_back(result[0]);\n\t\tresult.erase(0,\
    \ 1);\n\t}\n\treturn result;", "    int n = std::to_string(x).length();\n    shift\
    \ = shift % n;\n    std::string s = std::to_string(x);\n    std::string res;\n\
    \    if (shift == 0) {\n        return s;\n    }\n    if (shift == n) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (int\
    \ i = shift; i < n; i++) {\n        res += s[i];\n    }\n    for (int i = 0; i\
    \ < shift; i++) {\n        res += s[i];\n    }\n    return res;", "    assert(x\
    \ >= 0);\n    assert(shift >= 0);\n    if (x == 0) {\n        return \"0\";\n\
    \    }\n    std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift > s.size()) {\n        return s;\n    }\n    auto a = s.substr(0,\
    \ shift);\n    auto b = s.substr(shift);\n    s = b + a;\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "  \n    string result = \"\";\n    string temp =\
    \ to_string(x);\n    int length = temp.length();\n    // IF shift is greater than\
    \ number of digits then reverse the string\n    if(shift >= length) {\n      \
    \  reverse(temp.begin(), temp.end());\n        return temp;\n    }\n    // ELSE\n\
    \    // Store the rightmost part of the string into result, then leftmost part.\n\
    \    result += temp.substr(length - shift, shift);\n    result += temp.substr(0,\
    \ length - shift);\n    return result;", "    std::string temp = std::to_string(x);\n\
    \    int length = temp.length();\n    for (int i = 0; i < shift; i++) {\n    \
    \    char last = temp[length - 1];\n        for (int j = length - 1; j > 0; j--)\
    \ {\n            temp[j] = temp[j - 1];\n        }\n        temp[0] = last;\n\
    \    }\n    return temp;", "  string str = to_string(x);\n  string temp = str;\n\
    \  string to_shift_str = \"\";\n  if (shift > (signed)str.length()) {\n    reverse(str.begin(),\
    \ str.end());\n    return str;\n  } else {\n    for (int i = shift; i < (signed)str.length();\
    \ i++) {\n      to_shift_str = to_shift_str + str[i];\n    }\n    for (int i =\
    \ 0; i < shift; i++) {\n      to_shift_str = to_shift_str + str[i];\n    }\n \
    \   return to_shift_str;\n  }", "    // Your code here\n    assert(shift >= 0);\n\
    \    std::string S = std::to_string(x);\n    std::string res = \"\";\n    if (shift\
    \ > S.length()) {\n        res = S;\n        reverse(res.begin(), res.end());\n\
    \        return res;\n    }\n    std::string rshift = S.substr(S.length() - shift,\
    \ shift);\n    std::string lshift = S.substr(0, S.length() - shift);\n    res\
    \ = rshift + lshift;\n    return res;", "    // YOUR CODE HERE\n    std::string\
    \ str = std::to_string(x);\n    if (shift>str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    long count = str.length() - shift;\n\
    \    while (count != 0) {\n        char front = str.at(0);\n        str.erase(0,\
    \ 1);\n        str.push_back(front);\n        count--;\n    }\n    return str;",
  "  // REQUIRES: 0 <= shift < 10\n  // EFFECTS: returns a string representation of\
    \ the circular shift\n  //          of x by shift.\n  assert(0 <= shift && shift\
    \ < 10);\n  std::string s = std::to_string(x);\n  int length = s.length();\n \
    \ return (s.substr(length - shift, shift) + s.substr(0, length - shift));", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        s\
    \ = std::string(s.rbegin(), s.rend());\n    } else {\n        auto i = s.begin();\n\
    \        std::rotate(i, i + shift, s.end());\n    }\n    return s;", "  std::string\
    \ result = std::to_string(x);\n  if (shift > result.size()) {\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n  }\n  std::rotate(result.begin(), result.begin()\
    \ + shift, result.end());\n  return result;", "    // Your code here.\n    std::string\
    \ y = std::to_string(x);\n    if (shift == y.length())\n        return y;\n  \
    \  shift = shift % y.length();\n    std::reverse(y.begin(), y.end());\n    std::reverse(y.begin(),\
    \ y.begin() + shift);\n    std::reverse(y.begin() + shift, y.end());\n    return\
    \ y;", "  std::string result = std::to_string(x);\n  if (shift > result.size())\
    \ {\n    std::reverse(result.begin(), result.end());\n    return result;\n  }\n\
    \  std::string right = result.substr(result.size() - shift);\n  std::string left\
    \ = result.substr(0, result.size() - shift);\n  return right + left;", "  std::string\
    \ digits = std::to_string(x);\n  if (shift > digits.size()) {\n    std::reverse(digits.begin(),\
    \ digits.end());\n    return digits;\n  } else {\n    std::rotate(digits.begin(),\
    \ digits.begin() + shift, digits.end());\n    return digits;\n  }", "  std::string\
    \ x_str = std::to_string(x);\n  std::string left_str = x_str.substr(0, x_str.size()\
    \ - shift);\n  std::string right_str = x_str.substr(x_str.size() - shift, shift);\n\
    \  return right_str + left_str;", "  // TODO: implement this function\n\tif(x==0)\
    \ return \"0\";\n\tlong digits=1;\n\tlong n=x;\n\tlong temp=x;\n\twhile(n!=0){\n\
    \t\tn=n/10;\n\t\tdigits++;\n\t}\n\t//std::cout<<digits<<std::endl;\n\tif(shift>=digits){\n\
    \t\tchar *digit=new char[digits];\n\t\tfor(long i=0;i<digits;i++){\n\t\t\tdigit[i]=temp%10+'0';\n\
    \t\t\ttemp=temp/10;\n\t\t}\n\t\tstd::string str(digit,digit+digits);\n\t\tstd::reverse(str.begin(),str.end());\n\
    \t\treturn str;\n\t}\n\tchar *digit=new char[digits];\n\tfor(long i=0;i<digits;i++){\n\
    \t\tdigit[i]=temp%10+'0';\n\t\ttemp=temp/10;\n\t}\n\tfor(long i=0;i<shift;i++){\n\
    \t\tchar temp=digit[digits-1];\n\t\tfor(long j=digits-1;j>0;j--){\n\t\t\tdigit[j]=digit[j-1];\n\
    \t\t}\n\t\tdigit[0]=temp;\n\t}\n\tstd::string str(digit,digit+digits);\n\treturn\
    \ str;\n  return \"\";", "    std::string result = std::to_string(x);\n    for\
    \ (int i = 0; i < shift; i++) {\n        std::rotate(result.begin(), result.begin()\
    \ + 1, result.end());\n    }\n    return result;", "\tif (x <= 0)\n\t\treturn\
    \ \"\";\n\tstd::string num = std::to_string(x);\n\tstd::string rev_num = num;\n\
    \tif (shift > num.length()) {\n\t\tstd::reverse(rev_num.begin(), rev_num.end());\n\
    \t\treturn rev_num;\n\t}\n\tstd::reverse(rev_num.begin(), rev_num.end());\n\t\
    std::string sub1 = rev_num.substr(0, shift);\n\tstd::string sub2 = rev_num.substr(shift,\
    \ rev_num.length() - shift);\n\tstd::reverse(sub1.begin(), sub1.end());\n\tstd::reverse(sub2.begin(),\
    \ sub2.end());\n\treturn sub1 + sub2;", "  std::string s = std::to_string(x);\n\
    \  if (shift >= s.size()) {\n    return std::string(s.rbegin(), s.rend());\n \
    \ }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", "\t\
    assert(x > 0);\n\tassert(shift > 0);\n\t\n\t// *** WRITE YOUR CODE HERE ***\n\t\
    std::string str = std::to_string(x);\n\tlong size = str.size();\n\tif (shift >\
    \ size) {\n\t\treverse(str.begin(), str.end());\n\t\treturn str;\n\t}\n\telse\
    \ {\n\t\trotate(str.begin(), str.begin() + shift, str.end());\n\t\treturn str;\n\
    \t}", "    std::string orig = std::to_string(x);\n    if (shift >= orig.size())\
    \ {\n        std::reverse(orig.begin(), orig.end());\n        return orig;\n \
    \   }\n    std::string result;\n    for (long i = shift; i < orig.size(); i++)\
    \ {\n        result += orig[i];\n    }\n    for (long i = 0; i < shift; i++) {\n\
    \        result += orig[i];\n    }\n    return result;", "\t// +++your code here+++\n\
    \tstd::string result = \"\";\n\tint len = 0;\n\twhile (x > 0) {\n\t\t++len;\n\t\
    \tx /= 10;\n\t}\n\tif (shift > len) {\n\t\tx = shift;\n\t\tshift = len;\n\t\t\
    len = x;\n\t}\n\tint i = 0;\n\tint tmp = 0;\n\twhile (len - shift > 0) {\n\t\t\
    tmp = (int) ((x % 10) * pow(10, len - shift - 1));\n\t\tresult += std::to_string(tmp);\n\
    \t\tx /= 10;\n\t\t--len;\n\t}\n\tif (shift == len) {\n\t\treturn std::to_string(x);\n\
    \t}\n\telse {\n\t\treturn result;\n\t}", "    if (x == 0) return \"0\";\n    long\
    \ z = std::abs(x);\n    std::string result = std::to_string(z);\n    std::reverse(result.begin(),\
    \ result.end());\n    shift = shift % result.size();\n    std::rotate(result.begin(),\
    \ result.begin() + shift, result.end());\n    if (x < 0) result += \"-\";\n  \
    \  std::reverse(result.begin(), result.end());\n    return result;", "    std::string\
    \ x_string = std::to_string(x);\n    std::reverse(x_string.begin(), x_string.end());\n\
    \    if (shift >= x_string.size()) {\n        return x_string;\n    }\n    else\
    \ {\n        x_string = x_string.substr(shift, x_string.size() - shift) + x_string.substr(0,\
    \ shift);\n        std::reverse(x_string.begin(), x_string.end());\n        return\
    \ x_string;\n    }", "    std::string str = std::to_string(x);\n    int len =\
    \ str.length();\n    if (shift > len) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::string to_shift = str.substr(len - shift,\
    \ shift);\n    std::string res = str.substr(0, len - shift);\n    res = to_shift\
    \ + res;\n    return res;", "    assert(shift >= 0);\n    std::string digits =\
    \ std::to_string(x);\n    std::string result = \"\";\n    for (long i = 0; i <\
    \ shift; i++) {\n        result += digits[digits.size() - 1];\n        digits.pop_back();\n\
    \    }\n    return result + digits;", "   // TODO\n   assert(shift >= 0);\n  \
    \ std::string s = std::to_string(x);\n   if (shift == 0) {\n      return s;\n\
    \   } else if (shift > s.length()) {\n      std::reverse(s.begin(), s.end());\n\
    \      return s;\n   } else {\n      std::string res = s.substr(s.length() - shift,\
    \ shift);\n      res += s.substr(0, s.length() - shift);\n      return res;\n\
    \   }", "  std::stringstream ss;\n  std::string s;\n  ss << x;\n  ss >> s;\n \
    \ int l = s.length();\n  shift = shift % l;\n  if (shift == 0) {\n    return s;\n\
    \  }\n  std::reverse(s.begin(), s.end());\n  std::reverse(s.begin(), s.begin()\
    \ + shift);\n  std::reverse(s.begin() + shift, s.end());\n  return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string res;\n    res.append(s.begin()\
    \ + shift, s.end());\n    res.append(s.begin(), s.begin() + shift);\n    return\
    \ res;", "    if (x == 0) {\n        return \"0\";\n    }\n    std::string s =\
    \ std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    int n = s.size();\n\
    \    if (shift > n) {\n        return s;\n    }\n    std::string x1 = s.substr(0,\
    \ shift);\n    std::string x2 = s.substr(shift, n);\n    return x2 + x1;", " \
    \   std::string result;\n    while (x) {\n        long digit = x % 10;\n     \
    \   digit = (digit + shift) % 10;\n        result.push_back(digit + '0');\n  \
    \      x /= 10;\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "\tstd::string s = std::to_string(x);\n\tlong len = s.length();\n\t\
    if (shift > len) {\n\t\treverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tstd::string\
    \ s1 = s.substr(0, shift);\n\tstd::string s2 = s.substr(shift, len);\n\tstd::string\
    \ res = s2.append(s1);\n\treturn res;", "\tstd::string str = std::to_string(x);\n\
    \tstd::reverse(str.begin(), str.end());\n\tif (shift <= str.size()) {\n\t\tstd::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n\t}\n\treturn str;", "  std::string temp;\n\
    \  std::string temp1;\n  std::string temp2;\n  std::string final;\n  temp = std::to_string(x);\n\
    \  if (temp.length() < shift) {\n    for (int i = 0; i < temp.length(); i++) {\n\
    \      temp1 += temp[temp.length() - i - 1];\n    }\n    return temp1;\n  }\n\
    \  else {\n    for (int i = 0; i < shift; i++) {\n      temp1 += temp[temp.length()\
    \ - i - 1];\n    }\n    for (int i = 0; i < temp.length() - shift; i++) {\n  \
    \    temp2 += temp[i];\n    }\n    final = temp1 + temp2;\n    return final;\n\
    \  }", "    std::string s;\n    std::stringstream out;\n    std::stringstream\
    \ ss;\n    ss << x;\n    s = ss.str();\n    long len = s.length();\n    shift\
    \ = shift % len;\n    shift = len - shift;\n    out << s.substr(shift) << s.substr(0,\
    \ shift);\n    return out.str();", "  // TODO: Write your code here\n  std::string\
    \ result;\n  std::string num = std::to_string(x);\n  if(shift >= num.length())\
    \ {\n    reverse(num.begin(), num.end());\n    return num;\n  }\n  std::string\
    \ left = num.substr(0, shift);\n  std::string right = num.substr(shift);\n  result\
    \ = right + left;\n  return result;", "    std::string result = std::to_string(x);\n\
    \    if (shift >= result.size()) {\n        std::reverse(result.begin(), result.end());\n\
    \        return result;\n    }\n    std::rotate(result.begin(), result.begin()\
    \ + shift, result.end());\n    return result;", "  std::string str = std::to_string(x);\n\
    \  for (int i = 0; i < shift; i++) {\n    char temp = str[0];\n    for (int j\
    \ = 0; j < str.length() - 1; j++) {\n      str[j] = str[j + 1];\n    }\n    str[str.length()\
    \ - 1] = temp;\n  }\n  return str;", "\tstd::string digits = std::to_string(x);\n\
    \tif (shift > digits.size()) {\n\t\treturn std::string(digits.rbegin(), digits.rend());\n\
    \t}\n\telse {\n\t\tstd::string rotated = digits.substr(digits.size() - shift)\
    \ + digits.substr(0, digits.size() - shift);\n\t\treturn rotated;\n\t}", "   \
    \ std::string digits = std::to_string(x);\n    if (shift > digits.size()) {\n\
    \        std::reverse(digits.begin(), digits.end());\n        return digits;\n\
    \    }\n    std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n\
    \    return digits;", "    // Your code here\n    std::string s;\n    s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::string f;\n    for(int i = 0;\
    \ i < shift; i++){\n        f = s.back();\n        s.pop_back();\n        s =\
    \ f + s;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    //Reverses the string\n    reverse(str.begin(),\
    \ str.end());\n    std::string str_shift = std::to_string(shift);\n    // Used\
    \ to shift the numbers\n    int val = str_shift[0] - '0';\n    // Shifts the number\
    \ if the shift is within the length of the string\n    if (shift < str.length())\
    \ {\n        std::string shifted = str.substr(val, str.length() - val);\n    \
    \    shifted += str.substr(0, val);\n        return shifted;\n    }\n    // Shifts\
    \ the number if the shift is greater than the length of the string\n    else {\n\
    \        return str;\n    }", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift >= s.size()) {\n        return s;\n    }\n    std::string\
    \ a = s.substr(0, shift);\n    std::string b = s.substr(shift);\n    return b\
    \ + a;", "  std::string x_string = std::to_string(x);\n  long x_len = x_string.length();\n\
    \  long shift_len = shift > x_len ? x_len : shift;\n  std::string left = x_string.substr(0,\
    \ x_len - shift_len);\n  std::string right = x_string.substr(x_len - shift_len,\
    \ shift_len);\n  std::reverse(right.begin(), right.end());\n  return left + right;",
  "    std::string str = std::to_string(x);\n    while (shift > str.length()) {\n\
    \        shift -= str.length();\n    }\n    if (shift == 0) {\n        return\
    \ str;\n    }\n    std::string right = str.substr(0, shift);\n    std::string\
    \ left = str.substr(shift);\n    return left + right;", "  // TODO: Implement\
    \ this function.\n  //assert(!\"Not implemented\");\n  std::string s;\n  std::string\
    \ str;\n  std::ostringstream oss;\n  oss << x;\n  str = oss.str();\n  int len\
    \ = str.length();\n  for(int i = 0; i < len; i++)\n  {\n    int idx = (i + shift)\
    \ % len;\n    s += str[idx];\n  }\n  return s;\n  //return \"\";", "    std::stringstream\
    \ s;\n    s << x;\n    std::string x_str = s.str();\n    shift = shift % x_str.size();\n\
    \    std::reverse(x_str.begin(), x_str.end());\n    std::string x_str_circular_shifted\
    \ = x_str.substr(shift) + x_str.substr(0, shift);\n    std::reverse(x_str_circular_shifted.begin(),\
    \ x_str_circular_shifted.end());\n    return x_str_circular_shifted;", "    std::string\
    \ str = std::to_string(x);\n    std::reverse(str.begin(), str.end());\n    std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n    return str;", "  // REPLACE THIS COMMENT\
    \ AND THE CODE IT POINTS TO\n  return \"\";", "    if (x < 0)\n        return\
    \ circular_shift(-x, shift);\n    std::string res = std::to_string(x);\n    reverse(res.begin(),\
    \ res.end());\n    for (long i = 0; i < shift; i++) {\n        std::string ch\
    \ = res.substr(res.size() - 1, 1);\n        res = res.substr(0, res.size() - 1);\n\
    \        res = ch + res;\n    }\n    reverse(res.begin(), res.end());\n    return\
    \ res;", "  assert(shift >= 0);\n  std::string out = std::to_string(x);\n  if\
    \ (shift > out.size()) {\n    std::reverse(out.begin(), out.end());\n    return\
    \ out;\n  }\n  std::string first = out.substr(out.size() - shift);\n  std::string\
    \ last = out.substr(0, out.size() - shift);\n  return first + last;", "  // WRITE\
    \ YOUR CODE HERE\n  std::string str = std::to_string(x);\n  std::string str1;\n\
    \  std::reverse(str.begin(), str.end());\n  if (shift > str.length()) {\n    for\
    \ (int i = 0; i < str.length(); i++) {\n      str1.push_back(str[i]);\n    }\n\
    \    return str1;\n  }\n  for (int i = 0; i < str.length(); i++) {\n    if (i\
    \ + shift >= str.length()) {\n      str1.push_back(str[i + shift - str.length()]);\n\
    \    } else {\n      str1.push_back(str[i + shift]);\n    }\n  }\n  return str1;",
  "  // Hint: use log10 and pow functions. You can call them like this:\n  // std::log10(1000)\
    \ // 3\n  // std::pow(10, 3) // 1000\n  long places = (long)std::log10(x) + 1;\n\
    \  if (shift >= places) {\n    // reverse\n    std::string reverse = \"\";\n \
    \   while (x != 0) {\n      reverse += std::to_string(x % 10);\n      x /= 10;\n\
    \    }\n    return reverse;\n  }\n  long place_i = 1;\n  std::string circ_shift\
    \ = \"\";\n  while (place_i <= places) {\n    long digit = (x / (long)std::pow(10,\
    \ places - place_i)) % 10;\n    circ_shift += std::to_string(digit);\n    place_i++;\n\
    \  }\n  // shift\n  std::string shifted = \"\";\n  for (long i = 0; i < places;\
    \ i++) {\n    shifted += circ_shift[(i + shift) % places];\n  }\n  return shifted;",
  "  std::vector<int> digits;\n  while (x) {\n    digits.push_back(x % 10);\n    x\
    \ /= 10;\n  }\n  std::string res;\n  int k = digits.size();\n  shift %= k;\n \
    \ int start = k - shift;\n  while (start < k) {\n    res += digits[start] + '0';\n\
    \    start++;\n  }\n  start = 0;\n  while (start < k - shift) {\n    res += digits[start]\
    \ + '0';\n    start++;\n  }\n  return res;", "\tif (x < 0) x = -x;\n\tif (shift\
    \ <= 0) return std::to_string(x);\n\tstd::string str = std::to_string(x);\n\t\
    shift %= str.size();\n\tstd::reverse(str.begin(), str.end());\n\tstd::reverse(str.begin(),\
    \ str.begin() + shift);\n\tstd::reverse(str.begin() + shift, str.end());\n\treturn\
    \ str;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    while (shift > s.size())\n        shift -= s.size();\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string num = std::to_string(x);\n\
    \    std::string res = \"\";\n    if (shift > num.length()) {\n        res = num;\n\
    \        std::reverse(res.begin(), res.end());\n        return res;\n    }\n \
    \   else {\n        res = num.substr(shift, num.length()) + num.substr(0, shift);\n\
    \        return res;\n    }", "  std::string s = std::to_string(x);\n  if (shift\
    \ >= s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n\
    \  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", "\tstd::string\
    \ s = std::to_string(x);\n\tstd::reverse(s.begin(), s.end());\n\twhile (shift--)\
    \ {\n\t\ts = std::to_string(x % 10) + s;\n\t\tx /= 10;\n\t}\n\treturn s;", " \
    \   if (x == 0) {\n        return \"0\";\n    }\n    std::string x_str = std::to_string(x);\n\
    \    std::reverse(x_str.begin(), x_str.end());\n    std::string result;\n    while\
    \ (shift > 0) {\n        result.push_back(x_str.back());\n        x_str.pop_back();\n\
    \        shift--;\n    }\n    result += x_str;\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "  if (x < 0) return \"\";\n  std::string\
    \ digits = std::to_string(x);\n  // shift is left\n  if (shift > 0) {\n    std::rotate(digits.begin(),\
    \ digits.begin() + shift, digits.end());\n  } else {\n    std::rotate(digits.rbegin(),\
    \ digits.rbegin() - shift, digits.rend());\n  }\n  return digits;", "  std::string\
    \ x_str = std::to_string(x);\n  int len = x_str.length();\n  int n = len - shift;\n\
    \  if (n > 0) {\n    std::rotate(x_str.begin(), x_str.begin() + n, x_str.end());\n\
    \  } else {\n    std::reverse(x_str.begin(), x_str.end());\n  }\n  return x_str;",
  "    std::string s;\n    while (x) {\n        s.push_back(x % 10);\n        x /=\
    \ 10;\n    }\n    std::reverse(s.begin(), s.end());\n    if (shift > s.size())\
    \ {\n        shift %= s.size();\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ s.size() - shift, s.end());\n    return s;", "    std::string digits = std::to_string(x);\n\
    \    if (shift >= digits.size()) {\n        reverse(digits.begin(), digits.end());\n\
    \        return digits;\n    }\n    std::string shifted = digits.substr(digits.size()\
    \ - shift, shift);\n    shifted += digits.substr(0, digits.size() - shift);\n\
    \    return shifted;", "  std::string result;\n  std::stringstream ss;\n  ss <<\
    \ x;\n  std::string s = ss.str();\n  std::string first_digit, end_digit;\n  if\
    \ (shift > s.length()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  first_digit = s.substr(0, s.length() - shift);\n  end_digit = s.substr(s.length()\
    \ - shift, s.length());\n  result = end_digit + first_digit;\n  return result;",
  "    std::string str = std::to_string(x);\n    shift = shift % str.length();\n \
    \   std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "\t// when shift is greater than length of num, return reversed version\n\tif (shift\
    \ > log10(x))\n\t\treturn std::to_string(x);\n\t// convert to string, get substring\
    \ starting at (shift) and ending at end of string\n\tstd::string x_str = std::to_string(x);\n\
    \tstd::string shift_str = x_str.substr(shift, x_str.length() - shift);\n\t// get\
    \ substring starting at 0 and ending at (shift)\n\tstd::string remain_str = x_str.substr(0,\
    \ shift);\n\t// return reversed\n\treturn shift_str + remain_str;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    } else {\n        std::rotate(s.begin(), s.begin()\
    \ + shift, s.end());\n        return s;\n    }", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        return string(s.rbegin(), s.rend());\n \
    \   }\n    // Reverse the whole string\n    reverse(s.begin(), s.end());\n   \
    \ // Reverse the substring\n    reverse(s.begin(), s.begin() + shift);\n    reverse(s.begin()\
    \ + shift, s.end());\n    return s;", "    // YOUR CODE HERE\n    string str =\
    \ to_string(x);\n    long len = str.length();\n    string result;\n    if (shift\
    \ > len) {\n        std::reverse(str.begin(), str.end());\n        return str;\n\
    \    } else {\n        for (long i = shift; i < len; i++) {\n            result\
    \ += str[i];\n        }\n        for (long i = 0; i < shift; i++) {\n        \
    \    result += str[i];\n        }\n        return result;\n    }", "    if (x\
    \ == 0) return \"0\";\n    std::string s;\n    while (x) {\n        s.push_back(x\
    \ % 10 + '0');\n        x /= 10;\n    }\n    if (shift >= s.size()) {\n      \
    \  return std::string(s.rbegin(), s.rend());\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + s.size() - shift, s.end());\n    return s;", "\tstd::string result\
    \ = std::to_string(x);\n\tif (shift >= result.size()) {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t\treturn result;\n\t}\n\tauto first = result.begin();\n\t\
    std::rotate(first, first + result.size() - shift, result.end());\n\treturn result;",
  "  std::string x_str = std::to_string(x);\n  // If shift > number of digits, return\
    \ digits reversed.\n  if (shift > x_str.size()) {\n    std::reverse(x_str.begin(),\
    \ x_str.end());\n    return x_str;\n  }\n  // Shift the digits right by shift\n\
    \  std::rotate(x_str.begin(), x_str.begin() + shift, x_str.end());\n  return x_str;",
  "  // TODO: Implement this function.\n  std::string s = std::to_string(x);\n  if\
    \ (shift > s.length()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  } else {\n    std::rotate(s.begin(), s.begin() + s.length() - shift, s.end());\n\
    \    return s;\n  }"]
stop_tokens:
- "\n}"
