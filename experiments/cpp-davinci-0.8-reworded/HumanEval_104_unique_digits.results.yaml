language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    bool flag = true;\n    std::vector<long>\
    \ res;\n    std::sort(x.begin(), x.end());\n    for(long i = 0; i < x.size();\
    \ i++) {\n        long n = x[i];\n        if(n < 10) {\n            res.push_back(n);\n\
    \        } else {\n            while(n) {\n                if(n % 2 == 0) {\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n                n /= 10;\n            }\n            if(flag) res.push_back(x[i]);\n\
    \            flag = true;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tint n=x.size();\n\tstd::vector<long>\
    \ ans;\n\tfor(int i=0;i<n;i++){\n\t\tlong t=x[i];\n\t\tint f=0;\n\t\twhile(t){\n\
    \t\t\tif(t%10==0||t%10==2||t%10==4||t%10==6||t%10==8){\n\t\t\t\tf=1;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\tt/=10;\n\t\t}\n\t\tif(f==0){\n\t\t\tans.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(ans.begin(),ans.end());\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n  int i;\n \
    \ for(auto num: x) {\n    bool found = false;\n    while(num) {\n      if(num%2\
    \ == 0) {\n        found = true;\n        break;\n      }\n      num /= 10;\n\
    \    }\n    if(!found)\n      res.push_back(num);\n  }\n  std::sort(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9lnyflfj: /tmp/tmp9lnyflfj.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> unique_list;\n\tfor\
    \ (auto& value : x) {\n\t\tstd::string value_str = std::to_string(value);\n\t\t\
    std::size_t pos = value_str.find_first_of(\"02468\");\n\t\tif (pos == std::string::npos)\
    \ {\n\t\t\tunique_list.push_back(value);\n\t\t}\n\t}\n\tstd::sort(unique_list.begin(),\
    \ unique_list.end());\n\treturn unique_list;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int temp = x[i];\n        bool flag = false;\n\
    \        while(temp>0){\n            if(temp%10==0){\n                flag = true;\n\
    \                break;\n            }\n            if(temp%2==0){\n         \
    \       flag = true;\n                break;\n            }\n            temp\
    \ = temp/10;\n        }\n        if(flag==false){\n            v.push_back(x[i]);\n\
    \        }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> v;\n  for(int i=0;i<x.size();i++){\n\
    \    long num = x[i];\n    bool isEvenDigit=false;\n    while(num>0){\n      if((num%10)%2==0){\n\
    \        isEvenDigit=true;\n        break;\n      }\n      num=num/10;\n    }\n\
    \    if(!isEvenDigit){\n      v.push_back(x[i]);\n    }\n  }\n  std::sort(v.begin(),v.end());\n\
    \  return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if(x.size()==0)\
    \ return res;\n    for(auto i:x){\n        long temp=i;\n        bool flag=true;\n\
    \        while(temp>0){\n            if(temp%10%2==0){\n                flag=false;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag) res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> uniqueDigitsVector;\n\
    \tstd::string tempStr;\n\tfor (int index = 0; index < x.size(); index++) {\n\t\
    \tbool hasEvenNumber = false;\n\t\ttempStr = std::to_string(x[index]);\n\t\tfor\
    \ (int strIndex = 0; strIndex < tempStr.length(); strIndex++) {\n\t\t\tif (int(tempStr[strIndex])\
    \ % 2 == 0) {\n\t\t\t\thasEvenNumber = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t\tif (!hasEvenNumber) {\n\t\t\tuniqueDigitsVector.push_back(x[index]);\n\t\t\
    }\n\t}\n\tsort(uniqueDigitsVector.begin(), uniqueDigitsVector.end());\n\treturn\
    \ uniqueDigitsVector;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    std::vector<long>\
    \ s;\n    for(int i=0;i<x.size();i++)\n    {\n        int flag=0;\n        int\
    \ temp=x[i];\n        while(temp!=0)\n        {\n            int rem=temp%10;\n\
    \            if(rem%2==0)\n            {\n                flag=1;\n          \
    \      break;\n            }\n            temp=temp/10;\n        }\n        if(flag==0)\n\
    \        {\n            s.push_back(x[i]);\n        }\n    }\n    std::sort(s.begin(),s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::vector<int>\
    \ check(10, 1);\n    int a,i;\n    bool flag = false;\n    for(i=0;i<x.size();i++){\n\
    \        flag = false;\n        while(x[i]!=0){\n            a = x[i]%10;\n  \
    \          if(check[a]==0){\n                flag = true;\n                break;\n\
    \            }\n            x[i] = x[i]/10;\n        }\n        if(flag==false){\n\
    \            ans.push_back(x[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2tx9l6qr: /tmp/tmp2tx9l6qr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ud;\n    for(auto\
    \ i:x){\n        bool isGood=true;\n        while(i>0){\n            if(i%2==0){\n\
    \                isGood=false;\n                break;\n            }\n      \
    \      i/=10;\n        }\n        if(isGood) ud.push_back(i);\n    }\n    return\
    \ ud;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpagjsrtkh: /tmp/tmpagjsrtkh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::vector<long>\
    \ ed;\n    for(int i=0;i<x.size();i++){\n        int t1=x[i];\n        int t2=t1;\n\
    \        int flag=0;\n        while(t1>0){\n            int x1=t1%10;\n      \
    \      if(x1%2==0){\n                flag=1;\n                break;\n       \
    \     }\n            t1=t1/10;\n        }\n        if(flag==0){\n            ans.push_back(t2);\n\
    \        }\n    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093365
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(),\
    \ x.end());\n    for (auto a: x) {\n        long n = a;\n        while (n != 0)\
    \ {\n            int m = n % 10;\n            if (m % 2 == 0) {\n            \
    \    break;\n            }\n            n /= 10;\n        }\n        if (n ==\
    \ 0) result.push_back(a);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool no_even\
    \ = true;\n        while (num > 0) {\n            long d = num % 10;\n       \
    \     if (d % 2 == 0) {\n                no_even = false;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if (no_even) {\n  \
    \          result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tauto temp = x;\n\tstd::vector<long>\
    \ unique_arr;\n\t// Checking for each number whether it has even digit or not.\n\
    \tfor(int i = 0; i < temp.size(); i++) {\n\t\tstd::vector<int> digits;\n\t\tint\
    \ p = temp[i];\n\t\t// Extracting digits from the number.\n\t\twhile(p > 0) {\n\
    \t\t\tdigits.push_back(p % 10);\n\t\t\tp /= 10;\n\t\t}\n\t\tbool flag = true;\n\
    \t\t// Checking whether it has even digit or not.\n\t\tfor(int j = 0; j < digits.size();\
    \ j++) {\n\t\t\tif(digits[j] % 2 == 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\t// If it has only odd digits then it is pushed into the vector.\n\
    \t\tif(flag) {\n\t\t\tunique_arr.push_back(temp[i]);\n\t\t}\n\t}\n\t// Sorting\
    \ the vector in increasing order.\n\tstd::sort(unique_arr.begin(), unique_arr.end());\n\
    \treturn unique_arr;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    bool has_even\
    \ = false;\n    for (int num : x) {\n        has_even = false;\n        for (char\
    \ c : std::to_string(num)) {\n            if ((c - '0') % 2 == 0) {\n        \
    \        has_even = true;\n                break;\n            }\n        }\n\
    \        if (!has_even) {\n            res.push_back(num);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> ans;\n  // Your code\
    \ goes here\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdfjnb3dx: /tmp/tmpdfjnb3dx.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093367
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> v;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tint digit=x[i];\n\t\tint flag=0;\n\t\twhile(digit>0){\n\t\t\tint temp=digit%10;\n\
    \t\t\tif(temp%2==0){\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdigit=digit/10;\n\
    \t\t}\n\t\tif(flag==0){\n\t\t\tv.push_back(x[i]);\n\t\t}\n\t}\n\tsort(v.begin(),v.end());\n\
    \treturn v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093365
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        long k=i;\n        int flag=0;\n        while(k>0){\n       \
    \     if(k%10==0 || k%10==2 || k%10==4 || k%10==6 || k%10==8){\n             \
    \   flag=1;\n                break;\n            }\n            k/=10;\n     \
    \   }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for(long\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool check = false;\n\
    \        while(num!=0){\n            long rem = num%10;\n            if(rem%2==0){\n\
    \                check = true;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(!check){\n            y.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(y.begin(),y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    int s\
    \ = x.size();\n    bool isEven = false;\n    for(int i = 0; i < s; i++) {\n  \
    \      int num = x[i];\n        int n = 0;\n        while(num) {\n           \
    \ n = num % 10;\n            if(n % 2 == 0) {\n                isEven = true;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if(!isEven) {\n            ans.push_back(x[i]);\n        }\n        isEven\
    \ = false;\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Check if the size of the vector is\
    \ 0.\n\tif(x.size() == 0) {\n\t\treturn x;\n\t}\n\t// Create an empty vector to\
    \ store all the numbers without any even digits.\n\tstd::vector<long> odd_vector;\n\
    \t// Loop over each element of the vector.\n\tfor(int i = 0; i < x.size(); i++)\
    \ {\n\t\t// Convert the number to string.\n\t\tstd::string string_element = std::to_string(x[i]);\n\
    \t\t// Check if there is any even digit in the number or not.\n\t\tint flag =\
    \ 0;\n\t\tfor(int j = 0; j < string_element.length(); j++) {\n\t\t\tint digit\
    \ = string_element[j] - '0';\n\t\t\tif(digit % 2 == 0) {\n\t\t\t\tflag = 1;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If the digit is odd then push the element\
    \ to the odd_vector.\n\t\tif(flag == 0) {\n\t\t\todd_vector.push_back(x[i]);\n\
    \t\t}\n\t}\n\t// Sort the vector and return the vector.\n\tstd::sort(odd_vector.begin(),\
    \ odd_vector.end());\n\treturn odd_vector;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto it : x) {\n        int flag = 0;\n        while (it) {\n            int\
    \ rem = it % 10;\n            if (rem % 2 == 0) {\n                flag = 1;\n\
    \                break;\n            }\n            it /= 10;\n        }\n   \
    \     if (flag == 0)\n            result.push_back(it);\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxlwl6bwq: /tmp/tmpxlwl6bwq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093367
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    std::vector<long>\
    \ v1;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n\
    \    std::vector<long>::iterator it2;\n    for(it = x.begin(); it != x.end();\
    \ it++)\n    {\n        if(*it < 10)\n        {\n            v.push_back(*it);\n\
    \        }\n        else\n        {\n            long n = *it;\n            while(n\
    \ != 0)\n            {\n                long rem = n % 10;\n                if(rem\
    \ % 2 == 0)\n                {\n                    break;\n                }\n\
    \                n = n / 10;\n            }\n            if(n == 0)\n        \
    \    {\n                v.push_back(*it);\n            }\n        }\n    }\n \
    \   if(v.size() == 0)\n    {\n        return v;\n    }\n    else\n    {\n    \
    \    for(it1 = v.begin(); it1 != v.end(); it1++)\n        {\n            for(it2\
    \ = it1 + 1; it2 != v.end(); it2++)\n            {\n                if(*it1 >\
    \ *it2)\n                {\n                    long t = *it1;\n             \
    \       *it1 = *it2;\n                    *it2 = t;\n                }\n     \
    \       }\n        }\n        return v;\n    }\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // FILL IN THE CODE\n    return x;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc6b6pc9c: /tmp/tmpc6b6pc9c.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> sorted;\n    std::sort(x.begin(),\
    \ x.end());\n    int odd_flag = 0;\n    for(int i = 0; i < x.size(); i++) {\n\
    \        while(x[i] > 0) {\n            if((x[i] % 10) % 2 == 0) {\n         \
    \       odd_flag = 1;\n                break;\n            }\n            x[i]\
    \ /= 10;\n        }\n        if(odd_flag == 0) {\n            sorted.push_back(x[i]);\n\
    \        }\n        odd_flag = 0;\n    }\n    return sorted;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpq398ofu6: /tmp/tmpq398ofu6.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093367
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (auto\
    \ i = x.begin(); i != x.end(); i++) {\n    long temp = *i;\n    bool flag = true;\n\
    \    while (temp != 0) {\n      int digit = temp % 10;\n      if (digit % 2 ==\
    \ 0) {\n        flag = false;\n        break;\n      }\n      temp /= 10;\n  \
    \  }\n    if (flag) {\n      result.push_back(*i);\n    }\n  }\n  std::sort(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    int n = x.size();\n    std::vector<long>\
    \ result;\n    for(int i = 0; i < n; i++) {\n        long val = x[i];\n      \
    \  int check = 0;\n        while(val) {\n            int rem = val % 10;\n   \
    \         if(rem % 2 == 0) {\n                check = 1;\n                break;\n\
    \            }\n            val /= 10;\n        }\n        if(check == 0) {\n\
    \            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    std::sort(x.begin(), x.end());\n    for(auto i : x) {\n        int\
    \ flag = 0;\n        int temp = i;\n        while(temp) {\n            if(temp\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            temp /= 10;\n        }\n        if(flag == 0) {\n           \
    \ res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> unique_digits;\n\
    \    for (auto i : x) {\n        int count = 0;\n        while (i) {\n       \
    \     if (i % 2 == 0) {\n                count++;\n            }\n           \
    \ i /= 10;\n        }\n        if (count == 0) {\n            unique_digits.push_back(i);\n\
    \        }\n    }\n    std::sort(unique_digits.begin(), unique_digits.end());\n\
    \    return unique_digits;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0zqgey_l: /tmp/tmp0zqgey_l.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> even;\n    for(long\
    \ i=0;i<x.size();i++){\n        long y=x[i];\n        while(y>0){\n          \
    \  if(y%2==0){\n                even.push_back(x[i]);\n                break;\n\
    \            }\n            y=y/10;\n        }\n    }\n    std::vector<long> ans;\n\
    \    std::sort(even.begin(),even.end());\n    for(long i=0;i<x.size();i++){\n\
    \        long j=0;\n        while(j<even.size()){\n            if(x[i]==even[j]){\n\
    \                break;\n            }\n            j++;\n        }\n        if(j==even.size()){\n\
    \            ans.push_back(x[i]);\n        }\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> out;\n    std::set<long>\
    \ myset;\n    for(auto elem : x){\n        long tmp = elem;\n        while(tmp\
    \ > 0){\n            long last = tmp % 10;\n            if(last % 2 == 0){\n \
    \               myset.insert(elem);\n                break;\n            }\n \
    \           tmp /= 10;\n        }\n    }\n    for(auto elem : x){\n        if(myset.find(elem)\
    \ == myset.end()){\n            out.push_back(elem);\n        }\n    }\n    std::sort(out.begin(),\
    \ out.end());\n    return out;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ const& el: x) {\n        if(std::to_string(el).find_first_of(\"02468\") == std::string::npos)\
    \ {\n            res.push_back(el);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> arr;\n  for(int i=0;i<x.size();i++){\n\
    \    long temp = x[i];\n    bool flag = true;\n    while(temp){\n      if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n        flag = false;\n\
    \        break;\n      }\n      temp = temp/10;\n    }\n    if(flag){\n      arr.push_back(x[i]);\n\
    \    }\n  }\n  std::sort(arr.begin(),arr.end());\n  return arr;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> oddDigits;\n\tlong\
    \ remainder = 0;\n\tlong count = 0;\n\tfor (long i = 0; i < x.size(); i++) {\n\
    \t\tlong number = x[i];\n\t\twhile (number != 0) {\n\t\t\tremainder = number %\
    \ 10;\n\t\t\tif (remainder % 2 == 0) {\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t\tnumber = number / 10;\n\t\t}\n\t\tif (count == 0) {\n\t\t\toddDigits.push_back(x[i]);\n\
    \t\t}\n\t\tcount = 0;\n\t}\n\tsort(oddDigits.begin(), oddDigits.end());\n\treturn\
    \ oddDigits;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    std::vector<long>\
    \ ret;\n    for(int i = 0; i < x.size(); i++){\n        int num = x[i];\n    \
    \    while(num>0){\n            if(num%2==0){\n                num = -1;\n   \
    \             break;\n            }\n            num/=10;\n        }\n       \
    \ if(num!=-1){\n            ret.push_back(x[i]);\n        }\n    }\n    sort(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n  std::sort(x.begin(),\
    \ x.end());\n  for (int i = 0; i < x.size(); i++) {\n    bool is_unique = true;\n\
    \    long temp = x[i];\n    while (temp != 0) {\n      int digit = temp % 10;\n\
    \      if (digit % 2 == 0) {\n        is_unique = false;\n        break;\n   \
    \   }\n      temp /= 10;\n    }\n    if (is_unique) {\n      res.push_back(x[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // your code here\n  std::vector<long>\
    \ ans;\n  for(int i=0;i<x.size();i++){\n    int flag=0;\n    long temp=x[i];\n\
    \    while(temp!=0){\n      if(temp%10%2==0){\n        flag=1;\n        break;\n\
    \      }\n      temp/=10;\n    }\n    if(flag==0){\n      ans.push_back(x[i]);\n\
    \    }\n  }\n  std::sort(ans.begin(),ans.end());\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    int n\
    \ = x.size();\n    for(int i = 0; i < n; i++) {\n        long num = x[i];\n  \
    \      bool even = false;\n        while(num > 0) {\n            int rem = num\
    \ % 10;\n            if(rem % 2 == 0) {\n                even = true;\n      \
    \          break;\n            }\n            num /= 10;\n        }\n        if(!even)\
    \ {\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ v;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        long n=x[i];\n\
    \        while(n>0){\n            if(n%10==0||n%10==2||n%10==4||n%10==6||n%10==8){\n\
    \                flag=1;\n                break;\n            }\n            n=n/10;\n\
    \        }\n        if(flag==0){\n            v.push_back(x[i]);\n        }\n\
    \    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093365
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(auto\
    \ p : x) {\n        long temp = p;\n        int flag = 0;\n        while(temp\
    \ > 0) {\n            if(temp % 10 % 2 == 0)\n                flag = 1;\n    \
    \        temp /= 10;\n        }\n        if(flag == 0)\n            ans.push_back(p);\n\
    \    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> uDigits;\n    //\
    \ Your code goes here\n    int n = x.size();\n    for(int i = 0; i < n; i++){\n\
    \        if(x[i] < 0){\n            assert(false);\n        }\n        int flag\
    \ = 0;\n        long num = x[i];\n        while(num > 0){\n            int dig\
    \ = num % 10;\n            if(dig % 2 == 0){\n                flag = 1;\n    \
    \            break;\n            }\n            num /= 10;\n        }\n      \
    \  if(flag == 0){\n            uDigits.push_back(x[i]);\n        }\n    }\n  \
    \  std::sort(uDigits.begin(), uDigits.end());\n    return uDigits;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // Your code here\n  std::vector<long>\
    \ v;\n  for(auto k : x)\n  {\n    long m = k;\n    int flag = 0;\n    while(m)\n\
    \    {\n      int n = m%10;\n      if(n%2 == 0)\n      {\n        flag = 1;\n\
    \        break;\n      }\n      m = m/10;\n    }\n    if(flag == 0)\n      v.push_back(k);\n\
    \  }\n  std::sort(v.begin(), v.end());\n  return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> vec;\n  std::vector<int>\
    \ vec(x.size());\n  int len = x.size();\n  int max = *max_element(x.begin(), x.end());\n\
    \  std::vector<int> digits(len);\n  while(max){\n      digits[len++] = max%10;\n\
    \      max/=10;\n  }\n  for(int i=0; i<len; i++){\n    if(digits[i]%2 == 0){\n\
    \      vec.push_back(x[i]);\n    }\n  }\n  sort(vec.begin(), vec.end());\n  return\
    \ vec;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgdwv4u4v.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgdwv4u4v.cpp:13:20: error: conflicting declaration \u2018\
    std::vector<int> vec\u2019\n   13 |   std::vector<int> vec(x.size());\n      |\
    \                    ^~~\n/tmp/tmpgdwv4u4v.cpp:12:21: note: previous declaration\
    \ as \u2018std::vector<long int> vec\u2019\n   12 |   std::vector<long> vec;\n\
    \      |                     ^~~\n"
  stdout: ''
  timestamp: 1660093366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // your code goes here\n  std::vector<long>\
    \ ret;\n  if(x.size()==0)\n    return ret;\n  std::sort(x.begin(),x.end());\n\
    \  std::unordered_set<long> ud;\n  for(int i=0;i<x.size();i++){\n    int flag=0;\n\
    \    long tmp=x[i];\n    while(tmp>0){\n      if(tmp%2==0){\n        flag=1;\n\
    \        break;\n      }\n      tmp/=10;\n    }\n    if(flag==0)\n      ud.insert(x[i]);\n\
    \  }\n  for(auto i:ud)\n    ret.push_back(i);\n  return ret;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpawz1cc84: /tmp/tmpawz1cc84.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093367
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::string\
    \ s;\n    std::stringstream ss;\n    for(int i=0;i<x.size();i++){\n        bool\
    \ only_odd=true;\n        ss<<x[i];\n        ss>>s;\n        ss.clear();\n   \
    \     for(int j=0;j<s.size();j++){\n            if(s[j]=='0'||s[j]=='2'||s[j]=='4'||s[j]=='6'||s[j]=='8'){\n\
    \                only_odd=false;\n                break;\n            }\n    \
    \    }\n        if(only_odd){\n            result.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(result.begin(),result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int temp = i;\n        int count = 0;\n        while(temp>0){\n\
    \            int val = temp%10;\n            if(val%2==0){\n                count++;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(count==0){\n            res.push_back(i);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // throw std::invalid_argument(\"\
    Waiting to be implemented.\");\n    std::vector<long> vec;\n    for(auto i : x)\
    \ {\n        bool flag = true;\n        for(long j = i; j > 0; j /= 10) {\n  \
    \          if((j % 10) % 2 == 0) {\n                flag = false;\n          \
    \      break;\n            }\n        }\n        if(flag) vec.push_back(i);\n\
    \    }\n    std::sort(vec.begin(), vec.end());\n    return vec;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    int n = x.size();\n    std::vector<long>\
    \ v;\n    for(int i = 0; i < n; i++) {\n        long t = x[i];\n        int f\
    \ = 0;\n        while(t > 0) {\n            int d = t % 10;\n            if(d\
    \ % 2 == 0) {\n                f = 1;\n                break;\n            }\n\
    \            t /= 10;\n        }\n        if(f == 0) {\n            v.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Your code here!\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjz5khhok: /tmp/tmpjz5khhok.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> ans;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tint temp = x[i];\n\t\tbool flag = 1;\n\t\twhile(temp){\n\t\t\tif(temp%10%2==0){\n\
    \t\t\t\tflag = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp/=10;\n\t\t}\n\t\tif(flag)\n\
    \t\t\tans.push_back(x[i]);\n\t}\n\tsort(ans.begin(),ans.end());\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> output;\n  for (auto\
    \ num : x) {\n    auto n = num;\n    bool has_even_digit = false;\n    while (n)\
    \ {\n      int digit = n % 10;\n      if (digit % 2 == 0) {\n        has_even_digit\
    \ = true;\n        break;\n      }\n      n /= 10;\n    }\n    if (!has_even_digit)\
    \ {\n      output.push_back(num);\n    }\n  }\n  std::sort(output.begin(), output.end());\n\
    \  return output;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long>ans;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tint f=0;\n\t\twhile(x[i]>0){\n\t\t\tint l=x[i]%10;\n\t\t\tif(l%2==0){\n\t\t\
    \t\tf=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i]/=10;\n\t\t}\n\t\tif(f==0){\n\t\t\
    \tans.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(ans.begin(),ans.end());\n\treturn\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp85g_evq9: /tmp/tmp85g_evq9.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool unique =\
    \ true;\n        while(num) {\n            if(num % 2 == 0) {\n              \
    \  unique = false;\n                break;\n            }\n            num /=\
    \ 10;\n        }\n        if(unique) res.push_back(x[i]);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> v;\n  for(int i=0;i<x.size();i++){\n\
    \      int flag=0;\n      while(x[i]>0){\n          if(x[i]%10%2==0){\n      \
    \        flag=1;\n              break;\n          }\n          x[i]/=10;\n   \
    \   }\n      if(flag==0){\n          v.push_back(x[i]);\n      }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsfl7ixdr: /tmp/tmpsfl7ixdr.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long digit : x) {\n        long t = digit;\n        bool is_unique = true;\n\
    \        while (t > 0) {\n            if (t % 2 == 0) {\n                is_unique\
    \ = false;\n                break;\n            }\n            t /= 10;\n    \
    \    }\n        if (is_unique) {\n            result.push_back(digit);\n     \
    \   }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (auto\
    \ it = x.begin(); it != x.end(); it++) {\n\t\tbool unique = true;\n\t\tlong number\
    \ = *it;\n\t\twhile (number > 0) {\n\t\t\tif ((number % 10) % 2 == 0) {\n\t\t\t\
    \tunique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnumber /= 10;\n\t\t}\n\t\tif\
    \ (unique) {\n\t\t\tres.push_back(*it);\n\t\t}\n\t}\n\tstd::sort(res.begin(),\
    \ res.end());\n\treturn res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    int\
    \ i = 0;\n    while (i < x.size()) {\n        if (x[i] < 0) {\n            x.erase(x.begin()\
    \ + i);\n        } else {\n            i++;\n        }\n    }\n    for (int i\
    \ = 0; i < x.size(); i++) {\n        int temp = x[i];\n        int cnt = 0;\n\
    \        while (temp > 0) {\n            int remainder = temp % 10;\n        \
    \    if (remainder % 2 == 0) {\n                cnt++;\n            }\n      \
    \      temp /= 10;\n        }\n        if (cnt == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here\n    std::vector<long>\
    \ arr;\n    for(int i=0;i<x.size();i++){\n        std::vector<int> digits;\n \
    \       while(x[i]>0){\n            int t = x[i]%10;\n            digits.push_back(t);\n\
    \            x[i] = x[i]/10;\n        }\n        int k=0;\n        for(int j=0;j<digits.size();j++){\n\
    \            if(digits[j]%2==0){\n                k=1;\n                break;\n\
    \            }\n        }\n        if(k==0){\n            arr.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(arr.begin(),arr.end());\n    return arr;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpzgv_0meg: /tmp/tmpzgv_0meg.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> ans;\n\tfor(auto i\
    \ : x) {\n\t\tbool flag = false;\n\t\twhile(i) {\n\t\t\tif(i % 2 == 0) {\n\t\t\
    \t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti /= 10;\n\t\t}\n\t\tif(!flag)\
    \ ans.push_back(i);\n\t}\n\tsort(ans.begin(), ans.end());\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplcyqowk7: /tmp/tmplcyqowk7.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n   std::vector<long> res;\n   for(long&\
    \ i : x) {\n       std::string s = std::to_string(i);\n       bool flag = true;\n\
    \       for(char& c : s) {\n           if(c % 2 == 0) {\n               flag =\
    \ false;\n               break;\n           }\n       }\n       if(flag) res.push_back(i);\n\
    \   }\n   std::sort(res.begin(), res.end());\n   return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> evenDigits({0, 2,\
    \ 4, 6, 8});\n    std::vector<long> result;\n    bool hasEvenDigit = false;\n\
    \    // TODO: Write code here\n    for (long i = 0; i < x.size(); i++) {\n   \
    \     long temp = x[i];\n        hasEvenDigit = false;\n        while (temp >\
    \ 0) {\n            int digit = temp % 10;\n            if (std::find(evenDigits.begin(),\
    \ evenDigits.end(), digit) != evenDigits.end()) {\n                hasEvenDigit\
    \ = true;\n                break;\n            }\n            temp /= 10;\n  \
    \      }\n        if (!hasEvenDigit) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> out;\n    for (auto\
    \ i : x) {\n        int s = i;\n        bool flag = true;\n        while (s !=\
    \ 0) {\n            if ((s % 10) % 2 == 0) {\n                flag = false;\n\
    \                break;\n            }\n            s /= 10;\n        }\n    \
    \    if (flag) out.push_back(i);\n    }\n    std::sort(out.begin(), out.end());\n\
    \    return out;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // function prototype to check even\
    \ digit\n    bool even(long);\n    std::vector<long> sol;\n    for(int i=0;i<x.size();i++){\n\
    \        // check if number contains any even digit\n        if(!even(x[i])){\n\
    \            sol.push_back(x[i]);\n        }\n    }\n    //sort the array\n  \
    \  std::sort(sol.begin(),sol.end());\n    return sol;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: '/usr/bin/ld: /tmp/cc0neXtp.o: in function `unique_digits(std::vector<long,
    std::allocator<long> >)'':

    tmpthvb7kv4.cpp:(.text+0x6f): undefined reference to `even(long)''

    collect2: error: ld returned 1 exit status

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> a;\n    bool p;\n\
    \    for(auto i:x){\n        p=true;\n        while(i>0){\n            if(i%2==0){\n\
    \                p=false;\n                break;\n            }\n           \
    \ i/=10;\n        }\n        if(p)\n            a.push_back(i);\n    }\n    std::sort(a.begin(),a.end());\n\
    \    return a;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpw8r2lcb1: /tmp/tmpw8r2lcb1.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> ret;\n  for (long\
    \ elem : x) {\n    std::string s = std::to_string(elem);\n    bool insert = true;\n\
    \    for (char c : s) {\n      if (c % 2 == 0) {\n        insert = false;\n  \
    \      break;\n      }\n    }\n    if (insert) {\n      ret.push_back(elem);\n\
    \    }\n  }\n  std::sort(ret.begin(), ret.end());\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto& element : x) {\n        std::string current = std::to_string(element);\n\
    \        std::sort(current.begin(), current.end());\n        auto last = std::unique(current.begin(),\
    \ current.end());\n        current.erase(last, current.end());\n        if (current.find(\"\
    2\") == std::string::npos &&\n            current.find(\"4\") == std::string::npos\
    \ &&\n            current.find(\"6\") == std::string::npos &&\n            current.find(\"\
    8\") == std::string::npos) {\n            result.push_back(element);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpp8koqt6z: /tmp/tmpp8koqt6z.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> finalVect;\n  std::vector<long>::iterator\
    \ it = x.begin();\n  int i = 0;\n  while(it != x.end()) {\n    long num = *it;\n\
    \    int numDigits = 0;\n    while(num > 0) {\n      int rem = num % 10;\n   \
    \   if(rem % 2 == 0) {\n        x.erase(x.begin() + i);\n        numDigits++;\n\
    \        break;\n      }\n      num = num / 10;\n    }\n    if(numDigits == 0)\
    \ {\n      i++;\n      it++;\n    }\n  }\n  std::sort(x.begin(), x.end());\n \
    \ return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> evens{0, 2, 4, 6,\
    \ 8};\n    std::vector<long> sorted_x;\n    for (const auto& element : x) {\n\
    \        std::vector<long> digits;\n        long digit_copy = element;\n     \
    \   while (digit_copy > 0) {\n            long digit = digit_copy % 10;\n    \
    \        digits.push_back(digit);\n            digit_copy /= 10;\n        }\n\
    \        std::reverse(digits.begin(), digits.end());\n        if (std::find_first_of(digits.begin(),\
    \ digits.end(), evens.begin(), evens.end()) == digits.end()) {\n            sorted_x.push_back(element);\n\
    \        }\n    }\n    std::sort(sorted_x.begin(), sorted_x.end());\n    return\
    \ sorted_x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long>v;\n\tfor(int i=0;i<x.size();i++)\n\
    \t{\n\t\tint r=0;\n\t\tint n=x[i];\n\t\twhile(n>0)\n\t\t{\n\t\t\tr=n%10;\n\t\t\
    \tif(r%2==0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn=n/10;\n\t\t}\n\t\tif(n==0)\n\
    \t\t{\n\t\t\tv.push_back(x[i]);\n\t\t}\n\t}\n\tsort(v.begin(),v.end());\n\treturn\
    \ v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    int n\
    \ = x.size();\n    for(int i = 0; i < n; i++) {\n        int num = x[i];\n   \
    \     while(num) {\n            int k = num % 10;\n            if(k % 2 == 0)\
    \ {\n                num = -1;\n                break;\n            }\n      \
    \      num /= 10;\n        }\n        if(num != -1) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for(long\
    \ i=0;i<x.size();i++){\n        long num=x[i];\n        bool found=false;\n  \
    \      while(num>0){\n            long digit=num%10;\n            if(digit%2==0){\n\
    \                found=true;\n                break;\n            }\n        \
    \    num=num/10;\n        }\n        if(!found){\n            y.push_back(x[i]);\n\
    \        }\n    }\n    sort(y.begin(),y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ y;\n    // x = std::vector<long>({(long)15, (long)33, (long)1422, (long)1});\n\
    \    for(int i=0;i<x.size();i++){\n        int r,q,flag=0;\n        r = x[i];\n\
    \        while(r>0){\n            q = r%10;\n            if(q%2==0){\n       \
    \         flag = 1;\n                break;\n            }\n            r = r/10;\n\
    \        }\n        if(flag==0){\n            y.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(y.begin(),y.end());\n    return y;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> digits;\n    bool\
    \ flag = false;\n    for(int i = 0; i < x.size(); i++) {\n        long number\
    \ = x[i];\n        while(number != 0) {\n            if((number % 10) % 2 == 0)\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \         number /= 10;\n        }\n        if(!flag) {\n            digits.push_back(x[i]);\n\
    \        }\n        flag = false;\n    }\n    std::sort(digits.begin(), digits.end());\n\
    \    return digits;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    // To\
    \ print results to the standard output you can use cout\n    // Example: cout\
    \ << \"Hello world!\";\n    std::vector<long> res;\n    for(auto i:x){\n     \
    \   long num = i;\n        bool flag = true;\n        while(num){\n          \
    \  if(num%10%2==0){\n                flag = false;\n                break;\n \
    \           }\n            num/=10;\n        }\n        if(flag)\n           \
    \ res.push_back(i);\n    }\n    sort(res.begin(),res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(auto\
    \ i:x){\n        int f = 1;\n        while(i){\n            if(i%2==0){\n    \
    \            f = 0;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(f)\n            v.push_back(i);\n    }\n    sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp8tbqjsbt: /tmp/tmp8tbqjsbt.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// YOUR CODE GOES HERE\n\tstd::vector<long>\
    \ ans;\n\tfor(auto& xs : x) {\n\t\tlong temp = xs;\n\t\tbool flag = true;\n\t\t\
    while(temp > 0) {\n\t\t\tif(temp % 10 == 0 || temp % 10 == 2 || temp % 10 == 4\
    \ || temp % 10 == 6 || temp % 10 == 8) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif(flag) {\n\t\t\tans.push_back(xs);\n\t\
    \t}\n\t}\n\tsort(ans.begin(), ans.end());\n\treturn ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        while(x[i]>0){\n\
    \            if(x[i]%10%2==0){\n                flag=1;\n                break;\n\
    \            }\n            x[i]/=10;\n        }\n        if(flag==0){\n     \
    \       result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpaxu6q56f: /tmp/tmpaxu6q56f.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(),\
    \ x.end());\n    std::copy_if(x.begin(), x.end(), std::back_inserter(ans), [](long\
    \ a) {\n        while (a > 0) {\n            if (a % 2 == 0) return false;\n \
    \           a /= 10;\n        }\n        return true;\n    });\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if(x.size()==0) return x;\n    std::vector<long>\
    \ res;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        while(x[i]>0){\n\
    \            if(x[i]%2==0){\n                flag=1;\n                break;\n\
    \            }\n            x[i]/=10;\n        }\n        if(flag==0) res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9gcd6r98: /tmp/tmp9gcd6r98.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    //\
    \ YOUR CODE GOES HERE\n    // Don't forget to return the result.\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpllieaxj0: /tmp/tmpllieaxj0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        while(x[i]>0){\n        \
    \    if(x[i]%10%2==0){\n                flag=1;\n                break;\n    \
    \        }\n            x[i]/=10;\n        }\n        if(flag==0){\n         \
    \   y.push_back(x[i]);\n        }\n    }\n    sort(y.begin(),y.end());\n    return\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpo77l1qle: /tmp/tmpo77l1qle.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(),\
    \ x.end());\n    int flag = 0;\n    for(int i = 0; i < x.size(); i++) {\n    \
    \    long num = x[i];\n        while(num > 0) {\n            int rem = num % 10;\n\
    \            if(rem % 2 == 0) {\n                flag = 1;\n                break;\n\
    \            }\n            num = num / 10;\n        }\n        if(flag == 0)\
    \ {\n            res.push_back(x[i]);\n        }\n        flag = 0;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Your code here.\n\tstd::vector<long>\
    \ temp;\n\tbool b;\n\tlong long int t;\n\tlong int j;\n\tfor(long int i=0;i<x.size();i++)\n\
    \t{\n\t\tt=x[i];\n\t\tb=true;\n\t\twhile(t>0)\n\t\t{\n\t\t\tj=t%10;\n\t\t\tif(j%2==0)\n\
    \t\t\t{\n\t\t\t\tb=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tt=t/10;\n\t\t}\n\t\t\
    if(b)\n\t\t{\n\t\t\ttemp.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),temp.end());\n\
    \treturn temp;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long>::iterator it;\n\t\
    std::vector<long> v2;\n\tfor(it=x.begin();it!=x.end();it++)\n\t{\n\t\tlong num=*it;\n\
    \t\twhile(num!=0)\n\t\t{\n\t\t\tlong n=num%10;\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\
    \t\t// v2.push_back(*it);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum=num/10;\n\t\t}\n\
    \t\tif(num==0)\n\t\t\tv2.push_back(*it);\n\t}\n\tstd::sort(v2.begin(),v2.end());\n\
    \treturn v2;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(long\
    \ i=0;i<x.size();i++){\n        long j=x[i];\n        while(j>0){\n          \
    \  if(j%2==0){\n                break;\n            }\n            j=j/10;\n \
    \       }\n        if(j==0){\n            ans.push_back(x[i]);\n        }\n  \
    \  }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (long\
    \ i = 0; i < x.size(); i++) {\n\t\tstd::string s = std::to_string(x[i]);\n\t\t\
    int flag = 0;\n\t\tfor (int j = 0; j < s.length(); j++) {\n\t\t\tif ((s[j] - '0')\
    \ % 2 == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag\
    \ == 0) {\n\t\t\tres.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end());\n\
    \treturn res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // your code here\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6lpo1j4l: /tmp/tmp6lpo1j4l.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> result;\n\tfor (long\
    \ val : x) {\n\t\tint evens = 0;\n\t\twhile (val) {\n\t\t\tif ((val % 10) % 2\
    \ == 0) {\n\t\t\t\tevens++;\n\t\t\t}\n\t\t\tval /= 10;\n\t\t}\n\t\tif (evens ==\
    \ 0) {\n\t\t\tresult.push_back(val);\n\t\t}\n\t}\n\tstd::sort(result.begin(),\
    \ result.end());\n\treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpqt_lsf5z: /tmp/tmpqt_lsf5z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    std::vector<long>\
    \ v;\n    std::sort(x.begin(), x.end());\n    for(int i=0; i<x.size(); i++){\n\
    \        long temp = x[i];\n        bool unique = true;\n        while(temp){\n\
    \            if(temp%2 == 0){\n                unique = false;\n             \
    \   break;\n            }\n            temp /= 10;\n        }\n        if(unique)\n\
    \            v.push_back(x[i]);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    bool\
    \ isUnique = true;\n    for (auto x_el : x) {\n        std::string x_string =\
    \ std::to_string(x_el);\n        for (auto x_el_char : x_string) {\n         \
    \   if ((x_el_char - '0') % 2 == 0) {\n                isUnique = false;\n   \
    \             break;\n            }\n        }\n        if (isUnique) {\n    \
    \        result.push_back(x_el);\n        }\n        isUnique = true;\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        int f =\
    \ 0;\n        while (num > 0) {\n            int y = num % 10;\n            if\
    \ (y % 2 == 0) {\n                f = 1;\n                break;\n           \
    \ }\n            num = num / 10;\n        }\n        if (f == 0) {\n         \
    \   result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> unique_digits_v;\n\
    \    for (auto i : x) {\n        auto is_unique = true;\n        for (auto j =\
    \ i; j > 0; j /= 10) {\n            if ((j % 10) % 2 == 0) {\n               \
    \ is_unique = false;\n                break;\n            }\n        }\n     \
    \   if (is_unique) {\n            unique_digits_v.push_back(i);\n        }\n \
    \   }\n    std::sort(unique_digits_v.begin(), unique_digits_v.end());\n    return\
    \ unique_digits_v;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (auto\
    \ v : x) {\n\t\tbool flag = false;\n\t\twhile (v) {\n\t\t\tint rem = v % 10;\n\
    \t\t\tif (rem % 2 == 0) {\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    \tv /= 10;\n\t\t}\n\t\tif (!flag)\n\t\t\tres.push_back(v);\n\t}\n\tsort(res.begin(),\
    \ res.end());\n\treturn res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1nq9sbgs: /tmp/tmp1nq9sbgs.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> result;\n\tbool flag;\n\
    \tfor(std::vector<long>::iterator it=x.begin(); it!=x.end(); ++it) {\n\t\tflag\
    \ = true;\n\t\twhile(*it) {\n\t\t\tif(!(*it%2)) {\n\t\t\t\tflag = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t\t*it /= 10;\n\t\t}\n\t\tif(flag) {\n\t\t\tresult.push_back(*it);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpqb7hiw7x: /tmp/tmpqb7hiw7x.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    long n = x.size();\n    std::vector<long>\
    \ y;\n    int digits[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    for(int i = 0; i <\
    \ n; i++) {\n        long number = x[i];\n        long digit = number % 10;\n\
    \        number /= 10;\n        int j = 0;\n        for(j = 0; j < 9; j++) {\n\
    \            if(digits[j] == digit) {\n                break;\n            }\n\
    \        }\n        if(j == 9) {\n            y.push_back(x[i]);\n        }\n\
    \        else {\n            while(number != 0) {\n                digit = number\
    \ % 10;\n                number /= 10;\n                for(j = 0; j < 9; j++)\
    \ {\n                    if(digits[j] == digit) {\n                        break;\n\
    \                    }\n                }\n                if(j != 9) {\n    \
    \                break;\n                }\n            }\n            if(number\
    \ == 0) {\n                y.push_back(x[i]);\n            }\n        }\n    }\n\
    \    std::sort(y.begin(), y.end());\n    return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0crh8802: /tmp/tmp0crh8802.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    bool isDigitUnique;\n\
    \    for(auto val : x) {\n        isDigitUnique = true;\n        while(val !=\
    \ 0) {\n            if(val % 2 == 0) {\n                isDigitUnique = false;\n\
    \                break;\n            }\n            val /= 10;\n        }\n  \
    \      if(isDigitUnique) {\n            res.push_back(val);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpo4f646_5: /tmp/tmpo4f646_5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// your code here\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpuek3ihze: /tmp/tmpuek3ihze.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (auto\
    \ e : x) {\n\t\tlong num = e;\n\t\tbool isUnique = true;\n\t\twhile (num) {\n\t\
    \t\tint cur = num % 10;\n\t\t\tif (cur % 2 == 0) {\n\t\t\t\tisUnique = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (isUnique) res.push_back(e);\n\
    \t}\n\tsort(res.begin(), res.end());\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\t\n\tfor(auto\
    \ item : x) {\n\t\tif(item < 10 && item > 0) {\n\t\t\tres.push_back(item);\n\t\
    \t}\n\t\telse {\n\t\t\tint lastDigit = item % 10;\n\t\t\tbool result = true;\n\
    \t\t\twhile(item > 0) {\n\t\t\t\titem = item / 10;\n\t\t\t\tint dig = item % 10;\n\
    \t\t\t\tif(dig % 2 == 0) {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\tif(result && lastDigit % 2 != 0) {\n\t\t\t\tres.push_back(item);\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort(res.begin(), res.end());\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7in_uztg: /tmp/tmp7in_uztg.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (long\
    \ i = 0; i < x.size(); i++) {\n\t\tlong temp = x[i];\n\t\tbool flag = true;\n\t\
    \twhile (temp) {\n\t\t\tif (temp % 2 == 0) {\n\t\t\t\tflag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif (flag) {\n\t\t\tres.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(res.begin(), res.end());\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093371
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  std::copy_if(x.begin(),\
    \ x.end(), std::back_inserter(result), [](long i) {\n    while (i) {\n      if\
    \ (i % 2 == 0) return false;\n      i /= 10;\n    }\n    return true;\n  });\n\
    \  std::sort(result.begin(), result.end());\n  return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // your code goes here\n  std::vector<long>\
    \ result;\n  for(std::vector<long>::iterator it=x.begin();it!=x.end();it++){\n\
    \      int check = 0;\n      int number = *it;\n      while(number>0){\n     \
    \     int digit = number%10;\n          if(digit%2==0){\n              check =\
    \ 1;\n              break;\n          }\n          number = number/10;\n     \
    \ }\n      if(check==0){\n          result.push_back(*it);\n      }\n  }\n  std::sort(result.begin(),result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    vector<long> vec;\n    vector<long>\
    \ vec_ans;\n    // do your work here\n    for(int i=0;i<x.size();i++){\n     \
    \   if(x[i] == 0){\n            continue;\n        }\n        while(x[i]!=0){\n\
    \            vec.push_back(x[i]%10);\n            x[i]/=10;\n        }\n     \
    \   int ans = 1;\n        for(int j=0;j<vec.size();j++){\n            if(vec[j]%2\
    \ == 0){\n                ans = 0;\n                break;\n            }\n  \
    \      }\n        if(ans == 1){\n            vec_ans.push_back(x[i]);\n      \
    \  }\n        vec.clear();\n    }\n    sort(vec_ans.begin(),vec_ans.end());\n\
    \    return vec_ans;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4x0ghfuu.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4x0ghfuu.cpp:12:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   12 |     vector<long> vec;\n      |     ^~~~~~\n/tmp/tmp4x0ghfuu.cpp:12:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4x0ghfuu.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4x0ghfuu.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp4x0ghfuu.cpp:12:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   12 |     vector<long>\
    \ vec;\n      |            ^~~~\n/tmp/tmp4x0ghfuu.cpp:13:12: error: expected primary-expression\
    \ before \u2018long\u2019\n   13 |     vector<long> vec_ans;\n      |        \
    \    ^~~~\n/tmp/tmp4x0ghfuu.cpp:20:13: error: \u2018vec\u2019 was not declared\
    \ in this scope\n   20 |             vec.push_back(x[i]%10);\n      |        \
    \     ^~~\n/tmp/tmp4x0ghfuu.cpp:24:23: error: \u2018vec\u2019 was not declared\
    \ in this scope\n   24 |         for(int j=0;j<vec.size();j++){\n      |     \
    \                  ^~~\n/tmp/tmp4x0ghfuu.cpp:31:13: error: \u2018vec_ans\u2019\
    \ was not declared in this scope\n   31 |             vec_ans.push_back(x[i]);\n\
    \      |             ^~~~~~~\n/tmp/tmp4x0ghfuu.cpp:33:9: error: \u2018vec\u2019\
    \ was n"
  stdout: ''
  timestamp: 1660093371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Write your code here.\n\t\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpo3fgxhcw: /tmp/tmpo3fgxhcw.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Your code here\n\tstd::vector<long>\
    \ result;\n\tstd::vector<long> even;\n\tfor (int i = 0; i < x.size(); i++) {\n\
    \t\tint count = 0;\n\t\tfor (int j = 0; j < x.size(); j++) {\n\t\t\tif (x[i] %\
    \ 10 == x[j] % 10) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) {\n\
    \t\t\tresult.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9qdey_3d: /tmp/tmp9qdey_3d.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if(x.size() == 0)\n        return\
    \ x;\n    std::vector<long>ret;\n    bool flag;\n    for(int i = 0; i < x.size();\
    \ i++){\n        flag = true;\n        while(x[i] != 0){\n            if(x[i]\
    \ % 2 == 0){\n                flag = false;\n                break;\n        \
    \    }\n            x[i] /= 10;\n        }\n        if(flag)\n            ret.push_back(x[i]);\n\
    \    }\n    sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpk8ny5utx: /tmp/tmpk8ny5utx.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    bool flag;\n\
    \    for(int i=0;i<x.size();i++){\n        flag = true;\n        while(x[i]!=0){\n\
    \            int rem = x[i]%10;\n            if(rem%2==0){\n                flag\
    \ = false;\n                break;\n            }\n            x[i]/=10;\n   \
    \     }\n        if(flag)\n            ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsf5uref9: /tmp/tmpsf5uref9.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here!\n    std::vector<long>\
    \ r;\n    std::vector<long> r2;\n    std::vector<long> r3;\n    std::vector<long>\
    \ r4;\n    for(int i = 0; i < x.size(); i++){\n      if(x[i] < 10){\n        r.push_back(x[i]);\n\
    \      }\n      else if(x[i] < 100){\n        if(x[i] % 2 == 1){\n          r.push_back(x[i]);\n\
    \        }\n      }\n      else if(x[i] < 1000){\n        if(x[i] % 2 == 1){\n\
    \          if((x[i] % 10) % 2 == 1){\n            r.push_back(x[i]);\n       \
    \   }\n        }\n      }\n      else if(x[i] < 10000){\n        if(x[i] % 2 ==\
    \ 1){\n          if((x[i] % 10) % 2 == 1){\n            if((x[i] / 10) % 2 ==\
    \ 1){\n              r.push_back(x[i]);\n            }\n          }\n        }\n\
    \      }\n      else if(x[i] < 100000){\n        if(x[i] % 2 == 1){\n        \
    \  if((x[i] % 10) % 2 == 1){\n            if((x[i] / 10) % 2 == 1){\n        \
    \      if((x[i] / 100) % 2 == 1){\n                r.push_back(x[i]);\n      \
    \        }\n            }\n          }\n        }\n      }\n      else if(x[i]\
    \ < 1000000){\n        if(x[i] % 2 == 1){\n          if((x[i] % 10) % 2 == 1){\n\
    \            if((x[i] / 10) % 2 == 1){\n              if((x[i] / 100) % 2 == 1){\n\
    \                if((x[i] / 1000) % 2 == 1){\n                  r.push_back(x[i]);\n\
    \                }\n              }\n            }\n          }\n        }\n \
    \     }\n      else if(x[i] < 100\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_rm1hy1.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw_rm1hy1.cpp:66:25: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   66 |       else if(x[i] < 100\n      |             \
    \ ~          ^\n      |                         )\n   67 | }\n      | ~      \
    \                  \n/tmp/tmpw_rm1hy1.cpp:67:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmpw_rm1hy1.cpp:68:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   68 | int main() {\n      |            ^\n/tmp/tmpw_rm1hy1.cpp:74:1: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpw_rm1hy1.cpp:11:54:\
    \ note: to match this \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long>\
    \ x) {\n      |                                                      ^\n/tmp/tmpw_rm1hy1.cpp:74:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093371
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> uniq;\n    for(int\
    \ i=0;i<x.size();i++){\n        int t=x[i];\n        while(t>0){\n           \
    \ if(t%2==0){\n                t=-1;\n                break;\n            }\n\
    \            t/=10;\n        }\n        if(t!=-1){\n            uniq.push_back(x[i]);\n\
    \        }\n    }\n    sort(uniq.begin(),uniq.end());\n    return uniq;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (long\
    \ i = 0; i < x.size(); i++) {\n    int odd = 0;\n    long num = x[i];\n    while\
    \ (num > 0) {\n      int a = num % 10;\n      if (a % 2 == 0) {\n        odd =\
    \ 1;\n        break;\n      }\n      num = num / 10;\n    }\n    if (odd == 0)\n\
    \      result.push_back(x[i]);\n  }\n  std::sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> v;\n  int len = x.size();\n\
    \  for(int i = 0; i < len; i++) {\n    int num = x[i];\n    bool flag = true;\n\
    \    while(num) {\n      int digit = num % 10;\n      if(digit & 1 == 0) {\n \
    \       flag = false;\n        break;\n      }\n      num /= 10;\n    }\n    if(flag)\
    \ {\n      v.push_back(x[i]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmptit1tcbb: /tmp/tmptit1tcbb.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> temp;\n\tbool flag\
    \ = false;\n\tfor(auto i:x){\n\t\tint no = i;\n\t\twhile(no>0){\n\t\t\tif(no%2==0){\n\
    \t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tno = no/10;\n\t\t}\n\t\t\
    if(!flag){\n\t\t\ttemp.push_back(i);\n\t\t}\n\t\tflag = false;\n\t}\n\tstd::sort(temp.begin(),temp.end());\n\
    \treturn temp;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> temp;\n    std::vector<long>\
    \ res;\n    bool flag = false;\n    for(auto i:x){\n        while(i>0){\n    \
    \        int rem = i%10;\n            if(rem%2 == 0){\n                flag =\
    \ true;\n                break;\n            }\n            i /= 10;\n       \
    \ }\n        if(flag == false){\n            temp.push_back(i);\n        }\n \
    \       flag = false;\n    }\n    std::sort(temp.begin(),temp.end());\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpw1bkuuyv: /tmp/tmpw1bkuuyv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n  for (long\
    \ i = 0; i < x.size(); i++) {\n    std::string s = std::to_string(x[i]);\n   \
    \ bool flag = true;\n    for (long j = 0; j < s.size(); j++) {\n      if (s[j]\
    \ == '0' || s[j] == '2' || s[j] == '4' || s[j] == '6' || s[j] == '8') {\n    \
    \    flag = false;\n        break;\n      }\n    }\n    if (flag) res.push_back(x[i]);\n\
    \  }\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093371
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long n = x[i];\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) {\n                n = -1;\n          \
    \      break;\n            }\n            n /= 10;\n        }\n        if (n !=\
    \ -1) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for(auto\
    \ it = x.begin(); it != x.end(); it++) {\n        if(*it < 10) {\n           \
    \ y.push_back(*it);\n        } else {\n            long c = *it;\n           \
    \ while(c > 0) {\n                if(c % 2 == 0) {\n                    break;\n\
    \                }\n                c /= 10;\n            }\n            if(c\
    \ == 0) {\n                y.push_back(*it);\n            }\n        }\n    }\n\
    \    std::sort(y.begin(), y.end());\n    return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093371
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    bool is_even;\n    std::vector<long>\
    \ unique_vec;\n    for (auto value : x) {\n        long temp = value;\n      \
    \  is_even = false;\n        while (temp != 0) {\n            int rem = temp %\
    \ 10;\n            if (rem % 2 == 0) {\n                is_even = true;\n    \
    \            break;\n            }\n            temp /= 10;\n        }\n     \
    \   if (!is_even) {\n            unique_vec.push_back(value);\n        }\n   \
    \ }\n    sort(unique_vec.begin(), unique_vec.end());\n    return unique_vec;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    int flag;\n\
    \    std::sort(x.begin(), x.end());\n    std::vector<long>::iterator itr;\n  \
    \  for(itr = x.begin(); itr!=x.end(); ++itr){\n        flag = 0;\n        long\
    \ val = *itr;\n        while(val>0){\n            if(val%2==0){\n            \
    \    flag = 1;\n                break;\n            }\n            val = val/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(*itr);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> sol;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tint flag=0;\n\t\twhile(x[i]>0){\n\t\t\tif(x[i]%10%2==0){\n\t\t\t\tflag=1;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i]/=10;\n\t\t}\n\t\tif(flag==0){\n\t\t\tsol.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(sol.begin(),sol.end());\n\treturn sol;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpndvvgvfd: /tmp/tmpndvvgvfd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here\n    return x;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7s10qb57: /tmp/tmp7s10qb57.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> uniqueDigits;\n\t\
    for (auto x1: x) {\n\t\tstd::vector<long> digits;\n\t\tlong temp = x1;\n\t\twhile\
    \ (temp > 0) {\n\t\t\tdigits.push_back(temp % 10);\n\t\t\ttemp /= 10;\n\t\t}\n\
    \t\tbool flag = true;\n\t\tfor (auto digit: digits) {\n\t\t\tif (digit % 2 ==\
    \ 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag) {\n\
    \t\t\tuniqueDigits.push_back(x1);\n\t\t}\n\t}\n\treturn uniqueDigits;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpqg5z6eta: /tmp/tmpqg5z6eta.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> v;\n  int i,n=x.size();\n\
    \  for(i=0;i<n;i++)\n  {\n      if(x[i]==1 || x[i]==3 || x[i]==5 || x[i]==7 ||\
    \ x[i]==9)\n        v.push_back(x[i]);\n  }\n  sort(v.begin(),v.end());\n  return\
    \ v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpn3_eyaxx: /tmp/tmpn3_eyaxx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// place your code here...\n\tstd::vector<long>\
    \ r;\n\tif(x.size()<1) return r;\n\tstd::sort(x.begin(),x.end());\n\tfor(int i=0;i<x.size();i++){\n\
    \t\t// std::cout<<\"x[i]=\"<<x[i]<<\"\\n\";\n\t\tif(x[i]%2==1){\n\t\t\tr.push_back(x[i]);\n\
    \t\t}\n\t}\n\treturn r;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfyt7816n: /tmp/tmpfyt7816n.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> r;\n\tint flag=0;\n\
    \tlong n;\n\tfor(long i:x){\n\t\tn=i;\n\t\twhile(n>0){\n\t\t\tif(n%10%2==0){\n\
    \t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn/=10;\n\t\t}\n\t\tif(flag==0){\n\
    \t\t\tr.push_back(i);\n\t\t}\n\t\tflag=0;\n\t}\n\tsort(r.begin(),r.end());\n\t\
    return r;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// TODO: Write your code here.\n\tint\
    \ len = x.size();\n\tstd::vector<long> result;\n\tfor(int i=0;i<len;i++){\n\t\t\
    int num = x[i];\n\t\tint temp = num;\n\t\tbool flag = true;\n\t\twhile(temp>0){\n\
    \t\t\tint rem = temp%10;\n\t\t\tif(rem%2==0){\n\t\t\t\tflag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\ttemp = temp/10;\n\t\t}\n\t\tif(flag)\n\t\t\tresult.push_back(num);\n\
    \t}\n\tsort(result.begin(),result.end());\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> v;\n  std::vector<long>::iterator\
    \ it = x.begin();\n  while(it != x.end()) {\n    long n = *it;\n    while(n) {\n\
    \      if(n%2 == 0) {\n        it = x.erase(it);\n        break;\n      }\n  \
    \    n /= 10;\n    }\n    if(n == 0) it++;\n  }\n  return x;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbe4l6jju: /tmp/tmpbe4l6jju.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        if(isUnique(x[i])){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzo91jn4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgzo91jn4.cpp:14:12: error: \u2018isUnique\u2019 was not\
    \ declared in this scope\n   14 |         if(isUnique(x[i])){\n      |       \
    \     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ ans;\n    for(auto i:x){\n      int even = 0;\n      while(i>0){\n        int\
    \ r = i%10;\n        if(r%2==0){\n          even = 1;\n          break;\n    \
    \    }\n        i = i/10;\n      }\n      if(even==0){\n        ans.push_back(i);\n\
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg8r4pxw6: /tmp/tmpg8r4pxw6.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> unique_vector;\n\
    \    int digits = 0;\n    bool is_odd = true;\n    for (long num : x) {\n    \
    \    digits = 0;\n        is_odd = true;\n        while (num > 0) {\n        \
    \    digits = num % 10;\n            if (digits % 2 == 0) {\n                is_odd\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if (is_odd)\n            unique_vector.push_back(num);\n   \
    \ }\n    std::sort(unique_vector.begin(), unique_vector.end());\n    return unique_vector;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2ewbbmdk: /tmp/tmp2ewbbmdk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Write your code here\n\t// To print\
    \ results to the standard output you can use the printf function. \n\t// Example:\
    \ printf(\"%s\", \"Hello world!\");\n\tstd::vector<long> answer;\n\tfor(long ele\
    \ : x) {\n\t\tstd::string str = std::to_string(ele);\n\t\tint found = 0;\n\t\t\
    for(long i = 0; i < str.length(); i++) {\n\t\t\tif((str[i] - '0') % 2 == 0) {\n\
    \t\t\t\tfound = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(found == 0) {\n\t\t\
    \tanswer.push_back(ele);\n\t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end());\n\
    \treturn answer;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> uniques;\n\t// Your\
    \ code goes here\n\tfor (long i : x) {\n\t\tif (i % 2 != 0) {\n\t\t\tuniques.push_back(i);\n\
    \t\t}\n\t}\n\tstd::sort(uniques.begin(), uniques.end());\n\treturn uniques;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmptup_ofij: /tmp/tmptup_ofij.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093373
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(auto\
    \ i:x){\n        std::string s = std::to_string(i);\n        bool f = false;\n\
    \        for(int j=0;j<s.length();j++){\n            if((s[j]-'0')%2==0){\n  \
    \              f = true;\n                break;\n            }\n        }\n \
    \       if(!f) v.push_back(i);\n    }\n    sort(v.begin(),v.end());\n    return\
    \ v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    bool\
    \ isEven = false;\n    for(auto it : x) {\n        int number = it;\n        isEven\
    \ = false;\n        while(number != 0) {\n            if((number % 10) % 2 ==\
    \ 0) {\n                isEven = true;\n                break;\n            }\n\
    \            number /= 10;\n        }\n        if(!isEven) {\n            result.push_back(it);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tvector<long>result;\n\tint count = 0;\n\
    \tfor (int i = 0; i < x.size(); i++) {\n\t\tint n = x[i];\n\t\twhile (n > 0) {\n\
    \t\t\tint r = n % 10;\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tn = n / 10;\n\t\t}\n\t\tif (count == 0) {\n\t\t\tresult.push_back(x[i]);\n\
    \t\t}\n\t\tcount = 0;\n\t}\n\tsort(result.begin(), result.end());\n\treturn result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8mo3q_10.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8mo3q_10.cpp:12:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   12 |  vector<long>result;\n      |  ^~~~~~\n/tmp/tmp8mo3q_10.cpp:12:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8mo3q_10.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8mo3q_10.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp8mo3q_10.cpp:12:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   12 |  vector<long>result;\n\
    \      |         ^~~~\n/tmp/tmp8mo3q_10.cpp:25:4: error: \u2018result\u2019 was\
    \ not declared in this scope\n   25 |    result.push_back(x[i]);\n      |    ^~~~~~\n\
    /tmp/tmp8mo3q_10.cpp:29:7: error: \u2018result\u2019 was not declared in this\
    \ scope\n   29 |  sort(result.begin(), result.end());\n      |       ^~~~~~\n\
    /tmp/tmp8mo3q_10.cpp:29:2: error: \u2018sort\u2019 was not declared in this scope;\
    \ did you mean \u2018std::sort\u2019?\n   29 |  sort(result.begin(), result.end());\n\
    \      |  ^~~~\n      |  std::sort\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8mo3q_10.cpp:2:\n/usr/include/c"
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> sorted_vec;\n\tfor\
    \ (long i = 0; i < x.size(); i++) {\n\t\tlong temp = x[i];\n\t\twhile (temp !=\
    \ 0) {\n\t\t\tif (temp % 2 == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp /= 10;\n\
    \t\t}\n\t\tif (temp == 0) {\n\t\t\tsorted_vec.push_back(x[i]);\n\t\t}\n\t}\n\t\
    sort(sorted_vec.begin(), sorted_vec.end());\n\treturn sorted_vec;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tint len = x.size();\n\tint i = 0;\n\t\
    bool is_true;\n\tstd::vector<long> answer;\n\tfor (i = 0; i < len; i++) {\n\t\t\
    is_true = true;\n\t\tlong tmp = x[i];\n\t\twhile (tmp > 0) {\n\t\t\tint cur =\
    \ tmp % 10;\n\t\t\tif (cur % 2 == 0) {\n\t\t\t\tis_true = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\ttmp /= 10;\n\t\t}\n\t\tif (is_true) {\n\t\t\tanswer.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end());\n\treturn answer;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> vec;\n    for(long\
    \ i=0;i<x.size();i++){\n        int count=0;\n        int temp=x[i];\n       \
    \ while(temp>0){\n            int digit=temp%10;\n            if(digit%2==0){\n\
    \                count++;\n            }\n            temp=temp/10;\n        }\n\
    \        if(count==0){\n            vec.push_back(x[i]);\n        }\n    }\n \
    \   std::sort(vec.begin(),vec.end());\n    return vec;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool found = false;\n        while (i) {\n         \
    \   if (i % 2 == 0) {\n                found = true;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (!found) {\n     \
    \       result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpr7y_o1p3: /tmp/tmpr7y_o1p3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> result;\n\tint flag;\n\
    \tfor(auto it:x){\n\t\tflag=0;\n\t\twhile(it){\n\t\t\tif(it%2==0){\n\t\t\t\tflag=1;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tit=it/10;\n\t\t}\n\t\tif(flag==0){\n\t\t\tresult.push_back(it);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpp495raec: /tmp/tmpp495raec.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    for (auto\
    \ it : x) {\n        int copy = it;\n        while (copy) {\n            if (copy\
    \ % 2 == 0) {\n                goto END;\n            }\n            copy /= 10;\n\
    \        }\n        ret.push_back(it);\n        END:;\n    }\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        long long int num = x[i];\n        int flag =\
    \ 1;\n        while(num!=0){\n            int r = num%10;\n            if(r%2==0){\n\
    \                flag = 0;\n                break;\n            }\n          \
    \  num = num/10;\n        }\n        if(flag==1){\n            v.push_back(x[i]);\n\
    \        }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tint count[11] = {0};\n\tfor(int i =\
    \ 0; i < x.size(); i++) {\n\t\twhile(x[i] != 0) {\n\t\t\tif(x[i] % 2 == 0) {\n\
    \t\t\t\tcount[x[i] % 10] = 1;\n\t\t\t}\n\t\t\tx[i] /= 10;\n\t\t}\n\t}\n\tstd::vector<long>\
    \ new_x;\n\tfor(int i = 0; i < x.size(); i++) {\n\t\tint temp = x[i];\n\t\tint\
    \ flag = 0;\n\t\twhile(temp != 0) {\n\t\t\tif(count[temp % 10] == 1) {\n\t\t\t\
    \tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif(flag ==\
    \ 0) {\n\t\t\tnew_x.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(new_x.begin(), new_x.end());\n\
    \treturn new_x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7gqic46x: /tmp/tmp7gqic46x.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long>::iterator it;\n  std::vector<long>\
    \ res;\n  std::set<long> set;\n  for(it = x.begin(); it != x.end(); it++) {\n\
    \    //std::cout << *it << \" \";\n    if(*it == 0)\n      set.insert(*it);\n\
    \    while(*it) {\n      if(*it % 2 == 0) {\n        set.insert(*it);\n      \
    \  break;\n      }\n      *it /= 10;\n    }\n  }\n  //std::cout << std::endl;\n\
    \  for(it = x.begin(); it != x.end(); it++) {\n    if(set.find(*it) == set.end())\n\
    \      res.push_back(*it);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpkjo2uegc: /tmp/tmpkjo2uegc.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if(x.size()==0)return\
    \ res;\n    for(int i=0;i<x.size();i++){\n        if(x[i]%2==0)continue;\n   \
    \     res.push_back(x[i]);\n    }\n    std::sort(res.begin(),res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp79v1mqc4: /tmp/tmp79v1mqc4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    bool arr[x.size()] = {0};\n    int\
    \ k = 0;\n    for(int i = 0; i < x.size(); i++) {\n        bool flag = false;\n\
    \        while(x[i] != 0) {\n            if((x[i] % 10) % 2 == 0) {\n        \
    \        flag = true;\n                break;\n            }\n            x[i]\
    \ /= 10;\n        }\n        if(flag) {\n            arr[i] = true;\n        }\n\
    \    }\n    std::vector<long> v;\n    for(int i = 0; i < x.size(); i++) {\n  \
    \      if(!arr[i]) {\n            v.push_back(x[i]);\n        }\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp653juf1n: /tmp/tmp653juf1n.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    int count\
    \ = 0;\n    // std::cout << x.size() << \"\\n\";\n    for(int i = 0; i < x.size();\
    \ i++) {\n        count = 0;\n        while(x[i] > 0) {\n            // std::cout\
    \ << x[i] << \"\\n\";\n            int rem = x[i] % 10;\n            // std::cout\
    \ << rem << \"\\n\";\n            if(rem % 2 == 0) {\n                count++;\n\
    \            }\n            x[i] = x[i] / 10;\n        }\n        if(count ==\
    \ 0) {\n            v.push_back(x[i]);\n        }\n    }\n    sort(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfr1_3p3y: /tmp/tmpfr1_3p3y.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> output;\n    int\
    \ len = x.size();\n    for(int i = 0; i < len; i++) {\n        bool b = true;\n\
    \        int tmp = x[i];\n        while(tmp > 0) {\n            if(tmp % 2 ==\
    \ 0) {\n                b = false;\n                break;\n            }\n  \
    \          tmp /= 10;\n        }\n        if(b) {\n            output.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(output.begin(), output.end());\n    return output;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    int size = x.size();\n    int count\
    \ = 0;\n    int y[size];\n    for(int i = 0; i < size; i++) {\n        long temp\
    \ = x[i];\n        int flag = 0;\n        while(temp != 0) {\n            int\
    \ a = temp % 10;\n            if(a % 2 == 0) {\n                flag = 1;\n  \
    \              break;\n            }\n            temp = temp / 10;\n        }\n\
    \        if(flag == 0) {\n            y[count] = x[i];\n            count++;\n\
    \        }\n    }\n    std::vector<long> res;\n    for(int i = 0; i < count; i++)\
    \ {\n        res.push_back(y[i]);\n    }\n    sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> op;\n    int even\
    \ = 0;\n    for(int i = 0; i < x.size(); i++) {\n        int num = x[i];\n   \
    \     while(num) {\n            int r = num % 10;\n            if(r % 2 == 0)\
    \ {\n                even = 1;\n                break;\n            }\n      \
    \      num /= 10;\n        }\n        if(even == 0) {\n            op.push_back(x[i]);\n\
    \        }\n        even = 0;\n    }\n    sort(op.begin(), op.end());\n    return\
    \ op;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (int\
    \ i = 0; i < x.size(); i++) {\n    bool flag = true;\n    long num = x[i];\n \
    \   while (num != 0) {\n      if (num % 2 == 0) {\n        flag = false;\n   \
    \     break;\n      }\n      num /= 10;\n    }\n    if (flag) {\n      result.push_back(x[i]);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tint i,n=x.size();\n\tstd::vector<long>\
    \ v;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tint temp=x[i];\n\t\twhile(temp!=0)\n\t\t{\n\
    \t\t\tint r=temp%10;\n\t\t\tif(r%2==0)\n\t\t\t\tbreak;\n\t\t\ttemp=temp/10;\n\t\
    \t}\n\t\tif(temp==0)\n\t\t\tv.push_back(x[i]);\n\t}\n\tstd::sort(v.begin(),v.end());\n\
    \treturn v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp>0){\n            if(temp%10%2==0){\n                flag=1;\n   \
    \             break;\n            }\n            temp/=10;\n        }\n      \
    \  if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ a:x){\n        int check=0;\n        long b=a;\n        while(b){\n        \
    \    if(b%2==0){\n                check=1;\n                break;\n         \
    \   }\n            b/=10;\n        }\n        if(check==0){\n            res.push_back(a);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpu0shs3ew: /tmp/tmpu0shs3ew.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    for(int\
    \ i=0;i<x.size();i++){\n        int f=0;\n        long no=x[i];\n        while(no!=0){\n\
    \            if(no%2==0){\n                f=1;\n                break;\n    \
    \        }\n            no=no/10;\n        }\n        if(f==0){\n            y.push_back(x[i]);\n\
    \        }\n    }\n    sort(y.begin(),y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> y;\n  // your code\
    \ here\n  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdwss6_s6: /tmp/tmpdwss6_s6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(auto\
    \ i : x) {\n        auto s = std::to_string(i);\n        bool flag = true;\n \
    \       for(int j = 0; j < s.size(); j++) {\n            if((s[j] - '0') % 2 ==\
    \ 0) {\n                flag = false;\n                break;\n            }\n\
    \        }\n        if(flag) {\n            v.push_back(i);\n        }\n    }\n\
    \    std::sort(v.begin(), v.end());\n    return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  bool flag;\n  std::vector<long> ans;\n\
    \  std::sort(x.begin(), x.end());\n  for(int i = 0; i < x.size(); i++) {\n   \
    \ flag = true;\n    while(x[i] != 0) {\n      if((x[i] % 10) % 2 == 0) {\n   \
    \     flag = false;\n        break;\n      }\n      x[i] /= 10;\n    }\n    if(flag)\
    \ {\n      ans.push_back(x[i]);\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnj1am9te: /tmp/tmpnj1am9te.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ z;\n    int size = x.size();\n    for(int i=0;i<size;i++){\n        if(!(x[i]%2==0)){\n\
    \            z.push_back(x[i]);\n        }\n    }\n    std::sort(z.begin(),z.end());\n\
    \    return z;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpckfv1h30: /tmp/tmpckfv1h30.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long>res;\n\tint count=0;\n\
    \tfor(int i=0;i<x.size();i++){\n\t\tint temp=x[i];\n\t\tint flag=0;\n\t\twhile(temp!=0){\n\
    \t\t\tint rem=temp%10;\n\t\t\tif(rem%2==0){\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\ttemp=temp/10;\n\t\t}\n\t\tif(flag==0){\n\t\t\tres.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(res.begin(),res.end());\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int f = 0;\n        for(int j=0;j<x[i].size();j++){\n\
    \            if(x[i][j]%2 == 0){\n                f = 1;\n                break;\n\
    \            }\n        }\n        if(f==0){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvro97nt6.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvro97nt6.cpp:15:28: error: request for member \u2018size\u2019\
    \ in \u2018x.std::vector<long int>::operator[](((std::vector<long int>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   15 |      \
    \   for(int j=0;j<x[i].size();j++){\n      |                            ^~~~\n\
    /tmp/tmpvro97nt6.cpp:16:22: error: invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type {aka long int}[int]\u2019 for array subscript\n\
    \   16 |             if(x[i][j]%2 == 0){\n      |                      ^\n"
  stdout: ''
  timestamp: 1660093374
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // Write your code here\n  std::vector<long>\
    \ res;\n  long n;\n  for(int i=0;i<x.size();i++){\n    n=x[i];\n    while(n>0){\n\
    \      if(n%10==0||n%10==2||n%10==4||n%10==6||n%10==8){\n        break;\n    \
    \  }\n      n=n/10;\n    }\n    if(n==0){\n      res.push_back(x[i]);\n    }\n\
    \  }\n  sort(res.begin(),res.end());\n  return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long>result;\n    int\
    \ flag;\n    for(long i=0;i<x.size();i++){\n        flag=0;\n        while(x[i]>0){\n\
    \            if(x[i]%10 == 0 || x[i]%10 == 2 || x[i]%10 == 4 || x[i]%10 == 6 ||\
    \ x[i]%10 == 8){\n                flag=1;\n                break;\n          \
    \  }\n            x[i]/=10;\n        }\n        if(flag==0){\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(),result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphiqzsauj: /tmp/tmphiqzsauj.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> ret;\n  // Write your\
    \ code here!\n  return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpzqf9sc4t: /tmp/tmpzqf9sc4t.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(auto\
    \ i:x){\n        int z=i;\n        int cnt=0;\n        while(z){\n           \
    \ int r=z%10;\n            if(r%2==0){\n                cnt++;\n             \
    \   break;\n            }\n            z/=10;\n        }\n        if(cnt==0){\n\
    \            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1ka7mmio: /tmp/tmp1ka7mmio.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    long\
    \ n = x.size();\n    std::vector<long> res;\n    for(long i = 0; i < n; i++){\n\
    \        long num = x[i];\n        long count = 0;\n        while(num > 0){\n\
    \            long digit = num % 10;\n            if(digit % 2 == 0){\n       \
    \         count++;\n            }\n            num = num / 10;\n        }\n  \
    \      if(count == 0){\n            res.push_back(x[i]);\n        }\n    }\n \
    \   sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ elem : x) {\n        if(!has_even_digit(elem)) {\n            res.push_back(elem);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplj_eh_sw.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplj_eh_sw.cpp:14:13: error: \u2018has_even_digit\u2019\
    \ was not declared in this scope\n   14 |         if(!has_even_digit(elem)) {\n\
    \      |             ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660093374
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    int i;\n\
    \    for(i=0;i<x.size();i++){\n        int flag=0;\n        if(x[i]<0)\n     \
    \       x[i]=-x[i];\n        while(x[i]>0){\n            if(x[i]%10==0||x[i]%10==2||x[i]%10==4||x[i]%10==6||x[i]%10==8){\n\
    \                flag=1;\n                break;\n            }\n            x[i]/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(x[i]);\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpm73mz_xw: /tmp/tmpm73mz_xw.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    bool flag = false;\n    int count\
    \ = 0;\n    int temp;\n    for(int i = 0; i < x.size(); i++) {\n        for(int\
    \ j = 0; j < 10; j++) {\n            temp = x[i] % 10;\n            if(temp ==\
    \ j) {\n                flag = true;\n                break;\n            }\n\
    \            else {\n                flag = false;\n            }\n        }\n\
    \        if(flag == false) {\n            count++;\n        }\n    }\n    std::vector<long>\
    \ unique(count);\n    flag = false;\n    count = 0;\n    for(int i = 0; i < x.size();\
    \ i++) {\n        for(int j = 0; j < 10; j++) {\n            temp = x[i] % 10;\n\
    \            if(temp == j) {\n                flag = true;\n                break;\n\
    \            }\n            else {\n                flag = false;\n          \
    \  }\n        }\n        if(flag == false) {\n            unique[count] = x[i];\n\
    \            count++;\n        }\n    }\n    std::sort(unique.begin(), unique.end());\n\
    \    return unique;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0ou30399: /tmp/tmp0ou30399.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> v;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tint iseven=0;\n\t\tint temp=x[i];\n\t\twhile(temp!=0){\n\t\t\tint dig=temp%10;\n\
    \t\t\tif(dig%2==0){\n\t\t\t\tiseven=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp=temp/10;\n\
    \t\t}\n\t\tif(iseven==0){\n\t\t\tv.push_back(x[i]);\n\t\t}\n\t}\n\tsort(v.begin(),v.end());\n\
    \treturn v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(auto\
    \ i : x) {\n        std::string s = std::to_string(i);\n        if(std::any_of(s.begin(),\
    \ s.end(), [](char c) { return c - '0' & 1;})) {\n            ans.push_back(i);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp08vix9ni: /tmp/tmp08vix9ni.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tint temp = 0;\n\tstd::vector<long> output;\n\
    \tfor (int i = 0; i < x.size(); i++) {\n\t\tint flag = 0;\n\t\tlong num = x[i];\n\
    \t\twhile (num != 0) {\n\t\t\ttemp = num % 10;\n\t\t\tif (temp % 2 == 0) {\n\t\
    \t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tif\
    \ (flag == 0) {\n\t\t\toutput.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(output.begin(),\
    \ output.end());\n\treturn output;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code goes here\n    std::vector<long>\
    \ v;\n    std::vector<long> ans;\n    long t;\n    for(long i = 0; i < x.size();\
    \ i++)\n    {\n        t = x[i];\n        while(t>0)\n        {\n            long\
    \ r = t%10;\n            if(r%2==0)\n            {\n                break;\n \
    \           }\n            t = t/10;\n        }\n        if(t==0)\n        {\n\
    \            v.push_back(x[i]);\n        }\n    }\n    long s = v.size();\n  \
    \  if(s>0)\n    {\n        long a[s];\n        for(long i = 0; i < s; i++)\n \
    \       {\n            a[i] = v[i];\n        }\n        for(long i = 0; i < s;\
    \ i++)\n        {\n            for(long j = i+1; j < s; j++)\n            {\n\
    \                if(a[i]>a[j])\n                {\n                    long temp\
    \ = a[i];\n                    a[i] = a[j];\n                    a[j] = temp;\n\
    \                }\n            }\n        }\n        for(long i = 0; i < s; i++)\n\
    \        {\n            ans.push_back(a[i]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> uniqued;\n\tfor (int\
    \ i = 0; i < x.size(); i++) {\n\t\tlong y = x[i];\n\t\tbool flag = true;\n\t\t\
    while (y != 0) {\n\t\t\tint rem = y % 10;\n\t\t\tif (rem % 2 == 0) {\n\t\t\t\t\
    flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y / 10;\n\t\t}\n\t\tif (flag)\
    \ {\n\t\t\tuniqued.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(uniqued.begin(),\
    \ uniqued.end());\n\treturn uniqued;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // your code goes here\n  std::vector<long>\
    \ result;\n  for(long i = 0; i < x.size(); i++){\n    int flag = 0;\n    while(x[i]\
    \ != 0){\n      if(x[i] % 10 % 2 == 0){\n        flag = 1;\n        break;\n \
    \     }\n      x[i] /= 10;\n    }\n    if(flag == 0){\n      result.push_back(x[i]);\n\
    \    }\n  }\n  sort(result.begin(), result.end());\n  return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp8pyrhncu: /tmp/tmp8pyrhncu.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    int i, j,\
    \ k, l, m, n, o, p, q, r, s, t, u, v1, w, x1, y, z;\n    for(i = 0; i < x.size();\
    \ i++) {\n        int flag = 0;\n        j = x[i];\n        while(j > 0) {\n \
    \           k = j % 10;\n            if(k % 2 == 0) {\n                flag =\
    \ 1;\n                break;\n            }\n            j = j / 10;\n       \
    \ }\n        if(flag == 0) {\n            v.push_back(x[i]);\n        }\n    }\n\
    \    sort(v.begin(), v.end());\n    return v;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (const auto& i : x) {\n        if (i < 10) {\n            result.push_back(i);\n\
    \        } else {\n            bool contains_even = false;\n            for (long\
    \ j = i; j > 0; j /= 10) {\n                if ((j % 10) % 2 == 0) {\n       \
    \             contains_even = true;\n                    break;\n            \
    \    }\n            }\n            if (!contains_even) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    bool has_even_digit;\n    long temp;\n\
    \    int digit;\n    std::vector<long> result;\n    for (size_t i = 0; i < x.size();\
    \ i++) {\n        temp = x[i];\n        has_even_digit = false;\n        while\
    \ (temp != 0) {\n            digit = temp % 10;\n            if (digit % 2 ==\
    \ 0) {\n                has_even_digit = true;\n                break;\n     \
    \       }\n            temp /= 10;\n        }\n        if (!has_even_digit)\n\
    \            result.push_back(x[i]);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> ans;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tlong num = x[i];\n\t\tbool found = false;\n\t\twhile(num){\n\t\t\tif(num%10\
    \ == 0 || num%10 == 2 || num%10 == 4 || num%10 == 6 || num%10 == 8)\n\t\t\t\t\
    found = true;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(!found)\n\t\t\tans.push_back(x[i]);\n\
    \t}\n\tsort(ans.begin(), ans.end());\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> output;\n  for (int\
    \ i = 0; i < x.size(); i++) {\n    int val = x[i];\n    int hasEven = 0;\n   \
    \ while (val) {\n      int remainder = val % 10;\n      if (remainder % 2 == 0)\
    \ {\n        hasEven = 1;\n        break;\n      }\n      val /= 10;\n    }\n\
    \    if (!hasEven) {\n      output.push_back(x[i]);\n    }\n  }\n  std::sort(output.begin(),\
    \ output.end());\n  return output;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> out;\n    for (auto\
    \ &n : x) {\n        int temp = n;\n        bool flag = true;\n        while (temp)\
    \ {\n            if (!(temp % 10 & 1)) {\n                flag = false;\n    \
    \            break;\n            }\n            temp /= 10;\n        }\n     \
    \   if (flag)\n            out.push_back(n);\n    }\n    std::sort(out.begin(),\
    \ out.end());\n    return out;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here\n    return {};\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp88f7ltlq: /tmp/tmp88f7ltlq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093375
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> result;\n\tfor (int\
    \ i = 0; i < x.size(); i++) {\n\t\tbool res = hasEvenDigit(x[i]);\n\t\tif (!res)\
    \ {\n\t\t\tresult.push_back(x[i]);\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8it3ndmo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8it3ndmo.cpp:14:14: error: \u2018hasEvenDigit\u2019 was\
    \ not declared in this scope\n   14 |   bool res = hasEvenDigit(x[i]);\n     \
    \ |              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660093375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    int n\
    \ = x.size();\n    for(int i = 0; i < n; i++) {\n        int cnt = 0;\n      \
    \  while(x[i] > 0) {\n            int val = x[i] % 10;\n            if(val % 2\
    \ == 0) {\n                cnt++;\n            }\n            x[i] /= 10;\n  \
    \      }\n        if(cnt == 0) {\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpys9depz_: /tmp/tmpys9depz_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    if(x.size()==0)\n        return x;\n\
    \    std::vector<long> ans;\n    sort(x.begin(),x.end());\n    int flag=0;\n \
    \   for(auto i:x){\n        flag=0;\n        while(i>0){\n            int dig=i%10;\n\
    \            if(dig%2==0){\n                flag=1;\n                break;\n\
    \            }\n            i=i/10;\n        }\n        if(flag==0)\n        \
    \    ans.push_back(i);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpy2vee66w: /tmp/tmpy2vee66w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n  for (auto\
    \ val : x) {\n    bool found = false;\n    while (val > 0) {\n      int ld = val\
    \ % 10;\n      if (ld % 2 == 0) {\n        found = true;\n        break;\n   \
    \   }\n      val /= 10;\n    }\n    if (!found) {\n      res.push_back(val);\n\
    \    }\n  }\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp08bj44so: /tmp/tmp08bj44so.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> v;\n  for(int i=0;i<x.size();i++){\n\
    \    int k=x[i];\n    int c=0;\n    while(k!=0){\n      int num=k%10;\n      if(num%2==0){\n\
    \        c=1;\n        break;\n      }\n      k=k/10;\n    }\n    if(c==0){\n\
    \      v.push_back(x[i]);\n    }\n  }\n  sort(v.begin(),v.end());\n  return v;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093376
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> arr;\n\tfor(int i=0;i<x.size();i++){\n\
    \t\tint y=x[i];\n\t\tint flag=0;\n\t\twhile(y>0){\n\t\t\tint z=y%10;\n\t\t\tif(z%2==0){\n\
    \t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty=y/10;\n\t\t}\n\t\tif(flag==0){\n\
    \t\t\tarr.push_back(x[i]);\n\t\t}\n\t}\n\tsort(arr.begin(),arr.end());\n\treturn\
    \ arr;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093376
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    auto checkNumber = [](long num) {\n\
    \        while (num) {\n            if (num % 2 == 0) {\n                return\
    \ false;\n            }\n            num /= 10;\n        }\n        return true;\n\
    \    };\n    std::vector<long> result;\n    for (auto xi : x) {\n        if (checkNumber(xi))\
    \ {\n            result.push_back(xi);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093376
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code goes here\n    std::vector<long>\
    \ result;\n    for(long i=0;i<x.size();i++){\n        int count=0;\n        long\
    \ temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n        \
    \        count++;\n            }\n            temp=temp/10;\n        }\n     \
    \   if(count==0){\n            result.push_back(x[i]);\n        }\n    }\n   \
    \ std::sort(result.begin(),result.end());\n    return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  \n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbqs_jt3e: /tmp/tmpbqs_jt3e.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0pfowlgu: /tmp/tmp0pfowlgu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  // Your code here.\n  return {};\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphsonubsj: /tmp/tmphsonubsj.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  std::vector<int>\
    \ oddDigits = {1, 3, 5, 7, 9};\n  for (auto n : x) {\n    int odd = 0;\n    for\
    \ (auto digit : oddDigits) {\n      odd = odd || (n % 10 == digit);\n      n /=\
    \ 10;\n    }\n    if (odd) result.push_back(n);\n  }\n  std::sort(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5g6guold: /tmp/tmp5g6guold.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if(x.size()\
    \ == 0)\n        return res;\n    std::vector<int> odds{1,3,5,7,9};\n    for(long\
    \ val : x){\n        std::string str = std::to_string(val);\n        bool found\
    \ = false;\n        for(char c : str){\n            int digit = c - '0';\n   \
    \         if(std::find(odds.begin(), odds.end(), digit) == odds.end()){\n    \
    \            found = true;\n                break;\n            }\n        }\n\
    \        if(!found)\n            res.push_back(val);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093376
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    std::sort(x.begin(),\
    \ x.end());\n    for(int i = 0; i < x.size(); i++) {\n        int temp = x[i];\n\
    \        int flag = 0;\n        while(temp > 0) {\n            if(temp % 2 ==\
    \ 0) {\n                flag = 1;\n                break;\n            }\n   \
    \         temp /= 10;\n        }\n        if(flag == 0) {\n            v.push_back(x[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  \n  // TODO: Replace this line with\
    \ your code\n  std::vector<long> ret;\n  std::sort(x.begin(), x.end());\n  for(auto\
    \ i: x){\n    int tmp = i;\n    while(tmp > 0){\n      if(tmp % 2 == 0){\n   \
    \     ret.push_back(i);\n        break;\n      }\n      tmp /= 10;\n    }\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj7xmipu6: /tmp/tmpj7xmipu6.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\t// Write your code here\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4cxw04ja: /tmp/tmp4cxw04ja.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long>::iterator it;\n\
    \    std::vector<long> ans;\n    long n;\n    for(it = x.begin(); it != x.end();\
    \ it++) {\n        n = *it;\n        while(n != 0) {\n            if(n % 10 %\
    \ 2 == 0)\n                break;\n            n /= 10;\n        }\n        if(n\
    \ == 0) {\n            ans.push_back(*it);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3lj4sth5: /tmp/tmp3lj4sth5.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093376
