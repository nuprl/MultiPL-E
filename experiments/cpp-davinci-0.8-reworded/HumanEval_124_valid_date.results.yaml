language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int month,day,year;\n\
    \    char a,b;\n    int len = date.length();\n    if(len != 10)\n        return\
    \ false;\n    if(date[2] != '-' || date[5] != '-')\n        return false;\n  \
    \  int d = sscanf(date.c_str(),\"%d%c%d%c%d\",&month,&a,&day,&b,&year);\n    if(d\
    \ != 5)\n        return false;\n    if(month<1 || month>12)\n        return false;\n\
    \    if(day<1 || day>31)\n        return false;\n    if(month == 2 && day>29)\n\
    \        return false;\n    if(month == 2 && day==29 && year%4 != 0)\n       \
    \ return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n\
    \    {\n        if(day>30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133233
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::vector<int> m = {1,3,5,7,8,10,12};\n    std::vector<int> m1 = {4,6,9,11};\n\
    \    int n = date.size();\n    int yy = 0;\n    int mm = 0;\n    int dd = 0;\n\
    \    int f = 0;\n    if(n!=10){\n        return false;\n    }\n    else{\n   \
    \     std::string temp1 = date.substr(0,2);\n        std::string temp2 = date.substr(3,2);\n\
    \        std::string temp3 = date.substr(6,4);\n        for(int i=0;i<temp1.size();i++){\n\
    \            if(temp1[i]>='0' && temp1[i]<='9'){\n                dd = dd*10 +\
    \ temp1[i]-'0';\n            }\n            else{\n                return false;\n\
    \            }\n        }\n        for(int i=0;i<temp2.size();i++){\n        \
    \    if(temp2[i]>='0' && temp2[i]<='9'){\n                mm = mm*10 + temp2[i]-'0';\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n        for(int i=0;i<temp3.size();i++){\n            if(temp3[i]>='0'\
    \ && temp3[i]<='9'){\n                yy = yy*10 + temp3[i]-'0';\n           \
    \ }\n            else{\n                return false;\n            }\n       \
    \ }\n        if(dd<1 || dd>31){\n            return false;\n        }\n      \
    \  else if(mm<1 || mm>12){\n            return false;\n        }\n        else\
    \ if(yy<1900 || yy>2040){\n            return false;\n        }\n        else{\n\
    \            for(int i=0;i<m.size();i++){\n                if(mm==m[i]){\n   \
    \                 f=1;\n                    break;\n                }\n      \
    \      }\n            if(\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvg33hcf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcvg33hcf.cpp:77:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   77 | }\n      | ^\n/tmp/tmpcvg33hcf.cpp:76:16: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   76 |             if(\n      | \
    \              ~^\n      |                )\n   77 | }\n      | ~            \
    \   \n/tmp/tmpcvg33hcf.cpp:77:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   77 | }\n      | ^\n/tmp/tmpcvg33hcf.cpp:78:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n     \
    \ |            ^\n/tmp/tmpcvg33hcf.cpp:96:1: error: expected \u2018}\u2019 at\
    \ end of input\n   96 | }\n      | ^\n/tmp/tmpcvg33hcf.cpp:32:9: note: to match\
    \ this \u2018{\u2019\n   32 |     else{\n      |         ^\n/tmp/tmpcvg33hcf.cpp:96:1:\
    \ error: expected \u2018}\u2019 at end of input\n   96 | }\n      | ^\n/tmp/tmpcvg33hcf.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpcvg33hcf.cpp:96:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   96 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int month = atoi(date.substr(0,2).c_str());\n\
    \    int day = atoi(date.substr(3,2).c_str());\n    int year = atoi(date.substr(6,4).c_str());\n\
    \    if(date.substr(2,1) != \"-\" || date.substr(5,1) != \"-\"){\n        return\
    \ false;\n    }\n    if(month > 12 || month < 1){\n        return false;\n   \
    \ }\n    else if(month == 2){\n        if(day > 29 || day < 1){\n            return\
    \ false;\n        }\n    }\n    else if(month == 4 || month == 6 || month == 9\
    \ || month == 11){\n        if(day > 30 || day < 1){\n            return false;\n\
    \        }\n    }\n    else{\n        if(day > 31 || day < 1){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 3) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n   // your code here\n  \
    \  if(date.length()==0) return false;\n    int month =0;\n    int days =0;\n \
    \   int year =0;\n    int i=0;\n    while(date[i]!='-'){\n        if(date[i]<'0'\
    \ || date[i]>'9') return false;\n        month = month*10 + (date[i]-'0');\n \
    \       i++;\n    }\n    i++;\n    while(date[i]!='-'){\n        if(date[i]<'0'\
    \ || date[i]>'9') return false;\n        days = days*10 + (date[i]-'0');\n   \
    \     i++;\n    }\n    i++;\n    while(i<date.length()){\n        if(date[i]<'0'\
    \ || date[i]>'9') return false;\n        year = year*10 + (date[i]-'0');\n   \
    \     i++;\n    }\n    if(month<1 || month>12) return false;\n    if(month==1\
    \ || month==3 || month==5 || month==7 || month==8 || month==10 || month==12){\n\
    \        if(days<1 || days>31) return false;\n    }\n    else if(month==4 || month==6\
    \ || month==9 || month==11){\n        if(days<1 || days>30) return false;\n  \
    \  }\n    else{\n        if(days<1 || days>29) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int d,m,y;\n    std::vector<int>\
    \ monthDays = {31,28,31,30,31,30,31,31,30,31,30,31};\n    std::vector<int> daysInMonthLeapYear\
    \ = {31,29,31,30,31,30,31,31,30,31,30,31};\n    std::vector<int> v;\n    std::string\
    \ str = date;\n    std::stringstream ss(str);\n    int i;\n    char ch;\n    while\
    \ (ss >> i)\n    {\n        v.push_back(i);\n        if (ss.peek() == '-')\n \
    \           ss.ignore();\n    }\n    d = v[0];\n    m = v[1];\n    y = v[2];\n\
    \    if(!(m>=1 && m<=12 && d>=1 && d<=daysInMonthLeapYear[m-1] && y>=1)){\n  \
    \      return false;\n    }\n    else{\n        return true;\n    }\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp57mibx9j: /tmp/tmp57mibx9j.cpp:48: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string s = \"\";\n\
    \  std::vector<int> nums;\n  for (int i = 0; i < date.size(); i++) {\n    if (date[i]\
    \ == '-') {\n      nums.push_back(std::stoi(s));\n      s = \"\";\n    } else\
    \ {\n      s += date[i];\n    }\n  }\n  nums.push_back(std::stoi(s));\n  if (nums.size()\
    \ != 3) return false;\n  if (nums[0] < 1 || nums[0] > 12) return false;\n  if\
    \ (nums[0] == 1 || nums[0] == 3 || nums[0] == 5 || nums[0] == 7 || nums[0] ==\
    \ 8 || nums[0] == 10 || nums[0] == 12) {\n    if (nums[1] < 1 || nums[1] > 31)\
    \ return false;\n  } else if (nums[0] == 4 || nums[0] == 6 || nums[0] == 9 ||\
    \ nums[0] == 11) {\n    if (nums[1] < 1 || nums[1] > 30) return false;\n  } else\
    \ if (nums[0] == 2) {\n    if (nums[1] < 1 || nums[1] > 29) return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   // You may create additional functions if needed\n    vector<string> v;\n\
    \    vector<int> v2;\n    stringstream ss(date);\n    string temp;\n    while(getline(ss,temp,'-'))\n\
    \    {\n        v.push_back(temp);\n    }\n    stringstream ss2(date);\n    while(getline(ss2,temp,'-'))\n\
    \    {\n        v2.push_back(stoi(temp));\n    }\n    if(v.size()!=3)\n    {\n\
    \        return false;\n    }\n    if(v2[0]<1||v2[0]>12)\n    {\n        return\
    \ false;\n    }\n    if(v2[0]==1||v2[0]==3||v2[0]==5||v2[0]==7||v2[0]==8||v2[0]==10||v2[0]==12)\n\
    \    {\n        if(v2[1]<1||v2[1]>31)\n        {\n            return false;\n\
    \        }\n    }\n    else if(v2[0]==4||v2[0]==6||v2[0]==9||v2[0]==11)\n    {\n\
    \        if(v2[1]<1||v2[1]>30)\n        {\n            return false;\n       \
    \ }\n    }\n    else if(v2[0]==2)\n    {\n        if(v2[1]<1||v2[1]>29)\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hq_b9aj.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp2hq_b9aj.cpp:23:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   23 |     vector<string> v;\n      |     ^~~~~~\n/tmp/tmp2hq_b9aj.cpp:23:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2hq_b9aj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2hq_b9aj.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp2hq_b9aj.cpp:23:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   23 |     vector<string>\
    \ v;\n      |            ^~~~~~\n/tmp/tmp2hq_b9aj.cpp:23:12: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2hq_b9aj.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file includ"
  stdout: ''
  timestamp: 1660133234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int d,m,y;\n    if(date.size()!=10)\n\
    \        return false;\n    for(int i=0;i<10;i++)\n    {\n        if(i==2||i==5)\n\
    \        {\n            if(date[i]!='-')\n                return false;\n    \
    \    }\n        else if(!isdigit(date[i]))\n            return false;\n    }\n\
    \    d=stoi(date.substr(3,2));\n    m=stoi(date.substr(0,2));\n    y=stoi(date.substr(6,4));\n\
    \    if(m>12||m<1)\n        return false;\n    if(d>31||d<1)\n        return false;\n\
    \    if(m==4||m==6||m==9||m==11)\n    {\n        if(d>30)\n            return\
    \ false;\n    }\n    if(m==2)\n    {\n        if(d>29)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n// your code here\n    std::string\
    \ delimiter = \"-\";\n    std::string day, month, year;\n    size_t pos = 0;\n\
    \    int m, d, y;\n    while ((pos = date.find(delimiter)) != std::string::npos)\
    \ {\n        month = date.substr(0, pos);\n        date.erase(0, pos + delimiter.length());\n\
    \    }\n    year = date;\n    day = date.substr(0, date.find(delimiter));\n  \
    \  date.erase(0, date.find(delimiter) + delimiter.length());\n    year = date;\n\
    \    std::stringstream geekm(month);\n    geekm >> m;\n    std::stringstream geekd(day);\n\
    \    geekd >> d;\n    std::stringstream geeky(year);\n    geeky >> y;\n    if\
    \ (d < 1 || d > 31 || m < 1 || m > 12 || y < 0)\n    {\n        return false;\n\
    \    }\n    if (m == 2)\n    {\n        if (d > 29)\n        {\n            return\
    \ false;\n        }\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n \
    \   {\n        if (d > 30)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp16hj6qit: /tmp/tmp16hj6qit.cpp:62: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyhqt4mu1: /tmp/tmpyhqt4mu1.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  bool res = false;\n  int\
    \ d = std::stoi(date.substr(0, 2));\n  int m = std::stoi(date.substr(3, 2));\n\
    \  if(date.length() == 10 && date[2] == '-' && date[5] == '-') {\n    if(d > 0\
    \ && d <= 31 && m > 0 && m <= 12) {\n      if(m == 2) {\n        if(d > 0 && d\
    \ <= 29) {\n          res = true;\n        }\n      } else if(m == 1 || m == 3\
    \ || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if(d > 0 &&\
    \ d <= 31) {\n          res = true;\n        }\n      } else {\n        if(d >\
    \ 0 && d <= 30) {\n          res = true;\n        }\n      }\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxmir1mgi: /tmp/tmpxmir1mgi.cpp:46: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpctncaey7: /tmp/tmpctncaey7.cpp:26: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // write your code here\n\
    \    std::vector<int> date_vec;\n    char delim = '-';\n    std::string token;\n\
    \    size_t pos = 0;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n\
    \    std::string s = date;\n    while ((pos = s.find(delim)) != std::string::npos)\
    \ {\n        token = s.substr(0, pos);\n        date_vec.push_back(std::stoi(token));\n\
    \        s.erase(0, pos + delim.length());\n    }\n    date_vec.push_back(std::stoi(s));\n\
    \    // check if the date is in the format mm-dd-yyyy\n    if (date_vec.size()\
    \ == 3) {\n        month = date_vec[0];\n        day = date_vec[1];\n        year\
    \ = date_vec[2];\n        if (month < 1 || month > 12) {\n            return false;\n\
    \        }\n        else if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n        else if (year < 1) {\n            return false;\n        }\n\
    \        else {\n            return true;\n        }\n    }\n    else {\n    \
    \    return false;\n    }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8nkqey_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpu8nkqey_.cpp:33:32: error: request for member \u2018length\u2019 in\
    \ \u2018delim\u2019, which is of non-class type \u2018char\u2019\n   33 |    \
    \     s.erase(0, pos + delim.length());\n      |                             \
    \   ^~~~~~\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // month-day-year\n \
    \   int year, month, day;\n    int len = date.length();\n    if (len != 10) return\
    \ false;\n    std::stringstream ss(date);\n    char ch;\n    ss >> month >> ch\
    \ >> day >> ch >> year;\n    if (!ss || ch != '-') return false;\n    if (year\
    \ < 1900 || year > 2100) return false;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n    } else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133235
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size()!=10)\n \
    \   return false;\n  std::vector<int> pos;\n  for(int i=0;i<date.size();i++){\n\
    \    if(date[i]=='-')\n      pos.push_back(i);\n  }\n  if(pos.size()!=2)\n   \
    \ return false;\n  int month = std::stoi(date.substr(0,2));\n  int day = std::stoi(date.substr(3,2));\n\
    \  int year = std::stoi(date.substr(6,4));\n  if(month>12)\n    return false;\n\
    \  if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12){\n    if(day>31)\n      return false;\n  }\n  else if(month==4 ||\
    \ month==6 || month==9 || month==11){\n    if(day>30)\n      return false;\n \
    \ }\n  else if(month==2){\n    if(day>29)\n      return false;\n  }\n  else{\n\
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    //write your code here\n\
    \    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk1ww7fap: /tmp/tmpk1ww7fap.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133234
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    vector<int> month = {31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    if(date.length()==0){\n        return false;\n    }\n    vector<string> date_split;\n\
    \    int j=0;\n    for(int i=0;i<date.length();i++){\n        if(date[i]=='-'){\n\
    \            date_split.push_back(date.substr(j,i-j));\n            j=i+1;\n \
    \       }\n    }\n    date_split.push_back(date.substr(j,date.length()-j));\n\
    \    if(date_split.size()!=3){\n        return false;\n    }\n    int month_ =\
    \ stoi(date_split[0]);\n    int day_ = stoi(date_split[1]);\n    if(month_<1 ||\
    \ month_>12){\n        return false;\n    }\n    if(month_==2){\n        if(day_<1\
    \ || day_>29){\n            return false;\n        }\n    }\n    else{\n     \
    \   if(day_<1 || day_>month[month_-1]){\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp04tcb438.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp04tcb438.cpp:21:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   21 |     vector<int> month = {31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \      |     ^~~~~~\n/tmp/tmp04tcb438.cpp:21:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp04tcb438.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp04tcb438.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp04tcb438.cpp:21:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   21 |     vector<int>\
    \ month = {31,28,31,30,31,30,31,31,30,31,30,31};\n      |            ^~~\n/tmp/tmp04tcb438.cpp:25:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   25 |     vector<string>\
    \ date_split;\n      |            ^~~~~~\n/tmp/tmp04tcb438.cpp:25:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string delimiter =\
    \ \"-\";\n  std::string s = date;\n  std::string token = s.substr(0, s.find(delimiter));\n\
    \  s.erase(0, s.find(delimiter) + delimiter.length());\n  int month = std::stoi(token);\n\
    \  token = s.substr(0, s.find(delimiter));\n  s.erase(0, s.find(delimiter) + delimiter.length());\n\
    \  int day = std::stoi(token);\n  token = s.substr(0, s.find(delimiter));\n  int\
    \ year = std::stoi(token);\n  return (date.length() > 0 && day <= 31 && day >=\
    \ 1 && month <= 12 && month >= 1 && ((month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) ? true : (month == 4\
    \ || month == 6 || month == 9 || month == 11) ? day <= 30 : (((year % 4 == 0 &&\
    \ year % 100 != 0) || year % 400 == 0) ? day <= 29 : day <= 28)));\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string delimiter =\
    \ \"-\";\n  std::string day = date.substr(0, date.find(delimiter));\n  std::string\
    \ month = date.substr(date.find(delimiter) + 1, date.rfind(delimiter));\n  std::string\
    \ year = date.substr(date.rfind(delimiter) + 1, date.length());\n  std::stringstream\
    \ ss(day);\n  int dd;\n  ss >> dd;\n  ss.clear();\n  ss.str(month);\n  int mm;\n\
    \  ss >> mm;\n  ss.clear();\n  ss.str(year);\n  int yy;\n  ss >> yy;\n  if(dd\
    \ > 31 || dd < 1) {\n    return false;\n  }\n  if(mm > 12 || mm < 1) {\n    return\
    \ false;\n  }\n  if(day.length() != 2 || month.length() != 2 || year.length()\
    \ != 4) {\n    return false;\n  }\n  if(date.find(\"/\") != std::string::npos)\
    \ {\n    return false;\n  }\n  if(!(mm == 1 || mm == 3 || mm == 5 || mm == 7 ||\
    \ mm == 8 || mm == 10 || mm == 12)) {\n    if(dd > 30) {\n      return false;\n\
    \    }\n  }\n  if(mm == 2) {\n    if(dd > 29) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptxp370mu: /tmp/tmptxp370mu.cpp:62: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  bool flag = true;\n  int\
    \ year, month, day;\n  char * pch;\n  char * s;\n  s = new char[date.length()\
    \ + 1];\n  strcpy(s, date.c_str());\n  pch = strtok(s, \"-\");\n  month = atoi(pch);\n\
    \  pch = strtok(NULL, \"-\");\n  day = atoi(pch);\n  pch = strtok(NULL, \"-\"\
    );\n  year = atoi(pch);\n  switch (month) {\n    case 2:\n      if (day > 29)\
    \ {\n        flag = false;\n      }\n      break;\n    case 4:\n    case 6:\n\
    \    case 9:\n    case 11:\n      if (day > 30) {\n        flag = false;\n   \
    \   }\n      break;\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case\
    \ 8:\n    case 10:\n    case 12:\n      if (day > 31) {\n        flag = false;\n\
    \      }\n      break;\n    default:\n      flag = false;\n      break;\n  }\n\
    \  if (year < 1000 || year > 9999) {\n    flag = false;\n  }\n  return flag;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj2jqz3ya: /tmp/tmpj2jqz3ya.cpp:71: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // TODO Write your code\
    \ here\n  int m = 0, d = 0, y = 0;\n  int val = 0;\n  int t = 0;\n  std::stringstream\
    \ ss(date);\n  std::vector<std::string> v;\n  std::string s;\n  while (std::getline(ss,\
    \ s, '-')) {\n    if (!s.empty()) {\n      v.push_back(s);\n    }\n  }\n  if (v.size()\
    \ != 3) {\n    return false;\n  }\n  for (auto &i : v) {\n    if (i[0] == '0')\
    \ {\n      t++;\n    }\n  }\n  if (t == 3) {\n    return false;\n  }\n  for (auto\
    \ &i : v) {\n    val = 0;\n    for (int j = 0; j < i.size(); j++) {\n      val\
    \ = val * 10 + i[j] - '0';\n    }\n    if (m == 0) {\n      m = val;\n    } else\
    \ if (d == 0) {\n      d = val;\n    } else {\n      y = val;\n    }\n  }\n  if\
    \ (y < 2020 || m < 1 || m > 12 || d < 1 || d > 31) {\n    return false;\n  }\n\
    \  if (m == 2) {\n    if (d > 29) {\n      return false;\n    }\n  } else if (m\
    \ == 4 || m == 6 || m == 9 || m == 11) {\n    if (d > 30) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdznm_4dv: /tmp/tmpdznm_4dv.cpp:73: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  //enter your code here\n\
    \  //return true;\n  if(date.size()!=10) return false;\n  if(date[2]!='-'||date[5]!='-')\
    \ return false;\n  string tmp(date.begin(),date.begin()+2);\n  int mm=stoi(tmp);\n\
    \  if(mm<1||mm>12) return false;\n  tmp=string(date.begin()+3,date.begin()+5);\n\
    \  int dd=stoi(tmp);\n  if(mm==2) {\n    if(dd<1||dd>29) return false;\n  }\n\
    \  else if(mm==1||mm==3||mm==5||mm==7||mm==8||mm==10||mm==12) {\n    if(dd<1||dd>31)\
    \ return false;\n  }\n  else {\n    if(dd<1||dd>30) return false;\n  }\n  tmp=string(date.begin()+6,date.end());\n\
    \  int yyyy=stoi(tmp);\n  return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfuxc9ihx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpfuxc9ihx.cpp:25:3: error: \u2018string\u2019 was not declared in this\
    \ scope\n   25 |   string tmp(date.begin(),date.begin()+2);\n      |   ^~~~~~\n\
    /tmp/tmpfuxc9ihx.cpp:25:3: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfuxc9ihx.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfuxc9ihx.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpfuxc9ihx.cpp:26:15: error: \u2018tmp\u2019 was not declared in this scope;\
    \ did you mean \u2018tm\u2019?\n   26 |   int mm=stoi(tmp);\n      |         \
    \      ^~~\n      |               tm\n/tmp/tmpfuxc9ihx.cpp:26:10: error: \u2018\
    stoi\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::stoi\u2019\
    ?\n   26 |   int mm=stoi(tmp);\n      |          ^~~~\n      |          std::__cxx11::stoi\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /"
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  using namespace std;\n\
    \  if(date.length()==0) return false;\n  int dd = stoi(date.substr(0,2));\n  int\
    \ mm = stoi(date.substr(3,2));\n  int yyyy = stoi(date.substr(6,4));\n  if(mm<1\
    \ || mm>12) return false;\n  if(mm==2){\n    if(dd<1 || dd>29) return false;\n\
    \  }\n  else if(mm==1 || mm==3 || mm==5 || mm==7 || mm==8 || mm==10 || mm==12){\n\
    \    if(dd<1 || dd>31) return false;\n  }\n  else{\n    if(dd<1 || dd>30) return\
    \ false;\n  }\n  if(date[2]!='-' || date[5]!='-') return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprgr8gz76: /tmp/tmprgr8gz76.cpp:42: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  if(date.size()==0)\n\
    \    return false;\n  else if(date.size()!=10)\n    return false;\n  int i;\n\
    \  for(i=0;i<10;i++)\n  {\n    if(date[i]=='-')\n      break;\n  }\n  if(i!=2)\n\
    \    return false;\n  for(i=3;i<5;i++)\n  {\n    if(date[i]=='-')\n      break;\n\
    \  }\n  if(i!=5)\n    return false;\n  std::string month=date.substr(0,2);\n \
    \ std::string day=date.substr(3,2);\n  std::string year=date.substr(6,4);\n  if(month[0]=='0')\n\
    \    month[0]=' ';\n  if(day[0]=='0')\n    day[0]=' ';\n  int m,d,y;\n  std::stringstream\
    \ ss1,ss2,ss3;\n  ss1<<month;\n  ss1>>m;\n  ss2<<day;\n  ss2>>d;\n  ss3<<year;\n\
    \  ss3>>y;\n  std::cout<<m<<\"\\n\"<<d<<\"\\n\"<<y<<\"\\n\";\n  if(m>12||m<1)\n\
    \    return false;\n  if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)\n  {\n  \
    \  if(d>31||d<1)\n      return false;\n  }\n  else if(m==4||m==6||m==9||m==11)\n\
    \  {\n    if(d>30||d<1)\n      return false;\n  }\n  else if(m==2)\n  {\n    if(d>29||d<1)\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: '3

    11

    2000

    15

    1

    2012

    6

    4

    2020

    1

    1

    2007

    3

    32

    2011

    4

    31

    3000

    6

    6

    2005

    21

    31

    2000

    4

    12

    2003

    '
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(!date.empty());\n\
    \  char* pEnd;\n  int day = strtol(date.substr(0,2).c_str(), &pEnd, 10);\n  int\
    \ month = strtol(date.substr(3,2).c_str(), &pEnd, 10);\n  int year = strtol(date.substr(6,4).c_str(),\
    \ &pEnd, 10);\n  bool leap = ((year % 4 == 0) && (year % 100 != 0)) || (year %\
    \ 400 == 0);\n  bool valid = true;\n  switch (month) {\n    case 1:\n    case\
    \ 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n    \
    \  if ((day > 31) || (day < 1)) {\n        valid = false;\n      }\n      break;\n\
    \    case 4:\n    case 6:\n    case 9:\n    case 11:\n      if ((day > 30) ||\
    \ (day < 1)) {\n        valid = false;\n      }\n      break;\n    case 2:\n \
    \     if (leap) {\n        if ((day > 29) || (day < 1)) {\n          valid = false;\n\
    \        }\n      } else {\n        if ((day > 28) || (day < 1)) {\n         \
    \ valid = false;\n        }\n      }\n      break;\n    default:\n      valid\
    \ = false;\n  }\n  if (month > 12 || month < 1) {\n    valid = false;\n  }\n \
    \ if (date[2] != '-' || date[5] != '-') {\n    valid = false;\n  }\n  return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_qmlr6ih: /tmp/tmp_qmlr6ih.cpp:73: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tint month, day, year;\n\
    \tif (date.empty())\n\t\treturn false;\n\tif (std::count(date.begin(), date.end(),\
    \ '-') != 2)\n\t\treturn false;\n\tsscanf(date.c_str(), \"%d-%d-%d\", &month,\
    \ &day, &year);\n\tif (month <= 0 || month > 12)\n\t\treturn false;\n\tif (day\
    \ <= 0 || day > 31)\n\t\treturn false;\n\tif (month == 2) {\n\t\tif (day > 29)\n\
    \t\t\treturn false;\n\t}\n\tif (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n\t\tif (day > 30)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133235
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Write your code here\n\
    \  std::regex regex(\"([0-9]{2})-([0-9]{2})-([0-9]{4})\");\n  std::smatch matches;\n\
    \  if(!std::regex_match(date, matches, regex)){\n      return false;\n  }\n  if(date.find(\"\
    -\") == std::string::npos){\n      return false;\n  }\n  std::stringstream stream(date);\n\
    \  int month, day, year;\n  stream >> month;\n  stream.ignore(1);\n  stream >>\
    \ day;\n  stream.ignore(1);\n  stream >> year;\n  if(month > 12 || month < 1 ||\
    \ year < 1){\n      return false;\n  }\n  if(month == 2){\n      if(day > 29 ||\
    \ day < 1){\n          return false;\n      }\n  }\n  else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n      if(day > 30 || day < 1){\n      \
    \    return false;\n      }\n  }\n  else{\n      if(day > 31 || day < 1){\n  \
    \        return false;\n      }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Split the input string\
    \ into individual words.\n  std::vector<std::string> words = split(date);\n  //\
    \ Check for invalid input.\n  if (words.size() != 3) {\n    return false;\n  }\n\
    \  // Extract the different parts from the date string.\n  int month = std::stoi(words[0]);\n\
    \  int day = std::stoi(words[1]);\n  int year = std::stoi(words[2]);\n  // Check\
    \ the validity of the month.\n  if (month < 1 || month > 12) {\n    return false;\n\
    \  }\n  // Check the validity of the day for months that have 31 days.\n  if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n    if (day < 1 || day > 31) {\n      return false;\n   \
    \ }\n  }\n  // Check the validity of the day for months that have 30 days.\n \
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day <\
    \ 1 || day > 30) {\n      return false;\n    }\n  }\n  // Check the validity of\
    \ the day for February.\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n\
    \      return false;\n    }\n  }\n  // This is a valid date.\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg270plkj.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpg270plkj.cpp:22:36: error: \u2018split\u2019 was not declared in this\
    \ scope\n   22 |   std::vector<std::string> words = split(date);\n      |    \
    \                                ^~~~~\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tbool val = true;\n\tstd::vector<std::string>\
    \ months{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\"\
    , \"10\", \"11\", \"12\"};\n\tstd::string day, mon, year;\n\tint d, m, y;\n\t\
    if (date.length() == 10) {\n\t\tmon = date.substr(0, 2);\n\t\tday = date.substr(3,\
    \ 2);\n\t\tyear = date.substr(6, 4);\n\t\t// cout << mon << ' ' << day << ' '\
    \ << year << endl;\n\t\tif (std::find(months.begin(), months.end(), mon) != months.end())\
    \ {\n\t\t\tm = std::stoi(mon);\n\t\t\t// cout << m << endl;\n\t\t\tif (m == 2)\
    \ {\n\t\t\t\tif (std::stoi(day) > 29 || std::stoi(day) < 1) {\n\t\t\t\t\tval =\
    \ false;\n\t\t\t\t}\n\t\t\t} else if (m == 1 || m == 3 || m == 5 || m == 7 ||\
    \ m == 8 || m == 10 || m == 12) {\n\t\t\t\tif (std::stoi(day) > 31 || std::stoi(day)\
    \ < 1) {\n\t\t\t\t\tval = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (std::stoi(day)\
    \ > 30 || std::stoi(day) < 1) {\n\t\t\t\t\tval = false;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t} else {\n\t\t\tval = false;\n\t\t}\n\t} else {\n\t\tval = false;\n\t}\n\treturn\
    \ val;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.length()!=10)\n\
    \    {\n        return false;\n    }\n    int day;\n    int month;\n    int year;\n\
    \    char sep1,sep2;\n    std::stringstream ss(date);\n    ss>>month>>sep1>>day>>sep2>>year;\n\
    \    std::cout<<day<<month<<year<<sep1<<sep2<<std::endl;\n    if(sep1!='-'||sep2!='-')\n\
    \    {\n        return false;\n    }\n    else\n    {\n        if(day<1||day>31)\n\
    \        {\n            return false;\n        }\n        else if(month<1||month>12)\n\
    \        {\n            return false;\n        }\n        else if(year<1)\n  \
    \      {\n            return false;\n        }\n        else\n        {\n    \
    \        return true;\n        }\n    }\n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp75vo2f2u: /tmp/tmp75vo2f2u.cpp:66: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: '1132000--

    1152012--

    462020--

    112007--

    3232011--

    3143000--

    '
  timestamp: 1660133235
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << \"Checking:\
    \ \" << date << '\\n';\n    int day,month,year;\n    int bool_flag=0;\n    bool_flag=sscanf(date.c_str(),\"\
    %d-%d-%d\",&month,&day,&year);\n    if(bool_flag==3)\n    {\n        if(day<=31&&day>=1&&month<=12&&month>=1&&(date[2]=='-')&&(date[5]=='-'))\n\
    \        {\n            if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)\n\
    \            {\n                if(day<=31)\n                {\n             \
    \       std::cout << \"Result: \" << \"true\" << '\\n';\n                    return\
    \ true;\n                }\n                else{\n                    std::cout\
    \ << \"Result: \" << \"false\" << '\\n';\n                    return false;\n\
    \                }\n            }\n            else if(month==4||month==6||month==9||month==11)\n\
    \            {\n                if(day<=30)\n                {\n             \
    \       std::cout << \"Result: \" << \"true\" << '\\n';\n                    return\
    \ true;\n                }\n                else{\n                    std::cout\
    \ << \"Result: \" << \"false\" << '\\n';\n                    return false;\n\
    \                }\n            }\n            else if(month==2)\n           \
    \ {\n                if(day<=29)\n                {\n                    std::cout\
    \ << \"Result: \" << \"true\" << '\\n';\n                    return true;\n  \
    \              }\n                else{\n                    std::cout << \"Result:\
    \ \" << \"false\" << '\\n';\n                    return false;\n             \
    \   }\n            }\n        }\n        else{\n            std::cout << \"Result:\
    \ \" << \"false\" << '\\n';\n            return false;\n        }\n    }\n   \
    \ else{\n        std::cout << \"Result: \" << \"false\" << '\\n';\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: "Checking: 03-11-2000\nResult: true\nChecking: 15-01-2012\nResult: false\n\
    Checking: 04-0-2040\nResult: false\nChecking: 06-04-2020\nResult: true\nChecking:\
    \ 01-01-2007\nResult: true\nChecking: 03-32-2011\nResult: false\nChecking: \n\
    Result: false\nChecking: 04-31-3000\nResult: false\nChecking: 06-06-2005\nResult:\
    \ true\nChecking: 21-31-2000\nResult: false\nChecking: 04-12-2003\nResult: true\n\
    Checking: 04122003\nResult: false\nChecking: 20030412\nResult: false\nChecking:\
    \ 2003-04\nResult: false\nChecking: 2003-04-12\nResult: false\nChecking: 04-2003\n\
    Result: false\n"
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code goes here,\
    \ change 'false' to correct condition\n  std::string dd,mm,yyyy;\n  // extract\
    \ all values from date string\n  dd = date.substr(0,2);\n  mm = date.substr(3,2);\n\
    \  yyyy = date.substr(6,4);\n  // check if any of the values is empty\n  if(dd.empty()\
    \ || mm.empty() || yyyy.empty()) return false;\n  // check if all the values are\
    \ numeric\n  if(!std::all_of(dd.begin(), dd.end(), ::isdigit) || !std::all_of(mm.begin(),\
    \ mm.end(), ::isdigit) || !std::all_of(yyyy.begin(), yyyy.end(), ::isdigit)) return\
    \ false;\n  // check if month is between 1-12\n  if(std::stoi(mm)<1 || std::stoi(mm)>12)\
    \ return false;\n  // check if days are within correct range\n  if(std::stoi(mm)\
    \ == 1 || std::stoi(mm) == 3 || std::stoi(mm) == 5 || std::stoi(mm) == 7 || std::stoi(mm)\
    \ == 8 || std::stoi(mm) == 10 || std::stoi(mm) == 12) {\n    if(std::stoi(dd)\
    \ < 1 || std::stoi(dd) > 31) return false;\n  }\n  else if(std::stoi(mm) == 4\
    \ || std::stoi(mm) == 6 || std::stoi(mm) == 9 || std::stoi(mm) == 11) {\n    if(std::stoi(dd)\
    \ < 1 || std::stoi(dd) > 30) return false;\n  }\n  else if(std::stoi(mm) == 2)\
    \ {\n    if(std::stoi(dd) < 1 || std::stoi(dd) > 29) return false;\n  }\n  //\
    \ check if the format is mm-dd-yyyy\n  if(date[2] != '-' || date[5] != '-') return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6h1sgkx4: /tmp/tmp6h1sgkx4.cpp:50: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::regex r(\"^\\\\\
    d{2}-\\\\d{2}-\\\\d{4}$\");\n    std::regex r1(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\
    \\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\
    \\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$\");\n    std::regex r2(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\
    \\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\
    \\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrwjlezm.cpp:23:19: warning: missing terminating \" character\n\
    \   23 |     std::regex r2(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\\
    1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0\n      |                   ^\n\
    /tmp/tmpyrwjlezm.cpp:23:19: error: missing terminating \" character\n   23 | \
    \    std::regex r2(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\
    \\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\
    \\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyrwjlezm.cpp: In function \u2018bool valid_date(std::string)\u2019:\n\
    /tmp/tmpyrwjlezm.cpp:24:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   24 | }\n      | ^\n/tmp/tmpyrwjlezm.cpp:24:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpyrwjlezm.cpp:24:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// split string\n\t// std::string\
    \ sub = date.substr(3, 2);\n\t// int ssub = std::stoi(sub);\n\t// if (ssub >=\
    \ 1 && ssub <= 31 && ssub >= 1 && ssub <= 30 && ssub >= 1 && ssub <= 29) {\n\t\
    // \treturn true;\n\t// } else {\n\t// \treturn false;\n\t// }\n\tint day = 0;\n\
    \tint month = 0;\n\tint year = 0;\n\tstd::string delimiter = \"-\";\n\tsize_t\
    \ pos = 0;\n\tstd::string token;\n\tint count = 0;\n\twhile ((pos = date.find(delimiter))\
    \ != std::string::npos) {\n\t\ttoken = date.substr(0, pos);\n\t\t// std::cout\
    \ << token << std::endl;\n\t\tif (count == 0) {\n\t\t\tmonth = std::stoi(token);\n\
    \t\t} else if (count == 1) {\n\t\t\tday = std::stoi(token);\n\t\t} else if (count\
    \ == 2) {\n\t\t\tyear = std::stoi(token);\n\t\t}\n\t\tdate.erase(0, pos + delimiter.length());\n\
    \t\tcount++;\n\t}\n\tyear = std::stoi(date);\n\t// std::cout << \"Day \" << day\
    \ << std::endl;\n\t// std::cout << \"Month \" << month << std::endl;\n\t// std::cout\
    \ << \"Year \" << year << std::endl;\n\tif (day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 0) {\n\t\treturn false;\n\t}\n\tif (month == 2) {\n\t\t\
    if (day > 29) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n\t\tif (day > 30) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  //your code here\n  assert(date.length()\
    \ != 0);\n  // if (date.length() == 0)\n  //   return false;\n  bool valid = true;\n\
    \  std::vector<std::string> date_vector;\n  std::stringstream ss(date);\n  std::string\
    \ temp;\n  while (getline(ss, temp, '-')) {\n    date_vector.push_back(temp);\n\
    \  }\n  if (date_vector.size() != 3)\n    return false;\n  if (stoi(date_vector[0])\
    \ > 12 || stoi(date_vector[0]) < 1)\n    return false;\n  if (stoi(date_vector[1])\
    \ > 31 || stoi(date_vector[1]) < 1)\n    return false;\n  if (stoi(date_vector[0])\
    \ == 1 || stoi(date_vector[0]) == 3 || stoi(date_vector[0]) == 5 || stoi(date_vector[0])\
    \ == 7 || stoi(date_vector[0]) == 8 || stoi(date_vector[0]) == 10 || stoi(date_vector[0])\
    \ == 12) {\n    if (stoi(date_vector[1]) > 31)\n      return false;\n  }\n  if\
    \ (stoi(date_vector[0]) == 4 || stoi(date_vector[0]) == 6 || stoi(date_vector[0])\
    \ == 9 || stoi(date_vector[0]) == 11) {\n    if (stoi(date_vector[1]) > 30)\n\
    \      return false;\n  }\n  if (stoi(date_vector[0]) == 2) {\n    if (stoi(date_vector[1])\
    \ > 29)\n      return false;\n  }\n  if (stoi(date_vector[2]) < 2000)\n    return\
    \ false;\n  return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkxyty6oe: /tmp/tmpkxyty6oe.cpp:22: bool valid_date(std::string): Assertion
    `date.length() != 0'' failed.

    '
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::vector<int> months_count_days\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  int year = std::stoi(date.substr(6,\
    \ 4));\n  int month = std::stoi(date.substr(0, 2));\n  int day = std::stoi(date.substr(3,\
    \ 2));\n  if(date.length() != 10)\n    return false;\n  if(year % 4 == 0)\n  \
    \  months_count_days[1] = 29;\n  if(month < 1 || month > 12)\n    return false;\n\
    \  if(day < 1 || day > months_count_days[month - 1])\n    return false;\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 6) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660133235
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length() == 0)\
    \ return false;\n  std::vector<std::string> v;\n  std::string delimiter = \"-\"\
    ;\n  size_t pos = 0;\n  std::string token;\n  while ((pos = date.find(delimiter))\
    \ != std::string::npos) {\n    token = date.substr(0, pos);\n    v.push_back(token);\n\
    \    date.erase(0, pos + delimiter.length());\n  }\n  v.push_back(date);\n  if(v.size()!=3)\
    \ return false;\n  int mm = stoi(v[0]);\n  int dd = stoi(v[1]);\n  int yyyy =\
    \ stoi(v[2]);\n  if(mm < 1 || mm > 12) return false;\n  if(mm==2){\n    if(dd\
    \ < 1 || dd > 29) return false;\n  }\n  else if(mm==1 || mm==3 || mm==5 || mm==7\
    \ || mm==8 || mm==10 || mm==12){\n    if(dd < 1 || dd > 31) return false;\n  }\n\
    \  else if(mm==4 || mm==6 || mm==9 || mm==11){\n    if(dd < 1 || dd > 30) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133235
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex r(R\"(^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$)\"\
    );\n  if (std::regex_match(date, r)) {\n    std::stringstream ss(date);\n    std::string\
    \ s;\n    std::vector<int> v;\n    while (std::getline(ss, s, '-')) {\n      v.push_back(std::stoi(s));\n\
    \    }\n    int month = v[0];\n    int day = v[1];\n    if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n      if (day > 31) return false;\n    } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n      if (day > 30) return false;\n    }\
    \ else if (month == 2) {\n      if (day > 29) return false;\n    } else {\n  \
    \    return false;\n    }\n    return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size() != 10){\n\
    \        return false;\n    }\n    int dd = stoi(date.substr(0,2));\n    int mm\
    \ = stoi(date.substr(3,2));\n    int yyyy = stoi(date.substr(6,4));\n    if(dd\
    \ == 0 || mm == 0 || yyyy == 0){\n        return false;\n    }\n    switch(mm){\n\
    \        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case\
    \ 8:\n        case 10:\n        case 12:\n            if(dd > 31 || dd < 1){\n\
    \                return false;\n            }\n            break;\n        case\
    \ 4:\n        case 6:\n        case 9:\n        case 11:\n            if(dd >\
    \ 30 || dd < 1){\n                return false;\n            }\n            break;\n\
    \        case 2:\n            if(dd > 29 || dd < 1){\n                return false;\n\
    \            }\n            break;\n        default:\n            return false;\n\
    \    }\n    if(mm > 12 || mm < 1){\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsvzeyntr: /tmp/tmpsvzeyntr.cpp:66: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    vector<int> month_31\
    \ {1,3,5,7,8,10,12};\n    vector<int> month_30 {4,6,9,11};\n    bool is_31 = 0;\n\
    \    bool is_30 = 0;\n    bool is_29 = 0;\n    bool is_leap = 0;\n    int year\
    \ = 0;\n    int day = 0;\n    int month = 0;\n    if (date.empty()) {\n      \
    \  return false;\n    }\n    std::string month_s = date.substr(0,2);\n    std::string\
    \ day_s = date.substr(3,2);\n    std::string year_s = date.substr(6,4);\n    std::stringstream\
    \ ss1 (month_s);\n    std::stringstream ss2 (day_s);\n    std::stringstream ss3\
    \ (year_s);\n    ss1 >> month;\n    ss2 >> day;\n    ss3 >> year;\n    if (year%4\
    \ == 0 && year%100 != 0) {\n        is_leap = 1;\n    }\n    if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n        is_31 = 1;\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        is_30 = 1;\n    }\n    if (month == 2) {\n \
    \       is_29 = 1;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (day > 29 && is_29 == 1) {\n        return false;\n    }\n    if (day > 30\
    \ && is_30 == 1) {\n        return false;\n    }\n    if (day > 31 && is_31 ==\
    \ 1) {\n        return false;\n    }\n    if (day > 28 && is_leap == 1) {\n  \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_vqaoks2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_vqaoks2.cpp:21:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   21 |     vector<int> month_31 {1,3,5,7,8,10,12};\n      |     ^~~~~~\n\
    /tmp/tmp_vqaoks2.cpp:21:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_vqaoks2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_vqaoks2.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp_vqaoks2.cpp:21:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   21 |     vector<int>\
    \ month_31 {1,3,5,7,8,10,12};\n      |            ^~~\n/tmp/tmp_vqaoks2.cpp:22:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   22 |     vector<int>\
    \ month_30 {4,6,9,11};\n      |            ^~~\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex pattern(\"^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([1-2][0-9][0-9][0-9])$\"\
    );\n  return regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex pattern (\"\
    ^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\");\n  return\
    \ std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpj3ggahy8: /tmp/tmpj3ggahy8.cpp:33: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    stringstream ss(date);\n\
    \    int month, day, year;\n    char ch;\n    ss >> month >> ch >> day >> ch >>\
    \ year;\n    if (ch != '-') return false;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day\
    \ > 29) return false;\n    if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if (day > 30) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7eauy138.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7eauy138.cpp:21:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   21 |     stringstream\
    \ ss(date);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7eauy138.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmp7eauy138.cpp:24:5:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   24 |     ss >> month\
    \ >> ch >> day >> ch >> year;\n      |     ^~\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Write your code here\n\
    \  std::string dd, mm, yyyy;\n  std::string month[12] = {\"01\", \"02\", \"03\"\
    , \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n \
    \ std::string day[7] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\
    , \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\"};\n  int i = 0;\n  for (auto it = date.begin();\
    \ it != date.end(); it++) {\n    if (*it == '-') {\n      mm = date.substr(0,\
    \ i);\n      dd = date.substr(i + 1, 2);\n      yyyy = date.substr(i + 4, 4);\n\
    \      break;\n    }\n    i++;\n  }\n  int flag = 0;\n  for (int i = 0; i < 12;\
    \ i++) {\n    if (mm == month[i]) {\n      flag = 1;\n      break;\n    }\n  }\n\
    \  if (flag == 0) {\n    return false;\n  }\n  flag = 0;\n  for (int i = 0; i\
    \ < 31; i++) {\n    if (dd == day[i]) {\n      flag = 1;\n      break;\n    }\n\
    \  }\n  if (flag == 0) {\n    return false;\n  }\n  std::string ::size_type sz;\n\
    \  int year = std::stoi(yyyy, &sz);\n  if (year < 2000) {\n    return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp67tw4403.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp67tw4403.cpp:24:209: error: too many initializers for \u2018std::string\
    \ [7]\u2019 {aka \u2018std::__cxx11::basic_string<char> [7]\u2019}\n   24 |  \
    \ std::string day[7] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\
    , \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\"};\n      |                                  \
    \                                                                            \
    \                                                                            \
    \                       ^\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string str = \"0123456789\"\
    ;\n  std::string str1 = \"0123456789-\";\n  if (date.size() != 10) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < 10; i++) {\n    if (str1.find(date[i]) ==\
    \ std::string::npos) {\n      return false;\n    }\n  }\n  std::string dd = date.substr(0,\
    \ 2);\n  std::string mm = date.substr(3, 2);\n  std::string yyyy = date.substr(6,\
    \ 4);\n  std::stringstream geek1(dd);\n  std::stringstream geek2(mm);\n  std::stringstream\
    \ geek3(yyyy);\n  int d;\n  int m;\n  int y;\n  geek1 >> d;\n  geek2 >> m;\n \
    \ geek3 >> y;\n  if (d < 1 || d > 31) {\n    return false;\n  }\n  if (m < 1 ||\
    \ m > 12) {\n    return false;\n  }\n  if (y < 1900 || y > 2020) {\n    return\
    \ false;\n  }\n  if (m == 2) {\n    if (d > 29) {\n      return false;\n    }\n\
    \  }\n  else if (m == 4 || m == 6 || m == 9 || m == 11) {\n    if (d > 30) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmphn0ptoxe: /tmp/tmphn0ptoxe.cpp:67: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tstringstream ss(date);\n\
    \tint d, m, y;\n\tchar ch;\n\tss >> m >> ch >> d >> ch >> y;\n\tbool isvalid =\
    \ ss.eof() && !ss.fail();\n\tif (isvalid) {\n\t\tif (m >= 1 && m <= 12) {\n\t\t\
    \tif (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n\
    \t\t\t\tif (d >= 1 && d <= 31) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t\telse if (m == 4 || m == 6 || m == 9 || m == 11) {\n\t\t\t\tif (d >= 1 &&\
    \ d <= 30) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (m ==\
    \ 2) {\n\t\t\t\tif (d >= 1 && d <= 29) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3e1q3g8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpa3e1q3g8.cpp:21:2: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   21 |  stringstream\
    \ ss(date);\n      |  ^~~~~~~~~~~~\n      |  std::stringstream\nIn file included\
    \ from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpa3e1q3g8.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpa3e1q3g8.cpp:24:2:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   24 |  ss >> m >> ch\
    \ >> d >> ch >> y;\n      |  ^~\n"
  stdout: ''
  timestamp: 1660133234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool date_flag = false;\n\
    \    if (date.length() == 10) {\n        std::string::size_type sz;\n        int\
    \ month = std::stoi(date.substr(0, 2), &sz);\n        int day = std::stoi(date.substr(3,\
    \ 2), &sz);\n        int year = std::stoi(date.substr(6, 4), &sz);\n        std::cout\
    \ << month << day << year << std::endl;\n        std::cout << date.substr(2, 1)\
    \ << std::endl;\n        std::cout << date.substr(5, 1) << std::endl;\n      \
    \  if (date.substr(2, 1) == \"-\" && date.substr(5, 1) == \"-\") {\n         \
    \   std::cout << \"pass1\" << std::endl;\n            if (month >= 1 && month\
    \ <= 12) {\n                std::cout << \"pass2\" << std::endl;\n           \
    \     if (day >= 1 && day <= 31) {\n                    std::cout << \"pass3\"\
    \ << std::endl;\n                    if (year >= 0) {\n                      \
    \  std::cout << \"pass4\" << std::endl;\n                        date_flag = true;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return date_flag;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz7blbz5h: /tmp/tmpz7blbz5h.cpp:55: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: '3112000

    -

    -

    pass1

    pass2

    pass3

    pass4

    1512012

    -

    -

    pass1

    642020

    -

    -

    pass1

    pass2

    pass3

    pass4

    112007

    -

    -

    pass1

    pass2

    pass3

    pass4

    3322011

    -

    -

    pass1

    pass2

    4313000

    -

    -

    pass1

    pass2

    pass3

    pass4

    '
  timestamp: 1660133237
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex my_regex(\"\\\
    \\d{2}-\\\\d{2}-\\\\d{4}\");\n  if (!std::regex_match(date, my_regex))\n    return\
    \ false;\n  int month = stoi(date.substr(0, 2));\n  int day = stoi(date.substr(3,\
    \ 2));\n  int year = stoi(date.substr(6, 4));\n  if (month < 1 || month > 12)\n\
    \    return false;\n  if (month == 2) {\n    if (year % 4 == 0) {\n      if (day\
    \ < 1 || day > 29)\n        return false;\n    } else {\n      if (day < 1 ||\
    \ day > 28)\n        return false;\n    }\n  } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \    if (day < 1 || day > 31)\n      return false;\n  } else {\n    if (day <\
    \ 1 || day > 30)\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::regex re(\"\\\\\
    d{2}-\\\\d{2}-\\\\d{4}\");\n    if(regex_match(date, re)){\n        int month,\
    \ day, year;\n        char temp[5];\n        std::stringstream ss(date);\n   \
    \     ss >> temp;\n        month = atoi(temp);\n        ss >> temp;\n        day\
    \ = atoi(temp);\n        ss >> temp;\n        year = atoi(temp);\n        if(month\
    \ < 1 || month > 12){\n            return false;\n        }\n        if(month\
    \ == 2){\n            if(day < 1 || day > 29){\n                return false;\n\
    \            }\n        }\n        else if(month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n            if(day\
    \ < 1 || day > 31){\n                return false;\n            }\n        }\n\
    \        else{\n            if(day < 1 || day > 30){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: '*** stack smashing detected ***: terminated

    '
  stdout: ''
  timestamp: 1660133240
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    stringstream ss(date);\n\
    \    int day, month, year;\n    char c;\n    if(!(ss >> month >> c >> day >> c\
    \ >> year)) return false;\n    if(!(1 <= month && month <= 12)) return false;\n\
    \    if(!(1 <= day && day <= 31)) return false;\n    if(!(1 <= year && year <=\
    \ 9999)) return false;\n    if(day == 31 && (month == 2 || month == 4 || month\
    \ == 6 || month == 9 || month == 11)) return false;\n    if(day == 30 && month\
    \ == 2) return false;\n    if(day == 29 && month == 2 && !(year % 400 == 0 ||\
    \ (year % 4 == 0 && year % 100 != 0))) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3a3nx112.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp3a3nx112.cpp:21:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   21 |     stringstream\
    \ ss(date);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3a3nx112.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmp3a3nx112.cpp:24:10:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   24 |     if(!(ss >>\
    \ month >> c >> day >> c >> year)) return false;\n      |          ^~\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdzj4vbhl: /tmp/tmpdzj4vbhl.cpp:26: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133237
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    using namespace std;\n\
    \    vector<int> days_in_months{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n    bool valid = false;\n    string delimiter = \"-\";\n    size_t pos\
    \ = 0;\n    string token;\n    int i = 0;\n    int days;\n    int month;\n   \
    \ int year;\n    string month_char_tmp;\n    string year_char_tmp;\n    string\
    \ days_char_tmp;\n    while ((pos = date.find(delimiter)) != string::npos) {\n\
    \        token = date.substr(0, pos);\n        if (i == 0) {\n            month_char_tmp\
    \ = token;\n            month = stoi(month_char_tmp);\n        } else if (i ==\
    \ 1) {\n            days_char_tmp = token;\n            days = stoi(days_char_tmp);\n\
    \        } else if (i == 2) {\n            year_char_tmp = token;\n          \
    \  year = stoi(year_char_tmp);\n        }\n        date.erase(0, pos + delimiter.length());\n\
    \        i++;\n    }\n    if (days <= 0 || days > 31) {\n        valid = false;\n\
    \    } else if (month <= 0 || month > 12) {\n        valid = false;\n    } else\
    \ if (year <= 0) {\n        valid = false;\n    } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if (days <= days_in_months[month]) {\n            valid = true;\n\
    \        } else {\n            valid = false;\n        }\n    } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (days <= days_in_months[month])\
    \ {\n            valid = true;\n        } else {\n            valid = false;\n\
    \        }\n    } else if (month == 2) {\n        if (days <= days_in_months[month])\
    \ {\n            valid = true;\n        } else {\n            valid = false;\n\
    \       \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpju151mfb.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpju151mfb.cpp:74:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   74 | int main() {\n      |            ^\n/tmp/tmpju151mfb.cpp:92:1:\
    \ error: expected \u2018}\u2019 at end of input\n   92 | }\n      | ^\n/tmp/tmpju151mfb.cpp:67:28:\
    \ note: to match this \u2018{\u2019\n   67 |     } else if (month == 2) {\n  \
    \    |                            ^\n/tmp/tmpju151mfb.cpp:92:1: error: expected\
    \ \u2018}\u2019 at end of input\n   92 | }\n      | ^\n/tmp/tmpju151mfb.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpju151mfb.cpp:92:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   92 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length() != 10){\n\
    \    return false;\n  }\n  else{\n    stringstream ss(date);\n    string temp;\n\
    \    string arr[3];\n    int count = 0;\n    while(getline(ss, temp, '-')){\n\
    \      arr[count] = temp;\n      count++;\n    }\n    int month = stoi(arr[0]);\n\
    \    int day = stoi(arr[1]);\n    int year = stoi(arr[2]);\n    if(month < 1 ||\
    \ month > 12){\n      return false;\n    }\n    else if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \      if(day < 1 || day > 31){\n        return false;\n      }\n    }\n    else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11){\n      if(day < 1\
    \ || day > 30){\n        return false;\n      }\n    }\n    else if(month == 2){\n\
    \      if(day < 1 || day > 29){\n        return false;\n      }\n    }\n    if(year\
    \ < 1900 || year > 2100){\n      return false;\n    }\n    else{\n      return\
    \ true;\n    }\n  }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgx1q45ic.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgx1q45ic.cpp:25:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   25 |     stringstream\
    \ ss(date);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgx1q45ic.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpgx1q45ic.cpp:26:5:\
    \ error: \u2018string\u2019 was not declared in this scope\n   26 |     string\
    \ temp;\n      |     ^~~~~~\n/tmp/tmpgx1q45ic.cpp:26:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgx1q45ic.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 fr"
  stdout: ''
  timestamp: 1660133237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    char delim[] = \"-\"\
    ;\n    char *token;\n    token = strtok(const_cast<char*>(date.c_str()), delim);\n\
    \    std::string mon(token);\n    token = strtok(NULL, delim);\n    std::string\
    \ day(token);\n    token = strtok(NULL, delim);\n    std::string year(token);\n\
    \    int month = std::stoi(mon);\n    int days = std::stoi(day);\n    int years\
    \ = std::stoi(year);\n    if (month == 2) {\n        if ((years % 4 == 0 && years\
    \ % 100 != 0) || (years % 400 == 0)) {\n            if (days > 29)\n         \
    \       return false;\n        } else {\n            if (days > 28)\n        \
    \        return false;\n        }\n    } else if (month == 1 || month == 3 ||\
    \ month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n  \
    \      if (days > 31)\n            return false;\n    } else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (days > 30)\n       \
    \     return false;\n    } else {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl7n9i5eb: /tmp/tmpl7n9i5eb.cpp:55: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133237
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Check if the date string\
    \ is empty\n  if (date.empty()) {\n    return false;\n  }\n  // Check if the date\
    \ is in the correct format\n  // mm-dd-yyyy\n  std::regex format(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\"\
    );\n  if (!std::regex_match(date, format)) {\n    return false;\n  }\n  // Extract\
    \ the month, day and year from the date string\n  std::stringstream ss(date);\n\
    \  std::string month, day, year;\n  std::getline(ss, month, '-');\n  std::getline(ss,\
    \ day, '-');\n  std::getline(ss, year, '-');\n  // Check if the month is correct\n\
    \  int month_number = stoi(month);\n  if (month_number > 12 || month_number <=\
    \ 0) {\n    return false;\n  }\n  // Check if the day is correct\n  int day_number\
    \ = stoi(day);\n  if (day_number > 31 || day_number <= 0) {\n    return false;\n\
    \  }\n  // Check if the day is correct for months: April, June, September, November\n\
    \  if (month_number == 4 || month_number == 6 || month_number == 9 || month_number\
    \ == 11) {\n    if (day_number > 30) {\n      return false;\n    }\n  }\n  //\
    \ Check if the day is correct for February\n  if (month_number == 2) {\n    if\
    \ (day_number > 29) {\n      return false;\n    }\n  }\n  // Check if the year\
    \ is correct\n  int year_number = stoi(year);\n  if (year_number < 0) {\n    return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133240
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  /*\n  std::vector<std::string>\
    \ months{\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"\
    July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n\
    \  std::vector<int> days_count{31,28,31,30,31,30,31,31,30,31,30,31};\n  std::vector<std::string>\
    \ date_splitted = split_string(date, '-');\n  for(auto i : date_splitted) {\n\
    \    if(months.find(i) == months.end()) {\n      return false;\n    }\n  }\n \
    \ */\n  //std::string date = \"10-05-2020\";\n  std::string delimiter = \"-\"\
    ;\n  size_t pos = 0;\n  std::string token;\n  std::vector<std::string> date_parts;\n\
    \  //std::vector<int> date_parts_int;\n  while ((pos = date.find(delimiter)) !=\
    \ std::string::npos) {\n    token = date.substr(0, pos);\n    date_parts.push_back(token);\n\
    \    date.erase(0, pos + delimiter.length());\n  }\n  date_parts.push_back(date);\n\
    \  //std::cout << \"first \" << date_parts[0] << std::endl;\n  //std::cout <<\
    \ \"second \" << date_parts[1] << std::endl;\n  //std::cout << \"third \" << date_parts[2]\
    \ << std::endl;\n  //std::cout << \"test\" << date_parts.size() << std::endl;\n\
    \  assert(date_parts.size() == 3);\n  std::stringstream ss;\n  for(auto i : date_parts)\
    \ {\n    ss << i;\n  }\n  //std::cout << \"this ss.str() \" << ss.str() << std::endl;\n\
    \  if(ss.str().length() != 8) {\n    return false;\n  }\n  std::string months\
    \ = date_parts[0];\n  int month = std::stoi(\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd94_epwx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpd94_epwx.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpd94_epwx.cpp:58:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   58 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   std::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\
    );\n    if(!std::regex_match(date, pattern))\n    {\n      return false;\n   \
    \ }\n    else\n    {\n      std::string token;\n      std::stringstream ss(date);\n\
    \      int date1 = -1;\n      int date2 = -1;\n      int date3 = -1;\n      int\
    \ count = 0;\n      while(std::getline(ss, token, '-'))\n      {\n        if(count\
    \ == 0)\n        {\n          date1 = std::stoi(token);\n        }\n        else\
    \ if(count == 1)\n        {\n          date2 = std::stoi(token);\n        }\n\
    \        else if(count == 2)\n        {\n          date3 = std::stoi(token);\n\
    \        }\n        count++;\n      }\n      if(date1 < 1 || date1 > 12)\n   \
    \   {\n        return false;\n      }\n      if(date1 == 1 || date1 == 3 || date1\
    \ == 5 || date1 == 7 || date1 == 8 || date1 == 10 || date1 == 12)\n      {\n \
    \       if(date2 < 1 || date2 > 31)\n        {\n          return false;\n    \
    \    }\n      }\n      else if(date1 == 4 || date1 == 6 || date1 == 9 || date1\
    \ == 11)\n      {\n        if(date2 < 1 || date2 > 30)\n        {\n          return\
    \ false;\n        }\n      }\n      else if(date1 == 2)\n      {\n        if(date2\
    \ < 1 || date2 > 29)\n        {\n          return false;\n        }\n      }\n\
    \      return true;\n    }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex r(\"^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\"\
    );\n  return std::regex_match(date, r);\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6mo_l7t8: /tmp/tmp6mo_l7t8.cpp:33: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex re1(R\"(^\\\
    d{2}-\\d{2}-\\d{4}$)\");\n  bool passed1 = std::regex_match(date, re1);\n  if\
    \ (!passed1) return false;\n  std::vector<std::string> tokens;\n  std::stringstream\
    \ check1(date);\n  std::string temp;\n  while (getline(check1, temp, '-')) {\n\
    \    tokens.push_back(temp);\n  }\n  int month = std::stoi(tokens[0]);\n  int\
    \ day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if (year\
    \ < 0) return false;\n  if (month < 1 || month > 12) return false;\n  if (month\
    \ == 2) {\n    if (day < 1 || day > 29) return false;\n  } else if (month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n    if (day < 1 || day > 31) return false;\n  } else {\n    if (day\
    \ < 1 || day > 30) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool isValidFormat =\
    \ false;\n    std::regex validFormat (\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\"\
    );\n    if (std::regex_match (date,validFormat)) {\n        isValidFormat = true;\n\
    \    }\n    if(!isValidFormat) return false;\n    std::stringstream ss;\n    ss\
    \ << date;\n    std::string dateStr[3];\n    int dateInt[3];\n    for(int i =\
    \ 0; i < 3; i++) {\n        getline(ss, dateStr[i], '-');\n        dateInt[i]\
    \ = stoi(dateStr[i]);\n    }\n    int month = dateInt[0];\n    int day = dateInt[1];\n\
    \    int year = dateInt[2];\n    bool result = false;\n    if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if(day <= 31 && day >= 1) {\n            result = true;\n       \
    \ }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if(day <= 30 && day >= 1) {\n            result = true;\n       \
    \ }\n    }\n    else if(month == 2) {\n        if(day <= 29 && day >= 1) {\n \
    \           result = true;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size() == 0)\n\
    \        return false;\n    else if(date.size() != 10)\n        return false;\n\
    \    else if(date[2] != '-' || date[5] != '-')\n        return false;\n    else{\n\
    \        //get the day\n        std::string day = date.substr(0,2);\n        //get\
    \ the month\n        std::string month = date.substr(3,2);\n        //get the\
    \ year\n        std::string year = date.substr(6,4);\n        // std::cout <<\
    \ \"day \" << day << \" month \" << month << \" year \" << year << '\\n';\n  \
    \      //check for the day for months\n        if(std::stoi(month) == 1 || std::stoi(month)\
    \ == 3 || std::stoi(month) == 5 || std::stoi(month) == 7 || std::stoi(month) ==\
    \ 8 || std::stoi(month) == 10 || std::stoi(month) == 12){\n            if(std::stoi(day)\
    \ < 1 || std::stoi(day) > 31)\n                return false;\n        }\n    \
    \    else if(std::stoi(month) == 4 || std::stoi(month) == 6 || std::stoi(month)\
    \ == 9 || std::stoi(month) == 11){\n            if(std::stoi(day) < 1 || std::stoi(day)\
    \ > 30)\n                return false;\n        }\n        else if(std::stoi(month)\
    \ == 2){\n            if(std::stoi(day) < 1 || std::stoi(day) > 29)\n        \
    \        return false;\n        }\n        else\n            return false;\n \
    \       //check for the year\n        if(std::stoi(year) < 1)\n            return\
    \ false;\n        //check for the month\n        if(std::stoi(month) < 1 || std::stoi(month)\
    \ > 12)\n            return false;\n        return true;\n    }\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwsjz9whb: /tmp/tmpwsjz9whb.cpp:62: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.size() == 0)\n\
    \t\treturn false;\n\tstd::string pattern = \"(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])-[0-9]{4}\"\
    ;\n\tregex r(pattern);\n\tsmatch m;\n\tregex_search(date, m, r);\n\tstd::string\
    \ month = m[1];\n\tstd::string day = m[2];\n\t//std::cout << month << \" \" <<\
    \ day << \" \" << m[3] << endl;\n\t//std::cout << \"check\" << endl;\n\tif (month\
    \ == \"02\" && stoi(day) > 29) {\n\t\treturn false;\n\t}\n\tif ((month == \"04\"\
    \ || month == \"06\" || month == \"09\" || month == \"11\") && stoi(day) > 30)\
    \ {\n\t\treturn false;\n\t}\n\tif ((month == \"01\" || month == \"03\" || month\
    \ == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month\
    \ == \"12\") && stoi(day) > 31) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8fwvpaa6.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8fwvpaa6.cpp:24:2: error: \u2018regex\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::regex\u2019?\n   24 |  regex r(pattern);\n\
    \      |  ^~~~~\n      |  std::__cxx11::regex\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8fwvpaa6.cpp:2:\n/usr/include/c++/9/bits/regex.h:828:32:\
    \ note: \u2018std::__cxx11::regex\u2019 declared here\n  828 |   typedef basic_regex<char>\
    \    regex;\n      |                                ^~~~~\n/tmp/tmp8fwvpaa6.cpp:25:2:\
    \ error: \u2018smatch\u2019 was not declared in this scope\n   25 |  smatch m;\n\
    \      |  ^~~~~~\n/tmp/tmp8fwvpaa6.cpp:25:2: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8fwvpaa6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1977:50:\
    \ note:   \u2018std::__cxx11::smatch\u2019\n 1977 |   typedef match_results<string::const_iterator>\
    \  smatch;\n      |                                                  ^~~~~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8fwvpaa6.cpp:2:\n/usr/include/c++/9/regex:77:11:\
    \ note:   \u2018std::pmr::smatch\u2019\n   77 |     using smatch  = match_results<string::const_iterator>;\n\
    \      |           ^~~~~~\n/tmp/tmp8fwvpaa6.cpp:26:21: error: \u2018m\u2019 was\
    \ not declared in this scope; did you mean \u2018tm\u2019?\n   26 |  regex_search(date,\
    \ m, r);\n      |                     ^\n      |                     tm\n/tmp/tmp8fwvpaa6.cpp:26:24:\
    \ error: \u2018r\u2019 was not declared in this scope\n   26 |  regex_search(date,\
    \ m, r);\n      |                        ^\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  bool leap_year = false;\n\
    \  //if the length of the input is less than 1 then we can't check the date!\n\
    \  if(date.length() < 1) {\n    return false;\n  }\n  //split the string by dashes.\n\
    \  std::vector<std::string> split_date = {};\n  std::string token;\n  std::stringstream\
    \ stream(date);\n  while(std::getline(stream, token, '-')) {\n    split_date.push_back(token);\n\
    \  }\n  //check to see if the date is in the correct format: mm-dd-yyyy\n  if(split_date.size()\
    \ != 3) {\n    return false;\n  }\n  //validate the year, has to be above 0 and\
    \ in 4 digit format.\n  int year = std::stoi(split_date[2]);\n  if(year < 0 ||\
    \ split_date[2].length() != 4) {\n    return false;\n  }\n  //validate the month,\
    \ has to be between 1 and 12\n  int month = std::stoi(split_date[0]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  //validate the day, has to be\
    \ between 1 and 31.\n  int day = std::stoi(split_date[1]);\n  if(day < 1 || day\
    \ > 31) {\n    return false;\n  }\n  //validate if the year is a leap year.\n\
    \  if(year % 4 == 0) {\n    leap_year = true;\n  }\n  //make sure that day is\
    \ valid for the given month.\n  switch(month) {\n    case 1:\n    case 3:\n  \
    \  case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      if(day\
    \ > 31) {\n        return false;\n      }\n      break;\n    case 4:\n    case\
    \ 6:\n    case 9:\n    case 11:\n      if(day > 30) {\n        return false;\n\
    \      }\n      break;\n    case 2:\n      if(leap_year && day > 29) {\n     \
    \   return false\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzepmk43q.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpzepmk43q.cpp:79:21: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   79 |         return false\n      |                     ^\n      |\
    \                     ;\n   80 | }\n      | ~                    \n/tmp/tmpzepmk43q.cpp:81:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   81 | int main() {\n      |            ^\n/tmp/tmpzepmk43q.cpp:99:1: error:\
    \ expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpzepmk43q.cpp:57:17:\
    \ note: to match this \u2018{\u2019\n   57 |   switch(month) {\n      |      \
    \           ^\n/tmp/tmpzepmk43q.cpp:99:1: error: expected \u2018}\u2019 at end\
    \ of input\n   99 | }\n      | ^\n/tmp/tmpzepmk43q.cpp:20:35: note: to match this\
    \ \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |        \
    \                           ^\n/tmp/tmpzepmk43q.cpp:99:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   99 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::stringstream ss;\n\
    \  ss << date;\n  std::string item;\n  std::vector<std::string> words;\n  while\
    \ (std::getline(ss, item, '-')) {\n    words.push_back(item);\n  }\n  int day\
    \ = stoi(words[1]);\n  int month = stoi(words[0]);\n  int year = stoi(words[2]);\n\
    \  if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year >\
    \ 9999) {\n    return false;\n  }\n  if (day > 30 && (month == 4 || month == 6\
    \ || month == 9 || month == 11)) {\n    return false;\n  }\n  if (day > 29 &&\
    \ month == 2) {\n    return false;\n  }\n  return true;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream iss(date);\n\
    \    char c1, c2;\n    int d, m, y;\n    // Read the date\n    if(!(iss >> d >>\
    \ c1 >> m >> c2 >> y)) {\n        return false;\n    }\n    // Everything was\
    \ read correctly\n    if(iss.eof()) {\n        // First check date\n        if(d\
    \ < 1 || d > 31) {\n            return false;\n        }\n        // Check month\n\
    \        if(m < 1 || m > 12) {\n            return false;\n        }\n       \
    \ // check days\n        if(m == 2) {\n            if(d > 29) {\n            \
    \    return false;\n            }\n        }\n        if(m == 4 || m == 6 || m\
    \ == 9 || m == 11) {\n            if(d > 30) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvg5g2z75: /tmp/tmpvg5g2z75.cpp:56: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here...\n\
    \    std::string::size_type sz;\n\n    std::vector<std::string> month_31 = {\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::vector<std::string>\
    \ month_30 = {\"04\", \"06\", \"09\", \"11\"};\n    std::vector<std::string> month_28\
    \ = {\"02\"};\n\n    int date_size = date.size();\n    if (date_size != 10) {\n\
    \        return false;\n    }\n\n    if (date[2] != '-' || date[5] != '-') {\n\
    \        return false;\n    }\n\n    std::string date_str = date.substr(0, 2);\n\
    \    std::string month_str = date.substr(3, 2);\n    std::string year_str = date.substr(6,\
    \ 4);\n\n    std::string::size_type n;\n    int date_int = std::stoi(date_str,\
    \ &n);\n    int month_int = std::stoi(month_str, &n);\n    int year_int = std::stoi(year_str,\
    \ &n);\n\n    if (date_int < 1 || date_int > 31) {\n        return false;\n  \
    \  }\n\n    if (month_int < 1 || month_int > 12) {\n        return false;\n  \
    \  }\n\n    if (year_int < 1) {\n        return false;\n    }\n\n    for (int\
    \ i = 0; i < 7; i++) {\n        if (month_str == month_31[i]) {\n            if\
    \ (date_int < 1 || date_int > 31) {\n                return false;\n         \
    \   }\n        }\n    }\n\n    for (int i = 0; i < 4; i++) {\n        if (month_str\
    \ == month_30[i]) {\n            if (date_int < 1 || date_int > 30) {\n      \
    \          return false;\n            }\n        }\n    }\n\n    for (int i =\
    \ 0; i < 1; i++) {\n        if (month_str == month_28[i]) {\n            if (date_\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqpr5hil.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptqpr5hil.cpp:76:17: error: \u2018date_\u2019 was not declared in this\
    \ scope; did you mean \u2018date\u2019?\n   76 |             if (date_\n     \
    \ |                 ^~~~~\n      |                 date\n/tmp/tmptqpr5hil.cpp:76:22:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   76 |          \
    \   if (date_\n      |                ~     ^\n      |                      )\n\
    \   77 | }\n      | ~                     \n/tmp/tmptqpr5hil.cpp:77:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   77 | }\n      | ^\n\
    /tmp/tmptqpr5hil.cpp:78:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmptqpr5hil.cpp:96:1:\
    \ error: expected \u2018}\u2019 at end of input\n   96 | }\n      | ^\n/tmp/tmptqpr5hil.cpp:74:33:\
    \ note: to match this \u2018{\u2019\n   74 |     for (int i = 0; i < 1; i++) {\n\
    \      |                                 ^\n/tmp/tmptqpr5hil.cpp:96:1: error:\
    \ expected \u2018}\u2019 at end of input\n   96 | }\n      | ^\n/tmp/tmptqpr5hil.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmptqpr5hil.cpp:96:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   96 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()!=10)\n\
    \        return false;\n    std::stringstream ss(date);\n    std::string month,day,year;\n\
    \    std::getline(ss,month,'-');\n    std::getline(ss,day,'-');\n    std::getline(ss,year,'-');\n\
    \    if(month.size()!=2 || day.size()!=2 || year.size()!=4)\n        return false;\n\
    \    std::stringstream convert(month);\n    int m;\n    convert>>m;\n    std::stringstream\
    \ convert1(day);\n    int d;\n    convert1>>d;\n    std::stringstream convert2(year);\n\
    \    int y;\n    convert2>>y;\n    if(m>12)\n        return false;\n    if(m==1\
    \ || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n    {\n        if(d>31)\n\
    \            return false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n\
    \    {\n        if(d>30)\n            return false;\n    }\n    else if(m==2)\n\
    \    {\n        if(d>29)\n            return false;\n    }\n    else\n       \
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  //your code here\n  std::vector<std::string>\
    \ tokens;\n  std::stringstream check1(date);\n  std::string intermediate;\n  while(getline(check1,\
    \ intermediate, '-')) {\n  \ttokens.push_back(intermediate);\n  }\n  if(tokens.size()\
    \ != 3) {\n  \treturn false;\n  }\n  if(stoi(tokens[0]) > 12 || stoi(tokens[0])\
    \ < 1) {\n  \treturn false;\n  }\n  else if(stoi(tokens[0]) == 1 || stoi(tokens[0])\
    \ == 3 || stoi(tokens[0]) == 5 || stoi(tokens[0]) == 7 || stoi(tokens[0]) == 8\
    \ || stoi(tokens[0]) == 10 || stoi(tokens[0]) == 12) {\n  \tif(stoi(tokens[1])\
    \ > 31 || stoi(tokens[1]) < 1) {\n  \t\treturn false;\n  \t}\n  }\n  else if(stoi(tokens[0])\
    \ == 4 || stoi(tokens[0]) == 6 || stoi(tokens[0]) == 9 || stoi(tokens[0]) == 11)\
    \ {\n  \tif(stoi(tokens[1]) > 30 || stoi(tokens[1]) < 1) {\n  \t\treturn false;\n\
    \  \t}\n  }\n  else if(stoi(tokens[0]) == 2) {\n  \tif(stoi(tokens[1]) > 29 ||\
    \ stoi(tokens[1]) < 1) {\n  \t\treturn false;\n  \t}\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size()==0)\n  \
    \  return false;\n  if(date.length()!=10)\n    return false;\n  std::vector<int>\
    \ date_nums;\n  std::stringstream date_stream(date);\n  std::string date_item;\n\
    \  while(std::getline(date_stream, date_item, '-'))\n    date_nums.push_back(std::stoi(date_item));\n\
    \  // for(int i=0; i<date_nums.size(); i++)\n  //   std::cout<<date_nums[i]<<\"\
    \ \";\n  // std::cout<<\"\\n\";\n  if(date_nums[0]>12 || date_nums[0]<1)\n   \
    \ return false;\n  if(date_nums[0]==1 || date_nums[0]==3 || date_nums[0]==5 ||\
    \ date_nums[0]==7 || date_nums[0]==8 || date_nums[0]==10 || date_nums[0]==12)\n\
    \  {\n    if(date_nums[1]>31 || date_nums[1]<1)\n      return false;\n  }\n  else\
    \ if(date_nums[0]==4 || date_nums[0]==6 || date_nums[0]==9 || date_nums[0]==11)\n\
    \  {\n    if(date_nums[1]>30 || date_nums[1]<1)\n      return false;\n  }\n  else\
    \ if(date_nums[0]==2)\n  {\n    if(date_nums[1]>29 || date_nums[1]<1)\n      return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  stringstream ss(date);\n\
    \  string item;\n  vector<string> temp;\n  while (getline(ss, item, '-')) {\n\
    \      temp.push_back(item);\n  }\n  int month=stoi(temp[0]);\n  int day=stoi(temp[1]);\n\
    \  int year=stoi(temp[2]);\n  if(month<1 || month>12){\n    return false;\n  }\n\
    \  if(day<1 || day>31){\n    return false;\n  }\n  if(month==4 || month==6 ||\
    \ month==9 || month==11){\n    if(day>30){\n      return false;\n    }\n  }\n\
    \  if(month==2){\n    if(day>29){\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7ylx5gv.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpm7ylx5gv.cpp:21:3: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   21 |   stringstream\
    \ ss(date);\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\nIn file included\
    \ from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpm7ylx5gv.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpm7ylx5gv.cpp:22:3:\
    \ error: \u2018string\u2019 was not declared in this scope\n   22 |   string item;\n\
    \      |   ^~~~~~\n/tmp/tmpm7ylx5gv.cpp:22:3: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpm7ylx5gv.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/in"
  stdout: ''
  timestamp: 1660133237
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n   std::vector<std::string>\
    \ months={\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\"\
    ,\"11\",\"12\"};\n  std::vector<std::string> days={\"01\",\"02\",\"03\",\"04\"\
    ,\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"\
    ,\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\"\
    ,\"27\",\"28\",\"29\",\"30\",\"31\"};\n  std::string year=\"\";\n  std::string\
    \ month=\"\";\n  std::string day=\"\";\n  int daynum=0;\n  int monthnum=0;\n \
    \ for(int i=0;i<4;i++){\n    year+=date[i+6];\n  }\n  for(int i=0;i<2;i++){\n\
    \    month+=date[i];\n    day+=date[i+3];\n  }\n  for(int i=0;i<12;i++){\n   \
    \ if(month==months[i]){\n      monthnum=i+1;\n    }\n  }\n  for(int i=0;i<31;i++){\n\
    \    if(day==days[i]){\n      daynum=i+1;\n    }\n  }\n  if(monthnum==2){\n  \
    \  if(daynum<1 || daynum>29){\n      return false;\n    }\n  }\n  else if(monthnum==4\
    \ || monthnum==6 || monthnum==9 || monthnum==11){\n    if(daynum<1 || daynum>30){\n\
    \      return false;\n    }\n  }\n  else if(monthnum==1 || monthnum==3 || monthnum==5\
    \ || monthnum==7 || monthnum==8 || monthnum==10 || monthnum==12){\n    if(daynum<1\
    \ || daynum>31){\n      return false;\n    }\n  }\n  else{\n    return false;\n\
    \  }\n  if(monthnum>12 || monthnum<1){\n    return false;\n  }\n  if(date[2]!='-'\
    \ || date[5]!='-'){\n    return false\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpavigbl81.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpavigbl81.cpp:67:17: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   67 |     return false\n      |                 ^\n      |        \
    \         ;\n   68 | }\n      | ~                \n/tmp/tmpavigbl81.cpp:69:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   69 | int main() {\n      |            ^\n/tmp/tmpavigbl81.cpp:87:1: error:\
    \ expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmpavigbl81.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpavigbl81.cpp:87:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   87 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int i, j, m, d, y;\n  int\
    \ n = date.length();\n  if (n != 10) {\n    return false;\n  }\n  i = date.find('-');\n\
    \  j = date.find('-', i + 1);\n  m = stoi(date.substr(0, i));\n  d = stoi(date.substr(i\
    \ + 1, j - i - 1));\n  y = stoi(date.substr(j + 1, n - j - 1));\n  if (m <= 0\
    \ || m > 12) {\n    return false;\n  }\n  if (d <= 0 || d > 31) {\n    return\
    \ false;\n  }\n  if (y <= 0) {\n    return false;\n  }\n  if (m == 2) {\n    if\
    \ (d > 29) {\n      return false;\n    }\n  }\n  if (m == 4 || m == 6 || m ==\
    \ 9 || m == 11) {\n    if (d > 30) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // create 2d array and\
    \ set month to month index and add days\n  const std::vector<std::vector<int>>\
    \ daysinmonth = {\n    {31,28,31,30,31,30,31,31,30,31,30,31},\n    {31,29,31,30,31,30,31,31,30,31,30,31},\n\
    \  };\n  // then split string by '/' or '-'\n  std::vector<std::string> substr;\n\
    \  char delimiter = '/';\n  size_t pos = 0;\n  std::string token;\n  while ((pos\
    \ = date.find(delimiter)) != std::string::npos) {\n    token = date.substr(0,\
    \ pos);\n    substr.push_back(token);\n    date.erase(0, pos + 1);\n  }\n  substr.push_back(date);\n\
    \  for (auto i : substr) {\n    // loop to check for any letters in date\n   \
    \ if (std::find_if(i.begin(), i.end(), isalpha) != i.end())\n      return false;\n\
    \  }\n  // convert string to int, then check day, month, year\n  int day = std::stoi(substr[1]);\n\
    \  int month = std::stoi(substr[0]);\n  int year = std::stoi(substr[2]);\n  //\
    \ if the day is empty\n  if (day == 0)\n    return false;\n  // if the year is\
    \ empty\n  if (year == 0)\n    return false;\n  // check for leap year\n  if (year\
    \ % 4 == 0) {\n    // check for month, if month is > 12, invalid date\n    if\
    \ (month > 12)\n      return false;\n    // if month is == 12, check if days >\
    \ 31, invalid date\n    if (month == 12 && day > 31)\n      return false;\n  \
    \  // check days for any month\n    if (day > daysinmonth[1][month-1])\n     \
    \ return false;\n  }\n  else {\n    // if not leap year, check for invalid month\n\
    \    if (month > 12)\n      return false;\n    //\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwoslhcz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwwoslhcz.cpp:70:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   70 | int main() {\n      |            ^\n/tmp/tmpwwoslhcz.cpp:88:1:\
    \ error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmpwwoslhcz.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpwwoslhcz.cpp:88:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   88 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code goes here\n\
    \    std::vector<std::string> dt;\n    std::stringstream check1(date);\n    std::string\
    \ intermediate;\n    while(getline(check1, intermediate, '-')) {\n        dt.push_back(intermediate);\n\
    \    }\n    if(dt.size() != 3) {\n        return false;\n    }\n    else {\n \
    \       if(dt[0] == \"1\" || dt[0] == \"3\" || dt[0] == \"5\" || dt[0] == \"7\"\
    \ || dt[0] == \"8\" || dt[0] == \"10\" || dt[0] == \"12\") {\n            if(stoi(dt[1])\
    \ < 1 || stoi(dt[1]) > 31) {\n                return false;\n            }\n \
    \       }\n        else if(dt[0] == \"4\" || dt[0] == \"6\" || dt[0] == \"9\"\
    \ || dt[0] == \"11\") {\n            if(stoi(dt[1]) < 1 || stoi(dt[1]) > 30) {\n\
    \                return false;\n            }\n        }\n        else if(dt[0]\
    \ == \"2\") {\n            if(stoi(dt[1]) < 1 || stoi(dt[1]) > 29) {\n       \
    \         return false;\n            }\n        }\n        else {\n          \
    \  return false;\n        }\n        if(stoi(dt[0]) < 1 || stoi(dt[0]) > 12) {\n\
    \            return false;\n        }\n        if(stoi(dt[2]) < 1) {\n       \
    \     return false;\n        }\n        return true;\n    }\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi5numrb8: /tmp/tmpi5numrb8.cpp:61: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // split date on '-'\n\
    \    std::vector<std::string> strs;\n    boost::split(strs, date, boost::is_any_of(\"\
    -\"));\n    std::cout << date << std::endl;\n    std::cout << strs.size() << std::endl;\n\
    \    std::cout << strs[0] << std::endl;\n    std::cout << strs[1] << std::endl;\n\
    \    std::cout << strs[2] << std::endl;\n    // check not empty\n    if (strs.size()\
    \ == 0) {\n        return false;\n    }\n    // check yyyy\n    int yyyy = std::stoi(strs[2]);\n\
    \    if (yyyy < 0) {\n        return false;\n    }\n    // check mm\n    int mm\
    \ = std::stoi(strs[0]);\n    if (mm < 1 || mm > 12) {\n        return false;\n\
    \    }\n    // check dd\n    int dd = std::stoi(strs[1]);\n    int dd_max;\n \
    \   if (mm == 1 || mm == 3 || mm == 5 || mm == 7 || mm == 8 || mm == 10 || mm\
    \ == 12) {\n        dd_max = 31;\n    } else if (mm == 4 || mm == 6 || mm == 9\
    \ || mm == 11) {\n        dd_max = 30;\n    } else if (mm == 2) {\n        dd_max\
    \ = 29;\n    } else {\n        return false;\n    }\n    if (dd < 1 || dd > dd_max)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpip3v6gae.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpip3v6gae.cpp:23:5: error: \u2018boost\u2019 has not been declared\n\
    \   23 |     boost::split(strs, date, boost::is_any_of(\"-\"));\n      |     ^~~~~\n\
    /tmp/tmpip3v6gae.cpp:23:30: error: \u2018boost\u2019 has not been declared\n \
    \  23 |     boost::split(strs, date, boost::is_any_of(\"-\"));\n      |      \
    \                        ^~~~~\n"
  stdout: ''
  timestamp: 1660133237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(date.size()!=0);\n\
    \  int pos = date.find(\"-\");\n  assert(pos!=std::string::npos);\n  int month\
    \ = std::stoi(date.substr(0,pos));\n  date = date.substr(pos+1);\n  pos = date.find(\"\
    -\");\n  assert(pos!=std::string::npos);\n  int day = std::stoi(date.substr(0,pos));\n\
    \  date = date.substr(pos+1);\n  int year = std::stoi(date);\n  if(month<1 ||\
    \ month>12)\n    return false;\n  if(month==2)\n  {\n    if(day<1 || day>29)\n\
    \      return false;\n  }\n  else if(month==1 || month==3 || month==5 || month==7\
    \ || month==8 || month==10 || month==12)\n  {\n    if(day<1 || day>31)\n     \
    \ return false;\n  }\n  else\n  {\n    if(day<1 || day>30)\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuwnihfkh: /tmp/tmpuwnihfkh.cpp:21: bool valid_date(std::string): Assertion
    `date.size()!=0'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  std::regex\
    \ r(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n  if(!std::regex_match(date,r)) return false;\n\
    \  std::regex month_day(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\");\n  std::regex\
    \ month_day_leap(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|29)\");\n  std::regex month_day_feb(\"\
    02-(0[1-9]|[1-2][0-9]|3[0-1])\");\n  std::regex month_day_feb_leap(\"02-(0[1-9]|[1-2][0-9]|29)\"\
    );\n  // split by '-'\n  std::istringstream iss(date);\n  std::vector<std::string>\
    \ tokens{std::istream_iterator<std::string>{iss}, std::istream_iterator<std::string>{}};\n\
    \  if(tokens.size() != 3) return false;\n  if(tokens[0] == \"02\"){\n    if(tokens[2]\
    \ % 4 != 0) return std::regex_match(date,month_day_feb);\n    else if(tokens[2]\
    \ % 4 == 0) return std::regex_match(date,month_day_feb_leap);\n  }\n  else if(tokens[0]\
    \ == \"01\" || tokens[0] == \"03\" || tokens[0] == \"05\" || tokens[0] == \"07\"\
    \ || tokens[0] == \"08\" || tokens[0] == \"10\" || tokens[0] == \"12\"){\n   \
    \ return std::regex_match(date,month_day);\n  }\n  else if(tokens[0] == \"04\"\
    \ || tokens[0] == \"06\" || tokens[0] == \"09\" || tokens[0]\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyb96xbvy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpyb96xbvy.cpp:33:18: error: no match for \u2018operator%\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   33 |     if(tokens[2] % 4 != 0) return std::regex_match(date,month_day_feb);\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmpyb96xbvy.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5: note:\
    \ candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyb96xbvy.cpp:33:20: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   33 |     if(tokens[2] % 4 != 0) return std::regex_match(date,month_day_feb);\n\
    \      |                    ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyb96xbvy.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_t"
  stdout: ''
  timestamp: 1660133238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string token;\n    while(std::getline(ss,\
    \ token, '-'))\n        v.push_back(token);\n    std::string mm = v[0];\n    std::string\
    \ dd = v[1];\n    std::string yyyy = v[2];\n    int mm1 = atoi(mm.c_str());\n\
    \    int dd1 = atoi(dd.c_str());\n    int yyyy1 = atoi(yyyy.c_str());\n    int\
    \ year = yyyy1;\n    int month = mm1;\n    int day = dd1;\n    int y0 = year -\
    \ (14 - month) / 12;\n    int x = y0 + y0/4 - y0/100 + y0/400;\n    int m0 = month\
    \ + 12 * ((14 - month) / 12) - 2;\n    int d0 = (day + x + (31*m0)/12) % 7;\n\
    \    // if day is less than 1 or greater than 31 or month is less than 1 or greater\
    \ than 12\n    if (day < 1 || day > 31 || month < 1 || month > 12)\n        return\
    \ false;\n    // if day is less than 1 or greater than 30 for month 4,6,9,11\n\
    \    else if (day < 1 || day > 30)\n    {\n        if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11)\n            return false;\n    }\n    // if\
    \ day is less than 1 or greater than 29 for the month 2\n    else if (day < 1\
    \ || day > 29)\n    {\n        if (month == 2)\n            return false;\n  \
    \  }\n    else if (month == 2 && day == 29 && (year % 400 == 0 || (year % 4 ==\
    \ 0 && year % 100 != 0)))\n        return true;\n    else if (d0 == 6)\n     \
    \   return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjrwtk2el: /tmp/tmpjrwtk2el.cpp:66: int main(): Assertion `candidate(("06-04-2020"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool leap = false;\n\
    \    std::vector<int> months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \    // date validation\n    if (date.length() == 0)\n        return false;\n\
    \    // date validation\n    if (date.find(\"-\") == std::string::npos)\n    \
    \    return false;\n    // date validation\n    std::stringstream ss(date);\n\
    \    std::string item;\n    std::vector<std::string> tokens;\n    while (std::getline(ss,\
    \ item, '-')) {\n        tokens.push_back(item);\n    }\n    if (tokens.size()\
    \ != 3)\n        return false;\n    int day = stoi(tokens[1]);\n    int month\
    \ = stoi(tokens[0]);\n    int year = stoi(tokens[2]);\n    if (year % 4 == 0)\
    \ {\n        leap = true;\n    }\n    // date validation\n    if (month < 1 ||\
    \ month > 12)\n        return false;\n    // date validation\n    if (day < 1\
    \ || day > months[month - 1])\n        return false;\n    // date validation\n\
    \    if (leap && month == 2 && day > 29)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  std::vector<std::string>v;\n\
    \  std::string s;\n  for(int i=0;i<date.size();i++)\n  {\n    if(date[i]=='-')\n\
    \    {\n      v.push_back(s);\n      s=\"\";\n    }\n    else\n    {\n      s=s+date[i];\n\
    \    }\n  }\n  v.push_back(s);\n  std::stringstream ss(v[2]);\n  int year=0;\n\
    \  ss>>year;\n  std::stringstream ss1(v[0]);\n  int month=0;\n  ss1>>month;\n\
    \  std::stringstream ss2(v[1]);\n  int date=0;\n  ss2>>date;\n  if(year<=0)\n\
    \  {\n    return false;\n  }\n  if(month<=0 || month>12)\n  {\n    return false;\n\
    \  }\n  else if(month==2)\n  {\n    if(date<=0 || date>29)\n    {\n      return\
    \ false;\n    }\n  }\n  else if(month==1 || month==3 || month==5 || month==7 ||\
    \ month==8 || month==10 || month==12)\n  {\n    if(date<=0 || date>31)\n    {\n\
    \      return false;\n    }\n  }\n  else\n  {\n    if(date<=0 || date>30)\n  \
    \  {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifsfg9j8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpifsfg9j8.cpp:44:7: error: declaration of \u2018int date\u2019 shadows\
    \ a parameter\n   44 |   int date=0;\n      |       ^~~~\n"
  stdout: ''
  timestamp: 1660133238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  \n  int d,m,y;\n  if(date.length()!=10)\n\
    \    return false;\n  if(date[2]!='-' || date[5]!='-')\n    return false;\n  d=stoi(date.substr(0,2));\n\
    \  m=stoi(date.substr(3,2));\n  y=stoi(date.substr(6,4));\n  if(m<1 || m>12)\n\
    \    return false;\n  if(m==2)\n  {\n    if(y%4==0)\n    {\n      if(d<1 || d>29)\n\
    \        return false;\n    }\n    else\n    {\n      if(d<1 || d>28)\n      \
    \  return false;\n    }\n  }\n  else if(m==1 || m==3 || m==5 || m==7 || m==8 ||\
    \ m==10 || m==12)\n  {\n    if(d<1 || d>31)\n      return false;\n  }\n  else\n\
    \  {\n    if(d<1 || d>30)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7atlrxny: /tmp/tmp7atlrxny.cpp:60: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::cout << date;\n  assert(!date.empty());\n\
    \  //check if format is correct\n  if(date.find('-')==std::string::npos) return\
    \ false;\n  //split string by '-'\n  std::vector<std::string>splitted= split_str(date,'-');\n\
    \  if(splitted.size()!=3) return false;\n  if(splitted[0].length()!=2 || splitted[1].length()!=2\
    \ || splitted[2].length()!=4) return false;\n  if(!all_digit(splitted[0]) || !all_digit(splitted[1])\
    \ || !all_digit(splitted[2])) return false;\n  if(!valid_month(stoi(splitted[0])))\
    \ return false;\n  return valid_day(stoi(splitted[0]),stoi(splitted[1]));\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_llul6x.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpp_llul6x.cpp:26:37: error: \u2018split_str\u2019 was not declared in\
    \ this scope\n   26 |   std::vector<std::string>splitted= split_str(date,'-');\n\
    \      |                                     ^~~~~~~~~\n/tmp/tmpp_llul6x.cpp:29:7:\
    \ error: \u2018all_digit\u2019 was not declared in this scope\n   29 |   if(!all_digit(splitted[0])\
    \ || !all_digit(splitted[1]) || !all_digit(splitted[2])) return false;\n     \
    \ |       ^~~~~~~~~\n/tmp/tmpp_llul6x.cpp:30:7: error: \u2018valid_month\u2019\
    \ was not declared in this scope\n   30 |   if(!valid_month(stoi(splitted[0])))\
    \ return false;\n      |       ^~~~~~~~~~~\n/tmp/tmpp_llul6x.cpp:31:10: error:\
    \ \u2018valid_day\u2019 was not declared in this scope; did you mean \u2018valid_date\u2019\
    ?\n   31 |   return valid_day(stoi(splitted[0]),stoi(splitted[1]));\n      | \
    \         ^~~~~~~~~\n      |          valid_date\n"
  stdout: ''
  timestamp: 1660133238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyhqt4mu1: /tmp/tmpyhqt4mu1.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // std::cout << date\
    \ << std::endl;\n    std::string month = date.substr(0,2);\n    // std::cout <<\
    \ month << std::endl;\n    std::string day = date.substr(3,2);\n    // std::cout\
    \ << day << std::endl;\n    std::string year = date.substr(6,4);\n    // std::cout\
    \ << year << std::endl;\n    if(date.length() > 10 || date.length() < 10)\n  \
    \      return false;\n    // if(month <= 0 || month > 12)\n    //     return false;\n\
    \    if(stoi(day) <= 0 || stoi(day) > 31)\n        return false;\n    if(stoi(month)\
    \ <= 0 || stoi(month) > 12)\n        return false;\n    if(date[2] != '-' || date[5]\
    \ != '-')\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 3) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660133239
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length()!=10)\n\
    \    return false;\n  for(int i=0;i<date.length();i++)\n  {\n    if(i==2 || i==5)\n\
    \    {\n      if(date[i]!='-')\n        return false;\n    }\n    else if(date[i]<'0'\
    \ || date[i]>'9')\n      return false;\n  }\n  int month = ((date[0]-'0')*10)+(date[1]-'0');\n\
    \  int day = ((date[3]-'0')*10)+(date[4]-'0');\n  if(month>12 || month<1)\n  \
    \  return false;\n  if(month==2)\n  {\n    if(day>29 || day<1)\n      return false;\n\
    \  }\n  else if(month%2==0)\n  {\n    if(day>30 || day<1)\n      return false;\n\
    \  }\n  else\n  {\n    if(day>31 || day<1)\n      return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// Split string by delimiter,\
    \ store tokens\n\tstd::vector<std::string> tokens;\n\tstd::stringstream check1(date);\n\
    \tstd::string intermediate;\n\twhile(getline(check1, intermediate, '-'))\n\t{\n\
    \t\ttokens.push_back(intermediate);\n\t}\n\t// If token size is not 3, return\
    \ false\n\tif (tokens.size() != 3) {\n\t\treturn false;\n\t}\n\t// Iterate over\
    \ all tokens\n\tfor (std::vector<std::string>::iterator it = tokens.begin(); it\
    \ != tokens.end(); ++it) {\n\t\t// Store current token value\n\t\tstd::string\
    \ token = *it;\n\t\t// std::cout << token << std::endl;\n\t\t// If token is empty,\
    \ return false\n\t\tif (token.empty()) {\n\t\t\treturn false;\n\t\t}\n\t\t// Else,\
    \ check if string contains only digits\n\t\tfor (int i = 0; i < token.length();\
    \ i++) {\n\t\t\tif (std::isdigit(token[i]) == false) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\t// Store month and year\n\tint year = std::stoi(tokens[2]);\n\
    \tint month = std::stoi(tokens[0]);\n\tint day = std::stoi(tokens[1]);\n\t// std::cout\
    \ << \"Year: \" << year << std::endl;\n\t// std::cout << \"Month: \" << month\
    \ << std::endl;\n\t// std::cout << \"Day: \" << day << std::endl;\n\t// If month\
    \ is less than 1 or greater than 12, return false\n\tif (month < 1 || month >\
    \ 12) {\n\t\treturn false;\n\t}\n\t// Check for days based on month\n\tswitch\
    \ (month) {\n\t\tcase 1:\n\t\tcase 3:\n\t\tcase 5:\n\t\tcase 7:\n\t\tcase 8:\n\
    \t\tcase 10:\n\t\tcase 12:\n\t\t\tif (day < 1 || day > 31)\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgbi517j.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwgbi517j.cpp:70:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   70 | }\n      | ^\n/tmp/tmpwgbi517j.cpp:71:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   71 | int main() {\n     \
    \ |            ^\n/tmp/tmpwgbi517j.cpp:89:1: error: expected \u2018}\u2019 at\
    \ end of input\n   89 | }\n      | ^\n/tmp/tmpwgbi517j.cpp:20:35: note: to match\
    \ this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmpwgbi517j.cpp:89:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   89 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133238
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string delimiter\
    \ = \"-\";\n    size_t pos = 0;\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    int dd, mm, yyyy;\n    bool isDateValid = true;\n    while ((pos\
    \ = date.find(delimiter)) != std::string::npos) {\n        token = date.substr(0,\
    \ pos);\n        tokens.push_back(token);\n        date.erase(0, pos + delimiter.length());\n\
    \    }\n    tokens.push_back(date);\n    if (tokens.size() != 3) {\n        return\
    \ false;\n    }\n    for (int i = 0; i < tokens.size(); i++) {\n        if (tokens[i].size()\
    \ != 2 && tokens[i].size() != 4) {\n            return false;\n        }\n   \
    \ }\n    dd = std::stoi(tokens[1]);\n    mm = std::stoi(tokens[0]);\n    yyyy\
    \ = std::stoi(tokens[2]);\n    if (dd < 1 || dd > 31) {\n        return false;\n\
    \    }\n    if (mm < 1 || mm > 12) {\n        return false;\n    }\n    if (dd\
    \ > 30 && (mm == 4 || mm == 6 || mm == 9 || mm == 11)) {\n        return false;\n\
    \    }\n    if (dd > 29 && mm == 2) {\n        return false;\n    }\n    return\
    \ isDateValid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// your code here\n\tbool\
    \ result = false;\n\treturn result;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6ksr8rd6: /tmp/tmp6ksr8rd6.cpp:27: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()!=10) return\
    \ false;\n    if(date[2]!='-'||date[5]!='-') return false;\n    if(date[0]=='0'||date[1]=='0'||date[3]=='0'||date[4]=='0')\
    \ return false;\n    if(stoi(date.substr(0,2))>12||stoi(date.substr(0,2))<=0)\
    \ return false;\n    if(stoi(date.substr(3,2))>31||stoi(date.substr(3,2))<=0)\
    \ return false;\n    if(stoi(date.substr(0,2))==2&&stoi(date.substr(3,2))>29)\
    \ return false;\n    if(stoi(date.substr(0,2))==2&&stoi(date.substr(3,2))==29&&stoi(date.substr(6,4))%4!=0)\
    \ return false;\n    if(stoi(date.substr(0,2))==2&&stoi(date.substr(3,2))==29&&stoi(date.substr(6,4))%100==0&&stoi(date.substr(6,4))%400!=0)\
    \ return false;\n    if(stoi(date.substr(0,2))==4||stoi(date.substr(0,2))==6||stoi(date.substr(0,2))==9||stoi(date.substr(0,2))==11)\
    \ if(stoi(date.substr(3,2))>30) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkpr644tc: /tmp/tmpkpr644tc.cpp:34: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n//dd-mm-yyyy\n\t//\n\tif(date.length()==0){\n\
    \t\treturn false;\n\t}\n\t//\n\t// cout<<date<<endl;\n\tstd::vector<int> dateNumbers;\n\
    \tstd::stringstream ss(date);\n\tstd::string token;\n\tstd::string delim = \"\
    -\";\n\tstd::getline(ss, token, '-');\n\tdateNumbers.push_back(stoi(token));\n\
    \tstd::getline(ss, token, '-');\n\tdateNumbers.push_back(stoi(token));\n\tstd::getline(ss,\
    \ token, '-');\n\tdateNumbers.push_back(stoi(token));\n\t// std::cout<<dateNumbers[0]<<endl;\n\
    \tif(dateNumbers[0]>31){\n\t\treturn false;\n\t}\n\tif(dateNumbers[1]>12){\n\t\
    \treturn false;\n\t}\n\tif(dateNumbers[1]==2){\n\t\tif(dateNumbers[0]>29){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\telse if(dateNumbers[1]==4||dateNumbers[1]==6||dateNumbers[1]==9||dateNumbers[1]==11){\n\
    \t\tif(dateNumbers[0]>30){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp964e8rn7: /tmp/tmp964e8rn7.cpp:60: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.size() != 10)\
    \ return false;\n\tint i = 0;\n\tfor (; i < 10; i++) {\n\t\tif (date[i] < '0'\
    \ || date[i] > '9') break;\n\t}\n\tif (i != 10) return false;\n\tstd::string str_num;\n\
    \tstr_num = date.substr(0, 2);\n\tint num = atoi(str_num.c_str());\n\tif (num\
    \ < 1 || num > 12) return false;\n\tstr_num = date.substr(3, 2);\n\tnum = atoi(str_num.c_str());\n\
    \tif (num < 1 || num > 31) return false;\n\tstr_num = date.substr(6, 4);\n\tnum\
    \ = atoi(str_num.c_str());\n\tif (num < 2000 || num > 2017) return false;\n\t\
    int month = atoi(date.substr(0, 2).c_str());\n\tif (month % 2 == 0) {\n\t\tif\
    \ (month == 2) {\n\t\t\tif (num % 4 == 0) {\n\t\t\t\tif (num % 100 == 0) {\n\t\
    \t\t\t\tif (num % 400 == 0) {\n\t\t\t\t\t\tif (num > 29) return false;\n\t\t\t\
    \t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (num > 28) return false;\n\t\t\t\t\t}\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (num > 29) return false;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t\telse {\n\t\t\t\tif (num > 28) return false;\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\tif (num > 30) return false;\n\t\t}\n\t}\n\telse {\n\t\tif (num >\
    \ 31) return false;\n\t}\n\tif (date[2] != '-' || date[5] != '-') return false;\n\
    \treturn true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmfg420_e: /tmp/tmpmfg420_e.cpp:69: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133240
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int d,m,y;\n  const char*\
    \ date_char = date.c_str();\n  char date_get[10];\n  // printf(\"%s\\n\",date_char);\n\
    \  sscanf(date_char,\"%d-%d-%d\",&m,&d,&y);\n  if(y<2000){\n    return false;\n\
    \  }\n  if(m<1||m>12){\n    return false;\n  }\n  if(m==1||m==3||m==5||m==7||m==8||m==10||m==12){\n\
    \    if(d<1||d>31){\n      return false;\n    }\n  }\n  else if(m==4||m==6||m==9||m==11){\n\
    \    if(d<1||d>30){\n      return false;\n    }\n  }\n  else if(m==2){\n    if(d<1||d>29){\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int month = stoi(date.substr(0,2));\n\
    \    int day = stoi(date.substr(3,2));\n    if(month<1 || month>12){\n       \
    \ return false;\n    }\n    if(month==2){\n        if(day>29){\n            return\
    \ false;\n        }\n    }\n    else if(month%2==0){\n        if(day>30){\n  \
    \          return false;\n        }\n    }\n    else{\n        if(day>31){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpixn98obn: /tmp/tmpixn98obn.cpp:47: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(!date.empty());\n\
    \    if(date.size() != 10) return false;\n    if(date[2] != '-' || date[5] !=\
    \ '-') return false;\n    int m=0,d=0,y=0;\n    std::string month = date.substr(0,2);\n\
    \    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n\
    \    m = std::stoi(month);\n    d = std::stoi(day);\n    y = std::stoi(year);\n\
    \    if(m < 1 || m > 12) return false;\n    if(m == 2) {\n        if(d < 1 ||\
    \ d > 29) return false;\n    }\n    else if(m == 1 || m == 3 || m == 5 || m ==\
    \ 7 || m == 8 || m == 10 || m == 12) {\n        if(d < 1 || d > 31) return false;\n\
    \    }\n    else {\n        if(d < 1 || d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzh6ejwiu: /tmp/tmpzh6ejwiu.cpp:21: bool valid_date(std::string): Assertion
    `!date.empty()'' failed.

    '
  stdout: ''
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int x = date.find('-');\n\
    \  int y = date.find('-', x+1);\n  int z = date.find('-', y+1);\n  int a, b, c;\n\
    \  bool d = true;\n  if (x == 2 && y == 5 && z == 10) {\n    a = std::stoi(date.substr(0,\
    \ x));\n    b = std::stoi(date.substr(x+1, y));\n    c = std::stoi(date.substr(y+1,\
    \ z));\n    if (a < 1 || a > 12) {\n      d = false;\n    }\n    if (a == 1 ||\
    \ a == 3 || a == 5 || a == 7 || a == 8 || a == 10 || a == 12) {\n      if (b <\
    \ 1 || b > 31) {\n        d = false;\n      }\n    }\n    if (a == 4 || a == 6\
    \ || a == 9 || a == 11) {\n      if (b < 1 || b > 30) {\n        d = false;\n\
    \      }\n    }\n    if (a == 2) {\n      if (b < 1 || b > 29) {\n        d =\
    \ false;\n      }\n    }\n    if (c < 2000 || c > 2020) {\n      d = false;\n\
    \    }\n  }\n  else {\n    d = false;\n  }\n  return d;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4rs_jtlu: /tmp/tmp4rs_jtlu.cpp:59: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string month_str,\
    \ day_str, year_str;\n    char ch;\n    std::istringstream ss(date);\n    getline(ss,\
    \ month_str, '-');\n    getline(ss, day_str, '-');\n    getline(ss, year_str,\
    \ '-');\n    // check if month, day and year are all integers\n    if (!(std::all_of(month_str.begin(),\
    \ month_str.end(), ::isdigit) &&\n          std::all_of(day_str.begin(), day_str.end(),\
    \ ::isdigit) &&\n          std::all_of(year_str.begin(), year_str.end(), ::isdigit)))\
    \ {\n        return false;\n    }\n    // convert to integer\n    int month =\
    \ stoi(month_str);\n    int day = stoi(day_str);\n    int year = stoi(year_str);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n   \
    \     }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n    } else {\n        if (day < 1 ||\
    \ day > 30) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133240
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool check=true;\n  \
    \  int i=0;\n    while(i<date.length() && date[i]!='/')\n    {\n        if(date[i]<'0'\
    \ || date[i]>'9')\n        {\n            check=false;\n            break;\n \
    \       }\n        i++;\n    }\n    if(i==2)\n    {\n        if(date[0]!='0' &&\
    \ date[1]!='0')\n        {\n            if(date[0]=='1' && date[1]=='1')\n   \
    \         {\n                if(date[i]!='/')\n                {\n           \
    \         check=false;\n                }\n            }\n            else if(date[0]=='1'\
    \ && date[1]=='2')\n            {\n                if(date[i]!='/')\n        \
    \        {\n                    check=false;\n                }\n            }\n\
    \            else if(date[0]=='0' && date[1]=='1')\n            {\n          \
    \      if(date[i]!='/')\n                {\n                    check=false;\n\
    \                }\n            }\n            else if(date[0]=='0' && date[1]=='2')\n\
    \            {\n                if(date[i]!='/')\n                {\n        \
    \            check=false;\n                }\n            }\n            else\
    \ if(date[0]=='0' && date[1]=='3')\n            {\n                if(date[i]!='/')\n\
    \                {\n                    check=false;\n                }\n    \
    \        }\n            else if(date[0]=='0' && date[1]=='4')\n            {\n\
    \                if(date[i]!='/')\n                {\n                    check=false;\n\
    \                }\n            }\n            else if(date[0]=='0' && date[1]=='5')\n\
    \            {\n                if(date[i]!='/')\n                {\n        \
    \            check=false;\n                }\n            }\n            else\
    \ if(date[0]=='0' && date[1]=='6')\n            {\n                if(date[i]!\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3ddhgcb.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpv3ddhgcb.cpp:87:27: error: expected \u2018)\u2019 before \u2018!\u2019\
    \ token\n   87 |                 if(date[i]!\n      |                   ~    \
    \   ^\n      |                           )\n/tmp/tmpv3ddhgcb.cpp:88:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   88 | }\n      | ^\n\
    /tmp/tmpv3ddhgcb.cpp:89:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   89 | int main() {\n      |            ^\n/tmp/tmpv3ddhgcb.cpp:107:1:\
    \ error: expected \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpv3ddhgcb.cpp:35:9:\
    \ note: to match this \u2018{\u2019\n   35 |         {\n      |         ^\n/tmp/tmpv3ddhgcb.cpp:107:1:\
    \ error: expected \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpv3ddhgcb.cpp:33:5:\
    \ note: to match this \u2018{\u2019\n   33 |     {\n      |     ^\n/tmp/tmpv3ddhgcb.cpp:107:1:\
    \ error: expected \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpv3ddhgcb.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpv3ddhgcb.cpp:107:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  107 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  std::regex\
    \ r(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\");\n  if(regex_match(date,r))\n\
    \    return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpr3q12npv: /tmp/tmpr3q12npv.cpp:37: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133244
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::stringstream ss(date);\n\
    \    int month, day, year;\n    char c;\n    ss >> month >> c >> day >> c >> year;\n\
    \    std::cout << month << \" \" << day << \" \" << year << std::endl;\n    if\
    \ (c != '-') return false;\n    if (month < 1 || month > 12) return false;\n \
    \   if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day\
    \ < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: '3 11 2000

    15 1 2012

    4 0 2040

    6 4 2020

    1 1 2007

    3 32 2011

    3 32 2011

    4 31 3000

    6 6 2005

    21 31 2000

    4 12 2003

    4122003 12 2003

    20030412 12 2003

    2003 4 2003

    2003 4 12

    4 2003 12

    '
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::cout << \"date: \"\
    \ << date << \"\\n\";\n  if (date.size() != 10) {\n    return false;\n  }\n  std::cout\
    \ << \"size\\n\";\n  if (date[2] != '-' || date[5] != '-') {\n    return false;\n\
    \  }\n  std::cout << \"separators\\n\";\n  try {\n    int dd = std::stoi(date.substr(0,\
    \ 2));\n    int mm = std::stoi(date.substr(3, 2));\n    int yyyy = std::stoi(date.substr(6,\
    \ 4));\n    std::cout << \"numbers\\n\";\n    if (mm < 1 || mm > 12) {\n     \
    \ return false;\n    }\n    std::cout << \"months\\n\";\n    if (mm == 2) {\n\
    \      if (dd < 1 || dd > 29) {\n        return false;\n      }\n    } else if\
    \ (mm % 2 == 0) {\n      if (dd < 1 || dd > 30) {\n        return false;\n   \
    \   }\n    } else {\n      if (dd < 1 || dd > 31) {\n        return false;\n \
    \     }\n    }\n    std::cout << \"day\\n\";\n  } catch (std::invalid_argument\
    \ e) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmps1sfljd2: /tmp/tmps1sfljd2.cpp:61: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::vector<int> monthsWith31Days\
    \ = {1,3,5,7,8,10,12};\n  std::vector<int> monthsWith30Days = {4,6,9,11};\n  std::vector<int>\
    \ monthsWith28Days = {2};\n  std::vector<int> months = {1,2,3,4,5,6,7,8,9,10,11,12};\n\
    \  std::string delimiter = \"-\";\n  std::string token;\n  size_t pos = 0;\n \
    \ std::vector<int> values;\n  while ((pos = date.find(delimiter)) != std::string::npos)\
    \ {\n    token = date.substr(0, pos);\n    date.erase(0, pos + delimiter.length());\n\
    \    values.push_back(stoi(token));\n  }\n  if(!(find(months.begin(), months.end(),\
    \ values[0]) != months.end())) {\n    return false;\n  }\n  if(values[1] <= 0\
    \ || values[1] > 31) {\n    return false;\n  }\n  if(find(monthsWith31Days.begin(),\
    \ monthsWith31Days.end(), values[0]) != monthsWith31Days.end()) {\n    if(values[1]\
    \ <= 0 || values[1] > 31) {\n      return false;\n    }\n  }\n  if(find(monthsWith30Days.begin(),\
    \ monthsWith30Days.end(), values[0]) != monthsWith30Days.end()) {\n    if(values[1]\
    \ <= 0 || values[1] > 30) {\n      return false;\n    }\n  }\n  if(find(monthsWith28Days.begin(),\
    \ monthsWith28Days.end(), values[0]) != monthsWith28Days.end()) {\n    if(values[1]\
    \ <= 0 || values[1] > 29) {\n      return false;\n    }\n  }\n  if(!(values[2]\
    \ > 0)) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpw2skat3g: /tmp/tmpw2skat3g.cpp:62: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size()<10){\n \
    \   return false;\n  }\n  std::string year = date.substr(date.size()-4, date.size());\n\
    \  std::string day = date.substr(3, 5);\n  std::string month = date.substr(0,\
    \ 2);\n  if(!(stoi(month)>=1 && stoi(month)<=12)){\n    return false;\n  }\n \
    \ std::vector<int> arr = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n \
    \ if(stoi(month)==2){\n    if(stoi(day)>arr[stoi(month)-1]){\n      return false;\n\
    \    }\n  }\n  else{\n    if(stoi(day)>arr[stoi(month)-1]){\n      return false;\n\
    \    }\n  }\n  if(date[2] != '-' || date[5] != '-'){\n    return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(date.length() >\
    \ 0);\n  std::string d = \"31\";\n  std::string m = \"12\";\n  std::string y =\
    \ \"2019\";\n  std::string delimiter = \"-\";\n  size_t pos = 0;\n  std::string\
    \ token;\n  int count = 0;\n  while ((pos = date.find(delimiter)) != std::string::npos)\
    \ {\n    token = date.substr(0, pos);\n    if (count == 0) {\n      m = token;\n\
    \    } else if (count == 1) {\n      d = token;\n    } else {\n      y = token;\n\
    \    }\n    date.erase(0, pos + delimiter.length());\n    count++;\n  }\n  y =\
    \ date;\n  if (stoi(d) > 31 || stoi(d) < 1) {\n    return false;\n  }\n  if (stoi(m)\
    \ > 12 || stoi(m) < 1) {\n    return false;\n  }\n  if (stoi(y) < 0) {\n    return\
    \ false;\n  }\n  if (stoi(m) == 2) {\n    if (stoi(d) > 29) {\n      return false;\n\
    \    }\n  }\n  if (stoi(m) == 4 || stoi(m) == 6 || stoi(m) == 9 || stoi(m) ==\
    \ 11) {\n    if (stoi(d) > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqr92g3pn: /tmp/tmpqr92g3pn.cpp:21: bool valid_date(std::string): Assertion
    `date.length() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int days[12] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  int m = stoi(date.substr(0, 2));\n\
    \  int d = stoi(date.substr(3, 2));\n  int y = stoi(date.substr(6, 4));\n  if(date.size()\
    \ != 10) return false;\n  if(m < 1 || m > 12) return false;\n  if(d < 1 || d >\
    \ days[m - 1]) return false;\n  if(m == 2 && d == 29 && (y % 400 == 0 || (y %\
    \ 4 == 0 && y % 100 != 0))) return true;\n  if(m == 2 && d == 29) return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int month, day, year;\n\
    \  if(date.length() != 10){\n    return false;\n  }\n  for(int i = 0; i < date.length();\
    \ i++){\n    if(i == 2 || i == 5){\n      if(date[i] != '-'){\n        return\
    \ false;\n      }\n    }\n    else if(date[i] < '0' || date[i] > '9'){\n     \
    \ return false;\n    }\n  }\n  month = std::stoi(date.substr(0,2));\n  day = std::stoi(date.substr(3,2));\n\
    \  year = std::stoi(date.substr(6,4));\n  if(month < 1 || month > 12){\n    return\
    \ false;\n  }\n  else if(month == 2){\n    if(day < 1 || day > 29){\n      return\
    \ false;\n    }\n  }\n  else if(month == 4 || month == 6 || month == 9 || month\
    \ == 11){\n    if(day < 1 || day > 30){\n      return false;\n    }\n  }\n  else{\n\
    \    if(day < 1 || day > 31){\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ s(date);\n  std::string date_ele;\n  std::vector<std::string> date_vec;\n  while(std::getline(s,\
    \ date_ele, '-')){\n    date_vec.push_back(date_ele);\n  }\n  int month, day,\
    \ year;\n  if(date_vec.size() == 3){\n    month = std::stoi(date_vec[0]);\n  \
    \  day = std::stoi(date_vec[1]);\n    year = std::stoi(date_vec[2]);\n  }\n  else\
    \ return false;\n  if(month<1 || month>12) return false;\n  if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \    if(day<1 || day>31) return false;\n  }\n  else if(month == 4 || month ==\
    \ 6 || month == 9 || month == 11){\n    if(day<1 || day>30) return false;\n  }\n\
    \  else if(month == 2){\n    if(day<1 || day>29) return false;\n  }\n  else return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex date_reg(\"\\\
    \\d{2}-\\\\d{2}-\\\\d{4}\");\n  std::regex_match(date, date_reg);\n  // check\
    \ if string is empty\n  if (date.empty()) {\n    return false;\n  }\n  int month\
    \ = std::stoi(date.substr(0, 2));\n  int day = std::stoi(date.substr(3, 2));\n\
    \  int year = std::stoi(date.substr(6, 4));\n  // if the year is divisible by\
    \ 4 then it is a leap year\n  if (year % 4 == 0) {\n    if (month == 2 && day\
    \ <= 29) {\n      return true;\n    }\n  }\n  if (year % 4 != 0) {\n    if (month\
    \ == 2 && day <= 28) {\n      return true;\n    }\n  }\n  if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if (day <= 31) {\n      return true;\n    }\n  }\n  if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n    if (day <= 30) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp78q2mjtu: /tmp/tmp78q2mjtu.cpp:57: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size() == 0) return\
    \ false;\n  if(date.size() != 10) return false;\n  int month = stoi(date.substr(0,2));\n\
    \  int day = stoi(date.substr(3,2));\n  int year = stoi(date.substr(6,4));\n \
    \ if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return\
    \ false;\n  if(month == 2) return day <= 29;\n  if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11) return day <= 30;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int day,month,year;\n \
    \ day=month=year=0;\n  int n=date.length();\n  if(n!=10) return false;\n  for(int\
    \ i=0;i<n;i++){\n    if(date[i]=='-'){\n      if(i==2){\n        day=stoi(date.substr(0,2));\n\
    \        month=stoi(date.substr(3,2));\n        year=stoi(date.substr(6,4));\n\
    \      }\n      else{\n        return false;\n      }\n    }\n    else if(date[i]<48\
    \ || date[i]>57){\n      return false;\n    }\n  }\n  if(day<1 || day>31) return\
    \ false;\n  if(month<1 || month>12) return false;\n  if(year<0) return false;\n\
    \  if(month==2 && (day>29 || day<1)) return false;\n  if(month==4 || month==6\
    \ || month==9 || month==11){\n    if(day>30 || day<1) return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9o3nxr02: /tmp/tmp9o3nxr02.cpp:51: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.size() < 8) {\n\
    \t\treturn false;\n\t}\n\tstd::string day = date.substr(0, 2);\n\tstd::string\
    \ month = date.substr(3, 2);\n\tstd::string year = date.substr(6, 4);\n\t// std::cout\
    \ << day << \" \" << month << \" \" << year << std::endl;\n\t// check day number\n\
    \tint int_day = std::stoi(day);\n\tint int_month = std::stoi(month);\n\tint int_year\
    \ = std::stoi(year);\n\tstd::string slash = date.substr(2, 1);\n\tstd::string\
    \ dash = date.substr(5, 1);\n\tif (slash != \"-\" || dash != \"-\") {\n\t\treturn\
    \ false;\n\t}\n\tif (int_month < 1 || int_month > 12) {\n\t\treturn false;\n\t\
    }\n\tif (int_month == 1 || int_month == 3 || int_month == 5 || int_month == 7\
    \ || int_month == 8 || int_month == 10 || int_month == 12) {\n\t\tif (int_day\
    \ < 1 || int_day > 31) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (int_month ==\
    \ 4 || int_month == 6 || int_month == 9 || int_month == 11) {\n\t\tif (int_day\
    \ < 1 || int_day > 30) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (int_month ==\
    \ 2) {\n\t\tif (int_day < 1 || int_day > 29) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmped54c5h5: /tmp/tmped54c5h5.cpp:60: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tint days = 0;\n\tint month\
    \ = 0;\n\tint year = 0;\n\tfor (int i = 0; i < date.length(); i++) {\n\t\tif ((date[i]\
    \ == '-') && ((date[i - 1] >= '0') && (date[i - 1] <= '9')) && ((date[i + 1] >=\
    \ '0') && (date[i + 1] <= '9'))) {\n\t\t\tif (date[i - 2] == '-') {\n\t\t\t\t\
    month = ((date[i - 1] - '0') * 10) + (date[i] - '0');\n\t\t\t\tyear = ((date[i\
    \ + 1] - '0') * 1000) + ((date[i + 2] - '0') * 100) + ((date[i + 3] - '0') * 10)\
    \ + (date[i + 4] - '0');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdays = ((date[i - 1]\
    \ - '0') * 10) + (date[i] - '0');\n\t\t\t}\n\t\t}\n\t}\n\tif ((month > 12) ||\
    \ (month < 1)) {\n\t\treturn false;\n\t}\n\tif ((month == 1) || (month == 3) ||\
    \ (month == 5) || (month == 7) || (month == 8) || (month == 10) || (month == 12))\
    \ {\n\t\tif ((days > 31) || (days < 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    else if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {\n\t\t\
    if ((days > 30) || (days < 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (month\
    \ == 2) {\n\t\tif ((days > 29) || (days < 1)) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqw9ih3so: /tmp/tmpqw9ih3so.cpp:57: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  int\
    \ dd,mm,yyyy;\n  int len = date.length();\n  if(len != 10)\n    return false;\n\
    \  char d[2],m[2],y[4];\n  for(int i=0;i<2;i++)\n  {\n    d[i] = date[i];\n  \
    \  m[i] = date[i+3];\n    if(i<4)\n      y[i] = date[i+6];\n  }\n  int day = atoi(d);\n\
    \  int month = atoi(m);\n  int year = atoi(y);\n  // std::cout<<day<<\"-\"<<month<<\"\
    -\"<<year<<\"\\n\";\n  if(day>=1 && day<=31 && (month==1 || month==3 || month==5\
    \ || month==7 || month==8 || month==10 || month==12))\n    return true;\n  else\
    \ if(day>=1 && day<=30 && (month==4 || month==6 || month==9 || month==11))\n \
    \   return true;\n  else if(day>=1 && day<=29 && month==2)\n    return true;\n\
    \  else\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9xmw3808: /tmp/tmp9xmw3808.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length()!=10){\n\
    \    return false;\n  }\n  int index = date.find(\"-\");\n  int index2 = date.find(\"\
    -\",index+1);\n  std::string month = date.substr(0,index);\n  std::string day\
    \ = date.substr(index+1,index2-index-1);\n  std::string year = date.substr(index2+1,date.length()-index2-1);\n\
    \  int m = std::stoi(month);\n  int d = std::stoi(day);\n  int y = std::stoi(year);\n\
    \  if(m==2){\n    if(d>29){\n      return false;\n    }\n  }\n  else if(m==4 ||\
    \ m==6 || m==9 || m==11){\n    if(d>30){\n      return false;\n    }\n  }\n  else\
    \ if(m>12){\n    return false;\n  }\n  else if(d>31){\n    return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << date <<\
    \ std::endl;\n    std::regex my_reg(R\"(\\d{2}-\\d{2}-\\d{4})\");\n    if (!std::regex_match(date,\
    \ my_reg))\n        return false;\n    int mm = atoi(date.substr(0, 2).c_str());\n\
    \    int dd = atoi(date.substr(3, 2).c_str());\n    if (mm > 12 || mm < 1)\n \
    \       return false;\n    if (mm == 2) {\n        if (dd > 29 || dd < 1)\n  \
    \          return false;\n    } else if (mm % 2 == 0) {\n        if (dd > 30 ||\
    \ dd < 1)\n            return false;\n    } else {\n        if (dd > 31 || dd\
    \ < 1)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: '03-11-2000

    15-01-2012

    04-0-2040

    06-04-2020

    01-01-2007

    03-32-2011


    04-31-3000

    06-06-2005

    21-31-2000

    04-12-2003

    04122003

    20030412

    2003-04

    2003-04-12

    04-2003

    '
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   std::regex date_format(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\\\
    d{4}$\");\n    return std::regex_match(date, date_format);\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4_jwzymd: /tmp/tmp4_jwzymd.cpp:34: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.size() < 10) return\
    \ false;\n\tif (date[2] != '-' || date[5] != '-') return false;\n\t// 6-04-2020\n\
    \t// 0123456789\n\tint d = std::stoi(date.substr(0, 2));\n\tint m = std::stoi(date.substr(3,\
    \ 2));\n\tint y = std::stoi(date.substr(6, 4));\n\t// std::cout << d << \" \"\
    \ << m << \" \" << y << std::endl;\n\tif (m < 1 || m > 12) return false;\n\tif\
    \ (d < 1 || d > 31) return false;\n\tif (d == 31 && (m == 2 || m == 4 || m ==\
    \ 6 || m == 9 || m == 11)) return false;\n\tif (d == 30 && m == 2) return false;\n\
    \tif (d == 29 && m == 2 && y % 4 != 0) return false;\n\tif (d == 29 && m == 2\
    \ && y % 4 == 0 && y % 100 == 0 && y % 400 != 0) return false;\n\treturn true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6z0xffs_: /tmp/tmp6z0xffs_.cpp:40: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int days[12] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    std::vector<std::string> date_strings;\n\
    \    std::istringstream date_stream(date);\n    std::string date_string;\n   \
    \ while(std::getline(date_stream, date_string, '-')) {\n        date_strings.push_back(date_string);\n\
    \    }\n    if(date_strings.size() != 3) {\n        return false;\n    }\n   \
    \ int month = std::stoi(date_strings[0]);\n    int day = std::stoi(date_strings[1]);\n\
    \    if(month <= 0 || month > 12) {\n        return false;\n    }\n    if(day\
    \ <= 0 || day > days[month - 1]) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    if (date.size() != 10) return false;\n    if (date[2] != '-' || date[5] !=\
    \ '-') return false;\n    if (date[0] < '0' || date[0] > '9' || date[1] < '0'\
    \ || date[1] > '9' || date[3] < '0' || date[3] > '9' || date[4] < '0' || date[4]\
    \ > '9' || date[6] < '0' || date[6] > '9' || date[7] < '0' || date[7] > '9' ||\
    \ date[8] < '0' || date[8] > '9' || date[9] < '0' || date[9] > '9') return false;\n\
    \    day = (date[0] - '0') * 10 + (date[1] - '0');\n    month = (date[3] - '0')\
    \ * 10 + (date[4] - '0');\n    year = (date[6] - '0') * 1000 + (date[7] - '0')\
    \ * 100 + (date[8] - '0') * 10 + (date[9] - '0');\n    if (month < 1 || month\
    \ > 12) return false;\n    if (month == 2) {\n        if (year % 400 == 0 || (year\
    \ % 4 == 0 && year % 100 != 0)) {\n            if (day < 1 || day > 29) return\
    \ false;\n        } else {\n            if (day < 1 || day > 28) return false;\n\
    \        }\n    } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day\
    \ > 31) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_8c1us0r: /tmp/tmp_8c1us0r.cpp:45: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    std::vector<std::string> dates;\n    std::stringstream check1(date);\n  \
    \  std::string intermediate;\n    while(getline(check1, intermediate, '-')) {\n\
    \        dates.push_back(intermediate);\n    }\n    std::string dd = dates[0];\n\
    \    std::string mm = dates[1];\n    std::string yyyy = dates[2];\n    int dd_i\
    \ = std::stoi(dd);\n    int mm_i = std::stoi(mm);\n    int yyyy_i = std::stoi(yyyy);\n\
    \    if(mm_i > 12 || mm_i < 1) {\n        return false;\n    }\n    if(dd_i <\
    \ 1 || dd_i > 31) {\n        return false;\n    }\n    if(mm_i == 2) {\n     \
    \   if(dd_i > 29) {\n            return false;\n        }\n    }\n    if(mm_i\
    \ == 4 || mm_i == 6 || mm_i == 9 || mm_i == 11) {\n        if(dd_i > 30) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpziev674r: /tmp/tmpziev674r.cpp:55: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  vector<string> v;\n  int\
    \ month = 0, day = 0, year = 0;\n  char delim[] = \"-\";\n  char *ptr = strtok((char\
    \ *)date.c_str(), delim);\n  while (ptr != NULL) {\n    v.push_back(ptr);\n  \
    \  ptr = strtok(NULL, delim);\n  }\n  if (v.size() != 3)\n    return false;\n\
    \  month = stoi(v[0]);\n  day = stoi(v[1]);\n  year = stoi(v[2]);\n  if (month\
    \ < 1 || month > 12)\n    return false;\n  else if (month == 2) {\n    if (day\
    \ < 1 || day > 29)\n      return false;\n  } else if (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \    if (day < 1 || day > 31)\n      return false;\n  } else {\n    if (day <\
    \ 1 || day > 30)\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_bnjs_ez.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_bnjs_ez.cpp:21:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   21 |   vector<string> v;\n      |   ^~~~~~\n/tmp/tmp_bnjs_ez.cpp:21:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_bnjs_ez.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_bnjs_ez.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp_bnjs_ez.cpp:21:10:\
    \ error: \u2018string\u2019 was not declared in this scope\n   21 |   vector<string>\
    \ v;\n      |          ^~~~~~\n/tmp/tmp_bnjs_ez.cpp:21:10: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_bnjs_ez.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from "
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()==0) return\
    \ false;\n    std::vector<std::string> arr;\n    int len = date.size();\n    std::string\
    \ str=\"\";\n    for(int i=0;i<len;i++){\n        if(date[i]=='-'){\n        \
    \    arr.push_back(str);\n            str = \"\";\n        }\n        else{\n\
    \            str+=date[i];\n        }\n    }\n    arr.push_back(str);\n    if(arr.size()!=3)\
    \ return false;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i].size()!=2&&arr[i].size()!=4)\
    \ return false;\n    }\n    if(arr[1].size()!=2) return false;\n    if(arr[0].size()!=2&&arr[0].size()!=4)\
    \ return false;\n    for(int i=0;i<arr.size();i++){\n        for(int j=0;j<arr[i].size();j++){\n\
    \            if(arr[i][j]<'0'||arr[i][j]>'9') return false;\n        }\n    }\n\
    \    int m = std::stoi(arr[0]);\n    int d = std::stoi(arr[1]);\n    int y = std::stoi(arr[2]);\n\
    \    if(m<1||m>12) return false;\n    if(m==1||m==3||m==5||m==7||m==8||m==10||m==12){\n\
    \        if(d<1||d>31) return false;\n    }\n    else if(m==4||m==6||m==9||m==11){\n\
    \        if(d<1||d>30) return false;\n    }\n    else if(m==2){\n        if(d<1||d>29)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // assert(date.length()\
    \ != 0);\n  assert(date.length() > 0);\n  int day, month, year;\n  day = stoi(date.substr(0,\
    \ 2));\n  month = stoi(date.substr(3, 2));\n  year = stoi(date.substr(6, 4));\n\
    \  assert(day >= 1 && day <= 31);\n  assert(month >= 1 && month <= 12);\n  //\
    \ TODO\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9lhe3chi: /tmp/tmp9lhe3chi.cpp:35: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Do something here\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmq08o75w: /tmp/tmpmq08o75w.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133242
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length() == 0)\
    \ return false;\n  int month, day, year;\n  if(date.find(\"-\") != std::string::npos)\
    \ {\n    std::istringstream iss(date);\n    std::string token;\n    std::getline(iss,\
    \ token, '-');\n    month = stoi(token);\n    std::getline(iss, token, '-');\n\
    \    day = stoi(token);\n    std::getline(iss, token, '-');\n    year = stoi(token);\n\
    \  } else {\n    return false;\n  }\n  if(month < 1 || month > 12) return false;\n\
    \  if(month == 2) {\n    if(day < 1 || day > 29) return false;\n  } else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n    if(day < 1 || day > 31) return false;\n  } else {\n \
    \   if(day < 1 || day > 30) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133241
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int year, month, day;\n\
    \  char ch;\n  if(date.size() != 10)\n    return false;\n  if(date[2] != '-' ||\
    \ date[5] != '-')\n    return false;\n  sscanf(date.c_str(), \"%d%c%d%c%d\", &month,\
    \ &ch, &day, &ch, &year);\n  if(month > 12 || month < 1)\n    return false;\n\
    \  if(day > 31 || day < 1)\n    return false;\n  if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11)\n    if(day > 30)\n      return false;\n  if(month\
    \ == 2)\n    if(day > 29)\n      return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133242
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << \"Testing:\
    \ \" << date << std::endl;\n    std::string delimiter = \"-\";\n    std::string\
    \ dateString = date;\n    std::vector<std::string> dateTokens;\n    while (dateString.find(delimiter)\
    \ != std::string::npos) {\n        int pos = dateString.find(delimiter);\n   \
    \     std::string token = dateString.substr(0, pos);\n        dateTokens.push_back(token);\n\
    \        dateString.erase(0, pos + delimiter.length());\n    }\n    dateTokens.push_back(dateString);\n\
    \    if (dateTokens.size() != 3) {\n        return false;\n    } else {\n    \
    \    int month = stoi(dateTokens[0]);\n        int day = stoi(dateTokens[1]);\n\
    \        int year = stoi(dateTokens[2]);\n        if (month > 12 || month < 1)\
    \ {\n            return false;\n        } else if (day > 31 || day < 1) {\n  \
    \          return false;\n        } else if (month == 2 && day > 29) {\n     \
    \       return false;\n        } else if (month == 2 && day < 29) {\n        \
    \    return true;\n        } else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n            return\
    \ true;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    } else {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: "Testing: 03-11-2000\nTesting: 15-01-2012\nTesting: 04-0-2040\nTesting:\
    \ 06-04-2020\nTesting: 01-01-2007\nTesting: 03-32-2011\nTesting: \nTesting: 04-31-3000\n\
    Testing: 06-06-2005\nTesting: 21-31-2000\nTesting: 04-12-2003\nTesting: 04122003\n\
    Testing: 20030412\nTesting: 2003-04\nTesting: 2003-04-12\nTesting: 04-2003\n"
  timestamp: 1660133242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.size() != 10)\
    \ {\n\t\treturn false;\n\t}\n\telse {\n\t\tint month = stoi(date.substr(0, 2));\n\
    \t\tint day = stoi(date.substr(3, 2));\n\t\tint year = stoi(date.substr(6, 4));\n\
    \t\tif (date[2] != '-' || date[5] != '-') {\n\t\t\treturn false;\n\t\t}\n\t\t\
    else if (month < 1 || month > 12) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (day\
    \ < 1 || day > 31) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (year < 1) {\n\t\
    \t\treturn false;\n\t\t}\n\t\telse if (month == 2 && day > 29) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\telse if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n\t\t\tif (day > 30) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc_e_l5ag: /tmp/tmpc_e_l5ag.cpp:59: int main(): Assertion `candidate(("06-04-2020"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    //your code here\n  \
    \  if(date.size() == 0) {\n        return false;\n    }\n    std::string date_parts[3];\n\
    \    int c=0;\n    int n_date_parts = 0;\n    int day;\n    int month;\n    int\
    \ year;\n    bool is_valid = true;\n    std::string part = \"\";\n    std::string\
    \ date_format = \"\";\n    for(int i=0; i<date.size(); i++) {\n        if(date[i]\
    \ == '-') {\n            date_parts[c] = part;\n            part = \"\";\n   \
    \         c++;\n            n_date_parts++;\n        } else {\n            part\
    \ += date[i];\n        }\n    }\n    date_parts[c] = part;\n    n_date_parts++;\n\
    \    if(n_date_parts != 3) {\n        return false;\n    }\n    for(int i=0; i<3;\
    \ i++) {\n        date_format += date_parts[i];\n        if(i != 2) {\n      \
    \      date_format += \"-\";\n        }\n    }\n    if(date_format != date) {\n\
    \        return false;\n    }\n    std::stringstream s(date_parts[0]);\n    s\
    \ >> month;\n    s.clear();\n    s.str(date_parts[1]);\n    s >> day;\n    s.clear();\n\
    \    s.str(date_parts[2]);\n    s >> year;\n    if(year <=0) {\n        return\
    \ false;\n    }\n    if(month <= 0 || month > 12) {\n        return false;\n \
    \   }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if(day <= 0 || day > 31) {\n   \
    \         return false;\n        }\n    } else if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n        if(day <= 0 || day > 30) {\n         \
    \   return false;\n        }\n    } else if(month == 2) {\n        if(day <= 0\
    \ || day\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6jx5q4i.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpv6jx5q4i.cpp:81:27: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   81 |         if(day <= 0 || day\n      |           ~             \
    \  ^\n      |                           )\n   82 | }\n      | ~              \
    \            \n/tmp/tmpv6jx5q4i.cpp:82:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpv6jx5q4i.cpp:83:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   83\
    \ | int main() {\n      |            ^\n/tmp/tmpv6jx5q4i.cpp:101:1: error: expected\
    \ \u2018}\u2019 at end of input\n  101 | }\n      | ^\n/tmp/tmpv6jx5q4i.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpv6jx5q4i.cpp:101:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  101 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // if(date.length() !=\
    \ 10)\n    //     return false;\n    // int d, m, y;\n    // std::stringstream\
    \ ss;\n    // ss << date;\n    // ss >> m >> d >> y;\n    // if(m < 1 || m > 12)\n\
    \    //     return false;\n    // if(d < 1 || d > 31)\n    //     return false;\n\
    \    // if(y < 2000 || y > 2040)\n    //     return false;\n    // if(m == 2)\n\
    \    //     if(d > 29)\n    //         return false;\n    // if(m == 4 || m ==\
    \ 6 || m == 9 || m == 11)\n    //     if(d > 30)\n    //         return false;\n\
    \    // return true;\n    char a[4];\n    int x = 0;\n    for(int i = 0; i < date.length();\
    \ i++) {\n        if(i == 2 || i == 5) {\n            if(date[i] != '-')\n   \
    \             return false;\n        }\n        else {\n            if(date[i]\
    \ < '0' || date[i] > '9')\n                return false;\n            a[x++] =\
    \ date[i];\n        }\n    }\n    int d = (a[0] - '0') * 10 + (a[1] - '0');\n\
    \    int m = (a[2] - '0') * 10 + (a[3] - '0');\n    int y = (a[4] - '0') * 1000\
    \ + (a[5] - '0') * 100 + (a[6] - '0') * 10 + (a[7] - '0');\n    if(m < 1 || m\
    \ > 12)\n        return false;\n    if(m == 2) {\n        if(y % 4 == 0) {\n \
    \           if(d > 29)\n                return false;\n        }\n        else\
    \ if(d > 28)\n            return false;\n    }\n    else if(m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n        if(d > 30)\n            return false;\n    }\n\
    \   \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: '*** stack smashing detected ***: terminated

    '
  stdout: ''
  timestamp: 1660133243
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tstd::cout << date;\n\t\
    if (date.size() != 10) {\n\t\treturn false;\n\t}\n\tint day = std::stoi(date.substr(3,\
    \ 2));\n\tint month = std::stoi(date.substr(0, 2));\n\tint year = std::stoi(date.substr(6,\
    \ 4));\n\t//std::cout << \"day \" << day << \" month \" << month << \" year \"\
    \ << year << std::endl;\n\tint numOfDays = 0;\n\tif (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \t\tnumOfDays = 31;\n\t}\n\telse if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n\t\tnumOfDays = 30;\n\t}\n\telse if (month == 2) {\n\t\tnumOfDays\
    \ = 28;\n\t}\n\tif (numOfDays == 0) {\n\t\treturn false;\n\t}\n\tif (day > numOfDays\
    \ || day < 1) {\n\t\treturn false;\n\t}\n\tif (month > 12 || month < 1) {\n\t\t\
    return false;\n\t}\n\tif (year < 1) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: 03-11-200015-01-201204-0-204006-04-202001-01-200703-32-201104-31-300006-06-200521-31-200004-12-200304122003200304122003-042003-04-1204-2003
  timestamp: 1660133242
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day = 0, month =\
    \ 0, year = 0;\n    std::vector<int> days = {31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n    if(date.length()==0) return false;\n    sscanf(date.c_str(),\
    \ \"%d-%d-%d\", &month, &day, &year);\n    if(year < 1) return false;\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > days[month-1]) return\
    \ false;\n    if(month == 2 && day == 29 && year % 4 != 0) return false;\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  bool value = true;\n  std::regex\
    \ dateReg(\"^(0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](19|20)[0-9]{2}$\");\n\
    \  return value = std::regex_match(date, dateReg);\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_gqx4bbk: /tmp/tmp_gqx4bbk.cpp:28: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    // check whether date is empty\n    if (date.empty())\n        return false;\n\
    \    // check whether date is in correct format\n    std::stringstream ss(date);\n\
    \    char ch;\n    if (!(ss >> month >> ch >> day >> ch >> year))\n        return\
    \ false;\n    // check whether day or month is out of range\n    if ((day<1 ||\
    \ day>31) || (month<1 || month>12))\n        return false;\n    // check whether\
    \ month is February and days is out of range\n    if (month==2 && day>29)\n  \
    \      return false;\n    // check whether days are out of range for other months\n\
    \    else if ((day>30) && (month==4 || month==6 || month==9 || month==11))\n \
    \       return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133243
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length()==0) return\
    \ false;\n  int dd,mm,yyyy;\n  sscanf(date.c_str(),\"%d-%d-%d\",&mm,&dd,&yyyy);\n\
    \  if(mm<1 || mm>12) return false;\n  if(dd<1 || dd>31) return false;\n  if(mm==2\
    \ && dd>29) return false;\n  if(mm==4 || mm==6 || mm==9 || mm==11)\n  {\n    if(dd>30)\
    \ return false;\n  }\n  if(mm==1 || mm==3 || mm==5 || mm==7 || mm==8 || mm==10\
    \ || mm==12)\n  {\n    if(dd>31) return false;\n  }\n  if(yyyy<1) return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133242
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  int\
    \ pos1,pos2;\n  int length = date.length();\n  bool check=true;\n  if(length!=10)\n\
    \    return false;\n  for(int i=0;i<length;i++)\n  {\n    if(date[i]=='-')\n \
    \   {\n      pos1=i;\n      break;\n    }\n  }\n  for(int i=pos1+1;i<length;i++)\n\
    \  {\n    if(date[i]=='-')\n    {\n      pos2=i;\n      break;\n    }\n  }\n \
    \ std::string m = date.substr(0,pos1);\n  std::string d = date.substr(pos1+1,pos2-pos1-1);\n\
    \  std::string y = date.substr(pos2+1,length-pos2-1);\n  int m1=std::stoi(m);\n\
    \  int d1=std::stoi(d);\n  int y1=std::stoi(y);\n  if(m1>12)\n    return false;\n\
    \  if(d1<1 || d1>31)\n    return false;\n  if(y1<2000 || y1>2040)\n    return\
    \ false;\n  if(m1==2)\n  {\n    if(d1>29)\n      return false;\n  }\n  if(m1==4\
    \ || m1==6 || m1==9 || m1==11)\n  {\n    if(d1>30)\n      return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// Write your code here\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm55lah9j: /tmp/tmpm55lah9j.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // write your code here\n\
    \n  int a[6];\n  int b=0;\n  for(int i=0;i<date.length();i++)\n  {\n    if(date[i]=='-')\n\
    \    {\n      b++;\n    }\n    else if(date[i]>=0&&date[i]<=9)\n    {\n      a[b]=date[i];\n\
    \    }\n    else\n    {\n      return false;\n    }\n  }\n  if(b!=2)\n  {\n  \
    \  return false;\n  }\n  else\n  {\n    if(a[0]>12||a[0]<1)\n    {\n      return\
    \ false;\n    }\n    else if(a[0]==1||a[0]==3||a[0]==5||a[0]==7||a[0]==8||a[0]==10||a[0]==12)\n\
    \    {\n      if(a[1]>31||a[1]<1)\n      {\n        return false;\n      }\n \
    \   }\n    else if(a[0]==4||a[0]==6||a[0]==9||a[0]==11)\n    {\n      if(a[1]>30||a[1]<1)\n\
    \      {\n        return false;\n      }\n    }\n    else if(a[0]==2)\n    {\n\
    \      if(a[1]>29||a[1]<1)\n      {\n        return false;\n      }\n    }\n \
    \   else\n    {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf4kb8dly: /tmp/tmpf4kb8dly.cpp:80: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133243
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::vector<int> date_v;\n\
    \  std::stringstream ss(date);\n  int temp;\n  char delim;\n  while (ss >> temp)\
    \ {\n    date_v.push_back(temp);\n    ss >> delim;\n  }\n  if (date_v.size() !=\
    \ 3) {\n    return false;\n  }\n  if (date_v[0] < 1 || date_v[0] > 12) {\n   \
    \ return false;\n  }\n  if (date_v[0] == 2) {\n    if (date_v[1] < 1 || date_v[1]\
    \ > 29) {\n      return false;\n    }\n  }\n  if (date_v[0] == 1 || date_v[0]\
    \ == 3 || date_v[0] == 5 || date_v[0] == 7 || date_v[0] == 8 || date_v[0] == 10\
    \ || date_v[0] == 12) {\n    if (date_v[1] < 1 || date_v[1] > 31) {\n      return\
    \ false;\n    }\n  }\n  if (date_v[0] == 4 || date_v[0] == 6 || date_v[0] == 9\
    \ || date_v[0] == 11) {\n    if (date_v[1] < 1 || date_v[1] > 30) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\"\
    );\n  return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu0zd1wah: /tmp/tmpu0zd1wah.cpp:33: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.length()<=0)\n\
    \        return false;\n    if(date[2] != '-' || date[5] != '-')\n        return\
    \ false;\n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n\
    \    int year = stoi(date.substr(6,4));\n    std::vector<int> days = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if(year % 4 == 0)\n        days[1]\
    \ = 29;\n    if(month < 1 || month > 12)\n        return false;\n    if(day <\
    \ 1 || day > days[month-1])\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   int day,month,year;\n    char sep1,sep2;\n    if(date.size()==0)\n       \
    \ return false;\n    if(date.size()!=10)\n        return false;\n    if(date[2]!='-'\
    \ || date[5]!='-')\n        return false;\n    try{\n        sscanf(date.c_str(),\"\
    %d-%d-%d\",&month,&day,&year);\n    }\n    catch(...){\n        return false;\n\
    \    }\n    if(month<1 || month>12)\n        return false;\n    if(day<1 || day>31)\n\
    \        return false;\n    if(month==4 || month==6 || month==9 || month==11){\n\
    \        if(day>30)\n            return false;\n    }\n    if(month==2){\n   \
    \     if(day>29)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(date.length()>=8);\n\
    \  assert(date.length()<=10);\n  char delimiter = '-';\n  std::string month =\
    \ date.substr(0,2);\n  std::string day = date.substr(3,2);\n  std::string year\
    \ = date.substr(6,4);\n  if(date.find(delimiter)==std::string::npos) return false;\n\
    \  if(std::stoi(month)<1 or std::stoi(month)>12) return false;\n  if(std::stoi(month)==1\
    \ or std::stoi(month)==3 or std::stoi(month)==5 or std::stoi(month)==7 or std::stoi(month)==8\
    \ or std::stoi(month)==10 or std::stoi(month)==12){\n      if(std::stoi(day)<1\
    \ or std::stoi(day)>31) return false;\n  }\n  else if(std::stoi(month)==4 or std::stoi(month)==6\
    \ or std::stoi(month)==9 or std::stoi(month)==11){\n      if(std::stoi(day)<1\
    \ or std::stoi(day)>30) return false;\n  }\n  else if(std::stoi(month)==2){\n\
    \      if(std::stoi(day)<1 or std::stoi(day)>29) return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbu__lo8s: /tmp/tmpbu__lo8s.cpp:21: bool valid_date(std::string): Assertion
    `date.length()>=8'' failed.

    '
  stdout: ''
  timestamp: 1660133244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    vector<string> s;\n \
    \   vector<int> d;\n    int m = 0, flag = 0;\n    int count = 0;\n    for(auto\
    \ i : date) {\n        if(i == '-')\n            count++;\n    }\n    if(count\
    \ != 2)\n        return false;\n    stringstream str(date);\n    while(getline(str,\
    \ date, '-')) {\n        s.push_back(date);\n    }\n    for(auto i : s) {\n  \
    \      d.push_back(stoi(i));\n    }\n    m = d[0];\n    int c = 0;\n    for(auto\
    \ i : s) {\n        c++;\n        if(c > 2) {\n            if(i.size() != 4)\n\
    \                return false;\n        }\n        else {\n            if(i.size()\
    \ > 2)\n                return false;\n        }\n    }\n    switch(m) {\n   \
    \     case 1:\n        case 3:\n        case 5:\n        case 7:\n        case\
    \ 8:\n        case 10:\n        case 12:\n            if(d[1] > 31 || d[1] < 1)\n\
    \                return false;\n            break;\n        case 4:\n        case\
    \ 6:\n        case 9:\n        case 11:\n            if(d[1] > 30 || d[1] < 1)\n\
    \                return false;\n            break;\n        case 2:\n        \
    \    if(d[1] > 29 || d[1] < 1)\n                return false;\n            break;\n\
    \        default:\n            return false;\n    }\n    if(m > 12 || m < 1)\n\
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbcs6hwaw.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpbcs6hwaw.cpp:21:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   21 |     vector<string> s;\n      |     ^~~~~~\n/tmp/tmpbcs6hwaw.cpp:21:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbcs6hwaw.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbcs6hwaw.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpbcs6hwaw.cpp:21:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   21 |     vector<string>\
    \ s;\n      |            ^~~~~~\n/tmp/tmpbcs6hwaw.cpp:21:12: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbcs6hwaw.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file includ"
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream ss(date);\n\
    \    char ch;\n    int d, m, y;\n    ss >> d >> ch >> m >> ch >> y;\n    if(d<1\
    \ || d>31)\n        return false;\n    if(m<1 || m>12)\n        return false;\n\
    \    if(ch!='-')\n        return false;\n    return true;\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0ebqe2r5: /tmp/tmp0ebqe2r5.cpp:36: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.length() != 10)\
    \ {\n        return false;\n    }\n    int d = stoi(date.substr(0, 2));\n    int\
    \ m = stoi(date.substr(3, 2));\n    if(m < 1 || m > 12) {\n        return false;\n\
    \    }\n    int y = stoi(date.substr(6, 4));\n    if(d < 1 || d > 31) {\n    \
    \    return false;\n    }\n    if(m == 4 || m == 6 || m == 9 || m == 11) {\n \
    \       if(d > 30) {\n            return false;\n        }\n    }\n    if(m ==\
    \ 2) {\n        if(d > 29) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqktrbd3f: /tmp/tmpqktrbd3f.cpp:48: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133244
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date == \"\"){\n   \
    \ return false;\n  }\n  //std::cout << \"Date is: \" << date << std::endl;\n \
    \ std::string delimiter = \"-\";\n  size_t pos = 0;\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while ((pos = date.find(delimiter)) != std::string::npos) {\n   \
    \ token = date.substr(0, pos);\n    tokens.push_back(token);\n    date.erase(0,\
    \ pos + delimiter.length());\n  }\n  tokens.push_back(date);\n  // for(int i =\
    \ 0; i < tokens.size(); i++){\n  //   std::cout << tokens[i] << std::endl;\n \
    \ // }\n  if(tokens.size() != 3){\n    return false;\n  }\n  int month = stoi(tokens[0]);\n\
    \  int day = stoi(tokens[1]);\n  int year = stoi(tokens[2]);\n  if(month < 1 ||\
    \ month > 12){\n    return false;\n  }\n  if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n    if(day\
    \ < 1 || day > 31){\n      return false;\n    }\n  }\n  if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n    if(day < 1 || day > 30){\n      return\
    \ false;\n    }\n  }\n  if(month == 2){\n    if(day < 1 || day > 29){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()!=10){\n\
    \        return false;\n    }\n    int month,day,year;\n    sscanf(date.c_str(),\"\
    %d-%d-%d\",&month,&day,&year);\n    if(year<0){\n        return false;\n    }\n\
    \    if(month>12 || month<=0){\n        return false;\n    }\n    if(day>31 ||\
    \ day<=0){\n        return false;\n    }\n    if(month==4 || month==6 || month==9\
    \ || month==11){\n        if(day>30){\n            return false;\n        }\n\
    \    }\n    if(month==2){\n        if(day>29){\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprbrmd9ze: /tmp/tmprbrmd9ze.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133244
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::stringstream ss(date);\n    std::string str;\n    int a[3];\n    int\
    \ i=0;\n    while(std::getline(ss,str,'-')){\n        a[i++]=stoi(str);\n    }\n\
    \    if(a[0]>0 && a[0]<13){\n        if(a[0]==1 || a[0]==3 || a[0]==5 || a[0]==7\
    \ || a[0]==8 || a[0]==10 || a[0]==12){\n            if(a[1]>0 && a[1]<32){\n \
    \               return true;\n            }\n        }\n        else if(a[0]==4\
    \ || a[0]==6 || a[0]==9 || a[0]==11){\n            if(a[1]>0 && a[1]<31){\n  \
    \              return true;\n            }\n        }\n        else if(a[0]==2){\n\
    \            if(a[1]>0 && a[1]<30){\n                return true;\n          \
    \  }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  vector<string> v_date;\n\
    \  std::stringstream check1(date);\n  std::string intermediate;\n  while(getline(check1,\
    \ intermediate, '-')) {\n    v_date.push_back(intermediate);\n  }\n  if(date ==\
    \ \"\")\n    return false;\n  int day = stoi(v_date[1]);\n  int month = stoi(v_date[0]);\n\
    \  if(month < 1 || month > 12)\n    return false;\n  else if(day < 1)\n    return\
    \ false;\n  else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n    if(day > 31)\n      return false;\n\
    \  }\n  else if(month == 4 || month == 6 || month == 9 || month == 11) {\n   \
    \ if(day > 30)\n      return false;\n  }\n  else if(month == 2) {\n    if(day\
    \ > 29)\n      return false;\n  }\n  else\n    return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5zss_mp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpy5zss_mp.cpp:21:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   21 |   vector<string> v_date;\n      |   ^~~~~~\n/tmp/tmpy5zss_mp.cpp:21:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy5zss_mp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy5zss_mp.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpy5zss_mp.cpp:21:10:\
    \ error: \u2018string\u2019 was not declared in this scope\n   21 |   vector<string>\
    \ v_date;\n      |          ^~~~~~\n/tmp/tmpy5zss_mp.cpp:21:10: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpy5zss_mp.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file incl"
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size()==0){\n \
    \   return false;\n  }\n  int y, m, d;\n  y = std::stoi(date.substr(6, 4));\n\
    \  m = std::stoi(date.substr(3, 2));\n  d = std::stoi(date.substr(0, 2));\n  if(m\
    \ < 1 || m > 12){\n    return false;\n  }\n  else if(m == 2){\n    if(d<1 || d>29){\n\
    \      return false;\n    }\n  }\n  else if(m==1 || m==3 || m==5 || m==7 || m==8\
    \ || m==10 || m==12){\n    if(d<1 || d>31){\n      return false;\n    }\n  }\n\
    \  else if(m==4 || m==6 || m==9 || m==11){\n    if(d<1 || d>30){\n      return\
    \ false;\n    }\n  }\n  else{\n    return false;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppsx73btk: /tmp/tmppsx73btk.cpp:54: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// your code here\n  if(date.size()\
    \ != 10) return false;\n  if(date[2] != '-' || date[5] != '-') return false;\n\
    \  int month = (date[0] - '0') * 10 + (date[1] - '0');\n  int day = (date[3] -\
    \ '0') * 10 + (date[4] - '0');\n  if(day < 1 || day > 31) return false;\n  if(month\
    \ == 2) {\n    if(day > 29) return false;\n  }\n  else if(month % 2 == 0 && month\
    \ != 8) {\n    if(day > 30) return false;\n  }\n  else if(month > 12) return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    //your code here\n  \
    \  int d,m,y;\n    //date = date.substr(0,date.size()-1);\n    if(sscanf(date.c_str(),\"\
    %d-%d-%d\",&m,&d,&y) != 3)\n        return false;\n    if(m<1 || m>12)\n     \
    \   return false;\n    if(m == 2){\n        if(d<1 || d>29)\n            return\
    \ false;\n    }\n    else if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 ||\
    \ m == 10 || m == 12){\n        if(d<1 || d>31)\n            return false;\n \
    \   }\n    else{\n        if(d<1 || d>30)\n            return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size() == 0)\n\
    \        return false;\n    std::regex pattern(\"^(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n    std::smatch matches;\n    if(std::regex_match(date, matches, pattern))\
    \ {\n        return std::stoi(matches[2]) <= 31 && std::stoi(matches[1]) <= 12;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpy7889fxl: /tmp/tmpy7889fxl.cpp:39: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string format_date\
    \ = \"mm-dd-yyyy\";\n    for (int i = 0; i < date.length(); i++) {\n        if(date[i]\
    \ != format_date[i])\n            return false;\n    }\n    std::stringstream\
    \ ss;\n    ss << date;\n    std::string mm;\n    std::string dd;\n    std::string\
    \ yyyy;\n    getline(ss, mm, '-');\n    getline(ss, dd, '-');\n    getline(ss,\
    \ yyyy, '-');\n    int m = std::stoi(mm);\n    int d = std::stoi(dd);\n    int\
    \ y = std::stoi(yyyy);\n    if (m < 1 || m > 12) {\n        return false;\n  \
    \  }\n    else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 ||\
    \ m == 12) {\n        if (d < 1 || d > 31) {\n            return false;\n    \
    \    }\n    }\n    else if (m == 4 || m == 6 || m == 9 || m == 11) {\n       \
    \ if (d < 1 || d > 30) {\n            return false;\n        }\n    }\n    else\
    \ if (m == 2) {\n        if (d < 1 || d > 29) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpqoyplkd3: /tmp/tmpqoyplkd3.cpp:59: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::regex pattern(\"\
    ([01]?[0-9]|2[0-3])-(0?[1-9]|[12][0-9]|3[01])-([0-9]{4})\");\n    std::smatch\
    \ matches;\n    return std::regex_match(date, matches, pattern);\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi_5yblii: /tmp/tmpi_5yblii.cpp:28: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string d, m, y;\n\
    \  int index = 0;\n  int count = 0;\n  while (date[index] != '\\0') {\n    if\
    \ (date[index] == '-') {\n      count++;\n    }\n    index++;\n  }\n  assert(count\
    \ == 2);\n  std::regex pattern(\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n  if\
    \ (std::regex_match(date, pattern)) {\n    std::istringstream iss(date);\n   \
    \ std::getline(iss, m, '-');\n    std::getline(iss, d, '-');\n    std::getline(iss,\
    \ y, '-');\n    assert(std::stoi(d) >= 1);\n    assert(std::stoi(m) >= 1);\n \
    \   assert(std::stoi(y) >= 1);\n    // months 1,3,5,7,8,10,12\n    if (std::stoi(m)\
    \ == 1 || std::stoi(m) == 3 || std::stoi(m) == 5 || std::stoi(m) == 7 || std::stoi(m)\
    \ == 8 || std::stoi(m) == 10 || std::stoi(m) == 12) {\n      assert(std::stoi(d)\
    \ <= 31);\n    }\n    // months 4,6,9,11\n    else if (std::stoi(m) == 4 || std::stoi(m)\
    \ == 6 || std::stoi(m) == 9 || std::stoi(m) == 11) {\n      assert(std::stoi(d)\
    \ <= 30);\n    }\n    // month 2\n    else if (std::stoi(m) == 2) {\n      if\
    \ (std::stoi(y) % 4 == 0) {\n        assert(std::stoi(d) <= 29);\n      }\n  \
    \    else {\n        assert(std::stoi(d) <= 28);\n      }\n    }\n    else {\n\
    \      return false;\n    }\n    return true;\n  }\n  else {\n    return false\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz98gjx8x.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpz98gjx8x.cpp:63:17: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   63 |     return false\n      |                 ^\n      |        \
    \         ;\n   64 | }\n      | ~                \n/tmp/tmpz98gjx8x.cpp:65:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   65 | int main() {\n      |            ^\n/tmp/tmpz98gjx8x.cpp:83:1: error:\
    \ expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpz98gjx8x.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n"
  stdout: ''
  timestamp: 1660133245
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int a,b,c;\n  std::vector<std::string>\
    \ z;\n  std::stringstream ss(date);\n  std::string token;\n  while(std::getline(ss,\
    \ token, '-'))\n  {\n      z.push_back(token);\n  }\n  a=std::stoi(z[0]);\n  b=std::stoi(z[1]);\n\
    \  c=std::stoi(z[2]);\n  if((a==1||a==3||a==5||a==7||a==8||a==10||a==12)&&(b>=1&&b<=31))\n\
    \  {\n    return true;\n  }\n  else if((a==4||a==6||a==9||a==11)&&(b>=1&&b<=30))\n\
    \  {\n    return true;\n  }\n  else if(a==2&&(b>=1&&b<=29))\n  {\n    return true;\n\
    \  }\n  else\n  {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()!=10) return\
    \ false;\n    if(date[2]!='-' || date[5]!='-') return false;\n    int m = (date[0]-'0')*10\
    \ + (date[1]-'0');\n    int d = (date[3]-'0')*10 + (date[4]-'0');\n    int y =\
    \ (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n\
    \    if(d<1 || d>31) return false;\n    if(m<1 || m>12) return false;\n    if(m==2)\
    \ {\n        if(d>29) return false;\n        if(d==29) {\n            if(y%400==0)\
    \ return true;\n            if(y%100==0) return false;\n            if(y%4==0)\
    \ return true;\n            return false;\n        }\n    }\n    if(m==4 || m==6\
    \ || m==9 || m==11) {\n        if(d>30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here.\n\
    \    int i, days, month, year;\n    int d_count = 0, m_count = 0, y_count = 0;\n\
    \    int len = date.length();\n    for(i = 0; i < len; i++)\n    {\n        if(d_count\
    \ == 1 && m_count == 1 && y_count == 1)\n            break;\n        if(date[i]\
    \ == '-' && d_count == 0)\n        {\n            d_count = 1;\n            continue;\n\
    \        }\n        if(date[i] == '-' && m_count == 0)\n        {\n          \
    \  m_count = 1;\n            continue;\n        }\n        if(d_count == 0)\n\
    \            days = days * 10 + (date[i] - '0');\n        else if(m_count == 0)\n\
    \            month = month * 10 + (date[i] - '0');\n        else\n           \
    \ year = year * 10 + (date[i] - '0');\n    }\n    if(i != len || days < 1 || month\
    \ < 1 || year < 1)\n        return false;\n    else if(month > 12)\n        return\
    \ false;\n    else if(month == 2 && days > 29)\n        return false;\n    else\
    \ if((month == 4 || month == 6 || month == 9 || month == 11) && days > 30)\n \
    \       return false;\n    else if(days > 31)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo94gvrgz: /tmp/tmpo94gvrgz.cpp:60: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   std::vector<std::string> date_components;\n    int no_of_days;\n    for(int\
    \ i=0;i<3;i++){\n      date_components.push_back(date.substr(i*2,2));\n    }\n\
    \    if(date_components[0] == \"01\" || date_components[0] == \"03\" || date_components[0]\
    \ == \"05\" || date_components[0] == \"07\" || date_components[0] == \"08\" ||\
    \ date_components[0] == \"10\" || date_components[0] == \"12\"){\n      no_of_days\
    \ = 31;\n    }\n    else if(date_components[0] == \"04\" || date_components[0]\
    \ == \"06\" || date_components[0] == \"09\" || date_components[0] == \"11\"){\n\
    \      no_of_days = 30;\n    }\n    else if(date_components[0] == \"02\"){\n \
    \     no_of_days = 29;\n    }\n    if(stoi(date_components[1]) > no_of_days){\n\
    \      return false;\n    }\n    if(stoi(date_components[0]) > 12){\n      return\
    \ false;\n    }\n    if(date.find(\"-\") == std::string::npos){\n      return\
    \ false;\n    }\n    if(date.length() != 10){\n      return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu9nuzbvp: /tmp/tmpu9nuzbvp.cpp:57: int main(): Assertion `candidate(("03-32-2011"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-'))\n    {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size()!=3)\n        return false;\n    for(int i=0;i<3;i++)\n\
    \    {\n        for(int j=0;j<tokens[i].size();j++)\n        {\n            if(tokens[i][j]<'0'||tokens[i][j]>'9')\n\
    \                return false;\n        }\n    }\n    int month=stoi(tokens[0]);\n\
    \    int date=stoi(tokens[1]);\n    if(month<1||month>12)\n        return false;\n\
    \    if(month==2)\n    {\n        if(date<1||date>29)\n            return false;\n\
    \    }\n    else if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)\n\
    \    {\n        if(date<1||date>31)\n            return false;\n    }\n    else\n\
    \    {\n        if(date<1||date>30)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctbaatoz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpctbaatoz.cpp:40:9: error: declaration of \u2018int date\u2019 shadows\
    \ a parameter\n   40 |     int date=stoi(tokens[1]);\n      |         ^~~~\n"
  stdout: ''
  timestamp: 1660133244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex txt_regex(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\");\n  if(std::regex_match(date,\
    \ txt_regex)) {\n    return true;\n  }\n  return false;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxfmhfj5u: /tmp/tmpxfmhfj5u.cpp:36: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(date != \"\");\n\
    \  // YOUR CODE HERE\n  int m,d,y;\n  std::vector<std::string> v;\n  std::stringstream\
    \ ss(date);\n  std::string str;\n  while(std::getline(ss,str,'-'))\n  {\n    v.push_back(str);\n\
    \  }\n  m = stoi(v[0]);\n  d = stoi(v[1]);\n  y = stoi(v[2]);\n  if(m > 12 ||\
    \ m < 1)\n  {\n    return false;\n  }\n  if(m == 1 || m == 3 || m == 5 || m ==\
    \ 7 || m == 8 || m == 10 || m == 12)\n  {\n    if(d > 31 || d < 1)\n    {\n  \
    \    return false;\n    }\n  }\n  else if(m == 4 || m == 6 || m == 9 || m == 11)\n\
    \  {\n    if(d > 30 || d < 1)\n    {\n      return false;\n    }\n  }\n  else\
    \ if(m == 2)\n  {\n    if(d > 29 || d < 1)\n    {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9zcj9p1k: /tmp/tmp9zcj9p1k.cpp:21: bool valid_date(std::string): Assertion
    `date != ""'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   int d,m,y;\n    d=m=y=0;\n    //if(date.length()==0)\n    // return false;\n\
    \    if(date.length()!=10)\n    return false;\n    std::stringstream s(date);\n\
    \    std::string word;\n    s>>word;\n    if(word.length()!=2)\n    return false;\n\
    \    m=std::stoi(word);\n    if(m>12)\n    return false;\n    s>>word;\n    if(word.length()!=2)\n\
    \    return false;\n    d=std::stoi(word);\n    if(d>31)\n    return false;\n\
    \    if(m==2 && d>29)\n    return false;\n    if(m==4 || m==6 || m==9 || m==11)\n\
    \    {\n        if(d>30)\n        return false;\n    }\n    s>>word;\n    if(word.length()!=4)\n\
    \    return false;\n    y=std::stoi(word);\n    if(y>9999)\n    return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9j1j9ayq: /tmp/tmp9j1j9ayq.cpp:59: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  if(date.length()!=10){\n\
    \      return false;\n  }\n  std::string day = date.substr(0,2);\n  std::string\
    \ month = date.substr(3,2);\n  std::string year = date.substr(6,4);\n  //std::cout<<day<<\"\
    \ \"<<month<<\" \"<<year<<std::endl;\n  if(!(date[2]=='-' && date[5]=='-')){\n\
    \      return false;\n  }\n  int d = stoi(day);\n  int m = stoi(month);\n  int\
    \ y = stoi(year);\n  if(d>31 || d<1){\n      return false;\n  }\n  if(m>12 ||\
    \ m<1){\n      return false;\n  }\n  if(m==2){\n      if(d>29){\n          return\
    \ false;\n      }\n  }\n  if(m==4 || m==6 || m==9 || m==11){\n      if(d>30){\n\
    \          return false;\n      }\n  }\n  if(m==2){\n      if(d>29){\n       \
    \   return false;\n      }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpru1rvw69: /tmp/tmpru1rvw69.cpp:61: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.size() < 10) return\
    \ false;\n\tif (date[2] != '-' || date[5] != '-') return false;\n\tint month =\
    \ (date[0] - '0') * 10 + (date[1] - '0');\n\tint day = (date[3] - '0') * 10 +\
    \ (date[4] - '0');\n\tint year = (date[6] - '0') * 1000 + (date[7] - '0') * 100\
    \ + (date[8] - '0') * 10 + (date[9] - '0');\n\tif (year < 1000 || year > 9999)\
    \ return false;\n\tif (month < 1 || month > 12) return false;\n\tif (month ==\
    \ 2) {\n\t\tif (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n\t\t\
    \tif (day < 1 || day > 29) return false;\n\t\t} else {\n\t\t\tif (day < 1 || day\
    \ > 28) return false;\n\t\t}\n\t} else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\t\tif (day\
    \ < 1 || day > 31) return false;\n\t} else {\n\t\tif (day < 1 || day > 30) return\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// Check whether the date\
    \ is empty or not\n\tif (date.empty()) {\n\t\treturn false;\n\t}\n\t// Check whether\
    \ the format is correct or not\n\tif (date[2] != '-' || date[5] != '-') {\n\t\t\
    return false;\n\t}\n\t// Extract the days, months and year values\n\tint days\
    \ = std::stoi(date.substr(0, 2));\n\tint months = std::stoi(date.substr(3, 2));\n\
    \tint year = std::stoi(date.substr(6, 4));\n\t// Check whether the days, months\
    \ and year are all positive or not\n\tif (days <= 0 || months <= 0 || year <=\
    \ 0) {\n\t\treturn false;\n\t}\n\t// Check whether the months are in the range\
    \ 1 to 12 or not\n\tif (months < 1 || months > 12) {\n\t\treturn false;\n\t}\n\
    \t// Check whether the days are in the range 1 to 31 or not, for the months 1,3,5,7,8,10,12\n\
    \tif ((months == 1 || months == 3 || months == 5 || months == 7 || months == 8\
    \ || months == 10 || months == 12) && (days < 1 || days > 31)) {\n\t\treturn false;\n\
    \t}\n\t// Check whether the days are in the range 1 to 30 or not, for the months\
    \ 4,6,9,11\n\tif ((months == 4 || months == 6 || months == 9 || months == 11)\
    \ && (days < 1 || days > 30)) {\n\t\treturn false;\n\t}\n\t// Check whether the\
    \ days are in the range 1 to 29 or not, for the month 2\n\tif (months == 2 &&\
    \ (days < 1 || days > 29)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphm5bmuqt: /tmp/tmphm5bmuqt.cpp:58: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \      return false;\n    if(date[2]!='-' || date[5]!='-')\n      return false;\n\
    \    int x=date[0]-'0';\n    int y=date[1]-'0';\n    int months=x*10+y;\n    x=date[3]-'0';\n\
    \    y=date[4]-'0';\n    int days=x*10+y;\n    x=date[6]-'0';\n    y=date[7]-'0';\n\
    \    int year=x*10+y;\n    x=date[8]-'0';\n    y=date[9]-'0';\n    year=year*10+x*10+y;\n\
    \    if(months<=0 || months>12)\n      return false;\n    if(months==1 || months==3\
    \ || months==5 || months==7 || months==8 || months==10 || months==12)\n    {\n\
    \      if(days<=0 || days>31)\n        return false;\n    }\n    else if(months==4\
    \ || months==6 || months==9 || months==11)\n    {\n      if(days<=0 || days>30)\n\
    \        return false;\n    }\n    else\n    {\n      if(days<=0 || days>29)\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int yyyy, mm, dd;\n  sscanf(date.c_str(),\
    \ \"%d-%d-%d\", &mm, &dd, &yyyy);\n  if (yyyy < 0) return false;\n  if (mm < 1\
    \ || mm > 12) return false;\n  int max_day;\n  if (mm == 2) {\n    max_day = 29;\n\
    \  } else if (mm == 4 || mm == 6 || mm == 9 || mm == 11) {\n    max_day = 30;\n\
    \  } else {\n    max_day = 31;\n  }\n  if (dd < 1 || dd > max_day) return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // make sure the string\
    \ isn't empty\n    if (date.length() == 0) {\n        return false;\n    }\n \
    \   // make sure the string is not in the wrong format\n    // i.e. must be mm-dd-yyyy\n\
    \    if (date.find(\"-\") == std::string::npos) {\n        return false;\n   \
    \ }\n    // split the string into month, day, and year\n    std::string s_month\
    \ = date.substr(0, date.find(\"-\"));\n    std::string s_day = date.substr(date.find(\"\
    -\") + 1, date.rfind(\"-\") - (date.find(\"-\") + 1));\n    std::string s_year\
    \ = date.substr(date.rfind(\"-\") + 1, date.length() - (date.rfind(\"-\") + 1));\n\
    \    // convert the month, day, and year to ints\n    int month = std::stoi(s_month);\n\
    \    int day = std::stoi(s_day);\n    int year = std::stoi(s_year);\n    // make\
    \ sure the year, month, and day are within valid ranges\n    if (year < 2000 ||\
    \ year > 2100) {\n        return false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    // make sure the month and day are valid\n    if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) {\n        if (day > 31) {\n            return false;\n       \
    \ }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \        if (day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (month == 2) {\n        if (day > 29) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// Write your code here\n\
    \tif (date.size() == 0) {\n\t\treturn false;\n\t}\n\tstd::vector<int> months =\
    \ {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\tstd::vector<std::string>\
    \ tokens;\n\tstd::stringstream check1(date);\n\tstd::string intermediate;\n\t\
    while (getline(check1, intermediate, '-')) {\n\t\ttokens.push_back(intermediate);\n\
    \t}\n\t// for (int i = 0; i < tokens.size(); i++) {\n\t// \tstd::cout << tokens[i]\
    \ << \" \";\n\t// }\n\t// std::cout << '\\n';\n\tif (tokens.size() != 3) {\n\t\
    \treturn false;\n\t}\n\tif (tokens[0].size() != 2 || tokens[1].size() != 2 ||\
    \ tokens[2].size() != 4) {\n\t\treturn false;\n\t}\n\t// for (int i = 0; i < tokens.size();\
    \ i++) {\n\t// \tfor (int j = 0; j < tokens[i].size(); j++) {\n\t// \t\tif (!isdigit(tokens[i][j]))\
    \ {\n\t// \t\t\treturn false;\n\t// \t\t}\n\t// \t}\n\t// }\n\tif (stoi(tokens[1])\
    \ < 1 || stoi(tokens[1]) > 12) {\n\t\treturn false;\n\t}\n\t// if (stoi(tokens[1])\
    \ == 2) {\n\t// \tif (stoi(tokens[0]) > 29) {\n\t// \t\treturn false;\n\t// \t\
    }\n\t// }\n\tif (stoi(tokens[1]) == 2) {\n\t\tif (stoi(tokens[0]) < 1 || stoi(tokens[0])\
    \ > 29) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (stoi(tokens[1]) == 1 ||\
    \ stoi(\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_4jbht0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpm_4jbht0.cpp:63:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   63 | }\n      | ^\n/tmp/tmpm_4jbht0.cpp:62:40: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   62 |  else if (stoi(tokens[1])\
    \ == 1 || stoi(\n      |          ~                             ^\n      |   \
    \                                     )\n   63 | }\n      | ~                \
    \                       \n/tmp/tmpm_4jbht0.cpp:63:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpm_4jbht0.cpp:63:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()<9)\n \
    \       return false;\n    if(date[2] != '-' || date[5] != '-')\n        return\
    \ false;\n    int n = date.size();\n    for(int i=0;i<n;i++)\n    {\n        if(i==2\
    \ || i==5)\n            continue;\n        if(date[i]<'0' || date[i]>'9')\n  \
    \          return false;\n    }\n    std::stringstream ss;\n    int d,m,y;\n \
    \   ss<<date.substr(0,2);\n    ss>>m;\n    ss.clear();\n    ss<<date.substr(3,2);\n\
    \    ss>>d;\n    ss.clear();\n    ss<<date.substr(6,4);\n    ss>>y;\n    if(m<1\
    \ || m>12)\n        return false;\n    if(m==1 || m==3 || m==5 || m==7 || m==8\
    \ || m==10 || m==12)\n    {\n        if(d<1 || d>31)\n            return false;\n\
    \    }\n    else if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d<1 || d>30)\n\
    \            return false;\n    }\n    else if(m==2)\n    {\n        if(d<1 ||\
    \ d>29)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int l = date.length();\n\
    \    for(int i=0;i<l;i++) {\n        if(date[i]=='/') date[i]='-';\n    }\n  \
    \  if(date[2]!='-' || date[5]!='-') return false;\n    int days;\n    int month\
    \ = stoi(date.substr(0,2));\n    if(month<1 || month>12) return false;\n    days\
    \ = stoi(date.substr(3,2));\n    if(month==2) {\n        if(days<1 || days>29)\
    \ return false;\n    }\n    else if(month==1 || month==3 || month==5 || month==7\
    \ || month==8 || month==10 || month==12) {\n        if(days<1 || days>31) return\
    \ false;\n    }\n    else {\n        if(days<1 || days>30) return false;\n   \
    \ }\n    int year = stoi(date.substr(6,4));\n    if(year<1) return false;\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    std::cout<<date<<std::endl;\n    if(date.length()!=10) return false;\n  \
    \  for(int i=0;i<date.length();i++){\n        if(i==2||i==5) continue;\n     \
    \   if(!(date[i]>='0'&&date[i]<='9')) return false;\n    }\n    if(date[2]!='-'||date[5]!='-')\
    \ return false;\n    int day,mon,year;\n    day=10*(date[0]-'0')+(date[1]-'0');\n\
    \    mon=10*(date[3]-'0')+(date[4]-'0');\n    year=1000*(date[6]-'0')+100*(date[7]-'0')+10*(date[8]-'0')+(date[9]-'0');\n\
    \    if(mon<1||mon>12) return false;\n    if(mon==1||mon==3||mon==5||mon==7||mon==8||mon==10||mon==12){\n\
    \        if(day<1||day>31) return false;\n    }\n    else if(mon==4||mon==6||mon==9||mon==11){\n\
    \        if(day<1||day>30) return false;\n    }\n    else{\n        if(year%4==0&&year%100!=0||year%400==0){\n\
    \            if(day<1||day>29) return false;\n        }\n        else{\n     \
    \       if(day<1||day>28) return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4jbbedo_: /tmp/tmp4jbbedo_.cpp:53: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: '03-11-2000

    15-01-2012

    '
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here.\n  bool\
    \ flag=false;\n  int arr[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n  int m=0,dd=0,yy=0;\n\
    \  for(int i=0;i<date.length();i++)\n  {\n    if(date[i]=='-')\n    {\n      flag=true;\n\
    \      continue;\n    }\n    if(flag==false)\n    {\n      m=m*10+(date[i]-'0');\n\
    \    }\n    else if(flag==true && date[i]!='-')\n    {\n      dd=dd*10+(date[i]-'0');\n\
    \    }\n    else\n    {\n      yy=yy*10+(date[i]-'0');\n    }\n  }\n  if(dd<=arr[m-1]\
    \ && dd>0 && yy>0 && m>0 && m<=12)\n  {\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp7jfsyaw: /tmp/tmpp7jfsyaw.cpp:55: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(false);\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm5imeazt: /tmp/tmpm5imeazt.cpp:21: bool valid_date(std::string): Assertion
    `false'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::vector<int> days={31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \  int month, day, year;\n  std::stringstream stream(date);\n  stream >> month;\n\
    \  stream.ignore(1);\n  stream >> day;\n  stream.ignore(1);\n  stream >> year;\n\
    \  //cout << month << \" \" << day << \" \" << year << endl;\n  if(month < 1 ||\
    \ month > 12)\n    return false;\n  if(day < 1 || day > days[month-1])\n    return\
    \ false;\n  if(year < 0)\n    return false;\n  return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::regex rx(R\"(^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$)\"\
    );\n    if (std::regex_match(date, rx))\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8cx8yhz9: /tmp/tmp8cx8yhz9.cpp:35: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133248
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size() != 10)\n\
    \        return false;\n    if(date[2] != '-' || date[5] != '-')\n        return\
    \ false;\n    int days = std::stoi(date.substr(0,2));\n    int month = std::stoi(date.substr(3,2));\n\
    \    int year = std::stoi(date.substr(6,4));\n    if(month < 1 || month > 12)\n\
    \        return false;\n    if(days < 1 || days > 31)\n        return false;\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(days\
    \ > 30)\n            return false;\n    if(month == 2)\n        if(days > 29)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp82at0ss0: /tmp/tmp82at0ss0.cpp:43: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// Write your code here\n\
    \treturn false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiyv0nvlo: /tmp/tmpiyv0nvlo.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex format(\"\\\\\
    d{2}-\\\\d{2}-\\\\d{4}\");\n  if(!std::regex_match(date, format))\n    return\
    \ false;\n  int dd = atoi(date.substr(0,2).c_str());\n  int mm = atoi(date.substr(3,2).c_str());\n\
    \  int yyyy = atoi(date.substr(6,4).c_str());\n  std::vector<int> days = {31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \  if(dd<1 || dd>days[mm-1]) return false;\n  if(mm<1 || mm>12) return false;\n\
    \  if(yyyy<1) return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppxdhswwq: /tmp/tmppxdhswwq.cpp:36: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size() != 10)\n\
    \    return false;\n  if(date[2] != '-' || date[5] != '-')\n    return false;\n\
    \  std::string month, day, year;\n  month = date.substr(0, 2);\n  day = date.substr(3,\
    \ 2);\n  year = date.substr(6, 4);\n  std::stringstream ss(month);\n  int m;\n\
    \  ss >> m;\n  std::stringstream ss1(day);\n  int d;\n  ss1 >> d;\n  std::stringstream\
    \ ss2(year);\n  int y;\n  ss2 >> y;\n  if(m == 2) {\n    if(d <= 0 || d > 29)\n\
    \      return false;\n  }\n  else if(m == 1 || m == 3 || m == 5 || m == 7 || m\
    \ == 8 || m == 10 || m == 12) {\n    if(d <= 0 || d > 31)\n      return false;\n\
    \  }\n  else if(m == 4 || m == 6 || m == 9 || m == 11) {\n    if(d <= 0 || d >\
    \ 30)\n      return false;\n  }\n  else {\n    return false;\n  }\n  if(m <= 0\
    \ || m > 12)\n    return false;\n  if(y < 2000 || y > 2040)\n    return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int d,m,y;\n    std::stringstream\
    \ ss;\n    ss<<date;\n    if(!(ss>>m>>d>>y))\n        return false;\n    if(m<1||m>12)\n\
    \        return false;\n    if(d<1)\n        return false;\n    if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)\n\
    \    {\n        if(d>31)\n            return false;\n    }\n    else if(m==4||m==6||m==9||m==11)\n\
    \    {\n        if(d>30)\n            return false;\n    }\n    else\n    {\n\
    \        if(d>29)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0lcgtvy9: /tmp/tmp0lcgtvy9.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\t// your code here\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsva88qss: /tmp/tmpsva88qss.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex r(\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    );\n  std::smatch m;\n  if(std::regex_match(date,m,r)) {\n    std::string sday=m[2];\n\
    \    std::string smonth=m[1];\n    std::string syear=m[3];\n    int day=std::stoi(sday);\n\
    \    int month=std::stoi(smonth);\n    int year=std::stoi(syear);\n    if(month>=1&&month<=12)\
    \ {\n      if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)\
    \ {\n        if(day>=1&&day<=31) {\n          return true;\n        }\n      }\n\
    \      else if(month==4||month==6||month==9||month==11) {\n        if(day>=1&&day<=30)\
    \ {\n          return true;\n        }\n      }\n      else if(month==2) {\n \
    \       if(day>=1&&day<=29) {\n          return true;\n        }\n      }\n  \
    \  }\n  }\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date == \"\") {\n\t\
    \treturn false;\n\t}\n\tint m, d, y;\n\tstd::stringstream s;\n\ts << date;\n\t\
    char separator;\n\ts >> m >> separator >> d >> separator >> y;\n\tif (separator\
    \ != '-') {\n\t\treturn false;\n\t}\n\tbool leap = false;\n\tif (y % 4 == 0) {\n\
    \t\tleap = true;\n\t}\n\tif (m < 1 || m > 12) {\n\t\treturn false;\n\t}\n\tif\
    \ (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n\t\
    \tif (d < 1 || d > 31) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (m == 4 ||\
    \ m == 6 || m == 9 || m == 11) {\n\t\tif (d < 1 || d > 30) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\telse if (m == 2) {\n\t\tif (leap) {\n\t\t\tif (d < 1 || d > 29)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (d < 1 || d >\
    \ 28) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(!date.empty());\n\
    \    std::stringstream ss(date);\n    int m, d, y;\n    if (ss >> m >> d >> y)\
    \ {\n        std::string rest;\n        if (ss >> rest)\n            return false;\n\
    \        if (std::to_string(m).size() != 2 || std::to_string(d).size() != 2 ||\
    \ std::to_string(y).size() != 4)\n            return false;\n        if (m < 1\
    \ || m > 12)\n            return false;\n        if (m == 2) {\n            if\
    \ (d < 1 || d > 29)\n                return false;\n        } else if (m == 1\
    \ || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n         \
    \   if (d < 1 || d > 31)\n                return false;\n        } else {\n  \
    \          if (d < 1 || d > 30)\n                return false;\n        }\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmputyq6gi2: /tmp/tmputyq6gi2.cpp:48: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size() == 0)\
    \ return false;\n    int day = stoi(date.substr(0, 2));\n    int month = stoi(date.substr(3,\
    \ 2));\n    if(month < 1 || month > 12) return false;\n    if(day < 1 || day >\
    \ 31) return false;\n    switch(month) {\n        case 1: case 3: case 5: case\
    \ 7: case 8: case 10: case 12:\n            break;\n        case 4: case 6: case\
    \ 9: case 11:\n            if(day > 30) return false;\n            break;\n  \
    \      case 2:\n            if(day > 29) return false;\n            break;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpngtpqmom: /tmp/tmpngtpqmom.cpp:41: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptgm_fyy7: /tmp/tmptgm_fyy7.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int days[] = {31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  // check for empty string\n  if (date.length()\
    \ == 0)\n    return false;\n  int m, d, y;\n  // check for format\n  if (date.length()\
    \ == 10 && date[2] == '-' && date[5] == '-') {\n    // extract data\n    int i\
    \ = 0;\n    while (date[i] != '-')\n      m = (m * 10) + (date[i++] - '0');\n\
    \    i++;\n    while (date[i] != '-')\n      d = (d * 10) + (date[i++] - '0');\n\
    \    i++;\n    while (i < date.length())\n      y = (y * 10) + (date[i++] - '0');\n\
    \    // check for leap year\n    if (y % 4 == 0)\n      days[1] = 29;\n    if\
    \ (y % 400 == 0)\n      days[1] = 29;\n    if (y % 100 == 0)\n      days[1] =\
    \ 28;\n    // check for month value\n    if (m < 1 || m > 12)\n      return false;\n\
    \    // check for day value\n    if (d < 1 || d > days[m - 1])\n      return false;\n\
    \    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpc95qxm5n: /tmp/tmpc95qxm5n.cpp:57: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdzj4vbhl: /tmp/tmpdzj4vbhl.cpp:26: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133237
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Write your code here\n\
    \  std::stringstream ss(date);\n  std::string word;\n  char delim='-';\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss,word,delim))\n    tokens.push_back(word);\n\
    \  if(tokens.size()==3)\n  {\n    int day = std::stoi(tokens[1]);\n    int month\
    \ = std::stoi(tokens[0]);\n    int year = std::stoi(tokens[2]);\n    if(day>=1&&day<=31&&month>=1&&month<=12&&year>=1)\n\
    \    {\n      if(month==2&&(day>=1&&day<=29))\n        return true;\n      else\
    \ if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)\n\
    \        return true;\n      else if(month==4||month==6||month==9||month==11)\n\
    \      {\n        if(day>=1&&day<=30)\n          return true;\n        else\n\
    \          return false;\n      }\n      else\n        return false;\n    }\n\
    \    else\n      return false;\n  }\n  else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  //\
    \ if (!(std::regex_match (date, std::regex(\"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\"\
    ))))\n  // return false;\n  // if (std::stoi(date.substr(0, 2)) < 1 || std::stoi(date.substr(0,\
    \ 2)) > 12)\n  // return false;\n  // if (std::stoi(date.substr(3, 2)) < 1 ||\
    \ std::stoi(date.substr(3, 2)) > 31)\n  // return false;\n  // if (std::stoi(date.substr(0,\
    \ 2)) == 2) {\n  // if (std::stoi(date.substr(3, 2)) > 29)\n  // return false;\n\
    \  // else\n  // return true;\n  // }\n  // if (std::stoi(date.substr(0, 2)) ==\
    \ 4 || std::stoi(date.substr(0, 2)) == 6\n  // || std::stoi(date.substr(0, 2))\
    \ == 9 || std::stoi(date.substr(0, 2)) == 11) {\n  // if (std::stoi(date.substr(3,\
    \ 2)) > 30)\n  // return false;\n  // else\n  // return true;\n  // }\n  // if\
    \ (std::stoi(date.substr(0, 2)) == 1 || std::stoi(date.substr(0, 2)) == 3\n  //\
    \ || std::stoi(date.substr(0, 2)) == 5 || std::stoi(date.substr(0, 2)) == 7\n\
    \  // || std::stoi(date.substr(0, 2)) == 8 || std::stoi(date.substr(0, 2)) ==\
    \ 10\n  // || std::stoi(date.substr(0, 2)) == 12) {\n  // if (std::stoi(date.substr(3,\
    \ 2)) > 31)\n  // return false;\n  // else\n  // return true;\n  // }\n  // return\
    \ true;\n \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqxe76lnl: /tmp/tmpqxe76lnl.cpp:55: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // we are assuming that\
    \ the date is in the format of mm-dd-yyyy\n  int M = date[0] - '0';\n  int N =\
    \ date[1] - '0';\n  int MM = M * 10 + N;\n  int D = date[3] - '0';\n  int DD =\
    \ D * 10 + date[4] - '0';\n  int Y = date[6] - '0';\n  int YY = Y * 10 + date[7]\
    \ - '0';\n  int YYYY = YY * 10 + date[8] - '0';\n  int YYYYY = YYYY * 10 + date[9]\
    \ - '0';\n  if (MM >= 1 && MM <= 12) {\n    if (MM == 1 || MM == 3 || MM == 5\
    \ || MM == 7 || MM == 8 || MM == 10 || MM == 12) {\n      if (DD >= 1 && DD <=\
    \ 31) {\n        return true;\n      }\n    }\n    if (MM == 4 || MM == 6 || MM\
    \ == 9 || MM == 11) {\n      if (DD >= 1 && DD <= 30) {\n        return true;\n\
    \      }\n    }\n    if (MM == 2) {\n      if (DD >= 1 && DD <= 29) {\n      \
    \  return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprrsgt8xo: /tmp/tmprrsgt8xo.cpp:63: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133246
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.size()!=10)\n\
    \        return false;\n    char a,b,c,d,e,f;\n    a=date[0];\n    b=date[1];\n\
    \    c=date[2];\n    d=date[3];\n    e=date[4];\n    f=date[5];\n    int month=10*(a-'0')+(b-'0');\n\
    \    int day=10*(d-'0')+(e-'0');\n    int year=1000*(f-'0')+100*(g-'0')+10*(h-'0')+(i-'0');\n\
    \    if(day<1 || day>31)\n        return false;\n    if(month<1 || month>12)\n\
    \        return false;\n    if(month==2 && day>29)\n        return false;\n  \
    \  if(month==4 || month==6 || month==9 || month==11)\n    {\n        if(day>30)\n\
    \            return false;\n    }\n    if(year<1000 || year>2020)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7aq9rgnl.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7aq9rgnl.cpp:32:32: error: \u2018g\u2019 was not declared in this scope\n\
    \   32 |     int year=1000*(f-'0')+100*(g-'0')+10*(h-'0')+(i-'0');\n      |  \
    \                              ^\n/tmp/tmp7aq9rgnl.cpp:32:43: error: \u2018h\u2019\
    \ was not declared in this scope\n   32 |     int year=1000*(f-'0')+100*(g-'0')+10*(h-'0')+(i-'0');\n\
    \      |                                           ^\n/tmp/tmp7aq9rgnl.cpp:32:51:\
    \ error: \u2018i\u2019 was not declared in this scope\n   32 |     int year=1000*(f-'0')+100*(g-'0')+10*(h-'0')+(i-'0');\n\
    \      |                                                   ^\n"
  stdout: ''
  timestamp: 1660133246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  try {\n    std::tm t{};\n\
    \    std::istringstream ss(date);\n    ss >> std::get_time(&t, \"%m-%d-%Y\");\n\
    \    if (ss.fail()) {\n      return false;\n    }\n    std::time_t tt = std::mktime(&t);\n\
    \    if (tt == -1) {\n      return false;\n    }\n    return true;\n  } catch\
    \ (std::exception &e) {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppw5z94ea: /tmp/tmppw5z94ea.cpp:46: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo9syolxb: /tmp/tmpo9syolxb.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::regex reg_exp(\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\");\n    if(!std::regex_match(date, reg_exp))\n \
    \       return false;\n    int n = date.length();\n    int month = stoi(date.substr(0,2));\n\
    \    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2)\n    {\n        if(day > 29)\n\
    \            return false;\n        if(day == 29)\n        {\n            if(year\
    \ % 400 == 0 || (year % 4 == 0 && year % 100 != 0))\n                return true;\n\
    \            return false;\n        }\n    }\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n          \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133248
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(!date.empty());\n\
    \  if(date.size() < 10) return false;\n  //checking for mm-dd-yyyy format\n  if(date[2]\
    \ != '-' || date[5] != '-') return false;\n  std::string month = date.substr(0,2);\n\
    \  std::string day = date.substr(3,2);\n  std::string year = date.substr(6,4);\n\
    \  //converting string to int\n  int m = std::stoi(month);\n  int d = std::stoi(day);\n\
    \  int y = std::stoi(year);\n  if(m < 1 || m > 12) return false;\n  if(d < 1 ||\
    \ d > 31) return false;\n  else if(m == 2) {\n    if(d > 29) return false;\n \
    \ }\n  else if(m == 4 || m == 6 || m == 9 || m == 11) {\n    if(d > 30) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp7lfv5xh7: /tmp/tmp7lfv5xh7.cpp:21: bool valid_date(std::string): Assertion
    `!date.empty()'' failed.

    '
  stdout: ''
  timestamp: 1660133247
