name: HumanEval_69_search
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
  \ vector of positive integers. Return the greatest integer that is greater than\
  \ \n// zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n// The frequency of an integer is the number of times it appears in\
  \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
  \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n//\
  \ (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n\
  // (-1)\nlong search(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
  \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
  \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
  \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
  \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
  \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
  \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
  \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
  \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
  \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
  \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
  \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1,\
  \ (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1,\
  \ (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3,\
  \ (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9,\
  \ (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
  \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
  \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
  \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
  \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
  \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9,\
  \ (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10,\
  \ (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) ==\
  \ (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7,\
  \ (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1,\
  \ (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9,\
  \ (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2,\
  \ (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7,\
  \ (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
completions: ["\tstd::map<long, long> d;\n\tstd::map<long, long>::iterator map_it;\n\
    \tfor (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n\
    \t\tmap_it = d.find(*it);\n\t\tif (map_it == d.end()) {\n\t\t\td.insert(std::pair<long,\
    \ long>(*it, 1));\n\t\t}\n\t\telse {\n\t\t\tmap_it->second++;\n\t\t}\n\t}\n\t\
    for (map_it = d.begin(); map_it != d.end(); ++map_it) {\n\t\tif (map_it->first\
    \ <= map_it->second) {\n\t\t\treturn map_it->first;\n\t\t}\n\t}\n\treturn -1;",
  "    std::unordered_map<long, int> map;\n    for(auto x: lst)\n        map[x]++;\n\
    \    for(auto x: map)\n        if(x.first <= x.second)\n            return x.first;\n\
    \    return -1;", "    long max_freq = -1;\n    std::map<long, long> freq;\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n       \
    \ if (freq[lst[i]] >= lst[i])\n            max_freq = std::max(max_freq, lst[i]);\n\
    \    }\n    return max_freq;", "\tint size = lst.size();\n\tint num;\n\tint count\
    \ = 0;\n\tint i;\n\tfor (int i = 0; i < size; i++) {\n\t\tif (lst[i] >= 0) {\n\
    \t\t\tnum = lst[i];\n\t\t\tfor (int j = 0; j < size; j++) {\n\t\t\t\tif (lst[j]\
    \ == num) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count >= num) {\n\
    \t\t\t\treturn num;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn -1;", " \
    \   long ans = -1;\n    std::map<long, long> freq;\n    for(int i = 0; i < lst.size();\
    \ i++)\n        freq[lst[i]]++;\n    for(int i = 1; i < freq.size(); i++)\n  \
    \      if(freq[i] >= i)\n            ans = std::max(ans, i);\n    return ans;",
  "    if(lst.size() == 0) return -1;\n    if(lst.size() == 1) return -1;\n    sort(lst.begin(),\
    \ lst.end());\n    // for(auto i: lst) {\n    //     cout << i << \" \";\n   \
    \ // }\n    // cout << endl;\n    for(int i = lst.size() - 1; i >= 0; i--) {\n\
    \        if(lst[i] > 0 && lst[i] == lst.size() - i) {\n            return lst[i];\n\
    \        }\n    }\n    return -1;", "    // your code here\n    int max=-1;\n\
    \    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst.size();j++){\n\
    \            if(lst[i]==lst[j])\n                lst[i]++;\n        }\n      \
    \  if(lst[i]>lst.size()){\n            max=lst[i];\n            break;\n     \
    \   }\n    }\n    return max;", "  // your code here\n  // let's try map\n  std::map<long,long>\
    \ mapp;\n  // create a map\n  for(int i=0;i<lst.size();i++){\n    mapp[lst[i]]++;\n\
    \  }\n  //loop over map to find the element\n  for(auto it=mapp.begin();it!=mapp.end();it++){\n\
    \    if(it->first==it->second && it->first>0){\n      return it->first;\n    }\n\
    \  }\n  return -1;", "    long res = -1;\n    std::map<long, long> freq;\n   \
    \ for (int i = 0; i < lst.size(); i++)\n        freq[lst[i]]++;\n    for (auto\
    \ it = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second)\n\
    \            res = std::max(res, it->first);\n    }\n    return res;", "    long\
    \ ans = -1;\n    std::map<long, long> mp;\n    for(long i = 0; i < lst.size();\
    \ i++)\n        mp[lst[i]]++;\n    for(auto& x: mp)\n        if(x.first <= x.second\
    \ && x.first > ans)\n            ans = x.first;\n    return ans;", "    unordered_map<long,\
    \ long> freq;\n    for(long e : lst)\n        freq[e]++;\n    for(long e : lst)\n\
    \        if(e <= freq[e])\n            return e;\n    return -1;", "    std::unordered_map<long,\
    \ long> freq;\n    for (long i: lst) {\n        if (freq.find(i) == freq.end())\
    \ {\n            freq[i] = 1;\n        } else {\n            freq[i] += 1;\n \
    \       }\n    }\n    long ret = -1;\n    for (long i: lst) {\n        if (freq[i]\
    \ >= i) {\n            ret = std::max(ret, i);\n        }\n    }\n    return ret;",
  "    int n = lst.size();\n    int max = *max_element(lst.begin(), lst.end());\n\
    \    int arr[max+1];\n    memset(arr, 0, sizeof(arr));\n    for(int i=0; i<n;\
    \ i++)\n        arr[lst[i]]++;\n    for(int i=1; i<=max; i++)\n        if(arr[i]>=i)\n\
    \            return i;\n    return -1;", "\t// your code here", "  std::map<long,\
    \ long> int_freq;\n  for (long val : lst) {\n    if (int_freq.find(val) == int_freq.end())\
    \ {\n      int_freq[val] = 1;\n    } else {\n      int_freq[val]++;\n    }\n \
    \ }\n  long ans = -1;\n  for (auto it = int_freq.begin(); it != int_freq.end();\
    \ it++) {\n    long cur_val = it->first;\n    long cur_freq = it->second;\n  \
    \  if (cur_val <= cur_freq && cur_val > ans) {\n      ans = cur_val;\n    }\n\
    \  }\n  return ans;", "    using namespace std;\n    long n = lst.size();\n  \
    \  map<long, long> mp;\n    for(int i = 0; i < n; i++) {\n        mp[lst[i]]++;\n\
    \    }\n    for(auto it = mp.rbegin(); it != mp.rend(); it++) {\n        if(it->first\
    \ == it->second) {\n            return it->first;\n        }\n    }\n    return\
    \ -1;", "    long max_ = -1;\n    std::sort(lst.begin(), lst.end());\n    std::unordered_map<long,\
    \ long> mp;\n    for(long i = 0; i < lst.size(); i++) {\n        mp[lst[i]]++;\n\
    \    }\n    for(auto i = mp.begin(); i != mp.end(); i++) {\n        if(i->first\
    \ <= i->second && i->first > max_) {\n            max_ = i->first;\n        }\n\
    \    }\n    return max_;", "    std::map<long,long> frequency;\n    long max =\
    \ 0;\n    for(auto i = lst.begin(); i != lst.end(); i++){\n        if(*i > max)\
    \ max = *i;\n        if(frequency.find(*i) == frequency.end()){\n            frequency[*i]\
    \ = 1;\n        }\n        else{\n            frequency[*i]++;\n        }\n  \
    \  }\n    for(auto i = lst.begin(); i != lst.end(); i++){\n        if(*i > max)\
    \ max = *i;\n        if(frequency[*i] >= *i){\n            return *i;\n      \
    \  }\n    }\n    return -1;", "    std::unordered_map<long, int> frequency;\n\
    \    for (long num : lst) {\n        if (frequency.find(num) == frequency.end())\
    \ {\n            frequency[num] = 1;\n        } else {\n            frequency[num]++;\n\
    \        }\n    }\n    for (long num : lst) {\n        if (frequency[num] >= num)\
    \ {\n            return num;\n        }\n    }\n    return -1;", "\tlong result\
    \ = -1;\n\tstd::map<long, long> count;\n\tfor (auto x : lst) {\n\t\tcount[x] +=\
    \ 1;\n\t}\n\tfor (auto c : count) {\n\t\tif (c.first <= c.second) {\n\t\t\tresult\
    \ = c.first;\n\t\t}\n\t}\n\treturn result;", "\tlong largest = 0;\n\tfor (long\
    \ i : lst) {\n\t\tif (i >= largest) {\n\t\t\tlargest = i;\n\t\t}\n\t}\n\tlong\
    \ freq = 0;\n\tlong value = 0;\n\tfor (long i = largest; i > 0; i--) {\n\t\tfreq\
    \ = 0;\n\t\tfor (long j : lst) {\n\t\t\tif (j == i) {\n\t\t\t\tfreq += 1;\n\t\t\
    \t}\n\t\t}\n\t\tif (freq >= i) {\n\t\t\tvalue = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tif (value == 0) {\n\t\treturn -1;\n\t}\n\treturn value;", "    // your code\
    \ here\n    return -1;", "    // \n    long max=0;\n    std::unordered_map<long,\
    \ long> map;\n    for(int i=0; i<lst.size(); i++){\n        map[lst[i]]++;\n \
    \       if(map[lst[i]] >= lst[i] && lst[i]>max){\n            max = lst[i];\n\
    \        }\n    }\n    if(max!=0){\n        return max;\n    }\n    return -1;",
  "    std::unordered_map<long, long> count;\n    for (auto i : lst)\n        count[i]++;\n\
    \    for (auto i : lst)\n        if (count[i] >= i)\n            return i;\n \
    \   return -1;", "    // create a new vector that stores counts of all numbers\n\
    \    std::vector<long> count;\n    long n = lst.size();\n    for (long i = 0;\
    \ i < n; i++) {\n        count.push_back(0);\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        if (lst[i] >= n) {\n            return -1;\n        }\n \
    \       count[lst[i]]++;\n    }\n    // the answer is the first number at the\
    \ index i such that count[i] >= i\n    for (long i = n - 1; i >= 1; i--) {\n \
    \       if (count[i] >= i) {\n            return i;\n        }\n    }\n    return\
    \ -1;", "  // TODO: implement me.\n  std::unordered_map<long, long> m;\n  for(auto\
    \ & e : lst) {\n    if(m.find(e) == m.end()) {\n      m[e] = 1;\n    } else {\n\
    \      m[e]++;\n    }\n  }\n  long res = -1;\n  for(auto & e : m) {\n    if(e.first\
    \ <= e.second) {\n      res = res > e.first ? res : e.first;\n    }\n  }\n  return\
    \ res;", "    // your code here\n    std::map<long, long> counts;\n    for (auto\
    \ n : lst) {\n        ++counts[n];\n    }\n    for (auto n : lst) {\n        if\
    \ (counts[n] >= n) {\n            return n;\n        }\n    }\n    return -1;",
  "    std::map<long, long> freq;\n    for (auto &&i : lst)\n        freq[i]++;\n\
    \    for (auto &&i : freq)\n        if (i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, int> hmap;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        hmap[lst[i]]++;\n    }\n    std::map<long, int>::iterator\
    \ itr;\n    long ret = -1;\n    for(itr = hmap.begin(); itr != hmap.end(); itr++)\
    \ {\n        if(itr->first <= itr->second) {\n            ret = std::max(ret,\
    \ itr->first);\n        }\n    }\n    return ret;", "  long result = -1;\n  std::map<long,long>\
    \ dic;\n  for(long i = 0; i < lst.size(); i++){\n    dic[lst[i]]++;\n  }\n  std::map<long,long>::iterator\
    \ it;\n  for(it = dic.begin(); it != dic.end(); it++){\n    if(it->first <= it->second\
    \ && it->first > result){\n      result = it->first;\n    }\n  }\n  return result;",
  "\tif (lst.size() == 0)\n\t\treturn -1;\n\tstd::sort(lst.begin(), lst.end());\n\t\
    int cnt = 1;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] ==\
    \ lst[i + 1])\n\t\t\tcnt++;\n\t\telse {\n\t\t\tif (cnt >= lst[i])\n\t\t\t\treturn\
    \ lst[i];\n\t\t\tcnt = 1;\n\t\t}\n\t}\n\tif (cnt >= lst[lst.size() - 1])\n\t\t\
    return lst[lst.size() - 1];\n\treturn -1;", "    long output_val = -1;\n    int\
    \ max_count = 0;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n   \
    \ while(i < lst.size()){\n        int count = 1;\n        while(i < lst.size()\
    \ - 1 && lst[i] == lst[i+1]){\n            i++;\n            count++;\n      \
    \  }\n        if(count >= lst[i] && count > max_count){\n            max_count\
    \ = count;\n            output_val = lst[i];\n        }\n        i++;\n    }\n\
    \    return output_val;", "    int i;\n    long x,c;\n    x=lst[0];\n    for(i=1;i<lst.size();i++)\n\
    \    {\n        if(lst[i]>x)\n        {\n            x=lst[i];\n        }\n  \
    \  }\n    int ar[x];\n    std::memset(ar,0,sizeof(ar));\n    for(i=0;i<lst.size();i++)\n\
    \    {\n        if(lst[i]<=x)\n        {\n            ar[lst[i]-1]++;\n      \
    \  }\n    }\n    for(i=0;i<x;i++)\n    {\n        if(ar[i]>=i+1)\n        {\n\
    \            c=i+1;\n        }\n    }\n    if(c==x)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return c;\n    }", "\tstd::unordered_map<long,\
    \ long> dict;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tdict[lst[i]]++;\n\
    \t}\n\tstd::vector<long> t;\n\tfor (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tif (it->first == it->second) {\n\t\t\tt.push_back(it->first);\n\
    \t\t}\n\t}\n\tif (t.size() == 0) {\n\t\treturn -1;\n\t}\n\tstd::sort(t.begin(),\
    \ t.end());\n\treturn t[t.size() - 1];", "    std::map<long, long> freq;\n   \
    \ long len = lst.size();\n    for(long i = 0; i < len; i++)\n        freq[lst[i]]++;\n\
    \    std::map<long, long>::iterator it;\n    for(it = freq.begin(); it != freq.end();\
    \ it++)\n        if(it->first <= it->second)\n            return it->first;\n\
    \    return -1;", "    map<long, long> data;\n    for(auto i : lst)\n        data[i]++;\n\
    \    for(auto i : data)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "\tassert(lst.size() > 0);\n\tstd::map<long, long> freqMap;\n\
    \tfor (long i = 0; i < lst.size(); i++) {\n\t\tfreqMap[lst[i]] += 1;\n\t}\n\t\
    long maxVal = 0;\n\tfor (auto iter = freqMap.begin(); iter != freqMap.end(); iter++)\
    \ {\n\t\tif (iter->first >= iter->second)\n\t\t\tmaxVal = max(maxVal, iter->first);\n\
    \t}\n\treturn maxVal > 0 ? maxVal : -1;", "    std::unordered_map<long, long>\
    \ mymap;\n    for(int i = 0; i < lst.size(); i++){\n        mymap[lst[i]]++;\n\
    \    }\n    int greatest_integer = -1;\n    for(auto i : mymap){\n        if(i.first\
    \ >= i.second && i.first > greatest_integer){\n            greatest_integer =\
    \ i.first;\n        }\n    }\n    return greatest_integer;", "\tstd::map<long,long>\
    \ m;\n\tfor(auto i:lst)\n\t\tm[i]++;\n\tfor(auto i:m)\n\t\tif(i.first <= i.second)\n\
    \t\t\treturn i.first;\n\treturn -1;", "  // your code\n    std::unordered_map<long,long>\
    \ umap;\n    for(auto ele:lst){\n        umap[ele]++;\n    }\n    for(auto ele:lst){\n\
    \        if(umap[ele]>=ele) return ele;\n    }\n    return -1;", "  \tstd::sort(lst.begin(),\
    \ lst.end());\n  \tfor(int i = lst.size() - 1; i >= 0; i--) {\n    \tlong cur\
    \ = lst[i];\n      \tlong cnt = 0;\n      \tfor(int j = i; j >= 0; j--) {\n  \
    \      \tif(lst[j] == cur) {\n            \tcnt++;\n            }\n        }\n\
    \      \tif(cnt >= cur) {\n        \treturn cur;\n        }\n    }\n  \treturn\
    \ -1;", "  std::unordered_map<long, int> dict;\n  for (auto i : lst)\n    dict[i]++;\n\
    \  for (auto i : lst)\n    if (dict[i] >= i)\n      return i;\n  return -1;",
  "  std::map<long, long> mp;\n  for (long i = 0; i < lst.size(); i++) {\n    mp[lst[i]]++;\n\
    \  }\n  std::vector<long> temp;\n  for (auto it = mp.begin(); it != mp.end();\
    \ it++) {\n    temp.push_back(it->first);\n  }\n  std::sort(temp.begin(), temp.end());\n\
    \  for (long i = temp.size() - 1; i >= 0; i--) {\n    if (mp[temp[i]] >= temp[i])\
    \ {\n      return temp[i];\n    }\n  }\n  return -1;", "    std::map<long, long>\
    \ freq;\n    std::map<long, long>::iterator it;\n    for(std::vector<long>::iterator\
    \ it = lst.begin(); it != lst.end(); it++) {\n        freq[*it]++;\n    }\n  \
    \  for(it = freq.begin(); it != freq.end(); it++) {\n        if(it->first <= it->second)\n\
    \            return it->first;\n    }\n    return -1;", "    // Your code here\n\
    \    for(int i=0;i<lst.size();i++){\n        std::vector<long>::iterator itr;\n\
    \        itr=find(lst.begin(),lst.end(),lst[i]);\n        int count=0;\n     \
    \   while(itr!=lst.end()){\n            count++;\n            itr=find(itr+1,lst.end(),lst[i]);\n\
    \        }\n        if(count>=lst[i])\n            return lst[i];\n    }\n   \
    \ return -1;", "    std::unordered_map<long, long> counts;\n    for (long num\
    \ : lst) {\n        counts[num]++;\n    }\n    long most_freq = -1;\n    for (auto\
    \ entry : counts) {\n        if (entry.first <= entry.second && entry.first >\
    \ most_freq) {\n            most_freq = entry.first;\n        }\n    }\n    return\
    \ most_freq;", "    std::map<long,long> map;\n    for(auto x:lst){\n        map[x]++;\n\
    \    }\n    int min = *std::min_element(lst.begin(),lst.end());\n    int max =\
    \ *std::max_element(lst.begin(),lst.end());\n    for(int i=min;i<=max;i++){\n\
    \        if(map[i]>=i){\n            return i;\n        }\n    }\n    return -1;",
  "  // your code\n  std::unordered_map<long, int> myMap;\n  for(int i = 0; i < lst.size();\
    \ i++){\n    if(myMap.find(lst[i]) == myMap.end()){\n      myMap[lst[i]] = 1;\n\
    \    }\n    else{\n      myMap[lst[i]]++;\n    }\n  }\n  for(int i = lst.size()\
    \ - 1; i >= 0; i--){\n    if(myMap[lst[i]] >= lst[i]){\n      return lst[i];\n\
    \    }\n  }\n  return -1;", "    long key = -1;\n    long max = -1;\n    std::map<long,\
    \ long> frequency;\n    for (auto const &i : lst) {\n        frequency[i]++;\n\
    \    }\n    for (auto const &i : frequency) {\n        if (i.first > max && i.second\
    \ >= i.first) {\n            max = i.first;\n        }\n    }\n    if (max ==\
    \ -1) {\n        return key;\n    }\n    return max;", "  std::unordered_map<long,long>\
    \ count;\n  for(int i=0;i<lst.size();i++){\n    if(count.find(lst[i])==count.end()){\n\
    \      count[lst[i]]=1;\n    }\n    else{\n      count[lst[i]]+=1;\n    }\n  }\n\
    \  int ans=-1;\n  for(int i=0;i<lst.size();i++){\n    if(count[lst[i]]>=lst[i]){\n\
    \      ans=lst[i];\n    }\n  }\n  return ans;", "  // your code here\n  long ret\
    \ = -1;\n  std::unordered_map<long, long> frc;\n  for(auto it = lst.begin(); it\
    \ != lst.end(); it++){\n      frc[*it]++;\n  }\n  for(auto it = frc.begin(); it\
    \ != frc.end(); it++){\n      if(it->first <= it->second){\n          ret = it->first;\n\
    \      }\n  }\n  return ret;", "    assert(lst.size()>0);\n    std::map<long,long>\
    \ numMap;\n    for(long num:lst){\n        auto it = numMap.find(num);\n     \
    \   if(it == numMap.end()){\n            numMap.insert(std::pair<long,long>(num,1));\n\
    \        }\n        else{\n            numMap[num]++;\n        }\n    }\n    auto\
    \ it = numMap.begin();\n    while(it != numMap.end()){\n        if(it->first <=\
    \ it->second){\n            return it->first;\n        }\n        it++;\n    }\n\
    \    return -1;", "    if(lst.size() == 0) return -1;\n    long max_val = -1;\n\
    \    std::map<long, long> map;\n    for(int i = 0; i < lst.size(); i++){\n   \
    \     map[lst[i]]++;\n    }\n    for(auto it = map.begin(); it != map.end(); it++){\n\
    \        if(it->first == it->second && it->first > max_val){\n            max_val\
    \ = it->first;\n        }\n    }\n    return max_val;", "    long frequency;\n\
    \    unordered_map<long, long> umap;\n    for(long i = 0; i < lst.size(); i++)\
    \ {\n        umap[lst[i]]++;\n    }\n    for(long i = 0; i < lst.size(); i++)\
    \ {\n        if(umap[lst[i]] >= lst[i]){\n            return lst[i];\n       \
    \ }\n    }\n    return -1;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use cout\n    // Example: cout << \"Hello world!\"\
    ;\n    std::map<long, long> freq;\n    for(long i = 0; i < lst.size(); i++){\n\
    \        if(freq.find(lst[i]) == freq.end()){\n            freq[lst[i]] = 1;\n\
    \        }else{\n            freq[lst[i]]++;\n        }\n    }\n    std::map<long,\
    \ long>::iterator it;\n    long max = -1;\n    for(it = freq.begin(); it != freq.end();\
    \ it++){\n        if(it->first <= it->second && it->first > max){\n          \
    \  max = it->first;\n        }\n    }\n    return max;", "\tmap<long, long> f;\n\
    \tfor (long i : lst) {\n\t\tf[i]++;\n\t}\n\tfor (auto it : f) {\n\t\tif (it.first\
    \ <= it.second) return it.first;\n\t}\n\treturn -1;", "    int count[100]={0};\n\
    \    int maxi=0;\n    for(int i=0;i<lst.size();i++){\n        count[lst[i]]++;\n\
    \        maxi=max(maxi,lst[i]);\n    }\n    for(int i=maxi;i>=1;i--){\n      \
    \  if(count[i]>=i)\n            return i;\n    }\n    return -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<int> count;\n    long prev = -1;\n    for (long\
    \ x : lst) {\n        if (x == prev)\n            count.back()++;\n        else\
    \ {\n            count.push_back(1);\n            prev = x;\n        }\n    }\n\
    \    long count_size = count.size();\n    if (count_size == 0)\n        return\
    \ -1;\n    else if (count_size == 1)\n        return (count[0] >= 1) ? 1 : -1;\n\
    \    else {\n        for (int i = count_size - 1; i >= 0; i--) {\n           \
    \ if (count[i] >= i + 1)\n                return i + 1;\n        }\n        return\
    \ -1;\n    }", "  long max_freq = 0;\n  for (long num : lst) {\n    if (num >\
    \ max_freq) {\n      max_freq = num;\n    }\n  }\n  std::vector<long> freq(max_freq\
    \ + 1, 0);\n  for (long num : lst) {\n    freq[num]++;\n  }\n  for (long i = max_freq;\
    \ i >= 1; i--) {\n    if (freq[i] >= i) {\n      return i;\n    }\n  }\n  return\
    \ -1;", "    std::map<long,long> occurences;\n    for(auto const& x: lst){\n \
    \       occurences[x]++;\n    }\n    long res = 0;\n    for(auto const& x: occurences){\n\
    \        if(x.first >= x.second)\n            res = std::max(res, x.first);\n\
    \    }\n    return res == 0 ? -1 : res;", "\tstd::map<long, long> mymap;\n\tfor\
    \ (auto l : lst)\n\t\tmymap[l]++;\n\tfor (auto l : lst)\n\t\tif (mymap[l] >= l)\n\
    \t\t\treturn l;\n\treturn -1;", "    long n = lst.size();\n    std::map<long,\
    \ long> m;\n    for(long i = 0; i < n; i++) {\n        if(m.find(lst[i]) == m.end())\
    \ {\n            m[lst[i]] = 1;\n        } else {\n            m[lst[i]] += 1;\n\
    \        }\n    }\n    std::map<long, long>::iterator it;\n    for(it = m.begin();\
    \ it != m.end(); it++) {\n        if(it->first == it->second) {\n            return\
    \ it->first;\n        }\n    }\n    return -1;", "\tstd::vector<long> counts =\
    \ std::vector<long>(lst.size(),0);\n\tfor(long i=0;i<lst.size();i++){\n\t\tlong\
    \ num = lst[i];\n\t\tcounts[num]++;\n\t}\n\tfor(long i=counts.size()-1;i>=0;i--){\n\
    \t\tif(counts[i] >= i) return i;\n\t}\n\treturn -1;", "    std::unordered_map<long,\
    \ long> freqMap;\n    for (int i = 0; i < lst.size(); i++) {\n        if (freqMap.find(lst[i])\
    \ == freqMap.end()) {\n            freqMap[lst[i]] = 1;\n        } else {\n  \
    \          freqMap[lst[i]]++;\n        }\n    }\n    long result = -1;\n    for\
    \ (auto it = freqMap.begin(); it != freqMap.end(); it++) {\n        if (it->first\
    \ > 0 && it->first <= it->second) {\n            result = it->first;\n       \
    \ }\n    }\n    return result;", "\t", "    std::map<long, long> m;\n    int lst_size\
    \ = lst.size();\n    for(int i = 0; i < lst_size; i++) {\n        if(m.find(lst[i])\
    \ == m.end()) {\n            m[lst[i]] = 1;\n        } else {\n            m[lst[i]]++;\n\
    \        }\n    }\n    int m_size = m.size();\n    for(int i = m_size; i > 0;\
    \ i--) {\n        if(m.find(i) != m.end()) {\n            if(m[i] >= i) {\n  \
    \              return i;\n            }\n        }\n    }\n    return -1;", " \
    \   std::map<long, long> myMap;\n    for(int i = 0; i < lst.size(); i++) {\n \
    \       myMap[lst[i]]++;\n    }\n    long max = -1;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(myMap[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;", "    std::map<long, long> m;\n\
    \    long ans = -1;\n    for(auto it : lst)\n        m[it]++;\n    for(auto it\
    \ : m)\n        if(it.first <= it.second)\n            ans = std::max(ans, it.first);\n\
    \    return ans;", "\tif (lst.size() == 0) return -1;\n\tif (lst.size() == 1)\
    \ return (lst[0] == 1 ? lst[0] : -1);\n\t//std::vector<long> sortedLst;\n\t//sortedLst\
    \ = lst;\n\tstd::sort(lst.begin(), lst.end());\n\tlong count = 1;\n\tlong lastElem\
    \ = lst[0];\n\tfor (long i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] == lastElem)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tif (count >= lastElem) {\n\t\t\t\
    \treturn lastElem;\n\t\t\t}\n\t\t\tcount = 1;\n\t\t\tlastElem = lst[i];\n\t\t\
    }\n\t}\n\tif (count >= lastElem) {\n\t\treturn lastElem;\n\t}\n\treturn -1;",
  "    long max = -1;\n    std::map<long, int> count;\n    for (auto num : lst)\n\
    \        count[num]++;\n    for (auto num : lst) {\n        if (num == count[num]\
    \ && num > max)\n            max = num;\n    }\n    return max;", "    std::unordered_map<long,\
    \ long> m;\n    for(auto n : lst) {\n        m[n]++;\n    }\n    std::vector<long>\
    \ res;\n    for(auto n : m) {\n        if(n.first <= n.second) {\n           \
    \ res.push_back(n.first);\n        }\n    }\n    if(res.size() > 0) {\n      \
    \  return *std::max_element(res.begin(), res.end());\n    }\n    return -1;",
  "    std::unordered_map<long, int> count_dict;\n    for (auto i: lst) {\n      \
    \  count_dict[i]++;\n    }\n    for (auto i: lst) {\n        if (count_dict[i]\
    \ >= i) {\n            return i;\n        }\n    }\n    return -1;", "    if(lst.size()\
    \ == 0) return -1;\n    long count = 1;\n    long maxCount = 0;\n    long value\
    \ = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] == lst[i-1]){\n\
    \            count++;\n        }else{\n            if(count > maxCount){\n   \
    \             maxCount = count;\n                value = lst[i-1];\n         \
    \   }\n            count = 1;\n        }\n    }\n    if(count > maxCount){\n \
    \       maxCount = count;\n        value = lst[lst.size()-1];\n    }\n    return\
    \ maxCount >= value ? value : -1;", "    long max_freq = -1;\n    long max_num\
    \ = -1;\n    std::unordered_map<long, long> dict;\n    for (auto i: lst) {\n \
    \       dict[i]++;\n    }\n    for (auto i: dict) {\n        if (i.first <= i.second\
    \ && i.second > max_freq) {\n            max_freq = i.second;\n            max_num\
    \ = i.first;\n        }\n    }\n    return max_num;", "  std::map<long, long>\
    \ counts;\n  for (auto& value : lst) {\n    counts[value]++;\n  }\n  for (auto&\
    \ value : lst) {\n    if (value == counts[value]) {\n      return value;\n   \
    \ }\n  }\n  return -1;", "  std::unordered_map<long,long> freq;\n  long curr =\
    \ 0;\n  long count = 0;\n  for(long i = 0; i < lst.size(); i++){\n    freq[lst[i]]\
    \ += 1;\n  }\n  for(auto elem : freq){\n    if(elem.first > curr && elem.second\
    \ >= elem.first){\n      curr = elem.first;\n      count += 1;\n    }\n  }\n \
    \ if(count == 0){\n    return -1;\n  }\n  return curr;", "    if(lst.size() ==\
    \ 0) return -1;\n    std::map<long, long> map;\n    for(auto num : lst)\n    \
    \    map[num] += 1;\n    for(auto item : map)\n        if(item.first <= item.second)\n\
    \            return item.first;\n    return -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator it = lst.begin();\n    if(*it !=\
    \ 1)\n        return -1;\n    long freq = 1;\n    long prev = *it;\n    while(it!=lst.end()){\n\
    \        if(*it == prev)\n            freq++;\n        else{\n            if(freq\
    \ >= prev)\n                return prev;\n            prev = *it;\n          \
    \  freq = 1;\n        }\n        it++;\n    }\n    if(freq >= prev)\n        return\
    \ prev;\n    return -1;", "    // Good luck!\n    std::map<long, long> m;\n  \
    \  for(auto &i: lst)\n    {\n        m[i]++;\n    }\n    long ans = -1;\n    for(auto\
    \ &it: m)\n    {\n        if(it.first <= it.second)\n        {\n            ans\
    \ = std::max(ans, it.first);\n        }\n    }\n    return ans;", "\tstd::map<long,long>\
    \ m;\n\tfor(auto i:lst) m[i]++;\n\tauto it = m.begin();\n\tstd::vector<long> v;\n\
    \twhile(it!=m.end()){\n\t\tif(it->first<=it->second)\n\t\t\tv.push_back(it->first);\n\
    \t\tit++;\n\t}\n\tif(v.size()>0)\n\t\treturn *std::max_element(v.begin(),v.end());\n\
    \treturn -1;", "    long elem = -1;\n    std::map<long, int> m;\n    for(int i\
    \ = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        if(m[lst[i]] >= lst[i])\n            elem =\
    \ lst[i];\n    }\n    return elem;", "\t// #include<math.h>\n\t// auto keys =\
    \ std::set<long>();\n\t// auto frequencies = std::map<long, long>();\n\t// for\
    \ (long num : lst) {\n\t// \tkeys.insert(num);\n\t// \tfrequencies[num] += 1;\n\
    \t// }\n\t// long max_freq = -1;\n\t// for (long key : keys) {\n\t// \tif (max_freq\
    \ < frequencies[key]) {\n\t// \t\tmax_freq = frequencies[key];\n\t// \t}\n\t//\
    \ }\n\t// for (long key : keys) {\n\t// \tif (key == max_freq) {\n\t// \t\treturn\
    \ key;\n\t// \t}\n\t// }\n\t// return -1;\n\tstd::set<long> keys = std::set<long>();\n\
    \tstd::map<long, long> frequencies = std::map<long, long>();\n\tfor (long num\
    \ : lst) {\n\t\tkeys.insert(num);\n\t\tfrequencies[num] += 1;\n\t}\n\tlong max_freq\
    \ = -1;\n\tfor (long key : keys) {\n\t\tif (max_freq < frequencies[key]) {\n\t\
    \t\tmax_freq = frequencies[key];\n\t\t}\n\t}\n\tfor (long key : keys) {\n\t\t\
    if (key == max_freq) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn -1;", "  std::sort(lst.begin(),\
    \ lst.end());\n  int n = lst.size();\n  if(n == 0) return -1;\n  if(n == 1) return\
    \ lst[0] == 1 ? 1 : -1;\n  int max = lst[n-1];\n  int count = 1;\n  for(int i\
    \ = n-2; i >= 0; i--){\n    if(lst[i] == lst[i+1]){\n      count++;\n    }\n \
    \   else{\n      if(count >= lst[i]){\n        return lst[i];\n      }\n     \
    \ count = 1;\n    }\n  }\n  return -1;", "    long r=1;\n    int n=lst.size();\n\
    \    std::vector<long> v(n+1,0);\n    for(int i=0;i<n;i++)\n    {\n        v[lst[i]]++;\n\
    \    }\n    for(int i=1;i<=n;i++)\n    {\n        if(v[i]>=i)\n        {\n   \
    \         r=i;\n        }\n    }\n    if(r==1)\n    {\n        return -1;\n  \
    \  }\n    return r;", "    std::sort(lst.begin(), lst.end());\n    int freq =\
    \ 1;\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] == lst[i-1]){\n\
    \            freq++;\n        }\n        else if(lst[i] != lst[i-1]){\n      \
    \      if(freq >= lst[i-1]){\n                return lst[i-1];\n            }\n\
    \            freq = 1;\n        }\n    }\n    if(freq >= lst[lst.size()-1]){\n\
    \        return lst[lst.size()-1];\n    }\n    return -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] ==\
    \ lst[i+1]){\n            if(lst[i] != lst[i+2]){\n                return lst[i];\n\
    \            }\n        }\n    }\n    return -1;", "    if(lst.size() == 0)\n\
    \        return -1;\n    long min_val = 0;\n    for(int i = 0; i < lst.size();\
    \ i++)\n        min_val = (min_val > lst[i]) ? lst[i] : min_val;\n    std::vector<long>\
    \ num_list(lst.size(),0);\n    for(int i = 0; i < lst.size(); i++)\n        num_list[lst[i]-min_val]++;\n\
    \    long max_val = 0;\n    for(int i = 0; i < num_list.size(); i++)\n       \
    \ if(num_list[i] >= i+min_val)\n            max_val = (max_val < i+min_val) ?\
    \ i+min_val : max_val;\n    return (max_val != 0) ? max_val : -1;", "    int n\
    \ = lst.size();\n    std::vector<long> a(n+1, 0);\n    long max = -1;\n    long\
    \ temp;\n    for(int i = 0; i < n; i++){\n        temp = lst[i];\n        a[temp]++;\n\
    \        if(temp > max)\n            max = temp;\n    }\n    for(int i = max;\
    \ i > 0; i--){\n        if(a[i] >= i)\n            return i;\n    }\n    return\
    \ -1;", "    std::unordered_map<long, long> histogram;\n    for (long x : lst)\n\
    \        histogram[x]++;\n    for (std::pair<long, long> kv : histogram)\n   \
    \     if (kv.first <= kv.second)\n            return kv.first;\n    return -1;",
  "  int mx = -1;\n  for(int x: lst) mx = std::max(mx, x);\n  std::vector<int> arr(mx+1,\
    \ 0);\n  for(int x: lst) {\n    arr[x]++;\n  }\n  for(int i = 1; i < mx+1; i++)\
    \ {\n    if(arr[i] >= i) return i;\n  }\n  return -1;", "  int biggest_int_exist\
    \ = -1;\n  std::map<long, long> result_map;\n  // find largest int exists\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > biggest_int_exist) {\n\
    \      biggest_int_exist = lst[i];\n    }\n  }\n  // get frequency of each number\
    \ in the list\n  for (int i = 0; i < lst.size(); i++) {\n    result_map[lst[i]]++;\n\
    \  }\n  // cout << \"result_map: \" << endl;\n  // for (int i = 0; i < result_map.size();\
    \ i++) {\n  //   cout << result_map[i] << \" \";\n  // }\n  // cout << endl;\n\
    \  // cout << \"biggest_int_exist: \" << biggest_int_exist << endl;\n  // find\
    \ the greatest number that is greater than 0, and has a frequency greater than\
    \ or equal to the value of the integer itself\n  for (int i = 1; i <= biggest_int_exist;\
    \ i++) {\n    if (result_map[i] >= i) {\n      return i;\n    }\n  }\n  return\
    \ -1;", "    // your code here\n    return 0;", "    assert(lst.size() > 0);\n\
    \    int min = lst[0];\n    int max = lst[0];\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
    \  std::vector<int> arr(max+1, 0);\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        arr[lst[i]]++;\n    }\n    for (int i = 1; i < arr.size(); i++) {\n \
    \       if (arr[i] >= i) {\n            return i;\n        }\n    }\n    return\
    \ -1;", "    // your code here\n    std::map<long, int> freq;\n    for(int i =\
    \ 0; i < lst.size(); i++){\n      if(freq.find(lst[i]) == freq.end()){\n     \
    \   freq[lst[i]] = 1;\n      }\n      else{\n        freq[lst[i]]++;\n      }\n\
    \    }\n    int res = -1;\n    for(auto it = freq.begin(); it != freq.end(); it++){\n\
    \      if(it->first == it->second){\n        res = std::max(res, it->first);\n\
    \      }\n    }\n    return res;", "    // your code\n    int n = lst.size();\n\
    \    map<long,int> frequency;\n    for(auto x:lst)\n    {\n        frequency[x]++;\n\
    \    }\n    map<long,int>::iterator itr;\n    long ans;\n    for(itr = frequency.begin();itr!=frequency.end();itr++)\n\
    \    {\n        if(itr->first<=itr->second)\n        {\n            ans = itr->first;\n\
    \        }\n    }\n    if(frequency.count(ans)==0)\n    {\n        return -1;\n\
    \    }\n    return ans;", "    unordered_map<long, int> counts;\n    for (auto\
    \ i : lst) {\n        counts[i]++;\n    }\n    vector<pair<long, int>> results;\n\
    \    for (auto kv : counts) {\n        if (kv.first <= kv.second) {\n        \
    \    results.push_back(kv);\n        }\n    }\n    if (results.size() == 0) {\n\
    \        return -1;\n    }\n    sort(results.begin(), results.end(), [&](pair<long,\
    \ int> &lhs, pair<long, int> &rhs) {\n        return lhs.first > rhs.first;\n\
    \    });\n    return results[0].first;", "    long result{-1};\n    long k{0};\n\
    \    auto freq = std::map<long,long>();\n    for(auto num : lst){\n        if(freq.find(num)\
    \ == freq.end()){\n            freq[num] = 0;\n        }\n        else{\n    \
    \        freq[num] += 1;\n        }\n    }\n    // std::cout << freq.size() <<\
    \ std::endl;\n    // std::cout << freq.size() << std::endl;\n    for(long i =\
    \ 0; i < freq.size(); i++){\n        // std::cout << i << std::endl;\n       \
    \ if(freq[i] >= i){\n            k = i;\n        }\n    }\n    if(k != 0){\n \
    \       result = k;\n    }\n    return result;", "    int n = lst.size();\n  \
    \  std::vector<long> vec(n+1, 0);\n    for(auto x: lst)\n        vec[x]++;\n \
    \   int pos = -1;\n    for(int i = 1; i < n+1; i++)\n        if(vec[i] >= i)\n\
    \            pos = i;\n    return pos;", "\tunordered_map<long, long> map;\n\t\
    for (long i : lst)\n\t\tmap[i]++;\n\tfor (auto p : map)\n\t\tif (p.first <= p.second)\n\
    \t\t\treturn p.first;\n\treturn -1;", "\tlong v=-1;\n\tstd::map<long, long> freq;\n\
    \tfor(int i=0;i<lst.size();i++){\n\t\tlong c = lst[i];\n\t\tif(freq.find(c)==freq.end()){\n\
    \t\t\tfreq[c] = 1;\n\t\t}\n\t\telse{\n\t\t\tfreq[c]++;\n\t\t}\n\t}\n\tfor(int\
    \ i=1;i<=lst.size();i++){\n\t\tif(freq.find(i)!=freq.end()){\n\t\t\tif(freq[i]>=i){\n\
    \t\t\t\tv = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn v;", "    if(lst.size()==0) return\
    \ -1;\n    std::map<long,long> mp;\n    for(int i=0;i<lst.size();i++){\n     \
    \   mp[lst[i]]++;\n    }\n    for(int i=lst.size();i>=1;i--){\n        if(mp[i]>=i)\
    \ return i;\n    }\n    return -1;", "\tlong ans = -1;\n\tstd::map<long, long>\
    \ m;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (m.find(lst[i]) == m.end())\
    \ {\n\t\t\tm[lst[i]] = 1;\n\t\t}\n\t\telse {\n\t\t\tm[lst[i]]++;\n\t\t}\n\t}\n\
    \tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tif (it->first >= 1 &&\
    \ it->first <= it->second) {\n\t\t\tans = it->first;\n\t\t}\n\t}\n\treturn ans;",
  "    //your code here\n    std::sort(lst.begin(), lst.end());\n    std::map<long,\
    \ int> m;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(m.find(lst[i])\
    \ == m.end())\n        {\n            m[lst[i]] = 1;\n        }\n        else\n\
    \        {\n            m[lst[i]]++;\n        }\n    }\n    std::map<long, int>::iterator\
    \ it;\n    int max = 0;\n    for(it = m.begin(); it != m.end(); it++)\n    {\n\
    \        if(it->first > it->second)\n        {\n            continue;\n      \
    \  }\n        else\n        {\n            if(it->first > max)\n            {\n\
    \                max = it->first;\n            }\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;", "    long result\
    \ = -1;\n    std::sort(lst.begin(), lst.end());\n    long count = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == lst[i + 1]) {\n \
    \           count += 1;\n        } else {\n            count += 1;\n         \
    \   if (count >= lst[i]) {\n                result = lst[i];\n            }\n\
    \            count = 0;\n        }\n    }\n    return result;", "\tif (lst.size()\
    \ == 0) return -1;\n\tstd::unordered_map<long, int> seen;\n\tstd::unordered_map<long,\
    \ int>::iterator it;\n\tlong temp;\n\tfor (long i : lst) {\n\t\tit = seen.find(i);\n\
    \t\tif (it == seen.end()) {\n\t\t\tseen.insert(std::make_pair(i, 1));\n\t\t}\n\
    \t\telse {\n\t\t\tseen[i]++;\n\t\t}\n\t}\n\tfor (long i : lst) {\n\t\tif (i >=\
    \ seen[i]) {\n\t\t\ttemp = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (long i : lst)\
    \ {\n\t\tif (i >= seen[i] && i > temp) {\n\t\t\ttemp = i;\n\t\t}\n\t}\n\tif (temp\
    \ > lst.size()) return -1;\n\telse return temp;", "    std::map<long, long> m;\n\
    \    for(auto a: lst) m[a]++;\n    for(int i = lst.size(); i > 0; i--)\n     \
    \   if(m[i] >= i) return i;\n    return -1;", "    // Write your code here\n \
    \   std::map<long,long> m;\n    for(auto i : lst)\n    {\n        m[i]++;\n  \
    \  }\n    auto it = m.rbegin();\n    while(it!=m.rend())\n    {\n        if(it->first<=it->second)\n\
    \        {\n            return it->first;\n        }\n        else\n        {\n\
    \            it++;\n        }\n    }\n    return -1;", "  std::sort(lst.begin(),\
    \ lst.end());\n  long i, j, k, length, max = -1;\n  length = lst.size();\n  j\
    \ = 0;\n  for(i = 0; i < length; i++){\n    if(lst[i] == lst[j])\n      continue;\n\
    \    else if(i - j >= lst[j]){\n      if(max < lst[j])\n        max = lst[j];\n\
    \    }\n    j = i;\n  }\n  if(i - j >= lst[j]){\n    if(max < lst[j])\n      max\
    \ = lst[j];\n  }\n  return max;", "    long result = -1;\n    long len = lst.size();\n\
    \    std::map<long, long> occurrences;\n    for (long i = 0; i < len; i++) {\n\
    \        occurrences[lst[i]]++;\n    }\n    for (auto element:occurrences) {\n\
    \        if (element.first <= element.second) {\n            result = element.first;\n\
    \        }\n    }\n    return result;", "  // your code here\n  std::sort(lst.begin(),\
    \ lst.end());\n  int count = 0;\n  for(int i = 0; i < lst.size(); i++){\n    int\
    \ num = lst[i];\n    if(num > lst.size()){\n      break;\n    }\n    else{\n \
    \     if(count < num){\n        int cur = num;\n        int num_count = 0;\n \
    \       while(i < lst.size() && lst[i] == cur){\n          num_count++;\n    \
    \      i++;\n        }\n        if(num_count >= cur){\n          return cur;\n\
    \        }\n        else{\n          i--;\n        }\n      }\n    }\n  }\n  return\
    \ -1;", "  std::map<long, long> freq = {};\n  for (long item : lst) {\n    freq[item]\
    \ += 1;\n  }\n  long max = -1;\n  for (auto item : freq) {\n    if (item.first\
    \ <= item.second && item.first > max) {\n      max = item.first;\n    }\n  }\n\
    \  return max;", "\tif (lst.size() == 0) return -1;\n\tfor (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n\t\tlong frequency = 0;\n\t\tfor (long j = 0; j < lst.size();\
    \ j++) {\n\t\t\tif (lst[i] == lst[j]) frequency++;\n\t\t}\n\t\tif (frequency >=\
    \ lst[i]) return lst[i];\n\t}\n\treturn -1;", "    long longs[lst.size()];\n \
    \   std::vector<long>::iterator itr;\n    long *sp, *ptr;\n    sp = longs;\n \
    \   ptr = sp;\n    int i = 0;\n    while(i < lst.size()){\n        if(*sp < lst[i]){\n\
    \            sp++;\n            *sp = lst[i];\n        }\n        i++;\n    }\n\
    \    for(int i = 0; i < lst.size(); i++){\n        std::cout << longs[i] << \"\
    \ \";\n    }\n    int count = 0;\n    for(itr = lst.begin(); itr != lst.end();\
    \ itr++){\n        if(*itr == *ptr){\n            count++;\n        }\n    }\n\
    \    if(count >= *ptr){\n        return *ptr;\n    }else{\n        return -1;\n\
    \    }", "    std::map<long,long> frequency;\n    for(auto i:lst){\n        frequency[i]++;\n\
    \    }\n    for(auto i:frequency){\n        if(i.first<=i.second){\n         \
    \   return i.first;\n        }\n    }\n    return -1;", "    std::unordered_map<long,\
    \ long> map;\n    for(auto e : lst) {\n        map[e]++;\n    }\n    long res\
    \ = -1;\n    for(auto it = map.begin(); it != map.end(); it++) {\n        if(it->first\
    \ <= it->second) {\n            res = std::max(res, it->first);\n        }\n \
    \   }\n    return res;", "    std::map<long,long> map;\n    for(long x:lst){\n\
    \        map[x]++;\n    }\n    std::sort(lst.begin(),lst.end());\n    for(long\
    \ x:lst){\n        if(map[x]>=x){\n            return x;\n        }\n    }\n \
    \   return -1;", "  assert(lst.size() > 0);\n  std::map<long, long> m;\n  for\
    \ (auto i : lst)\n  {\n    m[i]++;\n  }\n  for (auto i : m)\n  {\n    if (i.first\
    \ <= i.second)\n    {\n      return i.first;\n    }\n  }\n  return -1;", "  unordered_map<long,\
    \ long> map;\n  for (int i = 0; i < lst.size(); i++) {\n    if (map.find(lst[i])\
    \ == map.end()) {\n      map[lst[i]] = 1;\n    } else {\n      map[lst[i]]++;\n\
    \    }\n  }\n  long result = -1;\n  for (auto element : map) {\n    if (element.first\
    \ <= element.second) {\n      result = max(result, element.first);\n    }\n  }\n\
    \  return result;", "    std::unordered_map<long, int> map;\n    std::vector<long>\
    \ unique_list(lst.begin(), lst.end());\n    std::sort(unique_list.begin(), unique_list.end());\n\
    \    unique_list.erase(std::unique(unique_list.begin(), unique_list.end()), unique_list.end());\n\
    \    for(auto num : unique_list) {\n        int count = std::count(lst.begin(),\
    \ lst.end(), num);\n        map[num] = count;\n    }\n    for(auto m : map) {\n\
    \        if(m.first <= m.second) {\n            return m.first;\n        }\n \
    \   }\n    return -1;", "    std::unordered_map<long, long> cnts;\n    for (long\
    \ x : lst) {\n        cnts[x]++;\n    }\n    long res = -1;\n    for (std::pair<long,\
    \ long> p : cnts) {\n        if (p.first <= p.second) {\n            res = std::max(res,\
    \ p.first);\n        }\n    }\n    return res;", "    std::map<long, long> nums;\n\
    \    long ans = -1;\n    for (auto num : lst)\n        nums[num]++;\n    for (auto\
    \ elem : nums)\n        if (elem.first <= elem.second)\n            ans = std::max(ans,\
    \ elem.first);\n    return ans;", "  int n = lst.size();\n  int freq[n+1];\n \
    \ memset(freq, 0, sizeof(freq));\n  int freq_max = 0;\n  for(int i = 0; i < n;\
    \ i++) {\n    freq[lst[i]]++;\n    freq_max = max(freq_max, freq[lst[i]]);\n \
    \ }\n  // sort(freq, freq+n+1);\n  if(freq_max == 0)\n    return -1;\n  for(int\
    \ i = freq_max; i > 0; i--) {\n    for(int j = 1; j <= n; j++) {\n      if(freq[j]\
    \ == i && i >= j)\n        return j;\n    }\n  }\n  return -1;", "    std::map<long,\
    \ long> freq_map;\n    // Map all the values to their frequencies\n    for (auto\
    \ i : lst) {\n        if (freq_map.find(i) == freq_map.end()) {\n            freq_map[i]\
    \ = 1;\n        } else {\n            freq_map[i]++;\n        }\n    }\n    //\
    \ Now check for the greatest integer that is greater than zero and has a frequency\
    \ greater than or equal to itself\n    long max_freq = 0;\n    long max_val =\
    \ -1;\n    for (auto i : freq_map) {\n        if (i.first > 0 && i.first <= i.second\
    \ && i.second > max_freq) {\n            max_freq = i.second;\n            max_val\
    \ = i.first;\n        }\n    }\n    return max_val;", "    long answer;\n    //\
    \ Your code goes here\n    std::sort(lst.begin(), lst.end());\n    //unordered_map<long,\
    \ long> frequency;\n    long* frequency = new long[lst.size()];\n    for(int i\
    \ = 0; i < lst.size(); i++)\n        frequency[i] = 0;\n    int index = 0;\n \
    \   for(int i = 0; i < lst.size(); i++){\n        if(frequency[index] == 0)\n\
    \            frequency[index] = lst[i];\n        if(lst[i] == frequency[index])\n\
    \            frequency[index + 1]++;\n        else{\n            index += 2;\n\
    \            frequency[index] = lst[i];\n            frequency[index + 1]++;\n\
    \        }\n    }\n    for(int i = 0; i < index; i+=2){\n        if(frequency[i]\
    \ == frequency[i + 1])\n            answer = frequency[i];\n    }\n    return\
    \ answer;", "  \n  std::map<long, long> m;\n  for(int i = 0; i < lst.size(); i++){\n\
    \    m[lst[i]]++;\n  }\n  for(int i = lst.size() - 1; i >= 0; i--){\n    if(m[lst[i]]\
    \ >= lst[i]){\n      return lst[i];\n    }\n  }\n  return -1;", "    long size\
    \ = lst.size();\n    std::map<long, long> freq;\n\n    for(long i = 0; i < size;\
    \ i++) {\n        auto it = freq.find(lst[i]);\n        if(it == freq.end()) {\n\
    \            freq.insert(std::pair<long, long>(lst[i], 1));\n        } else {\n\
    \            freq[lst[i]] += 1;\n        }\n    }\n\n    std::map<long, long>::iterator\
    \ it;\n    long rst = -1;\n    for(it = freq.begin(); it != freq.end(); it++)\
    \ {\n        if(it->first <= it->second) {\n            rst = it->first;\n   \
    \     }\n    }\n\n    return rst;", "\tfor (int i = lst.size() - 1; i >= 0; i--)\
    \ {\n\t\tlong search = lst[i];\n\t\tif (search == 1) {\n\t\t\treturn 1;\n\t\t\
    }\n\t\tint counter = 0;\n\t\tfor (int j = i; j >= 0; j--) {\n\t\t\tif (lst[j]\
    \ == search) {\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\tif (counter >= search)\
    \ {\n\t\t\treturn search;\n\t\t}\n\t}\n\treturn -1;", "    // std::sort(lst.begin(),\
    \ lst.end()); // sort the array.\n    long n = lst.size();\n    std::vector<int>\
    \ freq(n+1, 0);\n    for(long i = 0; i < n; i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = n; i >= 1; i--) {\n        if(freq[i] >= i) {\n     \
    \       return i;\n        }\n    }\n    return -1;", "\tstd::map<long, long>\
    \ counts;\n\tfor (auto i : lst) {\n\t\tcounts[i]++;\n\t}\n\tfor (auto it = counts.rbegin();\
    \ it != counts.rend(); it++) {\n\t\tif (it->first <= it->second) {\n\t\t\treturn\
    \ it->first;\n\t\t}\n\t}\n\treturn -1;", "    std::unordered_map<long, long> mymap;\n\
    \    for(auto a: lst){\n        mymap[a]++;\n    }\n    long max = -1;\n    for(auto\
    \ a: mymap){\n        if(a.first>=a.second && a.first>max){\n            max =\
    \ a.first;\n        }\n    }\n    return max;", "  long m = -1;\n  std::map<long,\
    \ long> freq;\n  std::map<long, long>::iterator it;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    it = freq.find(lst[i]);\n    if (it == freq.end())\n      freq.insert(std::pair<long,\
    \ long>(lst[i], 1));\n    else\n      it->second++;\n  }\n  for (it = freq.begin();\
    \ it != freq.end(); it++) {\n    if (it->first > 0 && it->first <= it->second)\n\
    \      m = it->first;\n  }\n  return m;", "    std::map<long, long> frequency;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        frequency[lst[i]]++;\n  \
    \  }\n    int last = 0;\n    std::map<long, long>::iterator it = frequency.begin();\n\
    \    while (it != frequency.end()) {\n        if (it->first >= it->second)\n \
    \           return -1;\n        last = it->first;\n        it++;\n    }\n    return\
    \ last;", "    std::unordered_map<long, long> mp;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        mp[lst[i]]++;\n    }\n    long maxFreq = 0;\n    for(auto i\
    \ : mp) {\n        if(i.first <= i.second) {\n            maxFreq = std::max(maxFreq,\
    \ i.first);\n        }\n    }\n    return maxFreq == 0 ? -1 : maxFreq;", "   \
    \ if(lst.size() == 0) return -1;\n    std::unordered_map<long, long> hist;\n \
    \   for(long num : lst) hist[num]++;\n    for(auto iter = hist.begin(); iter !=\
    \ hist.end(); iter++) {\n        if(iter->first <= iter->second) return iter->first;\n\
    \    }\n    return -1;", "\tlong result = -1;\n\tlong frequency = -1;\n\tstd::map<long,\
    \ long> m;\n\tfor (auto i : lst) {\n\t\tm[i] += 1;\n\t}\n\tfor (auto i : m) {\n\
    \t\tif (i.first > 0 && i.first <= i.second && result < i.first) {\n\t\t\tresult\
    \ = i.first;\n\t\t}\n\t}\n\treturn result;", "  if(lst.size() == 0)\n  {\n   \
    \ return -1;\n  }\n  // sort the list\n  std::sort(lst.begin(), lst.end());\n\
    \  // count the occurences of each number\n  // to keep track of the count\n \
    \ std::map<long, int> counter;\n  int count = 1;\n  for(int i = 0; i < lst.size()\
    \ - 1; i++)\n  {\n    if(lst[i] == lst[i + 1])\n    {\n      count++;\n    }\n\
    \    else\n    {\n      counter[lst[i]] = count;\n      count = 1;\n    }\n  }\n\
    \  // if last element is unique add it\n  if(counter.find(lst[lst.size() - 1])\
    \ == counter.end())\n  {\n    counter[lst[lst.size() - 1]] = count;\n  }\n  //\
    \ max value with frequency greater than or equal to its value\n  long max = -1;\n\
    \  // iterate over the map\n  for(auto it = counter.begin(); it != counter.end();\
    \ it++)\n  {\n    // if frequency is greater than or equal to the value\n    if(it->second\
    \ >= it->first)\n    {\n      // update the max value\n      max = std::max(max,\
    \ it->first);\n    }\n  }\n  return max;", "  // your code here\n  std::unordered_map<long,\
    \ int> map;\n  for(int i = 0; i < lst.size(); i++){\n    if(map.find(lst[i]) ==\
    \ map.end()){\n      map[lst[i]] = 1;\n    }\n    else{\n      map[lst[i]]++;\n\
    \    }\n  }\n  int maxCount = 0;\n  for(auto iter = map.begin(); iter != map.end();\
    \ iter++){\n    if(iter->first <= iter->second && iter->second > maxCount){\n\
    \      maxCount = iter->second;\n    }\n  }\n  if(maxCount == 0){\n    return\
    \ -1;\n  }\n  return maxCount;", "    // Write your code here\n    std::map<long,\
    \ int> m;\n    int len = lst.size();\n    for(int i = 0; i < len; i++){\n    \
    \    if(m.find(lst[i]) == m.end()){\n            m[lst[i]] = 1;\n        }\n \
    \       else\n            m[lst[i]] += 1;\n    }\n    int ans = -1;\n    for(auto\
    \ it = m.begin(); it != m.end(); it++){\n        if(it->first <= it->second){\n\
    \            ans = it->first;\n        }\n    }\n    return ans;", "    // your\
    \ code\n    int n = lst.size();\n    int count = 0;\n    long val = -1;\n    long\
    \ a[100] = {0};\n    for(int i = 0; i < n; i++)\n    {\n        a[lst[i]]++;\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        if(a[lst[i]] >= lst[i])\n\
    \        {\n            count++;\n            val = lst[i];\n        }\n    }\n\
    \    if(count == 0)\n    {\n        return -1;\n    }\n    else\n    {\n     \
    \   return val;\n    }", "    std::sort(lst.begin(), lst.end());\n    long max\
    \ = -1;\n    for(int i = lst.size() - 1; i >= 0; i--) {\n        if(lst[i] ==\
    \ 0)\n            continue;\n        if(lst[i] == lst[i - 1]) {\n            max\
    \ = lst[i];\n            break;\n        }\n    }\n    return max;", "  if(lst.size()\
    \ == 0) return -1;\n  std::map<long,long> dic;\n  std::map<long,long> dic2;\n\
    \  std::vector<long> lst2 = lst;\n  std::sort(lst2.begin(), lst2.end());\n  for(long\
    \ i = 0; i < lst2.size(); i++){\n    if(dic.find(lst2[i]) == dic.end()){\n   \
    \   dic[lst2[i]] = 0;\n    }\n    dic[lst2[i]] += 1;\n  }\n  for(long i = 0; i\
    \ < lst2.size(); i++){\n    if(dic[lst2[i]] < lst2[i]){\n      if(dic2.find(lst2[i])\
    \ == dic2.end()){\n        dic2[lst2[i]] = 0;\n      }\n      dic2[lst2[i]] +=\
    \ 1;\n    }\n  }\n  long ans = -1;\n  for(auto it = dic2.begin(); it != dic2.end();\
    \ it++){\n    if(it->second >= it->first){\n      ans = it->first;\n    }\n  }\n\
    \  return ans;", "    std::unordered_map<long, long> counts;\n    for (auto v\
    \ : lst) {\n        if (counts.find(v) == counts.end()) {\n            counts[v]\
    \ = 1;\n        } else {\n            counts[v]++;\n        }\n    }\n    // std::cout\
    \ << \"counts[\" << 2 << \"] = \" << counts[2] << \"\\n\";\n    long max = -1;\n\
    \    for (auto &item : counts) {\n        if (item.first <= item.second && item.first\
    \ > max) {\n            max = item.first;\n        }\n    }\n    return max;",
  "    std::sort(lst.begin(), lst.end());\n    long count = 1;\n    long max_count\
    \ = 1;\n    long element = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] == lst[i - 1])\n            count++;\n        else {\n\
    \            if (count >= lst[i - 1])\n                return lst[i - 1];\n  \
    \          count = 1;\n        }\n    }\n    if (count >= lst[lst.size() - 1])\n\
    \        return lst[lst.size() - 1];\n    return -1;", "  std::map<long, long>\
    \ frequency_map;\n  for (auto x : lst) {\n    if (frequency_map.find(x) == frequency_map.end())\
    \ {\n      frequency_map[x] = 1;\n    } else {\n      frequency_map[x]++;\n  \
    \  }\n  }\n  std::sort(lst.begin(), lst.end());\n  for (auto x : lst) {\n    if\
    \ (frequency_map[x] >= x) {\n      return x;\n    }\n  }\n  return -1;", "  std::unordered_map<long,long>\
    \ counts;\n  for(auto i : lst) {\n    if(counts.find(i) == counts.end()) {\n \
    \     counts[i] = 1;\n    } else {\n      counts[i] += 1;\n    }\n  }\n  long\
    \ greatest = -1;\n  for(auto i : counts) {\n    if(i.first == i.second && i.first\
    \ > greatest) {\n      greatest = i.first;\n    }\n  }\n  return greatest;", "\t\
    int i, k, max = -1;\n\tstd::vector<int> freq(100, 0);\n\tfor (i = 0; i < lst.size();\
    \ i++) {\n\t\tk = lst[i];\n\t\tfreq[k]++;\n\t}\n\tfor (i = 0; i < lst.size();\
    \ i++) {\n\t\tk = lst[i];\n\t\tif (freq[k] >= k && k > max) {\n\t\t\tmax = k;\n\
    \t\t}\n\t}\n\treturn max;", "\tstd::unordered_map<long, long> hash;\n\tfor (auto&\
    \ num : lst) {\n\t\thash[num]++;\n\t}\n\tfor (auto& entry : hash) {\n\t\tif (entry.first\
    \ <= entry.second) {\n\t\t\treturn entry.first;\n\t\t}\n\t}\n\treturn -1;", " \
    \   long m = -1;\n    map<long, long> m_freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        m_freq[lst[i]]++;\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (m_freq[lst[i]] >= lst[i]) {\n            m = lst[i];\n \
    \       }\n    }\n    return m;", "    std::unordered_map<long,long> map;\n  \
    \  for(auto x:lst){\n        map[x]+=1;\n    }\n    long greatest=0;\n    for(auto\
    \ it=map.begin();it!=map.end();it++){\n        if(it->first>=it->second && it->first>greatest){\n\
    \            greatest=it->first;\n        }\n    }\n    if(greatest){\n      \
    \  return greatest;\n    }\n    return -1;", "  std::map<long, long> frequency;\n\
    \  long freq = 0;\n  long key = 0;\n  for (int i = 0; i < lst.size(); i++) {\n\
    \    if (frequency.find(lst[i]) == frequency.end()) {\n      frequency[lst[i]]\
    \ = 1;\n    } else {\n      frequency[lst[i]]++;\n    }\n  }\n  for (std::map<long,\
    \ long>::iterator i = frequency.begin(); i != frequency.end(); i++) {\n    if\
    \ (i->first <= i->second && i->second > freq) {\n      freq = i->second;\n   \
    \   key = i->first;\n    }\n  }\n  if (freq > 0) {\n    return key;\n  } else\
    \ {\n    return -1;\n  }", "\tstd::map<long, long> m;\n\tfor (long i = 0; i <\
    \ lst.size(); i++) {\n\t\tm[lst[i]]++;\n\t}\n\tstd::map<long, long>::iterator\
    \ it;\n\tlong max = 0;\n\tfor (it = m.begin(); it != m.end(); it++) {\n\t\tif\
    \ (it->first == it->second && it->first > max) {\n\t\t\tmax = it->first;\n\t\t\
    }\n\t}\n\tif (max > 0) {\n\t\treturn max;\n\t}\n\treturn -1;", "    // Create\
    \ a new vector to store the frequency of each element\n    std::vector<long> freq(lst.size(),\
    \ 0);\n\n    // Keep track of the max frequency and the index of the element with\
    \ the max frequency\n    long freq_max = 0;\n    long index_max = 0;\n\n    //\
    \ Iterate through the list and count the frequency of each element\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n\n    // Iterate\
    \ through the freq list to find the max frequency and max index\n    for (long\
    \ i = 0; i < freq.size(); i++) {\n        if (freq[i] > freq_max) {\n        \
    \    freq_max = freq[i];\n            index_max = i;\n        }\n    }\n\n   \
    \ // If there are elements with a frequency greater than 1 and the max index is\
    \ greater than 1, return the index\n    if (freq_max > 1 && index_max > 1) {\n\
    \        return index_max;\n    }\n    // Otherwise, return -1\n    else {\n \
    \       return -1;\n    }", "    std::unordered_map<long, long> map;\n    for(auto\
    \ x: lst)\n        map[x]++;\n    for(int i = lst.size(); i >= 1; i--)\n     \
    \   if(map[i] >= i)\n            return i;\n    return -1;", "    long n = lst.size();\n\
    \    std::unordered_map<long, long> umap; \n    for (int i = 0; i < n; i++) \n\
    \        umap[lst[i]]++; \n  \n    for (int i = 0; i < n; i++) { \n        if\
    \ (umap[lst[i]] >= lst[i]) \n            return lst[i]; \n    } \n    return -1; ",
  "    std::map<long, long> count_map;\n    for (auto value : lst) {\n        count_map[value]++;\n\
    \    }\n    long max_freq = 0;\n    for (auto pair : count_map) {\n        if\
    \ (pair.first <= pair.second) {\n            max_freq = std::max(max_freq, pair.first);\n\
    \        }\n    }\n    return max_freq;", "    std::map<long, long> lst1;\n  \
    \  for(long i=0; i<lst.size(); i++){\n        if(lst1.find(lst[i]) == lst1.end()){\n\
    \            lst1[lst[i]] = 1;\n        }\n        else{\n            lst1[lst[i]]\
    \ += 1;\n        }\n    }\n    long max = -1;\n    for(auto i=lst1.begin(); i!=lst1.end();\
    \ i++){\n        if(i->first <= i->second && i->first > max){\n            max\
    \ = i->first;\n        }\n    }\n    return max;", "    std::unordered_map<long,\
    \ long> map;\n    long result = -1;\n    for (auto x : lst) {\n        map[x]++;\n\
    \    }\n    for (auto x : lst) {\n        if (map[x] >= x && x > result) {\n \
    \           result = x;\n        }\n    }\n    return result;", "  long max =\
    \ -1;\n  long frequency = -1;\n  std::unordered_map<long, long> m;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    if (m.find(lst[i]) == m.end()) {\n      m[lst[i]]\
    \ = 1;\n    } else {\n      m[lst[i]] += 1;\n    }\n  }\n  for (auto it = m.begin();\
    \ it != m.end(); it++) {\n    if (it->first == it->second && it->first > max)\
    \ {\n      max = it->first;\n    }\n  }\n  return max;", "    // create a map\
    \ of <number, frequency>\n    std::map<long, long>map1;\n    // iterate and put\
    \ in the map\n    for(std::vector<long>::iterator it = lst.begin(); it != lst.end();\
    \ it++){\n        if(map1.find(*it) == map1.end()){\n            map1[*it] = 1;\n\
    \        }\n        else{\n            map1[*it]++;\n        }\n    }\n    //\
    \ create a map of <frequency, number>\n    std::map<long, long>map2;\n    // iterate\
    \ over the map1 and put in the map2\n    for(std::map<long, long>::iterator it\
    \ = map1.begin(); it != map1.end(); it++){\n        if(map2.find(it->second) ==\
    \ map2.end()){\n            map2[it->second] = it->first;\n        }\n       \
    \ else{\n            map2[it->second] = std::max(map2[it->second], it->first);\n\
    \        }\n    }\n    // iterate over the map2 to get the value\n    for(std::map<long,\
    \ long>::iterator it = map2.begin(); it != map2.end(); it++){\n        if(it->first\
    \ >= it->second && it->second > 0){\n            return it->second;\n        }\n\
    \    }\n    return -1;", "    std::map<long, long> mymap;\n    for(std::vector<long>::iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n        std::cout << *it << std::endl;\n\
    \        mymap[*it]++;\n    }\n    // std::cout << mymap[0] << std::endl;\n  \
    \  std::map<long, long>::iterator it = mymap.begin();\n    for(int i = 0; i <\
    \ mymap.size(); i++) {\n        std::cout << it->first << \" \" << it->second\
    \ << std::endl;\n        if (it->first == it->second) {\n            return it->first;\n\
    \        }\n        it++;\n    }\n    return -1;", "    std::map<long, int> freq;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n\
    \    long ans = -1;\n    for (auto i = freq.begin(); i != freq.end(); i++) {\n\
    \        if (i->first <= i->second) {\n            ans = i->first;\n        }\n\
    \    }\n    return ans;", "\tint size = lst.size();\n\tint max = 0;\n\tstd::map<long,\
    \ int> m;\n\tfor (int i = 0; i < size; i++) {\n\t\tm[lst[i]]++;\n\t\tif (m[lst[i]]\
    \ > max) {\n\t\t\tmax = m[lst[i]];\n\t\t}\n\t}\n\tstd::map<long, int>::iterator\
    \ it;\n\tfor (it = m.begin(); it != m.end(); it++) {\n\t\tif (it->first == it->second\
    \ && it->first > max) {\n\t\t\treturn it->first;\n\t\t}\n\t}\n\treturn -1;", " \
    \   std::map<long,long> freq;\n    for(auto e:lst)\n        freq[e]++;\n    long\
    \ mx=-1;\n    for(auto it:freq)\n        if(it.first<=it.second)\n           \
    \ mx=std::max(mx,it.first);\n    return mx;", "\tstd::map<long, int> map;\n\t\
    std::vector<long>::iterator it;\n\tfor (it = lst.begin(); it != lst.end(); it++)\
    \ {\n\t\tmap[*it] += 1;\n\t}\n\tstd::map<long, int>::iterator it2;\n\tint result\
    \ = -1;\n\tfor (it2 = map.begin(); it2 != map.end(); it2++) {\n\t\t// std::cout\
    \ << it2->first << std::endl;\n\t\tif (it2->first == it2->second) {\n\t\t\tresult\
    \ = it2->first;\n\t\t}\n\t}\n\treturn result;", "    long n = lst.size();\n  \
    \  std::unordered_map<long, long> map;\n    for(long i = 0; i < n; i++) {\n  \
    \      map[lst[i]]++;\n    }\n    for(long i = n; i >= 1; i--) {\n        if(map[i]\
    \ >= i) {\n            return i;\n        }\n    }\n    return -1;", "    assert((lst.size()\
    \ >= (0)));\n    if (((lst.size()) == (0))) {\n        return - (1);\n    }\n\
    \    std::vector<long>::iterator it;\n    std::map<long, long> count_dict;\n \
    \   for (it = (lst.begin()); it != (lst.end()); it++) {\n        auto it_count\
    \ = (count_dict.find(* it));\n        if (it_count == (count_dict.end())) {\n\
    \            count_dict[* it] = (1);\n        }\n        else {\n            count_dict[*\
    \ it] = ((count_dict[* it]) + (1));\n        }\n    }\n    std::vector<long> freq_list;\n\
    \    std::map<long, long>::iterator map_it;\n    for (map_it = (count_dict.begin());\
    \ map_it != (count_dict.end()); map_it++) {\n        if (((map_it->first) == ((map_it->second)))\
    \ && ((map_it->first) > (0))) {\n            freq_list.push_back(map_it->first);\n\
    \        }\n    }\n    if ((freq_list.size()) == (0)) {\n        return - (1);\n\
    \    }\n    else {\n        return * max_element(freq_list.begin(), freq_list.end());\n\
    \    }", "\tstd::map<long, long> freq_map;\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\tfreq_map[lst[i]]++;\n\t}\n\tfor (auto i = freq_map.rbegin(); i !=\
    \ freq_map.rend(); i++) {\n\t\tif (i->first <= i->second) {\n\t\t\treturn i->first;\n\
    \t\t}\n\t}\n\treturn -1;", "\t// Write your code here\n\t// to print results to\
    \ the standard output you can use std::cout\n\t// example: std::cout << \"Hello\
    \ world!\";\n\tstd::unordered_map<long, long> lst_map;\n\tfor (auto x : lst) {\n\
    \t\tlst_map[x]++;\n\t}\n\tfor (auto x : lst_map) {\n\t\tif (x.first <= x.second)\
    \ {\n\t\t\treturn x.first;\n\t\t}\n\t}\n\treturn -1;", "  std::map<long, int>\
    \ map;\n  for (auto& el : lst) {\n    ++map[el];\n  }\n  for (auto it = map.rbegin();\
    \ it != map.rend(); ++it) {\n    if (it->first <= it->second) {\n      return\
    \ it->first;\n    }\n  }\n  return -1;", "    long i,j,k,n,m;\n    n=lst.size();\n\
    \    if(n==0) return -1;\n    std::vector<long> freq(n,0);\n    for(i=0;i<n;i++){\n\
    \        freq[lst[i]]++;\n    }\n    for(i=1;i<n;i++){\n        if(freq[i]>=i)\n\
    \            return i;\n    }\n    return -1;", "  // int[] a = new int[lst.size()];\n\
    \  std::vector<int> a(lst.size());\n  for(int i = 0; i < lst.size(); i++){\n \
    \   a[i] = lst[i];\n  }\n  // Arrays.sort(a);\n  std::sort(a.begin(), a.end());\n\
    \  int cnt = 1;\n  for(int i = 1; i < a.size(); i++){\n    if(a[i-1] == a[i]){\n\
    \      cnt++;\n    }else{\n      if(cnt >= a[i-1]){\n        return a[i-1];\n\
    \      }\n      cnt = 1;\n    }\n  }\n  if(cnt >= a[a.size()-1]){\n    return\
    \ a[a.size()-1];\n  }\n  return -1;", "    std::map<long,long> map;\n    for(auto\
    \ i : lst){\n        if(map.find(i) == map.end()){\n            map[i] = 1;\n\
    \        }else{\n            map[i] = map[i] + 1;\n        }\n    }\n    for(auto\
    \ i : map){\n        if(i.first == i.second){\n            return i.first;\n \
    \       }\n    }\n    return -1;", "    std::map<long,long> map;\n    long result=-1;\n\
    \    for(int i=0;i<lst.size();i++){\n        map[lst[i]]++;\n    }\n    for(int\
    \ i=0;i<lst.size();i++){\n        if(map[lst[i]]>=lst[i]){\n            result=lst[i];\n\
    \        }\n    }\n    return result;", "    std::map<long,long> freq;\n    for(int\
    \ i=0;i<lst.size();i++){\n        freq[lst[i]]++;\n    }\n    long res=-1;\n \
    \   for(int i=0;i<lst.size();i++){\n        if(lst[i]<=freq[lst[i]]){\n      \
    \      res=std::max(res,lst[i]);\n        }\n    }\n    return res;", "\tstd::map<long,\
    \ int> counts;\n\tfor (auto & item : lst)\n\t\t++counts[item];\n\tlong result\
    \ = -1;\n\tfor (auto & item : counts)\n\t\tif (item.first <= item.second)\n\t\t\
    \tresult = std::max(result, item.first);\n\treturn result;", "\tint n = lst.size();\n\
    \tstd::map<long, int> m;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (m.find(lst[i])\
    \ == m.end()) {\n\t\t\tm[lst[i]] = 1;\n\t\t}\n\t\telse {\n\t\t\tm[lst[i]]++;\n\
    \t\t}\n\t}\n\tint maxx = -1;\n\tfor (auto i : m) {\n\t\tif (i.first > 0 && i.first\
    \ <= i.second) {\n\t\t\tmaxx = max(maxx, i.first);\n\t\t}\n\t}\n\treturn maxx;",
  "    std::map<long,long> freq;\n    for(int i=0;i<lst.size();i++){\n        freq[lst[i]]++;\n\
    \    }\n    for(int i=lst.size()-1;i>=0;i--){\n        if(freq[lst[i]] >= lst[i]){\n\
    \            return lst[i];\n        }\n    }\n    return -1;", "    // Get frequency\
    \ of all elements\n    std::unordered_map<long, long> frequency;\n    for (auto\
    \ e : lst) {\n        frequency[e]++;\n    }\n    long max_freq = -1;\n    long\
    \ max_val = -1;\n    for (auto e : frequency) {\n        if (e.first == e.second\
    \ && e.first > max_val) {\n            max_freq = e.second;\n            max_val\
    \ = e.first;\n        }\n    }\n    return max_val;", "  std::map<long, int> m;\n\
    \  for (long i: lst) {\n    if (m.find(i) == m.end()) {\n      m[i] = 1;\n   \
    \ } else {\n      m[i]++;\n    }\n  }\n  long k = -1;\n  for (auto it: m) {\n\
    \    if (it.first == it.second) {\n      k = std::max(k, it.first);\n    }\n \
    \ }\n  return k;", "    std::map<long, long> freq;\n    for (auto it = lst.begin();\
    \ it != lst.end(); ++it)\n        ++freq[*it];\n    std::sort(lst.begin(), lst.end());\n\
    \    lst.erase(std::unique(lst.begin(), lst.end()), lst.end());\n    std::vector<long>::reverse_iterator\
    \ rit;\n    for (rit = lst.rbegin(); rit != lst.rend(); ++rit)\n        if (freq[*rit]\
    \ >= *rit)\n            return *rit;\n    return -1;", "    int result = -1;\n\
    \    for (long i = 1; i <= lst.size(); i++) {\n        if (std::count(lst.begin(),\
    \ lst.end(), i) >= i) {\n            result = i;\n        }\n    }\n    return\
    \ result;", "    if(lst.size() == 0) return -1;\n    unordered_map<long, int>\
    \ counter;\n    for(auto& i : lst)\n        counter[i]++;\n    auto it = counter.begin();\n\
    \    while(it != counter.end()){\n        if(it->first <= it->second)\n      \
    \      return it->first;\n        it++;\n    }\n    return -1;", "    std::unordered_map<long,\
    \ int> my_map;\n    for(auto n : lst)\n        my_map[n]++;\n    for(auto n :\
    \ lst)\n        if(my_map[n] >= n)\n            return n;\n    return -1;", " \
    \   long max = -1;\n    for (int i = 0; i < lst.size(); i++) {\n        int count\
    \ = 0;\n        for (int j = 0; j < lst.size(); j++) {\n            if (lst[i]\
    \ == lst[j]) {\n                count++;\n            }\n        }\n        if\
    \ (count >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    return max;", "    std::map<long,long> temp;\n    for(int i=0;i<lst.size();i++){\n\
    \        temp[lst[i]]++;\n    }\n    long max=0;\n    for(auto x:temp){\n    \
    \    if(x.first<=x.second && x.first>max){\n            max=x.first;\n       \
    \ }\n    }\n    if(max==0){\n        return -1;\n    }\n    return max;", "  \
    \  std::map<long, long> freq;\n    for (long el : lst) {\n        freq[el]++;\n\
    \    }\n    std::vector<long> keys;\n    for (std::pair<long, long> el : freq)\
    \ {\n        keys.push_back(el.first);\n    }\n    std::sort(keys.begin(), keys.end());\n\
    \    for (long key : keys) {\n        if (key <= freq[key]) {\n            return\
    \ key;\n        }\n    }\n    return -1;", "    std::map<long, long> freq;\n \
    \   for (long x : lst)\n        freq[x]++;\n    for (long x : lst)\n        if\
    \ (x == freq[x])\n            return x;\n    return -1;", "    std::unordered_map<long,long>\
    \ mymap;\n    //creating hashtable\n    for(auto i=lst.begin();i!=lst.end();i++){\n\
    \        mymap[*i]+=1;\n    }\n    long max = -1;\n    //looping through the hashtable\
    \ to find the maximum frequency\n    for(auto i=mymap.begin();i!=mymap.end();i++){\n\
    \        if(i->first<=i->second && i->first>max){\n            max = i->first;\n\
    \        }\n    }\n    return max;", "    long len = lst.size();\n    std::unordered_map<long,\
    \ long> m;\n    long frequency = 0;\n    long res = -1;\n    for(long i = 0; i\
    \ < len; i++) {\n        m[lst[i]]++;\n    }\n    for(auto it = m.begin(); it\
    \ != m.end(); it++) {\n        if(it->first <= it->second && it->second > frequency)\
    \ {\n            frequency = it->second;\n            res = it->first;\n     \
    \   }\n    }\n    return res;", "    long long mx = *max_element(lst.begin(),\
    \ lst.end());\n    unordered_map<long, long> mp;\n    for(auto i : lst) mp[i]++;\n\
    \    for(int i = mx; i >= 1; i--) {\n        if(mp[i] >= i) return i;\n    }\n\
    \    return -1;", "\t// Write your code here.\n\tint cnt[lst.size()+1] = {0};\n\
    \tfor(int i = 0; i < lst.size(); i++){\n\t\tcnt[lst[i]]++;\n\t}\n\tfor(int i =\
    \ lst.size(); i >= 0; i--){\n\t\tif(cnt[i] >= i){\n\t\t\treturn i;\n\t\t}\n\t\
    }\n\treturn -1;", "    // your code here\n    int n = lst.size();\n    int nmax\
    \ = *std::max_element(lst.begin(), lst.end());\n    std::vector<int> freq(nmax+1,\
    \ 0);\n    for(auto num: lst)\n        freq[num]++;\n    for(int i = nmax; i >\
    \ 0; i--)\n        if(freq[i] >= i)\n            return i;\n    return -1;", "\t\
    // for(auto i:lst)\n\t// \tcout<<i<<\" \";\n\t// cout<<endl;\n\tlong ans=-1;\n\
    \tsort(lst.begin(),lst.end());\n\tlong count=1;\n\tfor(int i=1;i<lst.size();i++){\n\
    \t\tif(lst[i]==lst[i-1])\n\t\t\tcount++;\n\t\telse\n\t\t\tcount=1;\n\t\tif(count>=lst[i]\
    \ && lst[i]>ans)\n\t\t\tans=lst[i];\n\t}\n\treturn ans;", "\tstd::vector<long>\
    \ numbers(std::max_element(lst.begin(), lst.end()) + 1);\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tnumbers[lst[i]] += 1;\n\t}\n\tfor (int i = 1; i <\
    \ numbers.size(); i++) {\n\t\tif (numbers[i] >= i) {\n\t\t\treturn i;\n\t\t}\n\
    \t}\n\treturn -1;", "  std::map<long, long> counter;\n  for (std::vector<long>::iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n    counter[*it]++;\n  }\n  long\
    \ result = -1;\n  for (std::map<long, long>::iterator it = counter.begin(); it\
    \ != counter.end(); ++it) {\n    if (it->first == it->second) {\n      result\
    \ = it->first;\n    }\n  }\n  return result;", "    // Your code here\n    int\
    \ freq[100005];\n    memset(freq,0,sizeof(freq));\n    for(auto x:lst)\n    {\n\
    \        freq[x]++;\n    }\n    for(int i=99994;i>=0;i--)\n    {\n        if(freq[i]>=i)\n\
    \        {\n            return i;\n        }\n    }\n    return -1;", "    //\
    \ your code here\n    std::unordered_map<long, long> m;\n    for(long i = 0; i\
    \ < lst.size(); i++){\n        if(m.find(lst[i]) == m.end()){\n            m[lst[i]]\
    \ = 1;\n        }\n        else{\n            m[lst[i]]++;\n        }\n    }\n\
    \    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++){\n    \
    \    if(it->first == it->second && it->first > max){\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    int max = -1;\n    std::sort(lst.begin(),\
    \ lst.end());\n    for(int i = lst.size() - 1; i >= 0; i--) {\n        if(lst[i]\
    \ < max) {\n            return max;\n        }\n        if(std::count(lst.begin(),\
    \ lst.end(), lst[i]) >= lst[i]) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;", "  long maxval = -1;\n  for (long i = 0; i < lst.size(); i++)\
    \ {\n    long freq = std::count(lst.begin(), lst.end(), lst[i]);\n    if (freq\
    \ >= lst[i] && lst[i] > maxval) {\n      maxval = lst[i];\n    }\n  }\n  return\
    \ maxval;", "\tlong count = 1;\n\tlong output = -1;\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] ==\
    \ lst[i + 1]) {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tif (count >= lst[i])\
    \ {\n\t\t\t\toutput = lst[i];\n\t\t\t}\n\t\t\tcount = 1;\n\t\t}\n\t}\n\tif (count\
    \ >= lst[lst.size() - 1]) {\n\t\toutput = lst[lst.size() - 1];\n\t}\n\treturn\
    \ output;"]
stop_tokens:
- "\n}"
