name: HumanEval_131_digits
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the product of the odd digits.\n// Return 0 if all digits are even.\n\
  // For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>>\
  \ digits((235))\n// (15)\nlong digits(long n) {\n"
tests: "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) ==\
  \ (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n\
  \    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n\
  \    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n\
  }\n"
completions: ["    std::stringstream ss;\n    ss << n;\n    std::string str = ss.str();\n\
    \    long product = 1;\n    for (int i = 0; i < str.length(); i++) {\n       \
    \ char c = str[i];\n        int digit = c - '0';\n        if (digit % 2 == 1)\
    \ {\n            product *= digit;\n        }\n    }\n    return product;", " \
    \   int prod = 1;\n    while(n > 0) {\n        if(n % 2 != 0) {\n            prod\
    \ *= n % 10;\n        }\n        n /= 10;\n    }\n    return prod;", "  int digits\
    \ = 0;\n  int product = 1;\n  while (n > 0) {\n    int digit = n % 10;\n    if\
    \ (digit % 2 == 1) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n  return\
    \ product;", "    int prod = 1;\n    while(n>0){\n        int digit = n%10;\n\
    \        if(digit%2!=0){\n            prod *= digit;\n        }\n        n /=\
    \ 10;\n    }\n    return prod;", "\tlong p = 1;\n\twhile (n > 0) {\n\t\tlong d\
    \ = n % 10;\n\t\tif (d % 2 != 0)\n\t\t\tp *= d;\n\t\tn /= 10;\n\t}\n\treturn p;",
  "    if (n == 0) return 0;\n    long r = n % 10;\n    if (r % 2 == 0) {\n      \
    \  r = 0;\n    }\n    return r + digits(n / 10);", "    long sum = 1;\n    while\
    \ (n > 0) {\n        long rem = n % 10;\n        if (rem % 2 != 0) {\n       \
    \     sum *= rem;\n        }\n        n /= 10;\n    }\n    return sum;", "   \
    \ int odd = 1;\n    while (n > 0) {\n        int last = n % 10;\n        if (last\
    \ % 2 == 1) {\n            odd *= last;\n        }\n        n /= 10;\n    }\n\
    \    return odd;", "    long res = 1;\n    while (n > 0) {\n        long last_digit\
    \ = n % 10;\n        if (last_digit % 2 != 0) {\n            res *= last_digit;\n\
    \        }\n        n /= 10;\n    }\n    return res;", "\tlong i = n;\n\tlong\
    \ product = 1;\n\twhile (i > 0) {\n\t\tlong lastDigit = i % 10;\n\t\tif (lastDigit\
    \ % 2 != 0) {\n\t\t\tproduct *= lastDigit;\n\t\t}\n\t\ti /= 10;\n\t}\n\treturn\
    \ product;", "  long product = 1;\n  while (n > 0) {\n    long digit = n % 10;\n\
    \    if (digit % 2 != 0) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n\
    \  return product;", "  long product = 1;\n  while (n > 0) {\n    long digit =\
    \ n % 10;\n    if (digit % 2 != 0) {\n      product *= digit;\n    }\n    n /=\
    \ 10;\n  }\n  return product;", "    long product = 1;\n    long counter = 0;\n\
    \    while (n > 0) {\n        long temp = n % 10;\n        if (temp % 2 != 0)\
    \ {\n            product *= temp;\n            counter++;\n        }\n       \
    \ n /= 10;\n    }\n    if (counter == 0) {\n        return 0;\n    }\n    return\
    \ product;", "    long odd_product = 1;\n    while (n != 0) {\n        if (n %\
    \ 2 != 0)\n            odd_product *= n % 10;\n        n /= 10;\n    }\n    return\
    \ odd_product;", "  int d = n % 10;\n  if (n == 0) {\n    return 0;\n  }\n  if\
    \ (d % 2 != 0) {\n    return digits(n / 10) * d;\n  }\n  return digits(n / 10);",
  "    long result = 1;\n    while (n > 0) {\n        if (n % 2 != 0) {\n        \
    \    result *= n % 10;\n        }\n        n /= 10;\n    }\n    return result;",
  "  std::string str = std::to_string(n);\n  long prod = 1;\n  for (int i = 0; i <\
    \ str.length(); i++) {\n    char ch = str[i];\n    if (ch % 2 == 1) {\n      prod\
    \ *= (ch - '0');\n    }\n  }\n  return prod;", "  long sum = 1;\n  while (n !=\
    \ 0) {\n    long last = n % 10;\n    if (last % 2 != 0) {\n      sum *= last;\n\
    \    }\n    n /= 10;\n  }\n  return sum;", "    assert(n > 0);\n    int product\
    \ = 1;\n    for (int i = 10; n > 0; n /= 10) {\n        if (n % i % 2 != 0)\n\
    \            product *= n % i;\n    }\n    return product;", "    assert(n > 0);\n\
    \    long product = 1;\n    while (n > 0) {\n        if (n % 2 != 0) {\n     \
    \       product *= n % 10;\n        }\n        n /= 10;\n    }\n    return product;",
  "  long product = 1;\n  while (n != 0) {\n    long digit = n % 10;\n    if (digit\
    \ % 2 != 0) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n  return product;",
  "  long result = 1;\n  while (n) {\n    int digit = n % 10;\n    if (digit % 2 ==\
    \ 1) {\n      result *= digit;\n    }\n    n /= 10;\n  }\n  return result;", "\t\
    if (n < 10 && n % 2 != 0) {\n\t\treturn n;\n\t}\n\telse if (n < 10 && n % 2 ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tlong remainder = n % 10;\n\t\tn = n\
    \ / 10;\n\t\tif (remainder % 2 != 0) {\n\t\t\treturn remainder * digits(n);\n\t\
    \t}\n\t\telse {\n\t\t\treturn digits(n);\n\t\t}\n\t}", "  if (n == 0) {\n    return\
    \ 0;\n  } else {\n    int digit = n % 10;\n    if (digit % 2 == 0) {\n      return\
    \ digits(n / 10);\n    } else {\n      return digit * digits(n / 10);\n    }\n\
    \  }", "    if (n < 0) {\n        n = n * -1;\n    }\n    std::vector<int> numbers;\n\
    \    int result = 1;\n    while (n != 0) {\n        numbers.push_back(n % 10);\n\
    \        n = n / 10;\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] % 2 != 0) {\n            result = result * numbers[i];\n\
    \        }\n    }\n    return result;", "  long r = 1;\n  while (n) {\n    if\
    \ (n % 2) {\n      r *= n % 10;\n    }\n    n /= 10;\n  }\n  return r;", "  long\
    \ b = 1;\n  while (n > 0) {\n    if (n % 2 != 0) {\n      b *= n % 10;\n    }\n\
    \    n /= 10;\n  }\n  return b;", "  long product = 1;\n  for (int i = 10; n >\
    \ 0; n /= 10) {\n    long d = n % i;\n    if (d % 2 != 0) {\n      product *=\
    \ d;\n    }\n  }\n  return product;", "  long product = 1;\n  while (n != 0) {\n\
    \    long digit = n % 10;\n    if (digit % 2 != 0) {\n      product *= digit;\n\
    \    }\n    n /= 10;\n  }\n  return product;", "\tlong m = 1;\n\twhile (n > 0)\
    \ {\n\t\tif (n % 2 != 0) {\n\t\t\tm *= n % 10;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn\
    \ m;", "    if (n == 0) return 0;\n    int digit = n % 10;\n    if (digit % 2\
    \ == 0) {\n        return digits(n / 10);\n    } else {\n        return digits(n\
    \ / 10) * digit;\n    }", "  long prod = 1;\n  long r;\n  while (n > 0) {\n  \
    \  r = n % 10;\n    if (r % 2 != 0) {\n      prod *= r;\n    }\n    n /= 10;\n\
    \  }\n  return prod;", "    long x = 1;\n    while (n > 0) {\n        if (n %\
    \ 2 == 1) {\n            x *= n % 10;\n        }\n        n /= 10;\n    }\n  \
    \  return x;", "\tlong product = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 != 0)\n\t\
    \t\tproduct *= n % 10;\n\t\tn /= 10;\n\t}\n\treturn product;", "    long product\
    \ = 1;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit %\
    \ 2 != 0) {\n            product *= digit;\n        }\n        n /= 10;\n    }\n\
    \    return product;", "  // Insert your code here.\n  int prod = 1;\n  while(n>0){\n\
    \    int digit = n%10;\n    if(digit%2!=0){\n      prod*=digit;\n    }\n    n/=10;\n\
    \  }\n  return prod;", "    int prod = 1;\n    while(n > 0) {\n        int digit\
    \ = n % 10;\n        if(digit % 2 == 1) {\n            prod *= digit;\n      \
    \  }\n        n /= 10;\n    }\n    return prod;", "  if (n==0) {\n    return 0;\n\
    \  }\n  if (n%2!=0) {\n    return (n%10)*digits(n/10);\n  }\n  return digits(n/10);",
  "\tlong product = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 != 0) {\n\t\t\tproduct *=\
    \ n % 10;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn product;", "  long result = 1;\n\
    \  while (n > 0) {\n    long cur_digit = n % 10;\n    if (cur_digit % 2 != 0)\
    \ {\n      result *= cur_digit;\n    }\n    n /= 10;\n  }\n  return result;",
  "\tint odd_product = 1;\n\twhile (n) {\n\t\tint last_digit = n % 10;\n\t\tif (last_digit\
    \ % 2 != 0) {\n\t\t\todd_product *= last_digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\t\
    return odd_product;", "\tlong temp = n;\n\tlong odd_digits = 1;\n\tlong digit;\n\
    \twhile (temp > 0) {\n\t\tdigit = temp % 10;\n\t\tif (digit % 2 != 0) {\n\t\t\t\
    odd_digits *= digit;\n\t\t}\n\t\ttemp /= 10;\n\t}\n\treturn odd_digits;", "  //\
    \ Your code here\n  int count = 0;\n  int oddCount = 0;\n  int product = 1;\n\
    \  if(n < 0){\n    return 0;\n  }\n  for(int i = 0; n > 0; n = n/10){\n    int\
    \ digit = n % 10;\n    count++;\n    if(digit % 2 != 0){\n      oddCount++;\n\
    \      product *= digit;\n    }\n  }\n  if(oddCount == 0){\n    return 0;\n  }\n\
    \  return product;", "  // YOUR CODE HERE\n  long count=0;\n  long product=1;\n\
    \  while(n>0){\n    if((n%10)%2!=0){\n      product=product*(n%10);\n      count++;\n\
    \    }\n    n=n/10;\n  }\n  if(count==0){\n    return 0;\n  }\n  else{\n    return\
    \ product;\n  }", "    long prod = 1;\n    while (n > 0) {\n        long digit\
    \ = n % 10;\n        if (digit % 2 == 1) {\n            prod *= digit;\n     \
    \   }\n        n /= 10;\n    }\n    return prod;", "\tlong prod = 1;\n\tif (n\
    \ == 0)\n\t\treturn 0;\n\twhile (n) {\n\t\tif (n % 2 != 0)\n\t\t\tprod *= n %\
    \ 10;\n\t\tn /= 10;\n\t}\n\treturn prod;", "    long result = 1;\n    for (long\
    \ x = n; x > 0; x /= 10) {\n        long d = x % 10;\n        if (d % 2 != 0)\
    \ {\n            result *= d;\n        }\n    }\n    return result;", "    //\
    \ your code here\n    long product=1;\n    if(n==0)return 0;\n    while(n>0){\n\
    \        if(n%2==1)product*=(n%10);\n        n/=10;\n    }\n    return product;",
  "  long digit=1;\n  while(n>0){\n    int x=n%10;\n    if(x%2!=0){\n      digit*=x;\n\
    \    }\n    n/=10;\n  }\n  return digit;", "    long prod = 1;\n    while (n >\
    \ 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n        \
    \    prod *= digit;\n        }\n        n /= 10;\n    }\n    return prod;", " \
    \ int res = 1;\n  while (n) {\n    int dig = n % 10;\n    n /= 10;\n    if (dig\
    \ % 2) res *= dig;\n  }\n  return res;", "    long prod = 1;\n    while (n > 0)\
    \ {\n        long d = n % 10;\n        if (d % 2 != 0) prod *= d;\n        n /=\
    \ 10;\n    }\n    return prod;", "    if (n == 0) return 0;\n    int res = 1;\n\
    \    while (n != 0) {\n        int last = n % 10;\n        if (last % 2 != 0)\
    \ res *= last;\n        n /= 10;\n    }\n    return res;", "    long product=1;\n\
    \    while(n>0){\n        if(n%2!=0){\n            product*=(n%10);\n        }\n\
    \        n/=10;\n    }\n    return product;", "  long product=1;\n  while(n>0){\n\
    \    long rem=n%10;\n    if(rem%2!=0){\n      product*=rem;\n    }\n    n/=10;\n\
    \  }\n  return product;", '  return 0;', "    long product = 1;\n    long remain;\n\
    \    while (n > 0) {\n        remain = n % 10;\n        if (remain % 2 != 0) {\n\
    \            product *= remain;\n        }\n        n /= 10;\n    }\n    return\
    \ product;", "  long long sum = 1;\n  while (n > 0) {\n    if (n % 2 != 0) {\n\
    \      sum *= n % 10;\n    }\n    n /= 10;\n  }\n  return sum;", "  long p=1;\n\
    \  if(n==0)\n    return 0;\n  while(n!=0){\n    long r=n%10;\n    if(r%2!=0)\n\
    \      p=p*r;\n    n=n/10;\n  }\n  return p;", "    int mult = 1;\n    while (n\
    \ > 0) {\n        int ld = n % 10;\n        if (ld % 2 == 1) {\n            mult\
    \ *= ld;\n        }\n        n /= 10;\n    }\n    return mult;", "    long result\
    \ = 1;\n    while (n > 0) {\n        if (n % 2 != 0) {\n            result *=\
    \ n % 10;\n        }\n        n /= 10;\n    }\n    return result;", "    std::vector<int>\
    \ v;\n    long sum = 0;\n    while (n > 0) {\n        v.push_back(n % 10);\n \
    \       n /= 10;\n    }\n    for (int i = 0; i < v.size(); i++) {\n        if\
    \ (v[i] % 2 == 1) {\n            sum += v[i];\n        }\n    }\n    return sum;",
  "  long result = 1;\n  // 0. Handle n == 0 and n == 1.\n  if (n == 0) {\n    return\
    \ 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  // 1. Keep dividing n by 10\
    \ until you are left with less than 10.\n  while (n > 9) {\n    long remainder\
    \ = n % 10;\n    // 2. If the remainder is odd, multiply it with result.\n   \
    \ if (remainder % 2 != 0) {\n      result *= remainder;\n    }\n    // 3. Divide\
    \ n by 10.\n    n /= 10;\n  }\n  // 4. Check whether n is odd or even.\n  if (n\
    \ % 2 != 0) {\n    result *= n;\n  }\n  return result;", "  long odd = 1;\n  while\
    \ (n > 0) {\n    long digit = n % 10;\n    if (digit % 2 == 1) {\n      odd *=\
    \ digit;\n    }\n    n /= 10;\n  }\n  return odd;", "    if (n <= 0) {\n     \
    \   return 0;\n    }\n    if (n % 2 == 1) {\n        return n % 10 * digits(n\
    \ / 10);\n    }\n    return digits(n / 10);", "  std::vector<int> vect;\n  long\
    \ sum = 1;\n  while (n > 0) {\n    int temp = n % 10;\n    if (temp % 2 != 0)\
    \ {\n      vect.push_back(temp);\n    }\n    n = n / 10;\n  }\n  for (int i =\
    \ 0; i < vect.size(); i++) {\n    sum = sum * vect[i];\n  }\n  return sum;", " \
    \   long product = 1;\n    while (n) {\n        long last = n % 10;\n        if\
    \ (last % 2 == 1) {\n            product *= last;\n        }\n        n /= 10;\n\
    \    }\n    return product;", "    long lastDigit, result = 1;\n    while (n >\
    \ 0) {\n        lastDigit = n % 10;\n        if (lastDigit % 2 != 0) {\n     \
    \       result *= lastDigit;\n        }\n        n /= 10;\n    }\n    return result;",
  "  if (n < 0) {\n    n = -n;\n  }\n  long sum = 1;\n  while (n > 0) {\n    long\
    \ digit = n % 10;\n    if (digit % 2 != 0) {\n      sum *= digit;\n    }\n   \
    \ n /= 10;\n  }\n  return sum;", "  long oddDigitsProduct = 1;\n  long rem;\n\
    \  while (n > 0) {\n    rem = n % 10;\n    if (rem % 2 == 1) {\n      oddDigitsProduct\
    \ *= rem;\n    }\n    n /= 10;\n  }\n  return oddDigitsProduct;", "  long sum=1;\n\
    \  while(n){\n    if(n%2){\n      sum *= (n%10);\n    }\n    n /= 10;\n  }\n \
    \ return sum;", "\tlong prod = 1;\n\tlong digit;\n\twhile (n > 0) {\n\t\tdigit\
    \ = n % 10;\n\t\tif (digit % 2 == 1) {\n\t\t\tprod *= digit;\n\t\t}\n\t\tn /=\
    \ 10;\n\t}\n\treturn prod;", "    // set sign to record the sign of the number\n\
    \    int sign = 1;\n    if (n < 0) {\n        n = n * -1;\n        sign = -1;\n\
    \    }\n    long odd_product = 1;\n    // initialize boolean flag to false\n \
    \   bool is_odd = false;\n    while (n > 0) {\n        int d = n % 10;\n     \
    \   if (d % 2 != 0) {\n            is_odd = true;\n            odd_product *=\
    \ d;\n        }\n        n = n / 10;\n    }\n    // take the sign into account\n\
    \    return odd_product * sign;", "  long prod = 1;\n  while (n > 0) {\n    long\
    \ d = n % 10;\n    if (d % 2 != 0) {\n      prod *= d;\n    }\n    n /= 10;\n\
    \  }\n  return prod;", "    long prod = 1;\n    while (n > 0) {\n        long\
    \ r = n % 10;\n        if (r % 2 == 1) prod *= r;\n        n /= 10;\n    }\n \
    \   return prod;", "\t// Initialize product.\n\tlong product = 1;\n\t// While\
    \ n is greater than 0, we'll check if the rightmost digit is odd.\n\t// If so,\
    \ we'll multiply it with product.\n\t// We'll divide n by 10 to remove the rightmost\
    \ digit.\n\twhile (n > 0) {\n\t\tif (n % 2 != 0) {\n\t\t\tproduct *= n % 10;\n\
    \t\t}\n\t\tn /= 10;\n\t}\n\treturn product;", "    if (n <= 0) return 0;\n   \
    \ long last_digit = n % 10;\n    return last_digit % 2 == 0 ? digits(n / 10) :\
    \ last_digit * digits(n / 10);", "    long prod = 1;\n    for (long x = n; x !=\
    \ 0; x /= 10) {\n        if (x % 2 == 1) {\n            prod *= x % 10;\n    \
    \    }\n    }\n    return prod;", "  long result = 1;\n  while (n > 0) {\n   \
    \ long lastDigit = n % 10;\n    if (lastDigit % 2 != 0) {\n      result *= lastDigit;\n\
    \    }\n    n /= 10;\n  }\n  return result;", "  //Your code here\n  long a =\
    \ 0;\n  while(n > 0){\n    int x = n % 10;\n    if(x%2 != 0){\n      a = x * a;\n\
    \    }\n    n = n / 10;\n  }\n  return a;", "    long product = 1;\n    while\
    \ (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0)\n     \
    \       product *= digit;\n        n /= 10;\n    }\n    return product;", "  //\
    \ Your code here\n  long ans = 1;\n  while(n>0){\n    if(n%2){\n      ans *= n%10;\n\
    \    }\n    n /= 10;\n  }\n  return ans;", "  // your code here\n  long prod =\
    \ 1;\n  while(n > 0){\n    long curr = n % 10;\n    if(curr % 2 != 0){\n     \
    \ prod *= curr;\n    }\n    n /= 10;\n  }\n  return prod;", "\tif (n < 10) {\n\
    \t\tif (n % 2 != 0) {\n\t\t\treturn n;\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\
    \t}\n\t}\n\telse {\n\t\tif (n % 2 != 0) {\n\t\t\treturn n % 10 * digits(n / 10);\n\
    \t\t}\n\t\telse {\n\t\t\treturn digits(n / 10);\n\t\t}\n\t}", "    long result\
    \ = 1;\n    while (n > 0) {\n        long ld = n % 10;\n        if (ld % 2 !=\
    \ 0) {\n            result *= ld;\n        }\n        n /= 10;\n    }\n    return\
    \ result;", "    // your code here\n    int answer = 1;\n    while(n != 0){\n\
    \      int temp = n % 10;\n      if(temp % 2 != 0){\n        answer *= temp;\n\
    \      }\n      n /= 10;\n    }\n    return answer;", "    if (n == 0) {\n   \
    \     return 0;\n    }\n    long ans = 0;\n    if (n % 2 == 1) {\n        ans\
    \ = n % 10;\n    }\n    return ans + 10 * digits(n / 10);", "  long ans = 1;\n\
    \  while (n > 0) {\n    int digit = n % 10;\n    if (digit % 2 != 0)\n      ans\
    \ *= digit;\n    n /= 10;\n  }\n  return ans;", "  // take out the last digit\n\
    \  // if it's odd multiply it with the result\n  // divide the number by 10\n\
    \  // repeat\n\n  // take out the last digit\n  // add it to the result\n  //\
    \ multiply the result by 10\n  // repeat\n\n  // take out the last digit\n  //\
    \ add it to the result\n  // divide the number by 10\n  // repeat\n\n  // take\
    \ out the last digit\n  // add it to the result\n  // divide the number by 10\n\
    \  // repeat\n\n  // take out the last digit\n  // add it to the result\n  //\
    \ divide the number by 10\n  // repeat\n\n  // take out the last digit\n  // add\
    \ it to the result\n  // divide the number by 10\n  // repeat\n\n  // take out\
    \ the last digit\n  // add it to the result\n  // divide the number by 10\n  //\
    \ repeat\n\n  // take out the last digit\n  // add it to the result\n  // divide\
    \ the number by 10\n  // repeat\n\n  // take out the last digit\n  // add it to\
    \ the result\n  // divide the number by 10\n  // repeat\n\n  // take out the last\
    \ digit\n  // add it to the result\n  // divide the number by 10\n  // repeat\n\
    \n  // take out the last digit\n  // add it to the result\n  // divide the number\
    \ by 10\n  // repeat\n\n  // take out the last digit\n  // add it to the result\n\
    \  // divide the number by 10\n  // repeat\n\n  // take out the last digit\n \
    \ // add it to the result\n  // divide the number by 10\n  // repeat\n\n  // take\
    \ out the last digit\n  // add it to the result\n  // divide the number by 10\n\
    \  // repeat\n\n  // take out the last digit\n  // add it to the result\n  //\
    \ divide the number by 10\n  // repeat\n\n  // take out the last digit\n  // add\
    \ it to the result\n  // divide the number by 10\n  // repeat\n\n  // take out\
    \ the last digit\n  // add it to the result\n  // divide the number by 10\n  //\
    \ repeat\n\n  // take out the last digit\n  // add it to the result\n  // divide\
    \ the number by 10\n  // repeat\n\n  // take", "  if (n < 10) {\n    if (n % 2\
    \ == 0)\n      return 0;\n    else\n      return n;\n  }\n  long ans = 1;\n  while\
    \ (n > 0) {\n    if (n % 2 != 0)\n      ans *= n % 10;\n    n /= 10;\n  }\n  return\
    \ ans;", "\tlong product = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\t\
    product *= n % 10;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn product;", "  long res\
    \ = 1;\n  while (n > 0) {\n    if (n % 2 != 0)\n      res *= n % 10;\n    n /=\
    \ 10;\n  }\n  return res;", "    long result = 1;\n    // your code here\n   \
    \ int digit = 0;\n    long rem = 0;\n    while(n > 0){\n        rem = n % 10;\n\
    \        if(rem % 2 != 0){\n            result *= rem;\n        }\n        n /=\
    \ 10;\n    }\n    return result;", "    // Declare a variable to hold the cumulative\
    \ total.\n    long total = 1;\n    // Declare a variable to hold the current digit.\n\
    \    long digit;\n    // Continue while n is greater than 0.\n    while (n > 0)\
    \ {\n        // Get the current digit by modulo dividing by 10.\n        digit\
    \ = n % 10;\n        // If the digit is odd...\n        if (digit % 2 != 0) {\n\
    \            // Multiply it with the cumulative total.\n            total *= digit;\n\
    \        }\n        // Divide n by 10 to move on to the next digit.\n        n\
    \ /= 10;\n    }\n    // Return the cumulative total.\n    return total;", "  \
    \  long r = 1;\n    while (n) {\n        if (n % 2) {\n            r *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    return r;", "    int count = 0;\n   \
    \ while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n  \
    \          if(count == 0){\n                count = digit;\n            }\n  \
    \          else{\n                count *= digit;\n            }\n        }\n\
    \        n /= 10;\n    }\n    return count;", "  assert(n > 0);\n  int sum = 1;\n\
    \  for (; n != 0; n /= 10) {\n    int i = n % 10;\n    if (i % 2 != 0) {\n   \
    \   sum *= i;\n    }\n  }\n  return sum;", "  long prod = 1;\n  while (n > 0)\
    \ {\n    long digit = n % 10;\n    if (digit % 2 == 1) {\n      prod *= digit;\n\
    \    }\n    n /= 10;\n  }\n  return prod;", "    int prod = 1;\n    int digit;\n\
    \    while (n != 0) {\n        digit = n % 10;\n        if (digit % 2 != 0) {\n\
    \            prod *= digit;\n        }\n        n /= 10;\n    }\n    return prod;",
  "  \n  long result = 1;\n  while (n != 0) {\n    long digit = n % 10;\n    if (digit\
    \ % 2 != 0) {\n      result *= digit;\n    }\n    n /= 10;\n  }\n  return result;",
  "    long product = 1;\n    while (n) {\n        int digit = n % 10;\n        if\
    \ (digit % 2 != 0) {\n            product *= digit;\n        }\n        n /= 10;\n\
    \    }\n    return product;", "  int prod = 1;\n  int i = 0;\n  int s = 0;\n \
    \ int t = n;\n  while (t!=0) {\n    s = t%10;\n    t = t/10;\n    if (s%2!=0)\
    \ {\n      prod = prod*s;\n    }\n  }\n  return prod;", "    if (n == 0) return\
    \ 0;\n    long product = 1;\n    while (n != 0) {\n        long digit = n % 10;\n\
    \        if (digit % 2 != 0) {\n            product *= digit;\n        }\n   \
    \     n /= 10;\n    }\n    return product;", "    int ans = 1;\n    int r;\n \
    \   while(n > 0) {\n        r = n % 10;\n        if(r % 2 == 1)\n            ans\
    \ *= r;\n        n /= 10;\n    }\n    return ans;", "    long odd_prod = 1;\n\
    \    int digit;\n    while (n != 0) {\n        digit = n % 10;\n        if (digit\
    \ % 2 != 0) {\n            odd_prod *= digit;\n        }\n        n /= 10;\n \
    \   }\n    return odd_prod;", '  return 0;', "    long r = 1;\n    while (n >\
    \ 0) {\n        long digit = n % 10;\n        if (digit % 2 == 1)\n          \
    \  r *= digit;\n        n /= 10;\n    }\n    return r;", "    long l = 0;\n  \
    \  long k = 0;\n    while (n > 0) {\n        l = n % 10;\n        n = n / 10;\n\
    \        if (l % 2 != 0) {\n            k = k * l;\n        }\n    }\n    return\
    \ k;", "  long res = 1;\n  while (n>0) {\n    if ((n%10)%2 != 0) {\n      res\
    \ *= (n%10);\n    }\n    n /= 10;\n  }\n  return res;", "    long result = 1;\n\
    \    while (n) {\n        if (n % 2 == 1) {\n            result *= n % 10;\n \
    \       }\n        n /= 10;\n    }\n    return result;", "    long prod = 1;\n\
    \    while (n != 0) {\n        long lastDigit = n % 10;\n        if (lastDigit\
    \ % 2 != 0) {\n            prod *= lastDigit;\n        }\n        n /= 10;\n \
    \   }\n    return prod;", "  // your code here\n  long product = 1;\n  while(n>0){\n\
    \    long rem = n%10;\n    if(rem%2 == 1){\n      product = product*rem;\n   \
    \ }\n    n = n/10;\n  }\n  return product;", "  // Your code here\n  long counter\
    \ = 1;\n  while(n>0){\n    int digit = n%10;\n    if(digit%2!=0){\n      counter*=digit;\n\
    \    }\n    n/=10;\n  }\n  return counter;", "  int tot = 1;\n  int rem;\n  for(;n!=0;){\n\
    \    rem = n%10;\n    if(rem%2 != 0){\n      tot = tot*rem;\n    }\n    n = n/10;\n\
    \  }\n  return tot;", "  if (n == 0) return 0;\n  long p = n % 10;\n  if (p &\
    \ 1) {\n    return p * digits(n / 10);\n  } else {\n    return digits(n / 10);\n\
    \  }", "    long r = 1;\n    while (n) {\n        if (n % 2 == 1) {\n        \
    \    r *= n % 10;\n        }\n        n /= 10;\n    }\n    return r;", "\tlong\
    \ sum = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tsum *= n % 10;\n\t\
    \t}\n\t\tn /= 10;\n\t}\n\treturn sum;", "\tint prod = 1;\n\tlong copy = n;\n\t\
    while(copy != 0) {\n\t\tif(copy % 2 != 0)\n\t\t\tprod *= copy % 10;\n\t\tcopy\
    \ /= 10;\n\t}\n\treturn prod;", "  long product = 1;\n  while (n != 0) {\n   \
    \ if (n % 2 != 0) {\n      product *= n % 10;\n    }\n    n /= 10;\n  }\n  return\
    \ product;", "    long prod = 1;\n    while (n > 0) {\n        long lastDigit\
    \ = n % 10;\n        if (lastDigit % 2 != 0) {\n            prod *= lastDigit;\n\
    \        }\n        n /= 10;\n    }\n    return prod;", "    int ans = 1;\n  \
    \  while(n != 0) {\n        int rem = n % 10;\n        if(rem % 2 != 0) {\n  \
    \          ans *= rem;\n        }\n        n /= 10;\n    }\n    return ans;",
  "\tlong odd_digits = 1;\n\tlong current_digit;\n\twhile (n > 0) {\n\t\tcurrent_digit\
    \ = n % 10;\n\t\tif (current_digit % 2 != 0) {\n\t\t\todd_digits *= current_digit;\n\
    \t\t}\n\t\tn /= 10;\n\t}\n\treturn odd_digits;", "    if (n <= 0) {\n        return\
    \ 0;\n    }\n    long product = 1;\n    while (n != 0) {\n        long digit =\
    \ n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n    \
    \    }\n        n /= 10;\n    }\n    return product;", "    // YOUR CODE HERE\n\
    \    long odd = 1;\n    int digit;\n    while(n > 0){\n        digit = n % 10;\n\
    \        if(digit % 2 != 0){\n            odd *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    return odd;", "\tlong y = 0;\n\twhile (n != 0) {\n\t\tlong\
    \ x = n % 10;\n\t\tif (x % 2 != 0) {\n\t\t\ty = y * 10 + x;\n\t\t}\n\t\tn = n\
    \ / 10;\n\t}\n\treturn y;", "    // Write your code here\n    long product = 1;\n\
    \    if(n <= 0)\n    {\n        product = 0;\n    }\n    else\n    {\n       \
    \ int rem = 0;\n        while(n > 0)\n        {\n            rem = n % 10;\n \
    \           if(rem % 2 != 0)\n            {\n                product *= rem;\n\
    \            }\n            n /= 10;\n        }\n    }\n    return product;",
  "  // Have the function return 0 if all digits are even\n  if (n <= 0) {\n    return\
    \ 0;\n  }\n\n  // Break the number into its digits\n  std::vector<int> individual_digits;\n\
    \  while (n > 0) {\n    int digit = n % 10;\n    n /= 10;\n    individual_digits.push_back(digit);\n\
    \  }\n\n  // Go through each digit, if the digit is odd, add it to the sum\n \
    \ long odd_digits_sum = 1;\n  for (std::vector<int>::iterator it = individual_digits.begin();\
    \ it != individual_digits.end(); ++it) {\n    if (*it % 2 != 0) {\n      odd_digits_sum\
    \ *= *it;\n    }\n  }\n\n  return odd_digits_sum;", "\tlong product = 1;\n\twhile\
    \ (n != 0) {\n\t\tlong digit = n % 10;\n\t\tif (digit % 2 != 0) {\n\t\t\tproduct\
    \ *= digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn product;", "    // YOUR CODE HERE\n\
    \    long count = 1;\n    long m = n;\n    while (m != 0) {\n        long x =\
    \ m % 10;\n        if (x % 2 != 0) {\n            count *= x;\n        }\n   \
    \     m /= 10;\n    }\n    return count;", "    long product = 1;\n    if (n <\
    \ 10)\n        if (n % 2 == 0)\n            return 0;\n        else\n        \
    \    return n;\n    else {\n        int digit = n % 10;\n        if (digit % 2\
    \ == 0)\n            return digits(n / 10);\n        else\n            return\
    \ digit * digits(n / 10);\n    }", "    long product=1;\n    if(n==0) return product;\n\
    \    if(n<0)\n    {\n        n = -n;\n    }\n    while(n>0)\n    {\n        if(n%2==1)\n\
    \        {\n            product *= n%10;\n        }\n        n = n/10;\n    }\n\
    \    return product;", "    long prod = 1;\n    while (n != 0) {\n        long\
    \ digit = n % 10;\n        if (digit % 2 != 0) {\n            prod *= digit;\n\
    \        }\n        n /= 10;\n    }\n    return prod;", "    long product = 1;\n\
    \    while (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 == 1)\
    \ {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return\
    \ product;", "  long product = 1;\n  while (n > 0) {\n    long d = n % 10;\n \
    \   if (d % 2 != 0) {\n      product *= d;\n    }\n    n /= 10;\n  }\n  return\
    \ product;", "    assert(n > 0);\n    long sum = 1;\n    long digit = 0;\n   \
    \ while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n  \
    \          sum *= digit;\n        }\n        n /= 10;\n    }\n    return sum;",
  "    // we will use this to accumulate the product\n    long product = 1;\n    //\
    \ we need to iterate over each digit of n\n    // (we will do this by extracting\
    \ each digit, from last to first)\n    while (n > 0) {\n        // extract the\
    \ last digit\n        long last_digit = n % 10;\n        // update n to remove\
    \ the last digit\n        n = n / 10;\n        // check if the last digit is odd\n\
    \        if (last_digit % 2 == 1) {\n            // last digit is odd, update\
    \ the product\n            product = product * last_digit;\n        }\n    }\n\
    \    // don't forget to return the product\n    return product;", "\tlong product\
    \ = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tproduct *= n % 10;\n\t\
    \t}\n\t\tn /= 10;\n\t}\n\treturn product;", "    long product = 1;\n    long i;\n\
    \    while (n > 0) {\n        i = n % 10;\n        if (i % 2 != 0) {\n       \
    \     product *= i;\n        }\n        n /= 10;\n    }\n    return product;",
  "    long prod = 1;\n    for (; n > 0; n /= 10) {\n        long tmp = n % 10;\n\
    \        if (tmp % 2 == 1) {\n            prod *= tmp;\n        }\n    }\n   \
    \ return prod;", "\tlong result = 1;\n\tlong digit = 0;\n\twhile (n) {\n\t\tdigit\
    \ = n % 10;\n\t\tif (digit % 2 != 0) {\n\t\t\tresult *= digit;\n\t\t}\n\t\tn /=\
    \ 10;\n\t}\n\treturn result;", "  long x=1;\n  while(n){\n    int y=n%10;\n  \
    \  if(y%2!=0){\n      x*=y;\n    }\n    n/=10;\n  }\n  return x;", "    if (n\
    \ < 10) {\n        if (n % 2 == 0)\n            return 0;\n        else\n    \
    \        return n;\n    }\n    else {\n        if (n % 2 == 0)\n            return\
    \ digits(n / 10);\n        else\n            return digits(n / 10) * (n % 10);\n\
    \    }", "    int prod = 1;\n    while(n > 0) {\n        int digit = n % 10;\n\
    \        if(digit % 2 == 1) {\n            prod *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    return prod;", "  // Your code here\n  long res = 1;\n\
    \  if(n == 0) return 0;\n  while(n > 0){\n      if(n % 2 != 0) res *= n % 10;\n\
    \      n /= 10;\n  }\n  return res;", "    long product = 1;\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    while (n > 0) {\n        if (n % 2 == 1) {\n\
    \            product *= n % 10;\n        }\n        n /= 10;\n    }\n    return\
    \ product;", "  if (n == 0) {\n    return 0;\n  }\n  return (n % 10 % 2 != 0 ?\
    \ n % 10 : 1) * digits(n / 10);", "   long prod=1;\n   while(n!=0){\n       long\
    \ rem=n%10;\n       if(rem%2==1){\n           prod=prod*rem;\n       }\n     \
    \  n=n/10;\n   }\n   return prod;", "    long res = 1;\n    while (n) {\n    \
    \    int r = n % 10;\n        if (r % 2 != 0) {\n            res *= r;\n     \
    \   }\n        n /= 10;\n    }\n    return res;", "    long res = 1;\n    while\
    \ (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n   \
    \         res *= digit;\n        }\n        n /= 10;\n    }\n    return res;",
  "    long oddDigitSum = 0;\n    while (n) {\n        long digit = n % 10;\n    \
    \    if (digit % 2 == 1) {\n            oddDigitSum += digit;\n        }\n   \
    \     n /= 10;\n    }\n    return oddDigitSum;", "  long prod = 1;\n  while (n\
    \ > 0) {\n    long digit = n % 10;\n    if (digit % 2 == 1) prod *= digit;\n \
    \   n /= 10;\n  }\n  return prod;", "  assert(n > 0);\n  int sum = 1;\n  while\
    \ (n != 0) {\n    int rem = n % 10;\n    if (rem % 2 != 0) {\n      sum *= rem;\n\
    \    }\n    n /= 10;\n  }\n  return sum;", "  long product = 1;\n  while (n >\
    \ 0) {\n    if (n % 2 == 1) {\n      product *= n % 10;\n    }\n    n /= 10;\n\
    \  }\n  return product;", "    long result = 1;\n    while (n > 0) {\n       \
    \ long digit = n % 10;\n        if (digit % 2 == 1) {\n            result *= digit;\n\
    \        }\n        n /= 10;\n    }\n    return result;", "  assert(n > 0);\n\
    \  int result = 1;\n  while (n != 0) {\n    int n1 = n % 10;\n    if (n1 % 2 !=\
    \ 0) {\n      result *= n1;\n    }\n    n /= 10;\n  }\n  return result;", "  if\
    \ (n == 0) return 0;\n  if (n % 2 == 1) return n % 10 * digits(n / 10);\n  return\
    \ digits(n / 10);", "    // YOUR CODE HERE\n    long prod = 1;\n    while(n>0){\n\
    \        long curr = n%10;\n        if(curr%2==1){\n            prod*=curr;\n\
    \        }\n        n/=10;\n    }\n    return prod;", "  if (n <= 0) {\n    return\
    \ 0;\n  }\n  if (n % 2 != 0) {\n    long result = n % 10;\n    n = n / 10;\n \
    \   return result * digits(n);\n  }\n  n = n / 10;\n  return digits(n);", "  \
    \  long res = 1;\n    while (n > 0) {\n        long temp = n % 10;\n        if\
    \ (temp % 2 == 1)\n            res *= temp;\n        n /= 10;\n    }\n    return\
    \ res;", "  long long res = 1;\n  for (; n; n /= 10) {\n    long long temp = n\
    \ % 10;\n    if (temp % 2 != 0) {\n      res *= temp;\n    }\n  }\n  return res;",
  "  long product = 1;\n  // for (; n != 0; n = n / 10) {\n  //   if (n % 2 != 0)\
    \ {\n  //     product *= n % 10;\n  //   }\n  // }\n  // return product;\n  //\
    \ version 2\n  // for (long i = n; i != 0; i = i / 10) {\n  //   long rightmost\
    \ = i % 10;\n  //   if (rightmost % 2 != 0) {\n  //     product *= rightmost;\n\
    \  //   }\n  // }\n  // return product;\n  // version 3\n  while (n != 0) {\n\
    \    long rightmost = n % 10;\n    if (rightmost % 2 != 0) {\n      product *=\
    \ rightmost;\n    }\n    n = n / 10;\n  }\n  return product;", "  int prod = 1;\n\
    \  while (n != 0) {\n    int last_digit = n % 10;\n    if (last_digit % 2 != 0)\
    \ {\n      prod *= last_digit;\n    }\n    n /= 10;\n  }\n  return prod;", " \
    \   long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n   \
    \     if (digit % 2 == 1) {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    return product;", "    long odd_digits_product = 1;\n\
    \    long digit;\n    while (n != 0) {\n        digit = n % 10;\n        if (digit\
    \ % 2 != 0) {\n            odd_digits_product *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    return odd_digits_product;", "\tlong result = 1;\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\twhile (n != 0) {\n\t\t\tif (n % 2\
    \ != 0) {\n\t\t\t\tresult *= n % 10;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\treturn\
    \ result;\n\t}", "  long tmp=n;\n  long dig1;\n  long odd = 1;\n  while(tmp>0){\n\
    \    dig1 = tmp%10;\n    if(dig1%2!=0){\n      odd = odd*dig1;\n    }\n    tmp\
    \ = tmp/10;\n  }\n  return odd;", "\tint sum = 1;\n\twhile (n != 0) {\n\t\tint\
    \ rem = n % 10;\n\t\tif (rem % 2 != 0) {\n\t\t\tsum *= rem;\n\t\t}\n\t\tn /= 10;\n\
    \t}\n\treturn sum;", "    long result = 1;\n    while (n > 0) {\n        long\
    \ digit = n % 10;\n        if (digit % 2 == 1) {\n            result *= digit;\n\
    \        }\n        n /= 10;\n    }\n    return result;", "\tlong result = 1;\n\
    \twhile (n != 0) {\n\t\tint current_digit = n % 10;\n\t\tif (current_digit % 2\
    \ != 0) {\n\t\t\tresult *= current_digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn\
    \ result;", "\tlong ret = 1;\n\twhile (n > 0) {\n\t\tlong d = n % 10;\n\t\tif\
    \ (d % 2 == 1)\n\t\t\tret *= d;\n\t\tn /= 10;\n\t}\n\treturn ret;", "    int result\
    \ = 1;\n    int temp = n;\n    while (temp > 0) {\n        int digit = temp %\
    \ 10;\n        if (digit % 2 != 0) {\n            result *= digit;\n        }\n\
    \        temp /= 10;\n    }\n    return result;", "  if (n == 0) return 0;\n \
    \ if (n % 2 != 0) return n % 10 * digits(n / 10);\n  return digits(n / 10);",
  "  assert(n > 0);\n  int product = 1;\n  while (n != 0) {\n    int digit = n % 10;\n\
    \    if (digit % 2 != 0) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n\
    \  return product;", "  long total = 1;\n  while (n > 0) {\n    long digit = n\
    \ % 10;\n    if (digit % 2 != 0) {\n      total *= digit;\n    }\n    n /= 10;\n\
    \  }\n  return total;", "    if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ % 2 != 0) {\n        return (n % 10) * digits(n / 10);\n    }\n    return digits(n\
    \ / 10);", '  return (n < 10) ? ((n & 1) ? n : 0) : ((n % 10) & 1) ? digits(n
    / 10) * (n % 10) : digits(n / 10);', "    assert(n > 0);\n    long prod = 1;\n\
    \    while (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 == 1)\
    \ {\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return\
    \ prod;", "  long result = 1;\n  while (n > 0) {\n    long last = n % 10;\n  \
    \  if (last % 2 != 0) {\n      result *= last;\n    }\n    n /= 10;\n  }\n  return\
    \ result;", "    long product = 1;\n    while (n) {\n        if (n % 2) {\n  \
    \          product *= n % 10;\n        }\n        n /= 10;\n    }\n    return\
    \ product;", "  long result = 1;\n  while (n) {\n    if (n % 2 == 1)\n      result\
    \ *= n % 10;\n    n /= 10;\n  }\n  return result;", "    long product = 1;\n \
    \   while (n > 0) {\n        long x = n % 10;\n        if (x % 2 != 0) {\n   \
    \         product *= x;\n        }\n        n /= 10;\n    }\n    return product;",
  "   long prod = 1;\n   while (n > 0) {\n      if (n % 2 == 1) {\n         prod *=\
    \ n % 10;\n      }\n      n /= 10;\n   }\n   return prod;", "  assert(n > 0);\n\
    \  long odd_digits = 1;\n  int length = std::to_string(n).length();\n  int array[length];\n\
    \  long temp = n;\n  while (temp != 0) {\n    long rem = temp % 10;\n    if (rem\
    \ % 2 != 0) {\n      odd_digits *= rem;\n    }\n    temp /= 10;\n  }\n  return\
    \ odd_digits;", "    long result = 1;\n    for (int i = 0; i < 10; i++) {\n  \
    \      if (n % 10 % 2 != 0) {\n            result *= n % 10;\n        }\n    \
    \    n /= 10;\n    }\n    return result;", "    std::vector<int> string_digits;\n\
    \    long copy = n;\n    while (copy >= 1) {\n        string_digits.push_back(copy\
    \ % 10);\n        copy /= 10;\n    }\n    std::reverse(string_digits.begin(),\
    \ string_digits.end());\n    long result = 1;\n    for (auto n : string_digits)\
    \ {\n        if (n % 2 == 1) {\n            result *= n;\n        }\n    }\n \
    \   return result;", "    long product = 1;\n    if (n < 10) {\n        if (n\
    \ % 2 != 0) {\n            return n;\n        }\n        else {\n            return\
    \ 0;\n        }\n    }\n    while (n != 0) {\n        if (n % 10 % 2 != 0) {\n\
    \            product *= n % 10;\n        }\n        n /= 10;\n    }\n    return\
    \ product;", "    long count = 0;\n    while(n > 0){\n        int digit = n %\
    \ 10;\n        if(digit % 2 != 0){\n            count += digit;\n        }\n \
    \       n /= 10;\n    }\n    return count;", "  long prod = 1;\n  while (n !=\
    \ 0) {\n    long r = n % 10;\n    if (r % 2 != 0) {\n      prod *= r;\n    }\n\
    \    n /= 10;\n  }\n  return prod;", "\tlong total = 1;\n\twhile (n > 0) {\n\t\
    \tif (n % 2 == 1) {\n\t\t\ttotal *= n % 10;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn\
    \ total;", "  long prod = 1;\n  while (n > 0) {\n    long last = n % 10;\n   \
    \ if (last % 2 != 0) {\n      prod *= last;\n    }\n    n /= 10;\n  }\n  return\
    \ prod;", "\tlong a = 0;\n\tif (n < 0) {\n\t\ta = -1;\n\t\tn = -n;\n\t}\n\tint\
    \ count = 0;\n\twhile (n > 0) {\n\t\tint x = n % 10;\n\t\tif (x % 2 != 0) {\n\t\
    \t\tcount++;\n\t\t\ta = a * 10 + x;\n\t\t}\n\t\tn = n / 10;\n\t}\n\tint b = 0;\n\
    \tfor (int i = 0; i < count; i++) {\n\t\tb = b * 10 + a % 10;\n\t\ta = a / 10;\n\
    \t}\n\treturn b;", "    if (n < 10) {\n        if (n % 2 == 0) {\n           \
    \ return 0;\n        } else {\n            return n;\n        }\n    } else {\n\
    \        if (n % 2 == 0) {\n            return digits(n / 10);\n        } else\
    \ {\n            return (n % 10) * digits(n / 10);\n        }\n    }", "    long\
    \ pro=1;\n    long rem=0;\n    if(n==0)\n    {\n        return 0;\n    }\n   \
    \ else\n    {\n        while(n!=0)\n        {\n            rem=n%10;\n       \
    \     if(rem%2!=0)\n            {\n                pro=pro*rem;\n            }\n\
    \            n=n/10;\n        }\n        return pro;\n    }", "  if (n == 0) {\n\
    \    return 0;\n  }\n  else {\n    return (n % 10 % 2 == 1) ? (n % 10 * digits(n\
    \ / 10)) : digits(n / 10);\n  }", "\tif (n < 10) {\n\t\tif (n % 2 == 0)\n\t\t\t\
    return 0;\n\t\telse\n\t\t\treturn n;\n\t}\n\tlong res = digits(n / 10);\n\tif\
    \ (n % 2 == 0)\n\t\treturn res;\n\telse\n\t\treturn res * (n % 10);", "    long\
    \ result = 1;\n    while (n > 0) {\n        long r = n % 10;\n        if (r %\
    \ 2 == 1) {\n            result *= r;\n        }\n        n /= 10;\n    }\n  \
    \  return result;", "  long odd_product = 1;\n  while (n > 0) {\n    if (n % 2\
    \ != 0) {\n      odd_product *= n % 10;\n    }\n    n /= 10;\n  }\n  return odd_product;",
  "    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n    \
    \    if (digit % 2 == 1) {\n            product *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    return product;", "  // your code here\n  int sum = 1;\n\
    \  if(n==0)\n  {\n    return 0;\n  }\n  while(n!=0)\n  {\n    int r = n%10;\n\
    \    if(r%2!=0)\n    {\n      sum*=r;\n    }\n    n/=10;\n  }\n  return sum;",
  "  long count = 0;\n  while (n) {\n    int digit = n % 10;\n    if (digit % 2 !=\
    \ 0) {\n      count = count * 10 + digit;\n    }\n    n /= 10;\n  }\n  return\
    \ count;"]
stop_tokens:
- "\n}"
