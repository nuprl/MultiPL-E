language: cpp
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        for(long\
    \ j = i+1; j <= n; j++)\n        {\n            for(long k = j+1; k <= n; k++)\n\
    \            {\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) %\
    \ 3 == 0)\n                {\n                    sum++;\n                }\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(1 <= n <= 10^5);\n    long long a[n];\n    a[0] = 1;\n    long\
    \ long sum = 0;\n    for(long i = 1; i < n; i++) {\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    long maxsum = sum;\n    long i = 0;\n \
    \   long long maxsum = 0;\n    long j = 1;\n    long long cursum = 0;\n    long\
    \ k = 2;\n    while(k < n) {\n        if((sum - cursum) % 3 == 0) {\n        \
    \    if(maxsum < cursum) {\n                maxsum = cursum;\n            }\n\
    \        }\n        cursum += a[k];\n        k++;\n    }\n    return maxsum;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5299o02s.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmp5299o02s.cpp:24:15: error: conflicting declaration \u2018long long\
    \ int maxsum\u2019\n   24 |     long long maxsum = 0;\n      |               ^~~~~~\n\
    /tmp/tmp5299o02s.cpp:22:10: note: previous declaration as \u2018long int maxsum\u2019\
    \n   22 |     long maxsum = sum;\n      |          ^~~~~~\n"
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long i, j, k, t=0;\n    std::vector<long> a(n);\n    for(i=0; i<n;\
    \ i++) {\n        a[i] = i*i - i + 1;\n    }\n    // std::cout << \"vector a:\
    \ \";\n    // for(i=0; i<n; i++) {\n    //     std::cout << a[i] << \" \";\n \
    \   // }\n    // std::cout << std::endl;\n    for(i=0; i<n-2; i++) {\n       \
    \ for(j=i+1; j<n-1; j++) {\n            for(k=j+1; k<n; k++) {\n             \
    \   if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    t++;\n          \
    \      }\n            }\n        }\n    }\n    return t;\n}\nint main() {\n  \
    \  auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n   \
    \ assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpi7p3v1ko: /tmp/tmpi7p3v1ko.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 1);\n    long res = 0;\n    for (long i = 1; i < n; i++)\
    \ {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j +\
    \ 1; k < n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k\
    \ - k + 1) % 3 == 0) {\n                    res++;\n                }\n      \
    \      }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpokl188i6: /tmp/tmpokl188i6.cpp:30: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int a[n];\n    int c=0;\n    for(int i=0;i<n;i++)\n    {\n       \
    \ a[i]=i*i-i+1;\n    }\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if((a[i]+a[j]+a[k])%3==0)\n                {\n                    c++;\n  \
    \              }\n            }\n        }\n    }\n    return c;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpsseb_n7a: /tmp/tmpsseb_n7a.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long* a = new long[n];\n    for(long i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n   \
    \     for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpt91cii8a: /tmp/tmpt91cii8a.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // write your code here\n    int count = 0;\n    for(int i = 1; i\
    \ < n; i++){\n        for(int j = i+1; j < n; j++){\n            for(int k = j+1;\
    \ k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) %\
    \ 3 == 0){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxcg7dpcp: /tmp/tmpxcg7dpcp.cpp:30: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here.\n    // Write your code here.\n    if(n==1){\n\
    \        return 0;\n    }\n    else if(n==2){\n        return 0;\n    }\n    else\
    \ if(n==3){\n        return 1;\n    }\n    else{\n        long sum=0;\n      \
    \  for(long i=1;i<n-1;i++){\n            for(long j=i+1;j<n;j++){\n          \
    \      sum = sum + (n-j);\n            }\n        }\n        return sum;\n   \
    \ }\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxa6lqwui: /tmp/tmpxa6lqwui.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113614
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int count=0;\n    std::vector<int> a;\n    for(int i=1;i<=n;i++){\n\
    \        a.push_back(i*i-i+1);\n    }\n    for(int i=0;i<a.size();i++){\n    \
    \    for(int j=i+1;j<a.size();j++){\n            for(int k=j+1;k<a.size();k++){\n\
    \                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong *a=new long[n];\n\tfor(long i=0;i<n;i++)\n\t{\n\t\ta[i]=i*i-i+1;\n\
    \t}\n\tlong counter=0;\n\tfor(long i=0;i<n;i++)\n\t{\n\t\tfor(long j=i+1;j<n;j++)\n\
    \t\t{\n\t\t\tfor(long k=j+1;k<n;k++)\n\t\t\t{\n\t\t\t\tif((a[i]+a[j]+a[k])%3==0)\n\
    \t\t\t\t{\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn counter;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpumiri86h: /tmp/tmpumiri86h.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v;\n    for(int i = 1; i <= n; i++) {\n        v.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k <\
    \ n; k++) {\n                long sum = v[i] + v[j] + v[k];\n                if(sum\
    \ % 3 == 0)\n                    count++;\n            }\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n  \
    \  assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\
    \                    count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return n - (n % 3);\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2z53xp_u: /tmp/tmp2z53xp_u.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v(n);\n    for(long p = 0; p < n; p++){\n      \
    \  v[p] = p * p - p + 1;\n    }\n    long count(0);\n    for(long p = 0; p < n;\
    \ p++){\n        for(long q = p + 1; q < n; q++){\n            for(long r = q\
    \ + 1; r < n; r++){\n                if((v[p] + v[q] + v[r]) % 3 == 0){++count;}\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpjbpwmeoc: /tmp/tmpjbpwmeoc.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqirjubz_: /tmp/tmpqirjubz_.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long ans = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp69jh57bb: /tmp/tmp69jh57bb.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> arr;\n    for(int i = 0; i < n; i++) {\n       \
    \ arr.push_back(i * i - i + 1);\n    }\n    int count = 0;\n    for(int i = 0;\
    \ i < n - 2; i++) {\n        for(int j = i + 1; j < n - 1; j++) {\n          \
    \  for(int k = j + 1; k < n; k++) {\n                if(arr[i] + arr[j] + arr[k]\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0bx2hezr: /tmp/tmp0bx2hezr.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long res = 0;\n    for (long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for (long i = 0;\
    \ i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n        \
    \    for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    res++;\n                }\n            }\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long res = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    res++;\n                }\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkgv03x9d: /tmp/tmpkgv03x9d.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong *a=new long[n];\n\tfor(long i=0;i<n;i++)\n\t{\n\t\ta[i]=i*i-i+1;\n\
    \t}\n\tlong count=0;\n\tfor(long i=0;i<n;i++)\n\t{\n\t\tfor(long j=i+1;j<n;j++)\n\
    \t\t{\n\t\t\tfor(long k=j+1;k<n;k++)\n\t\t\t{\n\t\t\t\tif((a[i]+a[j]+a[k])%3==0)\n\
    \t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tdelete[] a;\n    return count;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplgku2nya: /tmp/tmplgku2nya.cpp:36: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> arr;\n    long cnt = 0;\n    for(long i = 1; i <=\
    \ n; i++)\n        arr.push_back(i * i - i + 1);\n    for(long i = 0; i < n; i++)\n\
    \        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n         \
    \           cnt++;\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Create your vector\n    std::vector<long> a(n);\n    for (int i\
    \ = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    count++;\n                }\n     \
    \       }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdjad8l6o: /tmp/tmpdjad8l6o.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int a[n];\n    int val = 1;\n    for(int i = 0; i < n; i++) {\n  \
    \      a[i] = val;\n        val += 2;\n    }\n    int sum;\n    int count = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n\
    \            for(int k = j + 1; k < n; k++) {\n                sum = a[i] + a[j]\
    \ + a[k];\n                if(sum % 3 == 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpm8xx8_mv: /tmp/tmpm8xx8_mv.cpp:36: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k <\
    \ n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++)\n      \
    \  a[i] = i * i - i + 1;\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\n\
    \        for (long j = i + 1; j < n; j++)\n            for (long k = j + 1; k\
    \ < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n            \
    \        cnt++;\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpc8oummjt: /tmp/tmpc8oummjt.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> vec;\n    for(long i = 1; i\
    \ <= n; i++) {\n        vec.push_back(i * i - i + 1);\n    }\n    long cnt = 0;\n\
    \    for(long i = 0; i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1;\
    \ j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((vec[i]\
    \ + vec[j] + vec[k]) % 3 == 0) {\n                    cnt++;\n               \
    \ }\n            }\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long maxTriples = 0;\n  std::vector<long> a(n);\n  for (int i = 0; i\
    \ < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  for (int i = 0; i < n - 2; i++)\
    \ {\n    for (int j = i + 1; j < n - 1; j++) {\n      for (int k = j + 1; k <\
    \ n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n          maxTriples++;\n\
    \        }\n      }\n    }\n  }\n  return maxTriples;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgafccnko: /tmp/tmpgafccnko.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here\n\t// To print results to the standard output\
    \ you can use print\n\t// Example: print \"Hello world!\"\n\tstd::vector<long>\
    \ a;\n\tstd::unordered_map<long, long> umap;\n\tfor(long i = 1; i <= n; i++)\n\
    \t{\n\t\ta.push_back(i*i - i + 1);\n\t\tumap[i*i - i + 1]++;\n\t}\n\tlong count\
    \ = 0;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfor(long j = i+1; j < n; j++)\n\
    \t\t{\n\t\t\tif((a[i] + a[j]) % 3 == 0)\n\t\t\t{\n\t\t\t\tlong temp = a[i] + a[j];\n\
    \t\t\t\tcount += umap[temp];\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgr0ky51p: /tmp/tmpgr0ky51p.cpp:40: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp54uub_1y: /tmp/tmp54uub_1y.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> vec;\n\tint count = 0;\n\tfor (int i = 1; i <= n;\
    \ i++) {\n\t\tvec.push_back(i * i - i + 1);\n\t}\n\tfor (int i = 0; i < vec.size();\
    \ i++) {\n\t\tfor (int j = i + 1; j < vec.size(); j++) {\n\t\t\tfor (int k = j\
    \ + 1; k < vec.size(); k++) {\n\t\t\t\tif ((vec[i] + vec[j] + vec[k]) % 3 == 0)\
    \ {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // write your code here\n  std::vector<long> a(n);\n  for(long i = 0;\
    \ i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  long res = 0;\n  for(long i\
    \ = 0; i < n; i++) {\n    for(long j = i + 1; j < n; j++) {\n      for(long k\
    \ = j + 1; k < n; k++) {\n        if((a[i] + a[j] + a[k]) % 3 == 0) res++;\n \
    \     }\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpeugp9zpw: /tmp/tmpeugp9zpw.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpz7r92l6a: /tmp/tmpz7r92l6a.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2elnzhr7: /tmp/tmp2elnzhr7.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long cnt = 0;\n    for (int i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for (int i = 0; i\
    \ < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n           \
    \ for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    cnt++;\n                }\n            }\n\
    \        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  if (n == 0) return 0;\n  std::vector<long> a;\n  long sum = 0;\n  a.push_back(1);\n\
    \  for (int i = 1; i < n; i++) {\n    a.push_back(i * i - i + 1);\n    sum +=\
    \ a[i];\n  }\n  long num_triples = 0;\n  for (int i = 0; i < n - 2; i++) {\n \
    \   for (int j = i + 1; j < n - 1; j++) {\n      for (int k = j + 1; k < n; k++)\
    \ {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) num_triples++;\n      }\n    }\n\
    \  }\n  return num_triples;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpm090bvy0: /tmp/tmpm090bvy0.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long>a(n, 0);\n    long ans = 0;\n    for(int i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n\
    \ - 2; i++) {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmptfhuwma1: /tmp/tmptfhuwma1.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // write your code here\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmprgy7e50e: /tmp/tmprgy7e50e.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long counter=0;\n    for(long i=1;i<=n;i++){\n\
    \        a.push_back(i*i-i+1);\n    }\n    for(long i=0;i<n-2;i++){\n        for(long\
    \ j=i+1;j<n-1;j++){\n            for(long k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n\
    \                    counter++;\n                }\n            }\n        }\n\
    \    }\n    return counter;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ret = 0;\n    std::vector<long> a;\n    for (int i = 1; i <=\
    \ n; i++)\n        a.push_back(i * i - i + 1);\n    for (int i = 0; i < n - 2;\
    \ i++)\n        for (int j = i + 1; j < n - 1; j++)\n            for (int k =\
    \ j + 1; k < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n   \
    \                 ret++;\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n*(n-1)*(n-2))/6;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmptqxyzq4f: /tmp/tmptqxyzq4f.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int count = 0;\n    if(n < 3) return 0;\n    std::vector<int> v;\n\
    \    for(int i = 1; i <= n; i++) {\n        v.push_back(i * i - i + 1);\n    }\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n\
    \            for(int k = j + 1; k < n; k++) {\n                if((v[i] + v[j]\
    \ + v[k]) % 3 == 0) {\n                    count++;\n                }\n     \
    \       }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  std::vector<long> a(n);\n  for (int i = 0; i < n; i++)\n    a[i] = i\
    \ * i - i + 1;\n  long total_triples = 0;\n  for (int i = 0; i < n - 2; i++)\n\
    \    for (int j = i + 1; j < n - 1; j++)\n      for (int k = j + 1; k < n; k++)\n\
    \        if ((a[i] + a[j] + a[k]) % 3 == 0)\n          total_triples++;\n  return\
    \ total_triples;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplqadxbo2: /tmp/tmplqadxbo2.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long cnt1=0,cnt2=0,cnt3=0;\n    for(long i=1;i<=n;i++){\n        long\
    \ x=i*i-i+1;\n        if(x%3==0) cnt1++;\n        else if(x%3==1) cnt2++;\n  \
    \      else cnt3++;\n    }\n    long ans=0;\n    for(long i=1;i<=n;i++){\n   \
    \     long x=i*i-i+1;\n        if(x%3==0) {\n            ans+=cnt1-1;\n      \
    \      ans+=cnt2;\n            ans+=cnt3;\n        }else if(x%3==1){\n       \
    \     ans+=cnt1;\n            ans+=cnt2-1;\n            ans+=cnt3;\n        }else{\n\
    \            ans+=cnt1;\n            ans+=cnt2;\n            ans+=cnt3-1;\n  \
    \      }\n    }\n    return ans/6;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp_jy3n_10: /tmp/tmp_jy3n_10.cpp:42: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result=0;\n    std::vector<long> vector_n(n);\n    for(int i=0;i<n;i++){\n\
    \        vector_n[i]=i*i-i+1;\n    }\n    for(int i=0;i<n;i++){\n        for(int\
    \ j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((vector_n[i]+vector_n[j]+vector_n[k])%3==0){\n\
    \                    result++;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8i2fp0nv: /tmp/tmp8i2fp0nv.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v(n);\n    for(int i = 0; i < n; i++) {\n      \
    \  v[i] = i * i - i + 1;\n    }\n    long ans = 0;\n    for(int i = 0; i < n -\
    \ 2; i++) {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int\
    \ k = j + 1; k < n; k++) {\n                if(v[i] + v[j] + v[k] % 3 == 0) ans++;\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpls1bkp5n: /tmp/tmpls1bkp5n.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  std::vector<long> a;\n  for (long i = 1; i <= n; i++) {\n    a.push_back(i\
    \ * i - i + 1);\n  }\n  long count = 0;\n  for (long i = 0; i < n; i++) {\n  \
    \  for (long j = i + 1; j < n; j++) {\n      for (long k = j + 1; k < n; k++)\
    \ {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n          count++;\n      \
    \  }\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++)\n      \
    \  a[i] = i * i - i + 1;\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \        for (long j = i + 1; j < n; j++)\n            for (long k = j + 1; k\
    \ < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n            \
    \        count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxt1f6ouf: /tmp/tmpxt1f6ouf.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long cnt=0;\n    std::vector<long> v(n);\n    for(long i=0;i<n;i++)\n\
    \    {\n        v[i]=i*i-i+1;\n    }\n    for(long i=0;i<n;i++)\n    {\n     \
    \   for(long j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n\
    \            {\n                if((v[i]+v[j]+v[k])%3==0)\n                {\n\
    \                    cnt++;\n                }\n            }\n        }\n   \
    \ }\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0efso9w6: /tmp/tmp0efso9w6.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long c = 0;\n    for(long i = 1; i < n; i++) {\n        for(long j\
    \ = i + 1; j < n; j++) {\n            if((i * i - i + 1 + j * j - j + 1) % 3 ==\
    \ 0) {\n                c++;\n            }\n        }\n    }\n    return c;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp025g30c4: /tmp/tmp025g30c4.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    //assert(n > 0);\n    if(n <= 1) return 0;\n    // assert(n > 0);\n\
    \    std::vector<long> a;\n    long count = 0;\n    for(long i = 1; i <= n; i++){\n\
    \        a.push_back(i*i - i + 1);\n    }\n    for(long i = 0; i < n - 2; i++){\n\
    \        for(long j = i + 1; j < n - 1; j++){\n            for(long k = j + 1;\
    \ k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v(n);\n    std::generate(v.begin(), v.end(), [i\
    \ = 1]() mutable {\n        return (i * i) - i + 1;\n    });\n    // for (long\
    \ i = 0; i < n; i++) {\n    //     v[i] = (i * i) - i + 1;\n    // }\n    long\
    \ count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1;\
    \ j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n            \
    \    if ((v[i] + v[j] + v[k]) % 3 == 0) {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpv7ndezse: /tmp/tmpv7ndezse.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> a(n);\n\tfor (int i = 0; i < n; i++) {\n\t\ta[i] =\
    \ i * i - i + 1;\n\t}\n\tlong sum = 0;\n\tfor (int i = 0; i < n - 2; i++) {\n\t\
    \tfor (int j = i + 1; j < n - 1; j++) {\n\t\t\tfor (int k = j + 1; k < n; k++)\
    \ {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tsum++;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgw8e5fy7: /tmp/tmpgw8e5fy7.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n, 0);\n    for (int i = 0; i < n; i++) {\n  \
    \      a[i] = i * i - i + 1;\n    }\n    int triple_count = 0;\n    for (int i\
    \ = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n    \
    \        for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                    triple_count++;\n                }\n\
    \            }\n        }\n    }\n    return triple_count;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp87lzyaqz: /tmp/tmp87lzyaqz.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  std::vector<long> a;\n  for (long i = 1; i <= n; i++)\n    a.push_back(i\
    \ * i - i + 1);\n  long count = 0;\n  for (long i = 0; i < n - 2; i++)\n    for\
    \ (long j = i + 1; j < n - 1; j++)\n      for (long k = j + 1; k < n; k++)\n \
    \       if ((a[i] + a[j] + a[k]) % 3 == 0)\n          count++;\n  return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long *arr = new long[n];\n    for(long i = 0;\
    \ i < n; i++)\n        arr[i] = i * i - i + 1;\n    for(long i = 0; i < n - 2;\
    \ i++)\n        for(long j = i + 1; j < n - 1; j++)\n            for(long k =\
    \ j + 1; k < n; k++)\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n\
    \                    count++;\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpu79uzysd: /tmp/tmpu79uzysd.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    std::vector<long> v(n, 0);\n    for(long\
    \ i = 0; i < n; i++) {\n        v[i] = i * i - i + 1;\n    }\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n\
    \            for(long k = j + 1; k < n; k++) {\n                if(v[i] + v[j]\
    \ + v[k] % 3 == 0) {\n                    ans++;\n                }\n        \
    \    }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4nt7tng4: /tmp/tmp4nt7tng4.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long x = n*(n+1)/2;\n    long result = x/3;\n    if(result%3==0)\n\
    \        return result;\n    else if(x%3==0)\n        return result+1;\n    else\n\
    \        return result+2;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpejs3glle: /tmp/tmpejs3glle.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong c = 0;\n\tstd::vector<long> a(n,0);\n\tfor(long i = 0; i < n; i++)\n\
    \t\ta[i] = i * i - i + 1;\n\tfor(long i = 0; i < n; i++)\n\t\tfor(long j = i +\
    \ 1; j < n; j++)\n\t\t\tfor(long k = j + 1; k < n; k++)\n\t\t\t\tif((a[i] + a[j]\
    \ + a[k]) % 3 == 0)\n\t\t\t\t\tc++;\n\treturn c;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpe11bcoiu: /tmp/tmpe11bcoiu.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong i, j, k, count = 0;\n\tstd::vector<long> a(n);\n\tfor (i = 0; i\
    \ < n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\
    \tfor (j = i + 1; j < n; j++) {\n\t\t\tfor (k = j + 1; k < n; k++) {\n\t\t\t\t\
    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9o7ow2u3: /tmp/tmp9o7ow2u3.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long i = 0;\n    while (i < n) {\n        long\
    \ current = i * i - i + 1;\n        long j = i + 1;\n        while (j < n) {\n\
    \            long current_j = j * j - j + 1;\n            long k = j + 1;\n  \
    \          while (k < n) {\n                long current_k = k * k - k + 1;\n\
    \                if ((current + current_j + current_k) % 3 == 0) {\n         \
    \           ans += 1;\n                }\n                k += 1;\n          \
    \  }\n            j += 1;\n        }\n        i += 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmps0kkrmzj: /tmp/tmps0kkrmzj.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    int triple_count = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i\
    \ = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n           \
    \ for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    triple_count++;\n                }\n      \
    \      }\n        }\n    }\n    return triple_count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpt6qu_qwm: /tmp/tmpt6qu_qwm.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long i,j,k,sum=0;\n    for(i=1;i<n;i++)\n\
    \    {\n        for(j=i+1;j<n;j++)\n        {\n            for(k=j+1;k<n;k++)\n\
    \            {\n                if((((i*i)-i+1)+((j*j)-j+1)+((k*k)-k+1))%3==0)\n\
    \                {\n                    sum++;\n                }\n          \
    \  }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpk3stt8x4: /tmp/tmpk3stt8x4.cpp:34: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // it is given that n is a positive integer\n    assert(n > 0);\n\
    \    // create an integer vector a of length n\n    std::vector<long> a(n);\n\
    \    // i = 1 .. n\n    for (int i = 1; i <= n; i++) {\n        // value of a[i]\
    \ = i * i - i + 1\n        a[i - 1] = i * i - i + 1;\n    }\n    // return the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] +\
    \ a[k] is a multiple of 3.\n    return std::count_if(a.begin(), a.end(), [](long\
    \ i) { return i % 3 == 0; });\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpta9gbic2: /tmp/tmpta9gbic2.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> vec = std::vector<long>(n);\n\tfor (long i = 0; i\
    \ < n; i++)\n\t\tvec[i] = i * i - i + 1;\n\tlong count = 0;\n\tfor (long i = 0;\
    \ i < n - 2; i++)\n\t\tfor (long j = i + 1; j < n - 1; j++)\n\t\t\tfor (long k\
    \ = j + 1; k < n; k++)\n\t\t\t\tif ((vec[i] + vec[j] + vec[k]) % 3 == 0)\n\t\t\
    \t\t\tcount++;\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwt3abvy1: /tmp/tmpwt3abvy1.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long max_triples = 0;\n    // Write your code here...\n    std::vector<long>\
    \ nums;\n    for(int i = 1; i <= n; i++){\n        nums.push_back(i*i - i + 1);\n\
    \    }\n    for(int i = 0; i < nums.size(); i++){\n        for(int j = i+1; j\
    \ < nums.size(); j++){\n            for(int k = j+1; k < nums.size(); k++){\n\
    \                long sum = nums[i] + nums[j] + nums[k];\n                if(sum\
    \ % 3 == 0){\n                    max_triples++;\n                }\n        \
    \    }\n        }\n    }\n    return max_triples;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long res = 0;\n    for (long i = 1; i <=\
    \ n; i++)\n        a.push_back(i * i - i + 1);\n    for (long i = 0; i < n - 2;\
    \ i++)\n        for (long j = i + 1; j < n - 1; j++)\n            for (long k\
    \ = j + 1; k < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n \
    \                   res++;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return 0;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpffi3acb4: /tmp/tmpffi3acb4.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    long result = 0;\n    for (auto i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (auto i = 0; i\
    \ < n - 2; i++) {\n        for (auto j = i + 1; j < n - 1; j++) {\n          \
    \  for (auto k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpa_ui7e9h: /tmp/tmpa_ui7e9h.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  std::vector<long> a;\n  long triple = 0;\n  for (int i = 1; i <= n;\
    \ i++) {\n    a.push_back(i * i - i + 1);\n  }\n  for (int i = 0; i < n - 2; i++)\
    \ {\n    for (int j = i + 1; j < n - 1; j++) {\n      for (int k = j + 1; k <\
    \ n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n          triple++;\n\
    \        }\n      }\n    }\n  }\n  return triple;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  int c = 0;\n  for(int i = 0; i < n; i++) {\n    for(int j = i + 1; j\
    \ < n; j++) {\n      for(int k = j + 1; k < n; k++) {\n        if(((i * i - i\
    \ + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0) {\n          c++;\n    \
    \    }\n      }\n    }\n  }\n  return c;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmph1rs1li8: /tmp/tmph1rs1li8.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> a;\n\ta.reserve(n);\n\tfor (long i = 1; i <= n; i++)\n\
    \t\ta.push_back(i * i - i + 1);\n\tlong count = 0;\n\tfor (long i = 0; i < n -\
    \ 2; i++)\n\t\tfor (long j = i + 1; j < n - 1; j++)\n\t\t\tfor (long k = j + 1;\
    \ k < n; k++)\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0)\n\t\t\t\t\tcount++;\n\
    \treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    long count = 0;\n    for(long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long\
    \ k = j + 1; k < n; k++)\n            {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkx65l_5o: /tmp/tmpkx65l_5o.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Your code goes here\n    long sum=0;\n    for(long i=0;i<n;i++)\n\
    \    {\n        sum+=i*i-i+1;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp36u_fkjt: /tmp/tmp36u_fkjt.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong answer = 0;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 2;\n\twhile\
    \ (k < n) {\n\t\tif ((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n\t\
    \t\tanswer += 1;\n\t\t\tj += 1;\n\t\t\tk += 1;\n\t\t}\n\t\telse if (j < k - 1)\
    \ {\n\t\t\tj += 1;\n\t\t}\n\t\telse {\n\t\t\ti += 1;\n\t\t\tj = i + 1;\n\t\t\t\
    k = j + 1;\n\t\t}\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpg_vhvlmz: /tmp/tmpg_vhvlmz.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        long x\
    \ = i * i - i + 1;\n        for(long j = i + 1; j < n; j++) {\n            long\
    \ y = j * j - j + 1;\n            for(long k = j + 1; k < n; k++) {\n        \
    \        long z = k * k - k + 1;\n                if((x + y + z) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwidt5x_s: /tmp/tmpwidt5x_s.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long arr[n];\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n\
    \        arr[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n \
    \       for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <\
    \ n; k++) {\n                if(arr[i] + arr[j] + arr[k] % 3 == 0) {\n       \
    \             sum++;\n                }\n            }\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmput41ydpf: /tmp/tmput41ydpf.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong max_triples = 0;\n\tstd::vector<long> a(n);\n\tfor (long i = 0;\
    \ i < n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i = 0; i < n - 2;\
    \ i++) {\n\t\tfor (long j = i + 1; j < n - 1; j++) {\n\t\t\tfor (long k = j +\
    \ 1; k < n; k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tmax_triples++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max_triples;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpohlzv_04: /tmp/tmpohlzv_04.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113617
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpvuuw4tcy: /tmp/tmpvuuw4tcy.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n>=1);\n    long *b = new long[n];\n    b[0] = 1;\n    for(long\
    \ i=1;i<n;i++)\n        b[i] = b[i-1] + (2*i + 1);\n    std::cout<<\"b:\\n\";\n\
    \    for(long i=0;i<n;i++)\n        std::cout<<b[i]<<\" \";\n    std::cout<<\"\
    \\n\";\n    long ct = 0;\n    for(long i=0;i<n;i++)\n        for(long j=i+1;j<n;j++)\n\
    \            for(long k=j+1;k<n;k++)\n                if((b[i] + b[j] + b[k])%3\
    \ == 0)\n                    ct++;\n    delete[] b;\n    return ct;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpio02dwoh: /tmp/tmpio02dwoh.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long>a;\n    for(int i=1;i<=n;i++) {\n        a.push_back(i*i-i+1);\n\
    \    }\n    long count = 0;\n    for(int i=0;i<n-2;i++) {\n        for(int j=i+1;j<n-1;j++)\
    \ {\n            for(int k=j+1;k<n;k++) {\n                if((a[i]+a[j]+a[k])%3==0)\
    \ {\n                    count+=1;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long x,i,j,k,m;\n    std::vector<long> vec;\n    for(int i=1;i<=n;i++)\n\
    \    {\n        x= i*i-i+1;\n        vec.push_back(x);\n    }\n    long count=0;\n\
    \    for(i=0;i<vec.size();i++)\n    {\n        for(j=i+1;j<vec.size();j++)\n \
    \       {\n            for(k=j+1;k<vec.size();k++)\n            {\n          \
    \      m=vec[i]+vec[j]+vec[k];\n                if(m%3==0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    std::map<long, long> freq;\n    for (long\
    \ i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n    long cnt = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n   \
    \         if ((a[i] + a[j]) % 3 == 0) {\n                cnt += freq[3 * a[i]\
    \ + a[j]];\n            }\n        }\n    }\n    return cnt;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpjey_fsf8: /tmp/tmpjey_fsf8.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count=0;\n    long* a=new long[n];\n    long* temp=new long[n];\n\
    \    // long j=0;\n    for(long i=0;i<n;i++){\n        temp[i]=i+1;\n        a[i]=i*i-i+1;\n\
    \    }\n    for(long i=1;i<n;i++){\n        count+=((n-i)*i)/2;\n    }\n    //\
    \ for(long i=0;i<n;i++){\n    //     for(long j=i+1;j<n;j++){\n    //        \
    \ for(long k=j+1;k<n;k++){\n    //             if((a[i]+a[j]+a[k])%3==0){\n  \
    \  //                 count++;\n    //             }\n    //         }\n    //\
    \     }\n    // }\n    // for(long i=0;i<n;i++){\n    //     if(a[i]%3==0){\n\
    \    //         count+=n-i-1;\n    //     }\n    // }\n    // return (count);\n\
    \    long i=0;\n    long j=0;\n    long k=0;\n    while(i<n){\n        while(j<n){\n\
    \            while(k<n){\n                if((a[i]+a[j]+a[k])%3==0 && temp[i]!=temp[j]\
    \ && temp[j]!=temp[k] && temp[i]!=temp[k]){\n                    count++;\n  \
    \              }\n                k++;\n            }\n            k=0;\n    \
    \        j++;\n        }\n        j=0;\n        i++;\n    }\n    return (count);\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpw6mk6i43: /tmp/tmpw6mk6i43.cpp:61: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v;\n    for(long i = 1; i <= n; i++) {\n       \
    \ v.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((v[i] + v[j] + v[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    //cout<<n<<endl;\n    //Your code here\n    int arr[n];\n    for(int\
    \ i=0;i<n;i++){\n        arr[i] = i*i - i + 1;\n    }\n    int count = 0;\n  \
    \  for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int\
    \ k=j+1;k<n;k++){\n                //cout<<arr[i]<<\" \"<<arr[j]<<\" \"<<arr[k]<<endl;\n\
    \                if((arr[i] + arr[j] + arr[k])%3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdf0d568u: /tmp/tmpdf0d568u.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // Write your code here.\n  std::vector<long> triplet;\n  long sum =\
    \ 0;\n  for(long i = 1; i <= n; i++){\n    triplet.push_back(i*i - i + 1);\n \
    \ }\n  for(long i = 0; i < triplet.size(); i++){\n    for(long j = i+1; j < triplet.size();\
    \ j++){\n      for(long k = j+1; k < triplet.size(); k++){\n        if((triplet[i]\
    \ + triplet[j] + triplet[k]) % 3 == 0){\n          sum += 1;\n        }\n    \
    \  }\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n    vector<int>\
    \ a(n);\n    for(int i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n    }\n    int\
    \ count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    cout<<count<<endl;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcbakeviz.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpcbakeviz.cpp:17:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   17 |     vector<int> a(n);\n      |     ^~~~~~\n/tmp/tmpcbakeviz.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcbakeviz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcbakeviz.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpcbakeviz.cpp:17:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   17 |     vector<int>\
    \ a(n);\n      |            ^~~\n/tmp/tmpcbakeviz.cpp:20:9: error: \u2018a\u2019\
    \ was not declared in this scope\n   20 |         a[i]=i*i-i+1;\n      |     \
    \    ^\n/tmp/tmpcbakeviz.cpp:29:21: error: \u2018a\u2019 was not declared in this\
    \ scope\n   29 |                 if((a[i]+a[j]+a[k])%3==0)\n      |          \
    \           ^\n/tmp/tmpcbakeviz.cpp:36:5: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   36 |     cout<<count<<endl;\n\
    \      |     ^~~~\n      |     std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpcbakeviz.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostrea"
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long i = 1, count = 0;\n    std::vector<long> a;\n    while(i <= n)\
    \ {\n        a.push_back(i * i - i + 1);\n        ++i;\n    }\n    for(i = 0;\
    \ i < n; ++i) {\n        for(long j = i + 1; j < n; ++j) {\n            for(long\
    \ k = j + 1; k < n; ++k) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ++count;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int sum = 0;\n   \
    \ int count = 0;\n    int* a = new int[n];\n    for(i = 0; i < n; i++)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n   \
    \     for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n;\
    \ k++)\n            {\n                sum = a[i] + a[j] + a[k];\n           \
    \     if(sum % 3 == 0)\n                {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpf_l74w5w: /tmp/tmpf_l74w5w.cpp:42: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113617
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  std::vector<long> arr;\n  long i, result = 0;\n  for(i = 1; i <= n;\
    \ i++) {\n    arr.push_back(i * i - i + 1);\n  }\n  for(i = 0; i < n - 2; i++)\
    \ {\n    if((arr[i] + arr[i + 1] + arr[i + 2]) % 3 == 0) {\n      result++;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpusw2qrzf: /tmp/tmpusw2qrzf.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> a(n, 0);\n\tfor (long i = 0; i < n; i++) {\n\t\ta[i]\
    \ = i * i - i + 1;\n\t}\n\treturn countTriplets(a, n);\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdo1kfih3.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpdo1kfih3.cpp:18:9: error: \u2018countTriplets\u2019 was not declared\
    \ in this scope\n   18 |  return countTriplets(a, n);\n      |         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660113617
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long arr[n];\n    for(long i = 0; i < n; i++) {\n\
    \        arr[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n \
    \       for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <\
    \ n; k++) {\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n     \
    \               ans++;\n                }\n            }\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpe2yrmr91: /tmp/tmpe2yrmr91.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int c = 0;\n    if(n<=2)\n    {\n        return 0;\n    }\n    int\
    \ *a = new int[n];\n    for(int i=0;i<n;i++)\n    {\n        a[i] = i*i - i +\
    \ 1;\n    }\n    for(int i=0;i<n-2;i++)\n    {\n        for(int j=i+1;j<n-1;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if((a[i] + a[j] + a[k])%3 == 0)\n                {\n                    c++;\n\
    \                }\n            }\n        }\n    }\n    return c;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7gly5mtw: /tmp/tmp7gly5mtw.cpp:41: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113618
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            long ai = i*i - i + 1;\n                long aj = j*j - j + 1;\n\
    \                long ak = k*k - k + 1;\n                if((ai + aj + ak) % 3\
    \ == 0) {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113618
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    //TODO: implement this function\n    long ans = 0;\n    std::vector<long>\
    \ a;\n    for(long i = 1; i <= n; i++)\n    {\n        a.push_back(i*i - i + 1);\n\
    \    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j\
    \ < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n        \
    \    {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n\
    \                    ans += 1;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp01hjfd6g: /tmp/tmp01hjfd6g.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n],i;\n    for(i=0;i<n;i++)\n        a[i]=i*i-i+1;\n    long\
    \ ct=0;\n    for(i=0;i<n-2;i++)\n    {\n        for(long j=i+1;j<n-1;j++)\n  \
    \      {\n            for(long k=j+1;k<n;k++)\n            {\n               \
    \ if((a[i]+a[j]+a[k])%3==0)\n                    ct++;\n            }\n      \
    \  }\n    }\n    return ct;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpljupbpfb: /tmp/tmpljupbpfb.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> a(n);\n    for (int i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    long result = 0;\n  \
    \  for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    result++;\n                }\n    \
    \        }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpsf0j9932: /tmp/tmpsf0j9932.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long long res = 0;\n    for(long i = 1; i < n - 1; i++){\n       \
    \ for(long j = i + 1; j < n; j++){\n            for(long k = j + 1; k <= n; k++){\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0){\n\
    \                    res++;\n                }\n            }\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113618
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<3) return 0;\n    std::vector<long> a;\n    long ans = 0;\n \
    \   for(long i=1;i<=n;i++){\n        a.push_back(i*i-i+1);\n    }\n    for(long\
    \ i=0;i<n-2;i++){\n        for(long j=i+1;j<n-1;j++){\n            for(long k=j+1;k<n;k++){\n\
    \                if((a[i]+a[j]+a[k])%3==0)\n                    ans++;\n     \
    \       }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong i, j, k, count = 0;\n\tlong a[n];\n\tfor (i = 0; i < n; i++)\n\t\
    \ta[i] = i * i - i + 1;\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = i + 1; j <\
    \ n; j++) {\n\t\t\tfor (k = j + 1; k < n; k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2e1fg_1o: /tmp/tmp2e1fg_1o.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return 0;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpffi3acb4: /tmp/tmpffi3acb4.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    long result = 0;\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    result++;\n                }\n            }\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpnl688s29: /tmp/tmpnl688s29.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> vect;\n    for(int i=1;i<=n;i++){\n        vect.push_back(i*i-i+1);\n\
    \    }\n    long count=0;\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n\
    \            for(int k=j+1;k<n;k++){\n                long sum=vect[i]+vect[j]+vect[k];\n\
    \                if(sum%3==0){\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n <= 2) return 0;\n    long m = n - 2;\n    long count = 0;\n \
    \   for(long i = 0; i < m; i++) {\n        for(long j = i + 1; j < m; j++) {\n\
    \            for(long k = j + 1; k < m; k++) {\n                if(((i + 1) *\
    \ (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1)\
    \ - (k + 1) + 1) % 3 == 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpchq524cr: /tmp/tmpchq524cr.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> a(n);\n\tint count = 0;\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i = 0; i < n; i++) {\n\t\
    \tfor (long j = i + 1; j < n; j++) {\n\t\t\tfor (long k = j + 1; k < n; k++) {\n\
    \t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4f4zgd49: /tmp/tmp4f4zgd49.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long triple_count = 0;\n    for (int i =\
    \ 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n      \
    \      for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    triple_count++;\n                }\n      \
    \      }\n        }\n    }\n    return triple_count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp_jlmtfl2: /tmp/tmp_jlmtfl2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpis0i5ugj: /tmp/tmpis0i5ugj.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    // 1 <= n <= 10^9\n    // if n = 1 => triple is\
    \ invalid, return 0\n    // if n = 2 => triple is invalid, return 0\n    // if\
    \ n = 3 => triple is invalid, return 0\n    // if n = 4 => triple is invalid,\
    \ return 0\n    // if n = 5 => triple is valid, return 1\n    // if n = 6 => triple\
    \ is valid, return 1\n    // if n = 7 => triple is valid, return 2\n    // if\
    \ n = 8 => triple is valid, return 2\n    // if n = 9 => triple is valid, return\
    \ 3\n    // if n = 10 => triple is valid, return 3\n    std::vector<long> a;\n\
    \    for (long i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n  \
    \  }\n    int count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n \
    \               if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    int count = 0;\n    long sum = 0;\n \
    \   for(int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                sum = a[i] + a[j] + a[k];\n\
    \                if(sum % 3 == 0) {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp58yrxj5a: /tmp/tmp58yrxj5a.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return 0;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpffi3acb4: /tmp/tmpffi3acb4.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 1);\n    long ans = 0;\n    std::vector<long> v(n, 0);\n\
    \    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        v[i] = i * i - i\
    \ + 1;\n        sum += v[i];\n    }\n    if(sum % 3 != 0) {\n        return 0;\n\
    \    }\n    int cnt = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j\
    \ = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n     \
    \           if((v[i] + v[j] + v[k]) % 3 == 0) {\n                    cnt++;\n\
    \                }\n            }\n        }\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmps3ep1u_n: /tmp/tmps3ep1u_n.cpp:39: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<=2) return 0;\n    std::vector<long> a(n);\n    for(int i=0;i<n;i++)\
    \ a[i] = i*i - i + 1;\n    long res = 0;\n    for(int i=0;i<n-2;i++)\n       \
    \ for(int j=i+1;j<n-1;j++)\n            for(int k=j+1;k<n;k++)\n             \
    \   if((a[i]+a[j]+a[k])%3==0) res++;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpr2kn61gv: /tmp/tmpr2kn61gv.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here.\n\tstd::vector<long> vec;\n\tvec.reserve(n);\n\
    \tstd::generate_n(std::back_inserter(vec), n, [i = 1]() mutable { return i * i\
    \ - i + 1; });\n\tlong counter = 0;\n\tfor (auto i = 0; i < n; ++i) {\n\t\tfor\
    \ (auto j = i + 1; j < n; ++j) {\n\t\t\tfor (auto k = j + 1; k < n; ++k) {\n\t\
    \t\t\tif ((vec[i] + vec[j] + vec[k]) % 3 == 0) {\n\t\t\t\t\t++counter;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn counter;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpl623crpq: /tmp/tmpl623crpq.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    // write your code here\n    if(n<=2)\n       \
    \ return 0;\n    long i,j,k;\n    for(i=1;i<n-2;i++)\n    {\n        for(j=i+1;j<n-1;j++)\n\
    \        {\n            for(k=j+1;k<n;k++)\n            {\n                long\
    \ val1 = i*i - i + 1;\n                long val2 = j*j - j + 1;\n            \
    \    long val3 = k*k - k + 1;\n                if((val1+val2+val3)%3==0)\n   \
    \                 res++;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwlv9mdvj: /tmp/tmpwlv9mdvj.cpp:38: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\"\n    vector<int> vec(n);\n\
    \    int res = 0;\n    int mul = 0;\n    int j = 1;\n    for(int i = 0; i < n;\
    \ i++){\n        vec[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n - 2;\
    \ i++){\n        for(int j = i + 1; j < n - 1; j++){\n            for(int k =\
    \ j + 1; k < n; k++){\n                mul = vec[i] + vec[j] + vec[k];\n     \
    \           if(mul % 3 == 0){\n                    res++;\n                }\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcm17pz_8.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpcm17pz_8.cpp:17:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   17 |     vector<int> vec(n);\n      |     ^~~~~~\n/tmp/tmpcm17pz_8.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcm17pz_8.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcm17pz_8.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpcm17pz_8.cpp:17:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   17 |     vector<int>\
    \ vec(n);\n      |            ^~~\n/tmp/tmpcm17pz_8.cpp:22:9: error: \u2018vec\u2019\
    \ was not declared in this scope\n   22 |         vec[i] = i * i - i + 1;\n  \
    \    |         ^~~\n/tmp/tmpcm17pz_8.cpp:27:23: error: \u2018vec\u2019 was not\
    \ declared in this scope\n   27 |                 mul = vec[i] + vec[j] + vec[k];\n\
    \      |                       ^~~\n"
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7cp2dsf3: /tmp/tmp7cp2dsf3.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> v(n);\n\tlong sum = 0;\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\tv[i] = i * i - i + 1;\n\t\tsum += v[i];\n\t}\n\tif (sum % 3 == 0)\
    \ {\n\t\tlong x = 1;\n\t\tfor (long i = 2; i < n; i++) {\n\t\t\tx += (i - 1);\n\
    \t\t}\n\t\treturn x;\n\t}\n\tif (sum % 3 == 1) {\n\t\tlong x = 0;\n\t\tfor (long\
    \ i = 2; i < n; i++) {\n\t\t\tif (v[i] % 3 == 2) {\n\t\t\t\tx += (i - 1);\n\t\t\
    \t}\n\t\t}\n\t\treturn x;\n\t}\n\tif (sum % 3 == 2) {\n\t\tlong x = 0;\n\t\tfor\
    \ (long i = 2; i < n; i++) {\n\t\t\tif (v[i] % 3 == 1) {\n\t\t\t\tx += (i - 1);\n\
    \t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\treturn 0;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpa44cltco: /tmp/tmpa44cltco.cpp:49: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long ans = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp69jh57bb: /tmp/tmp69jh57bb.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v(n);\n    std::generate(v.begin(), v.end(), [i\
    \ = 1]() mutable { return i * i - i++ + 1; });\n    long count = 0;\n    for (long\
    \ i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n \
    \           for (long k = j + 1; k < n; k++) {\n                if ((v[i] + v[j]\
    \ + v[k]) % 3 == 0) {\n                    count++;\n                }\n     \
    \       }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++)\n      \
    \  a[i] = i * i - i + 1;\n    long ans = 0;\n    for (long i = 0; i < n; i++)\n\
    \        for (long j = i + 1; j < n; j++)\n            for (long k = j + 1; k\
    \ < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n            \
    \        ans++;\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8clxsvei: /tmp/tmp8clxsvei.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long int sum = 0;\n    for(int i = 1; i <= n; i++)\n    {\n      \
    \  for(int j = i + 1; j <= n; j++)\n        {\n            for(int k = j + 1;\
    \ k <= n; k++)\n            {\n                if((((i * i) - i + 1) + ((j * j)\
    \ - j + 1) + ((k * k) - k + 1)) % 3 == 0)\n                {\n               \
    \     sum++;\n                }\n            }\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long>a;\n    long x=1;\n    while(x<=n){\n        a.push_back(x*x-x+1);\n\
    \        x++;\n    }\n    long c=0;\n    for(long i=0;i<a.size();i++){\n     \
    \   for(long j=i+1;j<a.size();j++){\n            for(long k=j+1;k<a.size();k++){\n\
    \                if((a[i]+a[j]+a[k])%3==0){\n                    c++;\n      \
    \          }\n            }\n        }\n    }\n    return c;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here\n\t// To print results to the standard output\
    \ you can use printf()\n\t// Example: printf(\"%s\", \"Hello world!\");\n\tstd::vector<long>\
    \ a;\n\tfor(long i = 1; i <= n; i++)\n\t{\n\t\ta.push_back(i*i - i + 1);\n\t}\n\
    \tlong result = 0;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfor(long j = i + 1;\
    \ j < n; j++)\n\t\t{\n\t\t\tfor(long k = j + 1; k < n; k++)\n\t\t\t{\n\t\t\t\t\
    if((a[i] + a[j] + a[k]) % 3 == 0)\n\t\t\t\t{\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tprintf(\"%ld\", result);\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: '143653361'
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long long triple[n];\n    for(long i=0;i<n;i++) {\n        triple[i]\
    \ = (i+1)*(i+1) - (i+1) + 1;\n    }\n    std::vector<long> pairs;\n    pairs.reserve(n*n);\n\
    \    for(long i=0;i<n;i++) {\n        for(long j=i+1;j<n;j++) {\n            pairs.push_back(triple[i]\
    \ + triple[j]);\n        }\n    }\n    long cnt = 0;\n    for(long i=0;i<pairs.size();i++)\
    \ {\n        if(pairs[i]%3 == 0) {\n            for(long j=0;j<n;j++) {\n    \
    \            if(pairs[i] == triple[j]) {\n                    cnt++;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmppkx4lsg5: /tmp/tmppkx4lsg5.cpp:40: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tvector<int> a(n);\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) {\n\
    \t\ta[i] = i * i - i + 1;\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int\
    \ j = i + 1; j < n; j++) {\n\t\t\tfor (int k = j + 1; k < n; k++) {\n\t\t\t\t\
    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplyt1v6_s.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmplyt1v6_s.cpp:14:2: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   14 |  vector<int> a(n);\n      |  ^~~~~~\n/tmp/tmplyt1v6_s.cpp:14:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplyt1v6_s.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplyt1v6_s.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmplyt1v6_s.cpp:14:9:\
    \ error: expected primary-expression before \u2018int\u2019\n   14 |  vector<int>\
    \ a(n);\n      |         ^~~\n/tmp/tmplyt1v6_s.cpp:17:3: error: \u2018a\u2019\
    \ was not declared in this scope\n   17 |   a[i] = i * i - i + 1;\n      |   ^\n\
    /tmp/tmplyt1v6_s.cpp:22:10: error: \u2018a\u2019 was not declared in this scope\n\
    \   22 |     if ((a[i] + a[j] + a[k]) % 3 == 0) {\n      |          ^\n"
  stdout: ''
  timestamp: 1660113618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3) return 0;\n    std::vector<long> a;\n    for(long i = 1;\
    \ i <= n; i++)\n        a.push_back(i * i - i + 1);\n    std::sort(a.begin(),\
    \ a.end());\n    long cnt = 0;\n    long last = n - 1;\n    for(long i = 0; i\
    \ < last - 1; i++) {\n        long j = i + 1;\n        while(j < last) {\n   \
    \         long sum = a[i] + a[j];\n            long idx = std::lower_bound(a.begin()\
    \ + j + 1, a.end(), 3 - sum) - a.begin();\n            idx--;\n            if(idx\
    \ > j) {\n                cnt += idx - j;\n            }\n            j++;\n \
    \       }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpj1n_e3cf: /tmp/tmpj1n_e3cf.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    // Write your code here.\n    // 1 \u2264\
    \ n \u2264 100,000.\n    for (long i = 0; i < n; i++) {\n        a[i] = (i+1)\
    \ * (i+1) - (i+1) + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n-2;\
    \ i++) {\n        for (long j = i+1; j < n-1; j++) {\n            for (long k\
    \ = j+1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 ==\
    \ 0) {\n                    sum++;\n                }\n            }\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7gdpasz6: /tmp/tmp7gdpasz6.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<=0){\n        return 0;\n    }\n    std::vector<long> a(n);\n\
    \    for(long i=0;i<n;i++){\n        a[i]=i*i-i+1;\n    }\n    long c=0;\n   \
    \ for(long i=0;i<n;i++){\n        for(long j=i+1;j<n;j++){\n            for(long\
    \ k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n              \
    \      c++;\n                }\n            }\n        }\n    }\n    return c;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpg60vp6w2: /tmp/tmpg60vp6w2.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v(n);\n    for(int i = 0; i < n; i++)\n        v[i]\
    \ = (i * i) - i + 1;\n    // for(auto i: v) std::cout << i << ' ';\n    int count\
    \ = 0;\n    for(int i = 0; i < n - 2; i++)\n        for(int j = i + 1; j < n -\
    \ 1; j++)\n            for(int k = j + 1; k < n; k++)\n                if((v[i]\
    \ + v[j] + v[k]) % 3 == 0) count++;\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0skf0svw: /tmp/tmp0skf0svw.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v;\n    long count = 0;\n    for(long i = 1; i <=\
    \ n; i++)\n    {\n        v.push_back(i*i - i + 1);\n    }\n    for(long i = 0;\
    \ i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n     \
    \       for(long k = j+1; k < n; k++)\n            {\n                if((v[i]\
    \ + v[j] + v[k]) % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> ans;\n    for(int i = 1; i <= n; i++)\n        ans.push_back(i\
    \ * i - i + 1);\n    long sum = 0;\n    for(int i = 0; i < n - 2; i++)\n     \
    \   for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((ans[i] + ans[j] + ans[k]) % 3 == 0)\n            \
    \        sum++;\n    return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  std::vector<long> a(n);\n  long count = 0;\n  for (int i = 0; i < n;\
    \ i++) {\n    a[i] = i * i - i + 1;\n  }\n  for (int i = 0; i < n - 2; i++) {\n\
    \    for (int j = i + 1; j < n - 1; j++) {\n      for (int k = j + 1; k < n; k++)\
    \ {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n          count++;\n      \
    \  }\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmprljzduir: /tmp/tmprljzduir.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong count = 0;\n\tlong k = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\
    \tfor (long j = i+1; j < n; j++) {\n\t\t\tfor (k = j+1; k < n; k++) {\n\t\t\t\t\
    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpirji5izo: /tmp/tmpirji5izo.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long res = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    res++;\n                }\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkgv03x9d: /tmp/tmpkgv03x9d.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113613
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v;\n    for(long i = 1; i <= n; i++) {\n       \
    \ v.push_back(i * i - i + 1);\n    }\n    int count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((v[i] + v[j] + v[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 0);\n    // Write your code here\n    std::vector<long>\
    \ a(n);\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        a[i] =\
    \ i * i - i + 1;\n    }\n    for(long i = 0; i < n - 2; i++){\n        for(long\
    \ j = i + 1; j < n - 1; j++){\n            for(long k = j + 1; k < n; k++){\n\
    \                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpi28uewgr: /tmp/tmpi28uewgr.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong *a = new long[n];\n\tfor (long i = 0; i < n; i++) {\n\t\ta[i] =\
    \ i * i - i + 1;\n\t}\n\tlong count = 0;\n\tfor (long i = 0; i < n - 2; i++) {\n\
    \t\tfor (long j = i + 1; j < n - 1; j++) {\n\t\t\tfor (long k = j + 1; k < n;\
    \ k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7phvksu2: /tmp/tmp7phvksu2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int a[n];\n    for(int i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4sc8rfeb: /tmp/tmp4sc8rfeb.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n],b[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \        b[i]=i;\n    }\n    // std::cout<<\"a[i]=\";\n    // for(long i=0;i<n;i++)\n\
    \    // {\n    //     std::cout<<a[i]<<\" \";\n    // }\n    // std::cout<<std::endl;\n\
    \    // std::cout<<\"b[i]=\";\n    // for(long i=0;i<n;i++)\n    // {\n    //\
    \     std::cout<<b[i]<<\" \";\n    // }\n    // std::cout<<std::endl;\n    long\
    \ count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            for(long k=j+1;k<n;k++)\n            {\n             \
    \   // std::cout<<\"a[i]=\"<<a[i]<<\" a[j]=\"<<a[j]<<\" a[k]=\"<<a[k]<<std::endl;\n\
    \                if((a[i]+a[j]+a[k])%3==0 && b[i]<b[j] && b[j]<b[k])\n       \
    \         {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqs7_vjwm: /tmp/tmpqs7_vjwm.cpp:51: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong *a = new long[n];\n\tlong count = 0;\n\t// long test = 0;\n\tfor\
    \ (long i = 0; i < n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t\t// test += a[i];\n\
    \t}\n\t// std::cout << test << std::endl;\n\tfor (long i = 0; i < n - 2; i++)\
    \ {\n\t\tfor (long j = i + 1; j < n - 1; j++) {\n\t\t\tfor (long k = j + 1; k\
    \ < n; k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpikhoe7vv: /tmp/tmpikhoe7vv.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int sum=0;\n    int ans=0;\n    long *arr=(long *)malloc(sizeof(long)*n);\n\
    \    for(int i=0;i<n;i++){\n        arr[i]=i*i-i+1;\n    }\n    for(int i=0;i<n;i++){\n\
    \        sum=0;\n        for(int j=i+1;j<n;j++){\n            sum=arr[i]+arr[j];\n\
    \            for(int k=j+1;k<n;k++){\n                if((sum+arr[k])%3==0){\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpbvgmptl3: /tmp/tmpbvgmptl3.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    std::sort(a.begin(),\
    \ a.end());\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1;\
    \ j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n            \
    \    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmppgydzcyf: /tmp/tmppgydzcyf.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> a;\n    for (long i = 1; i <=\
    \ n; i++)\n        a.push_back(i * i - i + 1);\n    long max_triples = 0;\n  \
    \  for (long i = 0; i < n - 2; i++)\n        for (long j = i + 1; j < n - 1; j++)\n\
    \            for (long k = j + 1; k < n; k++)\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0)\n                    max_triples++;\n    return max_triples;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong *a = new long[n+1];\n\ta[0] = 0;\n\tfor(long i = 1; i <= n; i++)\n\
    \t\ta[i] = i*i - i + 1;\n\tlong count = 0;\n\tfor(long i = 1; i <= n-2; i++)\n\
    \t\tfor(long j = i+1; j <= n-1; j++)\n\t\t\tfor(long k = j+1; k <= n; k++)\n\t\
    \t\t\tif((a[i] + a[j] + a[k]) % 3 == 0)\n\t\t\t\t\tcount++;\n\treturn count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong* a = new long[n];\n\tfor (long i = 0; i < n; i++)\n\t\ta[i] = i\
    \ * i - i + 1;\n\tlong count = 0;\n\tfor (long i = 0; i < n - 2; i++)\n\t\tfor\
    \ (long j = i + 1; j < n - 1; j++)\n\t\t\tfor (long k = j + 1; k < n; k++)\n\t\
    \t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0)\n\t\t\t\t\tcount++;\n\treturn count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpl_dyapsk: /tmp/tmpl_dyapsk.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong res = 0;\n\tstd::vector<long> a(n);\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i = 0; i < n - 2; i++) {\n\
    \t\tfor (long j = i + 1; j < n - 1; j++) {\n\t\t\tfor (long k = j + 1; k < n;\
    \ k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tres++;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpc94daj6m: /tmp/tmpc94daj6m.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<3)\n    return 0;\n    long sum=0;\n    for(long i=1;i<n-1;i++)\n\
    \    {\n        sum=sum+((n-i-1)*(n-i-2))/2;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpbcqc1l5x: /tmp/tmpbcqc1l5x.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> a(n);\n\tint count = 0;\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i = 0; i < n; i++) {\n\t\
    \tfor (long j = i + 1; j < n; j++) {\n\t\t\tfor (long k = j + 1; k < n; k++) {\n\
    \t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4f4zgd49: /tmp/tmp4f4zgd49.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113619
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n+1];\n    for(long i=1;i<=n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=1;i<=n;i++)\n    {\n        for(long\
    \ j=i+1;j<=n;j++)\n        {\n            for(long k=j+1;k<=n;k++)\n         \
    \   {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n        \
    \            count++;\n                }\n            }\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long sum = 0;\n  std::vector<long> v;\n  for(long i = 1; i <= n; i++)\
    \ {\n    v.push_back(i * i - i + 1);\n  }\n  for(long i = 0; i < n - 2; i++) {\n\
    \    for(long j = i + 1; j < n - 1; j++) {\n      for(long k = j + 1; k < n; k++)\
    \ {\n        if((v[i] + v[j] + v[k]) % 3 == 0) {\n          sum++;\n        }\n\
    \      }\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> nums(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tnums[i]\
    \ = i * i - i + 1;\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\
    \tfor (int j = i + 1; j < n; j++) {\n\t\t\tfor (int k = j + 1; k < n; k++) {\n\
    \t\t\t\tif ((nums[i] + nums[j] + nums[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpe3yz4x5b: /tmp/tmpe3yz4x5b.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tassert(n > 0);\n\tstd::vector<long> arr(n);\n\tfor (int i = 0; i < n;\
    \ i++)\n\t\tarr[i] = i * i - i + 1;\n\tint count = 0;\n\tfor (int i = 0; i < n\
    \ - 2; i++)\n\t\tfor (int j = i + 1; j < n - 1; j++)\n\t\t\tfor (int k = j + 1;\
    \ k < n; k++)\n\t\t\t\tif ((arr[i] + arr[j] + arr[k]) % 3 == 0)\n\t\t\t\t\tcount++;\n\
    \treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpe1g4_cp9: /tmp/tmpe1g4_cp9.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // This one is easy: if n = 3m, we get a result of 3m-2.\n    // If\
    \ n = 3m + 1, we get a result of 3m.\n    // If n = 3m + 2, we get a result of\
    \ 3m+1.\n    if (n % 3 == 0) return n - 2;\n    if (n % 3 == 1) return n;\n  \
    \  return n - 1;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpcn3pxfkx: /tmp/tmpcn3pxfkx.cpp:23: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print_number_vector function\n    long ans = 0;\n    std::vector<long>\
    \ v;\n    v.reserve(n);\n    for(int i = 1; i <= n; i++) {\n        v.push_back(i\
    \ * i - i + 1);\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j =\
    \ i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n       \
    \         if((v[i] + v[j] + v[k]) % 3 == 0) {\n                    ans++;\n  \
    \              }\n            }\n        }\n    }\n    std::cout << \"Result of\
    \ the test: \" << ans << std::endl;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: 'Result of the test: 1

    Result of the test: 4

    Result of the test: 36

    Result of the test: 53361

    '
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    long sum = 0;\n    std::vector<long> arr;\n  \
    \  for(long i = 1; i <= n; i++) {\n        arr.push_back(i * i - i + 1);\n   \
    \ }\n    std::vector<long> m(3, 0);\n    for(long i = 0; i < n; i++) {\n     \
    \   m[arr[i] % 3]++;\n    }\n    sum += (m[0] * (m[0] - 1) * (m[0] - 2)) / 6;\n\
    \    sum += (m[1] * (m[1] - 1) * (m[1] - 2)) / 6;\n    sum += (m[2] * (m[2] -\
    \ 1) * (m[2] - 2)) / 6;\n    sum += m[0] * m[1] * m[2];\n    return sum;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long *a = new long[n];\n    a[0] = 1;\n    for(long i = 1; i < n;\
    \ i++)\n        a[i] = i * i - i + 1;\n    long ans = 0;\n    for(long i = 0;\
    \ i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k\
    \ = j + 1; k < n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n  \
    \                  ans++;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpa3qhrjtj: /tmp/tmpa3qhrjtj.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long s=0;\n    if(n<3)\n        return\
    \ 0;\n    else\n    {\n        std::vector<long> a(n);\n        for(long i=0;i<n;i++)\n\
    \        {\n            a[i]=i*i-i+1;\n        }\n        for(long i=0;i<n-2;i++)\n\
    \        {\n            for(long j=i+1;j<n-1;j++)\n            {\n           \
    \     for(long k=j+1;k<n;k++)\n                {\n                    if((a[i]+a[j]+a[k])%3==0)\n\
    \                        s++;\n                }\n            }\n        }\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmphlc0f3iy: /tmp/tmphlc0f3iy.cpp:41: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long dp[3][3];\n    memset(dp, 0, sizeof(dp));\n    for (long i =\
    \ 1; i <= n; i++) {\n        long cur = i * i - i + 1;\n        long sum = cur\
    \ % 3;\n        long next[3][3];\n        memset(next, 0, sizeof(next));\n   \
    \     for (long a = 0; a < 3; a++) {\n            for (long b = 0; b < 3; b++)\
    \ {\n                for (long c = 0; c < 3; c++) {\n                    if ((a\
    \ + b + c) % 3 == 0) {\n                        next[sum][c] += dp[a][b];\n  \
    \                  }\n                }\n            }\n        }\n        next[sum][0]++;\n\
    \        for (long a = 0; a < 3; a++) {\n            for (long b = 0; b < 3; b++)\
    \ {\n                dp[a][b] = next[a][b];\n            }\n        }\n    }\n\
    \    long ans = 0;\n    for (long a = 0; a < 3; a++) {\n        for (long b =\
    \ 0; b < 3; b++) {\n            ans += dp[a][b];\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmprwbgcbw6: /tmp/tmprwbgcbw6.cpp:47: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int\
    \ j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n   \
    \             if(3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k +\
    \ 1) == 3 * (n * n - n + 1))\n                    count++;\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp_5w096k6: /tmp/tmp_5w096k6.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long result = 0;\n    for(long i = 0; i < n - 2; i++)\n \
    \       for(long j = i + 1; j < n - 1; j++)\n            for(long k = j + 1; k\
    \ < n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n             \
    \       result++;\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long res = 0;\n  std::vector<long> a;\n  a.push_back(1);\n  for (long\
    \ i = 1; i < n; i++) {\n    a.push_back(i * i - i + 1);\n  }\n  for (long i =\
    \ 0; i < n; i++) {\n    for (long j = i + 1; j < n; j++) {\n      for (long k\
    \ = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n     \
    \     res++;\n        }\n      }\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9b3c4yrv: /tmp/tmp9b3c4yrv.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 0);\n    long sum = 0;\n    for(long i = 1; i < n - 1;\
    \ i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k =\
    \ j + 1; k <= n; k++) {\n                if((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0) {\n                    sum++;\n                }\n  \
    \          }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    //initialize array and sum to 0\n    long arr[n];\n    long sum =\
    \ 0;\n    //create and initialize array of n longs, each given the value defined\
    \ by problem\n    for(long i = 0; i < n; i++){\n        arr[i] = (i*i) - i + 1;\n\
    \    }\n    //loop through every value in array\n    for(long i = 0; i < n; i++){\n\
    \        //loop through every value in array after the first loop's value\n  \
    \      for(long j = i+1; j < n; j++){\n            //loop through every value\
    \ in array after the second loop's value\n            for(long k = j+1; k < n;\
    \ k++){\n                //if their sum is a multiple of 3, increment sum\n  \
    \              if((arr[i] + arr[j] + arr[k]) % 3 == 0){\n                    sum++;\n\
    \                }\n            }\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpf2hceidm: /tmp/tmpf2hceidm.cpp:38: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans=0;\n    std::vector<long> dp(3,0);\n    for(long p = 1; p\
    \ <= n; p++){\n        long x = p*p - p + 1; x %= 3;\n        dp[x]++;\n    }\n\
    \    ans += dp[0] * (dp[0] - 1) * (dp[0] - 2) / 6;\n    ans += dp[1] * (dp[1]\
    \ - 1) * (dp[2]) / 2;\n    ans += dp[2] * (dp[2] - 1) * (dp[1]) / 2;\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2bugl908: /tmp/tmp2bugl908.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n>0);\n    std::vector<long> v(n);\n    for(long p = 0; p <\
    \ n; p++){v[p] = p * p - p + 1;}\n    long cnt(0);\n    for(long p = 0; p < n;\
    \ p++){\n        for(long q = p + 1; q < n; q++){\n            for(long r = q\
    \ + 1; r < n; r++){\n                if((v[p] + v[q] + v[r]) % 3 == 0){++cnt;}\n\
    \            }\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0217psn3: /tmp/tmp0217psn3.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long r = 0;\n    for (long i = 1; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n \
    \               if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\
    \                    r++;\n            }\n        }\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmph4lzb3uz: /tmp/tmph4lzb3uz.cpp:28: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long x = 1;\n    a.push_back(x);\n    for(long\
    \ i = 1; i < n; i++) {\n        x = i * i - i + 1;\n        a.push_back(x);\n\
    \    }\n    std::vector<std::vector<long>> b;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            if((a[i] + a[j]) %\
    \ 3 == 0) {\n                b.push_back({a[i], a[j]});\n            }\n     \
    \   }\n    }\n    long count = 0;\n    for(auto i : b) {\n        for(long j =\
    \ 0; j < n; j++) {\n            if(i[0] + i[1] + a[j] == 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp_y8693xh: /tmp/tmp_y8693xh.cpp:41: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> a(n);\n\tfor (int i = 0; i < n; i++) {\n\t\ta[i] =\
    \ i * i - i + 1;\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\t\
    for (int j = i + 1; j < n; j++) {\n\t\t\tfor (int k = j + 1; k < n; k++) {\n\t\
    \t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2pvn9igz: /tmp/tmp2pvn9igz.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113621
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong a[n];\n\tfor(long i=0;i<n;i++)\n\t\ta[i]=i*i-i+1;\n\tint count=0;\n\
    \tfor(long i=0;i<n;i++)\n\t\tfor(long j=i+1;j<n;j++)\n\t\t\tfor(long k=j+1;k<n;k++)\n\
    \t\t\t\tif((a[i]+a[j]+a[k])%3==0)\n\t\t\t\t\tcount++;\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplg8e61b2: /tmp/tmplg8e61b2.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long arr[n];\n    for(long i=0;i<n;i++)\n    {\n        arr[i]=i*i-i+1;\n\
    \    }\n    long ans=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            for(long k=j+1;k<n;k++)\n            {\n             \
    \   if((arr[i]+arr[j]+arr[k])%3==0)\n                {\n                    ans++;\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpvuwmuzo9: /tmp/tmpvuwmuzo9.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    long result = 0;\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    result += 1;\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7zxq1ws_: /tmp/tmp7zxq1ws_.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long result = 0;\n    for (long i = 1; i\
    \ <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for (long i =\
    \ 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for\
    \ (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) {\n                    result++;\n                }\n            }\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long arr[n];\n    arr[0] = 1;\n    for(long i =\
    \ 1; i < n; i++) {\n        arr[i] = i * i - i + 1;\n    }\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((arr[i] + arr[j] + arr[k])\
    \ % 3 == 0) {\n                    ans++;\n                }\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpfiux5nxt: /tmp/tmpfiux5nxt.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n  \
    \  vector<int> v;\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n      \
    \  int val = i*i - i + 1;\n        if(val % 3 == 0){\n            sum += 1;\n\
    \        }\n        v.push_back(val);\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsmd24qz.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpxsmd24qz.cpp:17:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   17 |     vector<int> v;\n      |     ^~~~~~\n/tmp/tmpxsmd24qz.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxsmd24qz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxsmd24qz.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpxsmd24qz.cpp:17:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   17 |     vector<int>\
    \ v;\n      |            ^~~\n/tmp/tmpxsmd24qz.cpp:24:9: error: \u2018v\u2019\
    \ was not declared in this scope\n   24 |         v.push_back(val);\n      | \
    \        ^\n"
  stdout: ''
  timestamp: 1660113621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ a[n];\n  int k;\n  for(int i=0;i<n;i++)\n  {\n      a[i]=i*i-i+1;\n  }\n  int\
    \ count=0;\n  for(int i=0;i<n;i++)\n  {\n      for(int j=i+1;j<n;j++)\n      {\n\
    \          k=j+1;\n          while(k<n)\n          {\n              if((a[i]+a[j]+a[k])%3==0)\n\
    \              {\n                  count++;\n              }\n              k++;\n\
    \          }\n      }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgkzhw_v7: /tmp/tmpgkzhw_v7.cpp:43: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    std::vector<long> a;\n    // a.reserve(n);\n  \
    \  a.resize(n);\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1;\
    \ j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n            \
    \    if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    res++;\n        \
    \    }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp5rla96p8: /tmp/tmp5rla96p8.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong count = 0;\n\tstd::vector<long> a(n);\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i = 0; i < n - 2; i++) {\n\
    \t\tfor (long j = i + 1; j < n - 1; j++) {\n\t\t\tfor (long k = j + 1; k < n;\
    \ k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp21_fvlbc: /tmp/tmp21_fvlbc.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 1);\n    long cnt = 0;\n    std::vector<long> a;\n   \
    \ for (int i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    cnt++;\n                }\n       \
    \     }\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    a.reserve(n);\n    for (long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    long cnt = 0;\n \
    \   for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1;\
    \ j++) {\n            for (long k = j + 1; k < n; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0) {\n                    cnt++;\n                }\n\
    \            }\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 1);\n    std::vector<long> a(n);\n    long ans = 0;\n\
    \    long temp;\n    for (int i = 0; i < n; i++) {\n        temp = i * i - i +\
    \ 1;\n        a[i] = temp;\n        for (int j = i + 1; j < n; j++) {\n      \
    \      for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    ans++;\n                }\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7bisjh7i: /tmp/tmp7bisjh7i.cpp:34: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long l = n - 2;\n    l = l*(l + 1)/2;\n    return l;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp5dssvt96: /tmp/tmp5dssvt96.cpp:20: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long arr[n], count=0;\n    for(long i=0; i<n; i++)\n        arr[i]\
    \ = i*i - i + 1;\n    for(long i=0; i<n-2; i++)\n        for(long j=i+1; j<n-1;\
    \ j++)\n            for(long k=j+1; k<n; k++)\n                if((arr[i] + arr[j]\
    \ + arr[k])%3 == 0)\n                    count++;\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpeylvngmy: /tmp/tmpeylvngmy.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long cnt = 0;\n    for(int i = 0; i < n - 2; i++)\n     \
    \   for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  cnt++;\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113622
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 1);\n    std::vector<long> a;\n    for (int i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    long cnt = 0;\n \
    \   for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    cnt++;\n                }\n       \
    \     }\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113622
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmps7ftxgxl: /tmp/tmps7ftxgxl.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    long c = 0;\n    for(long i = 0; i < n; i++) {\n \
    \       a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n - 2; i++) {\n\
    \        for(long j = i + 1; j < n - 1; j++) {\n            for(long k = j + 1;\
    \ k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n       \
    \             c++;\n                }\n            }\n        }\n    }\n    return\
    \ c;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqcnnyacp: /tmp/tmpqcnnyacp.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  \n  std::vector<long> a(n);\n  int count = 0;\n  for(int i = 0; i <\
    \ n; i++)\n  {\n    a[i] = i * i - i + 1;\n  }\n  for(int i = 0; i < n; i++)\n\
    \  {\n    for(int j = i + 1; j < n; j++)\n    {\n      for(int k = j + 1; k <\
    \ n; k++)\n      {\n        if((a[i] + a[j] + a[k]) % 3 == 0)\n        {\n   \
    \       count += 1;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmal1o6mz: /tmp/tmpmal1o6mz.cpp:38: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++)\n        a[i] = i * i - i + 1;\n    for (long i = 0; i < n - 2;\
    \ i++)\n        for (long j = i + 1; j < n - 1; j++)\n            for (long k\
    \ = j + 1; k < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n \
    \                   result++;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp38ok0qt3: /tmp/tmp38ok0qt3.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113623
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long dp[n+1][4];\n    for(long i=0;i<n+1;i++)\n    {\n        for(long\
    \ j=0;j<4;j++)\n        {\n            dp[i][j]=0;\n        }\n    }\n    dp[0][0]=1;\n\
    \    for(long i=1;i<n+1;i++)\n    {\n        dp[i][i*i-i+1%3]+=1;\n        for(long\
    \ j=0;j<4;j++)\n        {\n            dp[i][j]+=dp[i-1][j];\n        }\n    }\n\
    \    return dp[n][0];\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> v;\n    for(int i=1;i<=n;i++)\n    {\n        v.push_back(i*i-i+1);\n\
    \    }\n    int count=0;\n    for(int i=0;i<v.size();i++)\n    {\n        for(int\
    \ j=i+1;j<v.size();j++)\n        {\n            for(int k=j+1;k<v.size();k++)\n\
    \            {\n                if((v[i]+v[j]+v[k])%3==0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113623
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long long result = 0;\n    long long* a = new long long[n];\n    for\
    \ (long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (long i = 0;\
    \ i < n; i++)\n        for (long j = i + 1; j < n; j++)\n            for (long\
    \ k = j + 1; k < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n\
    \                    result++;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpw6v64583: /tmp/tmpw6v64583.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long sum = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    sum += 1;\n                }\n            }\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpc9j639_a: /tmp/tmpc9j639_a.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113623
