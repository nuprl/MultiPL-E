language: cpp
name: HumanEval_58_common
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n   std::vector<long> commonElements;\n   std::sort(l1.begin(), l1.end());\n\
    \   std::sort(l2.begin(), l2.end());\n   std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(),\n      std::back_inserter(commonElements));\n   return\
    \ commonElements;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::set<long> first_set(l1.begin(), l1.end());\n\tstd::set<long> second_set(l2.begin(),\
    \ l2.end());\n\tstd::vector<long> out;\n\tstd::set_intersection(first_set.begin(),\
    \ first_set.end(), second_set.begin(), second_set.end(), std::back_inserter(out));\n\
    \treturn out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  l1.erase(std::unique(l1.begin(), l1.end()), l1.end());\n  l2.erase(std::unique(l2.begin(),\
    \ l2.end()), l2.end());\n  std::vector<long> ret;\n  for (auto elem : l1) {\n\
    \    auto it = std::find(l2.begin(), l2.end(), elem);\n    if (it != l2.end())\
    \ {\n      ret.push_back(elem);\n    }\n  }\n  return ret;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l3;\n    for (int i = 0; i < l1.size(); i++) {\n\
    \        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                l3.push_back(l1[i]);\n            }\n        }\n    }\n \
    \   return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy4939hbz: /tmp/tmpy4939hbz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // Sorting l1, l2.\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    // Initializing unique common elements.\n    std::vector<long>\
    \ unique_common;\n    // Merging and iterating over the sorted vectors.\n    std::merge(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n               std::back_inserter(unique_common));\n\
    \    // Removing the duplicates.\n    std::vector<long>::iterator it;\n    it\
    \ = std::unique(unique_common.begin(), unique_common.end());\n    unique_common.resize(std::distance(unique_common.begin(),\
    \ it));\n    return unique_common;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9daod8w6: /tmp/tmp9daod8w6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> retval;\n    long index1 = 0;\n    long index2\
    \ = 0;\n    while (index1 < l1.size() && index2 < l2.size()) {\n        if (l1[index1]\
    \ == l2[index2]) {\n            retval.push_back(l1[index1]);\n            index1++;\n\
    \            index2++;\n        } else if (l1[index1] < l2[index2]) {\n      \
    \      index1++;\n        } else {\n            index2++;\n        }\n    }\n\
    \    return retval;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf9smt0to: /tmp/tmpf9smt0to.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> res;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tunsigned long i = 0, j = 0;\n\twhile(i < l1.size() && j < l2.size())\
    \ {\n\t\tif(l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else if(l1[i] > l2[j]) {\n\t\t\
    \tj++;\n\t\t} else {\n\t\t\tif(res.size() == 0 || l1[i] != res.back()) {\n\t\t\
    \t\tres.push_back(l1[i]);\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tlong i = 0, j = 0;\n\tstd::vector<long> res;\n\twhile (i < l1.size()\
    \ && j < l2.size()) {\n\t\tif (l1[i] == l2[j]) {\n\t\t\tres.push_back(l1[i]);\n\
    \t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t\
    }\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0at0szxn: /tmp/tmp0at0szxn.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\t// l1 is the large list\n\t// l2 is the small list\n\tif (l1.size()\
    \ > l2.size()) {\n\t\tstd::vector<long> l3 = l1;\n\t\tl1 = l2;\n\t\tl2 = l3;\n\
    \t}\n\tstd::vector<long> out;\n\tfor (std::vector<long>::iterator it = l1.begin();\
    \ it != l1.end(); ++it) {\n\t\tif (std::find(l2.begin(), l2.end(), *it) != l2.end())\
    \ {\n\t\t\tout.push_back(*it);\n\t\t}\n\t}\n\tstd::sort(out.begin(), out.end());\n\
    \treturn out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> temp;\n    if(l1.size()>l2.size())\n        std::swap(l1,l2);\n\
    \    for(long i=0;i<l1.size();i++)\n    {\n        if(l2.find(l1[i])!=l2.end())\n\
    \            temp.push_back(l1[i]);\n    }\n    return temp;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgq9i8v5b.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpgq9i8v5b.cpp:14:15: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   14\
    \ |         if(l2.find(l1[i])!=l2.end())\n      |               ^~~~\n"
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    for (long a : l1) {\n        for (long\
    \ b : l2) {\n            if (a == b) {\n                result.push_back(a);\n\
    \                break;\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    result.erase(std::unique(result.begin(), result.end()),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> ans;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(ans));\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result));\n  return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // your code here\n    std::vector<long> result;\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n    std::unique(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // Your code here.\n    std::vector<long> temp;\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    for(auto it = l1.begin();\
    \ it != l1.end(); it++)\n    {\n        if(std::binary_search(l2.begin(), l2.end(),\
    \ *it))\n        {\n            temp.push_back(*it);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    temp.erase(std::unique(temp.begin(), temp.end()), temp.end());\n\
    \    return temp;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    l1.erase(std::unique(l1.begin(), l1.end()), l1.end());\n    l2.erase(std::unique(l2.begin(),\
    \ l2.end()), l2.end());\n    std::vector<long> res;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n        std::back_inserter(res));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l;\n    for (int i = 0; i < l1.size(); i++) {\n\
    \        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                l.push_back(l1[i]);\n                l1.erase(l1.begin()\
    \ + i);\n                l2.erase(l2.begin() + j);\n                i--;\n   \
    \             break;\n            }\n        }\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> out;\n  if (l1.size() <= l2.size()) {\n    std::vector<long>::iterator\
    \ it, res_it;\n    std::sort(l1.begin(), l1.end());\n    for (it = l2.begin();\
    \ it != l2.end(); ++it) {\n      res_it = std::lower_bound(l1.begin(), l1.end(),\
    \ *it);\n      if (res_it != l1.end() && *res_it == *it) {\n        out.push_back(*it);\n\
    \      }\n    }\n  } else {\n    std::vector<long>::iterator it, res_it;\n   \
    \ std::sort(l2.begin(), l2.end());\n    for (it = l1.begin(); it != l1.end();\
    \ ++it) {\n      res_it = std::lower_bound(l2.begin(), l2.end(), *it);\n     \
    \ if (res_it != l2.end() && *res_it == *it) {\n        out.push_back(*it);\n \
    \     }\n    }\n  }\n  return out;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf_a9_t70: /tmp/tmpf_a9_t70.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // your code here\n    std::vector<long> res;\n    sort(l1.begin(),\
    \ l1.end());\n    sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), back_inserter(res));\n    return res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> output_vector;\n    if (l1.size() > l2.size())\
    \ {\n        std::swap(l1, l2);\n    }\n    if (l1.size() == 0) {\n        return\
    \ output_vector;\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    int p1 = 0;\n    int p2 = 0;\n    int prev = l1[0];\n    while\
    \ (p1 < l1.size() && p2 < l2.size()) {\n        if (l1[p1] == l2[p2]) {\n    \
    \        if (l1[p1] != prev) {\n                output_vector.push_back(l1[p1]);\n\
    \                prev = l1[p1];\n            }\n            p1++;\n          \
    \  p2++;\n        } else if (l1[p1] < l2[p2]) {\n            p1++;\n        }\
    \ else {\n            p2++;\n        }\n    }\n    return output_vector;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwrw10v67: /tmp/tmpwrw10v67.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    for (auto elem : l1) {\n        if (std::find(l2.begin(),\
    \ l2.end(), elem) != l2.end()) {\n            res.push_back(elem);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> l3;\n  std::vector<long>::iterator it1, it2;\n  for\
    \ (it1 = l1.begin(); it1 != l1.end(); it1++) {\n    for (it2 = l2.begin(); it2\
    \ != l2.end(); it2++) {\n      if (*it1 == *it2) {\n        l3.push_back(*it1);\n\
    \        break;\n      }\n    }\n  }\n  std::sort(l3.begin(), l3.end());\n  return\
    \ l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> v;\n    int n = l1.size();\n    int m = l2.size();\n\
    \    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (l1[i] < l2[j])\
    \ {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n\
    \        } else {\n            v.push_back(l1[i]);\n            i++;\n       \
    \     j++;\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppqx6tw0n: /tmp/tmppqx6tw0n.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> result;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(result));\n  return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> retval;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(retval));\n    return retval;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> answer;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(answer));\n  return answer;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> ans;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    long i = 0, j = 0;\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            ans.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    if (l1.size() > l2.size())\n        std::swap(l1, l2);\n    std::set<long>\
    \ s(l1.begin(), l1.end());\n    std::vector<long> res;\n    for (const auto& v\
    \ : l2) {\n        if (s.count(v)) {\n            res.push_back(v);\n        \
    \    s.erase(v);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3mlvrist: /tmp/tmp3mlvrist.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> ret;\n\tstd::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(ret));\n\treturn ret;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmdrt8yqn: /tmp/tmpmdrt8yqn.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> solution;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(solution));\n    return solution;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l3;\n    std::sort(l1.begin(), l1.end());\n   \
    \ std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(l3));\n    return l3;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> result;\n  auto first1 = l1.begin();\n  auto last1 = l1.end();\n\
    \  auto first2 = l2.begin();\n  auto last2 = l2.end();\n  while (first1 != last1\
    \ && first2 != last2) {\n    if (*first1 < *first2) {\n      ++first1;\n    }\
    \ else if (*first2 < *first1) {\n      ++first2;\n    } else {\n      if (result.empty()\
    \ || *result.rbegin() != *first1) {\n        result.push_back(*first1);\n    \
    \  }\n      ++first1;\n      ++first2;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> v;\n  std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(v));\n  return v;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfmqjjk6s: /tmp/tmpfmqjjk6s.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> res;\n    for (auto e : l1)\n        if (std::binary_search(l2.begin(),\
    \ l2.end(), e))\n            res.push_back(e);\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // Check for empty vector\n    if(l1.size() == 0 || l2.size() ==\
    \ 0) {\n        std::vector<long> v;\n        return v;\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> v;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tint j = 0;\n\tstd::vector<long> result;\n\tfor (int i = 0; i < l1.size(); i++)\
    \ {\n\t\twhile (j < l2.size() && l2[j] < l1[i]) {\n\t\t\tj++;\n\t\t}\n\t\tif (j\
    \ >= l2.size()) {\n\t\t\tbreak;\n\t\t}\n\t\tif (l1[i] == l2[j]) {\n\t\t\tif (result.size()\
    \ == 0 || result.back() != l1[i]) {\n\t\t\t\tresult.push_back(l1[i]);\n\t\t\t\
    }\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3zgr00q0: /tmp/tmp3zgr00q0.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> r;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tfor (long i1 = 0, i2 = 0; i1 < l1.size() && i2 < l2.size(); )\
    \ {\n\t\tif (l1[i1] == l2[i2]) {\n\t\t\tif (r.size() == 0 || r.back() != l1[i1])\
    \ {\n\t\t\t\tr.push_back(l1[i1]);\n\t\t\t}\n\t\t\ti1++;\n\t\t\ti2++;\n\t\t} else\
    \ if (l1[i1] < l2[i2]) {\n\t\t\ti1++;\n\t\t} else {\n\t\t\ti2++;\n\t\t}\n\t}\n\
    \treturn r;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> common;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(),\n    std::back_inserter(common));\n  return common;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> l;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l));\n\treturn l;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> v;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(v));\n  return v;\n}\nint main() {\n    auto candidate =\
    \ common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    assert(l1.size() >= 0);\n    assert(l2.size() >= 0);\n    std::vector<long>\
    \ l3;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l3));\n\
    \    return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n  \
    \  std::vector<long> l;\n    int i = 0, j = 0;\n    while (i < l1.size() && j\
    \ < l2.size()) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else\
    \ if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n    }\n    return l;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::set<long> s1(l1.begin(), l1.end());\n    std::set<long> s2(l2.begin(),\
    \ l2.end());\n    std::vector<long> res;\n    std::set_intersection(s1.begin(),\
    \ s1.end(), s2.begin(), s2.end(),\n                          std::back_inserter(res));\n\
    \    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> res;\n\tfor (auto it1 = l1.begin(); it1 != l1.end();\
    \ it1++) {\n\t\tfor (auto it2 = l2.begin(); it2 != l2.end(); it2++) {\n\t\t\t\
    if (*it1 == *it2) {\n\t\t\t\tres.push_back(*it1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\tstd::sort(res.begin(), res.end());\n\tres.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101302
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> res;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  for (auto it = l1.begin(); it != l1.end(); it++) {\n    if (*it\
    \ == *(it + 1)) {\n      it++;\n    } else {\n      if (std::binary_search(l2.begin(),\
    \ l2.end(), *it)) {\n        res.push_back(*it);\n      }\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101302
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> ans;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \                        std::back_inserter(ans));\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101302
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> res;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res));\n  return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101302
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator itr1,\
    \ itr2;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n  \
    \  itr1 = l1.begin();\n    itr2 = l2.begin();\n    while (itr1 != l1.end() &&\
    \ itr2 != l2.end()) {\n        if (*itr1 == *itr2) {\n            if (result.size()\
    \ == 0 || result.back() != *itr1) {\n                result.push_back(*itr1);\n\
    \            }\n            itr1++;\n            itr2++;\n        } else if (*itr1\
    \ < *itr2) {\n            itr1++;\n        } else {\n            itr2++;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long i = 0, j = 0;\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    while (i < l1.size() &&\
    \ j < l2.size()) {\n        if (l1[i] < l2[j])\n            i++;\n        else\
    \ if (l1[i] > l2[j])\n            j++;\n        else {\n            res.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l(l1.size() + l2.size());\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), l.begin());\n\
    \    l.resize(it - l.begin());\n    return l;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> z;\n    long i, j;\n    i = j = 0;\n    while(i\
    \ < l1.size() && j < l2.size()) {\n        if(l1[i] < l2[j]) {\n            i++;\n\
    \        } else if(l1[i] > l2[j]) {\n            j++;\n        } else {\n    \
    \        z.push_back(l1[i]);\n            i++;\n            j++;\n        }\n\
    \    }\n    return z;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpalmtf2bw: /tmp/tmpalmtf2bw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    long i=0, j=0;\n    std::vector<long> res;\n    while (i<l1.size() && j<l2.size())\
    \ {\n        if (l1[i] == l2[j]) {\n            res.push_back(l1[i]);\n      \
    \      i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n         \
    \   i++;\n        } else {\n            j++;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> l3;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l3));\n    std::sort(l3.begin(), l3.end());\n \
    \   l3.erase(std::unique(l3.begin(), l3.end()), l3.end());\n    return l3;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it1 =\
    \ l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    while (it1\
    \ != l1.end() && it2 != l2.end()) {\n        if (*it1 == *it2) {\n           \
    \ if (result.empty() || *it1 != result.back())\n                result.push_back(*it1);\n\
    \            it1++;\n            it2++;\n        } else if (*it1 < *it2) {\n \
    \           it1++;\n        } else {\n            it2++;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcsmoj2vk: /tmp/tmpcsmoj2vk.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> c;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(c));\n\treturn c;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> intersection;\n  std::sort(l1.begin(), l1.end());\n\
    \  std::sort(l2.begin(), l2.end());\n  std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(intersection));\n  return intersection;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> inter;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(inter));\n    return inter;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  int i = 0, j = 0;\n  while (i < l1.size() && j < l2.size()) {\n\
    \    if (l1[i] == l2[j]) {\n      result.push_back(l1[i]);\n      i++;\n     \
    \ j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101302
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> v;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(v));\n    return v;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tstd::vector<long>\
    \ ret;\n\t// set_intersection requires that the two vectors must be sorted\n\t\
    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(ret));\n\
    \treturn ret;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> v;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(v));\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> output = {};\n    sort(l1.begin(), l1.end());\n\
    \    sort(l2.begin(), l2.end());\n    for (int i = 0; i < l1.size(); i++) {\n\
    \        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                output.push_back(l1[i]);\n                l2.erase(l2.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> vec;\n\tlong size1 = l1.size();\n\tlong size2 = l2.size();\n\
    \tlong i = 0;\n\tlong j = 0;\n\twhile (i < size1 && j < size2) {\n\t\tif (l1[i]\
    \ == l2[j]) {\n\t\t\tif (vec.size() == 0 || vec[vec.size() - 1] != l1[i])\n\t\t\
    \t\tvec.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i] <\
    \ l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn vec;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvn8203u0: /tmp/tmpvn8203u0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \                        std::back_inserter(result));\n  return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  int i1 = 0;\n  int i2 = 0;\n  while(i1 < l1.size() && i2 < l2.size())\
    \ {\n    if(l1[i1] == l2[i2]) {\n      if(result.size() == 0 || l1[i1] != result.back())\
    \ {\n        result.push_back(l1[i1]);\n      }\n      i1++;\n      i2++;\n  \
    \  } else if(l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> l3;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l3));\n    return l3;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> l3;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l3));\n\treturn l3;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    assert(l1.size() > 0);\n    assert(l2.size() > 0);\n    std::vector<long>\
    \ out;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(out));\n\
    \    return out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_smy__ly: /tmp/tmp_smy__ly.cpp:10: std::vector<long int> common(std::vector<long
    int>, std::vector<long int>): Assertion `l2.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l = std::vector<long>({});\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(l));\n    return l;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101304
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::set<long> a(l1.begin(), l1.end());\n    std::set<long> b(l2.begin(),\
    \ l2.end());\n    std::vector<long> result;\n    std::set_intersection(a.begin(),\
    \ a.end(), b.begin(), b.end(), std::back_inserter(result));\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\t//std::cout << \"common of \" << l1 << \" \" << l2 << std::endl;\n\t\
    std::vector<long> result;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(result));\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_2j6vnj2: /tmp/tmp_2j6vnj2.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> inter;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(inter));\n\treturn inter;\n}\nint main() {\n  \
    \  auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> v;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(v));\n    return v;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> x;\n    set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(x));\n    return x;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> r;\n  r.clear();\n  sort(l1.begin(), l1.end());\n\
    \  sort(l2.begin(), l2.end());\n  size_t j = 0;\n  long prev = 0;\n  for (size_t\
    \ i = 0; i < l1.size(); i++) {\n    long a = l1[i];\n    for (; j < l2.size();\
    \ j++) {\n      long b = l2[j];\n      if (a < b) {\n        break;\n      }\n\
    \      if (a == b && a != prev) {\n        r.push_back(a);\n        prev = a;\n\
    \        break;\n      }\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> ans;\n\tint i = 0, j = 0;\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\twhile (i < l1.size() && j\
    \ < l2.size()) {\n\t\tif (l1[i] == l2[j]) {\n\t\t\tans.push_back(l1[i]);\n\t\t\
    \ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\
    \telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> commonValues;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(commonValues));\n    return commonValues;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    if (l1.size() == 0 || l2.size() == 0) return std::vector<long>();\n\
    \    std::vector<long> p;\n    // Merge Sort: O(n)\n    std::vector<long> l =\
    \ l1;\n    l.insert(l.end(), l2.begin(), l2.end());\n    std::sort(l.begin(),\
    \ l.end());\n    // Remove Duplicates: O(n)\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    // Compare: O(n)\n    for (auto\
    \ i : l) {\n        if (std::binary_search(l1.begin(), l1.end(), i) && std::binary_search(l2.begin(),\
    \ l2.end(), i)) {\n            p.push_back(i);\n        }\n    }\n    return p;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg0kepxrr: /tmp/tmpg0kepxrr.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101304
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> out;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(out));\n    return out;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // Remove duplicates from l1\n    std::sort(l1.begin(), l1.end());\n\
    \    l1.erase(std::unique(l1.begin(), l1.end()), l1.end());\n    // Remove duplicates\
    \ from l2\n    std::sort(l2.begin(), l2.end());\n    l2.erase(std::unique(l2.begin(),\
    \ l2.end()), l2.end());\n    // Sort both lists\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    // Create a result list\n    std::vector<long>\
    \ result;\n    // Compare\n    int i = 0, j = 0;\n    while(i < l1.size() && j\
    \ < l2.size()) {\n        if(l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if(l1[i] < l2[j]) {\n    \
    \        i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> res;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \                        std::back_inserter(res));\n  return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    for (long i = 0; i < l1.size(); i++)\
    \ {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                res.push_back(l1[i]);\n                l2.erase(l2.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    int it1=0,\
    \ it2=0;\n    while(it1<l1.size() && it2<l2.size()){\n        if(l1[it1]==l2[it2]){\n\
    \            result.push_back(l1[it1]);\n            it1++;\n            it2++;\n\
    \        }\n        else if(l1[it1]>l2[it2]){\n            it2++;\n        }\n\
    \        else{\n            it1++;\n        }\n    }\n    std::vector<long>::iterator\
    \ ip;\n    ip = std::unique(result.begin(), result.end());\n    result.resize(std::distance(result.begin(),\
    \ ip));\n    return result;\n}\nint main() {\n    auto candidate = common;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> commonElements;\n\tfor (auto v1: l1) {\n\t\tfor (auto\
    \ v2: l2) {\n\t\t\tif (v1 == v2) {\n\t\t\t\tcommonElements.push_back(v1);\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t// Sort elements.\n\tstd::sort(commonElements.begin(),\
    \ commonElements.end());\n\t// Remove duplicate elements.\n\tauto it = std::unique(commonElements.begin(),\
    \ commonElements.end());\n\tcommonElements.resize(std::distance(commonElements.begin(),\
    \ it));\n\treturn commonElements;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> l3 = l1;\n\tstd::vector<long> l4 = l2;\n\tstd::sort(l3.begin(),\
    \ l3.end());\n\tstd::sort(l4.begin(), l4.end());\n\tauto it = std::set_intersection(l3.begin(),\
    \ l3.end(), l4.begin(), l4.end(), l3.begin());\n\tl3.resize(it - l3.begin());\n\
    \treturn l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101304
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> result;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> r;\n\tif(l1.size() < l2.size()) {\n\t\tfor(int i\
    \ = 0; i < l1.size(); i++) {\n\t\t\tfor(int j = 0; j < l2.size(); j++) {\n\t\t\
    \t\tif(l1[i] == l2[j]) {\n\t\t\t\t\tr.push_back(l1[i]);\n\t\t\t\t\tbreak;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor(int i = 0; i < l2.size(); i++) {\n\t\
    \t\tfor(int j = 0; j < l1.size(); j++) {\n\t\t\t\tif(l2[i] == l1[j]) {\n\t\t\t\
    \t\tr.push_back(l2[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return r;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9svzsmyp: /tmp/tmp9svzsmyp.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101304
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> res;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res));\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101304
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    long i = 0, j = 0;\n    while (i <\
    \ l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> list, result;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(list));\n    std::unique_copy(list.begin(),\
    \ list.end(), std::back_inserter(result));\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> v;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(),\
    \ l2.end());\n\tset_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n\
    \treturn v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> ans;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(ans));\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> r;\n\tfor (long i = 0; i < l1.size(); i++) {\n\t\t\
    for (long j = 0; j < l2.size(); j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\
    r.push_back(l1[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(r.begin(),\
    \ r.end());\n\treturn std::vector<long>(r.begin(), std::unique(r.begin(), r.end()));\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> ans;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(ans));\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long>::iterator end_it;\n    end_it = std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), l1.begin());\n    l1.resize(end_it - l1.begin());\n\
    \    return l1;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // Sorting both the vectors\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    // Set of common elements\n    std::vector<long>\
    \ common_elements;\n    // Iterators for both the vectors\n    std::vector<long>::iterator\
    \ i, j;\n    i = l1.begin();\n    j = l2.begin();\n    // If the elements are\
    \ equal then the elements are in both vectors\n    while(i != l1.end() && j !=\
    \ l2.end()) {\n        if(*i == *j) {\n            // Push the element to the\
    \ set\n            common_elements.push_back(*i);\n            // Increment the\
    \ iterators to next elements\n            i++;\n            j++;\n        }\n\
    \        else if(*i < *j) {\n            // Increment the iterator for 1st vector\n\
    \            i++;\n        }\n        else {\n            // Increment the iterator\
    \ for 2nd vector\n            j++;\n        }\n    }\n    return common_elements;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    int i = 0, j = 0;\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            res.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpthwl1v1t: /tmp/tmpthwl1v1t.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    int len1=l1.size();\n    int len2=l2.size();\n    int i=0,j=0;\n\
    \    std::vector<long> v;\n    while(i<len1 && j<len2){\n        if(l1[i]==l2[j]){\n\
    \            v.push_back(l1[i]);\n            i++;\n            j++;\n       \
    \ }\n        else if(l1[i]<l2[j])\n            i++;\n        else\n          \
    \  j++;\n    }\n    return v;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_7xqp38i: /tmp/tmp_7xqp38i.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> ret;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    unsigned long i = 0;\n    unsigned long\
    \ j = 0;\n    while(i < l1.size() && j < l2.size()) {\n        if(l1[i] == l2[j])\
    \ {\n            if(ret.size() == 0 || ret.back() != l1[i])\n                ret.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if(l1[i] < l2[j])\n      \
    \      i++;\n        else\n            j++;\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // Your code here.\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> l3;\n    int i = 0, j = 0;\n    while(i <\
    \ l1.size() && j < l2.size()) {\n        if(l1[i] < l2[j]) {\n            i++;\n\
    \        }\n        else if(l1[i] > l2[j]) {\n            j++;\n        }\n  \
    \      else {\n            l3.push_back(l1[i]);\n            i++;\n          \
    \  j++;\n        }\n    }\n    return l3;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101305
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> ret;\n    for (auto it1 = l1.begin(); it1 != l1.end();\
    \ ++it1) {\n        for (auto it2 = l2.begin(); it2 != l2.end(); ++it2) {\n  \
    \          if (*it1 == *it2) {\n                ret.push_back(*it1);\n       \
    \         break;\n            }\n        }\n    }\n    std::sort(ret.begin(),\
    \ ret.end());\n    ret.erase(std::unique(ret.begin(), ret.end()), ret.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l3;\n    std::sort(l1.begin(), l1.end());\n   \
    \ std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(l3));\n    return l3;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l3;\n    for (auto l1i: l1) {\n        for (auto\
    \ l2i: l2) {\n            if (l1i == l2i) {\n                l3.push_back(l1i);\n\
    \                break;\n            }\n        }\n    }\n    std::sort(l3.begin(),\
    \ l3.end());\n    l3.erase(std::unique(l3.begin(), l3.end()), l3.end());\n   \
    \ return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> ans;\n    auto it1 = l1.begin();\n    auto it2 = l2.begin();\n\
    \    while (it1 != l1.end() && it2 != l2.end()) {\n        if (*it1 == *it2) {\n\
    \            ans.push_back(*it1);\n            ++it1;\n            ++it2;\n  \
    \      } else if (*it1 < *it2) {\n            ++it1;\n        } else {\n     \
    \       ++it2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    // TODO\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n                          std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> res;\n\tint len1 = l1.size();\n\tint len2 = l2.size();\n\
    \tint i = 0;\n\tint j = 0;\n\twhile (i < len1 && j < len2) {\n\t\tif (l1[i] ==\
    \ l2[j]) {\n\t\t\tres.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\
    \ if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\
    \treturn res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpef1t4dlw: /tmp/tmpef1t4dlw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> result;\n    for (int i = 0, j = 0; i < l1.size() && j\
    \ < l2.size(); ) {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> res;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res));\n  return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101302
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    for (auto item: l1) {\n        auto\
    \ it = std::find(l2.begin(), l2.end(), item);\n        if (it != l2.end()) {\n\
    \            result.push_back(item);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  assert(l1.size() > 1);\n  assert(l2.size() > 1);\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> ans;\n \
    \ for (int i = 0; i < l1.size(); i++) {\n    if (i > 0 and l1[i - 1] == l1[i])\
    \ {\n      continue;\n    }\n    for (int j = 0; j < l2.size(); j++) {\n     \
    \ if (j > 0 and l2[j - 1] == l2[j]) {\n        continue;\n      }\n      if (l1[i]\
    \ == l2[j]) {\n        ans.push_back(l1[i]);\n      }\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8i32rj1a: /tmp/tmp8i32rj1a.cpp:10: std::vector<long int> common(std::vector<long
    int>, std::vector<long int>): Assertion `l2.size() > 1'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> output;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tauto end = std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), output.begin());\n\toutput.resize(end - output.begin());\n\treturn\
    \ output;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \  std::back_inserter(result));\n  return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    long i = 0, j = 0;\n    while(i < l1.size()\
    \ && j < l2.size()) {\n        if(l1[i] == l2[j]) {\n            if(!result.size()\
    \ || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n   \
    \         }\n            i++;\n            j++;\n        } else if(l1[i] < l2[j])\
    \ {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> ans;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  int i = 0, j = 0;\n  while (i < l1.size() && j < l2.size()) {\n\
    \    if (l1[i] < l2[j]) {\n      i++;\n    } else if (l1[i] > l2[j]) {\n     \
    \ j++;\n    } else {\n      ans.push_back(l1[i]);\n      i++;\n      j++;\n  \
    \  }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> v;\n\tint i, j;\n\tfor (i = 0, j = 0; i < l1.size()\
    \ && j < l2.size(); ) {\n\t\tif (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else if (l1[i]\
    \ > l2[j]) {\n\t\t\tj++;\n\t\t} else {\n\t\t\tv.push_back(l1[i]);\n\t\t\ti++;\n\
    \t\t\tj++;\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpl5capkef: /tmp/tmpl5capkef.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    auto b1 = l1.begin();\n    auto e1 = l1.end();\n    auto b2 = l2.begin();\n\
    \    auto e2 = l2.end();\n    std::vector<long> ret;\n    while (b1 != e1 && b2\
    \ != e2) {\n        if (*b1 < *b2) ++b1;\n        else if (*b2 < *b1) ++b2;\n\
    \        else {\n            ret.push_back(*b1);\n            ++b1;\n        \
    \    ++b2;\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp981ale1a: /tmp/tmp981ale1a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> res;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(res));\n  return res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> result;\n  for (int i = 0, j = 0; i < l1.size() && j < l2.size();)\
    \ {\n    if (l1[i] < l2[j]) {\n      i++;\n    } else if (l1[i] > l2[j]) {\n \
    \     j++;\n    } else {\n      result.push_back(l1[i]);\n      i++;\n      j++;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> result;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(result));\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> v;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(v));\n\treturn v;\n}\nint main() {\n    auto candidate =\
    \ common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> s;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(),\
    \ l2.end());\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    s.push_back(l1[i]);\n                break;\n            }\n        }\n \
    \   }\n    sort(s.begin(), s.end());\n    vector<long>::iterator it;\n    it =\
    \ unique(s.begin(), s.end());\n    s.resize(distance(s.begin(), it));\n    return\
    \ s;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwu5ry3d.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpfwu5ry3d.cpp:21:5: error: \u2018\
    vector\u2019 was not declared in this scope\n   21 |     vector<long>::iterator\
    \ it;\n      |     ^~~~~~\n/tmp/tmpfwu5ry3d.cpp:21:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwu5ry3d.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwu5ry3d.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpfwu5ry3d.cpp:21:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   21 |     vector<long>::iterator\
    \ it;\n      |            ^~~~\n/tmp/tmpfwu5ry3d.cpp:22:5: error: \u2018it\u2019\
    \ was not declared in this scope; did you mean \u2018int\u2019?\n   22 |     it\
    \ = unique(s.begin(), s.end());\n      |     ^~\n      |     int\n"
  stdout: ''
  timestamp: 1660101305
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> v;\n  std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), back_inserter(v));\n  std::sort(v.begin(), v.end());\n\
    \  return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdmqzr7fh: /tmp/tmpdmqzr7fh.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> answer;\n    for (int i = 0; i < l1.size(); i++)\
    \ {\n        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                answer.push_back(l1[i]);\n                break;\n      \
    \      }\n        }\n    }\n    sort(answer.begin(), answer.end());\n    answer.erase(unique(answer.begin(),\
    \ answer.end()), answer.end());\n    return answer;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> temp;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(temp));\n\treturn temp;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> v;\n\tint size1 = l1.size();\n\tint size2 = l2.size();\n\
    \tlong i = 0;\n\tlong j = 0;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\twhile (i < size1 && j < size2) {\n\t\tif (l1[i] < l2[j]) {\n\t\
    \t\ti++;\n\t\t}\n\t\telse if (l1[i] > l2[j]) {\n\t\t\tj++;\n\t\t}\n\t\telse {\n\
    \t\t\tif (v.size() == 0 || v.back() != l1[i]) {\n\t\t\t\tv.push_back(l1[i]);\n\
    \t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n  \
    \  auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> ret;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(ret));\n\treturn ret;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> l;\n  l.reserve(l1.size() + l2.size());\n  std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(l));\n  return l;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqncs5dpn: /tmp/tmpqncs5dpn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> l;\n    set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l));\n    return l;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> list1(l1.size() + l2.size());\n  std::vector<long>::iterator\
    \ it;\n  it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ list1.begin());\n  list1.resize(it - list1.begin());\n  return list1;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> result;\n\tstd::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa0jzw743: /tmp/tmpa0jzw743.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> res;\n  sort(l1.begin(), l1.end());\n  sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ back_inserter(res));\n  return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  auto it2 = l2.begin();\n  std::vector<long> result;\n  for (auto it1 : l1)\
    \ {\n    while (it2 != l2.end() && *it2 < it1)\n      it2++;\n    if (it2 != l2.end()\
    \ && *it2 == it1) {\n      result.push_back(it1);\n      it2++;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\t// Merge sort\n\tauto merge = [](std::vector<long>& l, long lo, long\
    \ hi) -> std::vector<long> {\n\t\tif(lo == hi) {\n\t\t\treturn {l[lo]};\n\t\t\
    }\n\t\tlong mid = (lo + hi) / 2;\n\t\tauto l1 = merge(l, lo, mid);\n\t\tauto l2\
    \ = merge(l, mid + 1, hi);\n\t\tstd::vector<long> res;\n\t\tauto i1 = l1.begin();\n\
    \t\tauto i2 = l2.begin();\n\t\twhile(i1 != l1.end() && i2 != l2.end()) {\n\t\t\
    \tif(*i1 <= *i2) {\n\t\t\t\tres.push_back(*i1);\n\t\t\t\ti1++;\n\t\t\t} else {\n\
    \t\t\t\tres.push_back(*i2);\n\t\t\t\ti2++;\n\t\t\t}\n\t\t}\n\t\twhile(i1 != l1.end())\
    \ {\n\t\t\tres.push_back(*i1);\n\t\t\ti1++;\n\t\t}\n\t\twhile(i2 != l2.end())\
    \ {\n\t\t\tres.push_back(*i2);\n\t\t\ti2++;\n\t\t}\n\t\treturn res;\n\t};\n\t\
    auto l = merge(l1, 0, l1.size() - 1);\n\tl = merge(l, 0, l.size() - 1);\n\tl =\
    \ merge(l2, 0, l2.size() - 1);\n\tl = merge(l, 0, l.size() - 1);\n\t// Find unique\
    \ elements\n\tstd::vector<long> res;\n\tlong i = 0;\n\twhile(i < l.size()) {\n\
    \t\tlong begin = i;\n\t\twhile(i < l.size() && l[i] == l[begin]) {\n\t\t\ti++;\n\
    \t\t}\n\t\tif(i - begin == 2) {\n\t\t\tres.push_back(l[begin]);\n\t\t}\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9r1i9o3f.cpp: In lambda function:\n/tmp/tmp9r1i9o3f.cpp:15:13:\
    \ error: use of \u2018merge\u2019 before deduction of \u2018auto\u2019\n   15\
    \ |   auto l1 = merge(l, lo, mid);\n      |             ^~~~~\n/tmp/tmp9r1i9o3f.cpp:16:13:\
    \ error: use of \u2018merge\u2019 before deduction of \u2018auto\u2019\n   16\
    \ |   auto l2 = merge(l, mid + 1, hi);\n      |             ^~~~~\n"
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> out;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(out));\n    return out;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> out;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  int i=0, j=0;\n  while(i<l1.size() && j<l2.size()) {\n    if(l1[i]==l2[j])\
    \ {\n      out.push_back(l1[i]);\n      while(i<l1.size() && l1[i]==l1[i+1]) {\
    \ i++; }\n      while(j<l2.size() && l2[j]==l2[j+1]) { j++; }\n      i++; j++;\n\
    \    } else if(l1[i]>l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n \
    \ }\n  return out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> r;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(r));\n    return r;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long> l1sort = l1;\n \
    \   std::vector<long> l2sort = l2;\n    std::sort(l1sort.begin(), l1sort.end());\n\
    \    std::sort(l2sort.begin(), l2sort.end());\n    std::set_intersection(l1sort.begin(),\
    \ l1sort.end(), l2sort.begin(), l2sort.end(), std::back_inserter(result));\n \
    \   return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101306
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> v(std::min(l1.size(), l2.size()));\n    std::vector<long>::iterator\
    \ it;\n    it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ v.begin());\n    v.resize(it - v.begin());\n    std::sort(v.begin(), v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc_o8wg66: /tmp/tmpc_o8wg66.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101307
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> out;\n    for (auto n : l1) {\n        if (std::binary_search(l2.begin(),\
    \ l2.end(), n)) {\n            out.push_back(n);\n        }\n    }\n    std::sort(out.begin(),\
    \ out.end());\n    return out;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4rcj2pbd: /tmp/tmp4rcj2pbd.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // std::sort((l1).begin(), (l1).end());\n    // std::sort((l2).begin(),\
    \ (l2).end());\n    std::vector<long> ans;\n    for (int i = 0; i < (l1).size();\
    \ i++) {\n        long val = (l1)[i];\n        for (int j = 0; j < (l2).size();\
    \ j++) {\n            if ((l2)[j] == val) {\n                ans.push_back(val);\n\
    \                break;\n            }\n        }\n    }\n    std::sort((ans).begin(),\
    \ (ans).end());\n    std::vector<long>::iterator it = std::unique((ans).begin(),\
    \ (ans).end());\n    (ans).erase(it, (ans).end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    auto x1 = l1.begin();\n    auto x2\
    \ = l2.begin();\n    while(x1 != l1.end() && x2 != l2.end()) {\n        if(*x1\
    \ == *x2) {\n            result.push_back(*x1);\n            x1++;\n         \
    \   x2++;\n        } else if(*x1 < *x2) {\n            x1++;\n        } else {\n\
    \            x2++;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> output;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(output));\n    return output;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\t// Remove duplicates and then sort.\n\tstd::sort(l1.begin(), l1.end());\n\
    \tl1.erase(std::unique(l1.begin(), l1.end()), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tl2.erase(std::unique(l2.begin(), l2.end()), l2.end());\n\tstd::vector<long>\
    \ res;\n\tfor (std::vector<long>::iterator it1 = l1.begin(); it1 != l1.end();\
    \ ++it1) {\n\t\tfor (std::vector<long>::iterator it2 = l2.begin(); it2 != l2.end();\
    \ ++it2) {\n\t\t\tif (*it1 == *it2) {\n\t\t\t\tres.push_back(*it1);\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = common;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    long it1 = 0;\n    long it2 = 0;\n    std::vector<long> res;\n    while (it1\
    \ < l1.size() && it2 < l2.size()) {\n        if (l1[it1] == l2[it2]) {\n     \
    \       res.push_back(l1[it1]);\n            it1 += 1;\n            it2 += 1;\n\
    \        } else if (l1[it1] < l2[it2]) {\n            it1 += 1;\n        } else\
    \ {\n            it2 += 1;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> l3;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l3));\n    return l3;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> intersection;\n  set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(intersection));\n  return intersection;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> c;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(c));\n    return c;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> l = std::vector<long>();\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(l));\n    return l;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> v = {};\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    int i = 0, j = 0;\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i] < l2[j])\n            i++;\n        else\
    \ if (l1[i] > l2[j])\n            j++;\n        else {\n            v.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> v;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(v));\n    return v;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> result;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(),\n                          std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> a;\n    std::vector<long> b;\n    long i = 0;\n\
    \    long j = 0;\n    while ((i < (l1.size())) && (j < (l2.size()))) {\n     \
    \   if ((l1[i]) < (l2[j])) {\n            i = (i + 1);\n        } else if ((l1[i])\
    \ > (l2[j])) {\n            j = (j + 1);\n        } else {\n            a.push_back(l1[i]);\n\
    \            i = (i + 1);\n            j = (j + 1);\n        }\n    }\n    if\
    \ ((a.size()) > 0) {\n        b.push_back(a[0]);\n    }\n    i = 1;\n    while\
    \ ((i < (a.size()))) {\n        if ((a[i]) != (b[((b.size()) - 1)])) {\n     \
    \       b.push_back(a[i]);\n        }\n        i = (i + 1);\n    }\n    return\
    \ b;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvcrgbaoe: /tmp/tmpvcrgbaoe.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> v = {};\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(v));\n\treturn v;\n}\nint main() {\n    auto candidate =\
    \ common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> result;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\t// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121})))\n\t// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n\t// >>> common((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n\t// (std::vector<long>({(long)2,\
    \ (long)3}))\n\tstd::vector<long> ans;\n\tstd::sort(l1.begin(), l1.end());\n\t\
    std::sort(l2.begin(), l2.end());\n\tlong v_size = l1.size();\n\tlong v_size_1\
    \ = l2.size();\n\tlong s_pointer = 0;\n\tlong j = 0;\n\tfor (long i = 0; i < v_size;\
    \ i++) {\n\t\twhile (j < v_size_1 && l2[j] < l1[i]) {\n\t\t\tj += 1;\n\t\t}\n\t\
    \tif (j < v_size_1 && l2[j] == l1[i]) {\n\t\t\tans.push_back(l1[i]);\n\t\t}\n\t\
    }\n\treturn ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> output;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    for (int i = 0; i < l1.size(); i++)\
    \ {\n        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                output.push_back(l1[i]);\n                l2.erase(l2.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> ret;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(),\n                          std::back_inserter(ret));\n    return ret;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::vector<long> res;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(res));\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    int n = l1.size();\n    int m = l2.size();\n    std::vector<long>\
    \ l(n + m);\n    int j = 0;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ l.begin());\n    std::vector<long> v;\n    for (int i = 0; i < n + m; i++) {\n\
    \        if (l[i] != 0) {\n            v.push_back(l[i]);\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(),\n                          std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    for (int i = 0; i < l1.size(); i++) {\n\
    \        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                res.push_back(l1[i]);\n                l2.erase(l2.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp7f8jfsw: /tmp/tmpp7f8jfsw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    // sort list\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> result;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> x;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    for (auto p = l1.begin(), q = l2.begin(); p != l1.end() && q\
    \ != l2.end();) {\n        if (*p < *q) ++p;\n        else if (*q < *p) ++q;\n\
    \        else {\n            x.push_back(*p);\n            ++p;\n            ++q;\n\
    \        }\n    }\n    return x;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n\tstd::vector<long> res;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(),\
    \ l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res));\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101304
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> l3;\n  for (int i = 0; i < l1.size(); i++) {\n    for (int\
    \ j = 0; j < l2.size(); j++) {\n      if (l1[i] == l2[j]) {\n        l3.push_back(l1[i]);\n\
    \        l2.erase(l2.begin() + j);\n        break;\n      }\n    }\n  }\n  std::sort(l3.begin(),\
    \ l3.end());\n  l3.erase(std::unique(l3.begin(), l3.end()), l3.end());\n  return\
    \ l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> common_list;\n    for (auto& i : l1) {\n      \
    \  for (auto& j : l2) {\n            if (i == j) {\n                common_list.push_back(i);\n\
    \            }\n        }\n    }\n    sort(common_list.begin(), common_list.end());\n\
    \    auto last = std::unique(common_list.begin(), common_list.end());\n    common_list.erase(last,\
    \ common_list.end());\n    return common_list;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101307
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> temp;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(temp));\n    temp.erase(std::unique(temp.begin(),\
    \ temp.end()), temp.end());\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> result;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(result));\n  return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \                        std::back_inserter(result));\n  return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101303
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> res;\n    for (int i = 0, j = 0; i < l1.size() && j < l2.size();)\
    \ {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n\
    \            j++;\n        else {\n            res.push_back(l1[i]);\n       \
    \     i++;\n            j++;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    for (std::vector<long>::iterator it =\
    \ l1.begin(); it != l1.end(); it++) {\n        if ((std::find(l2.begin(), l2.end(),\
    \ *it) != l2.end()) && (std::find(res.begin(), res.end(), *it) == res.end()))\
    \ {\n            res.push_back(*it);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> ans;\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    int i = 0, j = 0;\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            ans.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101308
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n  std::vector<long> result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result));\n  return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101300
