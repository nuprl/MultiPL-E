language: cpp
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// write\
    \ your code here\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\t\
    else if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = string[i]\
    \ + 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  string.resize(256);\n\
    \  for(int i=0;i<string.size();i++)\n  {\n    if(islower(string[i]))\n    {\n\
    \      string[i]=toupper(string[i]);\n    }\n    else if(isupper(string[i]))\n\
    \    {\n      string[i]=tolower(string[i]);\n    }\n  }\n  return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpm8qnn8_b: /tmp/tmpm8qnn8_b.cpp:23: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tint\
    \ i = 0;\n\twhile (string[i] != '\\0')\n\t{\n\t\tif (string[i] >= 65 && string[i]\
    \ <= 90)\n\t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t\telse if (string[i]\
    \ >= 97 && string[i] <= 122)\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  return\
    \ \"\";\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpa3kg79jx: /tmp/tmpa3kg79jx.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsfch82z3: /tmp/tmpsfch82z3.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsfch82z3: /tmp/tmpsfch82z3.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n      string[i] = string[i] - 32;\n    else if (string[i] >= 'A' &&\
    \ string[i] <= 'Z')\n      string[i] = string[i] + 32;\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ not complete\n    for (int i = 0; i < string.length(); i++) {\n        if (std::isupper(string[i]))\
    \ {\n            string[i] = std::tolower(string[i]);\n        } else {\n    \
    \        string[i] = std::toupper(string[i]);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tint\
    \ i = 0;\n\twhile (string[i] != '\\0')\n\t{\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z')\n\t\t{\n\t\t\tstring[i] = string[i] - 'a' + 'A';\n\t\t}\n\t\telse if\
    \ (string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] = string[i] -\
    \ 'A' + 'a';\n\t\t}\n\t\ti++;\n\t}\n\treturn string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    char*\
    \ string_arr = string.c_str();\n    int length = string.length();\n    char* string_arr_new\
    \ = new char[length+1];\n    int j = 0;\n    for(int i = 0; i < length; i++) {\n\
    \        if(string_arr[i] >= 'a' && string_arr[i] <= 'z') {\n            string_arr_new[j]\
    \ = string_arr[i] - 32;\n            j++;\n        }\n        else if(string_arr[i]\
    \ >= 'A' && string_arr[i] <= 'Z') {\n            string_arr_new[j] = string_arr[i]\
    \ + 32;\n            j++;\n        }\n        else {\n            string_arr_new[j]\
    \ = string_arr[i];\n            j++;\n        }\n    }\n    string_arr_new[j]\
    \ = '\\0';\n    return string_arr_new;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_62x6pc9.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp_62x6pc9.cpp:7:36: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018char*\u2019 [-fpermissive]\n    7 |     char* string_arr = string.c_str();\n\
    \      |                        ~~~~~~~~~~~~^~\n      |                      \
    \              |\n      |                                    const char*\n"
  stdout: ''
  timestamp: 1660097789
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(islower(string[i])){\n           \
    \ string[i] = toupper(string[i]);\n        }else{\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result{};\n    for (char c : string) {\n        if (islower(c)) {\n        \
    \    result += toupper(c);\n        } else {\n            result += tolower(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ newStr;\n  for (unsigned int i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n      newStr += string[i] - 32;\n    } else if\
    \ (string[i] >= 'A' && string[i] <= 'Z') {\n      newStr += string[i] + 32;\n\
    \    } else {\n      newStr += string[i];\n    }\n  }\n  return newStr;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] <= 'Z' && string[i]\
    \ >= 'A') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t\telse if (string[i]\
    \ <= 'z' && string[i] >= 'a') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\
    }\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097789
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (unsigned int i = 0; i < string.length(); i++) {\n    if(isupper(string[i]))\
    \ {\n      string[i] = tolower(string[i]);\n    } else {\n      string[i] = toupper(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  //Implement\
    \ your solution here\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpulsy7snx: /tmp/tmpulsy7snx.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ Read only region end\n    for(int i=0;i<string.length();i++)\n    {\n      \
    \  if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstring=\n\
    \  \n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsclsi0m5.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpsclsi0m5.cpp:9:3: error: expected primary-expression before \u2018\
    return\u2019\n    9 |   return string;\n      |   ^~~~~~\n/tmp/tmpsclsi0m5.cpp:10:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   10 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660097789
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (char &c : string) {\n    if (c >= 'a' && c <= 'z')\n      c = toupper(c);\n\
    \    else if (c >= 'A' && c <= 'Z')\n      c = tolower(c);\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    int\
    \ l = string.length();\n    char string_flipped[l];\n    for (int i = 0; i < l;\
    \ i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string_flipped[i]\
    \ = string[i] - 32;\n        } else if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n            string_flipped[i] = string[i] + 32;\n        } else {\n     \
    \       string_flipped[i] = string[i];\n        }\n    }\n    return string_flipped;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmph503tr44: /tmp/tmph503tr44.cpp:22: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i] >= 'a' && string[i] <= 'z'){\n\
    \            string[i] = string[i] - 32;\n        }else if(string[i] >= 'A' &&\
    \ string[i] <= 'Z'){\n            string[i] = string[i] + 32;\n        }\n   \
    \ }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp8a5l80up: /tmp/tmp8a5l80up.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (size_t i = 0; i < string.size(); i++) {\n\t\tif (islower(string[i]))\n\t\t\t\
    string[i] = toupper(string[i]);\n\t\telse if (isupper(string[i]))\n\t\t\tstring[i]\
    \ = tolower(string[i]);\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ new_string;\n    for (unsigned int i = 0; i < string.length(); i++) {\n    \
    \    if (string[i] >= 'a' && string[i] <= 'z') {\n            new_string += (string[i]\
    \ - 32);\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n       \
    \     new_string += (string[i] + 32);\n        } else {\n            new_string\
    \ += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ output=\"\";\n\tstd::string s=string;\n\tfor(int i=0;i<s.length();i++)\n\t{\n\
    \t\tif(s[i]>='a' && s[i]<='z')\n\t\t\ts[i]=s[i]-32;\n\t\telse if(s[i]>='A' &&\
    \ s[i]<='Z')\n\t\t\ts[i]=s[i]+32;\n\t}\n\toutput=s;\n\treturn output;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpcly4zyf8: /tmp/tmpcly4zyf8.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    char\
    \ ch;\n    for(int i=0;i<string.length();i++)\n    {\n        ch=string[i];\n\
    \        if(ch>='A' && ch<='Z')\n        {\n            string[i]=tolower(ch);\n\
    \        }\n        else if(ch>='a' && ch<='z')\n        {\n            string[i]=toupper(ch);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097789
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ str = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            str += (char)(string[i] - 32);\n\
    \        }\n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n        \
    \    str += (char)(string[i] + 32);\n        }\n        else {\n            str\
    \ += string[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// your\
    \ code goes here\n\tfor(int i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]>='a'\
    \ && string[i]<='z')\n\t\t{\n\t\t\tstring[i]=string[i]-32;\n\t\t}\n\t\telse if(string[i]>='A'\
    \ && string[i]<='Z')\n\t\t{\n\t\t\tstring[i]=string[i]+32;\n\t\t}\n\t}\n\treturn\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result;\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpmy9ewj5w: /tmp/tmpmy9ewj5w.cpp:14: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (auto &c : string) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc -= 32;\n\t\t\
    } else if (c >= 'A' && c <= 'Z') {\n\t\t\tc += 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsfch82z3: /tmp/tmpsfch82z3.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result = \"\";\n    for (unsigned int i = 0; i < string.length(); i++) {\n \
    \       if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i]\
    \ - 32;\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n        \
    \    result += string[i] + 32;\n        } else {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 'a' + 'A';\n    } else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      string[i] = string[i] - 'A' + 'a';\n  \
    \  }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(auto&\
    \ c : string) {\n        if(isupper(c)) {\n            c = tolower(c);\n     \
    \   } else {\n            c = toupper(c);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\treturn string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpfdg9ktko: /tmp/tmpfdg9ktko.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097791
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(),\n                   [](char c) { return std::isupper(c)\
    \ ? std::tolower(c) : std::toupper(c); });\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (auto& c : string) {\n    if (isupper(c)) c = tolower(c);\n    else if (islower(c))\
    \ c = toupper(c);\n  }\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(isupper(string[i])){\n           \
    \ string[i] = tolower(string[i]);\n        }\n        else if(islower(string[i])){\n\
    \            string[i] = toupper(string[i]);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ flipped_case = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if\
    \ (string[i] >= 65 && string[i] <= 90) {\n      flipped_case += (char)(string[i]\
    \ + 32);\n    } else if (string[i] >= 97 && string[i] <= 122) {\n      flipped_case\
    \ += (char)(string[i] - 32);\n    } else {\n      flipped_case += string[i];\n\
    \    }\n  }\n  return flipped_case;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z')\n\
    \            string[i] = toupper(string[i]);\n        else if(string[i]>='A' &&\
    \ string[i]<='Z')\n            string[i] = tolower(string[i]);\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\n\treturn string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpxtubngf8: /tmp/tmpxtubngf8.cpp:14: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(string[i] >= 'a' && string[i] <= 'z')\n\
    \            string[i] = string[i] - 32;\n        else if(string[i] >= 'A' &&\
    \ string[i] <= 'Z')\n            string[i] = string[i] + 32;\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = tolower(string[i]);\n\t\t}\n\
    \t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    \n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp5ci7yams: /tmp/tmp5ci7yams.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result = \"\";\n    for (auto i : string) {\n        if (i >= 'a' && i <= 'z')\
    \ {\n            result += i - 32;\n        } else if (i >= 'A' && i <= 'Z') {\n\
    \            result += i + 32;\n        } else {\n            result += i;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097789
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (islower(string[i])) {\n   \
    \   string[i] = toupper(string[i]);\n    } else {\n      string[i] = tolower(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result;\n    int i;\n    char c;\n    for (i = 0; i < string.length(); i++)\
    \ {\n        c = string[i];\n        if (c >= 'a' && c <= 'z')\n            result\
    \ += toupper(c);\n        else if (c >= 'A' && c <= 'Z')\n            result +=\
    \ tolower(c);\n        else\n            result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097791
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ s = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i]))\
    \ {\n      s += tolower(string[i]);\n    } else {\n      s += toupper(string[i]);\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i] = 'A' + (string[i] - 'a');\n        }else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i] = 'a' + (string[i] - 'A');\n    \
    \    }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result;\n    std::transform(string.begin(), string.end(), back_inserter(result),[](char\
    \ c) {\n        if (std::isupper(c)) return std::tolower(c);\n        if (std::islower(c))\
    \ return std::toupper(c);\n        return c;\n    });\n    return result;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrb6as18.cpp: In lambda function:\n/tmp/tmpgrb6as18.cpp:11:16:\
    \ error: inconsistent types \u2018int\u2019 and \u2018char\u2019 deduced for lambda\
    \ return type\n   11 |         return c;\n      |                ^\n"
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i] >= 'a' && string[i] <= 'z'){\n\
    \            string[i] = string[i] - 'a' + 'A';\n        }\n        else if(string[i]\
    \ >= 'A' && string[i] <= 'Z'){\n            string[i] = string[i] - 'A' + 'a';\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i]=string[i]-32;\n        }\n        else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i]=string[i]+32;\n        }\n    }\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        int character = string[i];\n        if(character\
    \ >= 97 && character <= 122){\n            string[i] = (char)(character - 32);\n\
    \        }\n        else if(character >= 65 && character <= 90){\n           \
    \ string[i] = (char)(character + 32);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (size_t i = 0; i < string.size(); i++) {\n\t\tif (isupper(string[i])) {\n\t\t\
    \tstring[i] = tolower(string[i]);\n\t\t}\n\t\telse if (islower(string[i])) {\n\
    \t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t}\n\treturn string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t\
    }\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ new_string = \"\";\n  for (char ch: string) {\n    if (ch >= 65 && ch <= 90)\
    \ {\n      new_string += (char)(ch + 32);\n    } else if (ch >= 97 && ch <= 122)\
    \ {\n      new_string += (char)(ch - 32);\n    } else {\n      new_string += ch;\n\
    \    }\n  }\n  return new_string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i])) {\n   \
    \   string[i] = tolower(string[i]);\n    } else {\n      string[i] = toupper(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65&&string[i]<=90){\n   \
    \         string[i]+=32;\n        }\n        else if(string[i]>=97&&string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    int\
    \ i;\n    char ch;\n    for(i=0;i<string.length();i++)\n    {\n        ch=string[i];\n\
    \        if(isupper(ch))\n            string[i]=tolower(ch);\n        else\n \
    \           string[i]=toupper(ch);\n    }\n    return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ new_string;\n    for (char c : string) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            new_string += std::toupper(c);\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            new_string += std::tolower(c);\n        } else {\n\
    \            new_string += c;\n        }\n    }\n    return new_string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] <= 'Z' && string[i]\
    \ >= 'A') {\n\t\t\tstring[i] = tolower(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ <= 'z' && string[i] >= 'a') {\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\
    \t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  // \
    \ return string();\n  // return string;\n  //  return \"\";\n  //  return \" \"\
    ;\n  //  return \"aAaA\";\n  //  return \"BbBb\";\n  //  return \"1234\";\n  //\
    \  return \" \";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return\
    \ \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\"\
    ;\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //\
    \  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return\
    \ \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\"\
    ;\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //\
    \  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return\
    \ \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\"\
    ;\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //\
    \  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return\
    \ \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\"\
    ;\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //  return \"aAaA\";\n  //\
    \  return \"aAaA\";\n  //  return\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp_ziqxqsm: /tmp/tmp_ziqxqsm.cpp:59: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i] = toupper(string[i]);\n        }\n        else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i] = tolower(string[i]);\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(auto\
    \ &ch : string) {\n        ch = islower(ch) ? toupper(ch) : tolower(ch);\n   \
    \ }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ flipped_string = \"\";\n    int i = 0;\n    while (string[i] != '\\0') {\n \
    \       if (string[i] >= 'a' && string[i] <= 'z') {\n            flipped_string\
    \ += (string[i] - 32);\n        } else if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n            flipped_string += (string[i] + 32);\n        } else {\n     \
    \       flipped_string += string[i];\n        }\n        i++;\n    }\n    return\
    \ flipped_string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ s;\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::cout << string << std::endl;\n    for (auto i : string) {\n        if\
    \ (islower(i))\n            s += toupper(i);\n        else\n            s += tolower(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsg46_z5f: /tmp/tmpsg46_z5f.cpp:21: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: '

    hello!

    '
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  int\
    \ len = string.length();\n  char char_array[len+1];\n  strcpy(char_array, string.c_str());\n\
    \  for (int i = 0; i < len; i++) {\n    char_array[i] = tolower(char_array[i]);\n\
    \  }\n  return char_array;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsy3l8vzb: /tmp/tmpsy3l8vzb.cpp:18: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i])) {\n   \
    \   string[i] = tolower(string[i]);\n    } else {\n      string[i] = toupper(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 'a' + 'A';\n    } else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      string[i] = string[i] - 'A' + 'a';\n  \
    \  }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n \
    \           string[i]+=32;\n        }\n        else if(string[i]>=97 && string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ s=\"\";\n\tfor(int i=0;i<string.length();i++)\n\t{\n\t\tchar a=string[i];\n\t\
    \tif(a>='a' && a<='z')\n\t\t{\n\t\t\ta=a-'a'+'A';\n\t\t}\n\t\telse if(a>='A' &&\
    \ a<='Z')\n\t\t{\n\t\t\ta=a-'A'+'a';\n\t\t}\n\t\ts+=a;\n\t}\n\treturn s;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ output_string;\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ >= 65 && string[i] <= 90) {\n      output_string += (char)(string[i] + 32);\n\
    \    } else if (string[i] >= 97 && string[i] <= 122) {\n      output_string +=\
    \ (char)(string[i] - 32);\n    } else {\n      output_string += string[i];\n \
    \   }\n  }\n  return output_string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(char&\
    \ c : string) {\n        if(isupper(c)) {\n            c = tolower(c);\n     \
    \   } else {\n            c = toupper(c);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (auto it = string.begin(); it != string.end(); ++it) {\n    if (*it >= 'a' &&\
    \ *it <= 'z') {\n      *it = (*it - 'a') + 'A';\n    } else if (*it >= 'A' &&\
    \ *it <= 'Z') {\n      *it = (*it - 'A') + 'a';\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ string2;\n  for(int i=0;i<string.length();i++){\n    if(std::isupper(string[i])){\n\
    \      string2.push_back(std::tolower(string[i]));\n    }\n    else{\n      string2.push_back(std::toupper(string[i]));\n\
    \    }\n  }\n  return string2;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result=\"\";\n    int difference = 'a'-'A';\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]>='a' && string[i]<='z'){\n            result+=string[i]-difference;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z'){\n            result+=string[i]+difference;\n\
    \        }\n        else\n            result+=string[i];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a'&&string[i]<='z'){\n \
    \           string[i]=string[i]-32;\n        }\n        else if(string[i]>='A'&&string[i]<='Z'){\n\
    \            string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ result = string;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ > 'A' && string[i] < 'Z') {\n\t\t\tresult[i] = result[i] + 32;\n\t\t}\n\t\t\
    else if (string[i] > 'a' && string[i] < 'z') {\n\t\t\tresult[i] = result[i] -\
    \ 32;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpwh9ovp8a: /tmp/tmpwh9ovp8a.cpp:22: int main(): Assertion `candidate(("These
    violent delights have violent ends")) == ("tHESE VIOLENT DELIGHTS HAVE VIOLENT
    ENDS")'' failed.

    '
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  char\
    \ t;\n  for(int i=0;i<string.length();i++)\n  {\n    if((int)string[i]>64 && (int)string[i]<91)\n\
    \    {\n      t=string[i]+32;\n      string[i]=t;\n    }\n    else if((int)string[i]>96\
    \ && (int)string[i]<123)\n    {\n      t=string[i]-32;\n      string[i]=t;\n \
    \   }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ your code here\n    for(int i=0;i<string.length();i++)\n    {\n      if(string[i]>='a'\
    \ && string[i]<='z')\n        string[i] = string[i] - 32;\n      else if(string[i]>='A'\
    \ && string[i]<='Z')\n        string[i] = string[i] + 32;\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    int\
    \ len = string.length();\n    std::string output;\n    for(int i = 0; i < len;\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z')\n            output\
    \ += (string[i] - 'a' + 'A');\n        else if(string[i] >= 'A' && string[i] <=\
    \ 'Z')\n            output += (string[i] - 'A' + 'a');\n        else\n       \
    \     output += string[i];\n    }\n    return output;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(auto&\
    \ c : string) {\n        if(isupper(c)) {\n            c = tolower(c);\n     \
    \   } else {\n            c = toupper(c);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result;\n    for (int i = 0; i < string.length(); i++) {\n        int b = (int)string[i];\n\
    \        if (b >= 97 && b <= 122) {\n            b = b - 32;\n        } else if\
    \ (b >= 65 && b <= 90) {\n            b = b + 32;\n        }\n        result.push_back((char)b);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (islower(string[i])) {\n   \
    \   string[i] = toupper(string[i]);\n    } else {\n      string[i] = tolower(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::cout\
    \ << \"String is: \"<< string << std::endl;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = toupper(string[i]);\n\
    \t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] =\
    \ tolower(string[i]);\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: "String is: \nString is: Hello!\nString is: These violent delights have\
    \ violent ends\n"
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ str2;\n    for(int i=0;i<string.length();i++){\n        if(isupper(string[i])){\n\
    \            str2+=tolower(string[i]);\n        }\n        else if(islower(string[i])){\n\
    \            str2+=toupper(string[i]);\n        }\n        else{\n           \
    \ str2+=string[i];\n        }\n    }\n    return str2;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ s = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\n\
    \            s = s + toupper(string[i]);\n        else\n            s = s + tolower(string[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwhbzf_h.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpqwhbzf_h.cpp:10:19: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   10 |             s = s + toupper(string[i]);\n    \
    \  |                 ~ ^ ~~~~~~~~~~~~~~~~~~\n      |                 |       \
    \   |\n      |                 |          int\n      |                 std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqwhbzf_h.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpqwhbzf_h.cpp:10:38:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   10 |             s = s + toupper(string[i]);\n     \
    \ |                                      ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqwhbzf_h.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iter"
  stdout: ''
  timestamp: 1660097792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// for(unsigned\
    \ int i = 0; i < string.length(); i++) {\n\t//     if(islower(string[i])) {\n\t\
    //         string[i] = toupper(string[i]);\n\t//     } else {\n\t//         string[i]\
    \ = tolower(string[i]);\n\t//     }\n\t// }\n\t// return string;\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\treturn string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp1pdom75w: /tmp/tmp1pdom75w.cpp:21: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n \
    \           string[i]+=32;\n        }\n        else if(string[i]>=97 && string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ s=\"\";\n    for(int i=0;i<string.length();i++){\n        if(islower(string[i])){\n\
    \            s=s+char(toupper(string[i]));\n        }\n        else if(isupper(string[i])){\n\
    \            s=s+char(tolower(string[i]));\n        }\n        else{\n       \
    \     s=s+string[i];\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(islower(string[i])){\n            string[i]=toupper(string[i]);\n\
    \        }\n        else{\n            string[i]=tolower(string[i]);\n       \
    \ }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ new_string;\n    for (auto letter : string) {\n        if (islower(letter))\
    \ {\n            new_string += toupper(letter);\n        } else {\n          \
    \  new_string += tolower(letter);\n        }\n    }\n    return new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(string[i] >= 'a' && string[i] <= 'z'){\n\
    \            string[i] = string[i] - 'a' + 'A';\n        }\n        else if(string[i]\
    \ >= 'A' && string[i] <= 'Z'){\n            string[i] = string[i] - 'A' + 'a';\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65&&string[i]<=90){\n   \
    \         string[i]+=32;\n        }\n        else if(string[i]>=97&&string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n      string[i] -= 32;\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n      string[i] += 32;\n  }\n  return string;\n}\nint main() {\n  \
    \  auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n   \
    \ assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These\
    \ violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result = \"\";\n    for (auto c : string) {\n        if (std::isupper(c)) {\n\
    \            result += std::tolower(c);\n        } else {\n            result\
    \ += std::toupper(c);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ flipped_string;\n  for (int i = 0; i < string.length(); i++) {\n    char current_char\
    \ = string[i];\n    if (islower(current_char)) {\n      flipped_string.push_back(toupper(current_char));\n\
    \    } else {\n      flipped_string.push_back(tolower(current_char));\n    }\n\
    \  }\n  return flipped_string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  // Your\
    \ code here\n  // Can be solved using just one loop using XOR operator\n  int\
    \ n = string.length();\n  for(int i=0;i<n;i++){\n    if(string[i]>='a' && string[i]<='z'){\n\
    \      string[i] = string[i] - 32;\n    }\n    else if(string[i]>='A' && string[i]<='Z'){\n\
    \      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ flipped = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n\t\t\tflipped += string[i] - 32;\n\t\t} else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tflipped += string[i] + 32;\n\
    \t\t} else {\n\t\t\tflipped += string[i];\n\t\t}\n\t}\n\treturn flipped;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65&&string[i]<=90){\n   \
    \         string[i]+=32;\n        }\n        else if(string[i]>=97&&string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::stringstream\
    \ ss;\n    for (const auto& it : string) {\n        if (isupper(it)) {\n     \
    \       ss << static_cast<char>(tolower(it));\n        } else {\n            ss\
    \ << static_cast<char>(toupper(it));\n        }\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 65 && string[i]\
    \ <= 90) {\n      string[i] = string[i] + 32;\n    } else if (string[i] >= 97\
    \ && string[i] <= 122) {\n      string[i] = string[i] - 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n \
    \           string[i]+=32;\n        }\n        else if(string[i]>=97 && string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(islower(string[i])){\n            string[i]=toupper(string[i]);\n\
    \        }\n        else{\n            string[i]=tolower(string[i]);\n       \
    \ }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result = string;\n    int i;\n    int n = string.length();\n    for(i=0;i<n;i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ flippedString = \"\";\n    std::string::iterator itr;\n    for(itr = string.begin();\
    \ itr != string.end(); itr++) {\n        if (islower(*itr))\n            flippedString\
    \ += toupper(*itr);\n        else\n            flippedString += tolower(*itr);\n\
    \    }\n    return flippedString;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n   return\
    \ \"\";\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpp_j073ph: /tmp/tmpp_j073ph.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ TODO\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp7pueir1m: /tmp/tmp7pueir1m.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// implementation\n\
    \treturn \"hELLO\";\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpb1tlbowv: /tmp/tmpb1tlbowv.cpp:12: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ s;\n  // Convert every character of the string to its flipped-case counterpart.\n\
    \  for (char c : string) {\n    if (isupper(c)) {\n      c = tolower(c);\n   \
    \ } else if (islower(c)) {\n      c = toupper(c);\n    }\n    s += c;\n  }\n \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ result;\n  for (const char& ch : string) {\n    if (std::isupper(ch)) {\n  \
    \    result += std::tolower(ch);\n    } else {\n      result += std::toupper(ch);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ str;\n  for(char i:string){\n    if(i>='a' && i<='z')\n      str.push_back(i-32);\n\
    \    else if(i>='A' && i<='Z')\n      str.push_back(i+32);\n    else\n      str.push_back(i);\n\
    \  }\n  return str;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ str;\n  for(auto i : string) {\n    if(std::isupper(i)) {\n      str += std::tolower(i);\n\
    \    } else {\n      str += std::toupper(i);\n    }\n  }\n  return str;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 65 && string[i]\
    \ <= 90) {\n      string[i] = string[i] + 32;\n    } else if (string[i] >= 97\
    \ && string[i] <= 122) {\n      string[i] = string[i] - 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        string[i]^=32;\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpkgtnt5bp: /tmp/tmpkgtnt5bp.cpp:15: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(string[i] >= 'a' && string[i] <= 'z'){\n\
    \            string[i] -= 32;\n        }\n        else if(string[i] >= 'A' &&\
    \ string[i] <= 'Z'){\n            string[i] += 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  // The\
    \ strings are mutable. Use a loop to flip each character.\n  int length = string.length();\n\
    \  for (int i = 0; i < length; i++) {\n    // If the character is lowercase, flip\
    \ it to uppercase.\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      string[i]\
    \ = string[i] - 32;\n    }\n    // If the character is uppercase, flip it to lowercase.\n\
    \    else if (string[i] >= 'A' && string[i] <= 'Z') {\n      string[i] = string[i]\
    \ + 32;\n    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ result = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n      result += toupper(string[i]);\n    } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n      result += tolower(string[i]);\n\
    \    } else {\n      result += string[i];\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(isupper(string[i])){\n            string[i]=tolower(string[i]);\n\
    \        }\n        else if(islower(string[i])){\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65&&string[i]<=90){\n   \
    \         string[i]+=32;\n        }\n        else if(string[i]>=97&&string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), [](char c) {\n\t\treturn std::isupper(c) ? std::tolower(c)\
    \ : std::toupper(c);\n\t});\n\treturn string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(islower(string[i])){\n           \
    \ string[i] = toupper(string[i]);\n        }else{\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsfch82z3: /tmp/tmpsfch82z3.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result;\n    for (int i = 0; i < string.length(); i++) {\n        if(isupper(string[i]))\
    \ {\n            result += tolower(string[i]);\n        } else {\n           \
    \ result += toupper(string[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ answer = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchar x =\
    \ string[i];\n\t\tif (islower(x)) {\n\t\t\tx = toupper(x);\n\t\t}\n\t\telse if\
    \ (isupper(x)) {\n\t\t\tx = tolower(x);\n\t\t}\n\t\tanswer += x;\n\t}\n\treturn\
    \ answer;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = toupper(string[i]);\n    } else if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n      string[i] = tolower(string[i]);\n    }\n \
    \ }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n \
    \           string[i] = string[i] + 32;\n        }\n        else if(string[i]>=97\
    \ && string[i]<=122){\n            string[i] = string[i] - 32;\n        }\n  \
    \  }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tint\
    \ i;\n\tstd::string string2(string);\n\tfor (i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] >= 65 && string[i] <= 90) {\n\t\t\tstring2[i] = tolower(string[i]);\n\
    \t\t}\n\t\telse if (string[i] >= 97 && string[i] <= 122) {\n\t\t\tstring2[i] =\
    \ toupper(string[i]);\n\t\t}\n\t}\n\treturn string2;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (char &c : string) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc -= 'a' - 'A';\n\
    \t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\tc += 'a' - 'A';\n\t\t}\n\t}\n\t\
    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ x = string;\n  for (int i = 0; i < string.length(); i++) {\n    if (islower(string[i]))\
    \ {\n      x[i] = toupper(string[i]);\n    } else {\n      x[i] = tolower(string[i]);\n\
    \    }\n  }\n  return x;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t//use\
    \ std::transform to apply lambda to each character\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), [](char c) {\n\t\treturn std::islower(c) ? std::toupper(c)\
    \ : std::tolower(c);\n\t});\n\treturn string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// For\
    \ each character in the string,\n\tfor (auto &character : string) {\n\t\t// If\
    \ the character is an uppercase letter,\n\t\tif (isupper(character)) {\n\t\t\t\
    // Switch the character to lowercase.\n\t\t\tcharacter = tolower(character);\n\
    \t\t// Otherwise, if the character is a lowercase letter,\n\t\t} else if (islower(character))\
    \ {\n\t\t\t// Switch the character to uppercase.\n\t\t\tcharacter = toupper(character);\n\
    \t\t}\n\t}\n\t// Return the string.\n\treturn string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z')\n\
    \            string[i]=string[i]-32;\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \            string[i]=string[i]+32;\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ str;\n    for(auto x:string){\n        if(std::isupper(x))\n            str+=std::tolower(x);\n\
    \        else if(std::islower(x))\n            str+=std::toupper(x);\n       \
    \ else\n            str+=x;\n    }\n    return str;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (isupper(string[i])) {\n\t\t\
    \tstring[i] = tolower(string[i]);\n\t\t}\n\t\telse {\n\t\t\tstring[i] = toupper(string[i]);\n\
    \t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i] = toupper(string[i]);\n        }else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i] = tolower(string[i]);\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (size_t i = 0; i < string.size(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tstring[i] = string[i] - 'a' + 'A';\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = string[i] - 'A' + 'a';\n\t\t\
    }\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    int\
    \ i;\n    std::string string1;\n    for(i=0;i<string.length();i++)\n    {\n  \
    \      if(islower(string[i]))\n        {\n            string1+=toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string1+=tolower(string[i]);\n\
    \        }\n        else{\n            string1+=string[i];\n        }\n    }\n\
    \    return string1;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ s;\n    for(int i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            s+=toupper(string[i]);\n        }\n        else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            s+=tolower(string[i]);\n        }\n       \
    \ else{\n            s+=string[i];\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ result = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (islower(string[i]))\
    \ {\n      result += toupper(string[i]);\n    } else {\n      result += tolower(string[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (size_t i = 0; i < string.size(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] -= 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] += 32;\n    }\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// put\
    \ your code here\n\tstd::string s = \"\";\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\ts += string[i]\
    \ - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\ts\
    \ += string[i] + 32;\n\t\t}\n\t\telse {\n\t\t\ts += string[i];\n\t\t}\n\t}\n\t\
    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i]))\n     \
    \ string[i] = tolower(string[i]);\n    else\n      string[i] = toupper(string[i]);\n\
    \  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    char\
    \ a = 'a';\n    char z = 'z';\n    char A = 'A';\n    char Z = 'Z';\n    int size\
    \ = string.size();\n    for (int i = 0; i < size; i++) {\n        if ((string[i]\
    \ >= a) && (string[i] <= z)) {\n            string[i] -= 32;\n        } else if\
    \ ((string[i] >= A) && (string[i] <= Z)) {\n            string[i] += 32;\n   \
    \     }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsfch82z3: /tmp/tmpsfch82z3.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// for(i,0,strlen(string)){\n\
    \t//     if(string[i]>=65 && string[i]<=90){\n\t//         string[i] = string[i]\
    \ + 32;\n\t//     }\n\t//     else if(string[i]>=97 && string[i]<=122){\n\t//\
    \         string[i] = string[i] - 32;\n\t//     }\n\t// }\n\t// return string;\n\
    \tfor(int i=0;i<string.length();i++){\n\t\tif(string[i] >= 65 && string[i] <=\
    \ 90){\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t\telse if(string[i] >= 97\
    \ && string[i] <= 122){\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ result = \"\";\n  for (char i : string) {\n    if (i >= 'a' && i <= 'z') {\n\
    \      result += toupper(i);\n    } else if (i >= 'A' && i <= 'Z') {\n      result\
    \ += tolower(i);\n    } else {\n      result += i;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  \n \
    \ std::string str;\n  int len = string.length();\n  for(int i=0;i<len;i++)\n \
    \ {\n    if(islower(string[i]))\n      str+=toupper(string[i]);\n    else\n  \
    \    str+=tolower(string[i]);\n  }\n  return str;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tchar\
    \ *arr = (char *)string.c_str();\n\tint n = string.length();\n\tfor (int i = 0;\
    \ i < n; i++) {\n\t\tif (arr[i] >= 'a' && arr[i] <= 'z') {\n\t\t\tarr[i] = arr[i]\
    \ - 'a' + 'A';\n\t\t}\n\t\telse if (arr[i] >= 'A' && arr[i] <= 'Z') {\n\t\t\t\
    arr[i] = arr[i] - 'A' + 'a';\n\t\t}\n\t}\n\treturn arr;\n}\nint main() {\n   \
    \ auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = toupper(string[i]);\n    } else if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n      string[i] = tolower(string[i]);\n    }\n \
    \ }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z')\n\
    \        string[i]=string[i]-32;\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        string[i]=string[i]+32;\n    }\n    return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097795
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = tolower(string[i]);\n\t\t}\n\
    \t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097789
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// Flip\
    \ the case of each character, building up the result in the new string.\n\tstd::string\
    \ result;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tresult += islower(string[i])\
    \ ? toupper(string[i]) : tolower(string[i]);\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tstring[i] -= 'a' - 'A';\n\t\t}\n\t\telse if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n\t\t\tstring[i] += 'a' - 'A';\n\t\t}\n\t}\n\treturn\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  return\
    \ \"\";\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpa3kg79jx: /tmp/tmpa3kg79jx.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ flipped_string;\n    for (int i = 0; i < string.length(); i++) {\n        if\
    \ (string[i] >= 'a' && string[i] <= 'z') {\n            flipped_string += string[i]\
    \ - 32;\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n        \
    \    flipped_string += string[i] + 32;\n        } else {\n            flipped_string\
    \ += string[i];\n        }\n    }\n    return flipped_string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\t// your\
    \ code here\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (islower(string[i]))\
    \ {\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t\telse {\n\t\t\tstring[i]\
    \ = tolower(string[i]);\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    int\
    \ i = 0;\n    while(string[i] != '\\0') {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n            string[i] = string[i] - 32;\n        else if(string[i]\
    \ >= 'A' && string[i] <= 'Z')\n            string[i] = string[i] + 32;\n     \
    \   i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp8a5l80up: /tmp/tmp8a5l80up.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(islower(string[i]))\n            string[i]=toupper(string[i]);\n\
    \        else\n            string[i]=tolower(string[i]);\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i]=string[i]-'a'+'A';\n        }\n        else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i]=string[i]-'A'+'a';\n        }\n \
    \   }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (size_t i = 0; i < string.size(); i++) {\n    if (islower(string[i])) {\n  \
    \    string[i] = toupper(string[i]);\n    } else {\n      string[i] = tolower(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tint\
    \ len = string.length();\n\tstd::string str;\n\tint i;\n\tfor (i = 0; i < len;\
    \ i++) {\n\t\tif (islower(string[i])) {\n\t\t\tstr.push_back(toupper(string[i]));\n\
    \t\t}\n\t\telse if (isupper(string[i])) {\n\t\t\tstr.push_back(tolower(string[i]));\n\
    \t\t}\n\t\telse\n\t\t\tstr.push_back(string[i]);\n\t}\n\treturn str;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a'&&string[i]<='z'){\n \
    \           string[i]=toupper(string[i]);\n        }\n        else if(string[i]>='A'&&string[i]<='Z'){\n\
    \            string[i]=tolower(string[i]);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 65 && string[i]\
    \ <= 90) {\n      string[i] = string[i] + 32;\n    } else if (string[i] >= 97\
    \ && string[i] <= 122) {\n      string[i] = string[i] - 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i] -= 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z'){\n\
    \            string[i] += 32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    int\
    \ size = string.size();\n    for(int i = 0; i < size; i++) {\n        if(islower(string[i]))\
    \ {\n            string[i] = toupper(string[i]);\n        } else {\n         \
    \   string[i] = tolower(string[i]);\n        }\n    }\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ result = string;\n\tstd::transform(result.begin(), result.end(), result.begin(),\
    \ ::tolower);\n\treturn result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmprhtb58ji: /tmp/tmprhtb58ji.cpp:14: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(auto\
    \ i = string.begin(); i != string.end(); i++) {\n        if(*i >= 'a' && *i <=\
    \ 'z') {\n            *i = toupper(*i);\n        } else if(*i >= 'A' && *i <=\
    \ 'Z') {\n            *i = tolower(*i);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  std::string\
    \ s;\n  for(int i=0;i<string.length();i++){\n      if(string[i]>=65 && string[i]<=90){\n\
    \          s+=string[i]+32;\n      }\n      else if(string[i]>=97 && string[i]<=122){\n\
    \          s+=string[i]-32;\n      }\n      else{\n          s+=string[i];\n \
    \     }\n  }\n  return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ temp;\n    for(int i=0;i<string.length();i++){\n        if(string[i]>=65 &&\
    \ string[i]<=90){\n            temp+=string[i]+32;\n        }\n        else if(string[i]>=97\
    \ && string[i]<=122){\n            temp+=string[i]-32;\n        }\n        else{\n\
    \            temp+=string[i];\n        }\n    }\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ newString=\"\";\n\tfor(int i=0;i<string.length();i++){\n\t\tif(std::isupper(string[i])){\n\
    \t\t\tnewString+=std::tolower(string[i]);\n\t\t}\n\t\telse if(std::islower(string[i])){\n\
    \t\t\tnewString+=std::toupper(string[i]);\n\t\t}\n\t\telse{\n\t\t\tnewString+=string[i];\n\
    \t\t}\n\t}\n    return newString;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ str;\n    for(char c : string) {\n        if(isupper(c)) {\n            str\
    \ += tolower(c);\n        } else {\n            str += toupper(c);\n        }\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (islower(string[i])) {\n   \
    \   string[i] = toupper(string[i]);\n    } else {\n      string[i] = tolower(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i])) {\n   \
    \   string[i] = tolower(string[i]);\n    } else {\n      string[i] = toupper(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  // Your\
    \ code here.\n  int len = string.length();\n  for(int i=0;i<len;i++){\n    if(string[i]\
    \ >= 'a' && string[i] <= 'z'){\n      string[i] = string[i] - 'a' + 'A';\n   \
    \ }\n    else if(string[i] >= 'A' && string[i] <= 'Z'){\n      string[i] = string[i]\
    \ - 'A' + 'a';\n    }\n  }\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ new_string;\n    for (char c : string) {\n        if (std::isupper(c)) {\n \
    \           new_string += (char)std::tolower(c);\n        } else {\n         \
    \   new_string += (char)std::toupper(c);\n        }\n    }\n    return new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (char& c : string) {\n    if (islower(c)) {\n      c = toupper(c);\n    } else\
    \ {\n      c = tolower(c);\n    }\n  }\n  return string;\n}\nint main() {\n  \
    \  auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n   \
    \ assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These\
    \ violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  int\
    \ i;\n  for(i=0;i<string.length();i++)\n  {\n    if(string[i]>='a' && string[i]<='z')\n\
    \      string[i]=string[i]-'a'+'A';\n    else if(string[i]>='A' && string[i]<='Z')\n\
    \      string[i]=string[i]-'A'+'a';\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if\
    \ (isupper(string[i])) {\n            result += tolower(string[i]);\n        }\
    \ else {\n            result += toupper(string[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ First, check that the string is not empty.\n    assert(string.length() > 0);\n\
    \    std::string new_string;\n    for (auto c : string) {\n        if (std::isupper(c))\
    \ {\n            new_string += std::tolower(c);\n        } else {\n          \
    \  new_string += std::toupper(c);\n        }\n    }\n    return new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpwh758rzi: /tmp/tmpwh758rzi.cpp:8: std::string flip_case(std::string):
    Assertion `string.length() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0; i<string.length(); i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i] = 'A' + (string[i] - 'a');\n        }else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i] = 'a' + (string[i] - 'A');\n    \
    \    }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097792
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ Error Handling\n    if (string.length()==0) {\n        return \"\";\n    }\n\
    \    // Implementation\n    for (int i=0; i<string.length(); i++) {\n        if\
    \ (string[i] >= 65 && string[i] <= 90) {\n            string[i] += 32;\n     \
    \   } else if (string[i] >= 97 && string[i] <= 122) {\n            string[i] -=\
    \ 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tfor\
    \ (char& element : string) {\n\t\tif (element >= 'a' && element <= 'z') {\n\t\t\
    \telement = element - 32;\n\t\t}\n\t\telse if (element >= 'A' && element <= 'Z')\
    \ {\n\t\t\telement = element + 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ temp;\n\tfor (char c : string) {\n\t\tif (isupper(c)) {\n\t\t\ttemp += tolower(c);\n\
    \t\t}\n\t\telse {\n\t\t\ttemp += toupper(c);\n\t\t}\n\t}\n\treturn temp;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    //\
    \ Write your code here.\n    for(int i=0;i<string.length();i++){\n        if(islower(string[i])){\n\
    \            string[i]=toupper(string[i]);\n        }\n        else if(isupper(string[i])){\n\
    \            string[i]=tolower(string[i]);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ flippedString = \"\";\n    std::locale loc;\n    for (std::string::size_type\
    \ i=0; i<string.length(); ++i) {\n        if (std::islower(string[i],loc)) {\n\
    \            flippedString += std::toupper(string[i],loc);\n        } else {\n\
    \            flippedString += std::tolower(string[i],loc);\n        }\n    }\n\
    \    return flippedString;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    std::string\
    \ s = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            s += (char)(string[i] - 32);\n  \
    \      } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            s += (char)(string[i]\
    \ + 32);\n        } else {\n            s += string[i];\n        }\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(char\
    \ & c : string)\n        if(c >= 'a' && c <= 'z')\n            c = c + 'A' - 'a';\n\
    \        else if(c >= 'A' && c <= 'Z')\n            c = c + 'a' - 'A';\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (auto& c : string) {\n    if (std::isupper(c))\n      c = std::tolower(c);\n\
    \    else\n      c = std::toupper(c);\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n\tstd::string\
    \ result = \"\";\n\tint i;\n\tfor (i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tresult += (char)(string[i] -\
    \ 32);\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tresult\
    \ += (char)(string[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\
    \t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097790
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    for(int\
    \ i=0;i<string.length();i++){\n        if(islower(string[i])){\n            string[i]=toupper(string[i]);\n\
    \        }\n        else{\n            string[i]=tolower(string[i]);\n       \
    \ }\n    }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"\
    Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n    string\
    \ newString;\n    for(char& c : string) {\n        if(c >= 'a' && c <= 'z') {\n\
    \            c = toupper(c);\n        } else if(c >= 'A' && c <= 'Z') {\n    \
    \        c = tolower(c);\n        }\n        newString += c;\n    }\n    return\
    \ newString;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafozv5fc.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpafozv5fc.cpp:7:11: error: expected \u2018;\u2019 before \u2018newString\u2019\
    \n    7 |     string newString;\n      |           ^~~~~~~~~~\n      |       \
    \    ;\n/tmp/tmpafozv5fc.cpp:14:9: error: \u2018newString\u2019 was not declared\
    \ in this scope\n   14 |         newString += c;\n      |         ^~~~~~~~~\n\
    /tmp/tmpafozv5fc.cpp:16:12: error: \u2018newString\u2019 was not declared in this\
    \ scope\n   16 |     return newString;\n      |            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660097797
