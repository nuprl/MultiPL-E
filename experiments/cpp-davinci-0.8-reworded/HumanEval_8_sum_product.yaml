name: HumanEval_8_sum_product
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers,\
  \ return a tuple consisting of a sum and a product of all the integers in a vector.\n\
  // Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>>\
  \ sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long,\
  \ long> sum_product(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
  \ == (std::make_tuple(10, 10)));\n}\n"
completions: ["    long sum = 0;\n    long product = 1;\n    for(auto num : numbers)\
    \ {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    if(numbers.size() == 0) {\n        return std::make_tuple(0,\
    \ 1);\n    }\n    long sum = 0;\n    long product = 1;\n    for(auto i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    // sum is equal to 0, product is equal to 1\n    long sum =\
    \ 0;\n    long product = 1;\n    // iterate over the vector using the iterator\n\
    \    for (auto it = numbers.begin(); it != numbers.end(); it++) {\n        //\
    \ add current element to sum\n        sum += *it;\n        // update product\n\
    \        product *= *it;\n    }\n    // return the required tuple\n    return\
    \ std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor\
    \ (size_t i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct\
    \ *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, product);", "  \n    long\
    \ sum = 0;\n    long product = 1;\n    if(numbers.size()==0)\n    {\n        return\
    \ std::make_tuple(sum,product);\n    }\n    else\n    {\n        \n        for(int\
    \ i=0;i<numbers.size();i++)\n        {\n            sum = sum + numbers[i];\n\
    \            product = product * numbers[i];\n        }\n        return std::make_tuple(sum,product);\n\
    \    }\n    return std::make_tuple(sum,product);", "    // Implement this function\n\
    \    long sum = 0;\n    long product = 1;\n    if(numbers.size()==0){\n      \
    \  return std::make_tuple(sum,product);\n    }\n    else{\n        for(int i=0;i<numbers.size();i++){\n\
    \            sum += numbers[i];\n            product *= numbers[i];\n        }\n\
    \        return std::make_tuple(sum,product);\n    }", "  long sum = 0;\n  long\
    \ prod = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n\
    \    prod *= numbers[i];\n  }\n  return std::make_tuple(sum, prod);", "    long\
    \ sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size(); i++)\
    \ {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);", "    long sum = 0;\n    long product = 1;\n\
    \    for(int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n \
    \       product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "  long sum=0, prod=1;\n  for(long n:numbers){\n    sum+=n;\n    prod*=n;\n  }\n\
    \  return std::make_tuple(sum, prod);", "    long sum = 0;\n    long product =\
    \ 1;\n    for(auto i:numbers){\n        sum += i;\n        product *= i;\n   \
    \ }\n    return std::make_tuple(sum, product);", "  int i;\n  long sum = 0;\n\
    \  long prod = 1;\n  for(i=0;i<numbers.size();i++)\n  {\n    sum = sum + numbers[i];\n\
    \    prod = prod * numbers[i];\n  }\n  std::tuple<long, long> tuple = std::make_tuple(sum,\
    \ prod);\n  return tuple;", "\tlong sum=0, product=1;\n\tfor(auto it=numbers.begin();\
    \ it!=numbers.end(); it++)\n\t{\n\t\tsum+=*it;\n\t\tproduct*=*it;\n\t}\n\treturn\
    \ std::make_tuple(sum, product);", "  int size = numbers.size();\n  long sum =\
    \ 0;\n  long prod = 1;\n  if(size == 0) {\n    return std::make_tuple(sum, prod);\n\
    \  }\n  else {\n    for(int i = 0; i < size; i++) {\n      sum += numbers[i];\n\
    \      prod *= numbers[i];\n    }\n    return std::make_tuple(sum, prod);\n  }",
  "  std::tuple<long, long> temp;\n  long sum=0,product=1;\n  for(auto i:numbers){\n\
    \    sum+=i;\n    product*=i;\n  }\n  std::get<0>(temp)=sum;\n  std::get<1>(temp)=product;\n\
    \  return temp;", "    long sum = 0;\n    long product = 1;\n    for(auto i :\
    \ numbers){\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    int sum = 0;\n    int product = 1;\n    for(int i = 0; i <\
    \ numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    std::tuple<long, long> result = std::make_tuple(sum, product);\n \
    \   return result;", "  long sum = 0;\n  long product = 1;\n  for (long n : numbers)\
    \ {\n    sum += n;\n    product *= n;\n  }\n  return std::make_tuple(sum, product);",
  "    auto get_sum = [](auto x, auto y) { return x + y; };\n    auto get_product\
    \ = [](auto x, auto y) { return x * y; };\n    std::vector<long>::iterator it;\n\
    \    it = std::find_if(numbers.begin(), numbers.end(), [](auto i) { return i ==\
    \ 0; });\n    if (it != numbers.end())\n        return std::make_tuple(0, 1);\n\
    \    long sum = std::accumulate(numbers.begin(), numbers.end(), 0, get_sum);\n\
    \    long product = std::accumulate(numbers.begin(), numbers.end(), 1, get_product);\n\
    \    return std::make_tuple(sum, product);", "  long sum = std::accumulate(numbers.begin(),\
    \ numbers.end(), 0);\n  long product = std::accumulate(numbers.begin(), numbers.end(),\
    \ 1,\n                                 std::multiplies<long>());\n  return std::make_tuple(sum,\
    \ product);", "\treturn { accumulate(numbers.begin(), numbers.end(), 0), accumulate(numbers.begin(),\
    \ numbers.end(), 1, multiplies<long>()) };", "    long long sum=0, pro=1;\n  \
    \  for(auto x:numbers){\n        sum+=x;\n        pro*=x;\n    }\n    return std::make_tuple(sum,\
    \ pro);", "\tstd::tuple<long, long> t(0, 1);\n\tif (numbers.size() > 0) {\n\t\t\
    std::tuple<long, long> t(0, 1);\n\t\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\t\tstd::get<0>(t) += numbers[i];\n\t\t\tstd::get<1>(t) *= numbers[i];\n\
    \t\t}\n\t}\n\treturn t;", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i\
    \ = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\
    \t}\n\tstd::tuple<long, long> result = std::make_tuple(sum, product);\n\treturn\
    \ result;", "    long sum{0}, product{1};\n    for(const auto& number : numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    // Your code goes here...\n    long sum = 0;\n    long product\
    \ = 1;\n    if(numbers.size() == 0){\n        return std::make_tuple(sum, product);\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for (long num : numbers) {\n    \
    \    sum += num;\n        product *= num;\n    }\n    std::tuple<long, long> result\
    \ = std::make_tuple(sum, product);\n    return result;", "  // Your code here\n\
    \  int size = numbers.size();\n  long sum=0,product=1;\n  for(int i=0;i<size;i++)\n\
    \  {\n    sum+=numbers[i];\n    product*=numbers[i];\n  }\n  return std::make_tuple(sum,product);",
  "\tlong long_sum=0;\n\tlong long_product=1;\n\tif(numbers.size()==0){\n\t\treturn\
    \ std::make_tuple(0,1);\n\t}\n\tfor(int i=0;i<numbers.size();i++){\n\t\tlong_sum+=numbers[i];\n\
    \t\tlong_product*=numbers[i];\n\t}\n\treturn std::make_tuple(long_sum,long_product);",
  "    if(numbers.size() == 0) {\n        return std::make_tuple(0, 1);\n    }\n \
    \   else {\n        long sum = 0;\n        long product = 1;\n        for(long\
    \ i = 0; i < numbers.size(); i++) {\n            sum += numbers[i];\n        \
    \    product *= numbers[i];\n        }\n        return std::make_tuple(sum, product);\n\
    \    }", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "  int sum = 0;\n  int product = 1;\n  for(auto elem : numbers)\
    \ {\n    sum += elem;\n    product *= elem;\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "\tint sum = 0;\n\tint product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto it : numbers)\
    \ {\n        sum += it;\n        product *= it;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    if(numbers.size()>0){\n    \tlong sum=0;\n    \tlong product=1;\n\
    \    \tfor(int i=0;i<numbers.size();i++){\n    \t\tsum+=numbers[i];\n    \t\t\
    product*=numbers[i];\n    \t}\n    \treturn std::make_tuple(sum,product);\n  \
    \  }\n    else{\n    \treturn std::make_tuple(0,1);\n    }", "  \tint sum = 0;\n\
    \  \tint prod = 1;\n\tif(numbers.size() == 0)\n\t\treturn std::make_tuple(sum,\
    \ prod);\n\tfor(int i = 0; i < numbers.size(); i++)\n\t{\n\t\tsum += numbers[i];\n\
    \t\tprod *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, prod);", "    long\
    \ sum = 0;\n    long product = 1;\n    for(auto &number : numbers) {\n       \
    \ sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\treturn std::make_tuple(std::accumulate(numbers.begin(), numbers.end(),\
    \ 0), std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<int>()));",
  "    long sum = 0;\n    long product = 1;\n    for(long x : numbers) {\n       \
    \ sum += x;\n        product *= x;\n    }\n    return std::make_tuple(sum, product);",
  "   long sum = 0;\n   long product = 1;\n   if(numbers.size() == 0) {\n      return\
    \ std::make_tuple(sum, product);\n   }\n   for(auto num : numbers) {\n      sum\
    \ += num;\n      product *= num;\n   }\n   return std::make_tuple(sum, product);",
  "\tstd::tuple<long, long> result(0, 1);\n\tif (numbers.size() == 0)\n\t\treturn\
    \ result;\n\tresult = std::make_tuple(numbers[0], numbers[0]);\n\tfor (int i =\
    \ 1; i < numbers.size(); i++) {\n\t\tresult = std::make_tuple(std::get<0>(result)\
    \ + numbers[i], std::get<1>(result) * numbers[i]);\n\t}\n\treturn result;", " \
    \   if(numbers.size()==0)\n    {\n        return std::make_tuple(0,1);\n    }\n\
    \    else\n    {\n        long sum = 0;\n        long product = 1;\n        std::for_each(numbers.begin(),numbers.end(),[&](int\
    \ x){sum+=x;product*=x;});\n        return std::make_tuple(sum,product);\n   \
    \ }", "\tlong sum=0, pro=1;\n\tfor(long i=0; i<numbers.size(); i++){\n\t\tsum\
    \ += numbers[i];\n\t\tpro *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, pro);",
  "\tlong sum, prod;\n\tsum = 0;\n\tprod = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tprod *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ prod);", "    long sum = 0;\n    long product = 1;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); i++) {\n        sum += *i;\n        product *= *i;\n   \
    \ }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long, long>\
    \ result(sum, product);\n    return result;", "\tlong sum=0,product=1;\n\tfor(int\
    \ i=0;i<numbers.size();i++)\n\t{\n\t\tsum=sum+numbers[i];\n\t\tproduct=product*numbers[i];\n\
    \t}\n\treturn std::make_tuple(sum,product);", "    long  sum = 0, product = 1;\n\
    \    for(auto num : numbers) {\n        sum += num;\n        product *= num;\n\
    \    }\n    return std::make_tuple(sum, product);", "    int sum = 0;\n    int\
    \ product = 1;\n    for(long i : numbers){\n        sum+=i;\n        product*=i;\n\
    \    }\n    return std::make_tuple(sum, product);", "\treturn {\n\t\tstd::accumulate(std::begin(numbers),\
    \ std::end(numbers), 0L),\n\t\tstd::accumulate(std::begin(numbers), std::end(numbers),\
    \ 1L, std::multiplies<long>())\n\t};", "    long sum = 0;\n    long product =\
    \ 1;\n    for(long i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "  /* your code here */\n  long sum = 0;\n  long prod = 1;\n  for(int i = 0; i <\
    \ numbers.size(); i++){\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n\
    \  return std::make_tuple(sum, prod);", "\tstd::tuple<long, long> result;\n\t\
    long sum=0, prod=1;\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tsum+=numbers[i];\n\
    \t\tprod*=numbers[i];\n\t}\n\treturn std::make_tuple(sum, prod);", "  long sum\
    \ = 0;\n  long prod = 1;\n  int n = numbers.size();\n  for(int i = 0; i < n; i++)\
    \ {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ prod);", "    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    if(numbers.size() == 0) {\n        return std::make_tuple(0, 1);\n    }\n\
    \    return std::make_tuple(sum, product);", "  std::tuple<long, long> output\
    \ = std::make_tuple(0, 1);\n  if (numbers.size() == 0) {\n    return output;\n\
    \  }\n  else {\n    long sum = 0;\n    long product = 1;\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n      sum += *it;\n    \
    \  product *= *it;\n    }\n    output = std::make_tuple(sum, product);\n    return\
    \ output;\n  }", "    long sum = 0;\n    long product = 1;\n    for(std::vector<long>::iterator\
    \ iter = numbers.begin(); iter != numbers.end(); iter++) {\n        sum += *iter;\n\
    \        product *= *iter;\n    }\n    return std::make_tuple(sum, product);",
  "  long x = 0;\n  long y = 1;\n  if(numbers.size() == 0)\n  {\n    return std::make_tuple(x,y);\n\
    \  }\n  else\n  {\n    for(int i = 0; i < numbers.size(); i++)\n    {\n      x\
    \ += numbers[i];\n      y *= numbers[i];\n    }\n    return std::make_tuple(x,y);\n\
    \  }", "    int i;\n    long sum = 0;\n    long product = 1;\n    for(i=0;i<numbers.size();i++)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return std::make_tuple(sum, product);", "    long sum = 0;\n    long product\
    \ = 1;\n    for(auto& n : numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for(auto x: numbers){\n        sum += x;\n        product\
    \ *= x;\n    }\n    return std::make_tuple(sum, product);", "  long sum = 0;\n\
    \  long product = 1;\n  for (std::vector<long>::const_iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n    sum += *it;\n    product *= *it;\n  }\n  return\
    \ std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong prod = 1;\n\tfor (auto\
    \ v : numbers) {\n\t\tsum += v;\n\t\tprod *= v;\n\t}\n\treturn std::make_tuple(sum,\
    \ prod);", "  auto add = 0L;\n  auto multiply = 1L;\n  for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n    add += *it;\n    multiply *= *it;\n  }\n \
    \ return std::make_tuple(add, multiply);", "    if(numbers.size()==0)\n    {\n\
    \        std::tuple<long, long> answer= std::make_tuple(0,1);\n        return\
    \ answer;\n    }\n    else{\n        std::tuple<long, long> answer;\n        long\
    \ long sum=0;\n        long long product=1;\n        for(int i=0;i<numbers.size();i++)\n\
    \        {\n            sum=sum+numbers[i];\n            product=product*numbers[i];\n\
    \        }\n        std::tuple<long, long> answer= std::make_tuple(sum,product);\n\
    \        return answer;\n    }", "  // (long)0, (long)1\n  // return (std::make_tuple(0,\
    \ 1));\n  long sum = 0;\n  long product = 1;\n  for (std::vector<long>::iterator\
    \ i = numbers.begin(); i != numbers.end(); ++i) {\n    sum += *i;\n    product\
    \ *= *i;\n  }\n  return (std::make_tuple(sum, product));", "    std::tuple<long,\
    \ long> tup = std::make_tuple(0, 1);\n    if (numbers.size()==0)\n        return\
    \ tup;\n    else\n    {\n        std::tuple<long, long> tuple;\n        long sum\
    \ = 0;\n        long product = 1;\n        for (int i = 0; i < numbers.size();\
    \ i++)\n        {\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        tuple = std::make_tuple(sum, product);\n        return tuple;\n\
    \    }", "    long long sum = 0;\n    long long product = 1;\n    for(int x: numbers){\n\
    \        sum += x;\n        product *= x;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", "    // your code goes here\n\
    \    long sum = 0;\n    long product = 1;\n    if(numbers.size() == 0){\n    \
    \    return std::make_tuple(sum, product);\n    }\n    else{\n        std::vector<long>::iterator\
    \ it;\n        for(it = numbers.begin(); it != numbers.end(); it++){\n       \
    \     sum += *it;\n            product *= *it;\n        }\n        return std::make_tuple(sum,\
    \ product);\n    }", "  long sum=0,prod=1;\n  for(int i=0;i<numbers.size();i++)\n\
    \  {\n    sum+=numbers[i];\n    prod*=numbers[i];\n  }\n  return std::make_tuple(sum,prod);",
  "    long sum = 0;\n    long prod = 1;\n    for(auto itr = numbers.begin(); itr!=numbers.end();itr++){\n\
    \        sum += *itr;\n        prod *= *itr;\n    }\n    return std::make_tuple(sum,prod);",
  "    long sum, product;\n    sum = 0;\n    product = 1;\n    if(numbers.size() ==\
    \ 0)\n        return std::make_tuple(sum, product);\n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ product);", "    std::tuple<long, long> result;\n    long sum = 0;\n    long\
    \ product = 1;\n    int size = numbers.size();\n    for(int i = 0; i < size; i++)\
    \ {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result\
    \ = std::make_tuple(sum, product);\n    return result;", "\tlong sum=0,prod=1;\n\
    \tif(numbers.size()==0)\n\t\treturn {0,1};\n\tfor(int i=0;i<numbers.size();i++)\n\
    \t{\n\t\tsum+=numbers[i];\n\t\tprod*=numbers[i];\n\t}\n\treturn {sum,prod};",
  "  long sum = 0;\n  long product = 1;\n  for (long num : numbers) {\n    sum +=\
    \ num;\n    product *= num;\n  }\n  return std::make_tuple(sum, product);", '    return
    {0, 1};', "\tstd::tuple<long, long> tup;\n\tlong sum = 0;\n\tlong product = 1;\n\
    \tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct\
    \ *= numbers[i];\n\t}\n\tstd::get<0>(tup) = sum;\n\tstd::get<1>(tup) = product;\n\
    \treturn tup;", "    // your code goes here\n    std::tuple<long, long> result\
    \ = std::make_tuple(0, 1);\n    for (auto num : numbers) {\n        result = std::make_tuple(std::get<0>(result)\
    \ + num, std::get<1>(result) * num);\n    }\n    return result;", "\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    sum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "  auto get_sum = [&]() -> long {\n    return std::accumulate(numbers.begin(),\
    \ numbers.end(), 0);\n  };\n  auto get_product = [&]() -> long {\n    return std::accumulate(numbers.begin(),\
    \ numbers.end(), 1, std::multiplies<long>());\n  };\n  return std::make_tuple(get_sum(),\
    \ get_product());", "    // Write your code here\n    long sum = 0;\n    long\
    \ product = 1;\n    for(auto i : numbers){\n        sum += i;\n        product\
    \ *= i;\n    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n\
    \    long product = 1;\n    for(long i = 0; i < numbers.size(); i++) {\n     \
    \   sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long,\
    \ long> sum_product_tuple = std::make_tuple(sum, product);\n    return sum_product_tuple;",
  "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    std::tuple<long, long> tuple = std::make_tuple(sum, product);\n    return\
    \ tuple;", "\tif (numbers.size() == 0) {\n\t\tstd::tuple<long, long> t(0, 1);\n\
    \t\treturn t;\n\t}\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i\
    \ < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\
    \t}\n\tstd::tuple<long, long> t(sum, product);\n\treturn t;", "  long sum = 0;\n\
    \  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum +=\
    \ numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long result = std::accumulate(numbers.begin(), numbers.end(),0);\n\
    \    long product = std::accumulate(numbers.begin(), numbers.end(),1,std::multiplies<long>());\n\
    \    return std::make_tuple(result,product);", "    long sum=0, prod=1;\n    for(auto\
    \ i:numbers){\n        sum+=i;\n        prod*=i;\n    }\n    return std::make_tuple(sum,\
    \ prod);", "\tif (numbers.size() == 0)\n\t\treturn std::make_tuple(0, 1);\n\t\
    long sum = 0, product = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    sum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for(auto num : numbers) {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return std::make_tuple(sum, product);", "    // This function\
    \ needs to return a tuple.\n    // The variables sum and product must be declared\
    \ as long.\n    // Write your solution here\n    long sum = 0;\n    long product\
    \ = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "\t// your code here\n\n\n\treturn {};", "    long sum = 0;\n  \
    \  long product = 1;\n    for(auto &number : numbers) {\n        sum += number;\n\
    \        product *= number;\n    }\n    return std::make_tuple(sum, product);",
  "    // your code here\n    long sum = 0;\n    long product = 1;\n    for(auto i\
    \ : numbers){\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for(std::vector<long>::iterator i = numbers.begin(); i !=\
    \ numbers.end(); i++) {\n        sum += *i;\n        product *= *i;\n    }\n \
    \   return std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong product =\
    \ 1;\n\tfor (auto i : numbers) {\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn\
    \ std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor\
    \ (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct\
    \ *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, product);", "    long sum\
    \ = 0;\n    long product = 1;\n    for(auto x: numbers){\n        sum += x;\n\
    \        product *= x;\n    }\n    return std::make_tuple(sum, product);", " \
    \   // your code here\n    long sum = 0;\n    long product = 1;\n    for(auto\
    \ it = numbers.begin(); it != numbers.end(); it++){\n        sum += *it;\n   \
    \     product *= *it;\n    }\n    std::tuple<long, long> t1(sum, product);\n \
    \   return t1;", "    long s = 0;\n    long p = 1;\n    for(auto const& i : numbers)\
    \ {\n        s += i;\n        p *= i;\n    }\n    return std::make_tuple(s, p);",
  "    long sum = std::accumulate(numbers.begin(), numbers.end(), 0);\n    long product\
    \ = std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<long>());\n\
    \    return std::make_tuple(sum, product);", "    int sum = 0;\n    int product\
    \ = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    std::tuple<long, long> mytuple = std::make_tuple(sum,\
    \ product);\n    return mytuple;", "    std::tuple<long, long> result = std::make_tuple(0,\
    \ 1);\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n    \
    \    std::get<0>(result) += *it;\n        std::get<1>(result) *= *it;\n    }\n\
    \    return result;", "  int n = numbers.size();\n  long sum = 0;\n  long product\
    \ = 1;\n  for(int i = 0; i < n; i++) {\n    sum += numbers[i];\n    product *=\
    \ numbers[i];\n  }\n  return std::make_tuple(sum, product);", "    long sum =\
    \ 0;\n    long prod = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n    \
    \    sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ prod);", "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return std::make_tuple(sum, product);", "    long sum;\n    long product;\n\
    \    return std::make_tuple(sum, product);", "    long sum=0,prod=1;\n    for(auto\
    \ i:numbers){\n        sum+=i;\n        prod*=i;\n    }\n    return std::make_tuple(sum,prod);",
  "  long sum = 0;\n  long product = 1;\n  for (auto &x : numbers) {\n    sum += x;\n\
    \    product *= x;\n  }\n  return std::make_tuple(sum, product);", "    long sum\
    \ = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);", "    std::tuple<long, long> ans;\n    if(numbers.size()\
    \ == 0)\n    {\n        ans = std::make_tuple(0, 1);\n    }\n    else\n    {\n\
    \        long sum = 0;\n        long product = 1;\n        for(long i = 0; i <\
    \ numbers.size(); i++)\n        {\n            sum += numbers[i];\n          \
    \  product *= numbers[i];\n        }\n        ans = std::make_tuple(sum, product);\n\
    \    }\n    return ans;", "\tlong sum,product;\n\tstd::tie(sum,product)=std::make_tuple(0,1);\n\
    \tfor(int i=0;i<numbers.size();i++)\n\t{\n\t\tsum=sum+numbers[i];\n\t\tproduct=product*numbers[i];\n\
    \t}\n\treturn std::make_tuple(sum,product);", "  // write your code here\n  long\
    \ sum = 0;\n  long product = 1;\n  for(long i = 0; i < numbers.size(); i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  std::tuple<long, long>\
    \ ret = std::make_tuple(sum, product);\n  return ret;", "  return std::make_tuple(std::accumulate(numbers.begin(),\
    \ numbers.end(), 0),\n                         std::accumulate(numbers.begin(),\
    \ numbers.end(), 1,\n                                         std::multiplies<long>()));",
  "    long long sum=0,prod=1;\n    for(int i=0;i<numbers.size();i++)\n    {\n   \
    \     sum+=numbers[i];\n        prod*=numbers[i];\n    }\n    return std::make_tuple(sum,prod);",
  "    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return std::make_tuple(sum, product);", "  //   std::vector<int> v = {1,\
    \ 2, 3, 4};\n  //   long sum = std::accumulate(v.begin(), v.end(), 0);\n  // \
    \  long product = std::accumulate(v.begin(), v.end(), 1, std::multiplies<int>());\n\
    \  //   return std::make_tuple(sum, product);\n  if (numbers.size() == 0) {\n\
    \    return std::make_tuple(0, 1);\n  }\n  long sum = 0;\n  long product = 1;\n\
    \  for (long i : numbers) {\n    sum += i;\n    product *= i;\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long sum=0, product=1;\n    for(int i=0; i<numbers.size();\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return {sum, product};", "    long sum{0},product{1};\n    for(auto &x:numbers){\n\
    \        sum+=x;\n        product*=x;\n    }\n    return std::make_tuple(sum,product);",
  "    long sum=0, product=1;\n    for(long i=0; i<numbers.size(); i++){\n       \
    \ sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long s=0,p=1;\n    for(int i=0;i<numbers.size();i++)\n    {\n\
    \        s+=numbers[i];\n        p*=numbers[i];\n    }\n    return make_tuple(s,p);",
  "    // replace with your code\n    long sum=0,product=1;\n    if(numbers.size()==0)\n\
    \    {\n        return std::make_tuple(sum,product);\n    }\n    else\n    {\n\
    \        for(int i=0;i<numbers.size();i++)\n        {\n            sum+=numbers[i];\n\
    \            product*=numbers[i];\n        }\n        return std::make_tuple(sum,product);\n\
    \    }", "    long sum=0, product=1;\n    for(auto x:numbers){\n        sum+=x;\n\
    \        product*=x;\n    }\n    return std::make_tuple(sum, product);", "   \
    \ long product = 1;\n    long sum = 0;\n    if(numbers.size() == 0) {\n      \
    \  product = 1;\n        sum = 0;\n    }\n    else {\n        product = numbers[0];\n\
    \        sum = numbers[0];\n        for(long i = 1; i < numbers.size(); i++) {\n\
    \            product *= numbers[i];\n            sum += numbers[i];\n        }\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ product);", '    return std::make_tuple(0, 1);', "    if(numbers.size()==0)\n\
    \    {\n        return std::make_tuple(0,1);\n    }\n    long sum=0;\n    long\
    \ product=1;\n    for(int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n\
    \        product*=numbers[i];\n    }\n    return std::make_tuple(sum,product);",
  "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    std::tuple<long, long> result (sum, product);\n    return result;", "\tlong\
    \ sum = 0;\n\tlong product = 1;\n\tfor (long number : numbers) {\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn std::make_tuple(sum, product);", "    long\
    \ sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size(); i++)\
    \ {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);", "  // long size = sizeof(numbers)/sizeof(numbers[0]);\n\
    \  long sum = 0;\n  long product = 1;\n  for(int i = 0; i < numbers.size(); i++)\
    \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  std::tuple<long,\
    \ long> result = std::make_tuple(sum, product);\n  return result;", "\tstd::tuple<long,\
    \ long> result;\n\tlong sum = 0;\n\tlong product = 1;\n\tif (numbers.size() ==\
    \ 0) {\n\t\tsum = 0;\n\t\tproduct = 1;\n\t}\n\telse {\n\t\tfor (int i = 0; i <\
    \ numbers.size(); i++) {\n\t\t\tsum += numbers[i];\n\t\t\tproduct *= numbers[i];\n\
    \t\t}\n\t}\n\tresult = std::make_tuple(sum, product);\n\treturn result;", "  \
    \  int sum = 0;\n    int product = 1;\n    for(auto & e : numbers) {\n       \
    \ sum += e;\n        product *= e;\n    }\n    return std::make_tuple(sum, product);",
  "  // TODO: implement\n  if(numbers.size()==0)\n  {\n    return std::make_tuple(0,1);\n\
    \  }\n  else\n  {\n    int s=0;\n    long mul=1;\n    for(int i=0;i<numbers.size();i++)\n\
    \    {\n      s+=numbers[i];\n      mul*=numbers[i];\n    }\n    return std::make_tuple(s,mul);\n\
    \  }", "  // your code here!\n  long sum = std::accumulate(numbers.begin(), numbers.end(),\
    \ 0);\n  long product = std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<long>());\n\
    \  std::tuple<long, long> result (sum, product);\n  return result;", "\tlong sum=0,prod=1;\n\
    \tif(numbers.size()==0)\n\t{\n\t\tsum=0;\n\t\tprod=1;\n\t}\n\telse\n\t{\n\t\t\
    for(auto i:numbers)\n\t\t{\n\t\t\tsum+=i;\n\t\t\tprod*=i;\n\t\t}\n\t}\n\treturn\
    \ std::make_tuple(sum,prod);", "    std::tuple<long, long> ret = std::make_tuple(0,\
    \ 1);\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n    \
    \    std::get<0>(ret) += *it;\n        std::get<1>(ret) *= *it;\n    }\n    return\
    \ ret;", "  long prod = 1;\n  long sum = 0;\n  for(auto i:numbers){\n    prod\
    \ *= i;\n    sum += i;\n  }\n  return std::make_tuple(sum, prod);", "\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    sum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    int size = numbers.size();\n\
    \    if(size == 0) {\n        sum = 0;\n        product = 1;\n    } else {\n \
    \       for(int i = 0; i < size; i++) {\n            sum += numbers[i];\n    \
    \        product *= numbers[i];\n        }\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    std::tuple<long, long> tuple = std::make_tuple(sum, product);\n  \
    \  return tuple;", "  long sum = 0;\n  long product = 1;\n  if (numbers.size()\
    \ == 0) {\n    return std::make_tuple(sum, product);\n  }\n  for (long i = 0;\
    \ i < numbers.size(); i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n\
    \  }\n  return std::make_tuple(sum, product);", "    long sum = 0;\n    long prod\
    \ = 1;\n    for(long i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        prod *= numbers[i];\n    }\n    return std::make_tuple(sum, prod);",
  "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++)\
    \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", '  return std::make_tuple(0,
    1);', "    long sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return std::make_tuple(sum, product);", "    long sum = 0;\n    long product\
    \ = 1;\n    if (numbers.size() == 0) {\n        sum = 0;\n        product = 1;\n\
    \    } else {\n        std::for_each(numbers.begin(), numbers.end(), [&](int value)\
    \ {\n            sum += value;\n            product *= value;\n        });\n \
    \   }\n    return std::make_tuple(sum, product);", "  long long sum = 0;\n  long\
    \ long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum +=\
    \ numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "\tstd::tuple<long, long> result;\n\tif(numbers.size() == 0) {\n\
    \t\tresult = std::make_tuple(0, 1);\n\t} else {\n\t\tlong sum = 0;\n\t\tlong product\
    \ = 1;\n\t\tfor(int i = 0; i < numbers.size(); i++) {\n\t\t\tsum += numbers[i];\n\
    \t\t\tproduct *= numbers[i];\n\t\t}\n\t\tresult = std::make_tuple(sum, product);\n\
    \t}\n\treturn result;", "\t// write code here\n\tif (numbers.size() == 0)\n\t\t\
    return std::make_tuple(0, 1);\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long\
    \ i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\
    \t}\n\treturn std::make_tuple(sum, product);", "    long sum = 0;\n    long product\
    \ = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for(auto itr = numbers.begin(); itr\
    \ != numbers.end(); itr++) {\n        sum += *itr;\n        product *= *itr;\n\
    \    }\n    return std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tfor (auto const& number : numbers) {\n\t\tsum += number;\n\t\tproduct\
    \ *= number;\n\t}\n\treturn std::make_tuple(sum, product);", "    long sum = 0;\n\
    \    long pro = 1;\n    for(auto &i : numbers){\n        sum += i;\n        pro\
    \ *= i;\n    }\n    return std::make_tuple(sum, pro);", "    long sum = 0;\n \
    \   long prod = 1;\n    for(auto n : numbers) {\n        sum += n;\n        prod\
    \ *= n;\n    }\n    return std::make_tuple(sum, prod);", '  return std::make_tuple(0,
    1);', "\tstd::tuple<long, long> result;\n\tlong sum = 0;\n\tlong product = 1;\n\
    \tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tproduct\
    \ *= numbers[i];\n\t}\n\tresult = std::make_tuple(sum, product);\n\treturn result;",
  "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++)\
    \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for(long n : numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\tif (numbers.size() == 0) {\n\t\treturn std::make_tuple(0, 1);\n\
    \t}\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "    long sum=0, product=1;\n    for(auto i:numbers){\n        sum+=i;\n\
    \        product*=i;\n    }\n    return std::make_tuple(sum, product);", "   \
    \ long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return std::make_tuple(sum, product);", "    long int sum = 0;\n    long\
    \ int product = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long product{1};\n    long sum{0};\n    for(auto num:numbers){\n\
    \        product *= num;\n        sum += num;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    if(numbers.size() == 0)\n        return std::make_tuple(0,\
    \ 1);\n    else {\n        long sum, product;\n        sum = product = 1;\n  \
    \      for(long i = 0; i < numbers.size(); i++) {\n            sum += numbers[i];\n\
    \            product *= numbers[i];\n        }\n        return std::make_tuple(sum,\
    \ product);\n    }", "  if(numbers.size() == 0) {\n    return std::make_tuple(0,\
    \ 1);\n  }\n  else {\n    long sum = 0;\n    long product = 1;\n    for(long i\
    \ : numbers) {\n      sum += i;\n      product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);\n  }", "  int sum = 0;\n  int product = 1;\n  for(int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  int sum = 0;\n  int prod = 1;\n  if(numbers.size()==0){\n   \
    \ return std::make_tuple(0,1);\n  }\n  for(int i=0;i<numbers.size();i++){\n  \
    \  sum+=numbers[i];\n    prod*=numbers[i];\n  }\n  return std::make_tuple(sum,prod);",
  "  long sum = 0;\n  long product = 1;\n  for (long number : numbers) {\n    sum\
    \ += number;\n    product *= number;\n  }\n  return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long prod = 1;\n    for(int i = 0; i < numbers.size(); i++)\
    \ {\n        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, prod);", "  long sum = 0;\n  long product = 1;\n  for (auto\
    \ n : numbers) {\n    sum += n;\n    product *= n;\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    if (numbers.size()\
    \ == 0) {\n        return std::make_tuple(sum, product);\n    }\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return std::make_tuple(sum, product);", "    long\
    \ sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);", "\t// your code here\n\tlong sum = 0;\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\
    \t\tproduct *= numbers[i];\n\t}\n\tstd::tuple<long, long> ret(sum, product);\n\
    \treturn ret;", "    auto sum=0l;\n    auto prod=1l;\n    for(auto n:numbers){\n\
    \        sum+=n;\n        prod*=n;\n    }\n    return std::make_tuple(sum,prod);",
  "\t// Implement this function\n\tint n = numbers.size();\n\tstd::tuple<long, long>\
    \ result;\n\tlong sum = 0;\n\tlong prod = 1;\n\tfor (int i = 0; i < n; i++) {\n\
    \t\tsum += numbers[i];\n\t\tprod *= numbers[i];\n\t}\n\tresult = std::make_tuple(sum,\
    \ prod);\n\treturn result;", "  return std::make_tuple(std::accumulate(numbers.begin(),\
    \ numbers.end(), 0L),\n                         std::accumulate(numbers.begin(),\
    \ numbers.end(), 1L, std::multiplies<long>()));", "\tlong long sum = 0;\n\tlong\
    \ long product = 1;\n\tfor (auto i : numbers) {\n\t\tsum += i;\n\t\tproduct *=\
    \ i;\n\t}\n\treturn std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    for(long num : numbers) {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return std::make_tuple(sum, product);", "    long sum =\
    \ 0;\n    long product = 1;\n    for(auto &num : numbers) {\n        sum += num;\n\
    \        product *= num;\n    }\n    return std::make_tuple(sum, product);", " \
    \ long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++)\
    \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  std::tuple<long,\
    \ long> result = std::make_tuple(sum, product);\n  return result;", "  long sum\
    \ = 0;\n  long prod = 1;\n  for (long i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    prod *= numbers[i];\n  }\n  std::tuple<long, long> myTuple\
    \ = std::make_tuple(sum, prod);\n  return myTuple;", "\tlong s = 0;\n\tlong p\
    \ = 1;\n\tfor (auto n : numbers) {\n\t\ts += n;\n\t\tp *= n;\n\t}\n\treturn std::make_tuple(s,\
    \ p);", "    long sum=0,product=1;\n    for(auto it:numbers){\n        sum+=it;\n\
    \        product*=it;\n    }\n    return std::make_tuple(sum,product);", "   \
    \ long sum = 0;\n    long product = 1;\n    for (auto number : numbers) {\n  \
    \      sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "  long sum=0,product=1;\n  if(numbers.size()==0)\n    return std::make_tuple(sum,product);\n\
    \  for(int i=0;i<numbers.size();i++)\n  {\n    sum+=numbers[i];\n    product*=numbers[i];\n\
    \  }\n  return std::make_tuple(sum,product);", "  int sum = 0;\n  int product\
    \ = 1;\n  for(int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  std::tuple<long, long> my_tuple = std::make_tuple(sum,\
    \ product);\n  return my_tuple;", "    long s=0,p=1;\n    for(auto item:numbers){\n\
    \        s=s+item;\n        p=p*item;\n    }\n    if(numbers.size()==0){\n   \
    \     s=0;\n        p=1;\n    }\n    return std::make_tuple(s,p);", "\tlong long\
    \ sum = 0;\n\tlong long product = 1;\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "\tauto sum=0;\n\tauto product=1;\n\tfor(auto i=0;i<numbers.size();i++){\n\
    \t\tsum+=numbers[i];\n\t\tproduct*=numbers[i];\n\t}\n\treturn std::make_tuple(sum,product);",
  "  long sum=0, product=1;\n  for(long i:numbers){\n    sum+=i;\n    product*=i;\n\
    \  }\n  return std::make_tuple(sum, product);"]
stop_tokens:
- "\n}"
