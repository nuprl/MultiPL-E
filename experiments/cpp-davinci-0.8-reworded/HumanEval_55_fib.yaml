name: HumanEval_55_fib
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n\
  // >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong\
  \ fib(long n) {\n"
tests: "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
  \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
  \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
completions: ["if(n<=1)\nreturn 1;\nelse return fib(n-1)+fib(n-2);", "\tstd::vector<long>\
    \ fib(n + 1);\n\tfib[0] = 0;\n\tfib[1] = 1;\n\tfor (long i = 2; i <= n; i++) {\n\
    \t\tfib[i] = fib[i - 1] + fib[i - 2];\n\t}\n\treturn fib[n];", "  long a = 0;\n\
    \  long b = 1;\n  while (n > 0) {\n    a += b;\n    b += a;\n    n -= 1;\n  }\n\
    \  return a;", "  if (n <= 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n\
    \ - 2);", "\tstd::vector<long> fib_memo(n+1);\n\tif (n == 0 || n == 1) {\n\t\t\
    return n;\n\t}\n\tif (fib_memo[n] != 0) {\n\t\treturn fib_memo[n];\n\t}\n\tfib_memo[n]\
    \ = fib(n-1) + fib(n-2);\n\treturn fib_memo[n];", "  long a, b, c;\n  a = 1;\n\
    \  b = 1;\n  c = 0;\n  if (n == 1 || n == 2) {\n    return 1;\n  }\n  while (n\
    \ > 2) {\n    c = a + b;\n    a = b;\n    b = c;\n    n = n - 1;\n  }\n  return\
    \ c;", "    if (n < 2) {\n        return n;\n    } else {\n        return fib(n\
    \ - 1) + fib(n - 2);\n    }", "    long i;\n    long a = 0;\n    long b = 1;\n\
    \    if (n == 0) {\n        return a;\n    }\n    for (i = 2; i <= n; i++) {\n\
    \        a = a + b;\n        b = a - b;\n    }\n    return b;", "    if (n ==\
    \ 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n\
    \    if (n == 2) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n -\
    \ 2);", "  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);",
  "    assert(n >= 0);\n    long a = 0;\n    long b = 1;\n    while (n > 0) {\n  \
    \      long c = a + b;\n        a = b;\n        b = c;\n        n -= 1;\n    }\n\
    \    return a;", "    if (n==0) {\n        return 0;\n    }\n    if (n==1) {\n\
    \        return 1;\n    }\n    return fib(n-1) + fib(n-2);", "    if (n <= 1)\
    \ {\n        return n;\n    }\n    long a = 0;\n    long b = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        long next = a + b;\n        a = b;\n        b\
    \ = next;\n    }\n    return b;", "    long f1 = 0;\n    long f2 = 1;\n    long\
    \ f3 = 1;\n    for (long i = 0; i < n - 1; i++) {\n        f3 = f1 + f2;\n   \
    \     f1 = f2;\n        f2 = f3;\n    }\n    return f3;", "  if (n <= 1)\n   \
    \ return n;\n  return fib(n - 1) + fib(n - 2);", "\tif (n < 2) {\n\t\treturn n;\n\
    \t}\n\telse {\n\t\treturn fib(n - 1) + fib(n - 2);\n\t}", "  if(n<=1)\n  return\
    \ n;\n  return fib(n-1)+fib(n-2);", "  long a = 0;\n  long b = 1;\n  while (n--\
    \ > 0) {\n    long t = a + b;\n    a = b;\n    b = t;\n  }\n  return a;", "\t\
    if (n <= 2)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n - 2);", "    assert(n\
    \ >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    else if (n == 1) {\n\
    \        return 1;\n    }\n    else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }", "    if (n==0) return 0;\n    if (n==1) return 1;\n    return fib(n-1)\
    \ + fib(n-2);", "    if (n <= 2)\n        return 1;\n    return fib(n - 1) + fib(n\
    \ - 2);", "\tlong arr[n+1];\n\tarr[0] = 0;\n\tarr[1] = 1;\n\tfor(int i=2;i<=n;i++)\n\
    \t\tarr[i] = arr[i-1] + arr[i-2];\n\treturn arr[n];", '  return (n <= 1) ? n :
    fib(n - 1) + fib(n - 2);', "    assert(n >= 0);\n    std::vector<long> fibs =\
    \ {0, 1};\n    while (fibs.size() <= n) {\n        long f = fibs.size();\n   \
    \     fibs.push_back(fibs[f - 1] + fibs[f - 2]);\n    }\n    return fibs[n];",
  "    if (n < 3) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);",
  "  long a = 0;\n  long b = 1;\n  long c = 0;\n  long i = 0;\n  while (i < n) {\n\
    \    c = a + b;\n    a = b;\n    b = c;\n    i++;\n  }\n  return a;", "     assert(n>=0);\n\
    \     if (n==0||n==1) return n;\n     long last = 0;\n     long nextlast = 1;\n\
    \     long result = 0;\n     for (long i=2; i<=n; i++) {\n         result = last\
    \ + nextlast;\n         nextlast = last;\n         last = result;\n     }\n  \
    \   return result;", "\tassert(n>=0);\n\tif (n == 0) {\n\t\treturn 0;\n\t} else\
    \ if (n == 1) {\n\t\treturn 1;\n\t} else {\n\t\tlong n_1 = 0;\n\t\tlong n_2 =\
    \ 1;\n\t\tlong n_3 = 0;\n\t\tfor (long i = 2; i <= n; i++) {\n\t\t\tn_3 = n_1\
    \ + n_2;\n\t\t\tn_1 = n_2;\n\t\t\tn_2 = n_3;\n\t\t}\n\t\treturn n_3;\n\t}", " \
    \   if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "  if (n < 0) {\n    return\
    \ -1;\n  }\n  else if (n == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n \
    \   return 1;\n  }\n  else {\n    return fib(n - 1) + fib(n - 2);\n  }", "  if\
    \ (n == 0 || n == 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n\
    \ - 2);\n  }", "    long first = 0;\n    long second = 1;\n    long i;\n    for\
    \ (i = 0; i < n; i++) {\n        long temp = first;\n        first = second;\n\
    \        second = temp + second;\n    }\n    return first;", "    long f1 = 0;\n\
    \    long f2 = 1;\n    long temp;\n    while (n > 0) {\n        temp = f1;\n \
    \       f1 = f2;\n        f2 = temp + f2;\n        n--;\n    }\n    return f1;",
  "  if (n < 0) {\n    assert(false);\n  }\n  if (n == 0) {\n    return 0;\n  }\n\
    \  if (n == 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);", "  \
    \  assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    else if (n\
    \ == 1) {\n        return 1;\n    }\n    else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }", "    assert(n >= 0);\n    if (n < 2) {\n        return n;\n \
    \   }\n    return fib(n - 1) + fib(n - 2);", "\tif (n == 0) {\n\t\treturn 0;\n\
    \t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);",
  "\t//cppcheck-suppress redundantAssignment\n\tlong i = 0;\n\tlong j = 1;\n\t//cppcheck-suppress\
    \ redundantAssignment\n\tlong k = 1;\n\tlong count = 2;\n\t//cppcheck-suppress\
    \ redundantAssignment\n\tlong t;\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n\
    \ == 1) {\n\t\treturn 1;\n\t}\n\twhile (count < n) {\n\t\tt = i + j;\n\t\ti =\
    \ j;\n\t\tj = t;\n\t\tcount = count + 1;\n\t}\n\treturn j;", "    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n \
    \   return fib(n - 1) + fib(n - 2);", "    assert(n >= 0);\n    assert(n <= 45);\n\
    \    std::vector<long> f(n+1);\n    f[0] = 0;\n    f[1] = 1;\n    for (long i\
    \ = 2; i <= n; i++) {\n        f[i] = f[i-1] + f[i-2];\n    }\n    return f[n];",
  "\tassert(n >= 0);\n\tlong a = 0;\n\tlong b = 1;\n\tlong counter = 0;\n\twhile (counter\
    \ < n) {\n\t\tlong a_ = a;\n\t\tlong b_ = b;\n\t\ta = b_;\n\t\tb = a_ + b_;\n\t\
    \tcounter = counter + 1;\n\t}\n\treturn a;", "    long a = 0;\n    long b = 1;\n\
    \    long c = 0;\n    while (n-- > 0) {\n        c = a + b;\n        a = b;\n\
    \        b = c;\n    }\n    return a;", "   if (n == 0) {\n      return 0;\n \
    \  }\n   if (n == 1) {\n      return 1;\n   }\n   return fib(n - 1) + fib(n -\
    \ 2);", "    // Task 1: Define a function that returns the n-th Fibonacci number.\n\
    \    return 0;", "  assert(n >= 0);\n  std::vector<long> f(n + 1);\n  f[0] = 0;\n\
    \  f[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    f[i] = f[i - 1] + f[i - 2];\n\
    \  }\n  return f[n];", "    assert(n >= 0);\n    if (n <= 1) {\n        return\
    \ n;\n    }\n    else {\n        return fib(n - 1) + fib(n - 2);\n    }", "  long\
    \ t0 = 0;\n  long t1 = 1;\n  long s;\n  int i;\n  if (n <= 1)\n    return n;\n\
    \  for (i = 2; i <= n; i++) {\n    s = t0 + t1;\n    t0 = t1;\n    t1 = s;\n \
    \ }\n  return s;", "    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }", "  // Convert to 0-based indexing.\n  n = n - 1;\n  long prior\
    \ = 0;\n  long current = 1;\n  // Loop invariant: prior = fib(n - 1) and current\
    \ = fib(n).\n  while (n > 0) {\n    // At the start of each iteration of this\
    \ loop, we have prior = fib(i - 1)\n    // and current = fib(i) where i is the\
    \ loop counter.\n    // We want to maintain this invariant when the loop counter\
    \ decreases.\n    // Substituting i - 1 for i gives prior = fib(i - 2) and current\
    \ = fib(i - 1).\n    // Adding these equations gives 2*current = fib(i) + fib(i\
    \ - 1).\n    // Rearranging gives current = fib(i) + fib(i - 1) and prior = fib(i\
    \ - 1).\n    // So we maintain the loop invariant by adding prior to current and\
    \ then\n    // setting prior to the old value of current.\n    current = current\
    \ + prior;\n    prior = current - prior;\n    n = n - 1;\n  }\n  return current;",
  "    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return\
    \ fib(n - 1) + fib(n - 2);", "if (n == 0 || n == 1)\nreturn n;\nlong res = fib(n\
    \ - 1) + fib(n - 2);\nreturn res;", "    assert(n >= 0);\n    if (n <= 1) {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if (n ==\
    \ 0)\n    {\n        return 0;\n    }\n    else if (n == 1)\n    {\n        return\
    \ 1;\n    }\n    else\n    {\n        return fib(n - 1) + fib(n - 2);\n    }\n\
    \    ", "    if (n==0 || n==1) {\n        return 1;\n    }\n    else {\n     \
    \   return fib(n-1) + fib(n-2);\n    }", "    long a=0,b=1,c=1;\n    if(n==0)\n\
    \        return 0;\n    if(n==1)\n        return 1;\n    while(n>1)\n    {\n \
    \       c=a+b;\n        a=b;\n        b=c;\n        n--;\n    }\n    return c;",
  "if (n < 2) {\nreturn n;", '    return 0;', "  long a, b, c;\n  a = 0;\n  b = 1;\n\
    \  long i;\n  for (i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n\
    \  }\n  return a;", "    if (n == 0)\n        return 0;\n    else if (n == 1)\n\
    \        return 1;\n    else\n        return fib(n - 1) + fib(n - 2);", "  if(n\
    \ == 0) return 0;\n  else if(n == 1) return 1;\n  else return fib(n-1) + fib(n-2);",
  "\tif (n == 0)\n\t\treturn 1;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib(n - 1)\
    \ + fib(n - 2);", "  long first = 0;\n  long second = 1;\n  long tmp;\n  long\
    \ i;\n  for (i = 0; i < n; i++) {\n    tmp = first;\n    first = second;\n   \
    \ second = tmp + second;\n  }\n  return first;", "  if (n <= 1) {\n    return\
    \ n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }", '    return n <=
    1 ? n : fib(n - 1) + fib(n - 2);', "    if (n < 2) {\n        return n;\n    }\n\
    \    else {\n        return fib(n - 1) + fib(n - 2);\n    }", "    long result;\n\
    \    if(n==0) {\n        result = 0;\n    }\n    else if(n==1) {\n        result\
    \ = 1;\n    }\n    else {\n        result = fib(n-1) + fib(n-2);\n    }\n    return\
    \ result;", "  if (n == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n    return\
    \ 1;\n  }\n  else {\n    return fib(n - 1) + fib(n - 2);\n  }", "    if (n <=\
    \ 1) {\n        return n;\n    }\n    else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }", "    if (n < 2)\n        return n;\n    return fib(n - 1) + fib(n\
    \ - 2);", "    if (n <= 1)\n        return n;\n    else\n        return fib(n\
    \ - 1) + fib(n - 2);", "  if (n==0) {\n    return 0;\n  }\n  if (n==1) {\n   \
    \ return 1;\n  }\n  return fib(n-1)+fib(n-2);", "  if (n == 0) {\n    return 0;\n\
    \  }\n  else if (n == 1) {\n    return 1;\n  }\n  else {\n    return fib(n - 1)\
    \ + fib(n - 2);\n  }", "// WRITE YOUR CODE HERE\n// USE RECURSION, find the n-th\
    \ fibonacci number of integer n, i.e. fib(n)\nif (n==0) return 0;\nif (n==1) return\
    \ 1;\nreturn fib(n-1)+fib(n-2);", '    return n == 0 ? 0 : n == 1 ? 1 : fib(n
    - 1) + fib(n - 2);', "    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    assert(n\
    \ >= 0);\n    long f0 = 0;\n    long f1 = 1;\n    long f2 = 1;\n    for (int i\
    \ = 0; i < n; i++) {\n        f2 = f0 + f1;\n        f0 = f1;\n        f1 = f2;\n\
    \    }\n    return f0;", "  if (n==0) { return 0; }\n  else if (n==1) { return\
    \ 1; }\n  else { return fib(n-1) + fib(n-2); }", "\tif (n <= 1)\n\t\treturn n;\n\
    \treturn fib(n - 1) + fib(n - 2);", "\tlong a, b, c;\n\ta = 0;\n\tb = 1;\n\tfor\
    \ (int i = 0; i < n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn\
    \ a;", "  long a = 0;\n  long b = 1;\n  for (int i = 0; i < n; i++) {\n    long\
    \ c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;", "\tif (n == 0) {\n\t\t\
    return 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\tlong pre = 0;\n\tlong cur\
    \ = 1;\n\tlong ans = 1;\n\tfor (long i = 2; i <= n; i++) {\n\t\tans = pre + cur;\n\
    \t\tpre = cur;\n\t\tcur = ans;\n\t}\n\treturn ans;", "    \n    if (n == 0) {\n\
    \        return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }", "  if(n == 0 || n == 1)\n  \
    \  return n;\n  else\n    return fib(n-1) + fib(n-2);", "  if (n == 0) return\
    \ 0;\n  if (n == 1) return 1;\n  return fib(n - 1) + fib(n - 2);", "  assert(n\
    \ >= 0);\n  return (n<2)? n : fib(n-1) + fib(n-2);", '  return n <= 1 ? n : fib(n
    - 1) + fib(n - 2);', "    assert(n >= 0);\n    if (n <= 1) return n;\n    return\
    \ fib(n - 1) + fib(n - 2);", "  if (n == 0) {\n    return 0;\n  }\n  else if (n\
    \ == 1) {\n    return 1;\n  }\n  else {\n    return fib(n - 1) + fib(n - 2);\n\
    \  }", "    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);", "  long f0, f1, i;\n  assert(n >= 0);\n  if (n < 2)\n \
    \   return n;\n  f0 = 0;\n  f1 = 1;\n  for (i = 2; i <= n; i++) {\n    long f2\
    \ = f0 + f1;\n    f0 = f1;\n    f1 = f2;\n  }\n  return f1;", "    assert(n>=0);\n\
    \    int i;\n    long fib0, fib1, temp;\n    fib0 = 0;\n    fib1 = 1;\n    for\
    \ (i=2; i<=n; i++) {\n        temp = fib0 + fib1;\n        fib0 = fib1;\n    \
    \    fib1 = temp;\n    }\n    return fib1;", "    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 1;\n    return fib(n - 1) + fib(n - 2);",
  "    long result = 0;\n    if (n == 0) {\n        result = 0;\n    } else if (n\
    \ == 1) {\n        result = 1;\n    } else {\n        result = fib(n - 1) + fib(n\
    \ - 2);\n    }\n    return result;", "    assert(n >= 0);\n    if (n == 0 || n\
    \ == 1)\n        return n;\n    else {\n        long a = 0;\n        long b =\
    \ 1;\n        long ans = 0;\n        for (long i = 2; i <= n; i++) {\n       \
    \     ans = a + b;\n            a = b;\n            b = ans;\n        }\n    \
    \    return ans;\n    }", "    long prev = 0;\n    long curr = 1;\n    for (long\
    \ i = 0; i < n; i++) {\n        long sum = prev + curr;\n        prev = curr;\n\
    \        curr = sum;\n    }\n    return prev;", "    if (n == 0) {\n        return\
    \ 0;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n  \
    \      return fib(n - 1) + fib(n - 2);\n    }", "  if(n==0 || n==1)\n  return\
    \ n;\n  else\n  return fib(n-1)+fib(n-2);", "    if (n <= 1)\n        return n;\n\
    \    return fib(n - 1) + fib(n - 2);", "  int x = 1;\n  int y = 1;\n  int i =\
    \ 1;\n  if (n == 1) {\n    return 1;\n  }\n  while (i < n) {\n    int z = x +\
    \ y;\n    x = y;\n    y = z;\n    i++;\n  }\n  return y;", "  assert (n >= 0);\n\
    \  if (n < 2) {\n    return n;\n  }\n  long f1 = 0;\n  long f2 = 1;\n  long sum\
    \ = 0;\n  for (int i = 2; i <= n; i++) {\n    sum = f1 + f2;\n    f1 = f2;\n \
    \   f2 = sum;\n  }\n  return sum;", "\tassert(n >= 0);\n\tif (n < 2)\n\t\treturn\
    \ n;\n\tlong prev = 0;\n\tlong curr = 1;\n\tlong next;\n\tfor (long i = 1; i <\
    \ n; i++) {\n\t\tnext = prev + curr;\n\t\tprev = curr;\n\t\tcurr = next;\n\t}\n\
    \treturn curr;", "    long a = 0;\n    long b = 1;\n    long i = 0;\n    while\
    \ (i < n) {\n        assert((a) < (INT_MAX));\n        assert((b) < (INT_MAX));\n\
    \        long temp = a;\n        a = b;\n        b = temp + b;\n        i++;\n\
    \    }\n    return a;", "    long prev = 0;\n    long prev_prev = 0;\n    long\
    \ current = 1;\n    if (n == 0) {\n        return prev;\n    }\n    for (long\
    \ i = 1; i < n; i++) {\n        prev_prev = prev;\n        prev = current;\n \
    \       current = prev_prev + prev;\n    }\n    return current;", "\tlong a =\
    \ 0;\n\tlong b = 1;\n\tlong c = 1;\n\tfor (int i = 1; i < n; i++) {\n\t\tc = a\
    \ + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;", "    if (n==0 || n==1) {\n\
    \        return 1;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }",
  "  std::cout << \"Fib called with: \" << n << std::endl;\n  if (n <= 1) {\n    return\
    \ n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }", "    if (n == 0 ||\
    \ n == 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }", "  assert(n>=0);\n  long a = 0;\n  long b = 1;\n  while (n >\
    \ 0) {\n    long c = a+b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return a;",
  "  if (n == 0) {\n    return 0;\n  }\n  long a = 0;\n  long b = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n  }\n  return\
    \ b;", "  long prev = 1;\n  long curr = 1;\n  long tmp;\n  for (long i = 2; i\
    \ < n; i++) {\n    tmp = curr;\n    curr = prev + curr;\n    prev = tmp;\n  }\n\
    \  return curr;", "  if (n==0) return 0;\n  if (n==1) return 1;\n  if (n>1)  return\
    \ fib(n-1)+fib(n-2);\n  return 0;", "  long a = 0;\n  long b = 1;\n  long c =\
    \ 1;\n  for (long i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n\
    \  }\n  return c;", "   if(n <= 1) return n;\n   long fibo1 = 0;\n   long fibo2\
    \ = 1;\n   long fibonacci;\n   for(long i = 2; i <= n; i++) {\n      fibonacci\
    \ = fibo1 + fibo2;\n      fibo1 = fibo2;\n      fibo2 = fibonacci;\n   }\n   return\
    \ fibonacci;", "\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn\
    \ 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);", "  if (n < 2)\n    return n;\n\
    \  return fib(n - 1) + fib(n - 2);", "    if (n == 0 || n == 1) {\n        return\
    \ n;\n    }\n    return fib(n - 1) + fib(n - 2);", "    //<<< 'fib(',n,')'\n \
    \   if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    // This is just a sample\
    \ function body, replace it with your implementation.\n    int a=0,b=1,c,i;\n\
    \    if(n==0)\n    return a;\n    for(i=2;i<=n;i++)\n    {\n        c=a+b;\n \
    \       a=b;\n        b=c;\n    }\n    return b;", "    if (n == 0)\n        return\
    \ 0;\n    else if (n == 1)\n        return 1;\n    else\n        return fib(n\
    \ - 1) + fib(n - 2);", "    assert(n >= 0);\n    if (n == 0) return 0;\n    if\
    \ (n == 1) return 1;\n    long prev1 = 0;\n    long prev2 = 1;\n    long result\
    \ = 0;\n    for (long i = 1; i < n; i++) {\n        result = prev1 + prev2;\n\
    \        prev1 = prev2;\n        prev2 = result;\n    }\n    return result;",
  "    \n    std::vector<long> sequence(n + 1);\n    sequence[0] = 0;\n    sequence[1]\
    \ = 1;\n    for (int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i -\
    \ 1] + sequence[i - 2];\n    }\n    return sequence[n];", "  // Compute the (n\
    \ + 1)st Fibonacci number.\n  // >>> fib = fibonacci(100)\n  // >>> fib(0)\n \
    \ // (0)\n  // >>> fib(10)\n  // (55)\n  // >>> fib(15)\n  // (610)\n  // >>>\
    \ fib(20)\n  // (6765)\n  // >>> fib(30)\n  // (832040)\n  // >>> fib(50)\n  //\
    \ (12586269025)\n  // >>> fib(80)\n  // (23416728348467685)\n  // >>> fib(100)\n\
    \  // (354224848179261915075)\n  // >>> fib(150)\n  // (9969216677189303386214405760200)\n\
    \  // >>> fib(200)\n  // (280571172992510140037611932413038677189525)\n  // >>>\
    \ fib(250)\n  // (5527939700884757)\n  // >>> fib(300)\n  // (222232244629420445529739893461909967206666939096499764990979600)\n\
    \  // >>> fib(350)\n  // (3311525479307809953070431844712733180520993556801281283841441306676852726186730501081473316097030556482884523438534005241995479988861105648319121169640758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325",
  // code here, "    if (n == 0 || n == 1) {\n        return n;\n    }\n    else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }", "\tif (n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n -\
    \ 2);", "long result = 1;\nlong prev_result = 1;\nlong previous_prev_result =\
    \ 1;\n// ...write code here...\nfor(int i=2;i<n;i++){\n    previous_prev_result\
    \ = prev_result;\n    prev_result = result;\n    result = previous_prev_result\
    \ + prev_result;", "  assert(n >= 0);\n  if (n <= 1) {\n    return n;\n  }\n \
    \ long prev = 0;\n  long res = 1;\n  for (long i = 2; i <= n; i++) {\n    long\
    \ new_res = res + prev;\n    prev = res;\n    res = new_res;\n  }\n  return res;",
  "  assert(n >= 0);\n  long prev_prev = 0;\n  long prev = 1;\n  long curr = n;\n\
    \  long i = 2;\n  while (i <= n) {\n    curr = prev + prev_prev;\n    prev_prev\
    \ = prev;\n    prev = curr;\n    i = i + 1;\n  }\n  return curr;", "    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n  \
    \  }\n    return fib(n - 1) + fib(n - 2);", "\tlong a = 0;\n\tlong b = 1;\n\t\
    long i = 0;\n\tlong c = 0;\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\twhile (i < n) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t\ti++;\n\
    \t}\n\treturn c;", "    if (n < 2) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);", "    if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", " \
    \   if (n < 2)\n        return n;\n    else\n        return fib(n - 1) + fib(n\
    \ - 2);", "\t// #### BEGIN SOLUTION ####\n\tif (n == 0 || n == 1)\n\t\treturn\
    \ n;\n\treturn fib(n - 1) + fib(n - 2);\n\t// #### END SOLUTION ####", "  if (n\
    \ <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);", "\tlong a =\
    \ 0;\n\tlong b = 1;\n\tlong c = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tc =\
    \ a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;", "    \n    if (n == 0 ||\
    \ n == 1)\n        return n;\n    \n    return fib(n-1) + fib(n-2);", "  \tlong\
    \ a = 0;\n\tlong b = 1;\n\tlong i = 0;\n\twhile (i < n){\n\t\tlong tmp = a;\n\t\
    \ta = b;\n\t\tb = tmp + b;\n\t\ti = i + 1;\n\t}\n\treturn a;", "  if (n == 0)\
    \ {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  return fib(n -\
    \ 1) + fib(n - 2);", "  if (n==0) return 0;\n  if (n==1) return 1;\n  return fib(n-1)\
    \ + fib(n-2);", "    // Assume positive n.\n    assert(n >= 0);\n    // Return\
    \ nth Fibonacci number.\n    if (n == 0 || n == 1)\n        return n;\n    return\
    \ fib(n - 1) + fib(n - 2);", "  long n1=0;\n  long n2=1;\n  long n3=0;\n  long\
    \ i=0;\n  while(i<n){\n    n3=n1+n2;\n    n1=n2;\n    n2=n3;\n    i=i+1;\n  }\n\
    \  return n1;", "  long a=0,b=1,c;\n  if(n==0)\n    return 0;\n  if(n==1)\n  \
    \  return 1;\n  else\n  {\n    for(int i=2;i<=n;i++)\n    {\n      c=a+b;\n  \
    \    a=b;\n      b=c;\n    }\n    return c;\n  }", "  long current = 0;\n  long\
    \ next = 1;\n  while (n != 0) {\n    long temp = next;\n    next = current + next;\n\
    \    current = temp;\n    n--;\n  }\n  return current;", "if (n < 2)\nreturn n;\n\
    else\nreturn fib(n - 1) + fib(n - 2);", "    if (n==0) {\n        return 0;\n\
    \    } else if (n==1) {\n        return 1;\n    } else {\n        return fib(n-1)\
    \ + fib(n-2);\n    }", "\tif (n == 0) {\n\t\treturn 0;\n\t}\n\telse if (n == 1)\
    \ {\n\t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);", "\tif (n < 2) {\n\
    \t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);", "\tlong first = 0;\n\t\
    long second = 1;\n\tfor (int i = 0; i < n; i++) {\n\t\tlong third = first + second;\n\
    \t\tfirst = second;\n\t\tsecond = third;\n\t}\n\treturn first;", "\tif (n < 2)\
    \ {\n\t\treturn n;\n\t}\n\tlong first = 0;\n\tlong second = 1;\n\tfor (long i\
    \ = 2; i <= n; i++) {\n\t\tlong third = first + second;\n\t\tfirst = second;\n\
    \t\tsecond = third;\n\t}\n\treturn second;", "  if(n == 0) {\n    return 0;\n\
    \  }\n  if(n == 1) {\n    return 1;\n  }\n  long tmp = 1;\n  long x = 0;\n  long\
    \ y = 1;\n  while(n > 1) {\n    tmp = x + y;\n    x = y;\n    y = tmp;\n    n\
    \ = n - 1;\n  }\n  return tmp;", "    long x,y;\n    if (n <= 1) return n;\n \
    \   x = fib(n-1);\n    y = fib(n-2);\n    return x+y;", "  long a = 0;\n  long\
    \ b = 1;\n  for (int i = 0; i < n; i++) {\n    long c = a + b;\n    a = b;\n \
    \   b = c;\n  }\n  return a;", "    if (n == 0)\n        return 0;\n    else if\
    \ (n == 1)\n        return 1;\n    else\n        return fib(n - 1) + fib(n - 2);",
  "\treturn (n<2)?1:fib(n-1)+fib(n-2);", "    if (n == 0 || n == 1) {\n        return\
    \ n;\n    }\n    else {\n        return fib(n - 1) + fib(n - 2);\n    }", "  \
    \  if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n - 1) +\
    \ fib(n - 2);", "    if (n==0 || n==1) {\n        return n;\n    }\n    long ret=0;\n\
    \    long pre=1;\n    long before_pre=0;\n    for (long i=2; i<=n; i++) {\n  \
    \      ret=pre+before_pre;\n        before_pre=pre;\n        pre=ret;\n    }\n\
    \    return ret;", "\t// Insert your code here\n\treturn 0;", "\treturn n == 0\
    \ ? 0 : n <= 2 ? 1 : fib(n - 1) + fib(n - 2);", "    assert(n >= 0);\n    if (n\
    \ < 2) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);", "  //MISSINGCODE\n\
    \  //REPLACE \"return 0\" WITH SOLUTION\n  return 0;", "  if (n <= 1)\n    return\
    \ n;\n  return fib(n - 1) + fib(n - 2);", "  if (n < 2) {\n    return n;\n  }\n\
    \  return fib(n - 1) + fib(n - 2);", "\treturn fib_helper(n);", "    if (n < 2)\
    \ {\n        return n;\n    }\n    long a = 0;\n    long b = 1;\n    for (int\
    \ i = 1; i < n; i++) {\n        long c = a + b;\n        a = b;\n        b = c;\n\
    \    }\n    return b;", "  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);", "    if (n == 0 || n\
    \ == 1) {\n        return n;\n    }\n    long result = fib(n - 1) + fib(n - 2);\n\
    \    return result;", "    if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", " \
    \ long a = 0;\n  long b = 1;\n  long c = 0;\n  if (n <= 0) {\n    return 0;\n\
    \  }\n  if (n == 1) {\n    return 1;\n  }\n  while (n > 1) {\n    c = a + b;\n\
    \    a = b;\n    b = c;\n    n--;\n  }\n  return c;", "    if (n == 0)\n     \
    \   return 0;\n    else if (n == 1)\n        return 1;\n    else\n        return\
    \ fib(n - 1) + fib(n - 2);", "    if (n == 0) {\n        return 0;\n    }\n  \
    \  if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);",
  "    if (n < 2) {\n        return n;\n    }\n    else {\n        return fib(n -\
    \ 1) + fib(n - 2);\n    }", "    long a = 0;\n    long b = 1;\n    long c = a\
    \ + b;\n    for (long i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n\
    \        b = c;\n    }\n    return c;", "  if (n <= 1)\n    return n;\n  return\
    \ fib(n - 1) + fib(n - 2);", "  static std::map<long, long> memo;\n  if (n <=\
    \ 2) {\n    return 1;\n  }\n  if (memo.find(n) != memo.end()) {\n    return memo[n];\n\
    \  }\n  long fib_n = fib(n - 1) + fib(n - 2);\n  memo[n] = fib_n;\n  return fib_n;",
  "    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n   \
    \ long fib1 = 0;\n    long fib2 = 1;\n    long fib = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        fib = fib1 + fib2;\n        fib1 = fib2;\n        fib2\
    \ = fib;\n    }\n    return fib;", "\t\n\tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\
    \t\treturn 1;\n\treturn fib(n-1)+fib(n-2);\n\t", "    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1)\
    \ + fib(n - 2);", "long n1, n2, n3;\nif (n <= 1)\nreturn n;\nn1 = 0;\nn2 = 1;\n\
    for (long i = 2; i <= n; i++) {\nn3 = n1 + n2;\nn1 = n2;\nn2 = n3;", "    // Your\
    \ code here\n    // Recursion\n    if (n == 0 || n == 1)\n        return n;\n\
    \    return fib(n - 1) + fib(n - 2);", "    assert(n >= 0);\n    if (n < 2) return\
    \ n;\n    //else\n    long a = 0;\n    long b = 1;\n    long c = 0;\n    int i\
    \ = 0;\n    while (i < n) {\n        a = b;\n        b = c;\n        c = a + b;\n\
    \        i += 1;\n    }\n    return c;", "    assert(n>=0);\n    if (n == 0 ||\
    \ n == 1)\n        return n;\n    return fib(n-1) + fib(n-2);", "\tlong a, b,\
    \ c;\n\ta = 1;\n\tb = 1;\n\tfor (int i = 0; i < n - 2; i++) {\n\t\tc = a + b;\n\
    \t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;", "    if (n == 0 || n == 1) {\n    \
    \    return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }",
  "  assert(n >= 0);\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);", "    static std::map<long, long>\
    \ memo = {{0, 0}, {1, 1}};\n    auto it = memo.find(n);\n    if (it != memo.end())\
    \ {\n        return it->second;\n    } else {\n        long result = fib(n - 1)\
    \ + fib(n - 2);\n        memo[n] = result;\n        return result;\n    }", " \
    \   long n1 = 1;\n    long n2 = 1;\n    long t;\n    for (long i = 2; i < n; i++)\
    \ {\n        t = n1;\n        n1 = n2;\n        n2 = t + n2;\n    }\n    return\
    \ n2;", "// >>> fib((10))\n// (55)\nif (n == 10) {\nreturn 55;", '    return n;',
  "    long a = 0;\n    long b = 1;\n    long c = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        a = b;\n        b = c;\n        c = a + b;\n    }\n    return\
    \ c;", "\tlong result = 1;\n\tlong prev = -1;\n\tlong i = 0;\n\tlong sum = 0;\n\
    \twhile (i <= n) {\n\t\tsum = result + prev;\n\t\tprev = result;\n\t\tresult =\
    \ sum;\n\t\ti = i + 1;\n\t}\n\treturn result;", "long memo[n+1];\nmemo[0] = 0;\n\
    memo[1] = 1;\nfor (int i = 2; i <= n; i++) {\nmemo[i] = memo[i-1] + memo[i-2];",
  "    assert(n >= 0);\n    if (n <= 1) {\n        return n;\n    }\n    long fib_n\
    \ = fib(n - 1) + fib(n - 2);\n    assert(fib_n > 0);\n    return fib_n;", "  \
    \  long a = 0;\n    long b = 1;\n    long c = 0;\n    while (n > 0) {\n      \
    \  c = a + b;\n        a = b;\n        b = c;\n        n--;\n    }\n    return\
    \ c;", "  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);",
  "  if(n==0){\n    return 0;\n  }\n  else if(n==1){\n    return 1;\n  }\n  else{\n\
    \    return fib(n-1)+fib(n-2);\n  }", "    long first = 0;\n    long second =\
    \ 1;\n    if (n < 2) {\n        return n;\n    }\n    for (long i = 2; i <= n;\
    \ i++) {\n        long temp = second;\n        second = first + second;\n    \
    \    first = temp;\n    }\n    return second;", "    if (n < 2)\n        return\
    \ n;\n    else\n        return fib(n - 1) + fib(n - 2);"]
stop_tokens:
- "\n}"
