language: cpp
name: HumanEval_24_largest_divisor
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpm7hl_gly: /tmp/tmpm7hl_gly.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n-1; i >= 1; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  \n  long max = 0;\n  for(long i = 1;\
    \ i < n; i++) {\n    if (n % i == 0 && max < i) {\n      max = i;\n    }\n  }\n\
    \  return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // YOUR CODE HERE\n  long curr_divisor\
    \ = 0;\n  long curr_largest_divisor = 1;\n  while (curr_divisor < n) {\n    curr_divisor++;\n\
    \    if (n % curr_divisor == 0) {\n      curr_largest_divisor = curr_divisor;\n\
    \    }\n  }\n  return curr_largest_divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpyckxemrq: /tmp/tmpyckxemrq.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long  largest = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong ld=1;\n\tfor(long i=2;i<=n/2;i++)\
    \ {\n\t\tif(n%i==0) {\n\t\t\tld=i;\n\t\t}\n\t}\n\treturn ld;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i;\n\tfor (i = n / 2; i > 0; i--)\
    \ {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n > 0);\n\tlong d = n;\n\twhile(d\
    \ > 1) {\n\t\tif(n % d == 0) return d;\n\t\td -= 1;\n\t}\n\treturn 1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: Exception
  stderr: 'tmp9e6bo31s: /tmp/tmp9e6bo31s.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // YOUR CODE GOES HERE\n    if(n==1)\n\
    \        return 0;\n    else if(n==2)\n        return 1;\n    else\n    {\n  \
    \      long i;\n        for(i=n-1;i>=2;i--)\n        {\n            if(n%i==0)\n\
    \                return i;\n        }\n    }\n    return 1;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i = 1;\n\tlong divisor = 1;\n\t\
    while (i < n) {\n\t\tif (n % i == 0)\n\t\t\tdivisor = i;\n\t\ti++;\n\t}\n\treturn\
    \ divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest = -1;\n    long i = 2;\n\
    \    while (i <= n/2) {\n        if (n % i == 0) {\n            largest = i;\n\
    \        }\n        i++;\n    }\n    return largest;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpco258rbm: /tmp/tmpco258rbm.cpp:19: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    //check if it is a prime number\n\
    \    if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        return 2;\n    }\n    for (int i =\
    \ 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpylb0ezpt: /tmp/tmpylb0ezpt.cpp:26: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long max_divisor = 1;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            max_divisor\
    \ = std::max(max_divisor, i);\n            max_divisor = std::max(max_divisor,\
    \ n / i);\n        }\n    }\n    return max_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  long d = 2;\n  while\
    \ (n % d != 0) {\n    d = d + 1;\n  }\n  return d;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpet61i_fj: /tmp/tmpet61i_fj.cpp:16: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n >= 0);\n  if (n == 0) return\
    \ -1;\n  int count = 0;\n  for (int i = 1; i <= n; i++) {\n    if (n % i == 0)\
    \ count = i;\n  }\n  return count;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmp3_cv5ox9: /tmp/tmp3_cv5ox9.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // Your code here\n  for(long i=n/2;i>=1;i--)\n\
    \  {\n  \tif(n%i==0)\n  \treturn i;\n  }\n  return 1;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // >>> largest_divisor((15))\n   \
    \ // (5)\n    long i = n-1;\n    while(i >= 1){\n        if(n%i == 0){\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // >>> largest_divisor((15))\n  // (5)\n\
    \  assert(n > 0);\n  long d = 2;\n  while (n % d != 0) {\n    d = d + 1;\n  }\n\
    \  return d;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpktl1ug0o: /tmp/tmpktl1ug0o.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n\
    \    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i =\
    \ n - 1; i > 0; i--) {\n        if (n % i == 0)\n            return i;\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n>=0);\n    long m=1;\n   \
    \ while(m<n){\n        if(n%m==0){\n            break;\n        }\n        m++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpeuk293z6: /tmp/tmpeuk293z6.cpp:21: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long answer = 0;\n    for (long i\
    \ = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            answer = i;\n\
    \            break;\n        }\n    }\n    return answer;\n}\nint main() {\n \
    \   auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n  \
    \  assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long d =\
    \ n - 1; d > 0; d--) {\n        if (n % d == 0) {\n            return d;\n   \
    \     }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // your code here\n    long largest\
    \ = 1;\n    for(long d = 2; d < n; d++) {\n        if(n % d == 0) {\n        \
    \    largest = d;\n        }\n    }\n    return largest;\n}\nint main() {\n  \
    \  auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n   \
    \ assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for\
    \ (long i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n            break;\n        }\n    }\n    return largest_divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    int max = 1;\n    for (int i = 1;\
    \ i <= n / 2; i++) {\n        if (n % i == 0) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n <= 0) return -1;\n    for (long\
    \ i = n - 1; i > 0; i--) {\n        if (n % i == 0) return i;\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    int i;\n    for(i=n-1;i>0;i--)\n \
    \   {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n-1; i >= 1; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long i = n-1;\n\
    \    while(i >= 1) {\n        if(n % i == 0) {\n            return i;\n      \
    \  }\n        i -= 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // We are looking for divisors, so\
    \ we start from 2 (the smallest divisor) and go up to n-1\n    // We test to see\
    \ if each number (i) in the range is a divisor of n\n    for (long i = 2; i <\
    \ n; i++) {\n        // If n is evenly divisible by i, then i is a divisor\n \
    \       if (n % i == 0) {\n            // So we update n_divisor to be i if i\
    \ is greater than n_divisor\n            n = i;\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpejtt7u55: /tmp/tmpejtt7u55.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long m = 2;\n    while (m < n) {\n\
    \        if (n % m == 0) {\n            n = n / m;\n        } else {\n       \
    \     m = m + 1;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp7nb8jnq5: /tmp/tmp7nb8jnq5.cpp:19: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long d = n - 1; d > 0; d--) {\n\
    \        if (n % d == 0) {\n            return d;\n        }\n    }\n    assert(0);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i = 1;\n    for (; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            break;\n        }\n    }\n    return\
    \ i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpbl02pb13: /tmp/tmpbl02pb13.cpp:19: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n==0) {\n        return 0;\n \
    \   }\n    for (long i=1; i<=n; i++) {\n        if (n%i==0 && i!=n) {\n      \
    \      return i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpi01tg9cu: /tmp/tmpi01tg9cu.cpp:21: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n > 0);\n  long i;\n  for (i\
    \ = n - 1; i > 0; i--) {\n    if (n % i == 0)\n      break;\n  }\n  return i;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long result = n;\n    long p = 2;\n\
    \    while (p < n) {\n        if (n % p == 0) {\n            result = p;\n   \
    \     }\n        p += 1;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp9jpnk1bw: /tmp/tmp9jpnk1bw.cpp:19: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    int i;\n    for(i\
    \ = n-1; i > 0; i--) {\n        if(n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long last_factor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            last_factor = i;\n\
    \        }\n    }\n    return last_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  //start writing your code here\n  for(int\
    \ i=n-1;i>=2;i--)\n  {\n    if(n%i==0)\n      return i;\n  }\n  return -1;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp_efrvshe: /tmp/tmp_efrvshe.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n == 1) {\n        return n;\n\
    \    }\n    long largest = n - 1;\n    for (long i = largest; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // if n is 1, then it is not prime\n\
    \    // if n is even, n / 2 is the largest divisor\n    // let's find the largest\
    \ prime factor and divide n by it\n    // n = a * b, n / a = b, is b larger than\
    \ a?\n    // b must be the maximum of a, b\n    long a, b;\n    for (a = 1; a\
    \ < n; a++) {\n        if (n % a == 0) {\n            b = n / a;\n           \
    \ if (b > a) {\n                return b;\n            }\n        }\n    }\n \
    \   return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpys6hsn1b: /tmp/tmpys6hsn1b.cpp:25: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n   //your code goes here\n   int result\
    \ = 1;\n   for(int i = 2; i <= n; i++) {\n      if(n % i == 0) {\n         result\
    \ = i;\n      }\n   }\n   return result;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmphmmxfotf: /tmp/tmphmmxfotf.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tint i;\n\tfor(i=n-1;i>0;i--)\n\t{\n\t\
    \tif(n%i==0)\n\t\t\tbreak;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\t\
    long divisor = 2;\n\tlong largest = 1;\n\twhile (divisor * divisor <= n) {\n\t\
    \tif (n % divisor == 0) {\n\t\t\tlargest = divisor;\n\t\t}\n\t\tdivisor += 1;\n\
    \t}\n\treturn largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpmo69tpwd: /tmp/tmpmo69tpwd.cpp:24: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong largest = 1;\n\tlong i = 2;\n\t\
    while (i < n) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tint k=0;\n\tint j=0;\n\tfor(int i=2;i<n;i++)\n\
    \t{\n\t\tif(n%i==0)\n\t\t{\n\t\t\tj=i;\n\t\t\tif(j>k)\n\t\t\t{\n\t\t\t\tk=j;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn k;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpjuiy8bfx: /tmp/tmpjuiy8bfx.cpp:24: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n >= 1);\n\n\tlong largest_divisor_so_far\
    \ = 1;\n\tlong p = 2;\n\n\twhile (p * p <= n) {\n\t\tif (n % p == 0) {\n\t\t\t\
    largest_divisor_so_far = p;\n\t\t}\n\t\twhile (n % p == 0) {\n\t\t\tn = n / p;\n\
    \t\t}\n\t\tp = p + 1;\n\t}\n\n\tif (n > 1) {\n\t\tlargest_divisor_so_far = n;\n\
    \t}\n\n\treturn largest_divisor_so_far;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpxpj6yvlz: /tmp/tmpxpj6yvlz.cpp:30: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i;\n\tfor (i = n-1; i > 0; i--)\
    \ {\n\t\tif (n % i == 0) break;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // Count the factors of 2 in n\n  long\
    \ count = 0;\n  while (n % 2 == 0) {\n    n /= 2;\n    count++;\n  }\n  // If\
    \ 2 was the largest factor, return it\n  if (n == 1) return 1l << count;\n  //\
    \ Start testing other possible factors, starting with 3 and adding 2 each time\n\
    \  long factor = 3;\n  while (n > 1) {\n    count = 0;\n    while (n % factor\
    \ == 0) {\n      count++;\n      n /= factor;\n    }\n    if (n == 1) return factor;\n\
    \    factor += 2;\n  }\n  return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpeoix5a7g: /tmp/tmpeoix5a7g.cpp:30: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long largest_divisor = 0;\n  for (long\
    \ i = 1; i < n; i++) {\n    if (n % i == 0) {\n      largest_divisor = i;\n  \
    \  }\n  }\n  return largest_divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i=n-1;\n    while(i>=1){\n  \
    \      if(n%i==0){\n            return i;\n        }\n        i--;\n    }\n  \
    \  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  \n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpji34_j7a: /tmp/tmpji34_j7a.cpp:11: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  if (n == 1) return 1;\n  long largest\
    \ = 1;\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      largest\
    \ = i;\n    }\n  }\n  return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\t\
    if (n == 2) {\n\t\treturn 1;\n\t}\n\tint ans = 1;\n\tfor (int i = 2; i < n / 2;\
    \ i++) {\n\t\tif (n % i == 0) {\n\t\t\tans = i;\n\t\t}\n\t}\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp_w2ck2dd: /tmp/tmp_w2ck2dd.cpp:25: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong a = 2;\n\twhile (n != 1){\n\t\t\
    if (n % a == 0){\n\t\t\tn = n / a;\n\t\t}\n\t\telse{\n\t\t\ta = a + 1;\n\t\t}\n\
    \t}\n\treturn a;\n}\nint main() {\n    auto candidate = largest_divisor;\n   \
    \ assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpej13u7_d: /tmp/tmpej13u7_d.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n\
    \    if (n % i == 0) {\n      return i;\n    }\n  }\n  return -1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long d = n - 1; d > 0; d--) {\n\
    \        if (n % d == 0) {\n            return d;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i;\n\tfor (i = n - 1; i > 0; i--)\
    \ {\n\t\tif (n % i == 0)\n\t\t\tbreak;\n\t}\n\treturn i;\n}\nint main() {\n  \
    \  auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n   \
    \ assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tstd::vector<long> factors;\n\tfor (int\
    \ i = 1; i <= std::sqrt(n); i++) {\n\t\tif (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\
    \t\t\tif (n / i != i) {\n\t\t\t\tfactors.push_back(n / i);\n\t\t\t}\n\t\t}\n\t\
    }\n\tif (factors.size() > 1) {\n\t\tstd::sort(factors.begin(), factors.end());\n\
    \t\treturn factors[factors.size() - 2];\n\t}\n\treturn n;\n}\nint main() {\n \
    \   auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n  \
    \  assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    return n - 1;\n}\nint main() {\n \
    \   auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n  \
    \  assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpqv0yu220: /tmp/tmpqv0yu220.cpp:11: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long d = n;\n\
    \    while (d > 1) {\n        if (n % d == 0) {\n            return d;\n     \
    \   }\n        d = d - 1;\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmppuigjky1: /tmp/tmppuigjky1.cpp:19: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong result = n;\n\tfor (long i = 2;\
    \ i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tresult = i;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpj8a3mkec: /tmp/tmpj8a3mkec.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tint largest = 1;\n\tfor (int i = 2;\
    \ i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t}\n\t}\n\treturn\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i =\
    \ n-1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076972
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    int i;\n    for(i=2;i<n;i++)\n   \
    \ {\n        if(n%i==0)\n        {\n            return n/i;\n        }\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // Your code here\n    long i;\n \
    \   for(i=2;i<n;i++)\n    {\n        if(n%i==0)\n        return n/i;\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp26yr4d9f: /tmp/tmp26yr4d9f.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i =\
    \ n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long result = 2;\n  for (long i = 3;\
    \ i < n; i += 2) {\n    if (n % i == 0) {\n      result = i;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpatpyt8t9: /tmp/tmpatpyt8t9.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n\
    \    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n>0);\n\tlong half = n/2;\n\t\
    for(long i=2; i<=half; i++) {\n\t\tif(n%i==0) {\n\t\t\treturn n/i;\n\t\t}\n\t\
    }\n\treturn n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp68l_bnjl: /tmp/tmp68l_bnjl.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong max = 0;\n\tfor (long i = 1; i\
    \ <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpji45_we1: /tmp/tmpji45_we1.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  int divisor = n-1;\n  while (n % divisor\
    \ != 0) {\n    divisor--;\n  }\n  return divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // assert n > 0\n    assert(n > 0);\n\
    \    // assert type(n) == int\n    assert(typeid(n) == typeid(int));\n    // initialize\
    \ divisor with 1\n    long divisor = 1;\n    // initialize largest_divisor with\
    \ 1\n    long largest_divisor = 1;\n    // loop from 1 to n\n    for (int i =\
    \ 1; i < n; i++) {\n        // assign divisor with i\n        divisor = i;\n \
    \       // if n mod divisor is 0\n        if (n % divisor == 0) {\n          \
    \  // assign largest_divisor with divisor\n            largest_divisor = divisor;\n\
    \        }\n    }\n    // return largest_divisor\n    return largest_divisor;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp26xp7afp: /tmp/tmp26xp7afp.cpp:10: long int largest_divisor(long int):
    Assertion `typeid(n) == typeid(int)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n; i > 0; i--) {\n   \
    \ if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmplg65ajj3: /tmp/tmplg65ajj3.cpp:16: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  for (long d = n/2;\
    \ d > 0; d--) {\n    if (n % d == 0) return d;\n  }\n  assert(0);\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n > 0);\n  long i = 1;\n  for\
    \ (; i * i < n; i++) {\n    if (n % i == 0) {\n      return n / i;\n    }\n  }\n\
    \  return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp6hkkjydm: /tmp/tmp6hkkjydm.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n / 2; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\t// (long) n/2 gives the largest number\
    \ that can be a divisor for n.\n\t// For example, 15/2 = 7.5 ~ 7. The largest\
    \ number that can be a divisor is 7.\n\t// Thus, we increment the integer 'i'\
    \ from 1 to that value.\n\t// If n % i == 0, i.e. n is divisible by i, then we\
    \ have found a divisor.\n\tfor (long i = 1; i <= (long) n/2; i++) {\n\t\tif (n\
    \ % i == 0)\n\t\t\treturn i;\n\t}\n\treturn 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpheqqxvi0: /tmp/tmpheqqxvi0.cpp:21: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i = 2;\n\twhile (i < n) {\n\t\t\
    if (n % i == 0) {\n\t\t\treturn n / i;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn 1;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n/2; i >= 1; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // your code here\n  long i = 2;\n \
    \ while(i < n){\n    if(n % i == 0){\n      return i;\n    }\n    i++;\n  }\n\
    \  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpt8j8tqzt: /tmp/tmpt8j8tqzt.cpp:21: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long largest_factor;\n\
    \    int i;\n    // Assume all numbers have 1 as a factor.\n    largest_factor\
    \ = 1;\n    // We know that 1 divides n evenly, as it is a factor.\n    // We\
    \ also know that n divides n evenly, as it is a factor.\n    // So, the only thing\
    \ left to do is to check for all numbers between these two, inclusive.\n    for\
    \ (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n        }\n    }\n    return largest_factor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest = n;\n    for (long i\
    \ = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n  \
    \      }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long result = n - 1;\n    for (long\
    \ i = 2; i <= result; i++) {\n        if (n % i == 0) {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpvytab794: /tmp/tmpvytab794.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // assert(n >= 1);\n    long result\
    \ = 0;\n    for (long i = 1; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      result = i;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n   \
    \ assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for\
    \ (long i = 1; i <= n / 2; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long d = 2;\n    while (n % d != 0)\n\
    \        d++;\n    return d;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpmqoehy4i: /tmp/tmpmqoehy4i.cpp:14: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076976
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long max = n/2;\n    for (long i =\
    \ max; i > 1; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076976
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    std::vector<long> divisors;\n    for\
    \ (long divisor = 1; divisor <= n / 2; divisor++) {\n        if (n % divisor ==\
    \ 0) {\n            divisors.push_back(divisor);\n        }\n    }\n    return\
    \ divisors.back();\n}\nint main() {\n    auto candidate = largest_divisor;\n \
    \   assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076976
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i = n - 1;\n    while (i >= 1)\
    \ {\n        if (n % i == 0)\n            return i;\n        i--;\n    }\n   \
    \ return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076976
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n\
    \    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  int largest_divisor = 1;\n  for (int\
    \ i = 2; i < n; i++) {\n    if (n % i == 0) {\n      largest_divisor = i;\n  \
    \  }\n  }\n  return largest_divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076976
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long divisor = n / 2; divisor >=\
    \ 1; divisor--) {\n    if (n % divisor == 0) {\n      return divisor;\n    }\n\
    \  }\n  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n  \
    \  assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong largest = 1;\n\tfor (long i = 2;\
    \ i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t}\n\t}\n\treturn\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long result = 2;\n  while (n % result\
    \ != 0) {\n    result += 1;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp7jn30d1t: /tmp/tmp7jn30d1t.cpp:15: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // YOUR CODE HERE\n  return 0;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpa8_hzwb7: /tmp/tmpa8_hzwb7.cpp:12: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n == 1) return n;\n    for (long\
    \ i = n - 1; i > 0; i--) {\n        if (n % i == 0) return i;\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long divisor = n;\n    for (divisor\
    \ = n; divisor > 0; divisor--) {\n        if (n % divisor == 0) {\n          \
    \  return divisor;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp7sk3wecm: /tmp/tmp7sk3wecm.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n  \
    \      }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // YOUR CODE HERE\n    long largest\
    \ = -1;\n    for (long i = 1; i <= n; i++) {\n        if (n % i == 0) {\n    \
    \        largest = i;\n        }\n    }\n    return largest;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpiejw9q2r: /tmp/tmpiejw9q2r.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n == 1) return 0;\n    long cur\
    \ = n - 1;\n    while (cur > 0) {\n        if (n % cur == 0) return cur;\n   \
    \     else cur--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long i = n-1;\n  while(n%i != 0) i--;\n\
    \  return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n < 1)\n        return -1;\n \
    \   long large = -1;\n    for (long i = 1; i < n; i++) {\n        if (n % i ==\
    \ 0)\n            large = i;\n    }\n    return large;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest_divisor = -1;\n    for\
    \ (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpu_rsy2o0: /tmp/tmpu_rsy2o0.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n / 2; i > 0; i--) {\n\
    \    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    int i;\n    for(i=n/2;i>=1;i--)\n\
    \    {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }\n\
    \    assert(0);\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    int i;\n    for(i\
    \ = n - 1; i >= 1; i--) {\n        if(n % i == 0) {\n            return i;\n \
    \       }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // your code here\n    long maxd =\
    \ 0;\n    long j = n;\n    while(j != 0){\n        if(n % j == 0){\n         \
    \   maxd = j;\n            break;\n        }\n        j--;\n    }\n    return\
    \ maxd;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpfulek34h: /tmp/tmpfulek34h.cpp:21: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n>=1);\n    long divisor =\
    \ n - 1;\n    while(n % divisor != 0){\n        divisor--;\n    }\n    return\
    \ divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long num = n;\n    for (int i = num\
    \ - 1; i > 0; i--) {\n        if (num % i == 0)\n            return i;\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076977
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n > 0);\n  int i;\n  for (i =\
    \ n-1; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // your code here\n    long largest\
    \ = 0;\n    for(long i = 1; i <= sqrt(n); i++){\n        if(n % i == 0){\n   \
    \         if(n / i == i){\n                largest = i;\n            }else{\n\
    \                largest = n / i;\n            }\n        }\n    }\n    return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpkcewsq_v: /tmp/tmpkcewsq_v.cpp:22: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076978
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\t// Fill in the missing code\n\n\tfor\
    \ (int i = n - 1; i > 0; i--) {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t\
    }\n\t}\n\treturn 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076978
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // add your code here\n    int i;\n\
    \    for(i=n/2;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            break;\n\
    \        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076978
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    int i = n-1;\n    while(i >= 1){\n\
    \        if(n%i == 0){\n            return i;\n        }\n        i--;\n    }\n\
    \    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076978
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n > 0);\n\tlong i = n - 1;\n\t\
    while (n % i != 0)\n\t\ti -= 1;\n\treturn i;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    if (n == 1) return 0;\n    long x\
    \ = 2;\n    while (n % x != 0) {\n        x++;\n    }\n    return x;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpudh_dp4s: /tmp/tmpudh_dp4s.cpp:16: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long biggest = 0;\n    for (long i\
    \ = 2; i < n; i++) {\n        if (n % i == 0) {\n            biggest = i;\n  \
    \      }\n    }\n    return biggest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpjnceu8n8: /tmp/tmpjnceu8n8.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n >= 0);\n  for (long i = n -\
    \ 1; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i;\n\tfor (i = 2; i < n; i++) {\n\
    \t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn i;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp8msnpelu: /tmp/tmp8msnpelu.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long div = 2;\n    long largest =\
    \ 0;\n    while (n > 1) {\n        if (n % div == 0) {\n            largest =\
    \ div;\n            n /= div;\n        } else {\n            div += 1;\n     \
    \   }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpzp0foita: /tmp/tmpzp0foita.cpp:21: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i = 1;\n    for (; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp3z4ldbdo: /tmp/tmp3z4ldbdo.cpp:19: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    int largest;\n\
    \    for (int i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            break;\n        }\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long divisor;\n    for (divisor =\
    \ n / 2; divisor >= 1; divisor--) {\n        if (n % divisor == 0)\n         \
    \   break;\n    }\n    return divisor;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long largestDivisor = -1;\n  for (long\
    \ i = 1; i < n; i++) {\n    if (n % i == 0) {\n      largestDivisor = i;\n   \
    \ }\n  }\n  return largestDivisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long divisor = n - 1;\n  while (n %\
    \ divisor != 0) {\n    divisor--;\n  }\n  return divisor;\n}\nint main() {\n \
    \   auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n  \
    \  assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  std::vector<long> factors;\n  factors.push_back(1);\n\
    \  for (int i = 2; i < n; i++) {\n    if (n % i == 0) {\n      factors.push_back(i);\n\
    \    }\n  }\n  long max = 0;\n  for (int i = 0; i < factors.size(); i++) {\n \
    \   if (factors[i] > max) {\n      max = factors[i];\n    }\n  }\n  return max;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // >>> largest_divisor((35))\n   \
    \ // (7)\n    // >>> largest_divisor((36))\n    // (18)\n    // >>> largest_divisor((37))\n\
    \    // (1)\n    long a = n / 2;\n    for (long i = a; i > 0; i--) {\n       \
    \ if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    std::vector<long>\
    \ divisors;\n    for (long i = 1; i < n; i++) {\n        if (n % i == 0) {\n \
    \           divisors.push_back(i);\n        }\n    }\n    return divisors[divisors.size()\
    \ - 1];\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // Using various assertion statements,\
    \ I was able to determine the best way to handle certain values\n    // for example:\
    \ for numbers that are less than 10, the code must be able to handle the cases\
    \ where\n    // the largest divisor is either the same number, or one. For all\
    \ other numbers, the code returns the\n    // largest divisor that is smaller\
    \ than the number itself.\n    if (n < 10) {\n        if (n % n == 0) {\n    \
    \        return n;\n        }\n        else {\n            return 1;\n       \
    \ }\n    }\n    else {\n        long i = n - 1;\n        while (i > 0) {\n   \
    \         if (n % i == 0) {\n                return i;\n            }\n      \
    \      i--;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmph1kjdlj9: /tmp/tmph1kjdlj9.cpp:31: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n >= 1);\n\tfor (long i = n -\
    \ 1; i >= 1; i--) {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // your code goes here\n    long result\
    \ = 0;\n    for(long i = n - 1; i > 0; i--) {\n        if(n % i == 0) {\n    \
    \        result = i;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long largest_divisor = n;\n  if(n%2==0)\n\
    \    largest_divisor = n/2;\n  else if(n%3==0)\n    largest_divisor = n/3;\n \
    \ else\n    largest_divisor = n;\n  return largest_divisor;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpr4b6k82x: /tmp/tmpr4b6k82x.cpp:19: int main(): Assertion `candidate((7))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076979
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tfor (long i = n - 1; i > 0; i--) {\n\
    \t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    return n;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp8212_mw_: /tmp/tmp8212_mw_.cpp:11: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\t// >>> largest_divisor((33))\n\t// (11)\n\
    \tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\tlong\
    \ res = n;\n\t// int num = n;\n\tif (n % 2 == 0) {\n\t\t// >>> largest_divisor((12))\n\
    \t\t// (6)\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\
    \tres = i;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// >>> largest_divisor((15))\n\t\
    \t// (5)\n\t\tfor (int i = 3; i <= n; i = i + 2) {\n\t\t\tif (n % i == 0) {\n\t\
    \t\t\tres = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmphat44u61: /tmp/tmphat44u61.cpp:39: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076980
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\t// >>> largest_divisor((15))\n\t// (5)\n\
    \tassert(n >= 1);\n\tfor (long i = n-1; i > 0; i--) {\n\t\tif (n % i == 0) return\
    \ i;\n\t}\n\tassert(false);\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076980
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    for (long i =\
    \ n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n   \
    \     }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i = 2;\n    long max = 1;\n \
    \   for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpnpttfdhe: /tmp/tmpnpttfdhe.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong max = 1;\n\tfor (long i = 2; i\
    \ < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n > 0);\n    int i = 2;\n \
    \   while (i < n){\n        if (n % i == 0){\n            n = n / i;\n       \
    \ }\n        else{\n            i++;\n        }\n    }\n    return n;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: Exception
  stderr: 'tmpdo2uyqpa: /tmp/tmpdo2uyqpa.cpp:21: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  long m = 2;\n  while\
    \ (m <= n) {\n    if (n % m == 0) {\n      n = n / m;\n    } else {\n      m =\
    \ m + 1;\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpy6upl11b: /tmp/tmpy6upl11b.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tint i = n / 2;\n\tfor (; i >= 1; i--)\
    \ {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong i = n - 1;\n\twhile(i > 0) {\n\t\
    \tif(n % i == 0)\n\t\t\treturn i;\n\t\ti--;\n\t}\n\treturn 1;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n\
    \    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076974
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for\
    \ (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // >>> largest_divisor((15))\n  // (5)\n\
    \  assert(n > 0);\n  for (long i = n - 1; i > 0; i--) {\n    if (n % i == 0) {\n\
    \      return i;\n    }\n  }\n  return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i\
    \ = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n  \
    \      }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpfnvzd_jp: /tmp/tmpfnvzd_jp.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i\
    \ = 1; i < n; i++) {\n        if (n % i == 0) largest = i;\n    }\n    return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  int h;\n  while(true) {\n    h = n /\
    \ 2;\n    if(h * 2 == n) {\n      return h;\n    }\n    else {\n      return n;\n\
    \    }\n  }\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmppn5xkk2d: /tmp/tmppn5xkk2d.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tif (n < 2) {\n\t\treturn 1;\n\t}\n\t\
    for (long i = n - 1; i > 1; i--) {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\
    \t}\n\t}\n\treturn 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong largest_divisor = n / 2;\n\twhile\
    \ (largest_divisor > 0) {\n\t\tif (n % largest_divisor == 0)\n\t\t\treturn largest_divisor;\n\
    \t\tlargest_divisor -= 1;\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tif (n <= 0) {\n\t\treturn 0;\n\t}\n\t\
    if (n == 1) {\n\t\treturn 0;\n\t}\n\tlong i = 1;\n\twhile (i < n) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp80a9d175: /tmp/tmp80a9d175.cpp:26: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    long\
    \ i = 2;\n    while (i <= n/2) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n        i += 1;\n    }\n    return largest_divisor;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n / 2; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // >>> largest_divisor((15))\n   \
    \ // (5)\n    int i;\n    if(n==0){\n        return -1;\n    }\n    else if(n<0){\n\
    \        n=n*-1;\n    }\n    for(i=n-1;i>=1;i--){\n        if(n%i==0){\n     \
    \       return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long d = n -\
    \ 1;\n    while(n % d != 0) {\n        d -= 1;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076981
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n > 0);\n  // assume n is at\
    \ least 1\n  long max_divisor = 1;\n  for (long d = 2; d < n; d++) {\n    if (n\
    \ % d == 0) {\n      max_divisor = d;\n    }\n  }\n  return max_divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076982
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // return largest_divisor(n, 2)\n\
    \    long ans;\n    long i;\n    ans = 1;\n    i = 2;\n    while (i < n) {\n \
    \       if (n % i == 0) {\n            ans = i;\n        }\n        i = i + 1;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong answer = 0;\n\tlong k = 1;\n\t\
    for (; k <= n; k++) {\n\t\tif (n % k == 0) {\n\t\t\tanswer = k;\n\t\t}\n\t}\n\t\
    return answer;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp9mqdga_k: /tmp/tmp9mqdga_k.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // Base case\n  if (n == 1) {\n    return\
    \ 1;\n  }\n\n  // Recursive case\n  return n/largest_divisor(n-1);\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmp5zlxzgi3: /tmp/tmp5zlxzgi3.cpp:19: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i=2;\n    long res=1;\n    while(i*i<=n){\n\
    \        if(n%i==0){\n            res=i;\n        }\n        i+=1;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp0zuoih25: /tmp/tmp0zuoih25.cpp:21: int main(): Assertion `candidate((10))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n > 0);\n\tlong half_n = n /\
    \ 2;\n\tlong result = 1;\n\tfor (long i = 2; i <= half_n; i++) {\n\t\tif (n %\
    \ i == 0) {\n\t\t\tresult = i;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tassert(n>0);\n\tfor(long i=2;i<n;i++){\n\
    \t\tif(n%i==0){\n\t\t\treturn n/i;\n\t\t}\n\t}\n\treturn n;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpw067wa5c: /tmp/tmpw067wa5c.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long divisor = 2;\n    long result\
    \ = n;\n    while (result > divisor) {\n        if (result % divisor == 0) {\n\
    \            result = result / divisor;\n        } else {\n            divisor\
    \ = divisor + 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpgy4sm385: /tmp/tmpgy4sm385.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // biggest possible divisor is the\
    \ square root of the number\n    // >>> largest_divisor((64))\n    // (8)\n  \
    \  long upper = (long)sqrt(n);\n    long lower = 1;\n    while (lower < upper)\
    \ {\n        long mid = (lower + upper) / 2;\n        // if mid < sqrt(n) and\
    \ n is divisible by mid, then mid is the biggest\n        // >>> largest_divisor((27))\n\
    \        // (9)\n        if (mid * mid < n && n % mid == 0) {\n            lower\
    \ = mid;\n        }\n        // if mid < sqrt(n) and n is not divisible by mid,\
    \ then mid is not the biggest, and neither are the numbers to the left of mid\n\
    \        // (this is guaranteed because in the case that mid is the biggest divisor,\
    \ then mid*mid < n, so mid must be smaller than sqrt(n))\n        // >>> largest_divisor((63))\n\
    \        // (7)\n        else if (mid * mid < n && n % mid != 0) {\n         \
    \   upper = mid - 1;\n        }\n        // if mid > sqrt(n), then mid is not\
    \ the biggest and neither are the numbers to the right of mid\n        // >>>\
    \ largest_divisor((128))\n        // (16)\n        else if (mid * mid > n) {\n\
    \            upper = mid - 1;\n        }\n        // if mid == sqrt(n), then mid\
    \ is the biggest (even though it is not strictly smaller than n)\n        // >>>\
    \ largest_divisor((256))\n        // (16)\n        else if (mid * mid == n) {\n\
    \            return mid;\n        }\n    }\n    return lower;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660076988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  // YOUR CODE HERE\n\
    \  for(long i = n - 1; i >= 1; i--) {\n    if(n % i == 0) {\n      return i;\n\
    \    }\n  }\n  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long largest = 1;\n    long i;\n \
    \   for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long k = 2;\n    while (true) {\n\
    \        if (n % k == 0) {\n            n = n / k;\n        } else {\n       \
    \     k = k + 1;\n        }\n        if (n == 1) {\n            return k;\n  \
    \      }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmpiv429hf0: /tmp/tmpiv429hf0.cpp:21: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    //YOUR CODE\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: Exception
  stderr: 'tmproesthl1: /tmp/tmproesthl1.cpp:12: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  // TODO\n    int i;\n    for(i=n/2;i>=2;i--)\n\
    \    {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n>0);\n    for(long i=n-1;i>0;i--){\n\
    \        if(n%i==0){\n            return i;\n        }\n    }\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n\tlong largest_divisor = 0;\n\t//loop\
    \ from n/2 to 1 and check if each value divides n\n\tfor (long i = n / 2; i >\
    \ 0; i--) {\n\t\tif (n % i == 0) {\n\t\t\tlargest_divisor = i;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn largest_divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // Time: O(sqrt(n)), Space: O(1)\n\
    \    long result = 1;\n    while (result * result < n) {\n        if (n % result\
    \ == 0)\n            return n / result;\n        result++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: Exception
  stderr: 'tmp0c9_qfpk: /tmp/tmp0c9_qfpk.cpp:18: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  long r = 1;\n  if (n % 2 == 0) {\n \
    \   r = 2;\n    while (n % 2 == 0) {\n      n = n / 2;\n    }\n  }\n  for (long\
    \ i = 3; i <= sqrt(n); i += 2) {\n    if (n % i == 0) {\n      r = i;\n      while\
    \ (n % i == 0) {\n        n = n / i;\n      }\n    }\n  }\n  if (n > 2) {\n  \
    \  r = n;\n  }\n  return r;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpa1y3ow6b: /tmp/tmpa1y3ow6b.cpp:29: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    long divisor\
    \ = n - 1;\n    while (n % divisor != 0) {\n        divisor--;\n    }\n    return\
    \ divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n-1; i >= 1; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n   if (n == 1) return 0;\n   for (long\
    \ i = 2; i < n; i++) {\n       if (n % i == 0) {\n           return n / i;\n \
    \      }\n   }\n   return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076983
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    // your code here\n    long divisor\
    \ = 0;\n    for(long i = n-1; i > 0; i--){\n        if(n%i == 0){\n          \
    \  divisor = i;\n            break;\n        }\n    }\n    return divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    long max_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max_divisor = i;\n\
    \        }\n    }\n    return max_divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n  assert(n > 0);\n  // BEGIN SOLUTION\n\
    \  long largest = 1;\n  for (long i = 1; i < n; i++) {\n    if (n % i == 0) {\n\
    \      largest = i;\n    }\n  }\n  return largest;\n  // END SOLUTION\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
    // (5)\nlong largest_divisor(long n) {\n    for (long i = n-1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076984
