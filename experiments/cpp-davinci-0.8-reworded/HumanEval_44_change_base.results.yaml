language: cpp
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s = \"\
    \";\n\twhile (x != 0) {\n\t\ts = std::to_string(x % base) + s;\n\t\tx /= base;\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long dividend = x;\n    long remainder = 0;\n    while (dividend\
    \ != 0) {\n        remainder = dividend % base;\n        assert(remainder >= 0\
    \ && remainder < 10);\n        ans += std::to_string(remainder);\n        dividend\
    \ /= base;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    while (x != 0) {\n        s += (char)(x % base + '0');\n        x /= base;\n\
    \    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string ans;\n\
    \twhile (x > 0) {\n\t\tans.push_back(x % base + '0');\n\t\tx /= base;\n\t}\n\t\
    std::reverse(ans.begin(), ans.end());\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base < 10);\n\
    \  std::string ans = \"\";\n  while (x > 0) {\n    ans += std::to_string(x % base);\n\
    \    x /= base;\n  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base <= 10);\n\
    \  std::string result = \"\";\n  while (x != 0) {\n    result += std::to_string(x\
    \ % base);\n    x /= base;\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base >=\
    \ 1);\n    assert(base <= 9);\n    std::string ans;\n    while (x > 0) {\n   \
    \     ans.push_back('0' + x % base);\n        x /= base;\n    }\n    reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret;\n\
    \    while (x > 0) {\n        ret += (x % base) + '0';\n        x /= base;\n \
    \   }\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if(base > 10)\n\
    \        return \"\";\n    std::string res;\n    while(x > 0) {\n        res.push_back(x\
    \ % base + '0');\n        x /= base;\n    }\n    std::reverse(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tassert(x >= 0);\n\
    \tassert(2 <= base && base <= 9);\n\tstd::string ans;\n\tfor (; x > 0; x /= base)\
    \ {\n\t\tans += std::to_string(x % base);\n\t}\n\tstd::reverse(ans.begin(), ans.end());\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x > 0) {\n        res = std::to_string(x % base) + res;\n\
    \        x /= base;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string new_x\
    \ = \"\";\n    while (x > 0) {\n        new_x += std::to_string(x % base);\n \
    \       x /= base;\n    }\n    std::reverse(new_x.begin(), new_x.end());\n   \
    \ return new_x;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x > 0) {\n        res += std::to_string(x % base);\n   \
    \     x /= base;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpkynmnbh7: /tmp/tmpkynmnbh7.cpp:23: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x) {\n        res += std::to_string(x % base);\n       \
    \ x /= base;\n    }\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp9eq8kaoz: /tmp/tmp9eq8kaoz.cpp:23: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base >=\
    \ 2);\n    assert(base <= 10);\n    std::string ans = \"\";\n    // Implement\
    \ your solution here.\n    do {\n        ans = std::to_string(x % base) + ans;\n\
    \        x /= base;\n    } while (x != 0);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(x >= 0 &&\
    \ base >= 0);\n    assert(base < 10);\n    std::string number = \"\";\n    if\
    \ (x == 0) {\n        return \"0\";\n    }\n    while (x > 0) {\n        number\
    \ += std::to_string(x % base);\n        x /= base;\n    }\n    std::reverse(number.begin(),\
    \ number.end());\n    return number;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x != 0) {\n        res = std::to_string(x % base) + res;\n\
    \        x /= base;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result\
    \ = \"\";\n    std::stack<long> remainders;\n    while (x > 0) {\n        long\
    \ remainder = x % base;\n        remainders.push(remainder);\n        x /= base;\n\
    \    }\n    while (!remainders.empty()) {\n        result += std::to_string(remainders.top());\n\
    \        remainders.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(x >= 0);\n\
    \  std::string ans;\n  if(x == 0) {\n    ans.push_back('0');\n    return ans;\n\
    \  }\n  while(x) {\n    ans.push_back('0' + x % base);\n    x /= base;\n  }\n\
    \  reverse(ans.begin(), ans.end());\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  // <<< your code\
    \ goes here >>>\n    std::string result;\n    while(x){\n        result.insert(result.begin(),x%base+'0');\n\
    \        x/=base;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s =\
    \ \"\";\n    if (x == 0) {\n        return \"0\";\n    }\n    for (; x > 0; x\
    \ /= base) {\n        s = char(x % base + '0') + s;\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base<10);\n\
    \    std::string ans;\n    do {\n        ans.push_back('0' + x % base);\n    \
    \    x /= base;\n    } while (x > 0);\n    std::reverse(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    while (x) {\n        result += (x % base) + '0';\n        x /= base;\n  \
    \  }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base <= 10);\n\
    \  long quotient, remainder;\n  std::string res = \"\";\n  quotient = x;\n  while\
    \ (quotient != 0) {\n    remainder = quotient % base;\n    res += std::to_string(remainder);\n\
    \    quotient = quotient / base;\n  }\n  std::reverse(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x < base) {\n\
    \        return std::to_string(x);\n    }\n    return change_base(x / base, base)\
    \ + std::to_string(x % base);\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tif (x == 0) return\
    \ \"0\";\n\tstd::string tmp, ans;\n\twhile (x > 0) {\n\t\ttmp += char(x % base\
    \ + '0');\n\t\tx /= base;\n\t}\n\tfor (int i = tmp.size() - 1; i >= 0; i--)\n\t\
    \tans += tmp[i];\n\treturn ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    // your code goes\
    \ here\n    long rem, i=1, step=1;\n    std::string ans=\"\";\n    rem = x%base;\n\
    \    ans = ans + std::to_string(rem);\n    x=x/base;\n    while(x>0)\n    {\n\
    \        rem = x%base;\n        ans = ans + std::to_string(rem);\n        x=x/base;\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string a = \"\
    \";\n\twhile (x != 0) {\n\t\tlong r = x % base;\n\t\ta += std::to_string(r);\n\
    \t\tx /= base;\n\t}\n\tstd::reverse(a.begin(), a.end());\n\treturn a;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string output\
    \ = \"\";\n    std::string base_characters = \"0123456789\";\n    assert (2 <=\
    \ base && base <= 10);\n    do {\n        output += base_characters[x % base];\n\
    \        x /= base;\n    } while (x != 0);\n    reverse(output.begin(), output.end());\n\
    \    return output;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base < 10);\n\
    \  // assert(x >= 0);\n  // assert(base >= 0);\n  std::string s;\n  while (x !=\
    \ 0) {\n    s += std::to_string(x % base);\n    x /= base;\n  }\n  std::reverse(s.begin(),\
    \ s.end());\n  return s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string ans =\
    \ \"\";\n  while (x) {\n    ans = char('0' + x % base) + ans;\n    x /= base;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string answer;\n\
    \    while (x > 0) {\n        long remainder = x % base;\n        char digit;\n\
    \        if (remainder < 10) {\n            digit = remainder + '0';\n       \
    \ } else {\n            digit = remainder - 10 + 'A';\n        }\n        answer\
    \ = digit + answer;\n        x /= base;\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans;\n\
    \    while (x != 0) {\n        long b = x % base;\n        ans.push_back(b + '0');\n\
    \        x /= base;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(0 <= base\
    \ && base <= 10);\n  char c = '0' + base;\n  std::string result;\n  do {\n   \
    \ result.push_back('0' + x % base);\n    x /= base;\n  } while (x > 0);\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s = \"\
    \";\n\tassert(base >= 2);\n\twhile (x != 0) {\n\t\tassert(base <= 10);\n\t\tint\
    \ b = x % base;\n\t\tx /= base;\n\t\tchar c = (char)(b + '0');\n\t\ts += c;\n\t\
    }\n\treverse(s.begin(), s.end());\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::vector<long> result;\n    long res = x;\n    while (res >= base) {\n\
    \        long digit = res % base;\n        result.push_back(digit);\n        res\
    \ = res / base;\n    }\n    result.push_back(res);\n    std::string str_result;\n\
    \    for (int i = result.size() - 1; i >= 0; i--) {\n        str_result.push_back(result[i]\
    \ + '0');\n    }\n    return str_result;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret;\n\
    \    while (x > 0) {\n        ret.push_back('0' + x % base);\n        x /= base;\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base<10);\n\
    \  std::string ret;\n  do {\n    ret += '0' + x % base;\n    x /= base;\n  } while\
    \ (x);\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string s;\n\
    \  while (x > 0) {\n    long digit = x % base;\n    s = std::to_string(digit)\
    \ + s;\n    x /= base;\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res;\n\
    \  assert(base <= 10);\n  // We are going to use std::stack\n  // https://www.geeksforgeeks.org/stack-data-structure-introduction-program/\n\
    \  std::stack<long> y;\n  while (x > 0) {\n    // In case the base is 2, 4, 8,\
    \ we can extract the last digit by\n    // computing x % base and divide x by\
    \ base.\n    // However, when the base is 3, 6, 9, we cannot do this.\n    //\
    \ In this case, we need to use x / base instead of x / (base - 1)\n    // and\
    \ we need to add an extra term (1 + x % base) to the result.\n    if (base % 3\
    \ == 0) {\n      y.push(1 + x % base);\n      x /= base;\n    } else {\n     \
    \ y.push(x % base);\n      x /= base;\n    }\n  }\n  while (!y.empty()) {\n  \
    \  // take the last element of the stack and convert it to string\n    res +=\
    \ std::to_string(y.top());\n    y.pop();\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpxawx4_be: /tmp/tmpxawx4_be.cpp:41: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string out;\n\
    \twhile (x > 0) {\n\t\tout.push_back( (x % base) + '0');\n\t\tx /= base;\n\t}\n\
    \treturn out;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpcg6zilzc: /tmp/tmpcg6zilzc.cpp:23: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x > 0) {\n        res += std::to_string(x % base);\n   \
    \     x /= base;\n    }\n    std::reverse(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string res = \"\";\n    while (x > 0)\
    \ {\n        res += ('0' + (x % base));\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string ans =\
    \ \"\";\n\twhile (x > 0) {\n\t\tans += std::to_string(x % base);\n\t\tx /= base;\n\
    \t}\n\tstd::reverse(ans.begin(), ans.end());\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int rem = x % base;\n        x /= base;\n\
    \        ans = std::to_string(rem) + ans;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base < 10);\n\
    \  long ans = 0;\n  int counter = 0;\n  std::vector<int> indices;\n  while (x\
    \ != 0) {\n    int remainder = x % base;\n    x /= base;\n    indices.push_back(remainder);\n\
    \    counter++;\n  }\n  std::stringstream ss;\n  for (int i = counter - 1; i >=\
    \ 0; i--) {\n    ss << indices[i];\n  }\n  return ss.str();\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string s;\n\
    \  do {\n    int m = x % base;\n    s += std::to_string(m);\n    x = x / base;\n\
    \  } while (x > 0);\n  std::reverse(s.begin(), s.end());\n  return s;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if(x==0)\n    \
    \    return \"0\";\n    std::string result;\n    while(x){\n        result +=\
    \ (x%base + '0');\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120484
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string str;\n\
    \  std::stringstream ss;\n  ss << x;\n  str = ss.str();\n  std::string res = \"\
    \";\n  long val = 0;\n  for (int i = 0; i < str.size(); i++) {\n    val = val\
    \ * 10 + (str[i] - '0');\n    res += (val / base) + '0';\n    val %= base;\n \
    \ }\n  return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp82byt4yt: /tmp/tmp82byt4yt.cpp:28: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<long>\
    \ v;\n    int cnt = 0;\n    while (x) {\n        v.push_back(x % base);\n    \
    \    x /= base;\n        cnt++;\n    }\n    std::string res;\n    for (int i =\
    \ cnt - 1; i >= 0; i--) {\n        res += (char)(v[i] + '0');\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base >= 0\
    \ && base <= 9);\n  std::string result = \"\";\n  long remainder = 0;\n  while\
    \ (x > 0) {\n    remainder = x % base;\n    x = x / base;\n    result += std::to_string(remainder);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp93i9rud8: /tmp/tmp93i9rud8.cpp:26: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::vector<long>\
    \ ans;\n  while (x > 0) {\n    ans.push_back(x % base);\n    x /= base;\n  }\n\
    \  std::string ans_str;\n  for (int i = ans.size() - 1; i >= 0; i--) {\n    ans_str\
    \ += std::to_string(ans[i]);\n  }\n  return ans_str;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    // int len = ceil(log2(x)/log2(base));\n\
    \    std::string ans = \"\";\n    do{\n        ans += std::to_string(x%base);\n\
    \        x /= base;\n    }while(x);\n    std::reverse(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        // assert (x%base <= 9);\n        long\
    \ v = x % base;\n        ans = std::to_string(v) + ans;\n        x /= base;\n\
    \    }\n    if (ans == \"\") ans = \"0\";\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string s;\n\
    \  do {\n    s.push_back(x % base + '0');\n    x /= base;\n  } while (x > 0);\n\
    \  std::reverse(s.begin(), s.end());\n  return s;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base <= 10);\n\
    \  std::vector<int> digits;\n  int res;\n  long x_copy = x;\n  do {\n    res =\
    \ x_copy % base;\n    x_copy /= base;\n    digits.push_back(res);\n  } while (x_copy\
    \ > 0);\n  int len = digits.size();\n  std::string s = \"\";\n  for (int i = len\
    \ - 1; i >= 0; i--) {\n    s += std::to_string(digits[i]);\n  }\n  return s;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string converted;\n\
    \  while (x > 0) {\n    converted.push_back('0' + x % base);\n    x /= base;\n\
    \  }\n  std::reverse(converted.begin(), converted.end());\n  return converted;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string result\
    \ = \"\";\n  while (x > 0) {\n    long r = x % base;\n    result = std::to_string(r)\
    \ + result;\n    x = x / base;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::string ans = \"\";\n    while (x > 0) {\n        ans += '0' + x % base;\n\
    \        x /= base;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string result\
    \ = \"\";\n  if(x == 0) {\n    return result = \"0\";\n  }\n  std::stack<long>\
    \ digits;\n  while(x) {\n    long rem = x % base;\n    digits.push(rem);\n   \
    \ x /= base;\n  }\n  while(!digits.empty()) {\n    result += std::to_string(digits.top());\n\
    \    digits.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s =\
    \ \"\";\n    long q = x;\n    while (q != 0) {\n        long r = q % base;\n \
    \       q = q / base;\n        s = (char)(r + '0') + s;\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x != 0) {\n        res += (x % base) + '0';\n        x /=\
    \ base;\n    }\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp8r9y9dmu: /tmp/tmp8r9y9dmu.cpp:23: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string res =\
    \ \"\";\n\twhile (x) {\n\t\tres = std::to_string(x % base) + res;\n\t\tx /= base;\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base > 1);\n\
    \  assert(base < 10);\n  std::string res;\n  while (x) {\n    res.push_back('0'\
    \ + x % base);\n    x /= base;\n  }\n  std::reverse(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tif (x == 0) {\n\t\
    \treturn \"0\";\n\t}\n\tlong num = x;\n\tlong y = 1;\n\tlong n = 1;\n\tstd::string\
    \ result = \"\";\n\twhile (num != 0) {\n\t\ty = num % base;\n\t\tchar c = y +\
    \ '0';\n\t\tresult = c + result;\n\t\tnum = num / base;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  // x is given positive\
    \ base numbers are less than 10.\n  assert(x >= 0);\n  assert(base >= 2);\n  assert(base\
    \ <= 10);\n  std::string result;\n  while (x > 0) {\n    result += '0' + x % base;\n\
    \    x /= base;\n  }\n  std::reverse(result.begin(), result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    while (x) {\n        s += (x % base) + '0';\n        x /= base;\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  long r;\n  std::string\
    \ s = \"\";\n  while (x != 0) {\n    r = x % base;\n    x = x / base;\n    s =\
    \ s + std::to_string(r);\n  }\n  std::reverse(s.begin(), s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s =\
    \ \"\";\n    std::string numbers = \"0123456789\";\n    while (x > 0) {\n    \
    \    s += numbers[x % base];\n        x /= base;\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpb7p3jo69: /tmp/tmpb7p3jo69.cpp:24: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    //assert(base <=\
    \ 10);\n    //assert(x >= 0);\n    std::string res = \"\";\n    if (x == 0) {\n\
    \        res += \"0\";\n        return res;\n    }\n    while (x != 0) {\n   \
    \     res += std::to_string(x % base);\n        x /= base;\n    }\n    reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    std::stack<int>res;\n    while(x){\n        res.push(x%base);\n        x=x/base;\n\
    \    }\n    while(!res.empty()){\n        s+=std::to_string(res.top());\n    \
    \    res.pop();\n    }\n    return s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert (2 <= base\
    \ && base <= 9);\n  std::string result;\n  while (x > 0) {\n    result += (x %\
    \ base) + '0';\n    x /= base;\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(x >= 0 &&\
    \ base >= 0);\n    std::vector<int> answer_int;\n    std::string answer;\n   \
    \ while (x > 0) {\n        answer_int.push_back(x % base);\n        x /= base;\n\
    \    }\n    while (answer_int.size() > 0) {\n        answer += std::to_string(answer_int.back());\n\
    \        answer_int.pop_back();\n    }\n    return answer;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<int>\
    \ result;\n    do {\n        int digit = x % base;\n        result.push_back(digit);\n\
    \        x /= base;\n    } while (x > 0);\n    std::stringstream ss;\n    for\
    \ (auto &i : result) {\n        ss << i;\n    }\n    return ss.str();\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmprdt4mleg: /tmp/tmprdt4mleg.cpp:28: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res;\n\
    \  while (x) {\n    res += std::to_string(x % base);\n    x /= base;\n  }\n  reverse(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string x_in_base\
    \ = \"\";\n    while (x > 0) {\n        x_in_base += std::to_string(x % base);\n\
    \        x /= base;\n    }\n    std::reverse(x_in_base.begin(), x_in_base.end());\n\
    \    return x_in_base;\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120486
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base >=\
    \ 2 && base <= 9);\n    std::vector<long> num;\n    while (x) {\n        long\
    \ rem = x % base;\n        num.push_back(rem);\n        x /= base;\n    }\n  \
    \  reverse(num.begin(), num.end());\n    std::string s = \"\";\n    for (auto\
    \ &x : num) {\n        s += std::to_string(x);\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  int i = 0;\n  int\
    \ arr[100];\n  std::string r = \"\";\n  if (x == 0) {\n    return \"0\";\n  }\n\
    \  while (x != 0) {\n    arr[i] = x % base;\n    x = x / base;\n    i++;\n  }\n\
    \  for (int j = i - 1; j >= 0; j--) {\n    r += std::to_string(arr[j]);\n  }\n\
    \  return r;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string result = \"\";\n    while (x >\
    \ 0) {\n        long remainder = x % base;\n        x /= base;\n        result\
    \ = std::to_string(remainder) + result;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\t// long double y\
    \ = x;\n\t// std::string res = \"\";\n\t// for (int i = 0; y > 0; ++i) {\n\t//\
    \ \tres = std::to_string(long(y) % base) + res;\n\t// \ty /= base;\n\t// }\n\t\
    // return res;\n\tstd::string s;\n\tfor (; x > 0; x /= base) {\n\t\ts.push_back(x\
    \ % base + '0');\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpkcpym_51: /tmp/tmpkcpym_51.cpp:29: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res;\n\
    \  while (x) {\n    res += (x % base) + '0';\n    x /= base;\n  }\n  reverse(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tif(x==0) return \"\
    0\";\n\tstd::string tmp;\n\twhile(x){\n\t\tif(x%base<10)\n\t\t\ttmp+=(char)(x%base+'0');\n\
    \t\telse tmp+=(char)(x%base-10+'A');\n\t\tx/=base;\n\t}\n\tstd::reverse(tmp.begin(),\
    \ tmp.end());\n\treturn tmp;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret;\n\
    \    while (x) {\n        ret += std::to_string(x % base);\n        x /= base;\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base > 1);\n\
    \  assert(base < 10);\n  std::string result = \"\";\n  while (x > 0) {\n    result\
    \ = std::to_string(x % base) + result;\n    x /= base;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tassert(x >= 0);\n\
    \tassert(base > 0 && base < 10);\n\tstd::string ans = \"\";\n\tdo {\n\t\tlong\
    \ digit = x % base;\n\t\tchar digit_char = '0' + digit;\n\t\tans = digit_char\
    \ + ans;\n\t\tx /= base;\n\t} while (x > 0);\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        x /=\
    \ base;\n        ans = std::to_string(remainder) + ans;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base > 1\
    \ && base < 10);\n    std::stringstream s;\n    while (x != 0) {\n        s <<\
    \ x % base;\n        x /= base;\n    }\n    std::string str = s.str();\n    std::reverse(str.begin(),\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    // write your code\
    \ after this line\n    std::string result = \"\";\n    while (x != 0) {\n    \
    \    int remainder = x % base;\n        result = std::to_string(remainder) + result;\n\
    \        x /= base;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    // write your code\
    \ here.\n    std::string str = \"\";\n    while(x > 0){\n        str += x % base\
    \ + '0';\n        x /= base;\n    }\n    reverse(str.begin(), str.end());\n  \
    \  return str;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    //+++ your code\
    \ here\n\treturn \"\";\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpf_1_t6oi: /tmp/tmpf_1_t6oi.cpp:18: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120486
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::string s = \"\";\n    while (x > 0) {\n        s += '0' + x % base;\n\
    \        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120485
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::stringstream\
    \ ss;\n    while (x > 0) {\n        ss << x % base;\n        x /= base;\n    }\n\
    \    std::string res = ss.str();\n    reverse(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  long r = x % base;\n\
    \  std::string s = std::to_string(r);\n  long q = x / base;\n  if (q != 0) {\n\
    \    s = change_base(q, base) + s;\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s=\"\
    \";\n    while(x){\n        s+=(x%base)+'0';\n        x/=base;\n    }\n    std::reverse(s.begin(),s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    do {\n        s += '0' + x % base;\n        x /= base;\n    } while (x);\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string res = \"\";\n    while (x != 0)\
    \ {\n        res += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::stringstream\
    \ ss;\n  while (x) {\n    ss << x % base;\n    x /= base;\n  }\n  std::string\
    \ s;\n  ss >> s;\n  return s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp45eak7_3: /tmp/tmp45eak7_3.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret;\n\
    \    while (x > 0) {\n        ret.push_back('0' + x % base);\n        x /= base;\n\
    \    }\n    reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(0 < base);\n\
    \    assert(base < 10);\n    std::string num_str = \"\";\n    while (x > 0) {\n\
    \        num_str += '0' + x % base;\n        x /= base;\n    }\n    std::reverse(num_str.begin(),\
    \ num_str.end());\n    return num_str;\n}\nint main() {\n    auto candidate =\
    \ change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\t// todo\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpf0uti8t5: /tmp/tmpf0uti8t5.cpp:17: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x != 0) {\n        res += (x % base) + '0';\n        x /= base;\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res\
    \ = \"\";\n    while (x > 0) {\n        res += (x % base + '0');\n        x /=\
    \ base;\n    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base > 1\
    \ && base < 10);\n    std::string res;\n    while (x) {\n        int rem = x %\
    \ base;\n        res += std::to_string(rem);\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  int y = 0;\n  long\
    \ r = 0;\n  std::string str;\n  // reverse order of x\n  for (long i = x; i >\
    \ 0; i = i / 10) {\n    r = r * 10 + i % 10;\n  }\n  for (long i = r; i > 0; i\
    \ = i / base) {\n    y = y * 10 + i % base;\n  }\n  for (long i = y; i > 0; i\
    \ = i / 10) {\n    str += std::to_string(i % 10);\n  }\n  return str;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpenph4cv3: /tmp/tmpenph4cv3.cpp:31: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string s = \"\
    \";\n  int remainder;\n  while (x > 0) {\n    remainder = x % base;\n    x = x\
    \ / base;\n    s = std::to_string(remainder) + s;\n  }\n  return s;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base <=\
    \ 10);\n    std::string res = \"\";\n    while (x) {\n        res += std::to_string(x\
    \ % base);\n        x /= base;\n    }\n    return std::string(res.rbegin(), res.rend());\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert (x >= 0);\n\
    \  assert (base > 1);\n  assert (base < 10);\n  std::string str;\n  // Complete\
    \ the function\n  while(x>0){\n    str.push_back(x%base+'0');\n    x/=base;\n\
    \  }\n  std::reverse(str.begin(),str.end());\n  return str;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tassert(base < 10);\n\
    \tassert(x > 0);\n\tlong temp = x;\n\tlong res = 0;\n\tlong k = 1;\n\twhile (temp)\
    \ {\n\t\tres += (temp % base) * k;\n\t\tk *= 10;\n\t\ttemp /= base;\n\t}\n\treturn\
    \ std::to_string(res);\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string out;\n\
    \  assert(base < 10);\n  for (; x >= base; x /= base) {\n    out.push_back('0'\
    \ + x % base);\n  }\n  out.push_back('0' + x);\n  std::reverse(out.begin(), out.end());\n\
    \  return out;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    std::string remainder;\n    long quotient = x;\n    while (quotient != 0)\
    \ {\n        remainder = std::to_string(quotient % base);\n        quotient =\
    \ quotient / base;\n        result.insert(0, remainder);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s;\n\t\
    int i = 0;\n\twhile (x > 0) {\n\t\tif (x % base == 1) {\n\t\t\ts.push_back('1');\n\
    \t\t}\n\t\telse {\n\t\t\ts.push_back('0');\n\t\t}\n\t\tx /= base;\n\t}\n\tint\
    \ n = s.size();\n\tfor (int i = 0; i < n / 2; i++) {\n\t\tchar tmp = s[i];\n\t\
    \ts[i] = s[n - i - 1];\n\t\ts[n - i - 1] = tmp;\n\t}\n\treturn s;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpmdrdvwoj: /tmp/tmpmdrdvwoj.cpp:34: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if(x == 0) return\
    \ \"0\";\n    std::string ans = \"\";\n    while(x) {\n        ans = std::to_string(x\
    \ % base) + ans;\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result\
    \ = \"\";\n    while (x != 0) {\n        result = std::to_string(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s =\
    \ \"\";\n    if(x == 0)\n    {\n        s = \"0\";\n        return s;\n    }\n\
    \    while(x != 0)\n    {\n        s = s + std::to_string(x % base);\n       \
    \ x = x / base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\t// remove this line\
    \ and complete the function.\n\tstd::string result = \"\";\n\twhile (x != 0) {\n\
    \t\tlong mod = x % base;\n\t\tx /= base;\n\t\tresult += std::to_string(mod);\n\
    \t}\n\tstd::reverse(result.begin(), result.end());\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res =\
    \ \"\";\n  while (x > 0) {\n    char cur = x % base + '0';\n    res += cur;\n\
    \    x /= base;\n  }\n  std::reverse(res.begin(), res.end());\n  return res;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base >=\
    \ 2);\n    assert(base <= 10);\n    std::string res;\n    while (x != 0) {\n \
    \       res.push_back('0' + x % base);\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<long>\
    \ digits;\n    while (x > 0) {\n        digits.push_back(x % base);\n        x\
    \ /= base;\n    }\n    std::string retval;\n    for (long i = digits.size() -\
    \ 1; i >= 0; i--) {\n        retval += (char)(digits[i] + '0');\n    }\n    return\
    \ retval;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<char>\
    \ results;\n    while (x != 0) {\n        results.push_back(x % base + '0');\n\
    \        x /= base;\n    }\n    std::reverse(results.begin(), results.end());\n\
    \    return std::string(results.begin(), results.end());\n}\nint main() {\n  \
    \  auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  // PUT YOUR CODE\
    \ HERE\n  assert(base > 0 && base < 10);\n  std::string res;\n  while (x > 0)\
    \ {\n    res.push_back(x % base + '0');\n    x /= base;\n  }\n  std::reverse(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string result = \"\";\n    while (x !=\
    \ 0) {\n        result += x % base + '0';\n        x /= base;\n    }\n    return\
    \ std::string(result.rbegin(), result.rend());\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string res =\
    \ \"\";\n\twhile (x != 0) {\n\t\tassert(x % base < 10);\n\t\tres += (x % base)\
    \ + '0';\n\t\tx /= base;\n\t}\n\tstd::reverse(res.begin(), res.end());\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string ans =\
    \ \"\";\n  while (x >= base) {\n    if (x % base == 0) {\n      ans = \"0\" +\
    \ ans;\n    } else {\n      ans = \"1\" + ans;\n    }\n    x /= base;\n  }\n \
    \ if (x % base == 0) {\n    ans = \"0\" + ans;\n  } else {\n    ans = \"1\" +\
    \ ans;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7ba71qqm: /tmp/tmp7ba71qqm.cpp:31: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s = \"\
    \";\n\t// Write your code here\n\t// To print results to the standard output you\
    \ can use std::cout\n\t// Example: std::cout << \"Hello world!\";\n\twhile (x\
    \ > 0) {\n\t\tint rem = x % base;\n\t\tx /= base;\n\t\ts += std::to_string(rem);\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpx3fyokn2: /tmp/tmpx3fyokn2.cpp:27: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if(x==0)\n    \
    \    return \"0\";\n    std::string s=\"\";\n    while(x!=0){\n        s = std::to_string(x%base)\
    \ + s;\n        x/=base;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    while (x) {\n        s += (x % base) + '0';\n        x /= base;\n    }\n\
    \    reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\t// your code here\n\
    \t// back-to-front using modulo operator\n\tstd::string r;\n\tdo {\n\t\tr += ('0'\
    \ + x % base);\n\t\tx /= base;\n\t} while (x);\n\tstd::reverse(r.begin(), r.end());\n\
    \treturn r;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x < 0)\n  \
    \      return \"Invalid Number\";\n    std::string res = \"\";\n    while (x)\
    \ {\n        res += (x % base) + '0';\n        x /= base;\n    }\n    reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res += std::to_string(x % base);\n        x /= base;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpxvm_9me9: /tmp/tmpxvm_9me9.cpp:23: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string ans =\
    \ \"\";\n  while (x > 0) {\n    ans = std::to_string(x % base) + ans;\n    x /=\
    \ base;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret\
    \ = \"\";\n    while (x) {\n        long q = x / base;\n        long r = x % base;\n\
    \        char c = r + '0';\n        ret = ret + c;\n        x = q;\n    }\n  \
    \  //std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpu10fyrlr: /tmp/tmpu10fyrlr.cpp:27: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string ret;\n\
    \  if(x == 0) {\n    ret.push_back('0');\n    return ret;\n  }\n  while(x) {\n\
    \    assert(x >= 0);\n    char c = x % base + '0';\n    x /= base;\n    ret.push_back(c);\n\
    \  }\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string y =\
    \ \"\";\n    long rem;\n    while (x > 0) {\n        rem = x % base;\n       \
    \ y += std::to_string(rem);\n        x /= base;\n    }\n    std::reverse(y.begin(),\
    \ y.end());\n    return y;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    // <Insert code\
    \ below>\n    std::string result;\n    while (x > 0) {\n        result.push_back(x\
    \ % base + '0');\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tassert(base<10);\n\
    \tchar buff[32];\n\tint ptr=0;\n\twhile(x){\n\t\tbuff[ptr++]=x%base+'0';\n\t\t\
    x/=base;\n\t}\n\treturn std::string(buff, ptr);\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp18juyi2j: /tmp/tmp18juyi2j.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(2 <= base\
    \ && base <= 9);\n  std::string str = \"\";\n  while (x != 0) {\n    char digit\
    \ = '0' + x % base;\n    str = digit + str;\n    x /= base;\n  }\n  return str;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        long rem = x % base;\n        x /= base;\n\
    \        ans = std::to_string(rem) + ans;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string ans =\
    \ \"\";\n  while (x > 0) {\n    int r = x % base;\n    x /= base;\n    ans = std::to_string(r)\
    \ + ans;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string out =\
    \ \"\";\n\tlong rem = 0;\n\twhile (x != 0) {\n\t\trem = x % base;\n\t\tout +=\
    \ std::to_string(rem);\n\t\tx /= base;\n\t}\n\tstd::reverse(out.begin(), out.end());\n\
    \treturn out;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string s = \"\";\n    while (x > 0) {\n\
    \        s += char(x % base + '0');\n        x /= base;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s;\n\t\
    while (x > 0) {\n\t\ts += std::to_string(x % base);\n\t\tx /= base;\n\t}\n\tstd::reverse(s.begin(),\
    \ s.end());\n\treturn s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s = \"\
    \";\n\tif (x == 0) {\n\t\ts = \"0\";\n\t}\n\twhile (x > 0) {\n\t\tlong r = x %\
    \ base;\n\t\tx = x / base;\n\t\tstd::string sr = std::to_string(r);\n\t\ts = sr\
    \ + s;\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret;\n\
    \    do {\n        ret.push_back('0' + x % base);\n        x /= base;\n    } while\
    \ (x > 0);\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    while (x > 0) {\n        int digit = x % base;\n        x /= base;\n    \
    \    result += '0' + digit;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string res = \"\";\n    while (x > 0)\
    \ {\n        res = std::to_string(x % base) + res;\n        x /= base;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  // your code goes\
    \ here\n  // 1%2\n  // 9/2\n  int rem;\n  std::string result = \"\";\n  while(x>0){\n\
    \      rem = x%base;\n      x = x/base;\n      result = std::to_string(rem) +\
    \ result;\n  }\n  return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string res = \"\";\n    for (; x > 0;\
    \ x /= base) {\n        res = char('0' + x % base) + res;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result\
    \ = \"\";\n    while (x != 0) {\n        result = std::to_string(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        int rem = x % base;\n        res.push_back(rem +\
    \ '0');\n        x /= base;\n    }\n    // Reverse the string because we built\
    \ the string with digits in reverse order.\n    std::reverse(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    if (x == 0) {\n        result = \"0\";\n    } else {\n        while (x !=\
    \ 0) {\n            long rem = x % base;\n            x = x / base;\n        \
    \    result = std::to_string(rem) + result;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s =\
    \ \"\";\n    while (x) {\n        s += (x % base) + '0';\n        x /= base;\n\
    \    }\n    reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\t//assume base less\
    \ than 10.\n\tassert(base < 10);\n\tstd::string str;\n\tif (x == 0) {\n\t\tstr\
    \ = \"0\";\n\t\treturn str;\n\t}\n\twhile (x != 0) {\n\t\tint remainder = x %\
    \ base;\n\t\tx = x / base;\n\t\tchar c = remainder + '0';\n\t\tstr = c + str;\n\
    \t}\n\treturn str;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert (base >\
    \ 1);\n    std::string result;\n    do {\n        int digit = x % base;\n    \
    \    x /= base;\n        result += (char)('0' + digit);\n    } while (x > 0);\n\
    \    std::reverse(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base > 1);\n\
    \    if (x == 0) {\n        return \"0\";\n    }\n    std::string result;\n  \
    \  while (x != 0) {\n        result.push_back(char(x % base + '0'));\n       \
    \ x /= base;\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string y = \"\
    \";\n  while (x > 0) {\n    int rem = x % base;\n    y = std::to_string(rem) +\
    \ y;\n    x = x / base;\n  }\n  return y;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  long num=x;\n  std::string\
    \ value;\n  while(num)\n  {\n    value.push_back(num%base+'0');\n    num/=base;\n\
    \  }\n  reverse(value.begin(),value.end());\n  return value;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string ret =\
    \ \"\";\n\twhile (x) {\n\t\tret = (char)(x % base + '0') + ret;\n\t\tx /= base;\n\
    \t}\n\treturn ret;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::stringstream\
    \ s;\n  long quotient = x, remainder;\n  do {\n    remainder = quotient % base;\n\
    \    s << remainder;\n    quotient = quotient / base;\n  } while (quotient !=\
    \ 0);\n  std::string result(s.str());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n   char s[32];\n  \
    \ int i = 0;\n   while (x > 0) {\n       s[i++] = '0' + x % base;\n       x /=\
    \ base;\n   }\n   s[i] = '\\0';\n   std::reverse(s, s + i);\n   return std::string(s);\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tassert(0 < base &&\
    \ base < 10);\n\tstd::string res = \"\";\n\twhile (x != 0) {\n\t\tlong rem = x\
    \ % base;\n\t\tres += (rem + '0');\n\t\tx /= base;\n\t}\n\t// Reverse the string\
    \ to get actual conversion.\n\tstd::reverse(res.begin(), res.end());\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string res =\
    \ \"\";\n\tassert(x >= 0);\n\tassert(2 <= base && base <= 9);\n\tif (x == 0) {\n\
    \t\tres = \"0\";\n\t}\n\twhile (x != 0) {\n\t\tres += std::to_string(x % base);\n\
    \t\tx /= base;\n\t}\n\tstd::reverse(res.begin(), res.end());\n\treturn res;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(x >= 0);\n\
    \    assert(base >= 2 && base <= 10);\n    std::string result;\n    while (x >\
    \ 0) {\n        result += x % base + '0';\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans;\n\
    \    while (x > 0) {\n        ans.push_back(x % base + '0');\n        x /= base;\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<int>\
    \ r;\n    while (x) {\n        r.push_back(x % base);\n        x /= base;\n  \
    \  }\n    std::string rr = \"\";\n    for (int i = r.size() - 1; i >= 0; i--)\
    \ {\n        rr += (char)(r[i] + '0');\n    }\n    return rr;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base >=\
    \ 1 && base <= 9);\n    std::string ans = \"\";\n    while (x != 0) {\n      \
    \  ans += (char)('0' + x % base);\n        x /= base;\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::string result = \"\";\n    while (x > 0) {\n        auto digit = x %\
    \ base;\n        x /= base;\n        result = std::to_string(digit) + result;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::vector<char>\
    \ digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};\n  std::string\
    \ s = \"\";\n  if (x == 0) {\n    return \"0\";\n  }\n  long m = 0;\n  while (x\
    \ > 0) {\n    m = x % base;\n    s += digits[m];\n    x = x / base;\n  }\n  return\
    \ std::string(s.rbegin(), s.rend());\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  // Implement this\
    \ function\n  std::string res = \"\";\n  // std::cout << x << std::endl;\n  assert(x\
    \ > 0);\n  assert(base > 0);\n  while (x != 0) {\n    // std::cout << x << std::endl;\n\
    \    res = std::to_string(x % base) + res;\n    x /= base;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(x >= 0);\n\
    \  assert(base >= 2 && base <= 10);\n  std::string res;\n  while (x) {\n    res.push_back(x\
    \ % base + '0');\n    x /= base;\n  }\n  reverse(res.begin(), res.end());\n  return\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    while (x > 0) {\n        s += char('0' + x % base);\n        x /= base;\n\
    \    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res =\
    \ \"\";\n  while (x > 0) {\n    res += std::to_string(x % base);\n    x /= base;\n\
    \  }\n  std::reverse(res.begin(), res.end());\n  return res;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res;\n\
    \  do {\n    res += std::to_string(x % base);\n    x /= base;\n  } while (x);\n\
    \  std::reverse(res.begin(), res.end());\n  return res;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n   std::vector<char>\
    \ v;\n   while (x) {\n      long r = x % base;\n      x /= base;\n      v.push_back('0'\
    \ + r);\n   }\n   return std::string(v.rbegin(), v.rend());\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base >=\
    \ 0);\n    assert(base < 10);\n    std::string result;\n    while (x) {\n    \
    \    result.push_back('0' + x % base);\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<char>\
    \ digits;\n    while (x > 0) {\n        digits.push_back(x % base + '0');\n  \
    \      x /= base;\n    }\n    std::reverse(digits.begin(), digits.end());\n  \
    \  return std::string(digits.begin(), digits.end());\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  char out[100];\n\
    \  long i = 0;\n  while (x > 0) {\n    long r = x % base;\n    x = x / base;\n\
    \    out[i] = r + '0';\n    i++;\n  }\n  std::string s;\n  for (int j = i - 1;\
    \ j >= 0; j--) {\n    s += out[j];\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) {\n\
    \        return \"0\";\n    }\n    std::string value = \"\";\n    while (x !=\
    \ 0) {\n        value += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(value.begin(),\
    \ value.end());\n    return value;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result\
    \ = \"\";\n    assert(base < 10);\n    do {\n        result += std::to_string(x\
    \ % base);\n        x /= base;\n    } while (x > 0);\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    assert(x > 0);\n    std::string result = \"\";\n    while (x) {\n       \
    \ result += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(2 <= base\
    \ && base <= 9);\n    std::string result;\n    while (x > 0) {\n        result\
    \ += std::to_string(x % base);\n        x /= base;\n    }\n    reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base > 1\
    \ && base < 10);\n    if (x == 0) {\n        return \"0\";\n    }\n    std::string\
    \ result;\n    while (x != 0) {\n        result.push_back('0' + x % base);\n \
    \       x /= base;\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    while (x) {\n        s += std::to_string(x % base);\n        x /= base;\n\
    \    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) return\
    \ \"0\";\n    std::string s;\n    for (long n = x; n > 0; n /= base)\n       \
    \ s.push_back(n % base + '0');\n    reverse(s.begin(), s.end());\n    return s;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    std::stack<long> st;\n    assert(base < 10);\n    while (x > 0) {\n     \
    \   st.push(x % base);\n        x /= base;\n    }\n    if (st.empty())\n     \
    \   res = \"0\";\n    while (!st.empty()) {\n        res += st.top() + '0';\n\
    \        st.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::vector<char>\
    \ vc;\n    if(x==0) vc.push_back('0');\n    while(x) {\n        vc.push_back(x%base+'0');\n\
    \        x/=base;\n    }\n    std::reverse(vc.begin(), vc.end());\n    return\
    \ std::string(vc.begin(), vc.end());\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string result;\n\
    \twhile (x > 0) {\n\t\tlong digit = x % base;\n\t\tresult.push_back('0' + digit);\n\
    \t\tx /= base;\n\t}\n\tstd::reverse(result.begin(), result.end());\n\treturn result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n\tstd::string s = \"\
    \";\n\twhile (x > 0) {\n\t\ts += std::to_string(x % base);\n\t\tx /= base;\n\t\
    }\n\tstd::reverse(s.begin(), s.end());\n\treturn s;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::string ret;\n    do {\n        ret += char(x % base + '0');\n      \
    \  x /= base;\n    } while (x > 0);\n    std::reverse(ret.begin(), ret.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(x >= 0);\n\
    \    std::string result = \"\";\n    while (x != 0) {\n        long r = x % base;\n\
    \        x /= base;\n        result += std::to_string(r);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::string digits = \"0123456789\";\n    std::string result = \"\";\n  \
    \  while (x != 0) {\n        result += digits[x % base];\n        x /= base;\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120491
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  assert(base >= 2);\n\
    \  assert(base <= 10);\n  std::string n;\n  while (x > 0) {\n    n = (char)(x\
    \ % base + '0') + n;\n    x /= base;\n  }\n  return n;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string res =\
    \ \"\";\n  // ------ your code here ------\n  while(x){\n    if(x % base == 0){\n\
    \      res += \"0\";\n    }else{\n      res += \"1\";\n    }\n    x /= base;\n\
    \  }\n  std::reverse(res.begin(), res.end());\n  return res;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmptppdfn_g: /tmp/tmptppdfn_g.cpp:28: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string out_str\
    \ = \"\";\n  while (x > 0) {\n    long div = x / base;\n    long rem = x % base;\n\
    \    if (rem < 10) {\n      out_str += std::to_string(rem);\n    } else {\n  \
    \    char c = 'A' + (rem - 10);\n      out_str += c;\n    }\n    x = div;\n  }\n\
    \  // reverse.\n  std::reverse(out_str.begin(), out_str.end());\n  return out_str;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    // write your code\
    \ here\n    std::string ans = \"\";\n    while(x){\n        int rem = x % base;\n\
    \        x /= base;\n        ans = std::to_string(rem) + ans;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n  std::string s;\n\
    \  while (x != 0) {\n    int r = x % base;\n    if (r < 0) r += base;\n    s +=\
    \ std::to_string(r);\n    x = (x - r) / base;\n  }\n  std::reverse(s.begin(),\
    \ s.end());\n  return s;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base < 10);\n\
    \    std::string result;\n    do {\n        result.push_back(static_cast<char>(x\
    \ % base + '0'));\n        x /= base;\n    } while (x);\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string s;\n\
    \    while (x) {\n        s += ('0' + x % base);\n        x /= base;\n    }\n\
    \    reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ret\
    \ = \"\";\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n \
    \       x /= base;\n        ret += std::to_string(digit);\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    assert(base > 1);\n\
    \    std::string result = \"\";\n    while (x > 0) {\n        result += std::to_string(x\
    \ % base);\n        x /= base;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120492
